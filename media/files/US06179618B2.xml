<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06179618B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06179618</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6179618</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22280083" extended-family-id="42113007">
      <document-id>
        <country>US</country>
        <doc-number>09100502</doc-number>
        <kind>A</kind>
        <date>19980619</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09100502</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43171033</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>10050298</doc-number>
        <kind>A</kind>
        <date>19980619</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09100502</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G09B   9/08        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>09</class>
        <subclass>B</subclass>
        <main-group>9</main-group>
        <subgroup>08</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G09B   9/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>09</class>
        <subclass>B</subclass>
        <main-group>9</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>434030000</text>
        <class>434</class>
        <subclass>030000</subclass>
      </main-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G09B-009/00B</text>
        <section>G</section>
        <class>09</class>
        <subclass>B</subclass>
        <main-group>009</main-group>
        <subgroup>00B</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G09B-009/08C</text>
        <section>G</section>
        <class>09</class>
        <subclass>B</subclass>
        <main-group>009</main-group>
        <subgroup>08C</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G09B-009/085</classification-symbol>
        <section>G</section>
        <class>09</class>
        <subclass>B</subclass>
        <main-group>9</main-group>
        <subgroup>085</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G09B-009/003</classification-symbol>
        <section>G</section>
        <class>09</class>
        <subclass>B</subclass>
        <main-group>9</main-group>
        <subgroup>003</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>52</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>8</number-of-drawing-sheets>
      <number-of-figures>10</number-of-figures>
      <image-key data-format="questel">US6179618</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Heightened realism for computer-controlled units in real-time activity simulation</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HOOKS JR JOHN T</text>
          <document-id>
            <country>US</country>
            <doc-number>4463380</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4463380</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>ALBAN EUGENE P</text>
          <document-id>
            <country>US</country>
            <doc-number>4713007</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4713007</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>MCNULTY M CHRISTA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4868755</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4868755</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>RELF RICHARD S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5017141</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5017141</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>ROSENSHEIN LEON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5272652</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5272652</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>IKEUCHI MASAYUKI</text>
          <document-id>
            <country>US</country>
            <doc-number>5435725</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5435725</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>STEPHENS ROCKY C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5490783</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5490783</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>WATSON BRUCE L</text>
          <document-id>
            <country>US</country>
            <doc-number>5616030</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5616030</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>BOTHWELL ROBERT L</text>
          <document-id>
            <country>US</country>
            <doc-number>5632622</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5632622</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>PEASLEY MARK E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5689682</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5689682</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>HAYES CHARLES L</text>
          <document-id>
            <country>US</country>
            <doc-number>5727188</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5727188</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>TZIDON AVIV, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5807109</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5807109</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>MCCLINTIC FRANK</text>
          <document-id>
            <country>US</country>
            <doc-number>6050823</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6050823</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>BABBITT BETTINA A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6053737</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6053737</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>GEIPE MYRON H</text>
          <document-id>
            <country>US</country>
            <doc-number>6077077</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6077077</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>BENNINGTON THOMAS E</text>
          <document-id>
            <country>US</country>
            <doc-number>5240416</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5240416</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Microsoft Corporation</orgname>
            <address>
              <address-1>Redmond, WA, US</address-1>
              <city>Redmond</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>MICROSOFT</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Stone, Jeremy D.</name>
            <address>
              <address-1>Bellevue, WA, US</address-1>
              <city>Bellevue</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Schwegman, Lundberg, Woessner &amp; Kluth, P.A.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Martin-Wallace, Valencia</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      Enhanced realism of a real-time simulator having multiple computer-controlled units results from making the units capable of reacting to only those other units that each of them can be aware of because of their spatial relationships to the unit.
      <br/>
      Awareness is based upon probabilities; it can persist after a relationship changes; and it can be influenced by a unit's designation of a target.
      <br/>
      Each unit selects a target based upon a score incorporating multiple aspects of its tactical situation, and can change targets when the situation changes.
      <br/>
      A unit selects a strategy in response to which of a set of tactical configurations exist between the unit and its target; the strategy can change short of completion when the configuration changes.
      <br/>
      A plan produces guidance commands from the high-level strategy.
      <br/>
      The guidance commands are converted into control settings for guiding the subject unit using a physics engine for simulating the physical dynamics of the unit.
      <br/>
      The control settings can interact with each other under certain conditions.
      <br/>
      The time rate at which each computer-controlled unit performs the above operations varies with the tactical situation, and can be different for different units.
      <br/>
      The operator for each unit precomputes some data required for multiple calculations in performing the operations.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
    <p num="1">
      This application is related to applications Ser.
      <br/>
      No. 09/099,573 , Ser.
      <br/>
      No. 09/099,923 , Ser.
      <br/>
      No. 09/100,694 , Ser.
      <br/>
      No. 09/100,792 , and Ser.
      <br/>
      No. 09/099,703 , all entitled "HEIGHTENED REALISM FOR COMPUTER-CONTROLLED UNITS IN REAL-TIME ACTIVITY SIMULATION" and all filed on even date herewith.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">The present invention relates to electronic data processing, and more particularly concerns the real-time simulation of skill-based activities such as air-to-air combat.</p>
    <p num="3">
      Designing a real-time air-combat simulator is full of challenges.
      <br/>
      One of them is developing a compelling artificial intelligence (AI) for allowing the computer to control the actions of simulated aircraft and other entities that try to shoot the human player out of the sky. (For brevity, all such entities will be referred to as "AI units.")
    </p>
    <p num="4">
      Real-time simulators demand the utmost from a computer.
      <br/>
      There is never enough time to perform all the calculations required to simulate the motions of the player's aircraft, other aircraft visible to the player, and complex terrain, and to render their images on a display screen.
      <br/>
      Where compromises are necessary, conventional simulators tend to skimp on the realism of the AI units.
      <br/>
      The purpose of the AI units is to mimic human-like behavior as closely as possible.
      <br/>
      Playing present air-combat products quickly reveals weaknesses in the behavior of simulated enemy pilots.
      <br/>
      They feel computerish.
      <br/>
      They perform in ways which are both better and worse than human pilots.
      <br/>
      Their incredible ability to react to aircraft dead astern of them and to maneuver instantaneously is frustrating to players.
      <br/>
      On the other hand, human players quickly learn to take advantage of their simplistic tactics, turning the game into a turkey shoot.
    </p>
    <p num="5">
      Conventional AI-unit simulators lack realism in the area of situational awareness, the ability to see and thus react to other units in the simulated region.
      <br/>
      The common expedient in air combat is to maintain a list of the three-dimensional position of every aircraft in the combat zone, and to make the full list available to every AI unit for target selection, attack planning, and evasive maneuvers.
      <br/>
      This approach lends a disconcerting omniscience to their ability to track large numbers of other aircraft in furballs, where many aircraft engage each other from various attitudes.
      <br/>
      Real pilots can see any aircraft in a cone ahead of them, but awareness drops off for aircraft approaching from the flank or from above and below.
      <br/>
      Bogeys at six o'clock should be as invisible to AI units as they are to human pilots.
      <br/>
      Another aspect of situational awareness concerns persistence.
      <br/>
      Even though another aircraft is less visible out of the forward cone, human pilots remain aware of other aircraft that drop astern from a sector of higher visibility, and continue to react to their presence for some period of time.
      <br/>
      Further, it is characteristic of human pilots to fixate upon a targeted aircraft, paying more attention to it and paying less attention to other aircraft.
      <br/>
      It should be easier for the human player to jump a simulated enemy unit when it is pursuing another target.
      <br/>
      It should be harder for the human player to duck a pursuing enemy AI unit.
    </p>
    <p num="6">
      Target selection is also a shortcoming of conventional simulators.
      <br/>
      When many targets are available in a furball, present-day AI units employ crude or even random factors for designating one of them to engage.
      <br/>
      And, once locked on to a specific target, contemporary AI units doggedly pursue it, refusing to acquire a more favorable target.
      <br/>
      This defect often allows human players to consider otherwise suicidal tactics to approach an enemy unit within point-blank firing range.
    </p>
    <p num="7">
      A shortcoming in the basic design of simulators for many-unit simulators is to enhance the realism of the player-controlled aircraft or other unit at the expense of the computer-controlled units.
      <br/>
      For example, each AI unit might be allocated the same fixed amount of computer resources, or all AI units given exactly the same skill level.
      <br/>
      Where many computer-controlled units are attempted, it is easy to justify skimping on the physics of their simulation.
      <br/>
      Whereas the player's unit is simulated with a full physics engine that mimics many details of the unit's actual response to their control inputs, the AI units are guided through simpler simulation techniques, usually through more or less direct control of their flight paths.
      <br/>
      The player's unit gets the full treatment; the AI units do not, and suffer for it.
    </p>
    <p num="8">
      Enhancing the realism of computer-controlled AI units is not straightforward.
      <br/>
      The first problem is, of course, is to design their behaviors to be more realistic, as discussed above.
      <br/>
      Then, given the computation-intensive nature of real-time simulation, the next problem is to implement those behaviors more efficiently.
      <br/>
      Simulators operate in cycles, updating the current state of objects in the system during each cycle to produce a new state for the next cycle.
      <br/>
      Conventionally, the parameters of the AI units are recalculated in a think interval that remains constant for all parameters and that is the same for all units.
      <br/>
      In a complex simulation involving increased computation for many units, each of which can be in different circumstances, this simple scheme wastes valuable time and resources.
      <br/>
      Slowly changing parameters are updated more often than necessary, while units in the thick of the action react sluggishly for lack of timely updates.
    </p>
    <p num="9">
      Realism of AI units suffers further from crude simulation of their maneuvers.
      <br/>
      Newer products in this genre employ sophisticated physics engines for recreating the actual characteristics of the player's aircraft.
      <br/>
      Yet the computer-controlled units remain directed by simpler commands to proceed in a certain direction at a certain speed.
      <br/>
      This technique results in jerky, mechanical actions, and in physically impossible maneuvers.
      <br/>
      Vectoring routines can include artificial constraints such as limits on turn rates, but the results are often less than believable.
      <br/>
      AIso, the direct control used in conventional simulators allows little in the way of modeling different enemy aircraft.
      <br/>
      AIthough the user of a player-controlled simulator such as Microsoft Flight Simulator.RTM. can choose among a wide variety of aircraft types, combat-type simulators are much more restricted.
      <br/>
      The computer-controlled AI units are either fixed or restricted to a few types having unrealistic behaviors.
    </p>
    <p num="10">
      Unrealistic actions are most noticeable during extreme maneuvers of an AI unit.
      <br/>
      For example, a computer-generated tactical command for an aircraft to descend sharply while in a bank may produce a totally undesired maneuver, directing the craft in a wholly different direction than that intended.
      <br/>
      Even in the absence of guidance commands, maintaining a proper pitch attitude during turning and banking is difficult.
      <br/>
      Another aspect that is generated unrealistically in current simulators concerns the way in which an AI unit turns to follow a target.
      <br/>
      Computers single-mindedly point an AI aircraft at its target as quickly as possible and follow it as closely as possible.
      <br/>
      Even relatively inexperienced players see that technique as artificial.
    </p>
    <p num="11">
      The above discussion focuses upon air-combat simulators as an example of the class of simulators that employ one or more units or entities controlled by the computer, as well as a simulated unit controlled by a player or other user.
      <br/>
      This genre includes other competitive scenarios such as BEM (bug-eyed monster) adventure games and NASCAR races.
      <br/>
      There is little difference between simulators for entertainment and those for skill training such as driver education.
      <br/>
      AIl but the simplest simulation applications have less realism than their designers wish for, and the need for enhanced realism for the computer- controlled AI units is as intense as that for the player-controlled unit.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="12">
      The present invention provides systems and methods for enhancing the realism of the computer-controlled AI units of a multi-unit simulator for competitive gaming and other applications.
      <br/>
      That is, the computer-controlled units behave more like human-controlled units would in the same environment, and their simulated units perform more like the vehicles or other physical units that they model.
    </p>
    <p num="13">
      An individual situational awareness concept for each AI unit replaces the global awareness concept of conventional simulators.
      <br/>
      Rather than allowing all AI units to observe all other units in the simulated environment all the time, the invention maintains separate lists or records for each AI unit indicating which other units that unit can for each AI unit can react to.
      <br/>
      An awareness filter maintains the list for each unit by periodically computing relationships between that unit and the other units, and adds or drops the other units based at least partially upon the computed relationships.
      <br/>
      Additional optional factors for possible inclusion on the awareness list of a unit list are the history of past relationships of the other units, and the activity in which the subject unit itself is engaged.
      <br/>
      Situational awareness removes the apparent omniscience of the AI units that makes them appear less realistic.
    </p>
    <p num="14">
      In order to increase the realism of situational tactics employed by AI units, another aspect of the invention employs the computed relationships among the units in the simulated environment to select a tactical course of action, for example selecting a target to pursue.
      <br/>
      The computer periodically generates a score or other evaluation for the other units in the area from the computed relationships, then selects a course of action, such as designating one of the units as a target, based upon the situational scores of those units.
      <br/>
      To avoid becoming fixated upon a single objective, reselection of a tactical objective can occur in response to periodic recalculation of the relationships and the scores.
      <br/>
      Further, the AI units can adopt individual strategies for pursuing a target or other goal, and can change the strategies short of their goals in response to changing tactical situations.
    </p>
    <p num="15">
      The above and other realism improvements require ways to perform large numbers of calculations within the available cycle times of a simulator.
      <br/>
      Evaluating the awareness, targeting, and strategy relationships is especially burdensome.
      <br/>
      However, some of the more numerically intensive calculations can be precomputed and cached, rather than being recalculated each time they are needed during a cycle.
      <br/>
      In addition, the time interval between successive calculations of the simulation for certain aspects of the computer-controlled AI units can be individually varied for different ones of the AI units.
      <br/>
      A situational complexity measure is produced for the environment of each unit, and the calculation cycle or "think rate" for certain parameters is varied in response to the complexity of that particular unit at that particular moment.
      <br/>
      Accordingly, an AI unit that is closing in to fire at a target, for example, recalculates its control outputs more frequently than when it is farther away, and more frequently than another AI unit that is farther away from the action.
    </p>
    <p num="16">
      Another aspect of the invention simulates the computer-controlled AI units from a physics engine in the same manner that the human user's unit is simulated.
      <br/>
      Rather than employing the guidance outputs of the AI control module directly to set the position, speed, and other parameters of an image of an AI unit, a translator converts the AI operator's guidance outputs for particular desired parameters into control outputs that are fed into a physics engine of the same general type as that used to simulate the player's unit.
      <br/>
      In this manner, the AI units follow exactly the same physical laws as the player's unit.
      <br/>
      Optionally, the simulator is the same one used for the player's unit, and different kinds of AI units can be simulated merely by plugging different physical models into the simulator at different times during the simulation cycles.
    </p>
    <p num="17">
      Actual physical modeling of the AI units, however, further increases the computational load on the simulator to derive realistic control outputs from the simpler guidance parameters.
      <br/>
      Yet another facet of the invention employs a relatively simple method for translating the guidance parameters, but modifies these methods when an AI unit performs extreme maneuvers.
      <br/>
      One method of this kind is to modify particular control output settings during certain types of maneuver, that is, while certain states or control settings of the AI unit exist.
      <br/>
      Another method is to add one or more control inputs to the simulator beyond those available for the players to control their units.
      <br/>
      The guidance controller then engages these controls in certain tactical situations.
      <br/>
      In this way, applying more complex control methods only part of the time eases the computational load while enhancing realism.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="18">
      FIG. 1 is a block diagram of a computer-system environment suitable for hosting the present invention.
      <br/>
      FIG. 2 is a block diagram of a simulator for carrying out the invention.
      <br/>
      FIG. 3 is a flowchart of the overall operation of the simulator of FIG. 2.
      <br/>
      FIG. 4, comprising FIGS. 4A-4B, is a situational diagram of multiple simulated objects.
      <br/>
      FIG. 5 describes certain tactical configurations for strategy selection according to the invention.
      <br/>
      FIG. 6 illustrates control by body pitch axis according to the invention.
      <br/>
      FIG. 7, comprising FIGS. 7A-7C, is a flowchart showing the operation of the simulator of FIG. 2 according to the invention.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="19">
      The following detailed description of preferred embodiments refers to the accompanying drawings that form a part hereof, and shows specific embodiments of the invention.
      <br/>
      These embodiments are illustrative, not limiting.
      <br/>
      Other embodiments, including other structures and methods, will appear to those skilled in the art.
      <br/>
      Rather, the scope of the present invention is defined only by the appended claims.
      <br/>
      In particular, those in the art will readily apprehend a wide range of applications of the inventive concepts beyond the field of air-combat simulation for entertainment and instructive purposes.
      <br/>
      The first digit of three-digit reference numerals generally indicates the drawing figure in which the numeral first appears; two-digit numbers come from FIG. 1.
    </p>
    <p num="20">Illustrative Operating Environment</p>
    <p num="21">
      FIG. 1 provides a brief, general description of a suitable computing environment in which the invention may be practiced.
      <br/>
      The invention will hereinafter be described in the general context of computer-executable instructions such as program modules executed by a personal computer (PC); however, other environments are possible.
      <br/>
      Program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types.
      <br/>
      Those skilled in the art will appreciate that the invention may be practiced with other computer-system configurations, including hand-held devices, multiprocessor systems, microprocessor-based programmable consumer electronics, network PCS, minicomputers, mainframe computers, and the like.
      <br/>
      The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices linked through a communications network.
      <br/>
      In a distributed computing environment, program modules may be located in both local and remote memory storage devices.
    </p>
    <p num="22">
      An exemplary system for implementing the invention employs a general-purpose computing device in the form of a conventional personal computer 20, which includes processing unit 21, system memory 22, and system bus 23 that couples the system memory and other system components to processing unit 21.
      <br/>
      System bus 23 may be any of several types, including a memory bus or memory controller, a peripheral bus, and a local bus, and may use any of a variety of bus structures.
      <br/>
      System memory 22 includes read-only memory (ROM) 24 and random-access memory (RAM) 25. A basic input/output system (BIOS) 26, stored in ROM 24, contains the basic routines that transfer information between components of personal computer 20.
      <br/>
      BIOS 24 also contains start-up routines for the system.
      <br/>
      Personal computer 20 further includes hard disk drive 27 for reading from and writing to a hard disk (not shown), magnetic disk drive 28 for reading from and writing to a removable magnetic disk 29, and optical disk drive 30 for reading from and writing to a removable optical disk 31 such as a CD-ROM or other optical medium.
      <br/>
      Hard disk drive 27, magnetic disk drive 28, and optical disk drive 30 are connected to system bus 23 by a hard-disk drive interface 32, a magnetic-disk drive interface 33, and an optical-drive interface 34, respectively.' The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for personal computer 20.
      <br/>
      Although the exemplary environment described herein employs a hard disk, a removable magnetic disk 29 and a removable optical disk 31, those skilled in the art will appreciate that other types of computer-readable media which can store data accessible by a computer may also be used in the exemplary operating environment.
      <br/>
      Such media may include magnetic cassettes, flash-memory cards, digital versatile disks, Bernoulli cartridges, RAMs, ROMs, and the like.
    </p>
    <p num="23">
      Program modules may be stored on the hard disk, magnetic disk 29, optical disk 31, ROM 24 and RAM 25.
      <br/>
      Program modules may include operating system 35, one or more application programs 36, other program modules 37, and program data 38.
      <br/>
      A user may enter commands and information into personal computer 20 through input devices such as a keyboard 40 and a pointing device 42.
      <br/>
      Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like.
      <br/>
      These and other input devices are often connected to the processing unit 21 through a serial-port interface 46 coupled to system bus 23; but they may be connected through other interfaces not shown in FIG. 1, such as a parallel port, a game port, or a universal serial bus (USB).
      <br/>
      A monitor 47 or other display device also connects to system bus 23 via an interface such as a video adapter 48.
      <br/>
      In addition to the monitor, personal computers typically include other peripheral output devices (not shown) such as speakers and printers.
    </p>
    <p num="24">
      Personal computer 20 may operate in a networked environment using logical connections to one or more remote computers such as remote computer 49.
      <br/>
      Remote computer 49 may be another personal computer, a server, a router, a network PC, a peer device, or other common network node.
      <br/>
      It typically includes many or all of the components described above in connection with personal computer 20; however, only a storage device 50 is illustrated in FIG. 1.
      <br/>
      The logical connections depicted in FIG. 1 include local-area network (LAN) 51 and a wide-area network (WAN) 52. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.
    </p>
    <p num="25">
      When placed in a LAN networking environment, PC 20 connects to local network 51 through a network interface or adapter 53.
      <br/>
      When used in a WAN networking environment such as the Internet, PC 20 typically includes modem 54 or other means for establishing communications over network 52.
      <br/>
      Modem 54 may be internal or external to PC 20, and connects to system bus 23 via serial-port interface 46.
      <br/>
      In a networked environment, program modules depicted as residing within 20 or portions thereof may be stored in remote storage device 50.
      <br/>
      Of course, the network connections shown are illustrative, and other means of establishing a communications link between the computers may be substituted.
    </p>
    <p num="26">The Simulator</p>
    <p num="27">
      FIG. 2 is a high-level diagram of a simulator 200 for carrying out the invention.
      <br/>
      The simulator is implemented as an application program 36, FIG. 1.
      <br/>
      The form of implementation is not important, however; it could also take the form of dedicated hardware or a combination of hardware and software.
      <br/>
      The following description refers to the simulated aircraft or other unit that is controlled by a human user at the computer as the "player." The computer-controlled aircraft are "AI" (artificial intelligence) units.
      <br/>
      When a description focuses upon the control of a single AI unit, that unit is called the "subject AI unit." An "opponent" is another unit, the human player or another AI unit, that is the object of attention of the subject AI unit; if the subject unit is attacking the opponent, then the opponent is a "target." The terms "friendly" and "enemy" are in relationship to the unit under discussion. (In this implementation, every AI unit knows the status of all other units, and none are unidentified.
      <br/>
      There are friendlies and bandits; there are no bogeys.
      <br/>
      Not yet.)
    </p>
    <p num="28">
      Simulators transform data representing a current state of the simulated units into a subsequent state according to models specifying certain characteristics of the units, rules governing actions in the simulated world, and--optionally--data concerning other objects in the simulated environment.
      <br/>
      Transformations occur in a cycle that defines an increment of real or simulated time.
      <br/>
      In simulator 200, blocks 210 represent the a conventional portion devoted to the human player.
      <br/>
      The player manipulates physical controls 211 to produce control outputs 212.
      <br/>
      Controls for an aircraft include items such as ailerons, elevators, and a throttle.
      <br/>
      Block 214 holds values of data representing the state of the player's unit for the current simulation cycle.
      <br/>
      For example, the state of an aircraft includes current bank and pitch angles, speed, flight path, and many more parameter values.
      <br/>
      Block 214 also receives the control outputs 212.
      <br/>
      Block 213 is a model comprising values for a large number of coefficients and parameters specifying the characteristics of the player's aircraft.
      <br/>
      Many simulators allow the selection of different models for the player's unit.
    </p>
    <p num="29">
      A simulation program or physics engine 220 implements the rules of the simulation: in this case, differential equations representing the physical laws that govern the motion of the simulated units through the air.
      <br/>
      Most simulators of this type employ difference equations to approximate the motions over discrete time intervals.
      <br/>
      That is, engine 220 receives state data from block 214 for the difference equations during the current simulation cycle.
      <br/>
      It also receives coefficient and parameter values from model 220 for specifying other parts of the equations.
      <br/>
      The physics engine plugs all this data into the equations to produce parameter values and other data representing the next time period of the simulation.
      <br/>
      This data feeds back to player-state block 214 on line 215 to update the state for the next cycle.
    </p>
    <p num="30">
      Block 230 integrates data for the current player state 214 with environmental data from a terrain or scenery database 231 and with data representing other units in the area.
      <br/>
      Line 232 carries data for all aspects of the simulated scene to a conventional rendering module 233, which prepares a visual image for display 234.
      <br/>
      Audio data, not shown, is usually also employed to produce engine sounds, gunfire, and so forth.
    </p>
    <p num="31">
      The AI units in this embodiment simulate other aircraft, both friendly and enemy, in a combat environment.
      <br/>
      AI blocks 240 include a separate operator 241, indicated by the shadowed blocks, for each AI unit within the environment.
      <br/>
      The number of these units can of course change during the simulation.
      <br/>
      The purpose of each operator 241 is to produce control-position outputs for that unit.
      <br/>
      As described more fully below, the control outputs 242 are actual settings for ailerons, elevators, and so forth, rather than simplified conventional commands such as "increase altitude" or "turn right at a 10 (degree) /second rate." Each AI aircraft or unit has a block 244 for holding its current state, and this block holds the same kinds of information that block 214 includes for the player's aircraft.
      <br/>
      That is, each block 244 contains the current values of parameters representing the status of one of the AI units for the current simulation cycle, such as current bank and pitch angles, speed, flight path, and many more.
      <br/>
      Rather than producing an abbreviated simulation through a simplified process not using physical modeling, each AI state block 244 is essentially the same as player state block 214.
      <br/>
      Each AI unit also has its own model 243, which functions in the same way as the player's model 213.
      <br/>
      This state and the model data receive the same degree of simulation as does the player's aircraft; blocks 243 and 244 employ the same physics engine as that employed for the player's unit.
      <br/>
      Physics engine 220 updates the current state of each AI unit on line 245.
      <br/>
      The player and the AI units can share the same software or hardware engine, each unit can call an instance of the engine, or the system can provide multiple engines.
    </p>
    <p num="32">
      The AI states are integrated into the overall view state 230, so that rendering module 233 produces an image of these units also on display 234.
      <br/>
      The human player reacts to the changing situation in response to a visually displayed scene.
      <br/>
      The AI units receive global situation data 235 representing the positions, speeds, etc. of other units in the area.
      <br/>
      However, each AI operator can only react to a subset of the global data, as explained below.
    </p>
    <p num="33">
      The discrete interval of time, or cycle, of the simulation is set by a clock 250.
      <br/>
      The time rate at which the states 214, 230, and 244 are updated is referred to as the frame rate 251, typically 20-30 frames per second.
      <br/>
      This rate controls physics engine 220, and usually also rendering module 233 and display 234.
      <br/>
      A player inputs new control settings at any time; the AI operator 241 reads them at the frame rate, and may effectuate them at the frame rate or at a lower rate.
      <br/>
      However, the AI operators perform some of their calculations at a different rates at different times, and at different rates for different units, as described in connection with FIG. 3.
    </p>
    <p num="34">
      FIG. 3 further details a representative operator 300 of the AI operators 241, FIG. 2.
      <br/>
      Situational data 235 maintains a global unit list or other record 301 of the coordinates and other information for all units in the simulated world, both the player's aircraft and all the AI units.
      <br/>
      Each unit has a separate entry in list 301.
      <br/>
      The operator for each AI unit includes a separate awareness filter 310 that passes the coordinates of only some of the other units to a unit sight list or other form of record 311 for the AI unit that operator 300 manages.
      <br/>
      Unit sight list 311 has a separate entry for each unit that the subject AI is aware of (and thus can react to).
      <br/>
      Each entry contains the position of the unit and other information taken from its entry in the global unit list.
      <br/>
      Each unit sight list entry also includes other tactical information, as described below.
    </p>
    <p num="35">
      Target selector block 320 can designate the player's aircraft or one of the other AI aircraft as a target to be pursued, based upon their information in unit sight list 311.
      <br/>
      That is, each AI unit chooses a target only from among the other aircraft that it is aware of, namely those on its own sight list 311.
      <br/>
      A tactical condition score 322 determines which other unit will be designated as a target.
    </p>
    <p num="36">
      Strategy selector 321 maneuvers the AI unit to react to the selection of a target.
      <br/>
      Selector 321 may also respond to other situational data from global list 235, such as how close the attacking AI unit is to the ground, and whether any friendly units are in its line of fire.
      <br/>
      Strategy selector chooses among a set of possible overall strategies using a stored table or list 323 as discussed in connection with FIG. 5.
    </p>
    <p num="37">Control modules 330-360 respond to the foregoing blocks to direct the path of the subject AI unit in response to the selection of a target and a strategy with respect to that target.</p>
    <p num="38">
      Plan generator 330 formulates a plan for carrying out the selected strategy, from which guidance module 340 produces a stream of high-level guidance commands for executing the selected strategy.
      <br/>
      The commands are grouped as follows:
    </p>
    <p num="39">(A) Aileron commands</p>
    <p num="40">
      (1) Desired heading,
      <br/>
      (2) Desired bank angle,
      <br/>
      (3) Desired roll rate.
    </p>
    <p num="41">
      (B) Elevator commands
      <br/>
      (1) Desired altitude,
      <br/>
      (2) Desired pitch angle,
      <br/>
      (3) Desired pitch rate,
    </p>
    <p num="42">
      (C) Throttle commands
      <br/>
      (1) Desired airspeed,
      <br/>
      (2) Desired throttle percentage.
      <br/>
      At each think time, block 340 calculates and issues one guidance command from the aileron group and one from the elevator group; it optionally also issues one command from the throttle group.
      <br/>
      For example, block 340 can calculate and issue "Heading 090 (degree) " and "Pitch up12 (degree) /second" commands at the same time, but it cannot issue "Heading 090 (degree) " and "Bank right 60 (degree) " at the same time.
      <br/>
      New guidance commands from block 340 override previously issued commands.
    </p>
    <p num="43">
      Guidance system 340 receives the guidance commands for that AI unit, and converts them to low-level control-surface commands 342-346 of the same type that a human player might input to player controls 211, FIG. 2.
      <br/>
      These outputs do not, however, directly control the positions of the control surfaces.
      <br/>
      Instead, a translator 350 converts the command outputs 342-345 into settings 351-354 for each of the controls of a real aircraft of the type specified by model 243, FIG. 2.
      <br/>
      Converter 350 includes proportional integral/derivative (PID) controllers of a conventional type for each control of the simulated AI aircraft.
      <br/>
      That is, aileron PID controller 355 converts a command 342 to turn or bank the AI unit into a changing aileron position 351 according to the physics of the AI unit.
      <br/>
      Other PID controllers 356-358 perform the same function for other standard aircraft controls, such as elevators, rudder, and throttle.
      <br/>
      For different types of simulated units, such as helicopters, race cars, and so forth, the number of types of controls will differ.
    </p>
    <p num="44">
      Each controller 355-358 produces an output setting 351-354 for its own control surface position without regard to the state of the other controls.
      <br/>
      A human pilot, however, manipulates the controls as a set.
      <br/>
      The state of one control, and/or the aircraft's reaction to that state, frequently influences the setting of a different control.
      <br/>
      A turning aircraft, for example, needs back pressure on the stick to maintain altitude during a turn; the water speed of a boat can have a large effect upon the rudder angle required for a turn.
      <br/>
      Accordingly, modifier 360 forms a part of converter 350.
      <br/>
      Each of the final control positions 361-363 for the ailerons, elevators, and rudder are determined by the unmodified intermediate settings 351-353 of any or all of these controls, as well as by other inputs such as 364.
      <br/>
      Inputs 364 may represent functions of the raw control settings 342-344, previous settings of the controls, or any other parameters.
      <br/>
      Modifier 360 can act upon settings 351-353 continuously, or only at certain times or under certain conditions.
      <br/>
      Several examples of particular modifications are discussed hereinafter.
    </p>
    <p num="45">
      Think-rate module 370 receives the system frame rate time-interval signal 252, and determines the rate 351 at which operator 300 performs some of its calculations.
      <br/>
      That is, certain conditions of the environment of that AI unit, as determined by strategy selector 321, may cause think-rate generator 370 to output a think-rate signal 371 varying from the system frame rate (as high as 30 per second) down to once every second or less.
      <br/>
      In this embodiment, AI units think once per second under normal circumstances, increasing to three times per second and to the frame rate under certain conditions.
      <br/>
      Awareness filter 310 operates at a fixed 4-second interval, although it too could run at a variable rate if desired.
    </p>
    <p num="46">Situational Awareness</p>
    <p num="47">
      One of the hardest tasks of air combat is to see the enemy.
      <br/>
      Situational awareness is the knowledge of the position and actions of other aircraft.
      <br/>
      Giving the computer-controlled AI aircraft units the same type of situational awareness as a human pilot greatly enhances the realism of a simulation.
    </p>
    <p num="48">
      A human pilot can easily spot another aircraft in front.
      <br/>
      It is more difficult to see a plane to the side, above, or below.
      <br/>
      It is almost impossible to spot a plane in a tail-chase position.
      <br/>
      Therefore, the volume around each AI unit is divided into sectors.
      <br/>
      FIG. 4A shows a top view of four sectors around the AI unit 400, in terms of the angle off its nose (AON) 401. Front sector 410 extends from AON=0 (degree)  to  +- 45 (degree)  off the nose.
      <br/>
      Side sectors 420 extend from  +- 45 (degree)  to  +- 135 (degree) . Rear sector 430 occupies remaining quadrant.
      <br/>
      FIG. 4B shows the sectors in elevation.
      <br/>
      Side sectors 420 extend from an angle of elevation AOE=0 (degree)  with respect to aircraft 400 to  +- 90 (degree) ; that is from directly above the unit to directly below it.
      <br/>
      Front sector 410, however, is divided into three pieces.
      <br/>
      A direct-front sector 411 extending from AOE=0 (degree)  to 45 (degree)  above and below the nose.
      <br/>
      An above-front sector 412 runs from AOE=+45 (degree)  to +90 (degree) , and a below-front sector 413 runs from -45 (degree)  to -90 (degree) . Rear sector 430 is divided similarly.
      <br/>
      Direct-rear sector 431 extends from 15 (degree)  below the nose to 30 (degree)  above.
      <br/>
      Above-rear sector 432 runs from AOE=+30 (degree)  to directly overhead, and below-rear sector 433 runs from -15 (degree)  to -90 (degree) . Table 1 below summarizes the locations of the eight sectors in terms of horizontal directions (AON) and vertical directions (AOE).
    </p>
    <heading>-- TABLE I</heading>
    <p num="49">
      -- AON                     AOE         Sector
      <br/>
      -- -45 to +45   -45 to +45 Direct Front
      <br/>
      -- -45 to +45   +45 to +90 Above Front
      <br/>
      -- -45 to +45   -90 to -45 Below Front
      <br/>
      --  +45 to +135 Any         Side
      <br/>
      -- +135 to +225  -15 to +30 Direct Rear
      <br/>
      -- +135 to +225  +30 to +90 Above Rear
      <br/>
      -- +135 to +225  -90 to -15 Below Rear
      <br/>
      --  -45 to -135 Any         Side
    </p>
    <p num="50">In this example, the maximum visual range is 8km from each unit; that is, each AI unit cannot see another unit, human or AI, farther away than 8km, regardless of its sector.</p>
    <p num="51">
      The sector location determines whether a given AI unit sees another unit or not.
      <br/>
      If an AI unit sees another unit, its unit sight list 311, FIG. 3, contains that other unit's position, altitude, speed, heading, and other properties, such as identity.
      <br/>
      The way in which the AI unit becomes aware of other units is through a probability table.
      <br/>
      Table II below is an example of such a probability.
      <br/>
      The player can specify each AI unit separately into one of a number of skill categories.
      <br/>
      Thus, for example, a rookie AI unit always sees another aircraft in its direct-front sector, that is, with probability 100%.
      <br/>
      For other units in its above-front sector, the probability drops to 70%, and only 1% of other units in the direct-rear and below-rear sectors are seen.
      <br/>
      The probability values fall off quickly as units move toward the rear, and they fall off much more quickly for lower skill levels.
    </p>
    <heading>-- TABLE II</heading>
    <p num="52">
      -- Sector      Rookie      Beginner  Intermed.   Veteran Ace
      <br/>
      -- Direct Front 100    100  100    100  100
      <br/>
      -- Above Front 70          75        80          85      90
      <br/>
      -- Side        70          75        80          85      90
      <br/>
      -- Below Front 60          65        70          75      80
      <br/>
      -- Above Rear   2      5   10          20      25
      <br/>
      -- Direct Rear  1      2    5     10      20
      <br/>
      -- Below Rear   1      1    5     10      10
    </p>
    <p num="53">
      The values in Table II are not absolute probabilities that an AI unit will see or not see another unit during the period the other unit spends in a given sector.
      <br/>
      In real life, the more time a unit spends in any sector, the more likely it is to be spotted.
      <br/>
      Accordingly, the table values are applied once during every time interval that the AI unit's tactics are reevaluated.
      <br/>
      This time, derived from the heartbeat interval 351, FIG. 3, is called the sighting-round interval.
      <br/>
      Therefore, if a detection probability is 10%, there is a 10% chance that an AI unit will spot another unit when it enters the sector.
      <br/>
      After the next sighting round, the cumulative sighting probability rises to 19%; after the third round, it becomes 27%, then 34%, and so forth.
    </p>
    <p num="54">
      Table II contains relative values, not absolute probabilities.
      <br/>
      For example, the table implies that rookies are 50 to 100 times less likely to see aircraft behind them than those in front of them, and that aces are ten times as likely to see other aircraft directly behind them than are rookies.
      <br/>
      Converting these relative numbers to realistic probable perception times requires a calibration factor.
      <br/>
      One way to achieve this is to choose a time duration for which an AI unit of a given skill level would have a 50% probability of spotting another aircraft in a certain sector, and then to adjust the sighting percentage to yield the desired average detection time.
      <br/>
      The calibration factor is then applied to all the percentages in table 450 to produce an absolute probability for each sector.
      <br/>
      Its value CF, which can if desired be built into the simulator, is
      <br/>
      CF=K * (SR/AT) * TP,
    </p>
    <p num="55">
      where SR is the sighting-round interval, AT is the estimated average time to detect an aircraft in a specified sector, and TP is the table percentage for the same sector.
      <br/>
      The constant K=0.6 is a value used in place of the desired 50% probability, in order to simplify calculations. (That is, for small calibration probabilities, it is much easier to merely add successive probabilities of success and warp the desired 50% probability to 60%, than to calculate the actual nonlinear increases for each round.
      <br/>
      This approximation fails for larger percentages, but those cross the threshold quickly no matter how they are calculated.) Using a calibration factor to convert relative probabilities to absolute values in this way makes the average detection time independent of the magnitude of the sighting-round interval.
      <br/>
      The sighting-round interval can then vary without requiring table 450 to be reprogrammed.
      <br/>
      In addition, the system can vary the sighting-round interval for each AI unit independently of the others, and for the same AI unit at different times, as described later.
    </p>
    <p num="56">
      It might be desirable in some cases to employ sectors other than those described above, or to employ factors other than, or in addition to, relative angle from the AI unit.
      <br/>
      For example, increasing range could gradually lower the probability within each sector, rather than merely cutting off visibility abruptly at a maximum range.
      <br/>
      External factors such as sun direction or cloud cover could play a role in awareness.
      <br/>
      Detection of other units is not the whole of situational awareness.
      <br/>
      Another way to increase the realism of an AI unit is to introduce persistence of awareness once another unit is detected.
      <br/>
      Human pilots remember a once visible aircraft that drops behind their tail.
      <br/>
      They continue to take evasive action, even though the aircraft is no longer visible.
      <br/>
      This persistence fades, however; half a minute later the other unit could be almost anywhere.
    </p>
    <p num="57">
      Simulating persistence of awareness involves retaining the visibility of a detected unit for a certain persistence interval, such as 24 seconds.
      <br/>
      During that time, the AI unit continues to know the properties (position, speed, etc.) of the detected unit.
      <br/>
      But, when the once-detected unit has not been sighted for a certain time, the AI unit forgets the presence of the other unit; it drops off the unit sight list.
      <br/>
      The AI unit can detect the other unit again, in which case a new timestamp on its unit sight list starts another 24-second interval.
      <br/>
      In the meanwhile, however, the other unit might have dropped to a less favorable sector, making reacquisition less likely.
      <br/>
      AIthough retaining full knowledge of all the properties of the other unit during the persistence interval gives more knowledge than a human pilot would have, this approximation does lead the AI unit to react in realistic ways.
      <br/>
      Even more realism could be achieved by clouding the AI's awareness.
      <br/>
      For instance, position and airspeed could be returned as a random value whose deviation increases with time since awareness was lost.
      <br/>
      This would cause the AI unit to appear to guess what the out-of-sight unit is doing and to take potentially incorrect actions, as a human pilot would do.
    </p>
    <p num="58">
      Human pilots also tend to fixate upon a target once they have selected it.
      <br/>
      This has the advantage of lowering the probability of losing sight of the target.
      <br/>
      On the other hand, target fixation lowers the likelihood of seeing other aircraft in unfavorable positions.
      <br/>
      Many real dogfighting kills occur when pilots are jumped from behind while concentrating on their own attack.
      <br/>
      It is convenient here to implement target fixation by increasing the probability that a designated target aircraft passes through awareness filter 310, while simultaneously decreasing the probability that the filter passes other units, human or AI.
      <br/>
      Multiplying the target probability by 1.12 and multiplying the probability of others by 0.88 achieves a realistic effect in this implementation.
      <br/>
      Line 312 indicates the dependence of these probabilities upon target selection.
    </p>
    <p num="59">Opponent Selection</p>
    <p num="60">
      A complex simulation involving multiple independently controlled units presents the problem of how to select one of them as an opponent, target, or other object of attention.
      <br/>
      At the same time, many-on-many situations are very interesting, and therefore worth a great deal of effort to provide in a simulation.
      <br/>
      The goal of a target-selection model is to arrive at a set of rules that cause a computer-controlled AI unit to choose its targets in a manner that appears realistic or human.
      <br/>
      Some of these rules can be mutually contradictory.
      <br/>
      This too adds realism; in air-combat simulations, high-density furball situations frequently produce anomalous behavior.
      <br/>
      In this discussion, the terms "target" and "opponent" are used interchangeably to denote the other unit that an AI unit reacts to at the moment.
      <br/>
      AIthough this reaction is usually to pursue the other unit, the subject unit may choose to flee, if it should come under attack.
    </p>
    <p num="61">
      Every simulation application has a different group of heuristic guides, principles, or other considerations, usually gathered from real-life experience.
      <br/>
      For the air-combat simulation under discussion, the list below distills a few of the broader principles followed by good human fighter pilots.
      <br/>
      (1) Choose a target so that the attacking aircraft has a tactical advantage, such as speed, altitude, relative position, and/or heading.
      <br/>
      Both speed and altitude represent stored energy that can be cashed in for tactical advantage; altitude can be traded for speed, and vice versa.
    </p>
    <p num="62">(2) Avoid ganging up on targets that other friendlies have already selected, because that might leave other enemy units unengaged.</p>
    <p num="63">(3) Prefer closer targets to those farther away.</p>
    <p num="64">(4) Stay with a selected target until it is destroyed, or until the tactical condition becomes unfavorable or dangerous.</p>
    <p num="65">(5) In the absence of appealing targets, merely cruise the area until an opportunity presents itself.</p>
    <p num="66">
      (6) Bend the rules when faced with a sudden opportunity or a lucky shot.
      <br/>
      Again, these principles are fuzzy, and some are contradictory; but the rules should follow them in order to produce realistic behavior on the part of the AI units.
    </p>
    <p num="67">
      The concept of a tactical score converts the above principles into a metric that functions as an evaluation of a set of rules.
      <br/>
      The tactical score of a candidate target begins at zero, and adds or subtracts points for the following factors:
    </p>
    <p num="68">(1)  +- 10 points for every 300 feet of altitude above/below the candidate target unit.</p>
    <p num="69">(2)  +- 10 points for every 10 knots of speed above/below that of the candidate target.</p>
    <p num="70">(3) -5 points per 300 feet away from the proposed target.</p>
    <p num="71">(4) +100 points if the subject AI follows the target and faces it.</p>
    <p num="72">(5) -50 points if the target is behind the subject AI unit.</p>
    <p num="73">
      (6) -100 points if another unit has already selected that candidate as a target.
      <br/>
      The factors include spatial relationships such as distance, bearing, and relative orientation, and also includes situational aspects such as target designations by other units.
      <br/>
      In this implementation, each AI unit is made aware of target selections by the other AI units.
    </p>
    <p num="74">
      The individual point assignments are arbitrary.
      <br/>
      Their relative values reflect the relative importance of factors such as those described above.
      <br/>
      Higher scores indicate that a target is more attractive than another candidate having a lower score.
      <br/>
      For example, the overall score diminishes considerably when other freindlies have decided to pursue that target; if the target is otherwise very attractive, it gains enough points to overcome the fact that teammates are already after it.
      <br/>
      The point system should be comprehensive enough to be realistic, yet simple enough to be computationally feasible.
      <br/>
      The only units for which a score is calculated are those that the subject AI unit is aware of, namely, those having entries in its unit sight list; these are the only units to which the subject unit can react.
    </p>
    <p num="75">
      If no candidate accumulates a score higher than a threshold value, such as -500 points, the subject AI unit loiters until a favorable potential target presents itself.
      <br/>
      The subject AI unit selects as a target the candidate having the highest tactical score.
      <br/>
      However, in order to add some unpredictability, the raw scores are randomized somewhat before being presented for final target selection.
    </p>
    <p num="76">
      Whenever any AI unit does not have a selected target, that unit scans all other enemy units, AI or human, that that particular AI unit is aware of.
      <br/>
      As discussed above, different AI units are aware of different sets of other units; this restricts the available candidates for target status.
    </p>
    <p num="77">
      Once an AI unit designates one opponent as a target, strategy selector 321 and control modules 330-360 engage and pursue that target.
      <br/>
      However, target selector 320 continues to evaluate all enemy units on its unit sight list 311 as potential targets.
      <br/>
      That is, the designated target may outmaneuver the AI unit, or another unit may blunder across the AI's path and present a desirable tail shot.
      <br/>
      Realistically, target selector 320 does not change its mind to gain only a slight advantage; in this embodiment, selector 320 requires as a threshold that the new potential target have a score 150 points higher than that of a current target.
    </p>
    <p num="78">Strategy Selection</p>
    <p num="79">
      Once target selector 320 of operator 241 of an AI unit has selected another unit as an opponent, strategy selector 321 determines the optimum strategy or tactic to follow.
      <br/>
      Selection among different strategies to achieve an overall objective leads to another aspect of enhancing the realism of computer-controlled AI units in a simulator.
      <br/>
      The tactical acumen of conventional computer-controlled AI units is typically low, especially under changing circumstances.
      <br/>
      It is common to see AI units ignore a tempting human player when they have already selected another target and refuse to change tactics until that mission has been accomplished.
      <br/>
      The present simulator employs strategies, which form a set of general courses of action to follow.
      <br/>
      Each AI unit chooses a particular strategy based upon its circumstances and environment.
      <br/>
      When it has selected a strategy, it formulates a particular plan for executing that strategy.
      <br/>
      A plan is an instance of a strategy; a strategy lays out a course of action in general terms, while a plan plugs in specific parameter values for performing the strategy.
      <br/>
      For example, the strategy "head-on merge" instructs an AI unit to pass another approaching unit and attempt to gain a tail position on it.
      <br/>
      A plan for this strategy might provide detailed orders to gain 700 feet of altitude on the other unit and pass 500 feet to its right, so as to gain space for a turn into a following position.
      <br/>
      This example reveals the importance of an ability to change a plan or a strategy before its completion.
      <br/>
      If the oncoming unit, human or AI, turns away after the plan has commenced, a mindless continuation of the original plan until some fixed end condition occurs could well end in disaster for the AI unit.
      <br/>
      The challenge is to determine the correct conditions for altering or abandoning a chosen plan short of completion.
      <br/>
      That is, just as target selector 320 continues to function after target acquisition to determine whether a designated target should be abandoned, strategy selector 321 continues to monitor the tactical situation in order to determine whether a chosen strategy should be abandoned short of its ultimate goal.
    </p>
    <p num="80">
      A tactical condition metric determines which of a set of strategies to choose, and also determines when it is appropriate to abandon the strategy and select a new one.
      <br/>
      AIthough the tactical condition metric is relatively coarse, it is inexpensive to compute and to implement.
      <br/>
      The value of a tactical condition metric or score is a function of the relative angular position or orientation, and the relative heading of the AI unit with respect to a designated opponent unit.
    </p>
    <p num="81">
      Conceptually, the invention considers whether the opponent lies in the front, left, right, or rear quadrant of the subject AI unit.
      <br/>
      For each quadrant, the subject AI has one of four possible headings relative to the opponent: facing away, facing toward, and parallel on the right or left side.
      <br/>
      Some of the resulting sixteen tactical conditions are removed by symmetry, and a few more detailed special cases are introduced.
    </p>
    <p num="82">
      FIG. 5 diagrams twelve tactical configurations 500 that an AI unit employs to choose a strategy.
      <br/>
      In the views from above, a filled symbol 501 designates a subject AI unit, while open symbol 502 designates its opponent, either a human player or another AI unit.
      <br/>
      Configurations 510 place the subject A ahead of its opponent.
      <br/>
      Configuration 511 has the two units approaching each other from the front, while 512 shows the opponent approaching from the rear.
      <br/>
      Configurations 513 and 514 divide the opponent's front quadrant into two volumes.
      <br/>
      In case 513, the subject AI unit has already crossed the nose of the opponent and is moving away from it; in case 514, the subject unit is still moving toward the opponent's nose.
      <br/>
      Configurations 520 have the subject AI unit behind its opponent.
      <br/>
      Case 521 shows the subject AI in a tail chase, moving toward its opponent, while 522 shows the subject AI moving away.
      <br/>
      Cases 523 and 524 represent stern crossings, where the subject unit is moving toward or away from the opponent.
      <br/>
      Configurations 530 position the subject AI on the opponent's flank, with the subject AI moving parallel with the opponent, toward it, parallel in an opposite direction, and away from the opponent in configurations 531-534 respectively.
      <br/>
      Each of these configurations has an equivalent mirror image about its vertical axis, and any possible directional orientation.
    </p>
    <p num="83">
      Table III shows the strategies programmed for an AI unit in each of the twelve configurations 500.
      <br/>
      The first column is the number of the configuration in FIG. 5.
      <br/>
      The second column is a short name of the configuration.
      <br/>
      The third column lists possible strategies for each configuration.
    </p>
    <heading>-- TABLE III</heading>
    <p num="84">
      -- Con-
      <br/>
      -- fig    Engagement Type             Strategies
      <br/>
      -- 511    Head-on (Merge)             (1) Maneuver for separation.
      <br/>
      --                                    (2) Perform head-on attack.
      <br/>
      -- 512    Under tail attack           (1) Evade.
      <br/>
      -- 513    Opponent approaching rear flank (1) Disengage.
      <br/>
      --                                    (2) Evade.
      <br/>
      --                                    (3) Maneuver for tail position.
      <br/>
      -- 514    Opponent approaching front flank. (1) Maneuver for separation.
      <br/>
      --                                    (2) Perform head-on attack.
      <br/>
      -- 521    In tail-attack position     (1) Perform tail attack.
      <br/>
      -- 522    Separating behind           (1) Maneuver for tail position.
      <br/>
      --                                    (2) Disengage.
      <br/>
      -- 523    Approaching opponent's rear flank (1) Maneuver for tail position.
      <br/>
      -- 524    Separating from rear flank  (1) Disengage.
      <br/>
      --                                    (2) Maneuver for tail position.
      <br/>
      -- 531    Flanking parallel           (1) Disengage.
      <br/>
      -- 532    Closing on opponent's flank (1) Maneuver for tail position.
      <br/>
      -- 533    Passing on opponent's flank (1) Maneuver for tail position.
      <br/>
      --                                    (2) Disengage.
      <br/>
      -- 534    Separating on opponent's flank (1) Disengage.
      <br/>
      --                                    (2) Maneuver for tail position.
    </p>
    <p num="85">
      For example, a head-on engagement configuration 511 can activate a maneuver for separation, intended to position the subject AI 501 in a passing flank configuration 533 and then into configuration 521 for a tail attack on the opponent.
      <br/>
      AIternatively, AI unit 501 can perform a direct head-on attack against opponent 502.
    </p>
    <p num="86">
      Configuration 512 has the subject AI under tail attack.
      <br/>
      This is an extremely dangerous position, and the only sensible strategy is to evade the attacker.
      <br/>
      An opponent approaching the rear flank, case 513, is less dangerous.
      <br/>
      The subject AI can choose to disengage as well as to take more extreme evasive action.
      <br/>
      This situation also presents an opportunity for a third alternative, a possible maneuver toward a tail-chase position 521.
      <br/>
      A table such as 550 can be modified easily, merely by plugging different sets of strategies into column 553.
    </p>
    <p num="87">
      Where multiple numbered strategies occur for a configuration, a random selection is made.
      <br/>
      If desired, however, strategy selection can be assigned or weighted according to a number of situational factors, such as distance between the aircraft, relative speed, and altitude difference, as well as remaining fuel and ammunition.
      <br/>
      For example, when the opponent is approaching the rear flank of the subject AI unit (configuration 513, FIG. 5), an altitude or speed advantage can bias the AI unit to maneuver for a tail attack, whereas a tactical disadvantage biases toward the listed evasion strategy.
    </p>
    <p num="88">
      Upon each change of configuration, strategy selector 321 chooses a new strategy, and plan generator 330 formulates a new plan based upon that strategy.
      <br/>
      That is, whenever the subject AI 501 crosses a boundary between one configuration 500 and another, one of the strategies listed in column 553 for the new configuration replaces the strategy for the previous configuration.
      <br/>
      This approach allows both a natural progression of tactics and a change in goal in the face of an opponent's tactics.
      <br/>
      As the AI unit follows its plan, the design of the tactical conditions and the corresponding strategies attempts to bring the subject unit to an advantageous position and eventually to a firing solution.
      <br/>
      In the head-on configuration discussed above, for instance, a separation strategy is aimed toward ultimately achieving a tail position, and the intermediate flanking configuration preserves this goal--yet recognizes the possibility that the original goal might not be the best course, and that disengaging might be preferable under the new circumstances.
      <br/>
      For instance, the opponent might maneuver to deny a head-on engagement.
      <br/>
      As soon as this maneuver produces a new configuration, the changed tactical situation causes the subject AI to choose a new, more appropriate strategy, rather than blindly continuing to a completion condition specified by the original merge strategy.
    </p>
    <p num="89">Control Interaction</p>
    <p num="90">
      The controls of a vehicle or other guidable object are generally designed to control a single aspect of its motion.
      <br/>
      Fixed-wing aircraft have ailerons, elevators, a rudder, a throttle, etc.
      <br/>
      Other vehicles have other major controls, such as the collective and pitch controls of a helicopter.
      <br/>
      To some extent, however, the major controls usually interact with each other, or produce actions that are not appropriate in certain circumstances.
      <br/>
      Many of these cases occur during extreme maneuvers of the vehicle.
      <br/>
      AIthough some conventional simulators provide autopilots that control flight surfaces, none of them perform competently for the range of maneuvers and attitudes commonly encountered in combat situations, and none of them will lead an aircraft through extreme situations in the course of executing a pilot's guidance instructions.
    </p>
    <p num="91">
      Block 360, FIG. 2, includes a number of individual modifiers that force changes in the control outputs 342-344 in response to their past settings, the present or previous settings of other controls, certain states of a simulated aircraft, and/or other circumstances.
      <br/>
      The modified settings 361-363 then form the final control outputs 242 of AI operator 300.
    </p>
    <p num="92">
      Human pilots quickly learn to apply back pressure to the stick or yoke while turning, in order to maintain altitude and increase turn rate.
      <br/>
      Because elevator output 352 only holds the stick back in response to a command to gain altitude, one of the modifiers 360 automatically generates a control setting for holding the stick back (or for increasing an existing stick-back setting) when aileron command 342 indicates that the AI unit is in a turn.
      <br/>
      Calculating the proper magnitude of this interaction is not straightforward, although not computationally challenging.
      <br/>
      In this embodiment, the bank rate 342 from a previous frame is subtracted from that of the current frame.
      <br/>
      The modifier then increases the setting of elevator output 352 by a constant times the absolute value of this difference, before outputting the final elevator setting 362.
    </p>
    <p num="93">
      Another potentially unrealistic action of a AI unit concerns an elevator command 343 to descend during a turn.
      <br/>
      Another modifier of block 360 accordingly disallows any forward-stick setting on output 362 for two of three possible circumstances during a turn.
      <br/>
      If a desired bank angle commanded by output 342 exceeds the current bank angle indicated by output 351 by a threshold amount, the AI unit is entering a turn.
      <br/>
      When the desired bank angle is about the same as the current angle, the AI craft is holding a turn.
      <br/>
      A desired bank angle less than the current value by a threshold amount is rolling out of a turn.
      <br/>
      Any elevator setting 352 indicating a descent is raised to a neutral setting for the first two of the above conditions, but not for the third.
      <br/>
      That is, the AI unit can begin a descent when rolling out of a turn, but not while entering or holding a turn.
    </p>
    <p num="94">
      Two further sets of circumstances concerns pitch control while banking.
      <br/>
      The principle is that pitch commands during a bank do not in fact control vertical motion, because the elevators are no longer horizontal.
      <br/>
      AIso, pitch commands during a turn unintentionally control turn rate, in derogation of a turn command on output 342; down elevators kill a turn, while up elevators tighten the turn radius.
    </p>
    <p num="95">
      First, as the elevators lose more and more pitch effectiveness during a bank, the rudder becomes increasingly horizontal, and can produce pitch changes.
      <br/>
      An aircraft in a 90 (degree)  bank can climb and dive with its rudder alone.
      <br/>
      Accordingly, a modifier function in block 360 reroutes pitch commands 343 partially to rudder output 353.
      <br/>
      For current bank angles less than 10 (degree) , no pitch setting affects the rudder output.
      <br/>
      Above 10 (degree)  bank, however, the modifier adds to the rudder setting 344 a constant times the current bank angle 351 times the desired pitch setting 343, to produce modified rudder setting 353.
      <br/>
      This modification also allows the ruder interaction to decrease to zero as the AI aircraft returns to level flight.
      <br/>
      Rudder control of pitch can be overdone.
      <br/>
      Therefore, the above modifier hard-limits the total increase in rudder setting to 30% of the total settings of the aileron, elevator, and rudder angles 351-353.
    </p>
    <p num="96">
      Second, pitch can be controlled by modifying overbanking.
      <br/>
      Overbank is the difference between desired and current bank angles, and its value is stored between simulation frames.
      <br/>
      Another modifier in block 360 calculates a function of the current bank 351 and the desired bank 342 to produce an overbank correction.
      <br/>
      Then, whenever elevator output 343 requests pitch down, modifier block 360 increases aileron output 351 by the correction amount at output 361.
      <br/>
      When output 343 requests pitch up, the modifier calculates another function of the current and desired bank angles to produce a different correction.
      <br/>
      Block 360 then decreases overbank by the second correction.
      <br/>
      This correction is limited to zero overbank, however; that is, pitch corrections cannot reverse a desired bank amount.
    </p>
    <p num="97">
      In real air-combat operations, human pilots sometimes employ body pitch rate (BPR) control in closing on a target in a tail chase.
      <br/>
      Window 600 shows a simulation area as it would appear to a human pilot closing on an enemy 610 during a turn.
      <br/>
      The object is to move the enemy left into gunsight crosshairs 601.
      <br/>
      Because the aircraft is at a significant angle to the horizon 620, direct use of the ailerons and elevators individually move it along the axes 621 and 622 of the world coordinates.
      <br/>
      Attempting to coordinate control-surface commands 342-344 to swing the enemy almost directly left in the reference frame 602-603 of the AI aircraft produces unrealistic behavior.
      <br/>
      The AI operator 300, like a human pilot, has two degrees of freedom in directional control, and must choose two guidance instructions--one for each degree of freedom.
      <br/>
      But, because a dogfight can occur at any attitude relative to the earth, the AI unit can choose guidance instructions that execute relative to the AI's reference frame, not the earth's.
    </p>
    <p num="98">
      When the AI is in tail-attack strategy 521, guidance module 340 is enabled to produce BPR guidance commands 346 for moving in a synthetic axis 602 that is perpendicular to the pilot's body axis 603 within the aircraft.
      <br/>
      This command is actually a pitch-rate command, and are sent to elevator PID controller 356.
      <br/>
      It provides very fine control of the attacking unit's attitude when it is lining up on a target.
    </p>
    <p num="99">
      Guidance module 340 is able to specify one command from each of the groups (A)-(C) listed above.
      <br/>
      When the AI is in tail-attack mode, a BPR command can be one of the selected commands.
      <br/>
      For example, block 340 can specify during the same time interval a setting for BPR and one for bank angle, or a setting for bank angle and one for pitch up.
      <br/>
      That is, body-pitch control does not replace any other controls; it merely adds one more capability to the set of available commands, allowing more complex and realistic action than would otherwise be possible.
    </p>
    <p num="100">Computation Rates</p>
    <p num="101">
      A realistic experience in a real-time simulation depends highly upon a high enough frame rate to provide a smooth flight path and quick aircraft response for both the player's unit and the computer-controlled AI units.
      <br/>
      The calculations required for controlling an AI unit in a simulation are extensive and complex.
      <br/>
      Performing them in a straightforward manner has the potential for slowing the frame rate of the entire simulation.
      <br/>
      The move toward many-on-many simulations, having large numbers of AI units, compounds this problem.
    </p>
    <p num="102">
      An AI unit evaluates its tactical condition, performing its target and strategy selections, its planning, and control settings, during an evaluation interval.
      <br/>
      As discussed above, each AI unit reevaluates these parameters repeatedly in order to execute and modify its actions in a realistic manner.
      <br/>
      The resulting high computational load can be reduced by the insight that the necessity for performing at least some of the calculations varies from moment to moment with the tactical situation of each individual AI unit.
    </p>
    <p num="103">
      A dynamic AI evaluation interval changes the rate at which an AI thinks about what it should do during the following evaluation interval, specifically, about what commands 342-346 it should issue for the next interval.
      <br/>
      An AI unit having no currently selected target, or one that is disengaging from an opponent, can afford to free up computation time for other units by thinking only once per second.
      <br/>
      On the other hand, lining up a cannon shot on a fast-moving target requires more frequent control changes, perhaps as often as once every frame rate.
      <br/>
      Other situations, such as attempting to close on a tail position, optimize to intermediate evaluation intervals and rates.
      <br/>
      For the present purpose and with contemporary computation speeds, a base evaluation or think interval of one second (1 Hz think rate) is convenient.
      <br/>
      Think-rate controller 370, FIG. 3, sets this rate on line 371 in the absence of any other rate command from strategy selector 331.
      <br/>
      As an AI unit enters a more demanding tactical situation, interval command 372 sets a higher rate, say 3 Hz.
      <br/>
      Thus, for example, an opponent cannot easily throw off an AI pursuer by making a tight turn, because the AI unit can adjust its own course more frequently.
      <br/>
      The most demanding situations, such as preparing to shoot an opponent in tail attack, causes the AI unit operator to reevaluate its parameters and issue new guidance commands for every frame interval.
      <br/>
      This interval, having a typical rate of 20-30 Hz, allows the highest possible maneuverability.
      <br/>
      When the tactical situation clears somewhat, strategy selector 321 resets the evaluation interval back to a lower rate.
    </p>
    <p num="104">
      A number of different criteria may serve to set the think rate.
      <br/>
      In this embodiment, the criterion is simply the choice of strategy in block 321.
      <br/>
      Table IV below lists the strategies and their associated think rates.
      <br/>
      A new rate becomes effective whenever a new strategy is selected.
    </p>
    <heading>--         TABLE IV</heading>
    <p num="105">
      --         Selected Strategy              Think Rate
      <br/>
      --         Disengage                      1 Hz
      <br/>
      --         Evade                          1 Hz
      <br/>
      --         Maneuver for separation        1 Hz
      <br/>
      --         Maneuver for tail position     3 Hz
      <br/>
      --         Perform head-on attack         Frame rate
      <br/>
      --         Perform tail attack            Frame rate
    </p>
    <p num="106">
      Each AI unit has its own think rate, set by its own controller 370 for its own specific tactical condition.
      <br/>
      In this way, some of the units can maneuver more quickly without exceeding the overall capacity of the host computer.
    </p>
    <p num="107">
      Precomputation of tactical information also offers greater computational efficiency.
      <br/>
      The calculations necessary for controlling an AI unit such as an aircraft can be divided into several different types.
      <br/>
      There are many parameters concerning units on its sight list that an AI unit must refer to frequently and/or in different parts of their control cycle.
      <br/>
      Many of these computations are expensive; for example, calculations for determining angles and distances of other units from each AI unit involve the evaluation of trigonometric, square-root, and other complex functions.
      <br/>
      Such calculations should be made only once in each think interval wherever possible.
    </p>
    <p num="108">In this implementation, the following parameters are calculated only once during each think interval for each other AI unit included in the sight list 311 of a subject AI unit:</p>
    <p num="109">(1) Tactical configuration 500, FIG. 5,</p>
    <p num="110">(2) Quadrant 400, FIG. 4,</p>
    <p num="111">(3) Distance from the subject AI unit,</p>
    <p num="112">(4) Compass bearing from the subject AI unit,</p>
    <p num="113">(5) Relative heading of the other unit from the subject unit.</p>
    <p num="114">(6) Angle off nose (AON) of the other unit from the subject unit,</p>
    <p num="115">(7) Angle of elevation (AOE) of the other unit from the subject unit,</p>
    <p num="116">
      (8) Tactical score of the other unit.
      <br/>
      The simulator caches the results of the above computations in its unit sight list.
      <br/>
      That is, the entry for one of the other aircraft in the subject unit's sight list contains all eight of the parameter values for that aircraft, the entry for a second other aircraft includes all eight parameters for the second aircraft, and so forth.
      <br/>
      AI code in target selector 320, strategy selector 331, and any other components of operator 300 can access the cached values directly from the corresponding entry in unit sight list 311.
      <br/>
      Again, these values are refreshed once during every evaluation interval of that particular AI unit.
      <br/>
      Thus, because of the variable evaluation rate, this refresh also occurs at a variable rate.
    </p>
    <p num="117">Overall Operation</p>
    <p num="118">
      FIGS. 7A-7C comprise a flowchart showing the operation of AI unit operators 300, FIG. 3, during a complete cycle or loop 700 of simulator 200, FIG. 2.
      <br/>
      The order of the blocks does not necessarily imply a particular time sequence.
      <br/>
      In some cases, the operation requires no time sequence at all; in some other cases, the specific embodiment being described imposes a time order, but other embodiments might employ a different order.
      <br/>
      That is, loop 700 depicts the logical operation of the invention, and not its temporal operation.
      <br/>
      Likewise, the layout and numbering of the blocks are for convenience only, and do not necessarily connote a grouping or other relationship.
    </p>
    <p num="119">
      Starting at entry point 701, cycle 700 continues to loop by returning through completion point 702 at the end of the cycle.
      <br/>
      Blocks 710 cycle simulator 200 at its frame rate.
      <br/>
      At every frame time 251, block 711 activates block 712 to update the positions of the player's unit and all the AI units through physics engine 220 so as to produce the next state.
      <br/>
      Block 713 cycles through all of the AI operators 300, and then returns to completion point 702 of the overall loop.
      <br/>
      AIthough this cycle is shown within the frame- time loop, the operations in the loop controlled by block 713 are actually interleaved with the frame-rate update, so that only a portion of them occur during each frame interval.
      <br/>
      For each individual operator 300, block 714 asks whether its think interval has expired.
      <br/>
      Again, the think rate can range from 1 Hz to the frame rate, usually 20-30 Hz, and can differ for different operators.
      <br/>
      An operator that wants to think gets called; operators whose think intervals have not expired do not get called.
    </p>
    <p num="120">
      After an operator has been called by block 714, its first task 720 is to update the unit sight list 311 of each operator.
      <br/>
      In this embodiment, list 311 is updated only once every four seconds, regardless of the think rate; other simulators may desire to update at a different rate, or to key the list interval to the think time or to some other base.
      <br/>
      When block 721 signals expiration of the sighting interval, block 722 cycles through every other aircraft unit, human and AI, having an entry in global unit list 301.
      <br/>
      Block 723 calculates the distance and angles (AON and AOE) of each unit from the subject unit, in order to determine which of the sectors 410-430 contain the other unit, and whether it is within visual range.
      <br/>
      Block 724 reads the skill level of that particular other unit.
      <br/>
      The human player can set the skill levels of each AI unit individually, and can thus fight against a mix of enemies (and with a mix of friendlies), rather than merely playing others having a single uniform ability.
      <br/>
      The added realism for this feature is to force a player to guess whether any particular enemy lined up for a chancy shot is better or worse than the player, and might even turn the tables.
      <br/>
      Step 725 reads a probability from a table such as Table II corresponding to the sector and skill level of that other unit.
      <br/>
      Step 726 calibrates and slightly randomizes the table probability to reduce predictability, as discussed previously.
      <br/>
      Blocks 727-729 implement the concept of target fixation.
      <br/>
      If block 727 determines that the subject AI unit has already designated the other unit under consideration from block 722 as a target, then block 728 increases the table probability by a fixed amount.
      <br/>
      If the subject AI has not designated any target at all, the table probability remains unchanged.
      <br/>
      If it has designated a target but the unit under consideration is not the target, block 729 decreases the table probability by a fixed amount.
      <br/>
      These amounts can differ from each other, and they may vary with other factors, if desired.
    </p>
    <p num="121">
      Blocks 740 maintain the unit sight list 311 of an AI unit.
      <br/>
      Step 741 rolls a random number and compares it with the sighting probability to determine whether or not the other unit under consideration was sighted during the current sighting interval.
      <br/>
      If so, block 742 asks whether this unit is already on the unit sight list.
      <br/>
      If it is a newly sighted unit, block 743 adds a new entry to the unit sight list, and places in it an identification of the unit.
      <br/>
      Block 744 places a timestamp in the entry denoting when they were sighted. . If the current unit is already on the sight list, block 744 updates the timestamp in its entry.
      <br/>
      Units added to a sight list 311 get to stay there for 24 seconds even if they are not detected in subsequent sighting cycles.
      <br/>
      If block 745 sees that the current unit is on the sight list and that its 24-second sighting period has expired, block 746 drops its entry.
      <br/>
      Control then returns to block 722 for consideration of the next unit on global unit list 301.
    </p>
    <p num="122">
      Once during every think interval activated at block 714, blocks 750 precompute a number of parameters relating to the units in every unit's sight list 311.
      <br/>
      For every AI unit operator 300, block 751 cycles through all the entries in the sight list for one of the AI units.
      <br/>
      Block 752 calculates the values of all the pertinent parameters, such as relative angle, heading, distance, etc., for that unit.
      <br/>
      Block 753 stores these values in the unit sight-list entry for that unit.
      <br/>
      The entry thus acts as a cache from which other blocks can access certain parameter values without having to recalculate them.
      <br/>
      AIthough these values are updated at the think rate, it is possible to precompute them at another rate, such as the list update rate, or to base this task upon some other factor, such as a situational complexity measure.
    </p>
    <p num="123">
      Block 754 calculates the target score for the sight-listed unit under consideration, as described previously.
      <br/>
      Again, other embodiments of the invention may calculate scores for other purposes; the broad purpose of the scoring process is to determine the measure of attention that a computer-controlled AI unit should devote to each of a number of other units in the simulation, to determine which other unit or units it should react to at the moment, based upon one or more criteria.
      <br/>
      Block 755 stores the score in the unit's entry in list 311.
      <br/>
      To increase realism by reducing predictability, block 755 can also randomize the score within a small range.
    </p>
    <p num="124">
      After block 751 has looped through all the AI units, blocks 760 select another unit to which it reacts.
      <br/>
      AIthough this unit is called a target, the best strategy could be to run away rather than to try to shoot it down.
      <br/>
      AIso, it might be desired to consider friendly units as well, for collision avoidance or other purposes.
      <br/>
      Block 761 finds the identity of the opposing unit having the best target score.
      <br/>
      Compound decision block 762 accepts or rejects the candidate target.
      <br/>
      If the subject AI unit has no presently designated target, and if the best score falls below a minimum-interest threshold, then no action is taken.
      <br/>
      If the score does exceed the interest threshold, then block 763 designates that unit as the target.
      <br/>
      If there is a present target, but all scores have fallen below the interest threshold, block 764 drops it.
      <br/>
      If the present target has an acceptable score, block 765 determines whether or not a more appealing target has wandered into the field.
      <br/>
      If the highest score exceeds the score of the present target by a sufficiently high retargeting margin, block 766 redesignates the target; that is, it drops the old target and replaces its identity in the sight list with that of the new target unit.
    </p>
    <p num="125">
      Blocks 770 cause the currently running AI operator 300 to react to the selected target unit during the think interval.
      <br/>
      Block 771 determines which of the tactical configurations 500 exists for the current AI unit and its designated target.
      <br/>
      Step 772 selects a strategy from Table III for the current configuration.
      <br/>
      If no current target exists, step 772 chooses "disengage" as the strategy.
      <br/>
      If there multiple potential strategies for the configuration, block 772 selects among them randomly or as described above.
      <br/>
      It is important to note that the strategy for every AI is reevaluated during every think interval, so that the AI can change strategies rapidly for changing circumstances.
      <br/>
      This also allows less complex strategies to be strung together into more complex goals.
      <br/>
      Block 773 formulates a specific plan in response to the strategy selection.
      <br/>
      That is, blocks 771-773 determine a particular course of action for the current AI unit.
    </p>
    <p num="126">
      Block 774 selects the think time for the next cycle 700, in response to the strategy selection in block 772.
      <br/>
      If the strategy selected in block 772 is a tail-attack mode, then block 776 adds the body-rate (BPR) command to the group of available guidance commands for that AI unit.
    </p>
    <p num="127">
      Block 777 generates guidance commands for executing the plan.
      <br/>
      These are straightforward, except for the BPR unit; more detailed steps for this control are set out below, after the description of method 700.
    </p>
    <p num="128">
      Blocks 780 convert guidance commands into control settings appropriate for the simulated unit, such as aileron, elevator, and rudder positions.
      <br/>
      Blocks 780 and 790 in this embodiment are executed at the frame rate, rather than at the slower think rate.
      <br/>
      That is, although high-level guidance commands might be issued less frequently, the control surfaces of an AI unit change position at the higher frame rate in order to provide smoother, more realistic action.
      <br/>
      FIG. 3 shows the actual timing of AI operator functions.
      <br/>
      The position of these blocks in FIG. 7 shows the logical flow of the guidance process, rather than its temporal flow.
    </p>
    <p num="129">
      Block 781 chooses the controls for executing the guidance commands.
      <br/>
      In general, elevators control pitch and ailerons control bank and heading.
      <br/>
      But, as described earlier, elevators can control turn rate in a steep bank, and rudder and ailerons can control pitch.
      <br/>
      Block 782 cycles through the control surfaces affected by the current guidance commands.
      <br/>
      Block 783 generates a specific setting for the current control in response.
      <br/>
      Block 784 adjusts the position of the control surface in response to the setting; PID controllers 351-354 may implement this step.
      <br/>
      A position commonly has the form of a number, such as "set elevators to +248," that can be fed directly into the simulator.
    </p>
    <p num="130">
      Blocks 790 modify control settings from block 784 according to the modification techniques discussed in connection with block 360, FIG. 3.
      <br/>
      Because some of these employ rates of change or other historical data, block 791 stores previous control settings.
      <br/>
      In this case, only one previous cycle's settings need be kept.
      <br/>
      Block 792 cycles through each of the implemented modification techniques.
      <br/>
      Each control may have more than one modification.
      <br/>
      Block 793 tests the activation conditions for the current modification, and returns to 792 if they fail.
      <br/>
      If the conditions are met, block 794 applies the modification method, possibly using data from block 791.
      <br/>
      Block 795 outputs the control settings to the simulator, which reacts to them at the following frame time.
    </p>
    <p num="131">Finally, control returns from block 795 to block 711 for the next loop through cycle 700.</p>
    <p num="132">
      As mentioned above, the generation of BPR guidance commands is more complex than the others.
      <br/>
      Referring to FIG. 6, define a "body angle off nose" (BAON) as the angle formed between the opponent 610 and center point 601 in the AI unit's horizontal direction 602, and a "body angle of elevation" (BAOE) as the angle formed between opponent 610 and point 601 in the AI's vertical direction 603.
      <br/>
      The goal of the BPR guidance commands is to reduce both of these quantities to zero.
    </p>
    <p num="133">
      The first step is to choose a lead point to aim at.
      <br/>
      The lead point gets the attacking AI unit's nose a little bit ahead of the opponent so that a shot fired at the lead point will actually hit the opponent.
      <br/>
      It also allows the attacker to intercept more ably because it heads toward where the opponent will be, not where it is now.
      <br/>
      The lead point is determined as follows: (1) Calculate how long it would take the attacker to intercept the opponent if the opponent continued on its present course. (2) Divide that intercept time by ten as a lead time. (3) Extrapolate the opponent's current position, heading and speed by the lead time.
      <br/>
      This lead point is the extrapolated target position.
    </p>
    <p num="134">
      The next step is to project the AI unit's position forward in time by the same amount, i.e., the lead time.
      <br/>
      This is the extrapolated unit position.
    </p>
    <p num="135">
      Next is to calculate the BAON and BAOE between the extrapolated target position and the extrapolated unit position.
      <br/>
      This is a projected value of what the BAON and BAOE metrics will be; these values are an extrapolated BAON and an extrapolated BAOE.
      <br/>
      Dividing these extrapolated angles by the lead time yields their actual change rates.
    </p>
    <p num="136">
      Taking as much time as possible to line up allows gentler control motions.
      <br/>
      Minimum rates of change for the BAON and BAOE angles depends upon the distance between the attacking AI and the opponent, and this depends upon time to close.
      <br/>
      Therefore, minimum change rates of BAON and BAOE are the actual BAON and BAOE angles divided by the lead time.
      <br/>
      Subtracting the actual change rates from the desired change rates gives change-rate error values for both angles.
    </p>
    <p num="137">
      To correct for these errors: (1) Issue a bank guidance command to make the AI unit bank towards its target; that is, roll so that target 610 rotates to fall on vertical centerline 604.
      <br/>
      The bank amount is determined by projecting the AI-unit relative position into two dimensions and taking an arctangent. (2) Issue a BPR command to make the attacking AI unit's nose move up or down, in its own reference frame 602-603, at the appropriate velocity to make the opponent move along centerline 604 until the BAOE becomes zero.
      <br/>
      The appropriate body pitch velocity is -1 times the BAOE rate change error.
      <br/>
      That is, the AI unit requests a control-surface change to bring the elevation angle rate change to the desired value.
    </p>
    <p num="138">Conclusion</p>
    <p num="139">
      The above description embraces a number of variations on the basic concept of enhancing the realistic simulation of objects that interact with each other in complex ways, including those that are intended to appear human.
      <br/>
      Those skilled in the art will easily apprehend other variations and extensions within the described framework, as well as other areas of application of the principles described herein.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A simulator implemented on a programmed digital computer for simulating simultaneously both a player-controlled unit and a computer-controlled unit in a simulated environment, the simulator comprising:</claim-text>
      <claim-text>player controls for producing a sequence of player settings for a first group of controls available to the player for directing the player-controlled unit within the environment; a controller directing the computer-controlled unit according to a computer-generated strategy for interacting with the player-controlled unit within the environment by producing from the strategy a sequence of controller settings for substantially the same group of controls as the player controls;</claim-text>
      <claim-text>and a physics engine for interpreting the control settings from both the player controls and the controller so as to simulate both the player unit and the computer-controlled unit in substantially the same manner.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The simulator of claim 1, wherein the group of controls comprise controls for directing an aircraft.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The simulator of claim 2, wherein the group of controls includes ailerons and elevators.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The simulator of claim 3, wherein the group of controls further includes a throttle.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The simulator of claim 3, wherein the group of controls further includes a rudder.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The simulator of claim 1, wherein the player settings include position specifications of elements for directing a vehicle.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The simulator of claim 6, wherein the controller settings include position specifications of substantially the same types as those for the player settings.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The simulator of claim 1, further including a first model for specifying a set of characteristics of the player unit.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The simulator of claim 8, further including a second model for specifying a set of characteristics of the computer-controlled unit, both of the sets containing characteristics of substantially the same types.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The simulator of claim 1, wherein the physics engine cyclically interprets the control settings from the player and from the controller.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The simulator of claim 10, further comprising a clock for generating a frame rate.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The simulator of claim 11, wherein the physics engine simulates both units at the frame rate.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The simulator of claim 11, wherein a portion of the controller operates cyclically at less than the frame rate.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The simulator of claim 1, wherein the controller includes a guidance module for issuing commands representing desired actions for the computer-controlled unit.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The simulator of claim 14, wherein the commands represent actions with respect to control elements of a vehicle.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The simulator of claim 15, wherein the guidance module is capable of issuing different types of commands to the same control element.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The simulator of claim 15, wherein one of the commands represents a body pitch rate.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The simulator of claim 14, wherein the controller includes a converter for converting the guidance commands into the control settings.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The simulator of claim 18, wherein the converter includes a separate module for at least some of the control elements.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The simulator of claim 18, wherein the controller includes a modifier module for modifying certain of the control settings produced by the converter.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The simulator of claim 20, wherein the modifier module is responsive to predetermined conditions of the computer-controlled unit for modifying the certain control settings.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The simulator of claim 20, wherein the modifier module is responsive to one of the control settings for modifying another of the control settings.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The simulator of claim 20, wherein the modifier is responsive to previous control settings for modifying current control settings.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. A simulator implemented on a programmed digital computer for simulating a player-controlled unit and multiple computer-controlled units in a simulated environment, the simulator comprising: player controls for producing a sequence of player settings for a first group of controls available to the player for directing the player-controlled unit within the environment; a plurality of separate controllers each directing one of the computer-controlled units independently of the plaver-controlled unit and of each other within the environment, by producing a separate sequence of controller settings for substantially the same group of controls as the player controls;</claim-text>
      <claim-text>and a physics engine for interpreting the control settings from the player and from all of the controllers so as to simulate both the player unit and the computer-controlled units in substantially the same manner at the same time.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The simulator of claim 24, wherein the physics engine interprets the control settings from the player and from all the controllers in a single cycle.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The simulator of claim 24, wherein a portion of each controller operates cyclically at a variable rate.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The simulator of claim 26, wherein the controller portions for different ones of the computer-controlled units operate at different rates simultaneously.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The simulator of claim 24, wherein the controller for each computer-controlled unit includes an awareness filter for determining which of the other units in the environment that its respective unit can react to.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The simulator of claim 24, wherein the controller for each computer-controlled unit includes a target selector for designating one of the other units as an object of attention.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The simulator of claim 29, wherein the controller for each computer-controlled unit includes a strategy selector for directing its respective unit with respect to the designated other unit.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. The simulator of claim 24, further including a rendering module responsive to the physics engine for calculating a representation of the environment.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The simulator of claim 31, further including output devices responsive to the rendering module for displaying the representation of the environment.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The simulator of claim 32, further comprising storage devices holding data for the simulator.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The simulator of claim 33, wherein the storage devices hold terrain data for simulating the environment.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. A method for simulating simultaneously both a player-controlled unit and a computer-controlled unit at the same level of complexity, the method comprising: receiving a sequence of settings for a group of player controls for directing the player unit within an environment; producing a sequence of settings for a group of computer controls of the same type as the player controls for directing the computer-controlled unit in the same environment simultaneously; interpreting both sequences of settings in the same simulator so as to direct both the player unit and the computer-controlled unit simultaneously with each other within the environment.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. A computer-usable medium carrying instructions and data for causing a programmable digital computer to execute a method for simulating simultaneously both a player-controlled unit and a computer-controlled unit at the same level of complexity, the method comprising: receiving a sequence of settings for a group of player controls for directing the player unit within an environment; producing a sequence of settings for a group of computer controls of the same type as the player controls for directing the computer-controlled unit in the same environment simultaneously; interpreting both sequences of settings in the same simulator so as to direct both the player unit and the computer-controlled unit simultaneously with each other within the environment.</claim-text>
    </claim>
    <claim num="37">
      <claim-text>37. The method of claim 35, wherein the simulator is a physics engine for simulating the characteristics of physical objects of a certain type.</claim-text>
    </claim>
    <claim num="38">
      <claim-text>38. The method of claim 37, wherein the physical objects are vehicles.</claim-text>
    </claim>
    <claim num="39">
      <claim-text>39. The method of claim 38, wherein the vehicles are aircraft.</claim-text>
    </claim>
    <claim num="40">
      <claim-text>40. A method for simulating a player-controlled unit and a computer-controlled unit at the same level of complexity, the method comprising: receiving a sequence of settings for a group of player controls for directing the player unit within an environment; producing a sequence of settings for a group of computer controls of the same type as the player controls for directing the computer-controlled unit in the same environment simultaneously; interpreting both sequences of settings in the same simulator so as to direct both the player unit and the computer-controlled unit within the environment, wherein producing the settings for the computer-controlled unit comprises</claim-text>
      <claim-text>- selecting a strategy at a high level, and - transforming the strategy into the sequence of control settings for the computer-controlled unit.</claim-text>
    </claim>
    <claim num="41">
      <claim-text>41. The method of claim 40, wherein transforming the strategy includes generating a sequence of guidance commands for carrying out the strategy at a lower level.</claim-text>
    </claim>
    <claim num="42">
      <claim-text>42. The method of claim 41, wherein one of the guidance commands is a body pitch rate command.</claim-text>
    </claim>
    <claim num="43">
      <claim-text>43. The method of claim 41, wherein transforming the strategy further includes converting the guidance commands into the control settings.</claim-text>
    </claim>
    <claim num="44">
      <claim-text>44. The method of claim 35, further including modifying certain of the control settings for the computer-controlled unit.</claim-text>
    </claim>
    <claim num="45">
      <claim-text>45. The method of claim 44, wherein modifying the control settings is responsive to predetermined conditions of the computer-controlled unit for modifying the certain control settings.</claim-text>
    </claim>
    <claim num="46">
      <claim-text>46. The method of claim 35, for simulating a plurality of computer-controlled units simultaneously, further comprising: repeating the producing and interpreting steps in a single cycle for the player unit and for all of the computer-controlled units independently of each other.</claim-text>
    </claim>
    <claim num="47">
      <claim-text>47. A computer-usable medium carrying instructions and data for causing a programmable digital computer to execute a method for simulating a player-controlled unit and a plurality of computer-controlled units simultaneously at the same level of complexity, the method comprising: receiving a sequence of settings for a group of player controls for directing the player unit within an environment; producing a sequence of settings for a group of computer controls of the same type as the player controls for directing the computer-controlled unit in the same environment simultaneously; interpreting both sequences of settings in the same simulator so as to direct both the player unit and the computer-controlled unit within the environment; repeating the producing and interpreting steps in a single cycle for the player unit and for all of the computer-controlled units independently of each other.</claim-text>
    </claim>
    <claim num="48">
      <claim-text>48. The method of claim 46, wherein producing the settings for each of the computer-controlled units comprises: generating a sequence of commands at a high level;</claim-text>
      <claim-text>and transforming the strategy into the sequence of control settings for the computer- controlled unit.</claim-text>
    </claim>
    <claim num="49">
      <claim-text>49. The method of claim 48, wherein the high-level commands are generated at a time rate different from that at which the control settings for the each computer-controlled unit are produced.</claim-text>
    </claim>
    <claim num="50">
      <claim-text>50. The method of claim 48, wherein the high-level commands are generated at a variable rate.</claim-text>
    </claim>
    <claim num="51">
      <claim-text>51. The method of claim 50, wherein the variable rate depends upon a tactical condition of the each computer-controlled unit.</claim-text>
    </claim>
    <claim num="52">
      <claim-text>52. The method of claim 50, wherein the variable rate differs for different ones of the computer-controlled units.</claim-text>
    </claim>
  </claims>
</questel-patent-document>