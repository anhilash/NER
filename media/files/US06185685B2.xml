<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185685B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185685</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185685</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25534539" extended-family-id="42113795">
      <document-id>
        <country>US</country>
        <doc-number>08988850</doc-number>
        <kind>A</kind>
        <date>19971211</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08988850</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43172155</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>98885097</doc-number>
        <kind>A</kind>
        <date>19971211</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08988850</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L   9/32        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>9</main-group>
        <subgroup>32</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L   9/08        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>9</main-group>
        <subgroup>08</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04L   9/30        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>9</main-group>
        <subgroup>30</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>713183000</text>
        <class>713</class>
        <subclass>183000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>713168000</text>
        <class>713</class>
        <subclass>168000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-009/0841</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>9</main-group>
        <subgroup>0841</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130719</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-009/3271</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>9</main-group>
        <subgroup>3271</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130719</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99939</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99939</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99952</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99952</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99953</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99953</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>16</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>8</number-of-drawing-sheets>
      <number-of-figures>14</number-of-figures>
      <image-key data-format="questel">US6185685</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Security method and system for persistent storage and communications on computer network systems and computer network systems employing the same</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>MATYAS STEPHEN M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5142578</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5142578</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>RASMUSSEN HARRY R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5237611</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5237611</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KAUFMAN CHARLES W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5418854</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5418854</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>KIKUCHI HIROAKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5584022</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5584022</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>GANESAN RAVI</text>
          <document-id>
            <country>US</country>
            <doc-number>5748735</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5748735</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>DAVIS DEREK L</text>
          <document-id>
            <country>US</country>
            <doc-number>5937063</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5937063</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Schneier, Applied Cryptography 2nd ed, John Wiley &amp; Sons, pp569, 1996.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Morgan, Stephen P.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Russell, Lance W.</name>
            <address>
              <address-1>Hollister, CA, US</address-1>
              <city>Hollister</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Reed, Benjamin Clay</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Merchant, Gould, Smith, Edell, Welter &amp; Schmidt</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Hayes, Gail O.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A multi-stage login procedure and system involves a first stage in which a login ID and a public key (encrypted) is transmitted from a client computer to a server computer and a key-exchange key (encrypted) is provided from the server computer to the client computer.
      <br/>
      In a second stage, a first split symmetric key and a server authentication string is generated and encrypted by the client computer and then transmitted to the server computer.
      <br/>
      In addition, the server computer generates a second split symmetric key and combines the same with the first split symmetric key to obtain a complete symmetric key for encrypting further communications from the server to the client computer.
      <br/>
      The server also generates a client authentication string, encrypts the same and transmits the encrypted string, the server authentication string (encrypted and incremented) and the second split symmetric key (encrypted) to the client computer.
      <br/>
      In a third stage, the client computer uses the server authentication string to authenticate the server.
      <br/>
      In addition, the client computer combines the second split symmetric key with the first split symmetric key to obtain the complete symmetric key for encrypting further communications from the client computer to the server computer.
      <br/>
      The client computer also decrypts, increments and encrypts the client authentication string and transmits the same to the server.
      <br/>
      The server then uses the client authentication string (after decryption and decrementation) to authenticate the client computer.
      <br/>
      Thereafter, the server provides the client computer with a first split symmetric persistent storage key (encrypted), which the client computer combines (after decryption) with a one-way hash value to obtain a persistent storage key for use by the client computer to communication information to and from persistent storage.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
    <p num="1">This application is related to the following co-pending and commonly assigned patent application, which is incorporated herein by reference:</p>
    <p num="2">
      application Ser.
      <br/>
      No. 08/988,880, entitled "Security Method and System for Persistent Storage and Communications on Computer Network Systems and Computer Network Systems Employing the Same" filed on same date herewith by Stephen P. Morgan and Lance W. Russell.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="3">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="4">The present invention relates, generally, to security methods and systems for persistent storage and data communications on computer networks, and computer network systems employing the same.</p>
    <p num="5">2. Description of Related Art</p>
    <p num="6">
      Data security has become increasingly more important as modern society and industry becomes more reliant on computer-based transactions and communications.
      <br/>
      Such transactions and communications often involve the transfer of sensitive, confidential or proprietary data on a computer network system, between multiple user computer terminals or between user terminals and server computers.
    </p>
    <p num="7">
      Network security measures often involve the storage of such sensitive, confidential or proprietary data in highly secure network server computers, with tight control of access to the server computer database.
      <br/>
      However, even with such security measures, the inherent operating characteristics of typical network systems can render them susceptible to unauthorized access of data.
    </p>
    <p num="8">
      In typical network systems, multiple authorized users (or clients) communicate over, and have access to, a common communication network.
      <br/>
      In many computing applications, data that might be sensitive, confidential or proprietary, must be communicated over the common network, for example, between a server computer and an authorized user (client) computer terminal.
      <br/>
      As a result, there is a concern that data being communicated to or from a particular authorized network user (client) may be accessed, or even altered, by unauthorized users having access to the same network.
      <br/>
      Such susceptibility to unauthorized access of data transmissions has resulted in an increased need, in many industries, to maximize network transmission security.
    </p>
    <p num="9">
      Another potential network security issue involves unauthorized access of data stored in "persistent" storage means at a client terminal (the contents of which persists after the computer terminal is turned off).
      <br/>
      Some examples of such persistent storage include, but are not limited to, magnetic disk drives, including sealed drives, floppy drives, and removable (cartridge) drives; magneto-optical disk drives, optical disk drives; non-volatile, random access memory (NVRAM); and FLASH read-only memory (ROM).
      <br/>
      Of course, other means for providing persistent storage exist, and embodiments of the present invention apply to those as well.
    </p>
    <p num="10">
      In many computing applications, sensitive, confidential or proprietary data must be downloaded (or otherwise entered) in a client's terminal.
      <br/>
      Indeed, a client might intentionally, or even inadvertently, store such data in a persistent storage means associated with the client's terminal, for example, in the course of running a particular application.
      <br/>
      This raises a concern that unauthorized persons might gain access to that persistent storage means and the data stored therein, for example, after the client has turned off and left the terminal.
    </p>
    <p num="11">
      Thus, conventionally, data stored on network computers has often been vulnerable to compromise, as has data being downloaded from server computers to client computers on the network, or being uploaded from client computers to server computers.
      <br/>
      Moreover, these security concerns have been heightened in contexts in which, for example, networked client terminals were located in areas that were physically less secure than a secure server computer area, or data was transmitted over an unsecure network or a public network such as the Internet.
    </p>
    <p num="12">
      To minimize the concern about unauthorized access to data stored at network client terminals, some network systems are designed to minimize or eliminate the persistent storage capability at the client terminal.
      <br/>
      Thus, some network client terminals have been designed with only enough persistent storage capability to store, for example, an operating program for initiating communications with, and downloading further operating software, applications or data from a network server computer.
      <br/>
      In this regard, network client terminals may be designed to store minimal or no sensitive data, in a persistent storage means.
    </p>
    <p num="13">
      However, further security issues are raised by network systems in which network client computer terminals with little or no persistent storage means must run an initial control program sufficient to contact one or more servers and request that the servers download programs and/or data to the client computer.
      <br/>
      When turned on, such client computers load and start their initial control program, which is typically stored within read-only memory (ROM) means.
      <br/>
      The initial control program is generally capable of initializing and controlling the communication hardware of the client computer terminal, enabling the client terminal to download its regular control program from the server.
      <br/>
      Although the client computer may attempt to download its regular control program, further security issues arises from the concern that another computer connected to the network may intercept and alter the control program as it is being downloaded, thereby gaining control over the client computer terminal.
    </p>
    <p num="14">
      If security concerns regarding such persistent storage could be sufficiently minimized, it would be advantageous for network client terminals to be designed to include (or operate with) persistent storage means local to the client terminal.
      <br/>
      For example, persistent storage may be used to cache control programs for the client computer, thus relieving communication traffic and security risks associated with downloading such control programs from server computers.
      <br/>
      Persistent storage may be used to cache data downloaded from a server computer, thus relieving communication traffic and security risks associated with downloading of the same data a multiple number of times to the same client terminal.
      <br/>
      Portable persistent storage may be used to hold control programs and/or data associated with a particular client of a pool of client computers, such as configuration parameters and preferences, or user-private data, that could be carried by the client, from network terminal to network terminal.
    </p>
    <p num="15">
      Moreover, it would also be advantageous to minimize the above-noted security concerns relating to the transmission of data between client computers and server computers.
      <br/>
      For example, if such security concerns could be minimized, control programs for network client computers could be simplified, since they would be able to trust data downloaded from server computers.
      <br/>
      In addition, control programs executed on server computers could be simplified since they would be able to trust data uploaded from client computers.
      <br/>
      Furthermore, network client and server computers could trust data transmitted over public, unsecure networks such as the Internet.
    </p>
    <heading>SUMMARY OF THE DISCLOSURE</heading>
    <p num="16">It is an object of preferred embodiments of the present invention to minimize the above security problems in a network computing environment.</p>
    <p num="17">More particularly, it is an object of preferred embodiments of the present invention to enhance security and performance in a networked computer system in a manner such that a control program downloaded from a server to an authorized user (or client) computer terminal may be protected from alteration by any other computer connected to the network.</p>
    <p num="18">It is an object of further preferred embodiments of the present invention to provide the capability to store a control program or data for a client computer terminal on persistent storage directly accessible to the client terminal, but protected from access or alteration by unauthorized users, thus minimizing (or, more preferably, eliminating) the need to download a control program or sensitive data from a server to the client terminal.</p>
    <p num="19">It is an object of yet further preferred embodiments of the present invention to provide the capability such that data on persistent storage directly accessible to a client computer terminal may be protected from access or alteration by unauthorized users.</p>
    <p num="20">It is an object of yet further preferred embodiments of the present invention to enhance security and performance in a networked computer system such that data communicated between a client computer terminal and a server may be protected from access or alteration by any other computers and/or unauthorized users.</p>
    <p num="21">
      These and other objects are accomplished according to a preferred embodiments, in which a three-stage login procedure takes place, wherein each stage involves communications to and from the client computer and the server computer.
      <br/>
      In a first stage, a login ID and a public key (encrypted) is provided from the client computer to the server computer and a key-exchange key (encrypted) is provided from the server computer to the client computer.
    </p>
    <p num="22">
      In a second stage, a first split symmetric key and a server authentication string is generated and encrypted by the client computer and then transmitted to the server computer.
      <br/>
      In addition, the server computer generates a second split symmetric key and combines the same with the first split symmetric key to obtain a complete symmetric key for encrypting further communications from the server to the client computer.
      <br/>
      The server also generates a client authentication string and encrypts the same.
      <br/>
      In addition, the server decrypts the server authentication string received from the client computer, modifies the decrypted string with a predetermined algorithm function (such as incrementing the string by a predetermined number, for example, one), encrypts the modified string as well as the server authentication string and transmits the same, with the client authentication string (encrypted) and the second split symmetric key (encrypted) to the client computer.
    </p>
    <p num="23">
      In a third stage, the client computer uses the server authentication string to authenticate the server (after decryption and application of the inverse algorithm function).
      <br/>
      In addition, the client computer combines the second split symmetric key with the first split symmetric key to obtain the complete symmetric key for encrypting further communications from the client computer to the server computer.
      <br/>
      The client computer also decrypts the client authentication string, modifies the string by applying a predetermined algorithm function to the decrypted string (such as incrementing the string by a predetermined number, for example, one), encrypts the modified client authentication string and transmits the same to the server.
      <br/>
      The server then uses the client authentication string (after decryption and application of the inverse algorithm function) to authenticate the client computer.
      <br/>
      Thereafter, the server provides the client computer with a first split symmetric persistent storage key (encrypted), which the client computer combines (after decryption) with a one-way hash value to obtain a persistent storage key for use by the client computer to communication information to and from persistent storage.
    </p>
    <p num="24">
      In this manner, a common symmetric key is obtained by the server and the client computers for communication therebetween and a second symmetric key is obtained by the client computer for communication to and from persistent storage.
      <br/>
      In addition, an authentication string is provided to the server computer for authentication client computer and, a further authentication string is provided to the client computer for authication of the server computer.
      <br/>
      Moreover, every communication of keys, split keys and authentication strings is encrypted before transmission between server and client computers.
    </p>
    <p num="25">
      Thus, virtually all communications between the client computer and the server may be encrypted.
      <br/>
      Moreover, both the client-provided password and the server-generated keys and split keys are needed to establish and complete a communication link between a client computer and the server computer.
      <br/>
      Furthermore, encrypted data and/or operating programs may be stored in persistent storage at the client computer location, while encryption and decryption keys are stored in secure storage associated with the server and provided to a client only after authentication.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="26">
      Embodiments of the present invention are described herein with reference to the accompanying drawings, wherein like numerals correspond to like features in the drawings.
      <br/>
      FIG. 1 is a block diagram representing a network system which may be operated in accordance with preferred embodiments of the present invention.
      <br/>
      FIG. 2a is a flow chart representing the portion of a first stage of a login process carried out by an authorized user (or client) computer on the network system of FIG. 1.
      <br/>
      FIG. 2b represents a first-stage login request transmitted by a client computer, upon performance of steps shown in the flow chart of FIG. 2a.
      <br/>
      FIG. 3a is a flow chart representing the portion of a first stage of a login process carried out by a server computer on the network system of FIG. 1.
      <br/>
      FIG. 3b represents a first-stage login response transmitted by a server computer, upon performance of steps shown in the flow chart of FIG. 3a.
      <br/>
      FIG. 4a is a flow chart representing the portion of a second stage of a login process carried out by a client computer on the network system of FIG. 1.
      <br/>
      FIG. 4b represents a second-stage login request transmitted by a client computer, upon performance of steps shown in the flow chart of FIG. 4a.
      <br/>
      FIG. 5a is a flow chart representing the portion of a second stage of a login process carried out by a server computer on the network system of FIG. 1.
      <br/>
      FIG. 5b represents a second-stage login response transmitted by a server computer, upon performance of steps shown in the flow chart of FIG. 5a.
      <br/>
      FIG. 6a is a flow chart representing the portion of a third stage of a login process carried out by a client computer on the network system of FIG. 1.
      <br/>
      FIG. 6b represents a third-stage login request transmitted by a client computer, upon performance of steps shown in the flow chart of FIG. 6a.
      <br/>
      FIG. 7a is a flow chart representing the portion of a third stage of a login process carried out by a server computer on the network system of FIG. 1.
      <br/>
      FIG. 7b represents a third-stage login response transmitted by a server computer, upon performance of steps shown in the flow chart of FIG. 7a.
      <br/>
      FIG. 8 is a flow chart representing steps performed by a client computer, following the transmitting step in FIG. 6a.
    </p>
    <heading>DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading>
    <p num="27">
      The following detailed description is of the best presently contemplated mode of carrying out the invention.
      <br/>
      This description is not to be taken in a limiting sense, but is made merely for the purpose of illustrating general principles of the invention.
      <br/>
      The scope of the invention is best defined by the appended claims.
    </p>
    <p num="28">As noted above, the present invention relates, generally, to security methods and systems for securing persistent storage and data communications for computer networks, and computer network systems employing the same.</p>
    <p num="29">
      With reference to FIG. 1, a computer network system 10, in accordance with preferred embodiments of the present invention, includes one or more (and preferably a plurality of) client computers 12 operatively connected to a communication link 14.
      <br/>
      In preferred embodiments, the client computers 12 comprise networked client computer terminals.
      <br/>
      Two such terminals are shown in FIG. 1.
      <br/>
      However, it will be understood that network systems according to further embodiments may include more than two client computers 12.
      <br/>
      Generally, the computer programs which implement the preferred embodiment of the invention may be embodied in or readable from a computer-readable medium or carrier, e.g., one or more of the fixed and/or removable data storage data devices and/or data communications devices connected to the computer.
      <br/>
      The computer programs comprise instructions which, when read and executed by computer, cause the computer to perform the steps necessary to execute the steps or elements of the present invention.
    </p>
    <p num="30">
      Preferably, the network also includes one or more (and preferably a plurality of) server computers 16 also operatively connected to the communication link 14.
      <br/>
      Two such server computers are shown in FIG. 1.
      <br/>
      However, it will be understood that network systems according to further embodiments may include more than two server computers 16.
      <br/>
      Each server computer operates with a persistent storage means 17, for example, of the type noted above, but maintained in a secure environment to avoid unauthorized access of data stored therein.
      <br/>
      The communication link 14 may include a public network, such as the Internet, a local area network, or any other suitable communications connection, hardwired, wireless, or a hybrid thereof.
    </p>
    <p num="31">
      Also in accordance with preferred embodiments, each client computer 12 operates with, and may directly access, an associated persistent storage means 18 (for example, of the type identified above) and the information stored therein, hereinafter called persistent information.
      <br/>
      In preferred embodiments as illustrated in FIG. 1, each client computer 12 is directly coupled to an associated persistent storage means 18 local to the client computer.
      <br/>
      In further embodiments, more than one client terminal may share one or more common persistent storage means.
    </p>
    <p num="32">In preferred embodiments, persistent storage means that are directly accessible to a client computer, are used in conjunction with a communication procedure using asymmetric and symmetric key encryption (as discussed in more detail below), to achieve various advantages related to the above-discussed advantages.</p>
    <p num="33">
      In general, asymmetric key encryption involves two bit strings K1 and K2 and two asymmetric key operators, such as, but not limited to, Rivest-Shamir-Adelman (RSA) asymmetric key operators `+` and `*`, applied to an arbitrary bit string A, such that (using the above-noted `+` and `*` operators as an example):
      <br/>
      (A+K1)*K2=A=(A+K2)*K1.
    </p>
    <p num="34">
      It has been found that the bit stream A is costly to compute solely from knowledge of K1 and/or (A+K1) and/or (A+K2).
      <br/>
      In addition, it has been found that K2 is costly to compute solely from knowledge of A and/or K1 and/or (A+K1) and/or (A+K2).
      <br/>
      Two well-known examples of asymmetric key encryption which may be employed with preferred embodiments of the present invention are Diffie-Hellman (DH) and RSA.
      <br/>
      However, further embodiments of the present invention may employ other asymmetric key encryption techniques and asymmetric key operators consistent therewith.
    </p>
    <p num="35">
      Symmetric key encryption generally involves a bit string K and a symmetric key encryption operator, such as, but not limited to, the U.S. Data Encryption Standard (DES) operator `&amp;`, applied to an arbitrary bit string A, such that (using the above-noted `&amp;` operator as an example):
      <br/>
      (A&amp;K)&amp;K=A.
    </p>
    <p num="36">
      It has been found that A is costly to compute solely from knowledge of (A &amp; K).
      <br/>
      It has also been found that K is costly to compute solely from knowledge of (A &amp; K).
      <br/>
      One well-known example of key symmetric key encryption which may be employed with preferred embodiments of the present invention is the DES.
      <br/>
      However, further embodiments of the present invention may employ other symmetric key encryption techniques and symmetric key operators consistent therewith.
    </p>
    <p num="37">
      In accordance with preferred embodiments of the present invention, to initiate communications between a client computer and a server computer on a network, a security operation is carried out using both asymmetric and symmetric key encryption techniques.
      <br/>
      Preferred embodiments involve a multi-stage login security procedure, carried out using a login control program stored, for example, on the persistent memory associated with the client computer.
      <br/>
      In preferred embodiments, the client computer is not able to access a further control program, until a successful login procedure has been carried out.
      <br/>
      In this regard, further control programs needed to run the client computer may be stored in the persistent storage means in encrypted form, wherein a key for decrypting the encrypted control program is provided to the client computer from a server computer during or after a successful login procedure, as described below.
      <br/>
      As an alternative to storing an encrypted control program in the client computer's associated persistent storage means, the server computer may provide the control program to the client computer during or following a successful login procedure.
    </p>
    <p num="38">
      In preferred embodiments, the multi-stage login procedure involves the generation and communication of key data to and from the client and server computers, such that a common sessions key SK is established at the client and server computers for communications therebetween.
      <br/>
      In further preferred embodiments, the multi-stage login procedure also involves the generation of a persistent storage key PK for the client computer to use to encrypt and decrypt information stored in the persistent storage means associated therewith.
      <br/>
      In yet further preferred embodiments, the multi-stage login procedure also involves the authentication of the client computer to the server computer and, in yet further preferred embodiments, the authentication of the server computer to the client computer.
    </p>
    <p num="39">
      One example of a multi-stage login procedure which accomplishes all of the above procedures is described herein, with reference to FIGS. 2a through FIG. 8, in the form of a three-stage login procedure, wherein each stage involves communications to and from the client computer and the server computer.
      <br/>
      In this regard, each stage of the login process according to such preferred embodiments includes a portion of the stage carried out by the client computer and a portion of the stage carried out by the server computer.
    </p>
    <p num="40">
      With regard to the illustrated embodiment, the first stage of the login procedure is represented by FIGS. 2a-3b, the second stage is represented by FIGS. 4a-5b, and the third stage is represented by FIGS. 6a-8. With respect to the first stage, FIG. 2a represents steps carried out by the client computer to transmit a first-stage login request (represented in FIG. 2b), while FIG. 3a represents steps carried out by the server computer to transmit a first-stage login response (represented in FIG. 3b).
      <br/>
      With respect to the second stage, FIG. 4a represents steps carried out by the client computer to transmit a second-stage login request (represented in FIG. 4b), while FIG. 5a represents steps carried out by the server computer to transmit a second-stage login response (represented in FIG. 5b).
      <br/>
      With respect to the third stage, FIG. 6a represents steps carried out by the client computer to transmit a third-stage login request (represented in FIG. 6b), while FIG. 7a represents steps carried out by the server computer to transmit a third-stage login response (represented in FIG. 7b).
      <br/>
      FIG. 8 represents steps taken by the client computer, following the steps of FIG. 6a.
    </p>
    <p num="41">
      As a general overview of the illustrated embodiment, the first stage involves the communication of a login ID and a public key (encrypted) from the client computer to the server computer and a key-exchange key (encrypted) is provided from the server computer to the client computer.
      <br/>
      In a second stage, a first split symmetric key and a server authentication string is generated and encrypted by the client computer and then transmitted to the server computer.
      <br/>
      In addition, the server computer generates a second split symmetric key and combines the same with the first split symmetric key to obtain a complete symmetric key for encrypting further communications from the server to the client computer.
      <br/>
      The server also generates a client authentication string, encrypts the same.
      <br/>
      In addition, the server decrypts the encrypted server authentication string received from the client computer, modifies the same with a predetermined algorithm function and encrypts the modified server authentication string.
      <br/>
      The server computer then transmits the server authentication string (modified and encrypted) and the second split symmetric key (encrypted) to the client computer.
    </p>
    <p num="42">
      In a third stage, the client computer uses the server authentication string to authenticate the server (after decryption and application of inverse algorithm function).
      <br/>
      In addition, the client computer combines the second split symmetric key with the first split symmetric key to obtain the complete symmetric key for encrypting further communications from the client computer to the server computer.
      <br/>
      The client computer also decrypts the client authentication string, modifies the decrypted string by applying a predetermined algorithm function to the decrypted string, encrypts the modified client authentication string and transmits the same to the server.
      <br/>
      The server then uses the client authentication string (after decryption and application of the inverse algorithm function) to authenticate the client computer.
      <br/>
      Thereafter, the server provides the client computer with a first split symmetric persistent storage key (encrypted), which the client computer combines (after decryption) with a one-way hash value to obtain a persistent storage key for use by the client computer to communication information to and from persistent storage.
    </p>
    <p num="43">
      In this manner, in accordance with the illustrated preferred embodiment, a common symmetric key is obtained by the server and the client computers for communication therebetween, and a second symmetric key is obtained by the client computer for communication to and from persistent storage.
      <br/>
      In addition, an authentication string is provided to the server computer for authentication client computer.
      <br/>
      A further authentication string is also provided to the client computer for authication of the server computer.
      <br/>
      Moreover, every communication of keys, split keys and authentication strings is encrypted before transmission between server and client computers.
    </p>
    <p num="44">With reference to FIGS. 2a-8, a preferred embodiment is described with respect to the multiple stages of an example login procedure, as follows:</p>
    <p num="45">First Stage</p>
    <p num="46">
      An embodiment of the portion of a first stage of a login procedure, as carried out by the client computer, is represented by the flow chart of FIG. 2a. In particular, the login procedure may be initiated at the client computer 12, for example, upon a user entering an ID and password at the client computer terminal, preferably by manual entry through a suitable input means, such as a keyboard, card-reader, touch-screen, mouse or other suitable user-operated input device.
      <br/>
      However, further embodiments are contemplated in which identification and/or password information is automatically generated or recalled from a storage medium at the client computer.
      <br/>
      In preferred embodiments, as shown in step 20 of FIG. 2a, the client computer is controlled by the login control program to generate a prompt, requesting a user to enter an identification code (ID) and a password (PW).
      <br/>
      The ID may be, for example, specific to the particular client computer, while the PW may be specific to the particular user.
    </p>
    <p num="47">
      Upon recognition that an identification code ID and a password PW have been entered (step 22), the password is used at the client computer 12 to compute a one-way hash value H1PW of the PW (step 24).
      <br/>
      In addition, the client computer generates, preferably by random (or pseudo-random) generation, a public key PUB and a corresponding private key PVT (step 25).
      <br/>
      The public key PUB is encrypted, using the hash value H1PW as a symmetric key, for example, as PUB &amp; H1PW (where `&amp;` represents any suitable symmetric key encryption operator, including but not limited to a US.
      <br/>
      Data Encryption Standards operator), to yield the encrypted public key EPUB (step 26).
      <br/>
      Thereafter, a first-stage login request, composed of the login ID and EPUB is transmitted to a server computer (step 27), for example, over the network shown in FIG. 1.
      <br/>
      An embodiment of the transmitted first-stage login request is represented by reference character 28 in FIG. 2b.
    </p>
    <p num="48">
      The portion of the first stage of the login procedure as carried out by the server computer, in accordance with a preferred embodiment of the present invention, is represented by the flow chart of FIG. 3a. With reference to FIG. 3a, the server first determines whether or not a first-stage login request has been received (step 30).
      <br/>
      If so, then the server computer extracts the ID from the first-stage login request and uses the ID to look up the one-way hash value H1PW, which is stored in a secure persistent storage means operatively coupled to the server.
      <br/>
      For example, the ID extracted from the first-stage login request may be compared with a secure database of hash values associated with each possible ID (step 32).
      <br/>
      Preferably, the server computer determines whether or not the ID corresponds to any hash values in the database (step 34) and, if not, the login request is rejected (step 36).
      <br/>
      However, if the ID is found to correspond to a one-way hash value in the database, that hash value H1PW is obtained by the server (step 38) and is used by the server as a symmetric key to decrypt the encrypted public key EPUB (step 40), for example, as EPUB &amp; H1PW (where `&amp;` represents a suitable symmetric key encryption operator, such as described above).
    </p>
    <p num="49">
      The server computer also randomly (or pseudo-randomly) generates a symmetric key-exchange key KEK (step 42) and encrypts the same using the public key PUB, for example, as KEK+PUB (where `+` represents any suitable asymmetric key encryption operator, including, but not limited to, a Revest-Shamir-Adelman asymmetric key encryption operator), to yield the encrypted key-exchange key EKEK (step 44).
      <br/>
      The encrypted key-exchange key EKEK is then encrypted again, using the H1PW hash value as a symmetric key, for example, as EKEK &amp; H1PW (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield DEKEK (step 46).
      <br/>
      Thereafter, DEKEK is transmitted to the client computer as a first-stage login response (step 47).
      <br/>
      The first-stage login response is represented by reference character 48 in FIG. 3b.
    </p>
    <p num="50">Second Stage</p>
    <p num="51">
      The portion of the second stage of the login procedure, as carried out by the client computer is represented in FIG. 4a. That is, after the client computer transmitted the first-stage login request (step 27 in FIG. 2a), the client computer awaits the first-stage login response 48 (FIG. 3b) transmitted from the server (step 47 in FIG. 3a).
      <br/>
      In preferred embodiments, the client computer determines whether or not a first-stage login response is received (step 50 in FIG. 4a).
      <br/>
      In further preferred embodiments, the client computer includes means for recording the period of time following the transmission of the first-state login request (step 27 in FIG. 2a) and comparing the recorded time period with a predetermined threshold time value (step 52 in FIG. 4a).
      <br/>
      If the recorded time exceeds the threshold time value, indicating that more time has passed than would reasonably be expected for normal operation of the server, then the client computer aborts the login attempt (step 54).
    </p>
    <p num="52">
      On the other hand, if the client computer determines that it has received the first-stage login response prior to the expiration of the threshold period of time, the client computer then decrypts DEKEK, using H1PW as a symmetric key, for example, as DEKEK &amp; H1PW (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield EKEK (step 56).
      <br/>
      The client computer then decrypts EKEK using the PRV key, for example, as EKEK*PRV (where `*` represents a suitable asymmetric key encryption operator, such as described above), to yield KEK (step 58).
      <br/>
      As a result, both the server computer and the client computer have the key-exchange key KEK.
      <br/>
      Thus, the key-exchange key KEK may used by the server and client computers to encrypt and decrypt further key information.
      <br/>
      In that regard, further key information, preferably a split symmetric sessions key SK1, is randomly (or pseudo-randomly) generated by the client computer (step 60) and encrypted using KEK as a symmetric key, for example, as SK1 &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield ESK1 (step 62) for transmission to the server.
    </p>
    <p num="53">
      In preferred embodiments, the process also involves authentication of the server computer to the client computer.
      <br/>
      In accordance with one embodiment for effecting such authentication, the client computer generates, preferably randomly (or pseudo-randomly), a server authentication string SRV (step 64).
      <br/>
      The client computer also includes means for, at least temporarily, storing a representation of the string SRV for a comparison operation described below in connection with step 110.
      <br/>
      In addition, the string SRV also encrypted using KEK as a symmetric key, for example, as SRV &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield ESRV (step 66).
    </p>
    <p num="54">
      A second-stage login request is then transmitted to the server (sep 68).
      <br/>
      For preferred embodiments in which the server authentication string is generated, the second-stage login request comprises ESRV and ESK1, as represented by reference character 70 in FIG. 4b. For embodiments in which server authentication is not carried out, the second-stage login request 70 need not include ESRV.
    </p>
    <p num="55">
      The portion of the second stage of the login procedure as carried out by the server computer, in accordance with a preferred embodiment of the present invention, is represented by the flow chart of FIG. 5a. That is, after the server computer transmitted the first-stage login response (step 47 in FIG. 3a), the server computer awaits the second-stage login request 70 (FIG. 4b) transmitted from the client computer (step 68 in FIG. 4a).
      <br/>
      In preferred embodiments, the server computer determines whether or not a second-stage login request is received (step 72 in FIG. 5a).
      <br/>
      In further preferred embodiments, the server computer includes means for recording the period of time following the transmission of the first-stage login response (step 47 in FIG. 3a) and comparing the recorded time period with a predetermined threshold time value (step 74 in FIG. 5a).
      <br/>
      If the recorded time exceeds the threshold time value before the second-stage login request is received, indicating that more time has passed than would reasonably be expected for normal operation of the client computer, then the server computer rejects the login request (step 76).
    </p>
    <p num="56">
      On the other hand, if the server computer determines that it has received the second-stage login request prior to the expiration of the threshold period of time, the server computer decrypts ESK1, using KEK as a symmetric key, for example, as ESK1 &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield SK1 (step 78).
      <br/>
      In addition, the server generates, preferably by random (or pseudo-random) generation, a second split symmetric sessions key SK2 (step 80) and, then, combines the first and second split symmetric session keys SK1 and SK2 to yield symmetric sessions key SK (step 82).
      <br/>
      The second split symmetric sessions key SK2 is encrypted, using KEK as a symmetric key, for example, as SK2 &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield ESK2 (step 84) for transmission to the client computer.
    </p>
    <p num="57">
      In embodiments in which server authentication is carried out, the server computer also decrypts ESRV, using KEK as a symmetric key, for example, as ESRV &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield SRV (step 86).
      <br/>
      Then, the server modifies SRV in a predetermined manner, such as by applying a predetermined algorithm function F to SRV.
      <br/>
      In one preferred embodiment, the predetermined algorithm function comprises incrementing SRV by a predetermined number, for example, by one, yielding ISRV (step 88).
      <br/>
      However, in further embodiments, other suitable predetermined algorithm functions or other suitable predetermined modifications of the string SRV to yield ISRV may be employed.
      <br/>
      The server computer then encrypts ISRV using the key-exchange key KEK as a symmetric key, for example, as ISRV &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield EISRV (step 90).
    </p>
    <p num="58">
      In further preferred embodiments, the process also involves authentication of the client computer to the server computer.
      <br/>
      In accordance with one embodiment for effecting such authentication, the server computer generates, preferably by random (or pseudo-random) generation, a client authentication string CLT (step 92).
      <br/>
      The server computer also includes means for, at least temporarily, storing a representation of the string CLT for a comparison operation described below in connection with step 140.
      <br/>
      In addition, the string CLT is also encrypted using KEK as a symmetric key, for example, as CLT &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield ECLT (step 94).
    </p>
    <p num="59">
      A second-stage login response is then transmitted to the client computer (sep 96).
      <br/>
      For preferred embodiments in which the server authentication string is generated, the second-stage login response comprises EISRV, ECLT and ESK2, as represented by reference character 98 in FIG. 5b. For embodiments in which server authentication is not carried out, the second-stage login response 98 need not include EISRV.
      <br/>
      For embodiments in which client authentication is not carried out, the second stage login response 98 need not include ECLT.
    </p>
    <p num="60">Third Stage</p>
    <p num="61">
      The portion of the third stage of the login procedure, as carried out by the client computer is represented in FIG. 6a. That is, after the client computer transmitted the second-stage login request (step 68 in FIG. 4a), the client computer awaits the second-stage login response 98 (FIG. 5b) transmitted from the server (step 96 in FIG. 5a).
      <br/>
      In preferred embodiments, the client computer determines whether or not a second-stage login response is received (step 100 in FIG. 6a).
      <br/>
      In further preferred embodiments, the client computer includes means for recording the period of time following the transmission of the second-stage login request (step 68 in FIG. 4a) and comparing the recorded time period with a predetermined threshold time value (step 102 in FIG. 6a).
      <br/>
      If the recorded time exceeds the threshold time value, indicating that more time has passed without receipt of the second-stage login response than would reasonably be expected for normal operation of the server, then the client computer aborts the login attempt (step 104).
    </p>
    <p num="62">
      On the other hand, if the client computer determines that it has received the second-stage login response prior to the expiration of the threshold period of time, then the client computer decrypts elements of the second-stage login response.
      <br/>
      In particular, for embodiments in which server authentication is effected, the client computer decrypts EISRV, using KEK as a symmetric key, for example, as EISRV &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield ISRV (step 106).
      <br/>
      The client computer then un-modifies ISRV, for example, by applying the inverse algorithm function 1/F (inverse to the algorithm function applied above to modify SRV to yield ISRV).
      <br/>
      In the above-mentioned example embodiment wherein the algorithm function comprised incrementing the string SRV by a predetermined number, such as one (step 88), the inverse function comprises decrementing the modified string ISRV by said predetermined number, such as one (step 108).
    </p>
    <p num="63">
      The thus yielded SRV is compared to the server authentication string generated and stored by the client computer in connection with step 64 (step 110).
      <br/>
      A determination is made as to whether or not the compared SRV strings sufficiently match (step 112) and, if not, the client computer aborts the login process (step 114).
      <br/>
      If a sufficient match is found in step 112, then the login process carries on as described below.
      <br/>
      In this manner, the client computer authenticates the server computer as being the same computer to which the client computer transmitted the SRV string in the second stage of the process.
    </p>
    <p num="64">
      Preferably upon successful authentication of the server, the client computer decrypts the encrypted second split symmetric sessions key ESK2, using KEK as a symmetric key, for example, as ESK2 &amp; KEK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield SK2 (step 116).
      <br/>
      In embodiments in which server authentication is not carried out, step 116 may follow directly from the "yes" prong of step 100.
      <br/>
      The client computer then combines the first and second split symmetric sessions keys SK1 and SK2 to yield the split symmetric sessions key SK (step 118).
      <br/>
      In this manner, the client computer and the server computer possess the split sessions key SK, which may thereafter be used by both the client computer and the server computer for encrypting and decrypting further communications therebetween.
    </p>
    <p num="65">
      For embodiments in which client authentication is effected, the client computer decrypts ECLT, using KEK as a symmetric key, for example, as ECLT &amp; KEK (where `&amp;` represents a symmetric key encryption operator), to yield CLT (step 120).
      <br/>
      The client computer then modifies CLT, for example, by applying a predetermined algorithm function to CLT.
      <br/>
      In one embodiment, the predetermined algorithm function comprises incrementing CLT by a predetermined value, for example, by one, to yield ICLT (step 122).
      <br/>
      However, in further embodiments, other suitable predetermined algorithm functions or other suitable predetermined modifications of the string CLT to yield ICLT may be employed.
      <br/>
      The client computer then encrypts ICLT, using SK as a symmetric key, for example, as ICLT &amp; SK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield EICLT (step 124).
    </p>
    <p num="66">
      A third-stage login request is then transmitted to the server (step 126).
      <br/>
      In embodiments in which client authentication is effected, the third-stage login request comprises the encoded, incremented, client authentication string EICLT, as represented by reference character 128 in FIG. 6b. In further embodiments in which client authentication is not effected, the third-stage login request may comprise any predefined information, encoded using SK as a symmetric key.
    </p>
    <p num="67">
      The portion of the third stage of the login procedure as carried out by the server computer, in accordance with a preferred embodiment of the present invention, is represented by the flow chart of FIG. 7a. That is, after the server computer transmitted the second-stage login response (step 96 in FIG. 5a), the server computer awaits the third-stage login request 128 (FIG. 6b) transmitted from the client computer (step 126 in FIG. 6a).
      <br/>
      In preferred embodiments, the server computer determines whether or not a third-stage login request is received (step 130 in FIG. 7a).
      <br/>
      In further preferred embodiments, the server computer includes means for recording the period of time following the transmission of the second-stage login response (step 96 in FIG. 5a) and comparing the recorded time period with a predetermined threshold time value (step 132 in FIG. 7a).
      <br/>
      If the recorded time exceeds the threshold time value before the third-stage login request is received, indicating that more time has passed than would reasonably be expected for normal operation of the client computer, then the server computer rejects the login request (step 134).
    </p>
    <p num="68">
      On the other hand, if the server computer determines that it has received the third-stage login request prior to the expiration of the threshold period of time, the server computer proceeds as follows.
      <br/>
      For embodiments in which client authentication is effected, the server computer decrypts EICLT, using SK as a symmetric key, for example, as EICLT &amp; SK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield ICLT (step 136).
      <br/>
      Then, the server computer then un-modifies ICLT, for example, by applying the inverse algorithm function (inverse to the algorithm function applied above to modify CLT to yield ICLT).
      <br/>
      In the above-mentioned example embodiment wherein the algorithm function comprised incrementing the string CLT by a predetermined number, such as one (step 122), the inverse function comprises decrementing the modified string ICLT by said predetermined number, such as one (step 138).
    </p>
    <p num="69">
      The thus yielded CLT is compared to the client authentication string generated and stored by the server computer in connection with step 92 (step 140).
      <br/>
      A determination is made as to whether or not the compared CLT strings sufficiently match (step 142) and, if not, the server computer rejects the login process (step 144).
      <br/>
      If a sufficient match is found in step 142, then the login process carries on as described below.
      <br/>
      In this manner, the server computer authenticates the client computer as being the same computer to which the server computer transmitted the CLT string in the second stage of the process.
    </p>
    <p num="70">
      Preferably upon successful authentication of the client computer, the server computer looks up a first split symmetric persistent storage key PK1 associated with the login ID (step 146) and then encrypts the same, using SK as a symmetric key, for example, as PK1 &amp; SK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield EPK1 (step 148).
      <br/>
      In further embodiments, step 146 may be combined with step 38, such that the first split symmetric persistent storage key PK1 is obtained as part of the look up step 38 and stored for use in step 148.
      <br/>
      Also, in embodiments in which client authentication is not carried out, step 146 or step 148 may follow directly from the "yes" prong of step 130.
    </p>
    <p num="71">
      A third-stage login response is then transmitted to the server (step 150).
      <br/>
      The third-stage login response comprises the encoded, first split symmetric persistent storage key PK1, as represented by reference character 152 in FIG. 7b. As discussed below, the, first split symmetric persistent storage key PK1 is used by the client computer to generate a symmetric key for the client computer to use to encrypt and decrypt information communicated to and from persistent storage.
    </p>
    <p num="72">
      In particular, after the client computer transmitted the third-stage login request (step 126 in FIG. 6a), the client computer awaits the third-stage login response 152 (FIG. 7b) transmitted from the server (step 150 in FIG. 7a).
      <br/>
      In preferred embodiments, the client computer determines whether or not a third-stage login response is received (step 154 in FIG. 8).
      <br/>
      In further preferred embodiments, the client computer includes means for recording the period of time following the transmission of the third-stage login request (step 126 in FIG. 6a) and comparing the recorded time period with a predetermined threshold time value (step 156 in FIG. 8).
      <br/>
      If the recorded time exceeds the threshold time value, indicating that more time has passed without receipt of the third-stage login response than would reasonably be expected for normal operation of the server, then the client computer aborts the login attempt (step 158).
    </p>
    <p num="73">
      On the other hand, if the client computer determines that it has received the third-stage login response prior to the expiration of the threshold period of time, then the client computer decrypts EPK1, using the SK as a symmetric key, for example, as EPK1 &amp; SK (where `&amp;` represents a suitable symmetric key encryption operator, such as described above), to yield the first split symmetric persistent storage key PK1 (step 160).
      <br/>
      In addition, the client computer computes a second one-way hash value H2PW from the password PW (step 162), which is then combined with the first split symmetric persistent storage key PK1 to yield persistent storage key PK (step 164).
      <br/>
      Alternatively, step 162 may be carried out during during step 24, when the client computer computes the first one-way hash value H1PW, and stored for use in step 164.
      <br/>
      As a further alternative, a second split symmetric persistent storage key PK2 may be generated and then combined with PK1 to yield PK, where PK2 is generated by any suitable means, including, but not limited to prompting the user for a second password corresponding to PK2, by reading a token corresponding to PK2 from, for example a pre-encoded smart card, or by reading biometric data such as a fingerprint, voice pattern or retina scan and looking up PK2 in a database record corresponding to the second password, token or biometric data.
    </p>
    <p num="74">
      Following the above process, the symmetric key SK is used by the server computer and the client computer to encrypt and decrypt communications therebetween.
      <br/>
      In addition, the client computer uses the persistent storage key PK to encrypt and decrypt data written to and from persistent storage.
    </p>
    <p num="75">
      Pursuant to the above-discussed process, significant advantages are achievable, with respect to security issues relating to persistent storage at the client computers.
      <br/>
      More specifically, encrypted persistent information remains encrypted when the client computer is off, or when the persistent storage containing said persistent information is removed from the client computer.
    </p>
    <p num="76">
      Thus, client computers may be provided with (and directly access) persistent storage devices, with confidence in the security of storing data and/or control programs for the client computer on the persistent storage, in that the data and control programs may be encrypted and, thus, protected from access or alteration by unauthorized users.
      <br/>
      Thus, sensitive data may be stored on persistent storage for direct access by the client computer, minimizing the need to download such data over the network from a server.
      <br/>
      In addition, the client computer need not download a control program from a server.
    </p>
    <p num="77">
      Alternatively, in accordance with further preferred embodiments, once login procedures are carried out, the client computers may load further control programs or data from secure persistent storage and/or secure communication networks associated with the server with which login took place.
      <br/>
      Thus, the security controls associated with the login and authentication procedures provide confidence that the control programs or data downloaded from the server are correct and secure.
    </p>
    <p num="78">
      In addition, significant advantages are achievable with respect to security issues relating to the transmission of sensitive information over a network communication link, in that all communications between the client computer and the server computer are encrypted.
      <br/>
      In this manner, data communicated between a client computer and a server may be protected from access or alteration by any other computers and/or unauthorized users.
    </p>
    <p num="79">In further preferred embodiments, security may be enhanced by programming the client computer and/or server computer to reject symmetric sessions key SK after a fixed time, or after a certain number of accesses to secure data, or when certain highly sensitive or secret data is to be accessed, forcing the client computer and server computer to re-authenticate.</p>
    <p num="80">
      In preferred embodiments discussed above, an algorithm function F and inverse function 1/F are employed for coding and decoding the server and client authentication strings.
      <br/>
      In one embodiment, F may be an invertible function.
      <br/>
      However, in further embodiments F may be applied by any suitable means including, but not limited to, a "SmartCard" computing device.
      <br/>
      The SmartCard would be passed an authentication string, would apply a function F to the string, and would pass the result back.
      <br/>
      Function F may be an encryption method (whereas 1/F would be the corresponding decryption method), using a key stored on the SmartCard, but not directly accessible outside of the SmartCard.
      <br/>
      Thus, the ability to encrypt the string implies that the user has possession of the SmartCard.
      <br/>
      If F is an encryption method, it may be either symmetric, in which case the server must be aware of the encryption/decryption key, or asymmetric, in which case the server must be aware only of the decryption key.
      <br/>
      The latter case effectively uses an invertible function for authentication.
    </p>
    <p num="81">The presently disclosed embodiments are to be considered in all respects as illustrative and not restrictive, the scope of the invention being indicated by the appended claims, rather than the foregoing description, and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A login method to enhance security in a network computer system having at least one server computer coupled over a communication network to a plurality of client computers, wherein each client computer is coupled to directly access a persistent storage device and wherein each client computer is operated by a control program after login, the method comprising the steps of:</claim-text>
      <claim-text>receiving a login ID and password PW from a user at a first one of said client computers; computing, at said first client computer, a hash value H1PW of the password PW; transmitting a first-stage login request including ID from said first client computer to a first one of said server computers; receiving said first-stage login request at said first server computer; providing, at said first server computer, a key-exchange key KEK; encrypting KEK at said first server computer; transmitting a first-stage login response, including the encrypted KEK, from said first server computer to said first client computer; receiving said first-stage login response at said first client computer; decrypting, at said first client computer, the encrypted KEK, to yield KEK; providing, at said first client computer, a first split key SK1; encrypting, at said first client computer, key SK1, using KEK as an encryption key, to yield ESK1; transmitting a second-stage login request, including ESK1, from said first client computer to said first server computer; receiving said second-stage login request at said first server computer; decrypting, at said first server computer, ESK1, using KEK as a decryption key, to yield SK1; providing, at said first server computer, a second split key SK2; combining, at said first server computer, the first and second split keys SK1 an SK2, to yield session key SK; encrypting, at said first server computer, the second split key SK2, using KEK as an encryption key, to yield ESK2; transmitting a second-stage login response, including ESK2, from said first server computer to said first client computer; receiving the second-stage login response at said first client computer; decrypting, at said first client computer, ESK2 received with the second-stage login response, using KEK as a decryption key, to yield SK2; combining, at said first client computer, the first and second split keys SK1 and SK2, to yield sessions key SK; encrypting further transmissions between said first client computer and said first server computer, using sessions key SK as an encryption key; transmitting a third-stage login request from said client computer to said first server computer, following said step of combining, at said first client computer, the first and second split keys SK1 and SK2; receiving the third-stage login request at said first server computer; looking up, at said first server computer, a first split persistent storage key PK1 associated in a database with the ID received with said first-stage login request; encrypting, at said first server computer, key PK1, using SK as an encryption key, to yield EPK1; transmitting a third-stage login response, including EPK1, from said first server computer to said first client computer; receiving the third-stage login response at said first client computer; decrypting, at said first client computer, EPK1 received with said third-stage login response, using SK as a decryption key; providing, at said first client computer, a second split persistent storage key PK2; combining, at said first client computer, the first and second split persistent storage keys PK1 and PK2, to yield persistent storage key PK;</claim-text>
      <claim-text>and encrypting further data stored in the persistent storage device operatively coupled to said first client computer, using PK as an encryption key.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A method as recited in claim 1, wherein said step of providing, at said first client computer, a second split persistent storage key PK2, comprises the step of generating PK2 by pseudo-random generation.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A method as recited in claim 1: wherein, after said step of computing a hash value H1PW at said first client computer, and prior to said step of transmitting a first-stage login request, said method further includes the steps of:</claim-text>
      <claim-text>- providing, at said first client computer, a public key PUB and a corresponding private key PVT;</claim-text>
      <claim-text>and - encrypting, at said first client computer, the public key PUB, using H1PW as an encryption key, to yield EPUB; wherein said first-stage login request includes ID and EPUB and wherein, following said step of receiving said first-stage login request at said first server computer and prior to said step of encrypting KEK at said first server computer, said method further comprises the steps of: - looking up, at said first server computer, the hash value H1PW associated in a database with the ID received with said first-stage login request; - decrypting, at said first server computer, the EPUB received with said first-stage login request, using H1PW as a decryption key, yielding PUB; wherein, said step of encrypting KEK at said first server computer comprises the steps of: - encrypting KEK, at said first server computer, using PUB as a public key, to yield EKEK;</claim-text>
      <claim-text>and - encrypting EKEK, at said first server computer, using H1PW as an encryption key, to yield DEKEK; wherein, said first-stage login response includes DEKEK and wherein said step of decrypting, at said first client computer, the encrypted KEK, comprises the steps of: - decrypting DEKEK, at said first client computer, using H1PW as a decryption key, to yield EKEK;</claim-text>
      <claim-text>and decrypting EKEK, at said first client computer, using PVT as a private key, to yield KEK.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A method as recited in claim 3, wherein said step of providing, at said first client computer, a public key PUB and a corresponding private key PVT, comprises the step of generating PUB and PVT by pseudo-random generation.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A method as recited in claim 1, wherein after said step of decrypting, at said first client computer, the encrypted KEK, and prior to said step of transmitting a second-stage login request, said method further comprising the steps of: - providing a server authentication string SRV at said first client computer;</claim-text>
      <claim-text>and - encrypting SRV at said first client computer, using KEK as an encryption key, to yield ESRV; wherein said second-stage login request further includes ESRV and wherein, after said step of receiving said second-stage login request at said first server computer, and prior to said step of transmitting a second-stage login response, said method further comprising the steps of: - decrypting ESRV at said first server computer, using KEK as a decryption key, to yield SRV; - modifiying SRV, at said first server computer, by applying a predetermined algorithm function to SRV, to yield ISRV;</claim-text>
      <claim-text>and - encrypting ISRV at said first server computer, using KEK as an encryption key, to yield EISRV; wherein said second-stage login response further includes EISRV and wherein, after said step of receiving said second-stage login response at said client computer, said method further comprises the steps of: - decrypting EISRV at said first client computer, using KEK as a decryption key, to yield ISRV; - applying, at said first client computer, the inverse of said predetermined algorithm function to ISRV, to yield SRV;</claim-text>
      <claim-text>and - comparing, at said first client computer, the yielded SRV with the SRV provided in said step of providing a server authentication string SRV at said first client computer;</claim-text>
      <claim-text>and aborting the login procedure upon a failure to match said yielded SRV with said SRV provided in said step of providing a server authentication string SRV at said first client computer.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A method as recited in claim 5, wherein said step of providing a server authentication string SRV at said first computer comprises the step of generating SRV by pseudo-random generation.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A method as recited in claim 5, wherein after said step of receiving said second-stage login request at said first server computer, and prior to said step of transmitting a second-stage login response, said method further comprising the steps of: - providing a client authentication string CLT at said first server computer;</claim-text>
      <claim-text>and - encrypting CLT at said first server computer, using KEK as an encryption key, to yield ECLT; wherein said second-stage login response further includes ECLT and wherein, after said step of receiving said second-stage login response at said first client computer said method further comprising the steps of: - decrypting ECLT at said first client computer, using KEK as a decryption key, to yield CLT; - modifiying CLT, at said first client computer, by applying a predetermined algorithm function to CLT, to yield ICLT; - encrypting ICLT at said first client computer, using SK as an encryption key, to yield EICLT; - transmitting a third-stage login request, including EICLT, from said first client computer to said first server computer; - receiving said third-stage login request at said first server computer; - decrypting EICLT at said first server computer, using SK as a decryption key, to yield ICLT; - applying, at said first server computer, the inverse of said predetermined algorithm function to ICLT, to yield CLT; - comparing, at said first server computer, the yielded CLT with the CLT provided in said step of providing a client authentication string CLT at said first server computer;</claim-text>
      <claim-text>and rejecting the login procedure upon a failure to match said yielded CLT with said CLT provided in said step of providing a client authentication string CLT at said first server computer.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A method as recited in claim 7, wherein said step of providing a client authentication string CLT at said first server comprises the step of generating CLT by pseudo-random generation.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A method as recited in 1, wherein said step of providing, at said first client computer, a first split encryption key SK1 comprises the step of generating SK1 by pseudo-random generation.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A method as recited in claim 1, wherein said step of providing, at said first server computer, a second split encryption key SK2 comprises the step of generating SK2 by pseudo-random generation.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A method as recited in claim 1, wherein said step of providing, at said first server computer, a key-exchange key KEK, comprises the step of generating KEK by pseudo-random generation.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A login method to enhance security in a network computer system having at least one server computer coupled over a communication network to a plurality of client computers, wherein each client computer is coupled to directly access a persistent storage device and wherein each client computer is operated by a control program after login, the method comprising the steps of: receiving a login ID and password PW from a user at a first one of said client computers; computing, at said first client computer, a hash value H1PW of the password PW; transmitting a first-stage login request including ID from said first client computer to a first one of said server computers; receiving said first-stage login request at said first server computer; providing, at said first server computer, a key-exchange key KEK; encrypting KEK at said first server computer; transmitting a first-stage login response, including the encrypted KEK, from said first server computer to said first client computer; receiving said first-stage login response at said first client computer; decrypting, at said first client computer, the encrypted KEK, to yield KEK; providing, at said first client computer, a first split key SK1; encrypting, at said first client computer, key SK1, using KEK as an encryption key, to yield ESK1; transmitting a second-stage login request, including ESK1, from said first client computer to said first server computer; receiving said second-stage login request at said first server computer; decrypting, at said first server computer, ESK1, using KEK as a decryption key, to yield SK1; providing, at said first server computer, a second split key SK2; combining, at said first server computer, the first and second split keys SK1 and SK2, to yield session key SK; encrypting, at said first server computer, the second split key SK2, using KEK as an encryption key, to yield ESK2; transmitting a second-stage login response, including ESK2, from said first server computer to said first client computer; receiving the second-stage login response at said first client computer; decrypting, at said first client computer, ESK2 received with the second-stage login response, using KEK as a decryption key, to yield SK2; combining, at said first client computer, the first and second split keys SK1 and SK2, to yield sessions key SK; encrypting further transmissions between said first client computer and said first server computer, using sessions key SK as an encryption key; wherein, after said step of computing a hash value H1PW at said first client computer, and prior to said step of transmitting a first-stage login request, said method further includes the steps of: - providing, at said first client computer, a public key PUB and a corresponding private key PVT;</claim-text>
      <claim-text>and - encrypting, at said first client computer, the public key PUB, using H1PW as an encryption key, to yield EPUB; wherein said first-stage login request includes ID and EPUB and wherein, following said step of receiving said first-stage login request at said first server computer and prior to said step of encrypting KEK at said first server computer, said method further comprises the steps of: - looking up, at said first server computer, the hash value H1PW associated in a database with the ID received with said first-stage login request; - decrypting, at said first server computer, the EPUB received with said first-stage login request, using H1PW as a decryption key, yielding PUB;</claim-text>
      <claim-text>and wherein, said step of encrypting KEK at said first server computer comprises the steps of: - encrypting KEK, at said first server computer, using PUB as a public key, to yield EKEK;</claim-text>
      <claim-text>and - encrypting EKEK, at said first server computer, using H1PW as an encryption key, to yield DEKEK; wherein, said first-stage login response includes DEKEK and wherein said step of decrypting, at said first client computer, the encrypted KEK, comprises the steps of: - decrypting DEKEK, at said first client computer, using H1PW as a decryption key, to yield EKEK;</claim-text>
      <claim-text>and decrypting EKEK, at said first client computer, using PVT as a private key, to yield KEK.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A system to enhance security in a network computer environment, said system comprising: a communication network; at least one server computer, including a first server computer, coupled to said communication network; a plurality of client computers, including a first client computer, coupled to said communication network; a persistent storage device operatively coupled to each of said client computers; means, associated with said first client computer, for receiving a login ID and password PW; means, associated with said first client computer, for computing a hash value H1PW of the password PW; means associated with said first client computer, for providing a public key PUB and a corresponding private key PVT; means associated with said first client computer, for encrypying the public key PUB, using H1PW as an encryption key, to yield EPUB; wherein said first-stage login request includes ID and EPUB and wherein, following said means for receiving said first-stage login request at said first server computer and prior to said step of encrypting KEK at said first server computer, said means further comprises: - means associated with said first server computer, for looking up the hash value H1PW associated in a database with the ID received with said first-stage login request; - means associated with said first server computer, for decrypting the EPUB received with said first-stage login request, using H1PW as a decryption key, yielding PUB;</claim-text>
      <claim-text>and - wherein, said means for encrypting KEK at said first server computer comprises:</claim-text>
      <claim-text>-  means associated with said first server computer, for encrypting KEK using PUB as a public key, to yield EKEK;</claim-text>
      <claim-text>and -  means associated with said first server computer for encrypting EKEK using H1PW as an encryption key, to yield DEKEK; -  wherein, said first-stage login response includes DEKEK and wherein said means for decrypting, at said first client computer the encrypted KEK, comprises: -  means associated with said first client computer, for decrypting DEKEK using H1PW as a decryption key, to yield EKEK;</claim-text>
      <claim-text>and -  means associated with said first client computer for decrypting EKEK using PVT as a private key, to yield KEK; means, associated with said first client computer, for transmitting a first-stage login request including ID, through said communication network, to said first server computer; means, associated with said first server computer, for providing a first encryption key KEK; means, associated with said first server computer, for encrypting KEK; means, associated with said first server computer, for transmitting a first-stage login response, including the encrypted KEK, through said communication network, to said first client computer; means, associated with said first client computer, for decrypting the encrypted KEK, to yield KEK; means, associated with said first client computer, for providing a first split encryption key SK1; means, associated with said first client computer, for encrypting the first split key SK1, using KEK as an encryption key, to yield ESK1; means, associated with said first client computer, for transmitting a second-stage login request, including ESK1, through said communication network, to said first server computer; means, associated with said first server computer, for decrypting ESK1, using KEK as a decryption key, to yield SK1; means, associated with said first server computer, for providing a second split encryption key SK2; means, associated with said first server computer, for combining the first and second split keys SK1 and SK2, to yield session key SK; means, associated with said first server computer, for encrypting the second split symmetric key SK2, using KEK as an encryption key, to yield ESK2; means, associated with said first server computer, for transmitting a second-stage login response, including ESK2, through said communication network, to said first client computer; means, associated with said first client computer, for decrypting ESK2 received with the second-stage login response, using KEK as a decryption key, to yield SK2; means, associated with said first client computer, for combining the first and second split keys SK1 and SK2, to yield session key SK; means, associated with said first client computer, for encrypting further transmissions from said first client computer to said first server computer, using symmetric session key SK as an encryption key;</claim-text>
      <claim-text>and means, associated with said first server computer, for encrypting further transmissions from said first server computer to said first client computer, using symmetric session key SK as an encryption key.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A method as recited in claim 13, wherein said key KEK and said key SK comprise symmetric encryption keys.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. An article of manufacture comprising a computer program carrier readable by a first client computer coupled to a computer network system having a plurality of client computers and a computer program carrier readable by a first server computer coupled to said computer network system, the computer program carriers embodying one or more instructions executable by the first remote computer and the first server computer to perform method steps of: receiving a login ID and password PW from a user at a first one of said client computers; computing, at said first client computer, a hash value H1PW of the password PW; providing, at said first server computer, a key-exchange key KEK; providing, at said first client computer, a public key PUB and a corresponding private key PVT; encrypting, at said first client computer, the public key PUB, using H1PW as an encryption key, to yield EPUB; wherein said first-stage login request includes ID and EPUB and wherein, following said step of receiving said first-stage login request at said first server computer and prior to said step of encrypting KEK at said first server computer, said method further comprises the steps of: - looking up, at said first server computer, the hash value H1PW associated in a database with the ID received with said first-stage login request; - decrypting, at said first server computer, the EPUB received with said first-stage login request, using H1PW as a decryption key, yielding PUB;</claim-text>
      <claim-text>and wherein, said step of encrypting KEK at said first server computer comprises the steps of: - encrypting KEK, at said first server computer, using PUB as a public key, to yield EKEK;</claim-text>
      <claim-text>and - encrypting EKEK, at said first server computer, using H1PW as an encryption key, to yield DEKEK; wherein, said first-stage login response includes DEKEK and wherein said step of decrypting, at said first client computer, the encrypted KEK, comprises the steps of: - decrypting DEKEK, at said first client computer, using H1PW as a decryption key, to yield EKEK;</claim-text>
      <claim-text>and decrypting EKEK, at said first client computer, using PVT as a private key, to yield KEK; transmitting a first-stage login request including ID from said first client computer to a first one of said server computers; receiving said first-stage login request at said first server computer; encrypting KEK at said first server computer; transmitting a first-stage login response, including the encrypted KEK, from said first server computer to said first client computer; receiving said first-stage login response at said first client computer; decrypting, at said first client computer, the encrypted KEK, to yield KEK; providing, at said first client computer, a first split key SK1; encrypting, at said first client computer, key SK1, using KEK as an encryption key, to yield ESK1; transmitting a second-stage login request, including ESK1, from said first client computer to said first server computer; receiving said second-stage login request at said first server computer; decrypting, at said first server computer, ESK1, using KEK as a decryption key, to yield SK1; providing, at said first server computer, a second split key SK2; combining, at said first server computer, the first and second split keys SK1 and SK2, to yield session key SK; encrypting, at said first server computer, the second split key SK2, using KEK as an encryption key, to yield ESK2; transmitting a second-stage login response, including ESK2, from said first server computer to said first client computer; receiving the second-stage login response at said first client computer; decrypting, at said first client computer, ESK2 received with the second-stage login response, using KEK as a decryption key, to yield SK2; combining, at said first client computer, the first and second split keys SK1 and SK2, to yield sessions key SK; encrypting further transmissions between said first client computer and said first server computer, using sessions key SK as an encryption key.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A method as recited in claim 15, wherein said key KEK and said key SK comprise symmetric keys.</claim-text>
    </claim>
  </claims>
</questel-patent-document>