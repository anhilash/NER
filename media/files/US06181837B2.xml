<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181837B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181837</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181837</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="23341076" extended-family-id="1156720">
      <document-id>
        <country>US</country>
        <doc-number>08342265</doc-number>
        <kind>A</kind>
        <date>19941118</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1994US-08342265</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>1194882</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>34226594</doc-number>
        <kind>A</kind>
        <date>19941118</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1994US-08342265</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/30        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06K   9/03        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>9</main-group>
        <subgroup>03</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06Q  20/04        20120101A I20150218RMEP</text>
        <ipc-version-indicator>
          <date>20120101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>20</main-group>
        <subgroup>04</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20150218</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06Q  40/00        20120101A I20150218RMEP</text>
        <ipc-version-indicator>
          <date>20120101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>40</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20150218</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>382305000</text>
        <class>382</class>
        <subclass>305000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>382137000</text>
        <class>382</class>
        <subclass>137000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707E17009</text>
        <class>707</class>
        <subclass>E17009</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06Q-040/02</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>40</main-group>
        <subgroup>02</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131218</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30017</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30017</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131218</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06K-009/033</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>9</main-group>
        <subgroup>033</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131218</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06Q-020/042</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>20</main-group>
        <subgroup>042</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131218</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06Q-040/12</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>40</main-group>
        <subgroup>12</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131216</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/956</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>956</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99931</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99931</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99939</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99939</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>3</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>38</number-of-drawing-sheets>
      <number-of-figures>39</number-of-figures>
      <image-key data-format="questel">US6181837</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Electronic check image storage and retrieval system</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>MURPHY GARY J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4722444</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4722444</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>DURHAM THOMAS J</text>
          <document-id>
            <country>US</country>
            <doc-number>4821332</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4821332</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>BEHERA BAILOCHAN</text>
          <document-id>
            <country>US</country>
            <doc-number>5187750</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5187750</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>BOROWSKI EDWARD F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5359667</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5359667</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>UHLAND SR JOSEPH C</text>
          <document-id>
            <country>US</country>
            <doc-number>5444794</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5444794</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>BATALIANETS VALERI V, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5495929</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5495929</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>BEDNAR GREGORY M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5506691</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5506691</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>BLAYLOCK THOMAS F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5550932</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5550932</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>NAKANISHI HIROYUKI</text>
          <document-id>
            <country>US</country>
            <doc-number>5872637</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5872637</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>MILFORD RICHARD E</text>
          <document-id>
            <country>US</country>
            <doc-number>4315246</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4315246</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>MARTIN WILLIAM C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4876735</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4876735</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>RUDAK PETER</text>
          <document-id>
            <country>US</country>
            <doc-number>4914709</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4914709</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>LYKE DAVID G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5040227</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5040227</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>LYKE DAVID G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5151948</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5151948</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>ADDINK MARVIN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5161214</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5161214</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>ROGAN JAMES D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5170466</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5170466</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="17">
          <text>ELISCHER VICTOR P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5193121</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5193121</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="18">
          <text>HOLT ARTHUR W</text>
          <document-id>
            <country>US</country>
            <doc-number>5208869</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5208869</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="19">
          <text>MELEN ROGER D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5257323</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5257323</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="20">
          <text>KALLIN FREDRIK L N, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5274567</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5274567</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="21">
          <text>ROGAN JAMES D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5301350</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5301350</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="22">
          <text>KAMATA HIDEO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5321238</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5321238</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="23">
          <text>ROGAN JAMES D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5321816</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5321816</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="24">
          <text>HIROSE KENJI</text>
          <document-id>
            <country>US</country>
            <doc-number>5321831</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5321831</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="25">
          <text>CHEVION DAN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5455875</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5455875</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="26">
          <text>COURTNEY WILLIAM F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5519786</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5519786</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="27">
          <text>SHEPARD DAVID H</text>
          <document-id>
            <country>US</country>
            <doc-number>5526447</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5526447</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="28">
          <text>THOMPSON RALPH E</text>
          <document-id>
            <country>US</country>
            <doc-number>5530773</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5530773</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="29">
          <text>GREEN W THOMAS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5602936</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5602936</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="30">
          <text>SONY CORP</text>
          <document-id>
            <country>EP</country>
            <doc-number>0207468</doc-number>
            <kind>A2</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>EP-207468</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="31">
          <text>SHARP KK</text>
          <document-id>
            <country>EP</country>
            <doc-number>0573922</doc-number>
            <kind>A2</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>EP-573922</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="32">
          <text>IBM</text>
          <document-id>
            <country>GB</country>
            <doc-number>1487507</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>GB1487507</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="33">
          <text>TOSHIBA KK</text>
          <document-id>
            <country>GB</country>
            <doc-number>2244583</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>GB2244583</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="34">
          <text>ALPHAREL INC</text>
          <document-id>
            <country>WO</country>
            <doc-number>8605610</doc-number>
            <kind>A1</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>WO8605610</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Microsoft Press Computer Dictionary, Third Edition, Microsoft Press, p. 80, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Dialog File 636, Acc # 01463826 "Bank Get Big Response to Images Statements", Electronic Imaging Report, May 6, 1992, vol. 1, No. 9 (3 pages) The divisional applications are as follows: Divisional Counterparts-Ser. Nos: 08/435,748; 08/435,830; and 08,435,538.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Dialog File 198, Acc # 06397449: "NCR's ATM captures images at the point of deposit", Financial Services Report, Jan. 20, 1993 v. 10 n.2 p. 8 (2 pages) The divisional applications are as follows: Divisional Counterparts-Ser. Nos: 08/435,748; 08/435,830; and 08,435,538.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Dialog File 15, Acc # 00806174: "Banks Turn Imaging Into Speedy New Delivery Products", D.A. Arnette Corp Cashflow, Jan. 1994, v. 15, n. 1, pp. 12-13 (3 pages) The divisional applications are as follows: Divisional Counterparts-Ser. Nos: 08/435,748; 08/435,830; and 08,435,538.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>Dialog File 15, Acc # 00897187: "Why Digitization Means Dollars", B. Wells, Corporate Cashflow, Aug. 1994, v. 15, n. 9, pp. 30-32, (5 pages) The divisional applications are as follows: Divisional Counterparts-Ser. No. 08/345,748; 08/345,830; and 08,345,538.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>The Chase Manhattan Bank, N.A.</orgname>
            <address>
              <address-1>New York, NY, US</address-1>
              <city>New York</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>JPMORGAN CHASE BANK</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Cahill, Thomas</name>
            <address>
              <address-1>Newton, NJ, US</address-1>
              <city>Newton</city>
              <state>NJ</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>McNulty, Louise A.</name>
            <address>
              <address-1>Brooklyn, NY, US</address-1>
              <city>Brooklyn</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>McMonagle, John J.</name>
            <address>
              <address-1>Bayonne, NJ, US</address-1>
              <city>Bayonne</city>
              <state>NJ</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Sferra, Richard H.</name>
            <address>
              <address-1>Plainview, NY, US</address-1>
              <city>Plainview</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Levine, Glenn</name>
            <address>
              <address-1>Ossining, NY, US</address-1>
              <city>Ossining</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="6">
          <addressbook lang="en">
            <name>Goldfisher, Saul</name>
            <address>
              <address-1>Brooklyn, NY, US</address-1>
              <city>Brooklyn</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="7">
          <addressbook lang="en">
            <name>Wilson, Philip</name>
            <address>
              <address-1>Brooklyn, NY, US</address-1>
              <city>Brooklyn</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="8">
          <addressbook lang="en">
            <name>Koroteyev, Vladimir</name>
            <address>
              <address-1>Brooklyn, NY, US</address-1>
              <city>Brooklyn</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Ostrolenk, Faber, Gerb &amp; Soffen, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Couso, Yon J.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method and apparatus for storing and retrieving images of documents, e.g. checks.
      <br/>
      The method comprises placing a plurality of documents in a document imaging machine and forming an electronic image of each document, storing each electronic image in an electronic storage device, providing at least one user interface device in communication on a communication link with the electronic storage device, placing a request for at least one document image on the user interface device, transmitting the request by the communication link to the electronic storage device, searching the electronic storage device for the requested electronic image of the document, retrieving the at least one electronic image or providing an indication that the image was not found, storing the electronic image, if found, in an electronic file, for transmission to the user interface device at user option, providing the electronic image to the user interface device at command of a user at the user interface device for storage at the user interface device and displaying the requested electronic image on a display of the user interface device.
      <br/>
      Preferably, the electronic, images are stored with embedded identifying information in a TIFF(R) (trademark of Aldus Corp.) file format and the check images can be displayed on a display device which permits the user to view both sides of the checks simultaneously and perform functions such as zooming and rotation of the images.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      With the present day increase in the number of checks and other financial instruments processed by banking institutions, there is an increased need to automate the requesting, delivery and display of check and other financial instrument copies.
      <br/>
      This invention accordingly relates to an electronic system for storing and retrieving electronic images of checks and other financial instruments.
      <br/>
      The system of the invention is particularly adapted to the storage and retrieval of check images and the images of other commercial paper instruments, but could also be employed to store and retrieve images of other documents.
    </p>
    <p num="2">
      The financial services industry has provided for more than a century the ability for its customers to write checks and similar instruments.
      <br/>
      In current practice a payor or customer writes a check representing an amount to be deducted from its account.
      <br/>
      The check is given to the payee.
      <br/>
      Checks are normally presented for payment by the payee to the payee's banking institution (the "payee bank").
      <br/>
      In turn, the payee bank presents the check to the payor bank.
      <br/>
      The payor bank then pays the payee bank, and deducts the check amount from the payor's account, against which the check is drawn The check is then marked "PAID" and is often made available in some form (e.g. the original check or a photocopy) to the customer/payor as a record of the payment.
    </p>
    <p num="3">
      For several decades now the U.S. Government has also required that financial institutions maintain a seven year library (e.g. on microfilm, microfiche or original hard copy) of all checks deposited and/or paid from the institution's accounts.
      <br/>
      Because the payor bank is required to maintain this library, it makes and archives a copy of both sides of the "PAID" check prior to forwarding the original instrument, or a copy of it, to the customer.
    </p>
    <p num="4">
      Accordingly, payer banks must maintain millions upon millions of copies of checks in their files.
      <br/>
      For example, if a single large customer/payor writes 2,500 checks each business day, seven years of records will comprise over 4,500,000 checks for that customer alone.
      <br/>
      Thus, banks fill tremendous storage spaces with copies of checks.
    </p>
    <p num="5">
      At some future date, the payor may be required to produce a copy of a check as proof of payment.
      <br/>
      This often requires that the payor retrieve the bank copy of the instrument from the payor bank's archive.
      <br/>
      Certain financial institution customers, particularly those that write large numbers of checks to the general public, often are required to produce check copies systematically.
      <br/>
      The situation is the following: the payor/customer writes a check, sends it to the payee and receives through its standard checking account reporting mechanism (e.g. statement) notification that the check has been paid.
      <br/>
      The payor/customer subsequently receives an inquiry or complaint from the payee stating that payment (i.e. the check) has not been received.
    </p>
    <p num="6">
      As proof of payment, the payor/customer must produce the original "PAID" check, or a front and back photocopy of the "PAID" check.
      <br/>
      From this record, it can determine who cashed it and where it was cashed.
      <br/>
      If the payee is in error, and has been paid, the payor will typically forward to the payee a correspondence enclosing a copy of the "PAID" check.
    </p>
    <p num="7">
      The actual number of requests to a payor bank for check copies based upon a payee claim that payment has not been received varies by the type of check.
      <br/>
      Some known example statistics are:
    </p>
    <p num="8">
      --
      <br/>
      --        Type of Check             Request/Checks Written
      <br/>
      --        health insurance refunds  1/2000
      <br/>
      --        personal income tax refunds 1/200
      <br/>
      --        social security payments  1/100
      <br/>
      --        welfare payments          1/50.
    </p>
    <p num="9">To accommodate these requests, financial institution customers often maintain their own extensive check libraries.</p>
    <p num="10">
      Often such customer-maintained check libraries are kept on microfilm, which can be made by the customer itself from the returned check or can be purchased directly from the financial institution.
      <br/>
      The financial institution's seven year library of check microfilm is often used as a backup source for check copies.
      <br/>
      In some cases, due to the cost of maintaining an archive, and fulfilling payee requests, the bank's seven-year library is the customer's primary source.
    </p>
    <p num="11">Furthermore, depending on the type of customer and account, the institution is often subpoenaed by the government to produce photocopies or originals from its seven year library.</p>
    <p num="12">
      Whether the original checks are kept or they are reduced to microfilm, and regardless of whether it is maintained by the payor bank or the customer, it is readily understood that there are many costs associated with maintaining a check archive and retrieving check copies upon request.
      <br/>
      For example, the production and manipulation of microfilm libraries is a labor intensive process and the quality of the photocopies produced is often low.
      <br/>
      Although storing a high resolution digital image of the front and rear surface of a check could be used as a potential replacement for microfilm, the cost of storing all checks in such format, and the difficulty inherent in locating and retrieving them, made this storage media impracticable in the past.
    </p>
    <p num="13">
      To fulfill its customers' requests or comply with subpoenas, countless man-hours of searching are required to locate copies of the requested instruments.
      <br/>
      Due to the immense volume of stored information, the average turn-around time--the time elapsed from when the request is made until the copy is received--for fulfilling such requests can vary from a minimum of 24 hours to one to two weeks or more.
      <br/>
      Importantly, if a check copy cannot be found or its quality is too poor to reconcile the inquiry, the payor may be required to write the check again and send it to the recipient--incurring the expense of double payment despite the expense of maintaining a check library, and searching for a check.
    </p>
    <p num="14">
      Further, to facilitate processing of checks, the banking industry has, for many years, used a Magnetic Ink Character Recognition (MICR) line on each check.
      <br/>
      The MICR line of a check is a series of alpha-numeric digits encoded on a check in magnetic ink.
      <br/>
      The MICR line is also optically readable.
      <br/>
      A MICR line is found along the bottom of most checks.
      <br/>
      The encoded information in the MICR line usually includes the account number and check number.
      <br/>
      Where the check writer (or some intermediate in the check handling process) chooses, the encoded information in the MICR line also includes the amount of the check.
      <br/>
      Frequently, a large company that prints its own checks may encode the check amount in the MICR line.
      <br/>
      Normally, when a check is processed, the information contained in the MICR line is scanned, interpreted, and becomes part of the bank's electronic record of the check.
    </p>
    <p num="15">
      While previously many banking institutions were forced to maintain large staffs of people to handle manually the time-consuming and tedious task of processing check copy requests, it is desirable to provide a system whereby a customer of the banking institution can request, retrieve, and display copies of checks and, preferably, generate correspondence with a copy of a check, i.e. a check image, all without bank staff involvement.
      <br/>
      Thus, the present application is directed to an automated system which retains images of the front and back of each check and data associated with that check.
      <br/>
      The associated data includes the account number, the check number and the check amount as well as image data.
      <br/>
      The system allows a user to request, retrieve and display check copies with turnaround time much faster than in the prior art.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="16">There are obvious inefficiencies in the current methods of handling customer service inquiries about checks and in the present costly and labor intensive paper and microfilm archives required to support such inquiries.</p>
    <p num="17">
      The invention provides a new financial services product and computer system.
      <br/>
      In particular, it is an object of the present invention to provide a new method and apparatus for providing traditional features of bank services related to check microfilm and commercial paper archives in electronic form.
    </p>
    <p num="18">It is another object of the invention to provide a new method and apparatus for capturing, processing and storing check images for on-line access.</p>
    <p num="19">It is yet another object of the invention to provide a new method and apparatus for communication for the purpose of requesting and receiving check images.</p>
    <p num="20">It is yet a further object of the invention to provide a new method and apparatus for locally storing, displaying and utilizing check images in industry standard computer office automation environments.</p>
    <p num="21">It is yet a further object of the invention to provide an electronic check storage and retrieval system which eliminates the need to maintain costly and inefficient microfilm or paper check archives.</p>
    <p num="22">It is yet a further object of the present invention to provide a document storage and retrieval system which is applicable to documents other than checks and commercial paper instruments.</p>
    <p num="23">It is yet still another object of the invention to provide a system which facilitates error correction in the MICR line of checks, and furthermore which facilitates such error correction in an efficient manner, requiring a small number of keystrokes or minimal operator interaction to accomplish such error correction.</p>
    <p num="24">It is furthermore an object of the invention to provide at the financial service customer's request, a system with the ability on a daily basis to scan a customer's paid checks at a resolution level superior to that available from traditional microfilm and photocopy methods and in excess of all readability requirements for the customer service investigation functions described above as well as other applications such as signature verification, check fraud evaluation, return item processing, etc.</p>
    <p num="25">It is another object of the invention to provide a system having the ability to index and store check images in a relational database supporting appropriate access and inquiry requirements.</p>
    <p num="26">It is furthermore an object of the invention to provide a system having the ability to create a permanent, reliable, legal and auditable store record of check images, superior to that available in the current system of microfilm, photocopy and paper records.</p>
    <p num="27">It is also an object of the invention to provide a system having the ability for the financial services institution customer or user to request access to images in an efficient, reliable and orderly way that allows for the maintenance of both electronic and permanent records of the inquiries for both management and audit control.</p>
    <p num="28">It is furthermore an object of the invention to provide a system allowing a requester user to transmit check copy requests to the financial institution and receive information back (e.g. the electronic check images) by means of a new method consistent with current telecommunications file transfer standards.</p>
    <p num="29">It is furthermore another object of the invention to provide a system having the ability to return electronic check images at the customer's request in the following ways:</p>
    <p num="30">
      a--by direct and immediate on-line transmission,
      <br/>
      b--by electronic batch request and batch return of files of check image requests and check images,
      <br/>
      c--by bulk transmission of image files according to standing orders (e.g. all return items, all items above $1,000, etc.)
      <br/>
      d--by delivery on magnetic or other media such as magnetic tape or disk,
      <br/>
      e--by delivery on electronic optical or other media such as WORM disk, CD-ROM or magneto-optical disk, etc.
      <br/>
      f--by all of the above ways of returning the image supported by an implementation of industry standard image formats with new features specifically designed to support the recipient's effective handling of individual electronic check images or arbitrarily large files of electronic check images.
    </p>
    <p num="31">It is yet still a further object of the invention to provide a system having the ability to display the received electronic images in a windowed graphical user interface consistent with industry standard office automation and computer workstation environments.</p>
    <p num="32">It is yet still another object of the invention to provide a system having one or more user workstations where a user has the ability to manipulate the displayed, received image in a manner required to support the objectives of the underlying check investigation applications (e.g. to enlarge, enhance, rotate, etc. the image).</p>
    <p num="33">It is yet still a further object of the invention to provide a system having a user workstation where the user can review and maintain the local database of check images within the constraints of the possibly limited local disk space available to industry standard office automation and computer workstation environments.</p>
    <p num="34">It is yet still a further object of the invention to provide a system having the ability to create reports and audit records of all check image related events at the requester workstation level.</p>
    <p num="35">It is yet still a further object of the invention to provide a system having the ability to accomplish all the above functions when the requester's workstation is part of an industry standard LAN environment and software and/or data and/or telecommunications support are executed at the LAN server level.</p>
    <p num="36">It is yet another object of the invention to provide a system having the ability to accomplish all the above functions (save the last mentioned) when the recipient wishes to originate and/or receive transmissions from a mainframe computer system.</p>
    <p num="37">
      As is evident from the above description of current check processing system, a highly sophisticated problem is presented when copies of hundreds or thousands of checks requested by a customer or customers need to be processed by a banking institution and the need arises to verify the check information.
      <br/>
      The system described herein provides a solution to this problem.
      <br/>
      For example, the inventive system can accomodate all the check image requests generated at today's largest check processing institutions on their peak days.
    </p>
    <p num="38">
      The invention provides a solution to this customer service problem which heretofore involved intensive manual processing.
      <br/>
      The invention provides an electronic document image storage and retrieval system including a customer service workstation that can request, retrieve, display, manipulate and print copies of documents, particularly checks, and furthermore create correspondence for a client incorporating copies of document images.
    </p>
    <p num="39">
      The system of the invention includes an electronic host archive storage and retrieval system for storing and retrieving copies of checks or check images.
      <br/>
      This host archive system is linked via a communications link, e.g., modems and telephone line, to one or more generally remotely located customer workstations.
    </p>
    <p num="40">
      For the purpose of this application, a customer is the customer of the banking institution and which utilizes a workstation according to the invention to request and retrieve copies of checks from the banking institution.
      <br/>
      For the purpose of this application, an operator, user or requester is the individual who operates a workstation according to the invention.
    </p>
    <p num="41">
      For the purpose of this application, a workstation or image station may be a standard desktop computer that utilizes a graphical user interface.
      <br/>
      Also, a workstation preferably has local magnetic disk storage or other storage, contained in the unit or is linked to a magnetic disk drive or other storage unit via a network communications device commonly referred to as a file server.
    </p>
    <p num="42">In the invention, use is made of multi-tasking and multi-windowing environments such as Microsoft Windows (tm)  or IBM OS/2 (tm)  to provide a graphical interface for the system of the invention that the operator uses to interact with the retrieved check image copies.</p>
    <p num="43">
      According to the invention, the operator or customer can make requests by account number and check number for a specific check at the local workstation.
      <br/>
      The requests are stored locally until the operator is ready to forward the requests to the banking institution.
    </p>
    <p num="44">
      Once an operator is ready to forward the requests to the banking institution, the workstation will dial the host computer controlling the archive system at the banking institution.
      <br/>
      Once connected to the host computer, the host will prompt the operator or customer for a user-ID and password to initiate the file transfer.
      <br/>
      Once the ID and password are verified, the requests are translated into a file and transferred to the host archival system.
    </p>
    <p num="45">
      After a predetermined processing time to retrieve and sort the check images, the workstation operator can initiate a download or file transfer from the host archival system.
      <br/>
      The host system will transfer a front image and a separate back image for each check.
    </p>
    <p num="46">
      Each check image has the MICR line information embedded in the check image file for identification.
      <br/>
      The identification information contains the account number, the check number, amount and date of the check.
    </p>
    <p num="47">
      Once downloaded to local storage of the workstation, the system software resident at the workstation will read the data stored within each check image file to obtain the account number, check number and amount of the check.
      <br/>
      When check images are received at the local workstation, the system software will correlate the check request entry with the check images.
      <br/>
      The filename of the check in the local database as well as a status field will be updated so as to indicate that the item has been downloaded, processed and received from the host archive system.
    </p>
    <p num="48">Once all of the downloaded check images have been processed, they are available for review by the operator.</p>
    <p num="49">
      According to the invention, an operator can select a menu item to present a Select/Display screen at the workstation that lists alpha-numerically the downloaded checks and those requests for check download which are pending.
      <br/>
      On this Select/Display screen, an operator has the option to sort the check images by account number/check number, amount, a user reference number, status and date.
      <br/>
      Status indicates whether the item is Pending, Received or Exported.
      <br/>
      A pending item is a request that has been sent or uploaded to the host archive but not yet downloaded.
      <br/>
      A Received item is an item that has been downloaded to the workstation, processed and is ready for viewing.
      <br/>
      An Exported item is a check image that has been downloaded to the workstation but not requested.
      <br/>
      According to the invention, a customer has an option of indicating if it wants all check images sent to the workstation (exported) without the need to request each image specifically.
    </p>
    <p num="50">
      Preferably, according to the invention, an operator may click with a mouse or other pointer device to select an item indicated on a screen display of the workstation or select an item for viewing by using cursor arrow keys of a computer keyboard and striking the enter or return key.
      <br/>
      Once selected, the system will read the file names for the front and the back of the check images.
      <br/>
      The system of the invention preferably will read and display the front and back check images into a separate window for each check image.
      <br/>
      The separate windows for each front and back check image are referred to herein as a check-centric display interface.
      <br/>
      This check-centric display optimizes (i.e. minimizes) the amount of time a user would have to search for information on the check images.
    </p>
    <p num="51">
      According to the invention, the front of the check may be displayed in maximum width horizontally in the left window.
      <br/>
      The back of the check then may be displayed in the right window vertically and enlarged to display the endorsement section.
      <br/>
      The endorsement section of a check is the section where a payee would indicate its account number and signature or endorsement stamp.
      <br/>
      This feature saves the operator from rotating the check image vertically in order to read the endorsement.
      <br/>
      At this point, an operator has the option of manipulating the check image to enhance the readability of the information.
    </p>
    <p num="52">
      The system of the invention provides a toolbar or button zone, preferably as a screen icon, for each check display window.
      <br/>
      The operator may, for example, enlarge, reduce, rotate relative left, rotate relative right, invert the image absolute 180 degrees, and invert the colors of the image from black on white background to white on black background.
      <br/>
      The inverting of colors from black to white helps an operator read check endorsement stamps that federal and banking institutions use to indicate processing.
      <br/>
      Thus, an operator or customer may obtain information regarding where the check was presented for payment.
    </p>
    <p num="53">
      According to the invention, a facility to highlight a specific area of a check image has been provided for fast enlargement.
      <br/>
      This facility allows an operator to zero in on specific information and enlarge it so it is more readable to the human eye.
    </p>
    <p num="54">
      In addition to the toolbar or button zone, an operator may select the manipulation options from a menu zone that lists all the options in text rather than graphical representation.
      <br/>
      Furthermore, to expedite the selection process, the system will allow a user to select the manipulation options by clicking a mouse or other pointer device's button on any area of a check display window to display a pop-up list of the manipulation options in text.
    </p>
    <p num="55">
      In addition to the Select/Display screen to select a specific check, the system preferably has two navigation buttons located at the bottom of the screen.
      <br/>
      One button is a graphical representation of an arrow facing down to move forward through the local database of check images.
      <br/>
      Another button is a graphical representation of an arrow facing up to move backward in the local database of check images.
      <br/>
      Once the operator operates these navigation buttons, the system will automatically display next/previous check images in a default order (account number and check number) or any other order specified by the user.
      <br/>
      These navigation buttons allow an operator the ability to quickly review the downloaded check images.
      <br/>
      This is a significant improvement over manually handling physical paper checks.
    </p>
    <p num="56">
      A facility to store a customer account number is also provided by the invention.
      <br/>
      An operator can add or delete any corresponding account numbers that are supplied to and processed by the host archive system.
      <br/>
      This account number facility allows a customer to manage its accounts without the intervention of the banking institution.
      <br/>
      Further, the Select/Display screen will read this account number file to facilitate the fast selection of the specific account number from a graphical list box.
    </p>
    <p num="57">
      Further according to the invention, a database maintenance facility is provided to manage downloaded check images.
      <br/>
      The invention provides a configuration parameter to indicate when a check image should be listed in the database maintenance screen.
      <br/>
      This configuration parameter is used to indicate the threshold number of calendar days before a check image should be included in a database maintenance screen report.
      <br/>
      Each downloaded check image is stored locally at the workstation.
    </p>
    <p num="58">
      It is conceivable that at some point in time the check images available for downloading will exceed the amount of physical storage space available at the workstation.
      <br/>
      An operator can select the database maintenance option to purge or physically delete check images and the corresponding database record.
      <br/>
      An operator preferably has two options according to the invention: one is to select a check individually for deletion and the other is to delete all the check images and entries that appear in the database maintenance screen.
    </p>
    <p num="59">
      A facility to copy the front or back check image to a temporary storage area, e.g., a Microsoft Windows (tm)  clipboard, is provided.
      <br/>
      The ability to share the image with other desktop applications improves the operator's ability to create correspondence or additional documentation in today's office computing architecture.
    </p>
    <p num="60">
      According to the invention, a facility to incorporate the check images into customer correspondence is preferably provided.
      <br/>
      An operator may select a document template that is created with an industry available word processing package.
      <br/>
      The document and check images are merged along with address information of the recipient (payee) to create a document that can be sent to the payee to confirm that the check was received by the payee and paid.
      <br/>
      An operator may print out the document to send to a payee via conventional mail delivery service such as the Postal Service.
      <br/>
      However, if the system software is installed on a workstation that supports outgoing fax services via modem communications, an operator may fax the correspondence directly to a payee's fax machine.
      <br/>
      This automated correspondence processing represents a significant improvement in the time it takes to prepare correspondence and send it to a payee.
    </p>
    <p num="61">The objects of the invention described above are achieved by a method for storing and retrieving images of documents comprising placing a plurality of documents in a document imaging machine and forming an electronic image of each document, storing each electronic image in an electronic storage device, providing at least one user interface device in communication on a communication link with the electronic storage device, placing a request for at least one document image on the user interface device, transmitting the request by the communication link to the electronic storage device, searching the electronic storage device for the requested electronic image of the document, retrieving the at least one electronic image or providing an indication that the image was not found, storing the electronic image, if found, in an electronic file, for transmission to the user interface device at user option, providing the electronic image to the user interface device at command of a user at the user interface device for storage at the user interface device and displaying the requested electronic image on a display of the user interface device.</p>
    <p num="62">The objects of the invention are furthermore achieved by apparatus for storing and retrieving images of documents comprising a document imaging machine for receiving a plurality of documents and forming an electronic image of each document, an electronic storage device for storing each electronic image, a user interface device in communication on a communication link with the electronic storage device, the user interface device having an input device for placing a request for at least one document image and for transmitting the request on the communication link to the electronic storage device, a computer for searching the electronic storage device for the requested electronic image of the document and for retrieving the at least one electronic image or providing an indication that the image was not found, an electronic file for storing the electronic image, if found, for transmission to the user interface device at user option, the computer adapted to provide the electronic image to the user interface device at command of a user at the user interface device for storage at the user interface device, and a display for displaying the requested electronic image at the user interface device.</p>
    <p num="63">According to the preferred embodiment of the method of the invention, the step of forming an electronic image comprises forming an electronic image of two sides of a two sided document.</p>
    <p num="64">Also according to the preferred embodiment, the step of storing each electronic image in an electronic storage device comprises storing the electronic image in a mass storage device.</p>
    <p num="65">Further according to the preferred embodiment, the step of storing in a mass storage device comprises storing each electronic image in an electronic optical storage device.</p>
    <p num="66">According to the preferred embodiment, the document comprises a check and the step of placing a request for a document image comprises entering an account number and a check number for the requested check.</p>
    <p num="67">Also according to the preferred embodiment, the step of placing a request for a document comprising a check further comprises entering an amount of the check.</p>
    <p num="68">According to the preferred embodiment, the step of placing a request for a document comprising a check further comprises entering a user defined reference field.</p>
    <p num="69">Furthermore, according to the preferred embodiment, the step of transmitting the request over the communication link comprises transmitting the request over a telephone communication link.</p>
    <p num="70">Also according to the preferred embodiment, the documents comprise checks each having a magnetic ink code line thereon, and the invention further comprises electronically reading and decoding the magnetic ink code line to form decoded magnetic ink coded data and the step of storing comprises merging the electronic image and the decoded magnetic ink coded data into a tagged image file format (TIFF.RTM. �a registered mark of Aldus Corp.�) file, with the decoded magnetic ink coded data stored in a tag field in the TIFF file, each check being associated with a TIFF file, and storing the TIFF file in the electronic storage device.</p>
    <p num="71">According to the preferred embodiment, the invention further comprises storing the TIFF file in a queue prior to transmitting the TIFF file to the electronic storage device.</p>
    <p num="72">Also according to the preferred embodiment, the invention further comprises forming a plurality of the TIFF files for respective checks and storing the plurality of TIFF files in the queue, grouping a plurality of the TIFF files into a binary large object (BLOB) and transmitting the BLOB to the electronic storage device.</p>
    <p num="73">According to the preferred embodiment, the invention further comprises forming a plurality of BLOBs and transmitting each BLOB to the electronic storage device.</p>
    <p num="74">In accordance with the preferred embodiment, the invention further comprises generating an index record for each of the pluralilty of TIFF files in the BLOB, and storing each index record in an index database.</p>
    <p num="75">According to the preferred embodiment of the invention, the step of generating an index record comprises generating the decoded magnetic ink coded data for each check and a BLOB pointer to the BLOB containing the image of a particular check.</p>
    <p num="76">In the preferred embodiment of the invention, the step of storing each electronic image in an electronic storage device comprises bundling a plurality of the images together in a grouping and storing the grouping as a unit in the electronic storage device, to increase the speed at which images can be stored in and retrieved from the electronic storage device.</p>
    <p num="77">According to the preferred embodiment of the invention, the step of searching the electronic storage device for the requested electronic image comprises searching the index database by using the account number and check number of the requested check, thereby determining the BLOB containing the image of the check, and using the determined BLOB pointer to find the check image in the electronic storage device.</p>
    <p num="78">According to the preferred embodiment, the invention further comprises the step of checking for errors in the decoded magnetic ink coded data.</p>
    <p num="79">In the preferred embodiment, the invention further comprises the step of correcting the decoded magnetic ink coded data comprising determining if the decoded data requires correction, assigning a specified character to characters requiring correction in the decoded data, displaying the uncorrected decoded data on a display device with the specified character replacing characters requiring correction, entering data to replace the specified characters, and replacing the specified characters with the entered data.</p>
    <p num="80">According to the preferred embodiment, the invention further comprises checking if the number of characters in the data entered is equal to the number of specified characters and if so replacing only the specified characters with the entered data; if the number of characters in the data entered is less than the number of specified characters, replacing all the decoded data with the entered data; and if the number of characters in the entered data is greater than the decoded data, generating a warning message to confirm that the entered data is longer than the decoded data prior to replacing the decoded data with the entered data.</p>
    <p num="81">According to the preferred embodiment of the invention, the step of displaying the requested document image comprises displaying a screen identifying at least one document, and further comprising selecting at least one document for display on the display.</p>
    <p num="82">In the preferred embodiment of the invention, the document is a check having two sides, and wherein the step of displaying the requested electronic image comprises displaying an image of each side of the check.</p>
    <p num="83">Still further in accordance with the preferred embodiment of the invention, the check has a front and a back side and the step of displaying comprises displaying the front side of the check in a first screen window in an initial horizontal format for normal reading by a user and displaying the back side of the check having an endorsement thereon in a second screen window so that the endorsement is disposed in an initial format horizontally for normal reading by a user.</p>
    <p num="84">According to the preferred embodiment of the invention, the first and second screen windows are displayed simultaneously.</p>
    <p num="85">According to the preferred embodiment, the invention further comprises providing user operated controls to allow selected ones of enlarging and reducing the size of the displayed images of the front and back sides of a check, rotating the images to improve readability and scrolling through the images.</p>
    <p num="86">According to the preferred embodiment, the invention further comprises the step of providing a word processing function for the creation of a secondary document and loading the requested document image into the secondary document.</p>
    <p num="87">According to the preferred embodiment, the invention further comprises providing the user defined reference field back to the user at the user interface device to enable sorting of check images according to the user reference field.</p>
    <p num="88">According to the preferred embodiment, the invention further comprises sorting the check images provided to the user interface device from the electronic storage device by at least one of account number, check number or amount.</p>
    <p num="89">In accordance with the preferred embodiment, the invention further comprises storing request data for each requested check at a local database at the user interface device, and the step of displaying the requested electronic image comprises selecting an image for display, comparing the request data for the requested check to the electronic file supplied from the electronic storage device and displaying the electronic image whose request record coincides with the data representing the requested check.</p>
    <p num="90">
      Thus the invention provides solutions to the problems of customer service regarding processing of requests for copies of checks and delivering copies of checks to customers by providing an all electronic check image requesting, retrieval and delivery system.
      <br/>
      Other features and advantages of the present invention will become apparent from the following detailed description of the invention.
    </p>
    <p num="91">
      BRIEF DESCRIPTION OF THE DRAWING(S)
      <br/>
      The invention will now be described in greater detail in the following detailed description with reference to the drawings in which:
      <br/>
      FIG. 1 is a block diagram which gives an overview of the electronic check image storage and retrieval system including a check image archive (host) system and a plurality of customer service workstations or check image stations;
      <br/>
      FIG. 2 is a block diagram showing further details of part of the host system and a customer service workstation, and the connection therebetween;
      <br/>
      FIG. 3 is a more detailed block diagram of part of the host system and the manner in which check images are made and queued in the host archive system;
      <br/>
      FIG. 4 is a further detailed block diagram of a portion of the host system which facilitates repair of checks in which errors are present;
      <br/>
      FIG. 5 is a more detailed diagram of one embodiment of part of the host system showing how check images are stored in/retrieved from the mass storage device of the host archive system;
      <br/>
      FIG. 5A shows the normal and repass processing employed by the check reader/sorter device utilized in the invention to generate check images and data;
      <br/>
      FIG. 5B shows further process steps used in the invention to store check images;
      <br/>
      FIG. 5C shows the Requester Process implemented at the host system when it processes a check request from a workstation;
      <br/>
      FIG. 5D shows the Retrieval Process implemented at the host system when it processes a check request from a workstation;
      <br/>
      FIG. 5E shows how a check image is recovered by the host system;
      <br/>
      FIG. 5F shows the Reject/Repair Flow Process;
      <br/>
      FIG. 5G shows the Data Entry procedure implemented during the repair process;
      <br/>
      FIG. 5H shows a representation of the data entry screen utilized in the check repair process;
      <br/>
      FIG. 5I shows another embodiment of part of the host system, particularly, the image storage station.
      <br/>
      FIG. 6 shows the top level menu options presented at the workstation screen;
      <br/>
      FIG. 7 shows functions under the "File" option in the top-level menu of FIG. 6;
      <br/>
      FIG. 8 shows the front and back check image window screen;
      <br/>
      FIG. 9 shows the tool-bar displays shown in FIG. 8;
      <br/>
      FIG. 10 shows the Enter Check Request screen displayed by selecting the Enter Check Request option of the menu of FIG. 7;
      <br/>
      FIG. 11 shows the Select/Display Check Images screen containing a plurality of check items;
      <br/>
      FIG. 12 shows the format of a screen report that formats and displays checks requested by the user;
      <br/>
      FIG. 13 shows the screen employed to allow log-on to the host system by a user;
      <br/>
      FIG. 14 shows a screen which is employed in generating correspondence with a client incorporating the check images;
      <br/>
      FIG. 15 is another prompt screen to ensure that the user has sufficient download capacity;
      <br/>
      FIG. 16 is an example of the Enter Check Request screen after entry of four checks;
      <br/>
      FIG. 17 shows the front and back check image screens showing the front and back image of a representative check;
      <br/>
      FIG. 18 shows the check image screen with a pop-up window showing the options under the View option of the top level menu;
      <br/>
      FIG. 19 shows the use of the highlight and enlarge facility of the system showing how check images can be highlighted and thereby enlarged by the user on the screen, as well as showing the rotate facility in the "BACK OF CHECK" window;
      <br/>
      FIG. 20 shows the options available under the Options Menu of the top level menu;
      <br/>
      FIG. 21 shows the Setup Options screen;
      <br/>
      FIG. 22 shows the Account Maintenance screen;
      <br/>
      FIG. 23 shows the Image File Maintenance screen;
      <br/>
      FIG. 24 shows the Customer Information screen employed in entering document header data to be inserted into documents incorporating check images that are sent to a client;
      <br/>
      FIG. 25 is a letter using a selected template;
      <br/>
      FIG. 26 shows a document selection dialog screen for allowing the selection of a particular letter template;
      <br/>
      FIG. 27 shows the overall flow process of creating requests for checks at a workstation, retrieving check images, downloading the images to the workstation for display, and creation of correspondence incorporating the check images to be sent to a customer;
      <br/>
      FIG. 28 depicts the communication protocol used between the host system and a customer workstation for transmitting requests to the host; and
      <br/>
      FIG. 29 depicts the communication protocol used between the host system and a customer workstation for downloading check images.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="92">
      1.
      <br/>
      Introduction
    </p>
    <p num="93">
      Referring now to the drawings wherein like numerals indicate like elements, FIG. 1 is a block diagram of the overall electronic check image storage and retrieval system according to the present invention.
      <br/>
      The system comprises a check image archive system 8, also known and referred to herein as the host system 8, and at least one customer workstation 7, also known and referred to herein as an image station 7.
      <br/>
      Preferably, there are a plurality of workstations 7.
      <br/>
      The workstations 7 may be remotely located from the host system 8 and also from each other.
    </p>
    <p num="94">
      The host system 8 includes at least one sort station 2, which preferably is a check imaging and sorting machine and a controller, as known in the art.
      <br/>
      Sort station 2 receives checks 1, generates digital images of the checks, decodes the MICR line of each check and sorts them to one of a plurality of pockets, to be described in more detail below.
      <br/>
      The sort station 2 is coupled to a host system communication link or network 3 such as a LAN, WAN or bus, as known in the art.
      <br/>
      Also coupled to the network 3 are at least one repair station 4, an image storage station 5 and an output station 6.
      <br/>
      The repair station 4 is provided to permit checks which have not been normally processed to be repaired, i.e., to have any errors in the decoded MICR corrected, as explained more fully below.
      <br/>
      The image storage station 5 includes a digital mass storage device, to be described in greater detail below, which stores digital images of the checks generated by the sort station 2 as well as identifying information to enable the images to be retrieved.
      <br/>
      The output station 6 controls communication and transmissions between the host system 8 and the customer workstations 7 and provides data comprising the digital images of the checks and check identifying data to the customer work stations 7 on request.
      <br/>
      Additionally, the output station 6 provides other output, including, for example, tape, CD-ROM and/or WORM output of electronic check images for the bulk export of check images.
      <br/>
      These components of the host system 8 will be described in more detail below.
      <br/>
      As will be evident, more than one sort station 2 can be provided to improve throughput.
      <br/>
      Similarly, a plurality of repair stations 4, image storage stations 5 and output stations 6 can also be provided.
    </p>
    <p num="95">FIG. 2 shows the customer workstation 7, its communication link 11 with the output station 6 of the host system 8 and the output station 6 itself in greater detail.</p>
    <p num="96">
      Output station 6 includes a communication station 600 and an export station 610.
      <br/>
      The communication station 600 provides communication control between the host system 8 and each of the customer work stations 7.
      <br/>
      The communication station 600 includes an output controller 602, an output queue storage device 601, and an output gateway 603 having at least one modem 604, ISDN (Integrated System Digital Network) controller 605, or other communication device for communication with a workstation 7, as explained more fully below.
    </p>
    <p num="97">
      The export station 610 of the output station 6 includes a bulk export controller 611, which is preferably coupled to at least one device capable of exporting, or providing as an output, a large amount of data comprising digital images of checks processed by the host system 8.
      <br/>
      In accordance with this capability, bulk export controller may be coupled to a digital storage device such as a tape drive 612, CD-ROM recorder 613, WORM drive 614, and/or any other suitable device.
    </p>
    <p num="98">
      Each customer workstation 7 includes a workstation computer 701 and a display device 701A for displaying check images and other screen information.
      <br/>
      The computer 701 is coupled to a local storage device 702.
      <br/>
      The workstation computer 701 is also preferably coupled to a printer 703 for printing images of checks as well as other documents incorporating check images, for example.
    </p>
    <p num="99">In the preferred embodiment, the customer workstation 7 is coupled to a modem 10 which transmits/receives information over a telephone line 11 connected to a modem 604 of the output station 6.</p>
    <p num="100">
      The output controller 602 is coupled to output queue device 601 and the network 3.
      <br/>
      According to the preferred embodiment, the output controller 602 may be a SUN SparcStation 2.
      <br/>
      The output queue device 601 may be a RAID disk array.
      <br/>
      The device 601 is provided for the storage of customer, user and account information and temporary storage of check image requests and check images requested by one or more of the workstations 7 and which are to be downloaded to one or more of the workstations 7.
      <br/>
      As described, the communication gateway 603 preferably includes a plurality of modems 604, one or more ISDN controllers 605 and/or other communication equipment to form a suitable communication link 11 to provide requested check images to one or more customer workstations 7 located at the customer sites or elsewhere.
    </p>
    <p num="101">
      The bulk export controller 611 of the export station 610 may provide output to devices to deliver check images and other data to customers in mediums other than by on-line communication.
      <br/>
      For example, the bulk export controller may write check images and data to the tape drive 612, the CD-ROM recorder 613 or the WORM drive 614 or on any other suitable media or for transmission by any other means.
      <br/>
      The export station 610 is useful for the large scale delivery or transmission of check images to customers who must process requests for large numbers of checks or who require, for example, that all checks paid by them be provided to them.
    </p>
    <p num="102">
      FIG. 3 shows the sort station 2 in greater detail.
      <br/>
      The sort station 2 comprises a sorter 200, having an input hopper 203, imaging device 204, optical character reader (OCR) 206, MICR reader 205, and a plurality of sort pockets 208, 209 and 210.
      <br/>
      Checks are conveyed mechanically along a track 220 which connects the various stations, eventually being sorted to and deposited in one of the pockets 208, 209 and 210.
      <br/>
      In the embodiment illustrated, 6 normal processing sort pockets have been shown, although there can be a larger or smaller number of such pockets.
      <br/>
      The track 220 is not shown in detail in FIG. 3, because its construction, employing a mechanical track and mechanical elements including motors, belts, rollers, etc., is well known.
    </p>
    <p num="103">
      The sort station 2 also includes a control computer 201 and a storage device 202.
      <br/>
      The control computer 201 is coupled to the host system network 3.
    </p>
    <p num="104">
      With reference to FIG. 3, checks 1 are fed into input hopper 203 of the sorter 200.
      <br/>
      The checks 1 are then conveyed along the track 220 sequentially to digital imager 204 and MICR line reader 205.
      <br/>
      The check images made by the imager are passed to the Optical Character Recognition device (OCR) 206. After the MICR line is decoded by station 205, the checks 1 are passed to one of the eight output pockets, i.e. the repair pocket 208, the repass pocket 209 or one of the six normal sort pockets 210.
      <br/>
      Checks 1 that are routed to the repass pocket 209 are again placed in the input hopper during the repass run of the sorter 200.
      <br/>
      During the repass run, checks 1 are manually placed in the input hopper 203 as shown by dashed lines 207, processed to the repair pocket 208 (described in greater detail below), one of the six normal pockets 210 or killed (removed from processing).
      <br/>
      According to the preferred embodiment, the sorter 200 may be an NCR 7780 check reader/sorter, which processes approximately 370 checks/minute.
    </p>
    <p num="105">
      The control computer 201 controls the operation of the sorter 200.
      <br/>
      The control computer 201 may be an NCR 486 type computer or any other suitable device.
      <br/>
      Storage device 202 is operatively coupled to the control computer 201, as is the network 3.
      <br/>
      In the preferred embodiment, the storage space 202 may be a RAID disk array.
      <br/>
      In the preferred embodiment, the array 202 may comprise three disks of about one gigabyte each.
      <br/>
      The amount of storage space is not crucial.
      <br/>
      Enough must be provided to serve its purpose, which is to provide temporary storage of check images and associated data before the images are provided on the network 3.
      <br/>
      Additionally, the storage device 202 is useful to queue check images when processing in an off-line mode, storing checks without transmitting the check images across the network 3.
      <br/>
      This is useful especially if the network 3 goes down, and it is still desired to continue the operator intensive check sorting and processing function implemented by the sorter 200 and store the resultant images.
    </p>
    <p num="106">
      Generally, to process a check 1, it is fed into the input hopper 203 of the sorter 200.
      <br/>
      The check 1 is transported along the mechanical track 220 and reaches the imager 204 which generates digital images of the front and back of the check 1.
      <br/>
      The digital image of at least the MICR line of the check 1 is passed to the OCR device 206 which, through optical character recognition, decodes the MICR characters optically from the image.
      <br/>
      When the check 1 reaches the MICR reader 205, the MICR is then magnetically decoded, as known in the art.
    </p>
    <p num="107">
      In accordance with the preferred embodiment of the invention, the digital images of the front and back of the check 1 are merged, by the control computer 201, into a single TIFF (Tagged Image File Format) file 22.
      <br/>
      Additionally, the control computer 201 preferably merges the decoded raw MICR, a parsed MICR, the customer ID, the work date, the processing date and time, a machine ID and a repair ID into the TIFF file 22 as tag fields.
      <br/>
      The control computer then stores the TIFF file 22 in queue 24, repair queue 25 of the storage device 202, or on storage space 505 (FIG. 5) of the image storage device.
      <br/>
      In a preferred embodiment, queues 24 and 25 are FIFO (first-in-first-out) queues.
    </p>
    <p num="108">
      FIG. 4 shows the repair station 4 in greater detail The host system network 3 is coupled to a repair controller 401.
      <br/>
      The repair controller 401 is coupled to a display 402 and a keyboard 403.
      <br/>
      The repair station 4 is provided for an operator to repair data associated with check images prior to storing the image for customer retrieval in the host system 8.
    </p>
    <p num="109">
      FIG. 5 shows one embodiment of the image storage station 5, containing the check image mass storage device, in greater detail.
      <br/>
      The host system network 3 is coupled to a storage space 505 via an image storage controller 501.
      <br/>
      The image storage controller 501 is also coupled to an image storage device 502.
      <br/>
      The image storage device 502 preferably is a mass storage device, e.g., a Kodak 6800 optical jukebox.
      <br/>
      The storage space 505 is provided for temporary storage to maintain administrative data (or meta-data) for the image storage device 502.
      <br/>
      The network 3 is also coupled to an index database controller 510.
      <br/>
      The index database controller 510 is coupled to an index database device 511.
      <br/>
      In the preferred embodiment, the image storage controller 501 and the index database controller 510 may be Sparcstation 20 computers manufactured by SUN and the index database device 511 may be a RAID disk array.
    </p>
    <p num="110">
      FIG. 5I shows an alternative embodiment of the image storage station.
      <br/>
      As in FIG. 5, the host system network 3 is coupled to an image storage controller 501.
      <br/>
      The image storage controller 501 is coupled to a storage space 505 and an image storage device 502.
      <br/>
      The storage space 505 and image storage device 502 are provided for the same purpose as before.
      <br/>
      In this alternative embodiment, however, no index database device 511 or controller 510 is necessary.
    </p>
    <p num="111">
      With reference to FIGS. 3 and 5, when at least a predetermined number of TIFF files 22 on storage space 505 await processing by the image storage controller 501, they are grouped by account number and written to the image storage device 502 as a Binary Large OBject (BLOB) 26. Once the BLOB 26 is successfully written, information for each TIFF file 22 is sent to the index database controller 510 and written to the index database 30 as an index record 28.
      <br/>
      After the index records 28 are written, the TIFF files 22 are deleted from storage space 505.
    </p>
    <p num="112">
      Each BLOB contains a header 38 and a variable number of TIFF files 22.
      <br/>
      The header 38 contains data which can be used to locate and extract a TIFF file 22 from the BLOB 26.
    </p>
    <p num="113">
      The indexing of the TIFF files 22 referred to above is carried out by creating an index record 28 (FIG. 5) for each TIFF file 22.
      <br/>
      The index record is written to the index database 30 which is stored in the index database device 511.
      <br/>
      As shown, each index record 28 includes the account number 34, check number 35 and amount 37 for a particular check 1, the work date 39, and a BLOB pointer 36 to the particular BLOB containing that particular check comprising a location code 40 and a BLOB file name 41.
      <br/>
      Heavy reference lines 31 are provided in FIG. 5 to illustrate this relationship.
    </p>
    <p num="114">2. Host System Architecture</p>
    <p num="115">
      Details of each of the components of the host system 8 will now be described.
      <br/>
      With reference again to FIG. 1, in the preferred embodiment of the invention, the host system 8 consists of several pieces of hardware connected to each other via the network 3, which may be, for example, a 10 Base-T Ethernet network, preferably running TCP/IP and NFS.
      <br/>
      As described previously, the network 3 is connected to the sort station 2, the repair station 4, the image storage station 5 and the output station 6.
      <br/>
      More specifically, the network 3 is connected to the control computer 201 (FIG. 3), the repair controller 401 (FIG. 4), the index database controller 510 (FIG. 5), the image storage controller 501 (FIGS. 5 and 5I), the output controller 602 (FIG. 2) and the bulk export controller 611 (FIG. 2).
    </p>
    <p num="116">a. Sort Station 5</p>
    <p num="117">
      i.
      <br/>
      Sorter 200
    </p>
    <p num="118">
      With reference now to FIG. 3, the check sorter 200 may be a medium speed check processing machine, e.g. an NCR type 7780, enabled with both front and back of check imaging capability.
      <br/>
      In a preferred embodiment, as shown in FIG. 3, the sorter 200 is also provided with a MICR line reader which decodes the check MICR line.
      <br/>
      Also in the preferred embodiment, the MICR line decoding function is also accomplished by decoding the MICR line from a portion of the image made by the imaging capability of sorter 200.
    </p>
    <p num="119">
      The control computer 201 is coupled to the sorter 200 and interfaces with the network 3.
      <br/>
      The control computer 201 controls the functionality of the sorter 200 and converts the front and back check image and the MICR line, as decoded by the sorter 200, into a single TIFF file 22.
      <br/>
      Once complete, the TIFF riles 22 are written to storage space 505 (FIGS. 5 and 5I) for later storage by the image storage controller 501.
      <br/>
      Due to its direct connection to the control computer 201, however, storage space 202 is intended to function as the site for TIFF file 22 storage in the event that the network 3 is temporarily not functioning.
      <br/>
      With this configuration, the operator intensive work, e.g. processing of checks 1 through the check sorter 200, can proceed without interference in the event of a network 3 problem, and the TIFF files 22 can later be written to storage space 505.
    </p>
    <p num="120">
      The sorter 200 decodes the MICR line of each check.
      <br/>
      For each check with a successfully decoded MICR line, front and back digital images of the check and other data generated by the sorter 200 are converted into a single TIFF file 22 for each, and stored in the storage space 505.
      <br/>
      Where the MICR line is not successfully decoded, however, and less than a predetermined number of errors are present, the digital images and data requiring repair are sent to a repair queue 25 of the storage space 202.
      <br/>
      Repair station 4, which will facilitate repair of questionable or incompletely decoded MICR data from the sorter 200, obtains its input from the repair queue 25.
      <br/>
      This is accomplished via a suitable network connection, preferably an NFS mount, between the control computer 201 and the repair station 4.
      <br/>
      Where more than predetermined numbers are present, the images and data are discarded.
    </p>
    <p num="121">
      A file system, e.g., a UNIX based file system, is used to store the TIFF files 22 in the storage space 505 while they await processing by the image storage station 5 (FIG. 5).
      <br/>
      It was found that overburdening a single directory by storing all of these files in a single location of storage space 505 can cause a degradation in file insertion and extraction times.
    </p>
    <p num="122">
      Overburdening a directory depends upon the particular hardware and file system used.
      <br/>
      Generally, when a directory has many entries and becomes very long, searching the directory may require many disk reads and compares, and, accordingly, the time required to store or retrieve a file rises dramatically.
      <br/>
      This is referred to as the directory being overburdened.
      <br/>
      This characteristic, for any particular file system, can be measured by empirical experimentation in a particular configuration.
      <br/>
      In the preferred embodiment, using the UNIX file system and hardware described, a directory with more than several thousand files is overburdened.
    </p>
    <p num="123">
      According to the invention, to alleviate overburdening, a multiple directory structure and round-robin directory allocation is used to prevent over-population of a single directory.
      <br/>
      Preferably, ten directories are used to receive the incoming files.
      <br/>
      This number was determined experimentally, based upon the components employed and the throughput desired.
      <br/>
      Accordingly, in the preferred embodiment, files are written to a specific directory until the number of files within that directory reaches the currently configured maximum amount allowed for the directory.
      <br/>
      Files are then sent to the next directory and when that directory is full, to the next one, etc.
    </p>
    <p num="124">
      Accordingly, each TIFF file 22 written to storage space 505 is written to the appropriate directory to await processing by the image storage station 5.
      <br/>
      The image storage controller 501 reads files from the earliest written directory first.
      <br/>
      As a directory of storage space 505 empties out, the image storage controller 501 begins reading files from the next directory.
      <br/>
      In other words, if files were stored in the first directory first, and then in the second directory, the image storage controller 501 will process the files in the first directory first, and subsequently, it will process the files in the second directory, etc.
    </p>
    <p num="125">
      As should be evident to one of skill in the art, the number of directories used, and the maximum number of files per directory, can be configured according to need.
      <br/>
      As also should be evident to those of skill in the art, the considerations for configuration include: the number, size and rate of files expected; the average and maximum number of files pending in storage space 505; the characteristics of the file system; and the characteristics of the hardware.
      <br/>
      In the preferred embodiment, the number of directories utilized and the maximum number of files contained in any directory can be reconfigured as appropriate.
    </p>
    <p num="126">b. Control Computer 201</p>
    <p num="127">
      Referring now to FIG. 3, where the path of the paper check 1 is shown by the darkened line 220, as described previously, the sorter 200 processes each check 1 by feeding it from the input hopper 203, along the mechanical track 220 past individual stations where the various check processing functions of imaging and MICR line reading are performed.
      <br/>
      Each check 1 is sent to one of the output pockets 208, 209 and 210.
      <br/>
      Control of the movement of each check 1 down the track 220 (and the operation of the sorter 200 generally) is directed by a program, e.g., in C language, written to run on the control computer 201.
      <br/>
      Information on programming the illustrative NCR 7780 check sorter 200 is available in the NCR 7780 Application Support Environment manual NCR Enhanced IPS Application Programming (DI-2430-A) and will not be discussed herein.
    </p>
    <p num="128">In the preferred embodiment of the invention, the imager 204 generates digital images of the front and back of each check using a pair of cameras (not shown), as known in the art, which convert the analog image data of the front and back of the checks into digital image data.</p>
    <p num="129">
      MICR reader 205 captures the information magnetically encoded in the MICR line of the check for inclusion in the TIFF file 22.
      <br/>
      The information magnetically encoded in the MICR line includes the account number, the check number and often includes the amount.
    </p>
    <p num="130">
      As in any character recognition operation, especially one employing mechanical movement of documents, errors can be introduced into the process.
      <br/>
      A common problem in check processing is when two checks 1 pass down the track 220 at the same time, commonly referred to as a piggy-back.
      <br/>
      In a standard check processing environment, this could result in the second check being missed by the check sorter.
      <br/>
      In an image capture environment, this situation will result in the front image of the first check being associated with the back image of the second check.
    </p>
    <p num="131">
      In addition, a more significant problem results from the information extracted from the MICR line being incorrect.
      <br/>
      An example of these problems is where a MICR line read error results from the second check's MICR line information "bleeding" through the first check, resulting in incorrect information being received by the MICR reader 205.
      <br/>
      Thus, the check image would be stored in a storage device under an incorrect account number, making it, for all practical purposes, unretrievable.
    </p>
    <p num="132">
      In order to identify this situation and take corrective action while the checks 1 are still in the sorter 200, a "best read" comparison is performed on the data retrieved from the MICR line prior to making the decision relating to which of the output pockets 208, 209, 210 to send the check 1.
      <br/>
      As is well known in the art, in character recognition, whether optical or magnetic, an algorithm determines what character is represented to a given confidence level.
      <br/>
      Below that confidence level, the algorithm will not determine what the character is.
      <br/>
      A "best read" is determined by the sorter 200, from the results of the decoded MICR from the OCR 206 and the MICR reader 205, in accordance with a known technique, not described in detail here.
      <br/>
      In the preferred embodiment, the check sorter 200 is instructed to provide a "best read" on the MICR line, and returns a decoded MICR line with "�" characters replacing any questionable data in the MICR line.
      <br/>
      If the "best read", i.e., the decoded MICR line contains no "�" characters, the control computer 201 causes the check image to be converted to a TIFF file 22 and directs the check to one of the six normal output pockets 210.
      <br/>
      The front and back check digital images are converted from the camera digital image format, e.g., NCR image format, into a standard Tagged Image File Format (TIFF, which is a registered trademark of ALDUS Corp.) The front and back digital images are combined into a single TIFF file 22 along with other data, described below, relating to the check and its processing.
      <br/>
      The TIFF file 22 is in industry standard TIFF format.
      <br/>
      The non-image data is given TIFF tags and stored within the file as financial information.
      <br/>
      The following fields are each stored as tag fields:
    </p>
    <p num="133">
      --
      <br/>
      -- Raw MICR line      A copy of the MICR line as received as "best
      <br/>
      --                    read" from the check sorter 200, in reverse
      <br/>
      --                    order.
      <br/>
      -- Parsed MICR line   MICR line data, parsed to remove bank
      <br/>
      --                    information, leaving the account number,
      <br/>
      --                    check number and amount in proper order.
      <br/>
      -- Account number     Account number of the check.
      <br/>
      -- Check number       The check number.
      <br/>
      -- Amount             The amount of the check.
      <br/>
      -- Customer           The customer ID for this check.
      <br/>
      -- Work Date          Date checks were processed.
      <br/>
      -- Machine ID         ID of check sorter which processed the check.
      <br/>
      -- Capture Date/Time  Time and date when image was generated.
      <br/>
      -- Repair ID          Repair Station ID used to repair this check.
      <br/>
      -- Repair Date/Time   Time and date when check was repaired.
    </p>
    <p num="134">When inconsistencies exist between the optically and magnetically decoded MICR lines or, where one or more characters were not decoded by either the MICR reader 205 or the OCR device 206, the check 1 can either be directed to the repass pocket 209 for re-processing on the sorter 200 or to the repair pocket 208 for MICR line correction at the repair station 4 (FIG. 1) Referring now to FIGS. 5A and 5B for procedure and FIG. 3 for hardware, two distinct processing modes are established for the sorter 200, normal mode (FIG. 5A) and repass mode (FIG. 5B).</p>
    <p num="135">
      The objective of the normal mode is to process all checks 1 as quickly as possible.
      <br/>
      Checks 1 are processed from the input hopper 203.
      <br/>
      If checks 1 are present in the input hopper 203 (step 214), a check 1 is automatically removed from the input hopper 203 and processed.
      <br/>
      During processing, the MICR line is decoded by the OCR device 206 (see step 216) and the MICR reader 205 (see step 215) as described above.
      <br/>
      Some of the time the "best read" contains "�" characters, and therefore, errors.
      <br/>
      This can result if one or more characters are not recognized by either of the decoders.
      <br/>
      The reasons for such non-recognition are well known in the art.
    </p>
    <p num="136">
      If the "best read" contains "�" characters, errors are present (250).
      <br/>
      If no errors are present, the sorter 200 is controlled to send check 1 to one of the normal pockets 210 (see 251), the image and associated data are converted to a TIFF file (252) and the merged TIFF file 22 is written to the storage space 505. (See 253).
    </p>
    <p num="137">
      Where "best read" contains "�" characters, the number of such characters is compared with a threshold number (260).
      <br/>
      Checks 1 containing some "�" characters, but fewer than the threshold level, are sent to the repair pocket 208 (see 261) and the associated image for that check is sent to a repair queue 25 (see 262).
      <br/>
      Checks 1 with an equal or a greater number of inconsistencies than a threshold number are sent to a repass pocket 209 (see 263) and the associated image is discarded.
      <br/>
      In a preferred embodiment, the threshold number of "�" characters, or errors, is four, meaning that if there are four or more errors, or unreadable characters, the check is sent to the repass pocket.
      <br/>
      Normal processing continues until there are no more checks 1 in the input hopper 203 (see 214), at which time normal processing is complete (265).
    </p>
    <p num="138">
      After all checks 1 have been processed in normal processing, the operator may switch to the repass mode (FIG. 5B).
      <br/>
      The objective of the repass mode is to have an operator review each check 1 having a number of inconsistencies at or above the threshold level, individually.
      <br/>
      If the number of errors is still at or above the threshold when the check is re-processed, the operator determines the disposition of the check 1.
    </p>
    <p num="139">
      In repass mode, checks in the repass pocket 209 are moved to the input hopper 203 and again conveyed along the track 220.
      <br/>
      A "best read" is again obtained for the check.
      <br/>
      The repass mode differs from normal processing only in the way checks are handled if a threshold number or more errors are present.
      <br/>
      If the number of errors is equal to or greater than the threshold for this second processing, the check is stopped in the track 220 and the image is displayed on the console 211 along with the decoded MICR line (see 271).
      <br/>
      The operator can decide to accept the check 1 (see 272), which causes the check 1 to be guided to the repair pocket 208 (see 261) and the image is sent to the repair queue 25 (see 262), to facilitate later correction at the repair station 4.
      <br/>
      The operator can also decide to reprocess the check 1 on the sorter 200 (see 275), at which time the operator removes the check 1 from the track 220 and places it in the input hopper 203 (see 276).
      <br/>
      The image and data associated with that check 1 are then discarded (see 264).
      <br/>
      If the operator chooses not to accept (272) or reprocess (275) the check 1, the check must be killed by removing the check from processing (step 278).
      <br/>
      The image and data associated with that check 1 are also discarded (see 264).
      <br/>
      A check 1 is killed if, for instance, the check 1 is for an account other than the account currently being processed.
      <br/>
      When the operator chooses to kill a check, the number of expected checks and the dollar total of the expected checks will be reduced appropriately.
      <br/>
      Repass processing continues until there are no more checks 1 in the repass processing pocket 209 (see 214), at which time repass processing is complete (265).
    </p>
    <p num="140">
      In addition to controlling the sorter 200, several ancillary functions are also resident in the control computer 201.
      <br/>
      These include maintaining statistics and performing file maintenance.
    </p>
    <p num="141">c. Repair Station 4</p>
    <p num="142">
      Turning now to FIG. 4, repair station 4 comprises a repair controller 401 display device 402, a keyboard 403, and temporary storage device 404.
      <br/>
      In the preferred embodiment, controller 401 may be a PC, e.g., an NCR 486 PC, connected to the network 3 via a TCP/IP protocol.
      <br/>
      It preferably utilizes the Network File System (NFS) to read its input from the queue 25 of the storage space 202 (FIG. 3).
      <br/>
      It writes the corrected files in the form of TIFF files 22, via NFS, to the storage space 505.
    </p>
    <p num="143">
      In the event that the network 3 is unavailable, for example, due to network 3 failure, the corrected TIFF files 22 are written to the corrected files database 405 on the temporary storage device 404.
      <br/>
      When the network 3 becomes available, the TIFF files 22 are then written to the storage space 505.
    </p>
    <p num="144">The repair station 4 is designed to expedite the correction of MICR line data which fails to meet acceptance criteria when it is decoded by the check sorter 200.</p>
    <p num="145">
      The repair station 4 provides the operator with a convenient and efficient method of correcting MICR line information for a potentially large number of checks.
      <br/>
      Reject percentages, i.e., the percentage of checks which cannot reliably have the MICR decoded--vary by account from under 1% to over 6%.
    </p>
    <p num="146">
      The processing followed by the repair station 4 facilitates rapid correction of a large volume of MICR lines.
      <br/>
      With reference now to FIG. 5F, once initiated, the repair station 4 automatically searches the repair queue 25 of storage space 202 for items needing repair (140).
      <br/>
      Preferably, the system follows FIFO logic, by account, for presenting items requiring repair to the operator.
      <br/>
      The check image and partially decoded data for each item requiring repair is presented to the operator (142).
    </p>
    <p num="147">
      After displaying the images and the data on the repair station display device 402 (142), the repair station 4 checks each of the three data fields that were encoded in the MICR line, specifically, the account number, the check number and the amount, and highlights the first field requiring correction to the operator (144).
      <br/>
      In the preferred embodiment, the first field containing errors is highlighted in reverse video.
      <br/>
      The operator can now enter the corrected data on the keyboard 403 (146).
    </p>
    <p num="148">
      FIG. 5H shows the display screen of the repair station 4 which will be provided on the display 402.
      <br/>
      A data entry field 192 is provided at the very bottom of the screen (FIG. 5H), and is used as a single point of entry for all three fields.
      <br/>
      Preferably, the field highlighted on the screen is the only field which will be affected by data entry.
    </p>
    <p num="149">
      Once corrected data is entered by the operator, the repair controller 401 checks the next field for errors (147), and if necessary, highlights it for correction (steps 146, 148).
      <br/>
      After all data fields are corrected (147), the repair controller 401 displays a release message (150).
      <br/>
      By pressing the return or enter key on the keyboard 403, the repaired item is then released.
      <br/>
      When a repaired item is released, image and data associated with that item are removed from the repair queue 25 and converted into a TIFF file 22, as above.
      <br/>
      The TIFF file 22 is written to the storage space 505.
      <br/>
      After releasing the item, the repair station automatically returns to the step of finding the next item needing repair (140).
      <br/>
      Thus, the design of the repair station 4 encourages the use of a minimal number of keys by the operator to facilitate rapid processing.
    </p>
    <p num="150">
      In the preferred embodiment, the specific logic employed in data entry also speeds up the repair process implemented by the repair station 4.
      <br/>
      FIG. 5G shows in detail the process carried out by step 146 of FIG. 5F. Each of the three fields contains the decoded data, as derived from the MICR line.
      <br/>
      Any character for which the recognition confidence falls below the acceptable level is flagged by the use of a single character, e.g., the "�" character (160).
    </p>
    <p num="151">Accordingly, if a single or small number of characters in a large field need correcting, the repair function allows correcting only the single or few characters marked with a "�".</p>
    <p num="152">
      According to the preferred embodiment of the invention, therefore, if the number of characters entered by the operator is equal to the number of "�" characters in the field being repaired, then only the "�" characters will be replaced (162, 164).
      <br/>
      The replacement characters are used to replace the "�" characters one for one in the order entered (166).
      <br/>
      Thus, once the replacement characters are entered, they will automatically replace the "�" characters in the order entered.
      <br/>
      This saves unnecessary data entry.
      <br/>
      Only the characters to be corrected need be entered.
    </p>
    <p num="153">According to the preferred embodiment, if the number of characters entered is not equal to the number of "�" characters (164) and less than or equal to (168) the number of characters in the data field requiring repair (including "�" characters), the new data will automatically replace all existing data (170).</p>
    <p num="154">
      Further, according to the preferred embodiment, if the number of characters entered is greater than the number of characters in the data field being repaired (including "�" characters), a warning message requiring the operator to confirm that the new entry is longer than the current data (172) will be displayed if the operator confirms, then the new data replace the current data (174, 170).
      <br/>
      If the operator does not confirm, the workstation software resumes at step 160 and the operator may reenter the data.
    </p>
    <p num="155">The screen layout of the repair station is, accordingly, designed to clearly identify what data fields require correction and also to relieve the operator from having to search the screen to find the incorrect information.</p>
    <p num="156">
      The repair screen 179 (FIG. 5H), generated by the repair controller 401 on the display device 402, displays both the front 182 and back 180 image of the check, along with three fields showing the account number 186, check number 188 and amount 190.
      <br/>
      As mentioned above, a single input field 192 is present on the repair screen 179 Preferably, the back image 180 of the check is displayed on the top of the screen since it is the image least relevant to the repair task.
      <br/>
      The front image 182 of the check is displayed below the back image 180.
      <br/>
      Directly below the front image, and aligned with the displayed MICR line 184 are the account number 186, check number 188 and amount 190 fields.
      <br/>
      The data fields show the values of the three fields as determined by the sort station 2.
      <br/>
      Alignment with the actual MICR data 184 aids in rapid identification of necessary corrections.
      <br/>
      The repair function highlights the field being worked on by showing the data in reverse video.
      <br/>
      At the very bottom of the screen, directly under the three data fields 186, 188, 190, is the single data entry field 192 by which the operator enters the new data for correcting the incorrect data, as described.
      <br/>
      By utilizing a single data entry field, the operator can focus attention on one location on the screen and avoid wasting time searching the screen for the next area of the screen requiring attention.
    </p>
    <p num="157">d. Image Storage Station 5</p>
    <p num="158">
      With reference now to FIGS. 5 and 5I, which show two alternative embodiments of the image storage station 5, the TIFF files 22 are stored on an image storage device 502, which preferably comprises a mass storage device.
      <br/>
      Further, the image storage station runs a pair of asynchronous processes, described below, the Requester Process and the Retrieval Process, to process incoming requests for check images from a customer workstation 7.
      <br/>
      In a first embodiment, shown in FIG. 5I, the image storage station 5 comprises an image storage controller 501 coupled to the network 3, an image storage device 502 and a storage space 505.
      <br/>
      In a second embodiment, shown in FIG. 5, the image storage station additionally comprises an index database controller 510 coupled to the network 3 and an index database device 511.
    </p>
    <p num="159">
      In the preferred embodiment of the invention employing either embodiment of the image storage station 5 of FIG. 5 or 5I, the image storage device 502 is a Kodak 6800 optical disc library system configured in its "A" option.
      <br/>
      This configuration consists of a single drive and 50 slots for 50 fourteen inch 10.4 GB optical platters.
      <br/>
      The device 502 is controlled by the image storage controller 501, preferably a SUN SparcStation 20 computer running AMASS 4.2.1 software.
      <br/>
      Further, according to the preferred embodiment, the storage device 502 communicates with controller 501 via a SCSI connection for data transmission and an RS-232 connection for robotics control.
      <br/>
      These are shown only schematically in FIGS. 5 and 5I by the line 501A.
    </p>
    <p num="160">
      By mass storage device standards, an optical disk jukebox such as the Kodak 6800 is a relatively slow device.
      <br/>
      This storage device is used in the preferred embodiment of the invention as the preferred image storage device 502, however, because of its half-terabyte capacity, and low cost per unit of storage.
      <br/>
      Other devices could also be used.
      <br/>
      In the preferred embodiment, the image storage device 502 contains a single drive, and up to 50 optical platters.
    </p>
    <p num="161">Request File Processing</p>
    <p num="162">
      A customer desiring a check image can cause a workstation 7 to transmit a request file to the host system 8.
      <br/>
      The operation of the workstation 7 and creation of requests will be described in greater detail below in connection with the detailed description of the workstation.
      <br/>
      The request file from the workstation 7 is stored on the output queue device 601 (FIG. 2) until it can be processed.
      <br/>
      The following is a description of request file processing.
    </p>
    <p num="163">
      Generally, a request file can contain a request for one or more check images.
      <br/>
      When a requested check image is found, it is queued on the output queue device 601 for later transmission to the customer workstation 7.
    </p>
    <p num="164">Request file processing is performed by a pair of asynchronous processes, the Requester Process and the Retrieval Process</p>
    <p num="165">
      In the embodiment of FIG. 5, the Requester Process runs on the index database controller 510.
      <br/>
      In the embodiment of FIG. 5I, it runs on controller 501.
      <br/>
      The Requester Process analyzes each request made in each request file stored in output queue device 601 to determine whether the requested image exists in the image database 503, and if so, where the image is located.
      <br/>
      The Requester Process places each request which can be satisfied into a data structure called the request data structure for subsequent processing by the Retrieval Process.
    </p>
    <p num="166">The Retrieval Process reads requests from the request data structure and retrieves the check image files, depositing them in the appropriate user's download directory on the output queue device 601 of the output station 6.</p>
    <p num="167">
      With reference both to FIGS. 5 and 5I, TIFF files 22 containing front and back check images and the embedded MICR line and optionally other data are written to the storage space 505, as described above, by the sort station 2 and the repair station 4.
      <br/>
      The TIFF files 22 awaiting processing by the image storage controller 501 are maintained on the storage space 505 in a round robin directory structure described above.
      <br/>
      The image storage controller 501 archives the TIFF files 22 to the image storage device 502 where they can be found and retrieved by the Requester Process and the Retrieval Process.
    </p>
    <p num="168">
      The image storage controller 501 preferably uses a UNIX file system as a means of storing and retrieving files on the image storage device 502.
      <br/>
      Preferably, the image storage device 502, which in the illustrated embodiment is an optical storage device, is a write-once read-mostly (WORM) type device.
      <br/>
      Once data is written, it cannot be erased.
      <br/>
      As will be evident to one of skill in the art, to permit the addition of files and directories to the image storage device 502, the administrative information (also known as meta-data), such as the directory structure of image storage device 502, is maintained on storage space 505.
    </p>
    <p num="169">
      A UNIX-type file system is used to maintain the data on the image storage device 502.
      <br/>
      The number of files (e.g. TIFF files 22 or BLOBs 26) stored on the image storage device 502 is potentially enormous, i.e., several orders of magnitude larger than an optimum size for a UNIX-type file system directory.
      <br/>
      As is known in the art, in a UNIX-type file system, each directory and file name consume resources.
      <br/>
      Since UNIX-type file systems implement directories as a linear list of file names, directory search and insertion times are, essentially, a linear function of the number of names in the directory.
      <br/>
      As a consequence, very large directories are inefficient, also known as overburdened.
      <br/>
      To prevent overburdening of a directory on the image storage device 502, causing, e.g., a deterioration in insertion, deletion and retrieval response times because too many files are stored in a single directory, the invention uses a method of distributing the files over a number of directories on the image storage device 502.
      <br/>
      As is known on UNIX-type file systems, every file must have a unique file name including its path, i.e. no two files of the same name can be stored in the same directory.
      <br/>
      In the present invention, an algorithm is used to break down the information unique to a given file into a path and file name.
    </p>
    <p num="170">
      As input, the algorithm requires a unique string of digits (or characters) corresponding to a file to be stored, and constructs therefrom a unique path and file name insuring sufficient distribution over the file system directories.
      <br/>
      The algorithm also requires a prespecified maximum directory size.
      <br/>
      For any given UNIX-type file system, the size can be determined empirically, or as is evident to one skilled in the art, calculated, by using the approximate number of files to be stored, the population characteristics of the unique identifiers, and the characteristics of the file system and the storage device.
    </p>
    <p num="171">
      With the above-described inputs, the algorithm outputs a path and file name under which the file is stored to the image storage device 502.
      <br/>
      Unlike hashing algorithms, which are known in the art, it is evident that no decoding algorithm (save removing path separation characters) is required to correlate the path and file name with the underlying unique string identifying the file.
      <br/>
      It can be seen from the following illustrative embodiment that, for a given unique identifier, the algorithm can be used to limit the number of files which will be placed in any directory.
      <br/>
      For example, where one to nine digit numbers represent the entire population of unique identifiers, it can readily be seen that the one billion unique files can be stored using ten thousand "root" directories, each comprising one thousand sub-directories, and each sub-directory having one hundred unique files.
    </p>
    <p num="172">
      The algorithm to segment purely numeric unique identifiers can be described as follows.
      <br/>
      First, leading zeroes are removed from the unique identifier.
      <br/>
      Subsequently, the least significant n digits form the rightmost, or file name segment.
      <br/>
      If less than n digits are present in the unique identifier, all digits present form the rightmost or file name segment.
      <br/>
      Next, the remaining digits are segmented into a minimum number of segments, such that no segment is longer than m digits.
      <br/>
      If the segments are not equally sized, the largest segment or segments are used for the most significant digits in the unique identifier.
      <br/>
      Thus, as is evident from the above, the total number of possible sub-directory entries in a parent directory will be at least as large as the total number of possible entries in each one of its first level sub-directories (children directories).
      <br/>
      In the preferred embodiment, n=2 and m=4, this can be seen from the following table:
    </p>
    <p num="173">
      --
      <br/>
      -- Unique
      <br/>
      -- Identifier  First          Second         Third
      <br/>
      -- Length      Segment Length Segment Length Segment Length
      <br/>
      -- (Digits)    (Digits)       (Digits)       (Digits)
      <br/>
      -- 1           1
      <br/>
      -- 2           2
      <br/>
      -- 3           1              2
      <br/>
      -- 4           2              2
      <br/>
      -- 5           3              2
      <br/>
      -- 4           4              2
      <br/>
      -- 7           3              2              2
      <br/>
      -- 8           3              3              2
      <br/>
      -- 9           4              3              2
      <br/>
      -- 10          4              4              2
    </p>
    <p num="174">
      Thus, for example, where the unique identifier is seven digits long, or more, the first and second segments are used as the path, i.e., the name of subdirectories, and the third segment is used as the file name.
      <br/>
      Where the unique identifier is six digits long, the first segment is used as the path and the second segment is used as the file name.
      <br/>
      For example, the unique identifier "123456789" would have a path (i.e., list of directories) and file name of "1234/567/89", whereas the unique identifier "1234" would have a path (i.e., list of directories) and file name of "12/34".
    </p>
    <p num="175">
      In the preferred embodiments, only digits (0 through 9) (and, as described below, the "." character) are used in the unique identifier.
      <br/>
      One of ordinary skill can, however, see that the algorithm is equally well adapted to unique identifiers containing any number of characters.
      <br/>
      Furthermore, in the preferred embodiment, the algorithm is optimized for use with unique identifiers of one to nine digits; however, it can readily be seen that any number of digits or characters could be accommodated.
    </p>
    <p num="176">i. First Embodiment</p>
    <p num="177">
      In a first embodiment (FIG. 5I), in order to spread out the files over as many directories as necessary to maintain satisfactory response time, preferably each account is given a separate directory.
      <br/>
      Although the check images, and therefore the TIFF files 22, in the host system 8 can be uniquely identified by account number, check number and optionally check amount, only part of this information is used in the above algorithm.
      <br/>
      Preferably, a subdirectory exists for each account for which check images are to be archived.
      <br/>
      The check number is used, according to the above algorithm, to return segments used for the path within the account directory, and as part of the file name.
      <br/>
      The amount is appended to the last segment returned by the algorithm to create a file name.
      <br/>
      Thus, check number 123456 in the amount of $222.22 drawn on account 33333 would have a path and file name, pictorially shown, of:
    </p>
    <p num="178">33333 (directory)</p>
    <p num="179">- 1234 (sub-directory)</p>
    <p num="180">-  56.22222 (file name)</p>
    <p num="181">
      Accordingly, check number 1234567 for the same amount, drawn on the same account would have a path and file name, pictorially shown, of:
      <br/>
      33333 (directory)
      <br/>
      - 123 (sub-directory)
      <br/>
      -  45 (sub-directory)
    </p>
    <p num="182">-    67.22222 (file name)</p>
    <p num="183">As can be seen from the examples, the amount is appended to the last segment returned by the algorithm to create a unique file name.</p>
    <p num="184">
      The image storage controller 501 stores each TIFF file 22 which was placed in the round-robin directory structure on the storage space 505.
      <br/>
      The TIFF file is stored on the image storage device 502 in its appropriate directory, under the name constituted as described above.
    </p>
    <p num="185">(1) Requester Process</p>
    <p num="186">
      With reference to FIG. 5C, a Requester Process is generated (spawned) on the image storage controller 501 by the output controller 602 for each request file on the output queue device 601.
      <br/>
      The Requester Process writes each check image request therein to a request queue on the image storage controller 501 in order to serialize the individual check requests.
      <br/>
      See step 90.
      <br/>
      In the illustrative embodiments, the request queue is a UNIX FIFO queue.
      <br/>
      The Requester Process reads (92) the request queue in a FIFO fashion, and processes each request independently.
    </p>
    <p num="187">
      The Requester Process analyzes each check image request in the request queue to determine whether or not one or more TIFF files 22 corresponding to that request, is present on the image storage device 502.
      <br/>
      The Requester Process uses the algorithm, as described above, to turn the account number, check number and amount into a path and file name of one or more TIFF files 22 which satisfy this request (93).
      <br/>
      If the amount of the check is not present, a wildcard search, as known in the art, can be performed.
      <br/>
      If the TIFF file 22 exists, the meta-data on storage space 505 can be interrogated to determine the platter upon which the TIFF file 22 is present.
      <br/>
      For each request for which a TIFF file 22 is located (94) an entry is inserted in a request data structure specifying the location of the TIFF file 22 which will satisfy the request (98).
      <br/>
      For example, the path and file name, along with the platter location (volume and side) are passed to the Retrieval Process via a request data structure.
      <br/>
      Preferably the request data structure comprises the following fields: volume; side; priority; username; customer name; request date; request time; account; check number; check amount; and request number (in batch).
    </p>
    <p num="188">In the case where more than one TIFF file 22 is located to satisfy a particular request, for example, where two checks have the same account and check numbers and no amount was specified in the request, an entry in the request data structure is made for each TIFF file 22, that satisfies the request (98).</p>
    <p num="189">If no TIFF file 22 can be located for a particular check request (94), the Requester Process places the request into the request data structure corresponding to the "not found" directory (96), in other words, specifying the location of a "Check Not Found" image.</p>
    <p num="190">(2) Retrieval Process</p>
    <p num="191">Turning now to FIG. 5D, the Retrieval Process processes each request which has been placed in the retrieval data structure.</p>
    <p num="192">
      In order to minimize platter thrashing, all requests are sorted for retrieval.
      <br/>
      Preferably, the request data structure is set up to have sortable fields corresponding to the physical characteristics, e.g., platters and sides, of the image storage device 502.
      <br/>
      Since the Requester Process has determined the location for each request, the Retrieval Process simply sorts all of the requests by platter and then by platter side.
      <br/>
      The Retrieval Process first checks if there are check image requests pending for the platter currently in the drive (1118).
      <br/>
      If there are, the Retrieval Process then checks to see if there are any requests for the side of the platter currently under the read heads of the optical storage device (1120).
      <br/>
      If there are no requests for the current side, the platter is then flipped (1124).
    </p>
    <p num="193">
      The Retrieval Process then first verifies that the request is made by an authorized user (1110) or an authorized account.
      <br/>
      This check to confirm that the user is authorized is done by verifying that the account with which the request check is associated is on the user's valid accounts file, which file is maintained on the output queue device 601.
      <br/>
      Once the user has been verified, the Retrieval Process confirms that the account number of the check requested is in the user's valid accounts file.
      <br/>
      This is done by reference to the list of the accounts a user is permitted to access, which is maintained in an accounts file on the output queue device 601.
    </p>
    <p num="194">If the user is not authorized, or if the account number selected is not in the valid accounts file, the Retrieval Process will generate a "Check Not Found" check image to return to the user (1116), thus not giving any further information to anyone trying to access an account for which they have not been authorized.</p>
    <p num="195">If the user and account are authorized, the image storage device is accessed, and the TIFF file 22 corresponding to the request is read (1122) from the image storage device 502.</p>
    <p num="196">
      The Retrieval Process then re-inspects the request data structure to see if any other requests for this platter are pending (1118).
      <br/>
      If there are, they are fulfilled as above (1118, 1120, 1110, 1122).
      <br/>
      If there are no other requests for the current platter, the Retrieval Process requests the platter (1128) with the most outstanding requests in the request data structure, and mounts that platter (1130).
      <br/>
      The Retrieval Process satisfies each request as described above.
    </p>
    <p num="197">
      The TIFF file 22 contains images of both the front and back of the check, as well as tagged data fields containing the raw MICR line, the parsed MICR line, the account number, the check number, the amount, and the customer ID.
      <br/>
      The Retrieval Process generates two TIFF format files from this TIFF file 22: one comprising the front image (the ".f file") and one comprising the back image (the ".b file") of the check.
      <br/>
      As discussed above, TIFF tags are utilized to store descriptive data about the check directly in TIFF files 22 and the TIFF format .f and .b files.
      <br/>
      The MICR line and all of the other non-image tagged data fields are placed in both files.
      <br/>
      This information may be used by the customer workstation 7 to identify each file and match the .f and .b files to the specific request.
      <br/>
      The front image file and the back image file preferably are named utilizing a sequential number scheme to insure uniqueness.
      <br/>
      The file name extensions may be used to identify front (.f) and back (.b).
    </p>
    <p num="198">
      All generated "Check Not Found" files are in the TIFF format as well, and contain the requested account number and check number of the check requested.
      <br/>
      If amount was specified in the request, preferably it too is placed in the "Check Not Found" file if the image was not found.
      <br/>
      This ensures consistent processing in identifying this image file with the request on file at the customer workstation 7.
    </p>
    <p num="199">ii. Second Embodiment</p>
    <p num="200">
      With reference to FIG. 5, the required throughput of the huge number of TIFF files 22 which must be written to and read from the image storage database 503 residing on the relatively slow optical media creates a bottleneck, thus presenting a performance problem.
      <br/>
      The TIFF files 22 can not, without the means described below or equivalents to the means described below, be written to the image storage device 502 at a pace comparable to the throughput of the sort station 2.
      <br/>
      Accordingly, in the first embodiment, there exists a need to cache a greater number of TIFF files 22 in storage space 505 during peak processing times.
      <br/>
      Thus, the storage space 505 in the embodiment of FIG. 5I allows for temporary storage during peak processing times when the image storage device 502 cannot receive images at the rate at which they are generated.
      <br/>
      According to the embodiment of FIG. 5, another solution to the problem is to write a smaller number of larger files to the image storage device 502 to improve throughput.
      <br/>
      This can be achieved by bundling a number of TIFF files 22 into a BLOB 26.
      <br/>
      The total number of files stored in the image storage device 502 is thereby reduced by a factor of one/the number of TIFF files 22 bundled into each BLOB 26.
      <br/>
      In the preferred embodiment, fifty TIFF files 22 are bundled into each BLOB 26.
    </p>
    <p num="201">
      With reference to FIG. 5, the index database 30 resides on the index database device 511 controlled by the index database controller 510.
      <br/>
      In the preferred embodiment, the index database 30 is accessed using a database engine, e.g., Sybase or Informix program as known to those in the art, and the index database device 511 is a RAID disk array.
    </p>
    <p num="202">
      TIFF files 22 containing both front and back check images and the non-image tag data are written to the round robin directory structure on the storage space 505 coupled to the image storage controller 510, as described above, by the sort station 2 and the repair station 4.
      <br/>
      The rate at which these files are created, and therefore become ready for storage, may be greater than the rate at which the individual TIFF files 22 can be indexed and stored by the image storage station 5.
    </p>
    <p num="203">
      As will be discussed in more detail below, the image storage controller groups the TIFF files 22 in the round-robin directories of the storage space 505 by account number.
      <br/>
      When a predetermined number of TIFF files 22, preferably for one account, are present, the image storage controller 501 groups these files into a Binary Large Object (BLOB) 26, and writes the BLOB 26 to the image storage device 502.
      <br/>
      As will be evident to one of skill in the art, the BLOB 26 need not comprise only TIFF files 22 from one account.
    </p>
    <p num="204">
      Preferably, provision is also made to flush a particular account from the round-robin directories, or all pending TIFF files 22, even when less than the predetermined number of TIFF files 22 are present.
      <br/>
      This is done, for example, when daily processing for a particular day or account is complete.
      <br/>
      In that case, a BLOB may be written to the image storage device 502 consisting of less than the predetermined number of TIFF files 22.
    </p>
    <p num="205">
      The BLOB 26 contains a header 38 and a plurality, illustratively, fifty TIFF files 22 each representative of one check.
      <br/>
      The BLOB header 38 comprises the fields listed below.
    </p>
    <p num="206">The following fields occur once at the beginning of each BLOB 26:</p>
    <p num="207">
      --
      <br/>
      --      Field                Description
      <br/>
      --      Byte Order           Intel or Motorola
      <br/>
      --      Version Number       Software version
      <br/>
      --      Account Number       Self-explanatory
      <br/>
      --      Customer ID          Self-explanatory
      <br/>
      --      Date committed       Date placed in archive
      <br/>
      --      Number of checks     Number of TIFF files 22 in BLOB 26
      <br/>
      --      File length          Total file lenqth
      <br/>
      --      CRC value            For error correction
      <br/>
      The following fields occur in the header 38 once for each TIFF file 22 contained in the BLOB 26:
    </p>
    <p num="208">
      --
      <br/>
      --        Check Number       Self-explanatory
      <br/>
      --        Amount             Self-explanatory
      <br/>
      --        Start Offset       Offset of TIFF file 22 in BLOB 26
      <br/>
      --        Lenqth             Length of TIFF file 22
    </p>
    <p num="209">
      The BLOB 26 also contains each of the plurality of TIFF files 22 stored at the offset and having the length indicated.
      <br/>
      Once assembled, the BLOB 26 is given a unique sequence number.
    </p>
    <p num="210">
      According to the algorithm described above, the sequence number is used to determine a path and file name on the image storage device 502 at which to store the BLOB 26.
      <br/>
      The image storage controller 501 then writes the BLOB 26 to the image storage device 502 under the path and file name determined.
      <br/>
      After the write function has been successfully completed, the image storage controller 501 sends the account number for the the check images stored in the BLOB 26, along with the check number and amount associated with each of the TIFF files 22 and the sequence number of the BLOB 26 in which they were stored, to the index database controller 510.
    </p>
    <p num="211">
      The index database controller 510 then creates an index record 28 in the index database 30 for each of the TIFF files 22 stored on the image storage device 502, i.e, in a BLOB 26.
      <br/>
      The TIFF files 22 that have been written on the BLOB 26 are then deleted from storage space 505.
    </p>
    <p num="212">Each index record 28 contains information pertinent to one check 1, for example, an index record may include:</p>
    <p num="213">
      --
      <br/>
      --      Field                Description
      <br/>
      --      Account Number 34    Self-explanatory
      <br/>
      --      Check Number 35      Self-explanatory
      <br/>
      --      Amount 37            Self-explanatory
      <br/>
      --      Work Date 39         Date check was processed
      <br/>
      --      Location Code 40     Image storage device 502 containing the
      <br/>
      --                           BLOB 26 (i.e., support for multiple
      <br/>
      --                           image storage devices)
      <br/>
      --      BLOB File Name 41    Sequence number for BLOB 26
    </p>
    <p num="214">Preferably, the location code 40 (that indicates which image storage device 502 has been used to store the image where multiple devices 502 are used), and the BLOB file name 41, which is a sequential number assigned to the BLOB 26, together, form a BLOB pointer 36.</p>
    <p num="215">
      Since TIFF files 22 in the host system 8 can be uniquely identified by account number, check number and optionally check amount, this information, as stored in the index record 28, is preferably used as primary keys to the index database 30.
      <br/>
      The work date may be used as an alternate key.
    </p>
    <p num="216">(a) Requester Process</p>
    <p num="217">
      With reference to FIG. 5C, a Requester Process is generated (spawned) on the image storage controller 501 by the output controller 602 for each request file on the output queue device 601.
      <br/>
      The Requester Process writes each check image request therein to a request queue on the index database controller 501 in order to serialize the individual check requests.
      <br/>
      See step 90.
      <br/>
      In the illustrated embodiment, the request queue is a UNIX FIFO queue.
      <br/>
      The Requester Process reads (92) the request queue in a FIFO fashion, and processes each request independently.
    </p>
    <p num="218">
      The Requester Process performs a search of the index database 30 for each check image request in the request queue to determine whether or not an index record exists corresponding to that request, and thus, the check image is present on the image storage device 502.
      <br/>
      Where the check image is present, the Requester Process obtains its location e.g., a BLOB pointer 36 and passes this information to the Retrieval Process via the request data structure.
      <br/>
      Preferably the request data structure comprises the following fields: volume; side; priority; username; customer name; request date; request time; account; check number; check amount; request number (in batch); and the sequence number of the BLOB 26 in which the TIFF file 22 exists.
    </p>
    <p num="219">
      For each check image request, to determine whether a corresponding TIFF file 22, and therefore a check image is present on the image storage device 502, the Requester Process queries the index database 30 (93).
      <br/>
      Preferably, for each request for which an index record 28 is located, the meta-data on storage space 505 is interrogated to determine the platter and side upon which the BLOB 26 containing the corresponding TIFF file 22 is located (93).
      <br/>
      If an index record is found (94) an entry is then inserted in the request data structure specifying the location of the BLOB 26 containing the TIFF file 22 which will satisfy the request (98).
      <br/>
      In the case where more than one index record 28 is located to satisfy a particular request, for example, where two checks have the same account and check numbers and no amount was specified in the request, an entry in the request data structure is made for each index record 28, and thus TIFF file 22, that satisfies the request (98).
    </p>
    <p num="220">If no index record 28 is found for a particular check request (94), the Requester Process places the request into the request data structure corresponding to the "not found" directory (96), in other words, specifying the location of a "Check Not Found" image.</p>
    <p num="221">(b) Retrieval Process</p>
    <p num="222">
      Turning now to FIG. 5D, the Retrieval Process processes each request which has been placed in the retrieval data structure.
      <br/>
      The Retrieval Process in the second embodiment functions essentially the same as the Retrieval Process of the first embodiment of the image storage station 5.
      <br/>
      However, in this second embodiment Retrieval Process, once the user and account are authorized, and the image storage device 502 is accessed, instead of reading a TIFF file 22, the BLOB 26 containing the desired TIFF file 22 is read.
      <br/>
      Thus, turning to FIG. 5E, for every read request (e.g. step 1122 of FIG. 5D), the Retrieval Process reads the BLOB 26 containing the TIFF file 22 from the image storage device 502 (1131).
      <br/>
      The TIFF file 22 is then extracted from the BLOB 26 (1132) using the header 38 information.
      <br/>
      Subsequently, as performed in the first embodiment Retrieval Process, .f (front) and .b (back) files are created from the TIFF file 22.
    </p>
    <p num="223">e. Output Station 6</p>
    <p num="224">
      i.
      <br/>
      Communication Station 600
    </p>
    <p num="225">
      Turning to FIG. 2, the communication station 600 includes an output controller 602 that controls the electronic interface between the customer workstation 7 and the host system 8.
      <br/>
      A communication gateway 603 is provided for communication between the host system 8 and the individual workstations 7.
      <br/>
      The communication gateway 603 is coupled to the output controller 602.
      <br/>
      For example, the communication gateway may comprise six modems 604 and/OR an ISDN controller 605.
      <br/>
      In the preferred embodiment, the modems 604 may be Telebit 3000 14,400 bps modems providing dial-up capability, and the ISDN controller 605 may, for example, be a Combinet 400.
      <br/>
      Six modems 604 are preferred to support, for example, six concurrent dial-up sessions with six customer workstations 7.
    </p>
    <p num="226">
      The output controller 602 is also coupled to the output queue device 601.
      <br/>
      The output queue device 601 is used to store customer, user and account information, check requests transmitted by customers, and check image files that are to be automatically downloaded to customers' workstations 7 via the communication gateway 603 mentioned above.
      <br/>
      In the preferred embodiment, the output queue device 601 may be a RAID disk array.
    </p>
    <p num="227">
      In the preferred embodiment, the output controller 602 may be used to create customers, users and accounts.
      <br/>
      These functions are described in more detail below.
    </p>
    <p num="228">ii. Export Station 610</p>
    <p num="229">
      The Export Station 610 controls bulk export of check images.
      <br/>
      For example, check images can be sent to clients on a periodic cycle, e.g., daily, weekly, monthly, etc.
      <br/>
      A variety of export media are available, for example, CD-ROM and digital tape.
    </p>
    <p num="230">
      The bulk export controller 611 is linked to the Network 3 and one or more recording devices, such as a CD-ROM recorder 613, a tape drive 612 or a worm drive 614.
      <br/>
      Check images can be recorded, using the recording devices (612, 613, 614), for forwarding or archival purposes.
      <br/>
      The check images recorded for forwarding to a customer are in the form of .b (back) and .f (front) files, discussed below.
    </p>
    <p num="231">
      The Export Station 610 controls all physical devices for media output, i.e., output to CD-ROM, tape or other media.
      <br/>
      Export of check images via electronic transmission are controlled by the output controller 602.
      <br/>
      Each output media necessitates different data preparations, as are known in the art.
      <br/>
      The Export Station 610 controls these preparations.
    </p>
    <p num="232">f. Customer/User Subsystem</p>
    <p num="233">
      A Customer/User Subsystem is provided both to control and maintain customer and user access, and to maintain each customer's data integrity.
      <br/>
      The Customer/User Subsystem data resides on the output queue device 603 and the Customer/User subsystem is preferably operated on the output controller 602.
    </p>
    <p num="234">
      A Customer maintenance function is provided which allows a host system 8 operator to establish and maintain customers and accounts.
      <br/>
      When a customer is established in the host system 8, a customer directory is created, this directory may reside on the index database device 511.
      <br/>
      Likewise, when an account is added, the Customer maintenance function automatically establishes a sub-directory for that account within the customer's directory.
      <br/>
      The Customer maintenance function also allows the entry and maintenance of users.
      <br/>
      Each new user added to the system is associated with an already existing customer and is assigned a directory on the output queue device 601.
      <br/>
      A password is established for each user.
      <br/>
      A list of the accounts the user is permitted to make requests against are maintained in a valid accounts file in the user's directory.
    </p>
    <p num="235">g. Mass Storage Considerations</p>
    <p num="236">
      Check images are uniquely identified by account number, check number and optionally amount.
      <br/>
      These three fields comprise the key to a single check/single file implementation.
      <br/>
      Performance limitations of the mass storage device, and in particular, the optical jukebox used in the preferred embodiment, make a single check/single file implementation infeasible for the present system.
      <br/>
      An optical jukebox is preferably used in the invention in order to provide large amounts of cost effective storage.
      <br/>
      Thus, a new implementation, i.e., multiple check/single file system, is provided by the invention.
    </p>
    <p num="237">In view of the limit on the number of files imposed by the AMASS 4.2.1 implementation of the UNIX File System used in the preferred embodiment (other file systems could be used), and in order to improve throughput in writing to the mass storage device 502, the invention implements a multiple check/single file database as follows:</p>
    <p num="238">
      Individual check image files (TIFF files 22) are grouped in batches (BLOBS 26) prior to being written to the image database 503 on the image storage device 502, thus effecting a multiple check/single file database.
      <br/>
      In accordance with the invention, by grouping, for example, fifty check image files (TIFF files 22) into a single larger file (BLOB 26) of approximately 1 MB, write time to the device 502 is reduced from approximately 20 seconds down to approximately 2 seconds.
    </p>
    <p num="239">
      In order to maintain access to each check in the fifty checks/single file model, a front-end database (index database 30) is utilized.
      <br/>
      The index database 30 is keyed by account number, check number and optionally amount.
      <br/>
      For each TIFF file 22, the index record 28 of the index database 30 points to the fifty check file (BLOB 26).
      <br/>
      This pointer is used to extract the 50 check file from the storage device 502.
      <br/>
      The particular TIFF file 22 is extracted from the BLOB 26 by pointers contained in a header in the BLOB 26 itself.
      <br/>
      In the preferred embodiment, to facilitate accessing a single TIFF file 22 from the BLOB 26, offset pointers are used to identify the starting offset of each of the TIFF files 22 in the BLOB 26.
      <br/>
      These offsets are maintained as a table at the start of the BLOB 26.
    </p>
    <p num="240">3. Customer Workstation 7</p>
    <p num="241">
      The host system 8 has now been described.
      <br/>
      The following description relates to the structure and function of a customer workstation 7, used by a customer to request and retrieve check images from the host system 8.
    </p>
    <p num="242">
      Referring again to FIG. 2, the customer workstation 7 comprises a workstation computer 701 coupled to a local storage device 702 and optionally to a printer 703.
      <br/>
      The workstation computer 701 is also coupled to a display 701A, a keyboard input device 701C, and preferably to a mouse or other pointing device 701B.
      <br/>
      The workstation computer 701 may be a 486 based personal computer running the Microsoft Windows (tm)  operating environment.
      <br/>
      Another operating system could also be used, e.g. IBM OS/2 or Sunsoft Solaris.
      <br/>
      The local storage device 702 can be a local hard disk drive or a connection such as a network connection to other storage space which is accessible to the workstation computer 701.
      <br/>
      The storage device includes a plurality of directories 702A, 702B.
      <br/>
      Directory 702A stores files including the workstation software (not shown) and other data 710, 715, 720, 725, the details these files will be discussed in more detail, below.
      <br/>
      The workstation computer is preferably coupled to a modem 10 which can be used to communicate with the host system 8 over a dial-up telephone line 11.
      <br/>
      The customer workstation 7 can, however, be coupled to any suitable communication device instead of the modem 10, and thereby communicate with the host system 8.
    </p>
    <p num="243">
      In the preferred embodiment, each workstation computer 7 is a Microsoft Windows (tm)  based system that allows users to request, receive, and display images of checks that have previously been captured and stored in the above described host system 8.
      <br/>
      It will be apparent to one of skill in the art that the described workstation software can be written for any window based or non-window based operating environment, and reference herein to the functionality of the workstation software as it pertains to Windows (tm)  is merely for convenience.
      <br/>
      Furthermore, it is understood that the organization of the functions, menus and sub-menus of the workstation software was designed with the Windows (tm)  operating environment in mind, and can be easily modified to accommodate and/or take advantage of any operating environment upon which one of skill in the art would implement it.
    </p>
    <p num="244">
      As already described, the host system 8 captures and stores images of checks for the customer's designated accounts and maintains them in an archive for up to seven years or more.
      <br/>
      Workstation software resides on the local storage device 702 and is accessible to the workstation computer 701.
      <br/>
      The workstation software allows the user to initiate requests for check images, download those images to the customer workstation 7, and view or print the downloaded images as desired.
      <br/>
      The workstation software also provides utilities to assist the user in managing the number of images retained on the local storage device 702.
      <br/>
      In addition, if the user has a word processor, for example, Microsoft Word (tm)  or any other suitable word processing software, available to the workstation, the workstation software can be configured to allow automatic insertion of check images into pre-defined word-processing documents.
    </p>
    <p num="245">In a preferred embodiment, the workstation software provides all communication, logon, file transfer, display, and print capabilities the user will need to request, receive, display, and print the check images.</p>
    <p num="246">
      Microsoft Windows (tm)  is a graphical environment that allows applications to run with a common set of procedures for organizing, controlling, and accessing the information on the screen.
      <br/>
      As well known, it utilizes a pointer, sizable windows, scroll bars, buttons, drop down menus, drop down boxes, icons, and a variety of other graphical user interface devices that give the user great flexibility in interacting with the workstation 7.
    </p>
    <p num="247">
      Windows (tm)  is well-known and need not be addressed in detail here.
      <br/>
      For more information, the reader is referred to one of the many texts and manuals that have been written on the subject.
      <br/>
      However, a few general items should be noted.
      <br/>
      As will be evident from the following, Windows (tm)  generally provides several different ways of performing most functions.
      <br/>
      To perform a given operation, the user may have the option of using one or more of the following: a mouse or other pointing device, the keyboard, function keys, toolbar buttons, etc., as well known.
      <br/>
      Often there are multiple ways of initiating or carrying out a given operation.
      <br/>
      The system of the invention follows this philosophy, and the descriptions in this patent application will not repeatedly describe all the methods for initiating or carrying out a given operation in the Windows (tm)  environment.
      <br/>
      However, these methods generally include the use of a mouse or other pointing device or a keyboard to access a menu or toolbar, the latter discussed in more detail below.
    </p>
    <p num="248">In the preferred embodiment, at the workstation 7, menus appear on a display device as a series of words across the top of a window, as shown, for example, in FIG. 6, displaying the top level menu, also known as the primary or main menu (as is customary in Windows (tm) ).</p>
    <p num="249">
      Each selection on the menu has one of its letters underlined, and can be accessed with either the keyboard or the pointing device.
      <br/>
      As is customary in Windows (tm) , only the functions currently available are displayed in dark type.
      <br/>
      Functions that are unavailable are "greyed" out (displayed in lighter type).
      <br/>
      A greyed function becomes darkened when it becomes available
    </p>
    <p num="250">
      It is a general convention to reference a particular operation by listing each menu and option which must be selected to initiate that operation.
      <br/>
      For example, File/Exit means select the Exit option from the File menu.
      <br/>
      This nomenclature is well known in the art, and will be used, as appropriate, herein.
    </p>
    <p num="251">
      Additionally, graphical user interfaces such as Windows (tm)  have "buttons." A button is a region of the screen which may look like a real button or key on a keyboard, and when pointed to and clicked upon using either the pointing device or keys on the keyboard, selects the option described by the screen button.
      <br/>
      Alternatively, a touch sensitive screen, as known in the art, could be used.
      <br/>
      Often an OK button is used to indicate that the input on a screen is accepted, or that one may continue.
      <br/>
      One button is normally programmed to be the default button; the default button is activated, as if it was clicked, when the &lt;Enter&gt; or &lt;Return &gt; key is depressed.
    </p>
    <p num="252">As in Windows (tm)  generally, control buttons may be activated by appropriate devices, e.g., by clicking the left mouse button on the desired button or by pressing Alt and the underlined letter of the desired button, e.g., Alt-Y for Yes.</p>
    <p num="253">a. Startup</p>
    <p num="254">
      The workstation software is installed on the customer workstation, as is customary in Windows (tm) . By default, the workstation software is stored in the default drive of the local storage device device 702 and resides in the default directory 702A.
      <br/>
      In the preferred embodiment, the installation process causes the operating environment to display an icon representative of the workstation software.
      <br/>
      This icon is displayed so that a user may easily access the workstation software.
    </p>
    <p num="255">
      The workstation software is started as is appropriate from the operating environment.
      <br/>
      In Windows (tm)  this may usually be performed by "double clicking" on an icon representing the workstation software.
      <br/>
      In the preferred embodiment, when the workstation software is started, an initial screen is provided which displays the copyright and other information.
      <br/>
      Clicking on the OK button (the default button) or pressing &lt;Enter&gt; allows the user to proceed.
    </p>
    <p num="256">
      In the preferred embodiment, the initial screen is replaced with a prompt requesting the user to decide whether to perform image file maintenance at that time.
      <br/>
      A Yes and a No button are presented to the user.
      <br/>
      Image file maintenance provides an opportunity to purge old items and free up space on the local storage device 702.
      <br/>
      The user must select the Yes or the No button.
      <br/>
      Clicking the No button (the default button) or pressing &lt;Enter&gt; causes the workstation software to proceed to its main window as depicted generally in FIG. 8.
      <br/>
      Clicking the Yes button proceeds to image file maintenance prior to going to the main window.
      <br/>
      In a preferred embodiment, image file maintenance can be performed at another time by choosing Options/Image File Maintenance from the main window.
      <br/>
      A discussion of image file maintenance and the main window can be found below.
    </p>
    <p num="257">b. General Procedure</p>
    <p num="258">
      After startup, the general methodology for requesting and retrieving check images from the Workstation consists of the following general processes, as shown in the block diagram of FIG. 27.
      <br/>
      1. Creating an image request file (1200);
      <br/>
      2. Transmitting the request file to host system 8 (1202)
      <br/>
      3. Awaiting retrieval of the requested images by the host system 8 (1204);
      <br/>
      4. Downloading (1206) requested images from host system 8;
      <br/>
      5.
      <br/>
      Storing the requested images on local storage (1208);
      <br/>
      6. Selecting images for display (1210);
      <br/>
      7. Displaying and/or printing selected images (1212);
      <br/>
      8. Optionally merging the check images into a word processing template (1214); and
      <br/>
      9.
      <br/>
      Optionally printing a letter comprising the check images (1216).
    </p>
    <p num="259">i. Local Storage Device 702</p>
    <p num="260">
      The local storage device 702 provides for storage and retreival of information relating to the workstation 7 operation.
      <br/>
      Preferably, the local storage device 702 has a default directory 702A which stores the workstation software, data files used by the workstation software, and .f and .b files as they are received.
      <br/>
      The storage device 702 also has an image directory 702B for storage of .f and .b files (front and back check images) once they have been processed by the workstation software.
      <br/>
      Preferably, the image directory 702E is a sub-directory of the default directory 702A.
    </p>
    <p num="261">
      The main data file 710, the account data file 715, the request file 720 and the service mode file 725 are all preferably stored in the default directory 702A.
      <br/>
      The main data file 710, for example in dBase format, preferably comprises a record 711 for every check image stored in the image sub-directory 702B and for each check request which has been entered by the user.
      <br/>
      The account data file 715 is used to store all of the current accounts, and the service mode file 725 is a list of available service modes, e.g., Overnight and Same Day.
      <br/>
      The request file 720 contains the most recently compiled list of requests for transmission to the host system 8, whether or not it had been transmitted.
    </p>
    <p num="262">
      To free disk space on the local storage device 702, the Options/Image File Maintenance procedure described below removes both unwanted check images and their associated references in the main data file 710.
      <br/>
      The database schema for each record 711 in the main data file 710 is reproduced:
    </p>
    <p num="263">
      --
      <br/>
      -- ACCT_NO        Account number associated with the check request.
      <br/>
      -- CHECK_NO       Check number associated with the check request.
      <br/>
      -- AMT            Amount of check, if entered by user in the check
      <br/>
      --                request.
      <br/>
      -- SER_MODE       Service mode selected by user, e.g. Overnight or
      <br/>
      --                Same Day.
      <br/>
      -- DATE           Date check image (.b and .f) files received for
      <br/>
      --                this request.
      <br/>
      -- REQ_DATE       Date the check request is entered into the system.
      <br/>
      -- REF_NO         User assigned reference field.
      <br/>
      -- STATUS         Status of the check request, e.g., Request,
      <br/>
      --                Pending, Received, Exported.
      <br/>
      -- CHK_FRNT       File name of the file containing the image of the
      <br/>
      --                front of the requested check.
      <br/>
      -- CHK_BACK       File name of the file containing the image of the
      <br/>
      --                back of the requested check.
    </p>
    <p num="264">
      When the user enters a request, at least CHECK_NO is supplied by the user, and, as described below, the ACCT_NO and SER_MODE fields have default values.
      <br/>
      Additionally, for each check request, the REQ_DATE is set to the date on which the request is entered and the STATUS is initially set to Request.
      <br/>
      When the request file 720 is successfully transmitted to the host 8, the STATUS field for each transmitted request is set to Pending.
    </p>
    <p num="265">
      As .b and .f files are received from the host 8, they are placed in the default directory 702A.
      <br/>
      As previously described, the .b and .f files are in TIFF format and contain tag fields containing data about the check.
      <br/>
      This data includes the account and check number and the check amount.
      <br/>
      Thus, after receiving a download from the host 8, the workstation software scans each of the newly received image (.b and .f) files, retreives the data about the check from the tag fields, and associates the files with a "Pending" request by matching account and check number, and if present, amount.
      <br/>
      When a match is found, the main data file 710 fields are updated as follows:
    </p>
    <p num="266">
      --
      <br/>
      -- AMT              If not entered by the user, this field is updated
      <br/>
      --                  with the amount of the check.
      <br/>
      -- DATE             Todays date is stored in this field.
      <br/>
      -- STATUS           Is set to Received.
      <br/>
      -- CHK_FRNT         The file name of the .f file corresponding to this
      <br/>
      --                  check is stored here.
      <br/>
      -- CHK_BACK         The file name of the .b file corresponding to this
      <br/>
      --                  check is stored here.
    </p>
    <p num="267">
      If .f and .b files are found but cannot be correlated with any "Pending" request, a new record in the main data file is created, the .f and .b file names are entered, and the status is set to "Export".
      <br/>
      This indicates that the check was exported, as opposed to requested, from the host 8.
    </p>
    <p num="268">Finally, once the records 711 in the main data file 710 are updated, the .f and .b files are moved to the images sub-directory 702B.</p>
    <p num="269">
      In addition to occuring when a download is complete, this procedure also occurs when the workstation software is started.
      <br/>
      This permits the .f and .b files delivered on another media, e.g. a CD-ROM, to be copied to the default directory 702A and processed by the workstation software when it is started.
    </p>
    <p num="270">ii. Host 8/Workstation 7 Communication Protocol</p>
    <p num="271">
      To send or retreive data, the customer workstation 7, under the control of the workstation software, communicates with the host system 8 over a communication link 11 (see FIG. 2).
      <br/>
      In one embodiment, the customer workstation uses a modem 10 to establish a communication link 11 with the host system 8.
      <br/>
      Whether the customer workstation 7 connects with the host system 8 to send or retreive data, the host system 8 requires that the user log-in to the host.
      <br/>
      Once a user, via the workstation 7, is logged into the host system 8, the host system 8 provides a menu of choices to the workstation software.
      <br/>
      The workstation software selects send, receive or exit from the menu, and, following a typical communications protocol, delivers or retreives the desired data.
    </p>
    <p num="272">The complexity of the protocol is masked from the workstation 7 user by the workstation software, which only requires minimal interaction from the user.</p>
    <p num="273">
      To establish a communication session with the host system 8, the workstation software causes the modem 10 to dial the modem 604.
      <br/>
      The modem 604 is pre-programmed to answer, whereupon the modems 10, 604 negotiate and establish a connection, as is known in the art.
    </p>
    <p num="274">
      FIG. 28 pictorially shows the protocol between the host 8 and the workstation 7 for uploading the check request file 720, after a connection is established.
      <br/>
      FIG. 29 pictorially shows the protocol between the host 8 and the workstation 7 for downloading .f and .b files after a connection is established.
      <br/>
      Much of the protocol for send and receive is similar, and thus reference will be made to both figures where appropriate.
      <br/>
      Communications time-outs, as known in the art, are used in case of protocol failure.
    </p>
    <p num="275">
      Initially, the host system 8 sends a request for a user-ID to the workstation 7 (3000, 3100).
      <br/>
      Once this message has been received, as described above, the workstation software presents the user with a log-in screen, requiring the user to supply a user-ID and password.
      <br/>
      The workstation 7 then responds to the host 8 by transmitting the user-ID as it was entered on the log-in screen by the user (3005, 3105).
      <br/>
      Upon receiving the user-ID, the host 8 sends a request for a password to the workstation 7 (3010, 3100), which responds with the password as entered by the user (3015, 3115).
    </p>
    <p num="276">
      If the host system 8 is unavailable to send or receive data at the present time, it will respond with a message indicating that fact (not shown).
      <br/>
      The workstation 7 will notify the user that the host 8 is unavailable at this time, and disconnect.
      <br/>
      Otherwise, the host 8 verifies the user-ID and password with a database of user-IDs and passwords stored on the output queue device 601.
      <br/>
      If the user-ID and password are not accepted, the host 8 retransmitts a request for the user-ID to the workstation (3000, 3100).
      <br/>
      Accordingly, the workstation 7 will again obtain a user-ID and password from the user.
      <br/>
      This continues until a valid user-ID and password are received.
      <br/>
      Alternatively, the host system 8 terminates the connection when a prespecified number of invalid user-ID/password combinations are received from the workstation 7.
    </p>
    <p num="277">
      Once the user-ID and password are verified, the host 8 transmits a menu to the workstation 7 (3020, 3120).
      <br/>
      The transmitted menu provides the workstation 7 options to send to, receive from, or exit the host system 8.
    </p>
    <p num="278">
      Now, with reference to FIG. 28 showing the upload specific portions of the protocol (i.e., transmissions between the workstation 7 and the host 8 to forward requests to the host 8), the workstation 7 transmits the menu selection indicating it will send a file (3025).
      <br/>
      The host 8 responds by requesting the name of the file to be transmitted (3030).
      <br/>
      The workstation 7 then transmits the name of the request file 720 it will transmit (3035).
      <br/>
      As discussed above, prior to dialing into the host 8, the workstation 7 assembles the untransmitted requests into a request file 720 to be transmitted to the host 8.
    </p>
    <p num="279">
      Upon receiving the file name, the host 8 transmits a ready signal to the workstation 7 (3040) and a file transfer is initiated, e.g., using the Z-modem protocol, transmitting a copy of the request file 720. Z-modem file transfer is well known and will not be discussed herein.
      <br/>
      Once the workstation determines that the file transfer has been successfully completed, it transmits a signal to the host indicating that it is done (3050) and the host 8 responsively transmits the menu (3055).
      <br/>
      The workstation then responds to the menu by choosing to exit (3060), and terminates the connection, as is known in the art, by instructing the modem to hang up.
    </p>
    <p num="280">
      If the file transfer is successfully completed, the workstation software will appropriately update the status field in the records 711 of the main database 710 from Request to Pending.
      <br/>
      If the transfer is not successfully completed for any reason, the status fields in the records 711 of the main database 710 are not updated.
      <br/>
      The status database 710 will be discussed in more detail below.
    </p>
    <p num="281">
      Now, with reference to FIG. 29 and the image download specific portions of the protocol, the workstation 7 transmits the menu selection indicating it will receive a file (3125).
      <br/>
      The host 8 responds, if there are files awaiting download, by transmitting the number of files to be transmitted and the total size of the transmission, requesting confirmation of the transmission from the workstation 7 (3130).
    </p>
    <p num="282">
      If no files are awaiting download, the host 8 transmits a message indicating this (not shown).
      <br/>
      The workstation 7 responds with an acknowledgement (also not shown), and the host 8 transmits the menu (3170).
      <br/>
      Since no files are available to download, the workstation 7 transmits an exit (3175) and disconnects.
    </p>
    <p num="283">
      Preferably, prior to connecting with the host, and in any event prior to responding to the hosts message (3130) the workstation software determines the space on the local database 702 available to store incoming data.
      <br/>
      Determining the amount of space available on a storage device is well known in the art.
      <br/>
      The workstation software then determines whether the local database 702 has the available capacity to store the host 8 transmission.
      <br/>
      If sufficient storage capacity is available, the workstation software indicates to the user the magnitude of the download, and requests confirmation.
      <br/>
      If sufficient space is unavailable, or if the user chooses to abort the download, the workstation 7 transmits a message indicating it is not ready to accept a download (not shown).
      <br/>
      The host 8, therefore, re-transmits the menu (3170) and the workstation 7 then transmits an exit (3175) and disconnects.
    </p>
    <p num="284">
      If, however, there is sufficient space to store the download, and the user chooses to download data now, the workstation 7 transmits a confirmation of the download to the host 8 (3135).
      <br/>
      Once confirmed, the host 8 sends the names of the front and back of the first check to be transmitted (3140), and the workstation acknowledges receipt by indicating that it is ready (3145).
      <br/>
      A file transfer protocol, e.g., Z-modem, is now used to transport the .f and .b files from the host system 8 to the workstation 7 (3150), where the incoming files are stored in the default directory 702A.
    </p>
    <p num="285">
      The workstation 7 indicates that it has detected completion of the file transfer by sending a message to the host 8 (3155).
      <br/>
      If more files are ready to be transmited, the host 8 transmits a ready message (3160) to which the workstation responds, as above, with a confirmation of the download to the host 8 (3135).
      <br/>
      This is repeated (3135-3160) until all ready files are transmitted.
      <br/>
      When all files are transmitted, instead of the ready message (3160), the host 8 re-transmits the menu (3170).
      <br/>
      The workstation 7 responds with an exit (3175) and disconnects from the host.
      <br/>
      Following disconnect, the records 711 in the main database 710 are updated as described above.
    </p>
    <p num="286">c. The Main Window</p>
    <p num="287">
      As is customary in Windows (tm) , the workstation software runs in a parent window or main window 300 which is generally depicted in FIG. 8.
      <br/>
      The main menu portion of the main window is also shown in FIG. 6.
      <br/>
      As is conventional in Windows (tm) , when selected (or clicked on), each menu option displays a box containing another menu, sometimes called a sub-menu, containing options.
      <br/>
      FIG. 7, for example, shows the sub-menu of the File selection on the main menu.
    </p>
    <p num="288">
      The main window 300, shown in FIG. 8, contains two sub-windows 301 and 302, one for the front and one for the back of the check.
      <br/>
      Each sub-window has its own toolbar 304 containing buttons that can be selected to perform various file and image manipulation functions.
      <br/>
      As will be discussed in more detail below, all the functions available in the toolbar 304 are also available within the parent window 300 menu structure.
      <br/>
      As is the ordinary case in Windows (tm) , only one sub-window can be active at a time.
      <br/>
      A window (main or sub) can be made active in the ordinary ways in which it is done in Windows (tm) , for example, by clicking a mouse pointer anywhere inside the window.
      <br/>
      A window will indicate that it is active by its title bar and border turning to the "active" color, as conventional in Windows (tm) .
    </p>
    <p num="289">The menus are generally organized to reflect the above general order of processing flow.</p>
    <p num="290">A list of each sub-menu option and a short description follows:</p>
    <p num="291">
      File
      <br/>
      Enter Check Request . . . Allows the user to enter data necessary for requesting a check image.
    </p>
    <p num="292">Send Request File . . . Allows the user to transmit check requests created with Enter Check Request to the host system 8.</p>
    <p num="293">Get Images From Chase . . . Allows the user to retrieve check image files corresponding to the transmitted check requests from the host system 8.</p>
    <p num="294">Select/Display Check Image . . . Allows the user to select a check image from all those resident in the user's hard disk and display that image on the screen.</p>
    <p num="295">Print Check Image . . . Causes the front and back of the check image displayed to be printed.</p>
    <p num="296">Exit Exit the workstation software.</p>
    <p num="297">
      Edit
      <br/>
      Copy Copies the check image in the active window to a temporary storage area, e.g., the Windows (tm)  clipboard.
    </p>
    <p num="298">View Image manipulation functions that will only affect the active sub-window.</p>
    <p num="299">
      Enlarge Check Enlarges the image in the window from which it was activated.
      <br/>
      Preferably function key F4 or the "+" key also enlarges the image.
    </p>
    <p num="300">
      Reduce Check Reduces the image in the window from which it was activated.
      <br/>
      Preferably function key F5 or the "-" key also reduces the image.
    </p>
    <p num="301">
      Rotate Image Right Rotates the image 90 (degree)  to the right in the window from which it was activated.
      <br/>
      Preferably function key F6 also rotates the image to the right.
    </p>
    <p num="302">
      Rotate Image Left Rotates the image 90 (degree)  to the left in the window from which it was activated.
      <br/>
      Preferably function key F7 also rotates the image to the left.
    </p>
    <p num="303">
      Invert Image Rotates the image 180 (degree)  in the window from which it was activated.
      <br/>
      Preferably function key F8 also inverts the image.
    </p>
    <p num="304">
      Reverse Video Toggle the image to/from reverse video, i.e., white on black, in the window from which it was activated.
      <br/>
      Preferably function key F9 also produces the same result.
    </p>
    <p num="305">
      Normal Reset, or returns the image to normal, i.e., size, orientation, and video.
      <br/>
      Preferably function key F11 also returns the image to normal.
    </p>
    <p num="306">
      Next Check Using the presently selected sort order, displays the check image of the check following the displayed check.
      <br/>
      Preferably the key combination control-X also displays the next check.
    </p>
    <p num="307">
      Previous Check Using the presently selected sort order, displays the check image of the check preceding the displayed check.
      <br/>
      Preferably the key combination control-P also displays the previous check.
    </p>
    <p num="308">
      Options
      <br/>
      Setup . . . Allows the user to configure workstation software.
    </p>
    <p num="309">Account Maintenance . . . Allows the user to add and delete accounts for which checks can be requested.</p>
    <p num="310">Image File Maintenance . . . Allows user to free disk space by removing image files that are no longer needed/wanted.</p>
    <p num="311">
      Letter
      <br/>
      Select Document . . . Allows user to create a letter containing check images.
    </p>
    <p num="312">Options Permits selection of default mode, view or print, for letter containing check images.</p>
    <p num="313">
      Window
      <br/>
      Cascade Resizes and layers the front and back windows.
    </p>
    <p num="314">Tile Resizes and arranges the front and back windows side by side.</p>
    <p num="315">
      Arrange Icons If sub-windows are "minimized," arranges the icons for the sub-windows within the main window.
      <br/>
      1 Back Makes the back of check window active.
      <br/>
      2 Front Makes the front of check window active.
    </p>
    <p num="316">
      Help As well known, in computer programming, it is conventional to provide a help facility which can provide information to a user in the event the user needs assistance in operating the program.
      <br/>
      In a preferred embodiment, the help option provides the following:
      <br/>
      Contents Invokes a table of contents for the help function.
    </p>
    <p num="317">Search for help On . . . Allows user to search for a topic on which help is desired.</p>
    <p num="318">Using Help allows user to select assistance by topic.</p>
    <p num="319">About Chase Imagestation . . . Display credit screen and version number.</p>
    <p num="320">
      As discussed above, menu and sub-menu options that are currently available are shown in dark type on the menus and sub-menus.
      <br/>
      The inactive options are "greyed" out.
      <br/>
      An inactive option will become active, and it will be displayed in dark type, when appropriate.
    </p>
    <p num="321">d. The Toolbar</p>
    <p num="322">
      As discussed, each display sub-window of FIG. 8 has a toolbar as shown in more detail in FIG. 9.
      <br/>
      Toolbar buttons can be used as another way to perform the same functions that can be performed by selecting the menu and sub-menu selections.
      <br/>
      The toolbar is for the user's convenience; since it is often easier to access a toolbar button than the menus, the toolbar contains many frequently used functions.
      <br/>
      To select a toolbar button, the mouse or other pointing device 701B is placed on that button and the appropriate pointing device button (usually the left mouse button) is clicked.
      <br/>
      In the preferred embodiment, the toolbar buttons are programmed to correspond to sub-menu functions.
      <br/>
      The toolbar buttons may also configurable by the user, permitting the user to select which buttons (and therefore which functions) are available on the toolbar.
      <br/>
      Further, the toolbar buttons may be automatically reconfigured by the workstation software to correspond to the most frequently used functions, and the user vary the number of buttons on the toolbar.
    </p>
    <p num="323">The toolbar buttons and their equivalent menu options are listed below:</p>
    <p num="324">
      --
      <br/>
      -- Reference:              Menu Command
      <br/>
      -- A                       File/Enter Check Request
      <br/>
      -- B                       File/Select/Display Check Image
      <br/>
      -- C                       File/Print Check Image
      <br/>
      -- D                       Edit/Copy
      <br/>
      -- E                       View/Enlarge Check
      <br/>
      -- F                       View/Reduce Check
      <br/>
      -- G                       View/Rotate Image Left
      <br/>
      -- H                       View/Rotate Image Right
      <br/>
      -- I                       View/Invert Image
      <br/>
      -- J                       View/Reverse Video
      <br/>
      -- K                       View/Normal
      <br/>
      -- L                       Help/Contents
    </p>
    <p num="325">
      e.
      <br/>
      Description of Menu and Sub-menu Items
    </p>
    <p num="326">
      The following is a description of selected main menu options and their sub-menu options.
      <br/>
      The order generally follows the structure of the menus shown.
      <br/>
      The menu items not covered in the following description are features that are readily understood from the description above taken in conjunction with standard Windows (tm)  features and the context of the workstation software functions described herein.
    </p>
    <p num="327">i. File</p>
    <p num="328">As mentioned previously, the File sub-menu options are organized to reflect the general order of processing flow, and are shown in FIG. 7.</p>
    <p num="329">These options are described in the following sections.</p>
    <p num="330">(1) File/Enter Check Request</p>
    <p num="331">
      The File/Enter Check Request function allows the user to create the file of check requests to be transmitted to the host system B. Data can be entered in a spread-sheet like screen (FIG. 16).
      <br/>
      The program functions necessary to generate the screen of FIG. 16 are well known to those of skill in the art, and need not be described in detail herein.
      <br/>
      Once data is entered, items can be added, modified, or deleted as desired.
      <br/>
      The data can be printed as a hard copy report.
      <br/>
      Moreover, the requests need not be entered all at once: the user may enter some items, exit this function, and return at a later time to enter more.
      <br/>
      The file will remain available for editing at the workstation 7 until it is transmitted to the host system 8.
    </p>
    <p num="332">
      Once this function is invoked, the user is presented with an empty screen as shown in FIG. 10. The screen shown in FIG. 16 has had some data entered.
      <br/>
      A request is entered by completing the data entry fields 350 at the top of the screen.
      <br/>
      Once completed, the request may be added to the list of checks shown in FIG. 16. A request is completed by entering the account number 352 and check number 354.
      <br/>
      The amount of check 356 and the reference field 360 may optionally be entered.
      <br/>
      Preferably, the service field 358 defaults to Overnight (indicating that requests will be fulfilled the next day) and, thus, need not be modified by the user.
      <br/>
      The active field is indicated, as is customary in Windows (tm) , to distinguish it from the other fields.
      <br/>
      The data entry function will proceed, as is customary in Windows (tm) , from left to right.
      <br/>
      If the user wishes to jump back or forward to a given field, he need only, for example, place the mouse 701B pointer on that field and click the left mouse button (or other pointing device function, as appropriate).
      <br/>
      The data in the field can then be re-typed.
      <br/>
      This simplifies correction of errors before the data is added to the list.
    </p>
    <p num="333">(a) Enter New Check Request</p>
    <p num="334">
      In the preferred embodiment, when entering a check request on the check request screen, unlike the standard Windows (tm)  interface, the &lt;Enter&gt; key acts like the tab key.
      <br/>
      This is provided so as to prevent confusion in users who are not familiar with Windows (tm) . Thus, the enter key moves to the next input field rather than selecting the default button.
    </p>
    <p num="335">To enter a new check request or item to the list, the user does the following:</p>
    <p num="336">
      1.
      <br/>
      Clicks the Clear Entry Fields button 400 to clear the entry fields.
      <br/>
      The label on the button will change to "Add To List".
    </p>
    <p num="337">
      2. One of the valid account numbers will appear in the entry field.
      <br/>
      The account number may be changed by selecting the Account field 352 and changing the account number.
      <br/>
      To change the account number, as is customary in Windows (tm) , the user clicks on the �.dwnarw.� button 402 to the right of the account number entry field.
      <br/>
      A drop down box or window listing the valid account numbers will be displayed.
      <br/>
      The user then chooses the appropriate account number.
      <br/>
      The user can select an account number from the drop down box as is customary in Windows (tm) , e.g. click on the one desired or use the arrow keys to select the desired entry and press &lt;Enter&gt;. The selected account number will appear in the entry field 352 and the cursor will move to the Check Number field 354.
    </p>
    <p num="338">
      3. To complete a request, the user must type the check number in the check number field 354.
      <br/>
      If the user presses the &lt;Enter&gt; key or the tab key, the cursor will move to the Amount field 356.
    </p>
    <p num="339">
      Once the user has entered a check number 354, all the required information for requesting a check image is present on the screen: account number (default), check number, and class of service 358 (which defaults to Overnight).
      <br/>
      At any time that the required information is present, the request can be immediately added to the list by clicking the Add to List control button 400 or pressing a suitable keyboard key, e.g., Alt-A.
    </p>
    <p num="340">
      4. Amount 356 is an optional field.
      <br/>
      If it is entered, the host system 8, according to the preferred embodiment, will use it in its search of the index database 30.
      <br/>
      Consequently, if it is mistyped, the host system 8 will not be able to locate and retrieve that item.
      <br/>
      Therefore, the use of the Amount field 356 should be limited to situations in which, because of check number rollover, there may by multiple checks for a given account number and check number.
      <br/>
      The user enters the amount or skips the amount field as is standard in Windows (tm) . Pressing &lt;Enter&gt; or the tab key will cause the cursor to move to the Reference No. field 360.
    </p>
    <p num="341">
      5. The Reference No. field 360 is a user defined field that accepts alpha-numeric characters.
      <br/>
      Its use is entirely optional.
      <br/>
      It is meant to provide a mechanism to the user for internal tracking of requests and images.
      <br/>
      It has no meaning or significance to the host system 8 other than as a user provided label that will stay with the request throughout its journey and be returned to the user with the image.
      <br/>
      The user may enter a reference number or skip the Reference No. 360 field in the customary way.
    </p>
    <p num="342">
      6. "Overnight" appears by default in the service entry field 358; to accept this choice, the user presses &lt;Enter&gt;. Like the account number field 352, the service entry field 358 has a Windows (tm)  standard drop down box accessed by the button 362.
      <br/>
      The user may access the drop down box to select same day service in the customary way, by pressing the � &lt;-- � 362 button to the right of the service entry field 358 and choosing "Same Day".
    </p>
    <p num="343">
      As indicated above, at any time the request is complete, the user may click on the Add to List control button 400 or press a suitable keyboard button, e.g., Alt-A to, add the request to the list.
      <br/>
      When the service entry field 358 is selected, the user may also press &lt;Enter&gt; to add the request to the list.
      <br/>
      After the request is added to the list, the label on the leftmost control button 400 will change back to "Clear Entry Fields".
    </p>
    <p num="344">
      7. To add more items, the user repeats steps 1-7.
      <br/>
      The user must clear the entry fields by clicking the Clear Entry Fields button 400 (step 1, above) before entering the next item.
      <br/>
      FIG. 16 is an example of the Enter Check Request Screen after entry of four checks.
    </p>
    <p num="345">(b) Modify Item</p>
    <p num="346">To change an item that has already been entered, the user does the following:</p>
    <p num="347">
      1.
      <br/>
      Selects the item to be modified by either clicking the mouse pointer anywhere on the row of the desired item, or using the arrow keys to move the reverse video box to the desired item (again, any field of the desired item will suffice).
      <br/>
      The data for that item will now appear in the data entry fields 350 at the top of the screen.
    </p>
    <p num="348">
      2. Clicks on the data entry field of the particular data to be changed.
      <br/>
      For example, if the check number is wrong, the user clicks on the Check Number data entry field 354, and the field may be edited as is customary in windows.
    </p>
    <p num="349">3. Types the new data in the field using the keyboard 701C and presses the delete key to eliminate any unwanted characters.</p>
    <p num="350">
      4. Clicks the "Update Item" button 463.
      <br/>
      The item in the list has now been changed with the corrected data.
    </p>
    <p num="351">(c) Delete Item</p>
    <p num="352">To delete an item that has already been entered, the user does the following:</p>
    <p num="353">
      1.
      <br/>
      Selects the item to be deleted by either clicking the mouse pointer anywhere on the row of the desired item, or using the arrow keys to move the reverse video field to the desired item (again, any field in the row of the desired item will suffice).
      <br/>
      The data for that item will now appear in the data entry fields 350 at the top of the screen.
    </p>
    <p num="354">
      2. Clicks the Delete 355 button.
      <br/>
      The item has now been deleted from the list.
    </p>
    <p num="355">(d) Sort Buttons</p>
    <p num="356">When the File/Enter Check Request screen first appears, the checks will be displayed in account number/check number sequence, as shown in FIG. 16. By clicking either the Account No./Check No. or Amount sort button 465, the checks may be resorted by the Account number/check number or Check amount.</p>
    <p num="357">As with other control buttons, these sort buttons can be activated by clicking the left mouse button on the desired sort button or by pressing the Alt key and the underlined letter of the desired sort button, e.g., M for Amount sort.</p>
    <p num="358">(e) Report</p>
    <p num="359">
      The invention allows the generation of a hard copy report of the request list.
      <br/>
      To generate a report, the user clicks the Report button 460.
      <br/>
      The workstation software preferably has a built-in report writer that will format and display a report as shown in FIG. 12. As is customary in Windows (tm) , the report may be previewed on the screen before it is printed.
      <br/>
      If the report is larger than the display window, the remaining sections can be brought into view, as is customary, using the horizontal and vertical scroll bars.
      <br/>
      To print the report, the mouse pointer is placed on the button 461 showing a printer icon, and the left mouse button is clicked.
      <br/>
      The remaining button icons shown in FIG. 12 are used as would be customary.
    </p>
    <p num="360">(f) OK Button:</p>
    <p num="361">
      When the user has finished or chooses to stop entering check requests, the OK button 464 (FIG. 16) is clicked.
      <br/>
      Since the check request file will only be transmitted to the host 8 at the user's command (see File/Send Request File, below), more requests can be added to the current request list at a later time.
    </p>
    <p num="362">(2) File/Send Request File</p>
    <p num="363">
      This function allows the user to log into the host system 8 and transmit the request file in its present state.
      <br/>
      Preferably, the connection is made by the workstation software through a dial-up line 11 and a modem 10.
      <br/>
      However, any communication configuration can be used.
      <br/>
      Successful completion of this function requires that the user enter a valid user-ID and password, as described above.
    </p>
    <p num="364">
      This function can be invoked by choosing the File/Send Request File menu option.
      <br/>
      See FIG. 7.
      <br/>
      When this function is invoked the workstation software attempts to detect the modem 10, as is known in the art.
      <br/>
      When the modem 10 is ready, the user will be presented with a prompt window with the following options:
    </p>
    <p num="365">
      --
      <br/>
      --      Continue       Proceed with the request file for
      <br/>
      --                     transmission to the host.
      <br/>
      --      Review         Review the request file before sending it.
      <br/>
      --                     This function will return the user to the
      <br/>
      --                     request file input screen (FIG. 16) in
      <br/>
      --                     which items can be added, modified, or
      <br/>
      --                     deleted.
      <br/>
      When that screen is exited, the
      <br/>
      --                     user will be returned to this window.
      <br/>
      --      Cancel         Abort the transmission and return to the main
      <br/>
      --                     screen depicted in FIG. 8.
    </p>
    <p num="366">
      To continue with the transmission, the user clicks the Continue button.
      <br/>
      A "Dialing. Please Wait . . . " or similar message will be displayed at which time a new request file 720 is constructed and the connection is made to the host 8.
    </p>
    <p num="367">
      The request file 720 is constructed from information contained in the main database 710.
      <br/>
      The request file 720 name is created using the user-ID entered in the Options/Setup screen, which is given a ".SND" extension.
      <br/>
      The request file 720 is an ASCII file having the following format:
    </p>
    <p num="368">
      --
      <br/>
      -- REQUEST FILE LAYOUT
      <br/>
      --      Field          Type      Description
      <br/>
      --      Record Type    Req       "00" - Header Record
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Company ID     Req       Company ID
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Creation Date  Req       File Creation Date (YYMMDD)
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Creation Time  Req       File Creation Time (HHMMSS)
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      -- Request Record
      <br/>
      --      Record Type    Req       "01"
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Level of Service Req       "A": Same Day
      <br/>
      --      Requested                "N": Overnight
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Work Station ID Req       Work Station ID
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      User ID        Req       User ID
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Account number Req       Account number of requested check
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Check Number   Req       Check number of requested check
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Check Amount   Opt       Amount of requested check
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      FAX Number     Opt       FAX number
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      --      Attention Of   Opt       Person to receive FAX
      <br/>
      --      Field Separator Req       ".linevert split."
      <br/>
      -- Trailer Record
      <br/>
      -- Data                Maximum
      <br/>
      -- Element     Type    Size      Description
      <br/>
      -- Record Type Req     2         "99" - Trailer Record
      <br/>
      -- Field       Req     1         ".linevert split."
      <br/>
      -- Separator
      <br/>
      -- Request     Req     7         Number of request records in file
      <br/>
      -- Record
      <br/>
      -- Count
      <br/>
      -- Field       Req     1         ".linevert split."
      <br/>
      -- Separator
      <br/>
      -- Record      Req     7         Total number of records in file
      <br/>
      -- Count                         (including header and trailer)
      <br/>
      -- Field       Req     1         ".linevert split."
      <br/>
      -- Separator
    </p>
    <p num="369">A request record is created in the request file 720 for each request record 711 on the main database which has the "REQUEST" status.</p>
    <p num="370">
      If, upon dialing, a busy signal is encountered, the workstation software instructs the modem 10 to retry the call, i.e., redial.
      <br/>
      The number of retries is displayed for the user, who may, at any time prior to connect, press an Abort button to abort the attempted connection to the host system 8.
    </p>
    <p num="371">
      If the connection is completed, a host log-on window will be displayed as shown in FIG. 13. The user then types his User ID, presses the tab key, types a Password and presses &lt;Enter&gt; or clicks the OK button 500.
      <br/>
      Alternatively, the user may press Cancel, at which time the workstation software instructs the modem 10 to hang up, the connection is dropped, and the user is returned to the main screen (FIG. 8).
      <br/>
      If the user-ID and password are entered, the workstation software transmits them to the host system 8 for verification.
      <br/>
      The host system 8 compares the user-ID and password with the records maintained on the output queue device 601 and, if invalid, sends a reject message back to the workstation 7.
      <br/>
      Responsively, the workstation software displays "Login incorrect, Please try again" or similar message to the user, who may subsequently re-enter the user-ID and password.
    </p>
    <p num="372">Once logged in successfully, with a valid user-ID and password, the workstation software transmits the check request file using the modem file transfer protocol, as is known in the art.</p>
    <p num="373">
      A status window will then appear showing the status of the file during transmission.
      <br/>
      When the request file has been transmitted to the host system 8, a message indicating that the user is exiting the host system 8 will be displayed, and an "UPLOAD REQUEST COMPLETED" or similar message will briefly appear.
      <br/>
      The user will then be returned to the main menu screen (FIG. 8), and the transmission procedure to the host is completed.
    </p>
    <p num="374">(3) File/Get Images From Chase (host system 8)</p>
    <p num="375">
      This function allows the user to download the retrieved images that it requested from the host 8 to the local workstation 7.
      <br/>
      This function proceeds in a very similar manner to the File/Send Request File transmission described above.
      <br/>
      The connection is made through a dial up line 11 and a modem 10, or other suitable communication connection.
      <br/>
      The function requires the user to enter a valid User-ID and Password.
    </p>
    <p num="376">
      Similar to the File/Send Request File function, a "Dialing.
      <br/>
      Please Wait . . . " or similar message will be displayed while the connection is made to the host.
      <br/>
      The workstation now determines the amount of storage space available for the storage of downloaded check images.
      <br/>
      The connection may take upwards of 20 seconds to establish during which time a static-like sound may be heard from the modem 10.
      <br/>
      When the connection is made, a log-on is required, as discussed above for File/Send Request File (see FIG. 13).
      <br/>
      If no checks have yet been retrieved from the archive, the host system transmits a message to inform the workstation that no checks are ready to download, and the workstation software displays a "NO CHECKS READY TO DOWNLOAD" message.
      <br/>
      The download operation may be tried at a later time.
      <br/>
      If any checks have been retrieved and they are ready to download, the host system 8 calculates and transmits to the workstation 7 the check image files (.f and .b) ready to be transmitted.
      <br/>
      If this is greater than the amount of storage space available for storage of downloaded images, the workstation displays a message, indicating this to the user, and requiring the user to select an OK button.
      <br/>
      When the user selects OK, the workstation software proceeds directly to the Options/Image File Maintenance function.
      <br/>
      If, however, there is sufficient space, a message box describing the size of the download in kilobytes and number of checks as shown in FIG. 15 will appear.
    </p>
    <p num="377">
      The window of FIG. 15 is presented to the user so that the user may decide to abort (No) the transmission to the workstation 7.
      <br/>
      If the user chooses the No button, the download is terminated, a "DOWNLOAD CANCELLED BY OPERATOR" message is displayed, and the workstation software disconnects from the host system 8 and returns to the main menu.
    </p>
    <p num="378">
      If the user chooses the Yes button 532, the download is initiated.
      <br/>
      A status window will appear showing the status of each check file during transmission.
      <br/>
      When all the files have been transmitted, a message indicating that the workstation software is exiting (logging off) the host system 8 will be displayed.
      <br/>
      When the log off is completed, a "DOWNLOAD COMPLETED" or similar message will briefly appear, followed by an "UPDATING LOCAL DATABASE" message, while the data on the local storage device 702 is updated.
      <br/>
      The user will then be returned to the main menu screen, and the procedure is complete.
    </p>
    <p num="379">(4) Select/Display Check Image--Print Check Image</p>
    <p num="380">
      These functions allow the user to select a check image from those resident on the local storage device 702 and display that image on the display 701A of the workstation 7, and optionally, to print the image on the printer 703.
      <br/>
      The display checks function is invoked by choosing the File/Select/Display Check Images menu option.
      <br/>
      The Select/Display Check Images Screen is shown in FIG. 11.
    </p>
    <p num="381">
      For each request that has been transmitted to the host computer 8, this screen will list, in a scroll window, information pertaining to that request.
      <br/>
      If there are more checks than will fit within the window, the additional items may be brought into view by using the scroll bar at the right of the window.
      <br/>
      Likewise, the hidden columns to the right of the window may be brought into view with the bottom scroll bar.
      <br/>
      For each check request transmitted to the host computer 8, the scroll window will display the following fields:
    </p>
    <p num="382">
      --
      <br/>
      --      Account No.        Self-explanatory
      <br/>
      --      Check No.          Self-explanatory
      <br/>
      --      Amount             Self-explanatory
      <br/>
      --      User Reference No. User defined field, for user
      <br/>
      --                         internal tracking
      <br/>
      --      Status             "Received": Requested Check image
      <br/>
      --                         has been downloaded from host.
      <br/>
      --                         "Not Found": Host unable to locate
      <br/>
      --                         requested image.
      <br/>
      --                         "Pending": Request sent to host,
      <br/>
      --                         but image not downloaded yet.
      <br/>
      --                         "EXPORTED": Check image downloaded
      <br/>
      --                         from host without request. (e.g.
      <br/>
      --                         Bulk Download)
      <br/>
      --      Requested          Date the requested item was sent to
      <br/>
      --                         host
      <br/>
      --      Received           Date the retrieved image was
      <br/>
      --                         downloaded from host
      <br/>
      --      Service            Level of service selected by the
      <br/>
      --                         user: "Overnight" or "Same Day"
    </p>
    <p num="383">(a) Sort Buttons</p>
    <p num="384">When the File/Select/Display Check Images screen first appears, the checks will be displayed in account number/check number sequence, as shown in FIG. 11. Using the sort buttons 450 at the top of the list, the checks may be re-sorted by Date (descending), Account number/check number, Check amount, User reference number, Status, or Date images were received from the host (ascending).</p>
    <p num="385">As with other control buttons, these sort buttons can be activated either using the mouse 701B by clicking the left mouse button on the desired sort button or by pressing Alt and the underlined letter of the desired sort button on the keyboard 701C.</p>
    <p num="386">The sort buttons only affect the order in which the checks and requests are displayed; the data stored on the local storage device 702 remains unaffected.</p>
    <p num="387">(b) Selecting A Check</p>
    <p num="388">To select a check, the user can use any of the customary Windows (tm)  selection features, including: pointing to any field in the row of the desired checks and using the pointing device 701B, e.g., the mouse, double-clicking the left mouse button; pointing to the field in the row of the desired checks and single clicking the left mouse button, followed by the selected item turning reverse video at which point the "Enter" key is pressed; or using the arrow keys on the keyboard 701C to move the reverse video to the row of the desired checks followed by pressing the "Enter" key.</p>
    <p num="389">
      The front and back of the check will then appear in the display windows, as shown in FIG. 17. The following parameters are defined for the front and back check images: height, width, horizontal and vertical resolution, and horizontal and vertical scroll bars.
      <br/>
      The front of the check is displayed horizontally so that the full image appears in the window.
      <br/>
      The back of the check is positioned vertically and enlarged so the endorsement area is clearly visible.
      <br/>
      Associated with each front and back check image are the image height, width, horizontal and vertical resolution and horizontal and vertical scroll bars.
      <br/>
      The entire front of the check is displayed horizontally, to permit the user to review the information thereupon easily, utilizing the maximum width of the sub-window for the front image.
      <br/>
      Preferably, only a portion of the back image is displayed.
      <br/>
      Specifically, the back image is rotated to cause the writing in the endorsement area to be readable normally to the user.
      <br/>
      The back image is enlarged to occupy, essentially the entire sub-window's width, thus, making the lower portion of the check image, which usually contains less important information, not initially present on the screen (see FIG. 17).
      <br/>
      With this check oriented display in mind, it can be seen that the position and size of the check sub-windows can be oriented in a number of useful ways.
      <br/>
      For example, the front image sub-window could be initially oriented to use the entire width of the main window with an aspect ratio similar to that of the check.
      <br/>
      The back image sub-window could be initially oriented therebelow, having an aspect ratio approximating that of the endorsement area.
      <br/>
      In the preferred embodiment, the sub-windows are resizable and the images are scalable, thus allowing great flexibility in the review of check images.
      <br/>
      Portions of the check image not appearing in the image sub-windows can be viewed by scrolling or panning the image within the window.
      <br/>
      The means for accomplishing these functions are known to those of skill in the art.
    </p>
    <p num="390">ii. Edit</p>
    <p num="391">(1) Edit/Copy</p>
    <p num="392">
      The Edit/Copy function allows the user to copy the check image in the active window to a temporary storage area, e.g., the Windowsn (tm)  Clipboard.
      <br/>
      The Windows (tm)  clipboard is a utility application that acts as a temporary storage area permitting data transfer e.g. from one application to another.
      <br/>
      In the system according to the inventions, it is preferably supported by the workstation software to allow users to incorporate check images into other applications, particularly other Windows (tm)  based applications.
      <br/>
      As discussed above, this function can also be accomplished using toolbar button D (see FIG. 9).
    </p>
    <p num="393">iii. View</p>
    <p num="394">
      Once a check is displayed on the screen using, for example, the File/Select/Display function discussed above, the View function provides the ability to manipulate the displayed check images on the screen.
      <br/>
      The front and back check images may individually be enlarged, reduced, and rotated.
      <br/>
      The functions available under View are also available through the function keys, and the toolbars at the top of each display window.
    </p>
    <p num="395">
      In addition to the View sub-menu being available by selecting View from the top level menu, the same menu can be invoked as a pop-up window by clicking the right mouse button of the pointing device 701B anywhere within the check image sub-window.
      <br/>
      The View options are shown in FIG. 18.
    </p>
    <p num="396">The image view options are described below:</p>
    <p num="397">
      Enlarge Check: This function enlarges the image in the active window.
      <br/>
      This operates the same as toolbar button E �(+)� (FIG. 9).
      <br/>
      Preferrably, function key F4 or the "+" key also enlarges the image.
      <br/>
      In a preferred embodiment, the image can also be enlarged using a graphical interface, for example, by dragging a pointing device (moving the pointing device 701B with the right button depressed) across a region of an image (see FIG. 19), whereupon that region is enlarged to fill the window.
      <br/>
      Preferably, where the aspect ratio of the region is not the same as the image sub-window, the region is enlarged so that it is the maximum size that will fit entirely within the image window.
      <br/>
      Programs for performing zoom type functions such as enlargement and reduction of graphical information, such as check images, are known in the art, and need not be discussed in detail herein.
    </p>
    <p num="398">
      Reduce Check: This function reduces the image in the active window.
      <br/>
      This operates the same as toolbar button F �(-)� (FIG. 9).
      <br/>
      Preferably function key F5 or the "-" key also reduces the image.
    </p>
    <p num="399">
      Rotate Image Right: This function rotates the image 90 (degree)  to the right in the active window.
      <br/>
      This operates the same as toolbar button H � --&gt; �. Preferably function key F6 also rotates the image to the right.
      <br/>
      As with zoom functions, procedures for performing rotation of graphical images are well known and need not be duscussed in detail herein.
    </p>
    <p num="400">
      Rotate Image Left: This function rotates the image 90 (degree)  to the left in the active window.
      <br/>
      This operates the same as toolbar button G �.intg.�. Preferably function key F7 also rotates the image to the left.
    </p>
    <p num="401">
      Invert Image: This function rotates the image 180 (degree)  in the active window.
      <br/>
      This operates the same as toolbar button I. Preferably function key F8 also inverts the image.
      <br/>
      This is shown in the front of Check Window in FIG. 19.
    </p>
    <p num="402">
      Reverse Video: This function toggles the image to/from reverse video, i.e., white on black, in the active window.
      <br/>
      This operates the same as toolbar button J. Preferably function key F9 also produces the same result.
    </p>
    <p num="403">
      Normal: This function returns the image to normal, i.e., size, orientation, and video.
      <br/>
      This operates the same as toolbar button K. Preferably function key F11 also returns the image to normal.
    </p>
    <p num="404">Next Check: Using the presently selected sort order, this function displays the check image of the check following the displayed check.</p>
    <p num="405">Previous Check: Using the presently selected sort order, this function displays the check image of the check preceding the displayed check.</p>
    <p num="406">iv. Options</p>
    <p num="407">
      The Options menu is shown in FIG. 20. According to the preferred embodiment the Options menu provides functions to setup and configure the workstation software.
      <br/>
      It also provides facilities for the ongoing maintenance of the information stored on the local storage device 702.
    </p>
    <p num="408">(a) Setup</p>
    <p num="409">
      The Options/Setup parameters shown in FIG. 21 are entered during the workstation software installation process.
      <br/>
      These parameters generally need not be changed once they are installed.
      <br/>
      In the preferred embodiment, the parameters may be stored on the local storage device 702, for example, in the "WIN.INI" file or in another file used specifically for this purpose the workstation software.
    </p>
    <p num="410">
      The setup options are as follows:
      <br/>
      Company ID: The company ID is configured on the host system 8 to identify a company accessing it.
      <br/>
      The company ID must be correctly set in the workstation software to identify the workstation 7 properly when it communicates with the host system 8.
      <br/>
      This is set at installation time, and generally requires no user modification.
    </p>
    <p num="411">
      Workstation ID: The workstation ID is configured on the host system 8 to identify the customer workstation 7 accessing it.
      <br/>
      The workstation ID must be correctly set to a the proper ID in the workstation software so that the host system 8 may properly identify the customer workstation 7 during communication therebetween.
      <br/>
      This is set at installation time, and generally requires no user modification.
    </p>
    <p num="412">User ID: The user ID entered in Setup is used as a name for the request file 720 when it is transmitted to the host system 8.</p>
    <p num="413">
      Host Archive Phone Number: This is the phone number that Workstation will dial to communicate with the host system 8.
      <br/>
      The phone number is entered, as is well known in the art, e.g., in a Hayes command type format (not including the instruction prefix e.g., ATD or ATDT), using commas to indicate a pause in dialing.
      <br/>
      This is set at installation time, and generally requires no user modification.
    </p>
    <p num="414">
      Word Processor: Specifies the word processor to be used (if any) for automatic integration of images into pre-defined documents.
      <br/>
      Preferably, the word processor is specified by its full path and file name.
      <br/>
      This is an optional feature which can be setup at installation time.
      <br/>
      If the location of the word processor is changed on the local storage device 702, or if the user desires to specify a new word processor for use with the workstation software, this entry will be modified.
    </p>
    <p num="415">
      Installation and Document Directory: This is the path/directory where the workstation software is installed and pre-defined documents are stored.
      <br/>
      This is set at installation time, and generally requires no user intervention.
    </p>
    <p num="416">
      No. of Days to Retain Image File: Set by user to set the number of days to retain an image before it appears on the deletion list displayed in Options/Image File Maintenance, as discussed below.
      <br/>
      Preferably, this value can be changed by the user at any time, as desired.
      <br/>
      As is customary in Windows (tm) , the pointing device 701B button may be clicked on the adjoining up or down arrow to increase or decrease the number respectively.
      <br/>
      In a preferred embodiment, the value must be set to between 1 and 31 days.
    </p>
    <p num="417">
      Default State: Sets the default state that will appear in the data input screen for the header information of pre-defined letters which will incorporate check images.
      <br/>
      This is set by the installer to an initial default state.
      <br/>
      This value can be changed by the user whenever desired.
      <br/>
      To choose or change the state, as is customary in Windows (tm) , the drop box, accessed by clicking on the down arrow to the right of the field, for example, may be used, thus permitting the user to scroll to and select the desired state.
    </p>
    <p num="418">As is customary in Windows (tm) , to exit this screen, using the pointing device 701B, the user either clicks on the OK button to save any changes made to the data, or clicks the Cancel button to exit without saving the changes.</p>
    <p num="419">(b) Account Maintenance</p>
    <p num="420">
      This function allows the user to define account numbers which may be used for check requests.
      <br/>
      These account numbers are accessed from the drop box for the Account Number field (see FIG. 16) during the File/Enter Check Request function and must be pre-defined (e.g., prior to use on that screen).
      <br/>
      In another embodiment, the Account Number field (FIG. 16) could accept new account numbers, and simply add them to the list of account numbers, thus only requiring this operation, Options/Account Maintenance, for deletion of account numbers from the list.
    </p>
    <p num="421">
      Account numbers may be added at the time the workstation software is installed.
      <br/>
      Account numbers may be added or deleted at any time, for example, when a new account is opened with the bank.
      <br/>
      In the preferred embodiment, the Account Maintenance screen is a dialog box as shown in FIG. 22.
    </p>
    <p num="422">
      To add an account, the user performs the following:
      <br/>
      1.
      <br/>
      Clicks on the Clear Field button;
      <br/>
      2.
      <br/>
      Enters the account number, whereupon, the Clear Field button changes to an Add to List button; and
      <br/>
      3.
      <br/>
      Clicks on the Add to List button.
    </p>
    <p num="423">The process (1-3 above) may be repeated to add another account.</p>
    <p num="424">
      To delete an account, the user performs the following:
      <br/>
      1.
      <br/>
      Selects the account to be deleted, which may be done by typing the account number or selecting it from a drop down box containing all of the presently existing account numbers;
      <br/>
      2.
      <br/>
      Clicks on the Delete button.
    </p>
    <p num="425">The process (1-2 above) may be repeated to delete additional accounts.</p>
    <p num="426">
      To exit, the Cancel button is clicked using the pointing device 701B.
      <br/>
      The Cancel button does not cancel the user's activities of adding or deleting accounts.
      <br/>
      Instead, it permits the user to "cancel" making more changes and exit the account maintenance screen.
    </p>
    <p num="427">(c) Image File Maintenance</p>
    <p num="428">
      When invoked, the Options/Image File Maintenance function lists all checks on the user's system older than a specific number of days on the maintenance screen (FIG. 23).
      <br/>
      The specific number of days is the Number of Days to Retain an Image (see FIG. 21) which may be set by the user using Options/Setup, as discussed above.
      <br/>
      The user may delete the .f and .b files, and any database references thereto for any, all, or none of the items on this list.
      <br/>
      The function is provided to permit the user to dispose of unneeded check images that are stored on the local storage device 702, thus allowing the user to prevent the local storage device 702 from running out of storage space.
      <br/>
      In another embodiment of the customer workstation 7, the .f and .b files could be deleted automatically when they reach a certain age.
    </p>
    <p num="429">
      When the maintenance screen is invoked (Options/Image File Maintenance) OK (which exits the maintenance screen) is the default button.
      <br/>
      Thus, if &lt;Enter&gt; is pressed, the function will be exited.
      <br/>
      Clicking on the sort buttons (or pressing e.g., Alt-M for Amount) will immediately cause the list to be resorted.
      <br/>
      The OK button remains the default; so if &lt;Enter&gt; is pressed after a sort, the function will again be exited.
      <br/>
      This is designed to minimize the possibility of inadvertent deletion of images.
    </p>
    <p num="430">
      Data relating to any single check, or the entire list of checks, may be deleted.
      <br/>
      Note that the data relating to a check comprises the f and .b files and information stored on the local storage device 702 associated therewith.
      <br/>
      The .f and .b files cannot be deleted individually.
      <br/>
      In the example shown in FIG. 23, checks are listed that are older than 31 days.
      <br/>
      To delete the entire list at once, the user can click the Delete All button.
      <br/>
      To delete data relating to only a single check, the user selects the data relating to that check by clicking once on any field in the row for that: check.
      <br/>
      The selected field will turn reverse video.
      <br/>
      The user may then click on the Delete button, to effect deletion.
      <br/>
      Prior to actual deletion, a confirmation message is displayed, requiring the user to confirm or cancel the deletion.
      <br/>
      Again, this is designed to minimize the possibility of inadvertent image deletion.
    </p>
    <p num="431">When the user clicks on the OK button, the workstation software exits the Options/Image File Maintenance function and returns to the previously displayed screen.</p>
    <p num="432">v. Letter</p>
    <p num="433">
      Turning to FIG. 14, the Letter menu allows the user to select options which will insert the front and back of the check image into a pre-defined word processing template.
      <br/>
      In the preferred embodiment, Microsoft Word (tm)  was chosen as the word processor.
      <br/>
      Any other suitable word processing function can be employed.
      <br/>
      As one of skill in the art will easily recognize, this feature may be implemented in Windows (tm)  by taking advantage of the various operating environment tools designed to permit application programs to share information, such as DDE (dynamic data exchange) or OLE (object linking and embedding).
      <br/>
      Of course, this feature can be implemented without the use of these specific operating environment tools.
    </p>
    <p num="434">(a) Select Document</p>
    <p num="435">
      Choosing Letter/Select Document permits the user to create a pre-formatted letter incorporating the front and back images of a selected check.
      <br/>
      This option will initially present the user with the customer information screen (FIG. 24).
      <br/>
      Choosing the OK button from this screen will cause the workstation software to invoke the designated word processor, and proceed to create a letter within that word processor, and optionally print that letter.
      <br/>
      Choosing the Cancel button will return the user to the previous screen.
    </p>
    <p num="436">
      The customer information screen (FIG. 24) permits the user to enter information which will be merged into the letter.
      <br/>
      The information to be entered includes form of address, First Name, Last Name, Street Address (two lines), City, State, Zip Code, etc., as can be seen in FIG. 24. The entry of this data is accomplished as is normal in Windows (tm) . The entered information will be inserted into the header of a pre-defined letter (to be selected in the next step).
    </p>
    <p num="437">
      If the operator chooses the Cancel button from the customer information screen, the operation is aborted, and the user is returned to the previous screen.
      <br/>
      When the data is entered as desired, however, the user may press the &lt;Enter&gt; key or click the OK button to continue.
      <br/>
      In the preferred embodiment, the workstation software displays a dialog box, for example, similar to the one shown in FIG. 26, from which the user may select the document or template containing the pre-formatted letter.
    </p>
    <p num="438">
      In the example of FIG. 26, there is one document stored in the default directory 702A (C:.backslash.MGSTAT in FIG. 26).
      <br/>
      By default, the documents in default directory 702A (as selected as the Installation and Document Directory in the Options/Setup function) will be displayed.
      <br/>
      For ease of use, pre-defined documents are stored in the default directory 702A.
      <br/>
      The user may select the document as is customary in Windows (tm) . If the user chooses Cancel, the workstation software may return to the customer information screen (FIG. 24) or in another embodiment, to the main screen (FIG. 8).
    </p>
    <p num="439">
      Once a template is selected, the workstation software will cause the word processing software to be invoked, loading the selected document into the word processor, and inserting the header information (FIG. 24) and front and back check images into it (FIG. 25).
      <br/>
      If the View option is selected (described below), the document can then be edited and printed as any other word processed document.
      <br/>
      If the Print option is selected (also described below), the document is printed prior to being editable in the word processor.
      <br/>
      Finally, the user may exit the word processor in the customary way, and, as will be understood by one of skill in the art, the user must take care not to save the letter under its pre-defined name.
      <br/>
      If the operator desires to save the just created letter, it can be saved under another name, as the operating environment and word processor permit, for example by using the File/Save As function in Word to give it a new name.
    </p>
    <p num="440">
      The document, once opened, may be given a unique name, thus preventing the unintentional overwriting of the template document.
      <br/>
      Alternatively, the document will be opened as an unnamed document, and the template document imported, again preventing the unintentional overwriting of the template document.
      <br/>
      The template document can also be protected from being overwritten by a write-protect, such as setting the document to "read-only" mode within the operating environment.
    </p>
    <p num="441">
      In creating the document in the preferred embodiment, the customer information screen data is placed in a Word (tm)  document utilizing a Words function known as bookmarks, wherein each field of information in the customer information screen corresponds to a particular "bookmark" that has been inserted into the pre-defined document/letter.
      <br/>
      Although reference may be had to one of the many books which discuss the use of "bookmarks" in Word (tm) , creating the pre-defined letters with the appropriately placed bookmarks is briefly discussed in a later section.
      <br/>
      Alternatively, a word processor merge function can be used to merge the information with a pre-defined document/letter.
    </p>
    <p num="442">
      When the just created document is displayed, both the workstation software and the word processor will be open at the same time.
      <br/>
      The user can toggle back and forth between the two applications in any of the ways that are customary in Windows (tm) , for example, by pressing and holding the Alt key and repeatedly pressing the Tab key.
      <br/>
      Each time the Tab key is pressed a small window will appear on the screen with the name of an open application, e.g., the word processor or the workstation software.
      <br/>
      If the user releases the Alt key at the point where the desired name of the desired application appears in the small window, that application will become the active one and it will be displayed on the screen.
    </p>
    <p num="443">
      Further, to return to the workstation software the user may exit Word (tm) , which, as is customary, Windows (tm)  will cause the workstation software to become the active application.
      <br/>
      For reasons that are understood by one skilled in the art, this method may be advisable from a procedural point of view.
    </p>
    <p num="444">(b) Options</p>
    <p num="445">
      Choosing Letter/Options permits the user to select either a Print or View option or mode.
      <br/>
      The Print and View options affect the behavior of the word processor which is used to edit and print the letter.
      <br/>
      The Print or View option, once set, will remain in effect for all letters until changed by the user.
    </p>
    <p num="446">
      If the View option is selected, when the document is created in the word processor, the letter is displayed in an active window of the word processor.
      <br/>
      The letter can then be manipulated and/or printed as any other document in the word processor.
    </p>
    <p num="447">
      It the Print option is selected, after creating the letter in the word processor, the workstation software causes the word processor to print the letter on the printer, and subsequently, to exit, returning to the workstation software.
      <br/>
      In another embodiment, when the Print option is selected, after creating the letter in the word processor, the workstation software could cause the letter to be printed, but not terminate the word processor.
      <br/>
      The post-printing active window could be either the word processor or the workstation software.
    </p>
    <p num="448">f. Creating A Pre-formatted Letter</p>
    <p num="449">
      This section relates to creating a pre-formatted form letter.
      <br/>
      Many methods of creating merged output of data from two separate sources are well known in the art.
      <br/>
      These methods include, but are not limited to: bookmarks, as discussed herein; a merge, also known as a mail merge, wherein data in named fields is merged into a document containing references to those fields; an application program which formats a letter, reading text from two or more pre-existing files; or the sequential entry of data items at markers in a stream of data.
    </p>
    <p num="450">
      For clarity and brevity, creating a pre-formatted letter is discussed herein with reference to the preferred embodiment.
      <br/>
      The functions discussed in this section are those of the Microsoft Word (tm)  word processor, not the workstation software.
    </p>
    <p num="451">
      To create a pre-formatted letter, a normal document must be created in Word (tm) . To position the data from the input screen and the check image itself, the following bookmarks (spelled exactly as shown below) should be inserted in the desired locations:
      <br/>
      Addressee
      <br/>
      Company
      <br/>
      StreetAddress
      <br/>
      CityStateZip
      <br/>
      Salutation
      <br/>
      Front_Of_Check
      <br/>
      Back_Of_Check
    </p>
    <p num="452">For example, the positions of the bookmarks in a sample letter template are shown in FIG. 30.</p>
    <p num="453">The template is then saved in the directory specified in the Installation and Document Directory specified in the Options/Setup screen.</p>
    <p num="454">
      As can be seen by one of ordinary skill in the art, the names of the bookmarks are dictated by those "expected" by the workstation software.
      <br/>
      In another embodiment, the workstation software could permit the operator to determine the names.
      <br/>
      In another embodiment, the data could be inserted into a document at specified marks, like bookmarks, that are not unique, but instead, are sequence dependent.
      <br/>
      In yet another embodiment, as can be seen by one of skill in the art, the workstation software could create, print and permit editing of the form letter without the use of an auxiliary word processor such as Word (tm) .
    </p>
    <p num="455">g. Requesting Check Images</p>
    <p num="456">
      The following is a general overview of how to use the customer workstation 7 to request one or more check images.
      <br/>
      Reference is made to the functions described above.
    </p>
    <p num="457">
      At any time the user is at the main menu of the workstation software, the user may choose File/Enter Check Request, as shown in FIG. 7.
      <br/>
      Thereafter, the user is presented with a screen which permits entry of a request for one or more check images.
      <br/>
      An empty screen for the requests is shown in FIG. 10. If the user has previously stored, but not transmitted, a list of requests, these will appear in the window, these may be modified, and new requests may be entered.
      <br/>
      The list of requests may be printed, reviewed, and edited as desired.
      <br/>
      When the user enters a request, eg. clicks "ADD TO LIST" button, in the File/Enter Check Request function, the individual request is stored in a request file.
    </p>
    <p num="458">
      When the user is satisfied with the requests and desires to transmit the image request file to the host, the menu option: File/Send Request File may be selected.
      <br/>
      The workstation software then establishes a communication link with the host system 8, and as above, permits the user to log-in.
      <br/>
      Once the user is logged-in the workstation software transmits the image request file to the host system 8.
    </p>
    <p num="459">The host system 8 receives and queues the request file on the output queue device 601 for later processing, and once the host system 8 has processed the requests (discussed above), the images are queued on the output queue device 601 for on-demand return to the customer workstation 7.</p>
    <p num="460">h. Download Requested Images</p>
    <p num="461">
      Some time after a request has been transmitted to the host system 8, the user may select File/Get Images (see FIG. 7), which causes the workstation software to again establish a communications link with, and requires that the user log-in to the host system 8.
      <br/>
      If images have been queued on the output queue device 601 these images are downloaded.
      <br/>
      Requested images will generally be available for downloading later in the day for `Same Day Requests`, or the following morning for `Next Day Requests`. The time required to fulfill requests varies with the processing load of the host system 8.
      <br/>
      At off peak times, requested images may be ready for download in just a few minutes or less.
    </p>
    <p num="462">
      For each requested check, one .f file one a .b file is returned.
      <br/>
      The downloaded .f and .b files are stored on the local storage device 702 of the customer workstation 7.
      <br/>
      The .f and .b files, as discussed above, are named with unique sequence numbers and each contains TIFF images of one side of the check and other data stored within the TIFF files as tag fields.
    </p>
    <p num="463">
      Each pair of files, i.e. .f and .b files of a given name, are associated with a single request.
      <br/>
      The non-image tag fields are used to associate the .f and .b files with their associated request.
      <br/>
      This can be done either at the time the files are received from the host system 8 or at the time a user requests to view the results of request.
      <br/>
      Further, an association database can be created, at download or another time, which contains the information required to associate the .f and .b files with the requests.
      <br/>
      Such an association database may be indexed on the account and check number, and reference the file name of the .b and .f files.
      <br/>
      Thus, when a request is made to view a check, the account and check number can be used to search this database to determine the file name of the .f and .b files associated therewith.
    </p>
    <p num="464">i. View or Print Check Images</p>
    <p num="465">
      After the images have been downloaded, they reside on the local storage device 702.
      <br/>
      The user may select an image for display, File/Select/Display Check Image or printing, File/Print Check Image, as desired.
      <br/>
      A viewed file can be manipulated using the functions available in the View menu.
    </p>
    <p num="466">In addition, the workstation software preferably allows the user to select a previously created Microsoft Word (tm)  (or other suitable word processor) document as a template, and incorporate the image of the front and back of the check directly into the text of the document.</p>
    <p num="467">
      Although the present invention has been described in relation to particular embodiments thereof, many other variations and modifications and other uses are and will become apparent to those skilled in the art.
      <br/>
      Therefore, the present invention should be limited not by the specific disclosure herein, but only by the appended claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for storing and retrieving images of documents comprising:</claim-text>
      <claim-text>placing a plurality of documents in a document imaging machine and forming an electronic image of each document; storing each electronic image in an electronic storage device; providing at least one user interface device in communication on a communication link with said electronic storage device; placing a request for at least one document image on said user interface device; transmitting said request by said communication link to said electronic storage device; searching said electronic storage device for the requested electronic image of the document; retrieving said at least one electronic image or providing an indication that said image was not found; storing said electronic image, if found, in an electronic file, for transmission to said user interface device at user option; providing the electronic image to said user interface device at command of a user at the user interface device for storage at the user interface device; displaying the requested electronic image on a display of the user interface device; wherein the documents comprise checks each having a magnetic ink code line thereon, and further comprising electronically reading and decoding said magnetic ink code line to form decoded magnetic ink coded data and wherein said step of storing comprises merging said electronic image and said decoded magnetic ink coded data into a tagged image file format (TIFF) file, with the decoded magnetic ink coded data stored in a tag field in the TIFF file, each check being associated with a TIFF file, and storing the TIFF file in the electronic storage device; checking for errors in said decoded magnetic ink coded data; correcting the decoded magnetic ink coded data comprising: determining if the decoded data requires correction; assigning a specified character to characters requiring correction in the decoded data; displaying the uncorrected decoded data on a display device with the specified character replacing characters requiring correction; entering data to replace the specified characters; replacing the specified characters with the entered data; checking if the number of characters in the data entered is equal to the number of specified characters and if so replacing only the specified characters with the entered data; if the number of characters in the data entered is less than the number of specified characters, replacing all the decoded data with the entered data;</claim-text>
      <claim-text>and if the number of characters in the entered data is greater than the decoded data, generating a warning message to confirm that the entered data is longer than the decoded data prior to replacing the decoded data with the entered data.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. Apparatus for storing and retrieving images of documents comprising: a document imaging machine for receiving a plurality of documents and forming an electronic image of each document; an electronic storage device for storing each electronic image; a user interface device in communication on a communication link with said electronic storage device; the user interface device having an input device for placing a request for at least one document image and for transmitting the request on the communication link to the electronic storage device; a computer for searching said electronic storage device for the requested electronic image of the document and for retrieving said at least one electronic image or providing an indication that said image was not found; an electronic file for storing said electronic image, if found, for transmission to said user interface device at user option; the computer adapted to provide the electronic image to said user interface device at command of a user at the user interface device for storage at the user interface device; a display for displaying the requested electronic image at the user interface device; wherein the documents comprise checks each having a magnetic ink code line thereon, and further comprising a magnetic ink code reader for decoding said magnetic ink code line to form decoded magnetic ink coded data, and further comprising a memory comprising a tagged image file format (TIFF) file having said electronic image merged with the decoded magnetic ink coded data, with the decoded magnetic ink coded data stored in a tag field in the TIFF file, each check being associated with a TIFF file, the TIFF file being stored in the electronic storage device; a computer for checking said decoded magnetic ink coded data for errors; means for correcting the decoded magnetic ink coded data comprising: means for determining if the decoded data requires correction; means for assigning a specified character to characters requiring correction in the decoded data; a display for displaying the uncorrected decoded data with the specified character replacing characters requiring correction; an input device for entering data to replace the specified characters; means for replacing the specified characters with the entered data; means for: checking if the number of characters in the data entered is equal to the number of specified characters and if so replacing only the specified characters with the entered data; if the number of characters in the data entered is less than the number of specified characters, replacing all the decoded data with the entered data;</claim-text>
      <claim-text>and if the number of characters in the entered data is greater than the decoded data, generating a warning message to confirm that the entered data is longer than the decoded data prior to replacing the decoded data with the entered data.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. Apparatus for storing and retrieving images of documents comprising: a document imaging machine receiving a plurality of documents for forming an electronic image of each document; an electronic storage device for storing each electronic image; a user interface device in communication on a communication link with said electronic storage device; means for placing a request for at least one document image on said user interface device; means for transmitting said request over said communication link to said electronic storage device; means for searching said electronic storage device for the requested electronic image of the document; means for retrieving said at least one electronic image or providing an indication that said image was not found; means for storing said electronic image, if found, in an electronic file, for transmission to said user interface device at user option; means for providing the electronic image to said user interface device at command of a user at the user interface device for storage at the user interface device; a display for displaying the requested electronic image at the user interface device; wherein the documents comprise checks each having a magnetic ink code line thereon, and further comprising means for electronically reading and decoding said magnetic ink code line to form decoded magnetic ink coded data, and further comprising a memory comprising means for storing said electronic image and said decoded magnetic ink coded data merged into a tagged image file format (TIFF) file, with the decoded magnetic ink coded data stored in a tag field in the TIFF file, each check being associated with a TIFF file, the TIFF file being stored in the electronic storage device; means for checking said decoded magnetic ink coded data for errors; wherein the means for checking for errors comprises means for determining if the number of errors is above a threshold and, if the number of errors is greater than zero but below the threshold, for flagging the check for correction;</claim-text>
      <claim-text>and if the number of errors is greater than the threshold for providing said checks for repass processing;</claim-text>
      <claim-text>and wherein said means for checking for errors further comprises optical character recognition (OCR) means for forming optically decoded data and means for comparing said optically decoded data for consistency, and if there is a lack of consistency, flagging the respective document for correction.</claim-text>
    </claim>
  </claims>
</questel-patent-document>