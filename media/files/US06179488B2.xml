<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06179488B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06179488</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6179488</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26304558" extended-family-id="3851652">
      <document-id>
        <country>US</country>
        <doc-number>09247336</doc-number>
        <kind>A</kind>
        <date>19990210</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1999US-09247336</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43170797</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>24733699</doc-number>
        <kind>A</kind>
        <date>19990210</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1999US-09247336</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>GB</country>
        <doc-number>9405729</doc-number>
        <kind>A</kind>
        <date>19940323</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1994GB-0005729</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="3">
        <country>US</country>
        <doc-number>8029498</doc-number>
        <kind>A</kind>
        <date>19980518</date>
        <priority-linkage-type>B</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="3">
        <doc-number>1998US-09080294</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  13/10        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>10</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>703023000</text>
        <class>703</class>
        <subclass>023000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>703024000</text>
        <class>703</class>
        <subclass>024000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>703026000</text>
        <class>703</class>
        <subclass>026000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>717135000</text>
        <class>717</class>
        <subclass>135000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-013/10E</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>013</main-group>
        <subgroup>10E</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-013/105</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>105</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>19</number-of-claims>
    <exemplary-claim>19</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>1</number-of-drawing-sheets>
      <number-of-figures>1</number-of-figures>
      <image-key data-format="questel">US6179488</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Software execution systems</invention-title>
    <references-cited>
      <citation srep-phase="applicant">
        <patcit num="1">
          <text>STRINGER PHILIP J</text>
          <document-id>
            <country>US</country>
            <doc-number>4785416</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4785416</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="2">
          <text>ADACHI SHIGEMI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4812975</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4812975</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>COOPER THAYNE C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5077657</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5077657</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>MURAI TOSHIO</text>
          <document-id>
            <country>US</country>
            <doc-number>5287515</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5287515</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>BLACKARD JOE W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5301302</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5301302</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>LANDAU ROBERT V, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5613098</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5613098</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>HERDEG MARK A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5652869</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5652869</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>R.K. Gupta et al., "Synthesis and Simulation of Digital Systems Containing Interacting Hardware and Software Coponents," pp.225-230, 29th ACM/IEEE Design Automation Conference,1992. 1992. 1992.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>K. Keutzer, "Hardware-Software Co-Design and ESDA, " pp. 435-436, 31st ACM/IEEE Design Automation Conference, 1994.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Serge A. Leef, "Architectural Outline, SEAMLESS," (Mentor Graphics document), pp. 1-19, publication date: unknown.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>A. Kalavade et al., "Manifestation of Heterogeneity in Hardware/Software Codesign," pp. 437-438, 31st ACM/IEEE Design Automation Confrence, 1994.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>Application-Program Behaviour Analysis, IBM Technical Disclosure Bulletin, vol. 31, No. 3, pp. 274-278.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>8029498</doc-number>
              <kind>A</kind>
              <date>19980518</date>
            </document-id>
            <parent-status>ABANDONED</parent-status>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>08/549720</doc-number>
            </document-id>
          </parent-doc>
        </relation>
      </continuation>
      <previous-publication>
        <relation>
          <parent-doc>
            <document-id>
              <country>WO</country>
              <doc-number>PCT/GB95/00603</doc-number>
              <date>19950320</date>
            </document-id>
          </parent-doc>
        </relation>
      </previous-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Synopsys, Inc.</orgname>
            <address>
              <address-1>Mountain View, CA, US</address-1>
              <city>Mountain View</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>SYNOPSYS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Wilson, John</name>
            <address>
              <address-1>Wokingham, GB</address-1>
              <city>Wokingham</city>
              <country>GB</country>
            </address>
          </addressbook>
          <nationality>
            <country>GB</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Young &amp; Thompson</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Stamber, Eric W.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A system 10 for executing a software program includes a simulator 15 for simulating a specific processor; a processing means 13 for executing non-specific parts of the program and including means for identifying those parts of the program which require execution by the specific processor; and a bidirectional bus 14 for feeding the identified program parts to the simulator 15 and for returning any resultant response to the processing means 13.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
    <p num="1">
      This application is a continuation of application Ser.
      <br/>
      No. 09/080,294, filed May 18, 1998, now abandoned which is a continuation of Ser.
      <br/>
      No. 08/549,720, filed Nov. 14, 1995 now abandoned, filed as PCT/GB95/00603 filed Mar. 30, 1995.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">This invention relates to a system for and methods of executing a software program.</p>
    <p num="3">
      It is becoming more and more common for Processors Manufacturer to release the design criteria of a new processor a considerable time before the processor is available in hardware form and in particular before the internal circuitry of the processor is known. (The term processor includes microprocessors, digital signal processors, microcode processors and any other programmable sequenced-based digital circuitry).
      <br/>
      One example is Intelt's PENTIUM (Registered Trade Mark).
      <br/>
      Software Designers are obviously keen to have software available for such new processors as soon as devices incorporating them come on to the market.
      <br/>
      Equally hardware Designers wish to know whether they can use the new processor with particular software and peripheral hardware.
      <br/>
      Attempts at simulating processors have been made but these are very limited in their application and in particular tend to require a knowledge of the internal architecture of the processor before any steps can be taken.
      <br/>
      They may also require the creation of a compiler for that particular processor.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="4">From one aspect the invention consists in a system for executing a software program including a simulator for simulating a specific processor, a processing means for executing the non-specific parts of the program and including means for identifying those parts of the program which require execution by the specific processor and a bidirectional bus, or other communication channel, for feeding the identified program parts to the simulator and for returning any resultant response to the processing means.</p>
    <p num="5">The invention also includes a method of testing or evaluating software on a simulated specific processor including the steps of executing the program on an existing processor, identifying program parts which require processing by the specific processor, feeding these program parts to the simulator and returning any resultant simulated response to the existing processor.</p>
    <p num="6">It will thus be seen that with the present invention a completely novel approach is used in that a general purpose and existing processor is combined with a simulator and the latter is configured only to simulate those interactions and responses which are specific to the simulated processor; all other parts of the program being executed on the general purpose processor.</p>
    <p num="7">This fresh approach to the problem not only significantly reduces the effort and time required to create the simulator, it also enables a simulator to be created purely with the knowledge of the design criteria of the new processor; the internal architecture of that device is irrelevant.</p>
    <p num="8">
      This approach arises from the realization that a substantial number of the functions performed by any processor when executing a program are non-specific, i.e. it does not matter which processor is used.
      <br/>
      Further, the steps which are specific are readily identified because they all involve interactions with peripheral hardware, for example, key-boards, mice and screens.
      <br/>
      A further advantage of this approach is that it is possible to perform the simulated interactions in a high level language.
    </p>
    <p num="9">
      Thus in a preferred embodiment the identified parts of the program are those which cause the specific processor to interact with the associated peripheral hardware.
      <br/>
      In many programs these identified parts may be sub-programs, because it is common programming practice to have a set of sub-programs to handle the interactions between a processor and peripheral hardware.
      <br/>
      Typically these identified parts are software or peripheral drivers.
    </p>
    <p num="10">Where the program is configured with such sub-programs, the system may further comprise a cross-compiler for compiling the existing sub-programs, prior to the sub-programs being fed to the bus, into a format or code suitable for interaction with the specific processor.</p>
    <p num="11">
      Preferably the simulator only simulates the responses of interactions with the identified parts of the program.
      <br/>
      Thus the simulator may be a processor or software model programmed to respond in accordance with the design response of the specific processor or it may be dedicated hardware designed to provide such responses.
    </p>
    <p num="12">Although the invention has been defined above it is to be understood it includes any inventive combination of the features set out above or in the following description.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="13">The invention may be performed in various ways and specific embodiments will now be described, by way of example, with reference to the accompanying drawing, which is a schematic representation of the system.</p>
    <heading>DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="14">Thus a system 10 comprises a computer 11, having a software input 12 and a processor 13; a bidirectional bus 14 and a simulator 15.</p>
    <p num="15">
      As has already been indicated the simulator 15 is designed to receive code or program parts which have to interact with peripheral hardware to be associated with the simulated processor and to provide the design responses that would be developed by the actual processor if it had processed such code or program part.
      <br/>
      This simulator 15 may be in the form of a computer model or it may be a hardware black box which can emulate the different processor bus cycles in response to the messages given over the communication channel and which can report back the changes at the processor interface signals, i.e. the pins.
    </p>
    <p num="16">This form of simulator is possible because of the realization that the processor can be split into two distinct parts; the essential processor circuit (usually the processor, some RAM and ROM, and some associated logic without which the processor could not operate); and the peripheral circuit which is used to dedicate the processor system to a particular function.</p>
    <p num="17">
      The software program, which is built to execute on the specific or target processor or processor system, will have some parts of the code written, specifically, to interact with the peripheral hardware.
      <br/>
      If this program is written in a high-level language, it can be compiled to run on many different computer systems or processor systems.
      <br/>
      Only the code associated with the peripheral circuits or hardware prevents the program from being fully functional on the different target processor or processor system.
    </p>
    <p num="18">
      Cross-compilation techniques allow the code associated with the peripheral circuits or hardware to be replaced with equivalent, alternative, code at compilation time.
      <br/>
      The alternative code, instead of interacting directly with the hardware, causes a high level message to be sent to the bidirectional bus that links the software with the simulator 15.
      <br/>
      Removing the code that relates directly to the hardware peripherals allows the remainder program to be executed on any general purpose computer for which a compiler exists.
    </p>
    <p num="19">
      The "black box", or simulator 15 which replaces the processor in the processor system, responds to the processor-cycle based messages from the communications channel 14 and translates that into an emulation of the responses of the specific processor.
      <br/>
      No attempt is made to emulate or model the internal workings of the specific processor.
    </p>
    <p num="20">
      The effect is that the software program will execute on the general purpose computer 13 until code that has to interact with the peripheral hardware is encountered.
      <br/>
      For this section of code only, the simulator 15 will be activated and respond as if the specific processor was in the circuit.
    </p>
    <p num="21">
      This allows software to be built and executed before the specific processor system is ready.
      <br/>
      Where the specific processor is represented as a computer model, removing the overhead of executing the part of the software program which does not interact with the peripheral circuit from the computer simulation can significantly reduce the elapsed time required to verify and debug the software program, and the interaction of the software program and the peripheral circuit.
      <br/>
      No detailed representation of the specific processor is required for this technique to work.
    </p>
    <p num="22">
      For software programs written in a high level language, a programming style based on subprograms is frequently used.
      <br/>
      A subprogram specifies a set of actions that have to be executed many times over, in many different circumstances. calling the subprogram allows the programmer to concentrate on what he wants the program to do rather than worry about the mechanism required to carry out the actions.
    </p>
    <p num="23">
      For software programs that interact with peripheral hardware, it is normal for a number of subprograms to be written to carry out the detailed interaction with the peripheral hardware.
      <br/>
      The software programmer will write his program to interact with the peripheral hardware using the subprograms.
      <br/>
      This can significantly reduce the program complexity.
    </p>
    <p num="24">
      To prepare the program for execution, a compilation process will translate the high level language program into binary symbols that are suitable for one particular process or type only.
      <br/>
      Different compilers are required for different processor types.
      <br/>
      The compilation process involves translating each of the program modules into the equivalent binary representation, and then linking the different binary modules together to produce a complete executable program.
    </p>
    <p num="25">
      The present invention allows that a new program module is written in parallel to the program module containing the subprograms that interact with the peripheral circuit.
      <br/>
      The names and interfaces to the subprograms in each module are the same.
      <br/>
      The operations specified in the subprograms are different.
      <br/>
      Executing the new subprograms cause one or more processor-cycle based messages to be sent to the communications channel.
      <br/>
      For some of these processor-cycles, some response can be expected back from the channel 14.
    </p>
    <p num="26">This new equivalent module can be linked into the program at the compilation stage, in place of the sub-programs that interact with the peripheral circuit directly.</p>
    <p num="27">Removing the peripheral circuit or hardware specific code allows the software program to be executed on any computer system for which a compiler is available.</p>
    <p num="28">
      The new subprograms, which are now linked into the software program, interact with the communications channel instead.
      <br/>
      It is not possible for the software program to tell if the peripheral circuit exists in the computer on which the software is executing because all the instructions that directly relate to the peripheral circuit are contained within the subprograms only.
    </p>
    <p num="29">Where it is necessary to handle asynchronous interrupts a further communication channel 16 from the simulator 15 to the computer 11 is included.</p>
    <p num="30">
      Asynchronous interrupts arriving at the simulator 15 can be handled by adding the further communications channel 16 that passes an interrupt message back to the computer 11 from the simulator 15.
      <br/>
      It can be arranged that the delivery of this message will cause a software interrupt in the software program.
      <br/>
      Thus interrupt signals arriving at the simulator 15 can be delivered directly to the software program to be handled by an interrupt handler written into the user program.
    </p>
    <p num="31">
      Because of the asynchronous nature of interrupts, it is vital to ensure the correct prioritization of interrupt messages over normal messages (i.e. identified program part).
      <br/>
      A simple method of implementing the prioritization is to append the interrupt priority to every message, and to maintain separate queues (FIFOs) for messages passed at the different interrupt levels.
      <br/>
      The simulator 15 always takes the first available instruction from the highest priority queue.
      <br/>
      This technique allows full interrupt driven code to be sequenced correctly between the simulator 15 and the software program.
      <br/>
      Means 17, 18 respectively are provided for prioritizing and for providing FIFO control.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19.</claim-text>
      <claim-text>A system for executing a software program including a simulator for simulating a target processor;</claim-text>
      <claim-text>a processing means for executing parts of the program which are non-specific to the target processor and including means for identifying those parts of the program which cause the target processor to interact with at least one associated peripheral element;</claim-text>
      <claim-text>and a bi-directional communication channel, for feeding the identified program parts to the simulator and for returning any resultant response to the processing means.</claim-text>
      <claim-text>1. A system for executing a software program including a simulator for simulating a target processor, processing means for executing parts of the program which are non-specific to the target processor and including means for identifying those parts of the program which require execution by the target processor;</claim-text>
      <claim-text>and a bi-directional bus or other communication channel, for feeding the identified program parts to the simulator and returning any resultant response to the processing means.</claim-text>
      <claim-text>2. A system as claimed in claim 1 wherein the identified parts to the program are those which cause the target processor to interact with at least one associated peripheral element.</claim-text>
      <claim-text>3. A system as claimed in claim 1 wherein the identified parts of the program are sub-programs.</claim-text>
      <claim-text>4. A system as claimed in claim 3 further comprising a cross-compiler for compiling existing sub-programs, prior to their being fed via the bus, into a format or code suitable for interaction with the target processor.</claim-text>
      <claim-text>5. A system as claimed in claim 1 wherein the identified parts of the program include drivers.</claim-text>
      <claim-text>6. A system as claimed in claim 1 wherein the identified parts of the program are in a high level language when fed to the simulator.</claim-text>
      <claim-text>7. A system as claimed in claim 1 wherein the simulator only simulates the responses of interactions with the identified parts of the program.</claim-text>
      <claim-text>8. A system as claimed in claim 1 wherein the simulator is a processor programmed to respond in accordance with the design response of the target processor.</claim-text>
      <claim-text>9. A system as claimed in claim 1 wherein the simulator is a dedicated hardware simulator.</claim-text>
      <claim-text>10. A system as claimed in claim 1 further including a further communication channel between the simulator and the processing means for handling asynchronous interrupts.</claim-text>
      <claim-text>11. A system as claimed in claim 10 wherein the interrupts are given a higher priority than other identified program parts.</claim-text>
      <claim-text>12. A system as claimed in claim 10 further including means for prioritizing every identified program part.</claim-text>
      <claim-text>13. A system as claimed in claim 12 further including First in First Out data handling means for each interrupt level.</claim-text>
      <claim-text>14. A method of testing or evaluating software program on a simulated target processor, including the steps of executing the program on an existing processor, identifying program parts which require processing by the target processor, feeding these program parts to the simulator and returning any resultant simulated response to the existing processor.</claim-text>
      <claim-text>15. A method as claimed in claim 14 wherein the identified parts of the program are those which cause the target processor to interact with at least one associated peripheral element.</claim-text>
      <claim-text>16. A system as claimed in claim 2 wherein the peripheral element is peripheral hardware.</claim-text>
      <claim-text>17. A system as claimed in claim 2 wherein the peripheral element is a peripheral circuit.</claim-text>
      <claim-text>18. A system as claimed in claim 2 wherein there are a plurality of peripheral elements including peripheral hardware and peripheral circuits.</claim-text>
    </claim>
  </claims>
</questel-patent-document>