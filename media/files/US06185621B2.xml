<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185621B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185621</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185621</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26670546" extended-family-id="14431767">
      <document-id>
        <country>US</country>
        <doc-number>09002560</doc-number>
        <kind>A</kind>
        <date>19971231</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-09002560</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>14753450</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>256097</doc-number>
        <kind>A</kind>
        <date>19971231</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-09002560</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>4152297</doc-number>
        <kind>P</kind>
        <date>19970325</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-60041522</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04N  21/218       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>218</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04N  21/231       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>231</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04N  21/2312      20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2312</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>H04N  21/2315      20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2315</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>H04N  21/472       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>472</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>709231000</text>
        <class>709</class>
        <subclass>231000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>348E05008</text>
        <class>348</class>
        <subclass>E05008</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>711161000</text>
        <class>711</class>
        <subclass>161000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>725092000</text>
        <class>725</class>
        <subclass>092000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04N-021/2312</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2312</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04N-005/00N</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>005</main-group>
        <subgroup>00N</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04N-021/218S1</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>021</main-group>
        <subgroup>218S1</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>H04N-021/231R</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>021</main-group>
        <subgroup>231R</subgroup>
      </classification-ecla>
      <classification-ecla sequence="5">
        <text>H04N-021/2315</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2315</subgroup>
      </classification-ecla>
      <classification-ecla sequence="6">
        <text>H04N-021/472D</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>021</main-group>
        <subgroup>472D</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/2312</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2312</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/2182</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2182</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/23116</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>23116</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/2315</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2315</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/47202</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>47202</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>14</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>8</number-of-drawing-sheets>
      <number-of-figures>11</number-of-figures>
      <image-key data-format="questel">US6185621</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Direct copying between disk blocks in memory onto a network as sequential access files</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>CHANG CHRISTOPHER Y, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4947367</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4947367</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>COHEN JASON M</text>
          <document-id>
            <country>US</country>
            <doc-number>4949187</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4949187</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>YU YING-KING</text>
          <document-id>
            <country>US</country>
            <doc-number>5276840</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5276840</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>MACKAY MICHAEL T, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5305438</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5305438</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>MENON JAISHANKAR M</text>
          <document-id>
            <country>US</country>
            <doc-number>5506979</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5506979</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>KOPPER DAVID J</text>
          <document-id>
            <country>US</country>
            <doc-number>5535381</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5535381</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>BLAIR DAVID K, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5539660</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5539660</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>DAN ASIT, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5544327</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5544327</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>VOETEN BART F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5553005</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5553005</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>YAMAGUCHI SATORU, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5577242</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5577242</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>BAKER DONN B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5583561</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5583561</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>DEWKETT THOMAS J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5646676</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5646676</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>OZDEN BANU, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5724543</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5724543</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>EFRON EDWARD, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5732211</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5732211</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>SAXENA ASHOK RAJ, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5805821</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5805821</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="16">
          <text>BRADY JAMES THOMAS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5808607</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5808607</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="17">
          <text>BENHASE MICHAEL T, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5860088</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5860088</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="18">
          <text>SHAW WADE DAVID, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5870553</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5870553</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="19">
          <text>BLEIDT ROBERT, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5920702</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5920702</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/041,522</doc-number>
          <date>19970325</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/041522</doc-number>
          <date>19970325</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Philips Electronics N.A. Corp.</orgname>
            <address>
              <address-1>New York, NY, US</address-1>
              <city>New York</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>PHILIPS ELECTRONICS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Romine, Jeff E.</name>
            <address>
              <address-1>Sandy, UT, US</address-1>
              <city>Sandy</city>
              <state>UT</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Belk, Michael E.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Maung, Zarni</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      In the multimedia network, in order to archive or play multimedia data for a production, a multitude of disk file blocks are retrieved from a multitude of files striped across a multitude of disk storage systems through a commutator to the input of an input/output unit.
      <br/>
      The disk file blocks are copied from the input into disk file blocks in a buffer of the memory of the unit.
      <br/>
      Then the unit creates a address-size list of data portions in the buffer for archiving the disk files of the production or for playing a multimedia data stream for the production.
      <br/>
      Then the unit executes a copy command given the address of the list which uses indirection for copying the specified portions of the buffer onto an output of the unit to store the data into an archival tape storage system or to play the production in a multimedia data stream.
      <br/>
      Also, using the above method, a production may be simultaneously archived and played by the same unit.
      <br/>
      In a related process, in order to restore the archived production or to record a multimedia data stream, the unit creates an address-size list for copying data from an input of the unit into portions of disk file blocks in a buffer in the memory of the unit.
      <br/>
      Then the unit executes a copy command given the address of the list which uses indirection for copying the data from the input of the unit into the specified portions of the buffer.
      <br/>
      Then the unit copies the disk file blocks onto an output through the commutator into disk files striped across a multitude of disk storage systems.
      <br/>
      Also, these two processes may be utilized in the same unit to simultaneously both restore a production from archival tape storage and to play the production as a multimedia data stream.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      Applicant claims the benefit of his United States provisional patent application, Ser.
      <br/>
      No. 60/041,522, filed Mar. 25, 1997.
    </p>
    <heading>FIELD OF THE INVENTION</heading>
    <p num="2">This invention relates to data archiving and restoring and relates most closely to the field of multimedia data servers.</p>
    <heading>BACKGROUND</heading>
    <p num="3">
      The invention herein involves computer systems.
      <br/>
      A computer system normally includes a central processing unit (CPU), a permanent memory unit, a fast memory unit, input and/or output (I/O) units, storage units, and a user interface.
      <br/>
      Programs contained in the memory, control the operation of the CPU to operate the computer.
      <br/>
      Whenever the computer is started, the CPU is initially controlled by a small program contained in the permanent memory.
      <br/>
      This startup program loads an operating system and any other necessary programs and data from files in the storage units into the fast memory.
      <br/>
      The CPU is able to alter any data contained in fast memory and control the I/O units to transfer data between the fast memory and peripherals such as the storage units, printers and user interface components.
      <br/>
      During operation, all or parts of data files are loaded into the fast memory.
      <br/>
      The contents of the data files are then changed, and the new versions of the data files are saved back into storage.
    </p>
    <p num="4">
      Memory generally refers to electronic information storage.
      <br/>
      When discussing memory or storage, both programs and data files are referred to collectively as either "data" or "information".
      <br/>
      There are two main type of memory: read only memory (ROM) and random access memory (RAM).
      <br/>
      RAM tends to be much faster than ROM, but also tends to be highly volatile, meaning that it must be regularly written to in order to prevent data loss.
      <br/>
      ROM, on the other hand, is permanent, so that any data stored in ROM is available when the computer is first turned on.
    </p>
    <p num="5">
      There are many different types of ROM.
      <br/>
      Some kinds of ROM are created with an unchangeable program built in.
      <br/>
      Programmable ROM (PROM), on the other hand, can be written to, but this usually requires high voltage, and may be difficult to erase (requiring, for example, ultraviolet light).
      <br/>
      Permanent memory may also be rewrittable memory such as electrically erasable ROM (EEPROM), battery backed SRAM, or flash memory.
    </p>
    <p num="6">
      Faster, more volatile types of memory are known as random access memory (RAM).
      <br/>
      Types of RAM include static RAM (SRAM), in which data is stored using circuits with several transistors, and dynamic RAM (DRAM), in which information is stored as charges in capacitors.
      <br/>
      The capacitors of DRAM must be regularly recharged to prevent data loss.
      <br/>
      The data stored in fast memory is usually lost when the system is turned off.
      <br/>
      Random access refers to the fact that any word i.e. 2 or 4 bytes (1 byte equals 8 bits of data), of the memory can be arbitrarily selected and immediately read or written to in one operation at any time without reading through the rest of memory.
      <br/>
      Note that permanent memory (ROM) is also random memory in this sense.
    </p>
    <p num="7">
      ROM is normally built into a motherboard of the computer.
      <br/>
      Fast memory is commonly provided on small boards that are mounted in memory slots on the motherboard of the computer.
      <br/>
      Flash memory PC cards are available that insert into PCMCIA slots commonly found in laptop computers, and small computer systems often use ROM cartridges especially for computer games.
    </p>
    <p num="8">
      Storage usually refers to units which contain computer media onto which the data and programs are stored.
      <br/>
      The computer media may be magnetic media in which a layer of plastic is coated with a layer of metal alloy oxide (e.g. iron rust) which is magnetic but not electrically conducting.
      <br/>
      Bits of data may be written to such magnetic media by magnetizing the particles at a storage point on the layer in a particular direction by controlling current to a magnetic write head moving closely over the point.
      <br/>
      Data may be read from magnetic media by detecting the effect of the magnetization on electrical current output from a magnetic read head.
      <br/>
      Alternately the media may be optical media in which bits may be written by directing a higher power laser beam at a point in a layer of the media to change the reflectivity of the layer at that point and read by detecting the amount of reflected light when a lower power laser is directed at the point on the layer.
      <br/>
      Some storage devices, such as hard disk drives, include a fixed media which can not be removed.
      <br/>
      In other devices, such as floppy disk drives, tape drives, and optical disk drives, the media can easily be removed and replaced by other media containing different programs or data files.
    </p>
    <p num="9">
      Some digital storage devices, such as hard disk drives and some types of optical disk drives, provide high speed access to any arbitrary individual block of data in the media of the device.
      <br/>
      This capability is referred to as random access.
      <br/>
      Unlike memory, no storage device allows random access to individual words (e.g. 2 or 4 bytes), but random access storage devices do allow relatively fast access to individual blocks (e.g. 512 bytes).
    </p>
    <p num="10">
      Other types of digital storage devices, such as digital tape drives, only allow access to blocks of data in a sequence.
      <br/>
      For example, a tape may have to be wound for hundreds of meters in order to reach a particular block of data.
      <br/>
      Thus, these types of storage devices are only useful for accessing large sequential sections of data, since random access to individual blocks is either not available or too slow for practical use.
      <br/>
      Such devices are referred to as sequential access storage.
      <br/>
      Common sequential access devices have removable media which is relatively inexpensive, allowing the storage of large amounts of data at relatively low cost.
    </p>
    <p num="11">
      Some storage drives are built-in or internal and require opening the computer to install or remove.
      <br/>
      Some other storage devices are external and plug into ports of the computer to be easily installed and removed.
      <br/>
      High performance systems often have hard drives installed in enclosures that slide into internally mounted frames for convenient replacement.
    </p>
    <p num="12">
      The unreliability of high speed, random access storage devices is a major problem in data storage.
      <br/>
      Certain mechanical parts of a storage drives, such as positioning motors and bearings, are not nearly as reliable as solid state devices.
      <br/>
      In addition, because the data on a hard disk is so easily accessible, computer viruses, software failures, and operation errors can easily damage stored data.
      <br/>
      For this reason, important data is often copied onto removable media which is removed from the system so that no failure of the system can directly damage the data.
      <br/>
      This process is referred to as backing-up the data.
      <br/>
      If there is a failure in the computer system, the data on the system storage device can then be restored by copying the backed-up data from the removable media.
    </p>
    <p num="13">
      Also, in order to increase reliability of hard disk storage, computer systems used for critical, changing information commonly use a system known as a redundant array of inexpensive disks (RAID).
      <br/>
      In a RAID system, instead of being stored on a single hard disk, each data file is about evenly spread out across several data disks by a RAID controller card.
      <br/>
      In addition, parity information is written to a parity disk, so that if any single disk drive fails, there will be no loss of data or access to the data.
      <br/>
      Access to the disks is cycled across the data disks by the RAID disk controller and parts of each disk file is read or written in turn to each data drive.
      <br/>
      This allows a large number of smaller inexpensive disks to operate as though they were one large disk drive.
      <br/>
      This process of spreading the data across multiple devices is known as striping.
      <br/>
      Typically in a RAID system, the disk drives are networked to a disk controller card using a small computer interface (SCSI) peripherals network.
      <br/>
      Commonly available SCSI type RAID disk controllers access up to 13 data disk drives and one parity disk drive and inexpensive SCSI disk drives holding 23 GB (gigabytes=1 billion bytes) are available thus providing up to 299 GB of highly reliable storage in one hard disk storage system (HDSS).
    </p>
    <p num="14">
      The cost of high speed, random access, storage devices is one of the major costs of computer systems.
      <br/>
      Because the cost of sequential access storage (including the removable media) is much lower per unit of storage than the cost of high access speed storage, it is common to move data (programs files and data files) which are not immediately needed onto removable media in sequential digital storage devices.
      <br/>
      The removable media is then removed from the drive and replaced with other media.
      <br/>
      This process of temporarily moving files from random access storage devices onto media in sequential devices, and then removing the media from the system, is known as archiving.
      <br/>
      When the data are again required, then the media is loaded into the sequential device, and the files are copied back onto the high access speed storage devices in a process known as restoring the data.
    </p>
    <p num="15">
      Digital tape units are especially popular for backing-up and for archiving digital data because of the extremely low cost of tape.
      <br/>
      High quality tape units which write digital data at 3 million bytes per second (10 MBs) are commonly available.
    </p>
    <p num="16">
      The invention also relates to computer networks.
      <br/>
      In order to reduce the cost of data processing systems, several computers can be linked using communications cables.
      <br/>
      This allows the computers to use some parts of other computers and some or all of the data stored on other computers.
      <br/>
      Such interconnected computers are referred to as computer networks.
      <br/>
      The individual computers usually referred to as nodes of the network, and the communication paths (e.g. cables) and communication equipment are referred to as a communication network.
      <br/>
      The telephone system is an example of a communications network to which computer nodes may be connected, using modems or ISDN devices, to form a computer network.
      <br/>
      Other common communication networks include Ethernet, ARCnet, and token ring networks.
      <br/>
      In a computer network, files, storage space, printers and other resources of nodes referred to as servers, can be used by other computer nodes referred to as clients.
    </p>
    <p num="17">
      The invention is especially useful in the cable television industry.
      <br/>
      Cable television distribution has traditionally utilized semi-automated controls.
      <br/>
      Most cable distributors receive channels from program producers through satellite downlinks, video tapes, and dedicated lines.
      <br/>
      At the cable distributor, tapes are loaded into a VCR player, which is then manually queued and started to provide a program signal.
      <br/>
      Signals from the various program sources are routed from source cables by manually controlled switchers through modulators to provide each program at a different frequency channel, and the modulated signals combined into a distribution cable.
      <br/>
      This equipment used to provide the signals into the cable television distribution system, is commonly known as the head-end.
      <br/>
      For each channel with local commercials, a cartridge for each local commercial is loaded into a cartridge tape machine, which has been automatically queued and programmed to automatically play the correct local commercials on the correct channel at a particular time.
      <br/>
      The cable distributor may simultaneously distribute over 100 channels through a cable system.
    </p>
    <p num="18">
      Many cable operators are preparing to introduce multi-casting into their cable systems.
      <br/>
      In multi-casting, different programs and commercials are broadcast to different parts of the cable system or to different types of viewers (i.e. viewing customers).
      <br/>
      For example, different neighborhoods may receive programs specific to its demographics and receive commercials specific to its local businesses.
      <br/>
      Preferably, the same show could be broadcast at overlapping times depending on the commercials scheduled in the different portions of the cable system.
      <br/>
      Multi-casting requires a more automated approach since a different set of operations is required for each local area, so that many more simultaneous operations are needed.
    </p>
    <p num="19">
      Video servers, also known as multimedia servers, are a solution to the complexity of operating a multi-casting system.
      <br/>
      A video server can easily play the same or different local commercials on several different local portions of the cable system at simultaneous or overlapping times.
      <br/>
      For example, local commercials may be loaded from tape into the disk storage of the video server, and the video server can be programmed to automatically play the correct commercial in the correct channel for each local area.
      <br/>
      Different programs can also be loaded into the video server to automatically play in different local areas at different times.
    </p>
    <p num="20">
      For example, Philips produced Media Pool video servers which allow a large number of video production peripheral devices to simultaneously access a large number multimedia productions.
      <br/>
      Typical video peripherals include film scanners, frame editors, digital tape archival systems, video cameras, VCR units, program distribution links, and cable distribution systems (head-ends).
    </p>
    <p num="21">
      Instead of being stored on a single RAID hard disk system, each data file is about evenly spread out across multiple RAID systems called hard disk storage systems (HDSSs).
      <br/>
      To give each video peripheral device access to all the data in all the HDSSs, each device is connected to one or more input-output (I/O) ports.
      <br/>
      A computer controlled switching unit called the commutator then cycles the connections between the I/O ports and the HDSSs, so that each HDSS is regularly switched from I/O port to I/O port and the I/O port are similarly switched from HDSS to HDSS.
      <br/>
      As the I/O port for a given device is cycled by the commutator across the storage systems, parts of the file are read or written in turn on each storage system.
      <br/>
      This allows a large number of peripheral devices to simultaneously have access to the same file without conflicts.
      <br/>
      This process of distributing files across all the HDSSs is referred to as striping.
      <br/>
      With HDSS striping, a tape drive can back-up a video file while the same part or another part of the same file is being used by a frame editor and also the same or other parts of the file are being broadcast to different portions of a multi-casting cable system, for example.
    </p>
    <p num="22">
      For each production (program or commercial), several files of multimedia data must be stored in the HDSSs of the video server.
      <br/>
      Typically, a single production requires a video file and up to four audio files.
      <br/>
      Furthermore, there may be several auxiliary files specifying additional information, including arrangement information and time code information describing how to arrange the information from the video and audio files to form a multimedia stream and when to broadcast portions of the information to play the stream.
    </p>
    <p num="23">
      In order to play the multimedia production, the time code, arrangement, video, and audio data must first be read from respective files stored in the HDSSs.
      <br/>
      The video and audio data is then broadcast in a predetermined order at predetermined times according to the arrangement and time code information to play the multimedia data stream.
    </p>
    <p num="24">
      Successful operation of current multimedia servers requires careful planning.
      <br/>
      The loading or restoration of any required multimedia productions must be completed before the scheduled broadcast time.
      <br/>
      Furthermore, there must be sufficient hard disk storage space for restoring the required productions so that other productions may have to be archived.
      <br/>
      Finally, restoration often requires other computer resources (e.g. I/O ports, tape drives, bandwidth through the commutator) which might not be available at all times.
    </p>
    <p num="25">
      Many cable systems offer a service known as pay-per-view in which subscribers who wish to see a special production can call a provider to order access to the production, often up to just a few minutes before the production starts.
      <br/>
      Typically, a small group of productions are repeated sequentially on a channel so that viewers who wish, may view the production at different times.
    </p>
    <p num="26">
      Many cable providers desire to offer an improved pay-per-view service known as near-video-on-demand, in which the same production is broadcast on multiple channels starting at staggered times, so that a viewer who desires to see a production and misses the start of the production will not have to wait through the entire length of the production before seeing the next available starting of the broadcast.
      <br/>
      In order to provide near-video-on-demand directly from tape, a multitude of copies of each production and a separate player for each channel will be required.
      <br/>
      Thus, it is economical to load such productions onto a video server which can simultaneously play different portions of the same copy of the production onto different channels.
    </p>
    <p num="27">Many cable systems are also preparing to offer a service known as video-on-demand in which a subscriber requests a particular multimedia production from hundreds or even thousands of available productions, and then the provider broadcasts the production to that viewer through the cable as quickly as it can be made available.</p>
    <p num="28">
      Preferably, in addition to play, the service should provide for viewer commands for so called trick play functions such as pause, frame-by-frame forward and reverse, slow motion forward and reverse, play in fast forward and reverse, very fast forward (wind) and reverse (rewind, and other multimedia manipulations currently provided by advanced VCR machines.
      <br/>
      Furthermore, the random access storage of a video server would allow providing random access viewer commands such as go to a scene or jump forward or backward a given playing time, and similar functions provided on advanced CD changers.
      <br/>
      It would be prohibitively expensive to operate such a system using a separate player and separate taped copy of a production for each potential simultaneous viewer in such a system.
    </p>
    <p num="29">
      Multimedia productions require large amounts of digital storage.
      <br/>
      One hour of programming of regular definition television, in motion JPEG format for instance, may require as much as 6 GB of storage, and video-on-demand customers may demand to select from thousands of hours of programming.
      <br/>
      Thus, it is not practical to store all of the desired productions in random access storage.
      <br/>
      Thus, in a video server, most productions must be kept in archival storage, so that viewers who request an archived production must wait while the production is restored from archival storage.
    </p>
    <p num="30">
      The invention is also related to the methods used to handle data in a video server.
      <br/>
      The restoration and archiving processes are complex and require extensive memory and processor resources.
      <br/>
      In archiving, the video server sends commands to the HDSSs requesting portions of files required for a production.
      <br/>
      The server copies the data in blocks formatted for disk storage from a network input communicating with the HDSSs into an input buffer in the server memory.
      <br/>
      The server reads the data from the input buffer, reformats the data into larger blocks for sequential storage, and writes the data into an output buffer in the server memory.
      <br/>
      The server sends commands to a sequential storage system to store the data and copies the data from the the output buffer onto an output to the sequential storage system.
    </p>
    <p num="31">
      In restoring, the video server sends commands to a sequential storage system requesting portions of a file required for a production.
      <br/>
      The server copies the data in blocks formatted for sequential access storage from an input from the sequential storage system into an input buffer in the server memory.
      <br/>
      The server reads the data from the input buffer, reformats the data into smaller blocks for sequential storage, and writes the data into an output buffer in the server memory.
      <br/>
      The server sends commands to the HDSSs to store the data and moves the data from the the output buffer onto an output to the HDSSs.
    </p>
    <p num="32">
      The recording and playing processes for multimedia productions are similarly complex and again require extensive memory and processor resources.
      <br/>
      In playing, the video server receives commands to play a multimedia production and the video server sends commands to the HDSSs requesting portions of files required for playing the production.
      <br/>
      The server copies the data in blocks formatted for disk storage from an input from the HDSSs into an input buffer in the server memory.
      <br/>
      The server reads the data from the input buffer, reformats the data into the format required for a multimedia data stream, and writes the data into an output buffer in the server memory.
      <br/>
      The server copies the data from the the output buffer onto a video output according to timing information stored in the auxiliary files.
    </p>
    <p num="33">
      In recording, the video server receives commands to record a multimedia data stream and the server begins copying the data from an input for the stream into an input buffer in the server memory, along with timing information related to when the data was received.
      <br/>
      The server reads the data from the input buffer reformats the data into blocks for disk storage and writes the data into an output buffer in the server memory.
      <br/>
      The server sends commands to the HDSSs to store the data and copies the data from the the second buffer onto an network output to the HDSSs.
    </p>
    <p num="34">
      Those skilled in the art are directed to U.S. Pat. No. 5,539,660 to Bird et al. describing a multimedia server with a cartridge tape unit. U.S. patent application Ser.
      <br/>
      No. 08/641,153, now U.S. Pat. No. 5,732,211, entitled "Advanced Data Server and Server System" describes another multimedia server. U.S. Pat. No. 5,305,438 describes a video storage system with an archival tape unit, and U.S. Pat. No. 4,949,187 describes a video server with an archival tape system.
      <br/>
      These above citations are hereby incorporated in whole by reference.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="35">It is an object of the invention to provide a multimedia data server requiring less memory for archiving and restoring multimedia productions.</p>
    <p num="36">It is another object to provide a multimedia data server requiring less processor time for archiving and restoring multimedia productions.</p>
    <p num="37">It is also object to provide a multimedia data server requiring less memory for recording and playing multimedia productions.</p>
    <p num="38">It is a further object of the invention to provide a multimedia data server requiring less processor time for playing and recording multimedia productions.</p>
    <p num="39">
      In the invention herein, the operations of the multimedia server during archiving and restoring are modified to reduce memory and processing requirements.
      <br/>
      The server stores multimedia data in a buffer in the memory of the server in blocks formatted for random access storage (disk format).
      <br/>
      This allows the blocks to be efficiently moved between random access storage and the memory buffer at the high speeds available for such random access storage (e.g. 40 MBs).
    </p>
    <p num="40">
      During archiving in the invention, the server reads the data from the random access storage formatted blocks in the memory buffer and writes such data in a format for sequential access storage onto a network output that communicates with the sequential access storage system.
      <br/>
      That is, the data is not stored in an output buffer, but is directly written as reformatted data onto the output of the server.
      <br/>
      This reduces memory and processor resources required for archiving the data.
      <br/>
      Note that the sequential storage system may have a buffer, for example in a tape controller, to allow writing to network output to the sequential storage system at a higher speed than the data can be written to tape in the system.
      <br/>
      The invention does not directly effect the need for such a buffer, but rather, generally reduces the total amount of memory buffer needed in the system in order to provide the same level of performance.
    </p>
    <p num="41">
      In a preferred embodiment, the server first creates a list of portions of the data in the memory buffer to move to the network output, communicates with the sequential storage system, and then executes the list and any handshaking required with the sequential storage system in a process to archive the data.
      <br/>
      The items in the list contains an address of a portion of the random access storage formatted data in the memory buffer and contains the size of the respective portion.
      <br/>
      Preferably a single architected instruction executes the archiving list and the list is allowed to contain an arbitrary number of address-size items.
    </p>
    <p num="42">
      During restoration in the invention, the sequential formatted data is read from a network input that communicates with the sequential storage system and such data is written into blocks in the memory buffer in a format for random access storage.
      <br/>
      That is, the data is not stored in an input buffer, but rather, upon reading the data from the network the data is transferred immediately into random access storage formatted blocks in the memory buffer.
      <br/>
      This reduces memory and processor resources required for restoring archived data.
      <br/>
      Again this does not effect the need for any buffer in the sequential access storage system.
    </p>
    <p num="43">
      In a preferred embodiment, the server first creates a list of portions of the buffer into which the data on the network input are to be moved, communicates with the sequential storage system, and then executes the list and provides any handshaking required with the sequential storage system in the process to restore the archived data.
      <br/>
      The items in the list contains an address of a portion of the random access storage formatted data in the memory buffer and contains the size of the respective portion of data.
      <br/>
      Preferably a single archetected instruction executes the restore list and the list is allowed to contain an arbitrary number of address-size items.
    </p>
    <p num="44">
      In a similar manner, in another aspect of the invention, the operations of the multimedia server during recording and playing of a multimedia data stream are modified to reduce memory and processing requirements.
      <br/>
      Again, the server stores multimedia data in a buffer in the memory of the server in blocks formatted for random access storage (disk format).
    </p>
    <p num="45">
      During playing in the invention, the server reads the data from the random access formatted blocks in the memory buffer and writes such data as a multimedia data stream onto a network output that communicates with peripheral equipment of the multimedia data server.
      <br/>
      That is, the data is not stored in an output buffer, but is directly written as reformatted data onto the output of the server.
      <br/>
      This reduces memory and processor resources required for playing the multimedia data stream.
      <br/>
      Note that the peripheral equipment may have a buffer, for example, in a frame editor to hold the frame being edited.
      <br/>
      The invention does not directly effect the need for such a buffer, but rather, the total amount of memory buffer needed in the system is generally reduced while providing the same level of performance.
    </p>
    <p num="46">
      In a preferred embodiment, the server creates lists of portions of the data in the buffer to move to the network output, and then executes the lists in a process to play the data stream.
      <br/>
      The items in the list contains an address of a portion of the random access storage formatted data in the memory buffer and contains the size of the respective portion.
      <br/>
      The list may also contain timing information for forming a stream.
      <br/>
      Preferably a single archetected instruction executes the play list and the list is allowed to contain an arbitrary number of address-size items.
    </p>
    <p num="47">
      During recording of a multimedia data stream in the invention, the stream of data is read from a network input that communicates with the peripheral device and such data is written into blocks in the memory buffer in a format for random access storage.
      <br/>
      That is, the data is not stored in an input buffer, but rather, upon reading the data from the network the data is transferred immediately into random access storage formatted blocks in the memory buffer.
      <br/>
      This reduces memory and processor resources required for recording multimedia data files.
      <br/>
      Again this does not effect the need for any buffer in the sequential access storage system.
    </p>
    <p num="48">
      In a preferred embodiment, the server creates lists of portions of the buffer into which the data on the network input are to be moved, and then executes the lists in the process to record the multimedia data.
      <br/>
      The items in the list contain an address of a portion of the random access storage formatted data in the memory buffer and contain the size of the respective portion of data.
      <br/>
      Preferably a single archetected instruction executes the record list and the list is allowed to contain an arbitrary number of address-size items.
    </p>
    <p num="49">The invention may be implemented by programming a general purpose server to provide the above multimedia server functions.</p>
    <p num="50">Those skilled in the art can understand the invention and additional objects and advantages of the invention by studying the description of preferred embodiments below with reference to the following drawings which illustrate the feature of the appended claims:</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="51">
      FIG. 1 shows a specific embodiment of the system of the invention for moving multimedia data from disk formatted blocks in a memory buffer and a multimedia network using a single step.
      <br/>
      FIG. 2 illustrates a multimedia input and/or output unit for moving data files of a multimedia production between disk formatted blocks in a buffer in a memory and the network in a specific embodiment of the invention.
      <br/>
      FIG. 3 illustrates another embodiment of a multimedia input and/or output unit for moving data files of a multimedia production between disk formatted information blocks in a buffer in a memory and the network.
      <br/>
      FIG. 4 shows details of a specific embodiment of the service controller of the invention for controlling the process for moving multimedia data from disk formatted blocks in a memory buffer and a multimedia network using a single step including the movement of disk blocks between the disk storage system and the input and/or output units.
      <br/>
      FIG. 5 is a block diagram illustrating an embodiment of a random access storage system of the invention for reading earlier portions of the files of a production as later portions are being written.
      <br/>
      FIG. 6 schematically shows a format for the files on a hard disks of the system of the invention.
      <br/>
      FIG. 7 schematically shows a format for the file on the tape of the invention.
      <br/>
      FIG. 8 illustrates an embodiment of the method of the invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="52">
      In the drawings, the same labels may be used in different drawings for similar methods or apparatus or different labels may be used.
      <br/>
      Also, communication links that do not have arrows may be bi-directional.
    </p>
    <p num="53">
      FIG. 1 shows a specific example embodiment of a system of the invention, including a portion of video server 100 of the invention for moving data between disk formatted blocks in a buffer in the memory and another format on a network.
      <br/>
      The system receives multimedia data streams for productions from providers through input and/or output unit (IOU) 102. If required, analog to digital converter 104 is provided to convert the data stream from analog to digital form.
      <br/>
      As described below, the multimedia data stream is converted into fixed size blocks of data suitable for random access storage in video, audio, and auxiliary files.
      <br/>
      The blocks are distributed by commutator 106 across multiple random access storage systems (RASSs) 112-120.
      <br/>
      JPEG video frame and possibly audio channels may also be input or modified using production editor 122 and routed through IOU 124.
      <br/>
      The system also receives input from digital camera 126 through IOU 128 after conversion to a motion JPEG video stream in JPEG converter 130.
      <br/>
      Finally, the system receives input of a motion JPEG video stream through film to digital data converter 132 through IOU 134.
    </p>
    <p num="54">
      Commutator 106 may be any type of a network of connections between two groups of terminals which allows for a cycling of connected terminals.
      <br/>
      That is, each terminal of the first group connects in turn with each of the terminals in the second group.
      <br/>
      Preferably the commutator is an M by N switching network, controlled by a service controller discussed below.
      <br/>
      Only one video server is shown with one commutator, but a server may include multiple commutators connected, for example, through a video switcher to the I/O units.
      <br/>
      Alternately, multiple video servers may be provided for one cable system with, for example, connections between several video servers and each head end.
    </p>
    <p num="55">
      Preferably, each RASS includes a SCSI disk controller and up to 14 random access storage devices such as hard disk drives or optical disk drives, but other types of storage systems could be used.
      <br/>
      Herein, the term "disk" is generally used to refer to any type of random access storage unit because disks are the predominate type of such random access storage units.
      <br/>
      Only a few RASSs are shown, but a typical video server should have a large number of such storage systems, limited only by the number of connections provided through the commutator.
      <br/>
      In a simple embodiment all the files of the system are striped across all the RASS's and the number of I/O units that can be connected equals the number of RASSs in a simple periodically-cycling, circular-shifting, round-robin connection scheme so that each IOU in turn accesses each RASS once in every cycle and every IOU is connected to a different RASS and every RASS is connected to a different IOU and thus, every IOU can potentially access all the portions of all the files during every connection cycle.
      <br/>
      Alternately, more complex storage and access scheduling can be provided to, for example, allow more IOUs than RASSs and different access periods for different IOUs depending on the I/O bandwidth requirements and criticality of the IOUs.
      <br/>
      IOUs which do not need disk access at a particular time, may not be connected to the RASS at all.
      <br/>
      Redundancy may be provided for the RASSs to prevent data loss, but for video systems it is not generally required since disk controllers are typically highly reliable.
    </p>
    <p num="56">
      The multimedia data stream may be an analog NTSC video signal, a digital MPEG2 stream of packets, or a motion JPEG data stream.
      <br/>
      The provider may supply the production through a satellite downlink (not shown), through a dedicated line (not shown), or by providing media (not shown) that are played on a VCR or other device (not shown).
      <br/>
      For clarity, only one IOU for receiving input from providers is shown, but a typical cable distributor may simultaneously receive input from over 100 channels.
      <br/>
      Preferably, the video files are stored in JPEG format to allow editing in production editor 122.
      <br/>
      Alternately the video files may be stored in MPEG frame groups, for example, groups of 9 frames padded to make each group equal size.
      <br/>
      The blocks of data for each of the files are striped across the RASSs.
      <br/>
      Preferably, at least one of the storage units provides redundant data to speed up access and/or prevent data loss.
    </p>
    <p num="57">
      Productions are played for cable service viewers by reading fixed size disk blocks for multiple files from a multitude of the RASSs 112-120 for each file, routing the data through commutator 106, converting the fixed size data blocks to a multimedia data stream in IOUs 142-150 and transmitting the data streams from the video server to one or more head-ends 152-160.
      <br/>
      The data streams are then routed to access control units 162-170 near one or more of the viewers, and the to multimedia terminals 172-180 for the viewing customers.
    </p>
    <p num="58">
      A separate head-end is provided for each independent area or for other grouping of subscribers of the cable distribution network, and each head end may have over 100 channel inputs.
      <br/>
      Even though many or even all of the channel inputs to the head-ends may be from the video server, only a few such inputs are shown for clarity.
      <br/>
      Typically, the data stream is routed from each head end to thousands or hundreds of thousands of local access control units, even though only one access control unit is shown for clarity.
      <br/>
      Ten to one hundred viewers are usually serviced by each access control unit, but only one or a few are shown for clarity.
      <br/>
      Multiple viewer terminals 173, 174 may be connected to each output of an access control unit, and some households with multiple viewer terminal may use multiple outputs of the access control unit.
      <br/>
      The viewer terminals allow display of the multimedia productions.
    </p>
    <p num="59">
      In addition, the viewer terminals may provide for inputting access requests, inputting control commands, telephone connection, internet connection, or even to transmit multimedia data back the video server.
      <br/>
      The terminal may include apparatus for requesting access to multimedia productions and controls for video-on-demand functions discussed above.
      <br/>
      The viewer terminal may include a camera and microphone (not shown) for video conferencing or for authoring multimedia productions.
      <br/>
      The viewer may be able to edit frames and to upload productions from a frame editor or VCR into private or shared storage in the video server for later viewing.
      <br/>
      A path may be provided from viewer terminals back to the video server by the telephone system, the cable system or by some combination.
      <br/>
      For example, data may be transmitted through modem 181 to a telephone connection, then from a telephone connection through modem 182 and IOU 183 to the video server for access requests, control commands, internet page requests.
      <br/>
      Alternatively, transmission may occur through an available channel to the access control units, then through a separate return cable 183 for terminal input back to the head end, and then from the head end to an IOU.
    </p>
    <p num="60">
      Multimedia productions may be provided to another production distributor such as another cable distributor, news network or program provider through IOU 184 and digital to analog (D/A) converter 185 if required.
      <br/>
      Not shown are satellite up-link, dedicated cable, or VCR recorder to transmit the signal to the other distributor.
    </p>
    <p num="61">
      Data which is not immediately required may be archived from RASSs 112-120, through commutator 106, through IOUs 192-200, to recording/reproducing units 202-210 for recording on removable media.
      <br/>
      The IOUs may have other connections for input or output, as previously described in relation to the other IOUs.
    </p>
    <p num="62">
      FIG. 2 shows an embodiment of the IOU 240 of the invention with a micro-controller (CPU) 242 connected through a bus with memory 244 and with input and/or output circuits (IOCs) 246, 248 and 250.
      <br/>
      The IOU has a terminal 252 for connection to the commutator through IOC 246, a terminal 254 for connection to a tape unit through IOC 248, and a terminal 256 for connection to a multimedia data stream through IOC 250.
      <br/>
      Preferably IOC 246 includes SCSI controller apparatus to operate a SCSI tape unit, and the tape controller portion may be external or part of the internal circuit as shown.
    </p>
    <p num="63">
      In an archiving process, program module 262 controls the CPU 242 and IOC 246 to request and receive fixed size file blocks formatted for random access storage from files striped across RASSs 112-120, and to store such file blocks into contiguous buffer 264 of memory 244.
      <br/>
      Program module 262 directs IOC 256 to request blocks of auxiliary, audio, and video data from disk files, as required to supply the data from buffer 264.
      <br/>
      Program module 266 controls the CPU to reformat or convert the blocks formatted for random access storage in buffer 264 into data formatted for sequential access storage which is output to terminal 564.
      <br/>
      In the conversion, portions of the data in the blocks for random access storage are copied into blocks of a different, preferably larger, fixed size for sequential access storage e.g. onto digital tape.
      <br/>
      Typically, tape blocks are several times larger than disk file blocks.
      <br/>
      Preferably, blocks from the video, audio and auxiliary files are all packed into the tape blocks and saved to tape in approximately the sequential temporal order that the information is required to play the production.
      <br/>
      The information is stored so that the data can be easily unpacked from the tape blocks back into blocks for the hard drive.
      <br/>
      Then the data in buffer 264 that has already been converted is deleted (marked as being free) to provide space for additional blocks from random access storage files.
      <br/>
      Copying data in combination with deleting the original is generally referred to as moving data.
    </p>
    <p num="64">
      In one embodiment of the invention, at the same time that data is being archived from random access storage to sequential storage, the data may also be played using the same IOU.
      <br/>
      Program module 272 controls the CPU to convert the data in buffer 264 from blocks formatted for random access into data for a multimedia data stream, and controls the CPU and IOC 250 so as to play a multimedia data stream directly from buffer 264 through IOC 250.
      <br/>
      Preferably, at least parts of modules 272 and 276 are also used for providing a multimedia data stream from IOC 250 when no archiving is occurring as in IOUs 141-150 and 184 in FIG. 1.
    </p>
    <p num="65">
      In a restoring process, program module 280 controls the CPU and IOC 248 to request and receive data formatted for sequential access from one of the digital tape units 202-210.
      <br/>
      The data is retrieved through IOC 248, converted into disk formatted data blocks and stored into buffer 264 for storage.
      <br/>
      Then program 284 controls the transfer of the blocks of data from buffer 264, through IOC 246, through the commutator 106, (see FIG. 1) and to strips the data across the disk storage systems 112-120.
    </p>
    <p num="66">
      In another specific embodiment of the invention, at the same time that archived data is being restored from the tape drives to the hard drives, the same IOU can also play the multimedia production.
      <br/>
      Program 272 controls the CPU and IOC 250 to reformat or convert the data in buffer 264 from blocks formatted for random access into data for a multimedia data stream, and to play a multimedia data stream from buffer 274 through IOC 260.
    </p>
    <p num="67">
      Preferably, IOU 240 is also able to play a multimedia production when another IOU is restoring archived data from one of the tape units to random access storage.
      <br/>
      Program module 262 controls the CPU 242 and IOC 246 to request and receive fixed size file blocks formatted for random access storage from files striped across a plurality of RASSs 112-120 and to store such file blocks into contiguous buffer 264.
      <br/>
      Preferably, program module 262 includes section 286 for requesting file blocks as soon as sufficient blocks have been stored into files striped across the random access storage system to begin forming multimedia data for a data stream i.e. while data is being written to the files, data is read from earlier portions of the files.
      <br/>
      Program module 262 directs IOC 256 to request blocks of time code data, audio, and video data from disk, as required to supply data from buffer 264.
      <br/>
      Then as described above, program 272 controls the CPU to convert the data in buffer 264 from blocks formatted for random access into data for a multimedia data stream, and to play a multimedia data stream through IOC 260.
    </p>
    <p num="68">
      FIG. 3 shows another embodiment 300 of an IOU for playing a multimedia production while another IOU is restoring the production from an archival tape.
      <br/>
      IOU 300 includes embedded micro controller 302 connected through a bus with memory 304 and I/O processors 306, 308, 310 and 312.
      <br/>
      IOC 306 is connectable to the commutator 106 through input terminal 314 and IOC 308 is connectable to service controller 212 (of FIG. 1) through control terminal 316.
      <br/>
      IOC 310 is connectable destination for a multimedia data stream through output terminal 318, and IOC 312 is connectable to the multimedia destination to receive controls such as production requests, play, reverse, fast forward, rewind, pause.
    </p>
    <p num="69">
      Program module 322 controls IOC 306 and the CPU to transmit requests for blocks of data to service controller 212 (see FIG. 1).
      <br/>
      The service controller schedules access through commutator 106 (see FIG. 1) and commands the storage system to provide blocks of data through the commutator and input terminal 316 to the IOU.
      <br/>
      Program module 322 then stores such blocks of data into buffer 324.
      <br/>
      Preferably, program module 322 includes programmed apparatus 326 for accessing files which are in the process of being restored by another IOU.
      <br/>
      Typically the request is for specific blocks from multiple files in the RASSs including video, audio and auxiliary files.
      <br/>
      Program 328 controls the CPU to convert the blocks formatted for random access storage into data for providing a multimedia data stream and to receive service commands discussed above, from the destination viewer (not shown) through terminal 318 and IOC 310.
      <br/>
      Program module 328 communicates with other program modules such as program module 322, to provide the requested services, and program module 322 plays the multimedia data stream through IOC 312 and terminal 320 to the destination viewer.
    </p>
    <p num="70">
      FIG. 4 illustrates some of the details of a specific embodiment of service controller such as controller 212 of FIG. 1.
      <br/>
      Preferably the service controller is a general purpose, high performance work station with a multitasking operating system to continuously control the connections through the commutator and to service requests for file blocks from the IOUs.
      <br/>
      The operating system of the work station allows access to the CPU to be shared by several program modules taking turns one-at-a-time for a fraction of a second during each turn, so that operation of the programs appears to be simultaneous.
      <br/>
      The controller includes a central processing unit (CPU) 352 connected to electronic memory 354 and IOCs 356, 358, 360 and 362 connected with respective terminals 364, 366, 368 and 370.
      <br/>
      Program module 372 controls the CPU and IOC 356 to receive and transmit control signals to the IOUs.
      <br/>
      For example, the service controller may receive a request from one of the IOUs to read the files for a multimedia production.
      <br/>
      The files are each striped across a plurality of RASSs.
      <br/>
      Program module 372 conveys the request to program module 374 which schedules access through the commutator to read the files striped across the RASSs repeatedly sequentially in turn.
      <br/>
      Program module 374 controls the CPU and IOC 358 to communicate with the commutator.
      <br/>
      Program module 374 changes the state of the interconnection switches through the commutator in cycles so that during each cycle each IOU has access to each random access storage system across which files are striped that the IOU needs access to.
    </p>
    <p num="71">
      Program 376 controls the CPU and IOC 360 to transmit control signals to control the I/O of the RASSs so that blocks of data are stored or retrieved at precisely the correct time in coordination with the settings of the access switches in the commutator and resulting connections with the IOUs.
      <br/>
      Program 378 provides a user interface for imputing management commands and displaying messages and reports from the service controller to verify receipt of the commands and describe the status of the system.
    </p>
    <p num="72">
      Preferably, portion 380 of program 372 accepts requests to read blocks of files for a multimedia productions which is being restored from archival storage.
      <br/>
      Portion 380 allows multiple files to be simultaneously written by one IOU and read by another IOU.
      <br/>
      That is, portion 380 keeps track of which parts of the files for a production have been written, allows access to the parts for which writing is complete, and denies access to the parts for which writing is not complete.
      <br/>
      Program 374 has a portion 382 which schedules access through the commutator for reading blocks of files when access by another IOU has also been scheduled for writing blocks of the files.
      <br/>
      Program module 376 has a portion which controls the operation of the RASSs so that blocks can be read from files for a production alternately with writing blocks to the same files.
    </p>
    <p num="73">
      The service controller is programmable to provide the programmed apparatus (program modules, data structures and data) of the invention.
      <br/>
      The controller can be programmed by introducing signals and writing the signals to ROM 385 or the fast RAM 354.
      <br/>
      The signals may be introduced to the controller through one of the IOUs or from one of the RASSs or by replacing the ROM in a socket of a circuit board (not shown) of the controller, or by inserting a ROM cartridge 386 such as a PC card into a PC card slot 387 of the controller.
      <br/>
      The programming signals can be introduced to the service controller by inserting the replaceable media 188 such as a disk or tape into media drive 189 connected to controller 190.
      <br/>
      Alternately, the media drive may contain non-removable media and the drive is conveniently connectable/disconnectable from the controller.
      <br/>
      The media and drive cooperate to generate the programming signals.
      <br/>
      The signals can be introduced from another computer system 191 through a communication network 192 connected to IOC 193.
      <br/>
      For example an internet server can be connected through the telephone system using MODEM 194.
      <br/>
      In a similar manor the IOUs and/or RASSs may also be programmable in order to implement the invention.
    </p>
    <p num="74">
      FIG. 5 illustrates an embodiment 400 of a random access storage system (RASS) of the invention.
      <br/>
      A system controller 401 may be connected through IOC 402 to communicate with the commutator 106 (see FIG. 1) and through IOC 403 to communicate with server controller 212 (see FIG. 1).
      <br/>
      The controller communicates through IOCs 404 and 405 with one or more groups of disk drives 406 and 407 respectively.
      <br/>
      Preferably, files are striped across a plurality of the disk drives with information blocks sequentially written to each drive of a parity group and parity data written to a parity drive of the group so that if one of the drives fails, the data is not lost, and system performance is not significantly degraded.
      <br/>
      Each drive such as disk drive 408 may be a magnetic hard disk, or a rewritable optical disk drive such as a DVD drive.
      <br/>
      An embedded controller (CPU) 409 is operated by programs in memory 410 which also provides buffers.
      <br/>
      Program 411 controls the CPU to allow blocks of files to be read from the system as soon as portion of blocks has been written to a file in the system.
    </p>
    <p num="75">
      FIG. 6 will be used to schematically illustrate the files of a multimedia production striped across multiple RASSs.
      <br/>
      Each RASS is represented by one of the disks 501, 502, 503, and 504.
      <br/>
      This system is shown with only four RASSs even though there will typically be many more RASSs.
      <br/>
      Only one disk is used to represent each RASS even though each RASS typically has up to 14 hard drives, and each hard drive typically has 5 to 10 disks.
      <br/>
      The disks are shown with four tracks each holding only about 36 blocks each, but hard drive disks typically have thousands of tracks each holding thousands of blocks of data.
      <br/>
      Typically, each IOU is connected to each RASS one-at-a-time in turn through the commutator.
      <br/>
      Of course if there are more IOUs than RASSs then during each connection cycle each IOU will take some turns being idle.
      <br/>
      For example, if the bandwidth from the RASSs through the commutator is 40 MBs, but the IOUs only need 4 MBs then a commutator allowing 10 times as many IOUs as RASSs is possible.
    </p>
    <p num="76">
      The number of information blocks accessed in each connection depends on the connection time between switches of the commutator and on the data rate.
      <br/>
      In this example, an IOU will access five blocks of an RASS during each connection.
      <br/>
      When a multimedia data stream is received into an IOU, the stream is converted into blocks that are formatted for storage into files on the RASSs.
      <br/>
      The blocks from the IOU are transmitted through commutator 106 and striped across files on the RASSs.
      <br/>
      Most of the data will be stored in a video file, some of the data will be stored in audio files, and some of the data will be stored into one or more auxiliary files.
    </p>
    <p num="77">
      As an example, the first portion of a video file is written from a first IOU.
      <br/>
      The first IOU is connected to RASS 501 and five blocks V1-V5 are written to the RASS.
      <br/>
      At the same time a second IOU is connected to RASS 502, a third IOU is connected to RASS 503 and a fourth IOU is connected to RASS 504.
      <br/>
      Then the first IOU is connected to RASS 502 and another five blocks V6-V10 are written.
      <br/>
      Again at the same time the second IOU is connected to RASS 503, the third IOU is connected to RASS 504, and the fourth IOU is connected to RASS 501.
      <br/>
      Then the first IOU is connected to RASS 503 and another five blocks V11-V15 are written, and then the first IOU is connected to RASS 504 and another five blocks V16-V20 of the video file is written.
    </p>
    <p num="78">
      Then, for example, a portion of the audio file for the production is written.
      <br/>
      The first IOU is reconnected to RASS 501 and five blocks A1-A5 of the audio file is written; then the first IOU is reconnected to RASS 502 and the next five blocks A5-A10 of the audio file is written; then the first IOU is reconnected to RASS 503 and the next five blocks A11-A15 of the audio file is written; and finally the first IOU is reconnected to RASS 504 and the next five blocks A16-A20 are written.
    </p>
    <p num="79">
      Then in a similar way, the first portion of the auxiliary file for the production is written striped across all the RASSs.
      <br/>
      The first five blocks X1-X5 are written to RASS 501; then the next five blocks X6-X10 are written to RASS 502; then the next five blocks X11-X15 are written to RASS 503; and finally, the next five blocks X16-X20 are written to RASS 504.
    </p>
    <p num="80">Sequential portions of the files for the production continue to be striped across the RASSs until the production is fully loaded into the RASSs.</p>
    <p num="81">
      FIG. 7 illustrates the files for a multimedia production that is archived interleaved in the tracks of a digital tape 550.
      <br/>
      Tracks can be written on the tape in many different ways, but is shown with slanted tracks produced by a rotating head similar to those produced by a VCR.
      <br/>
      Typically the angle between the longitudinal direction of the tape and the track will be about 6 (degree) , but is shown at a much higher angle to allow the contents of several tracks to be shown on this short segment.
      <br/>
      Typically, a large number of blocks of data will be recorded on each track, but again, the angle is exagerated so that the tracks are relatively shorter and the blocks have been made large for illustration so that each track is shown containing only three tape formatted blocks.
      <br/>
      Information from several blocks of random access storage formatted data is packed into each tape formatted block by an IOU, and the tape blocks are channel encoded and written into the tracks on the tape.
    </p>
    <p num="82">
      In track 552, block 554 contains the data from blocks V1-V4 of the video file, block A1 of the audio file and block X1 the auxiliary file of FIG. 6.
      <br/>
      In this particular example, each tape block holds the data from six disk blocks, error detecting and correcting data, and some space 556 in the tape blocks is used to facilitate restoring the data to the disk files, for example, to identify the file associated with each disk drive.
      <br/>
      The blocks are stored interleaved as shown in approximately the temporal order required for generating a multimedia data stream so that when restoration of the files to the hard drives begin, the disk files very quickly contain sufficient data to allow the production to be played.
    </p>
    <p num="83">
      FIG. 8 illustrates a specific embodiment of the method of the invention.
      <br/>
      Step 560 provides a signal to retrieve information from a random access storage system onto a network.
      <br/>
      Step 562 copies disk formatted information blocks from the network into disk formatted information blocks in a buffer.
      <br/>
      Step 564 copies data from the disk formatted information blocks in the same buffer onto the network as sequentially formatted information blocks.
      <br/>
      Steps 566 provides a signal to store the sequentially reformatted information blocks from the network into a sequential access storage system.
    </p>
    <p num="84">
      The invention has been disclosed with reference to specific preferred embodiments, to enable those skilled in the art to make and use the invention, and to describe the best mode contemplated for carrying out the invention.
      <br/>
      Those skilled in the art may modify or add to these embodiments or provide other embodiments without departing from the spirit of the invention.
      <br/>
      Thus, the scope of the invention is only limited by the following claims:
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>I claim:</claim-text>
      <claim-text>1. A computer system for archiving data, comprising:</claim-text>
      <claim-text>an electronic memory; means to connect a network input for communicating with the memory; means to connect a network output for communicating with the memory; disk retrieval means to provide a signal for retrieving information from files of a random access storage system onto the network input; disk input means to copy data of disk formatted information blocks from the network input into disk formatted information blocks in a buffer in the memory; sequential output means to copy data from such disk formatted information blocks in the same buffer onto the network output reformatted into sequential formatted information block which is larger than the disk formatted blocks and which contains information from a plurality of the disk formatted blocks;</claim-text>
      <claim-text>and sequential storing means to signal a sequential access storage system to store the sequential formatted information blocks from the network output.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The computer network of claim 1 in which: the bandwidth for moving data between the disk formatted blocks in the buffer and the network input is substantially greater than the bandwidth for moving and reformatting the data between the disk formatted blocks in the buffer and the network output; the sequential output means include means for creating a sequential output list of address-size pairs in the memory describing a process for moving portions of data from the disk formatted blocks in the buffer onto the network output in blocks formatted for sequential access storage; the sequential output means include means for executing movement of the data from the disk formatted blocks in the buffer onto the network output in blocks formatted for sequential access storage, using a single archetected instruction, and according to the sequential output list of address-size pairs; the network further comprises sequential retrieval means to provide a signal for retrieving information from the sequential access storage system onto the network input; the network further comprises sequential input means to copy information of sequential formatted information blocks from the network input reformatted into multiple disk formatted information blocks, for each sequential formatted information block, in the buffer in the memory; the sequential input means include means for creating a sequential input list of address-size pairs in the memory describing a process for moving portions of data from the network input in blocks formatted for sequential access storage into the buffer in blocks formatted for random access storage; the sequential input means include means for executing movement of the data from the network input in blocks formatted for sequential access storage into the buffer in blocks formatted for random access storage, using a single archetected instruction, and according to the sequential output list of address-size pairs; the network further comprises disk output means to copy data directly from such disk formatted information blocks in the same buffer, used by the sequential input means, onto the network output as disk formatted information blocks using a single archetected instruction; the network further comprises disk storing means to signal the random access storage system to store disk formatted information blocks from the network output; the network further comprises stream output means to copy data directly from such disk formatted information blocks in the same buffer, used by the disk input means onto the network output as a multimedia data stream played in real time; the stream output means include means for creating a stream output list of address-size pairs in the memory describing a process for moving portions of data from the disk formatted blocks in the buffer onto the network output as a multimedia data stream; the stream output means include means for executing movement of the data from the disk formatted blocks in the buffer onto the network output as a multimedia output stream, using a single archetected instruction, and according to the stream output list of address-size pairs; the network further comprising stream playing means to signal a destination of a multimedia data stream to synchronize receiving the stream from the network output; the network further comprising stream recording means to provide a signal to initiate receiving information from a source of a multimedia data stream onto the network input; the network further comprises stream input means to copy data of the multimedia data stream from the network input into a multitude of disk formatted information blocks in the buffer; the stream input means include means for creating a stream input list of address-size pairs in the memory describing a process for moving portions of data from the network input in a multimedia data stream into the buffer in blocks formatted for random access storage; the stream input means include means for executing movement of the data from the network input in a multimedia data stream, into the buffer in blocks formatted for random access in the buffer, using a single archetected instruction, and according to the stream input list of address-size pairs; a processor provides communication between the network input and the memory and between the memory and the network output; the disk input means includes a disk input program module in the memory to control the processor to copy data from disk blocks in the network input into disk blocks in the buffer; the sequential output means includes a sequential output program module in the memory to control the processor to copy the data in the disk blocks in the buffer into the sequential formatted blocks in the network output; the network further comprises archiving means for the disk input program module and the sequential output program module to both control the same processing unit in short periods at interleaved times; the disk output means includes a disk output program module in the memory to control the processor to copy data from disk blocks in the buffer into disk blocks in the network output; the sequential input means includes a sequential input program module in the memory to control the processor to copy the data in the disk blocks in the network input into the sequential formatted blocks in the buffer; the network further comprises restoring means for the sequential input program module and the disk output program module to both control the same processing unit in short periods interleaved in time to restore data from the sequential access storage system into the random access storage system; the stream input means includes a stream input program module in the memory to control the processor to copy the data in the multimedia data stream in the network input into the disk formatted blocks in the buffer; the network further comprises recording means for the stream input program module and the disk output program module to both control the same processing unit in short periods interleaved in time to record a multimedia data stream from the network input into the random access storage systems; the stream output means includes a stream output program module in the memory to control the processor to copy data from disk formatted blocks in the buffer into a multimedia data stream in the network output; the network further comprises playing means for the disk input program module and the stream output program module to both control the same processing unit in short periods at interleaved times to play a multimedia production from the random access storage system onto the network output; the multimedia data in random access storage includes multiple files including at least one video file and at least one audio file and at least one auxiliary file containing timing data for generating a multimedia data stream; the data in random access storage is formatted into fixed size blocks of a first size and the data in sequential storage is formatted into fixed size blocks of a different larger second size;</claim-text>
      <claim-text>during archiving, information from multiple blocks of disk formatted data is copied into one block of sequential access formatted data;</claim-text>
      <claim-text>and during restoring data from one block of sequential access formatted data is copied into multiple blocks of disk formatted data; the fixed size blocks of the second size are at least twice as large as the fixed size blocks of the first size; the fixed size blocks of the second size contain six fixed size blocks of the first size; the multimedia data in sequential access storage include one file with data from multiple random access files including at least a video file, an audio file, and an auxiliary file, with the data from the different files interleaved in approximately the temporal order in which the data is required for playing a production; the multimedia data in sequential access storage includes additional information for restoring the multimedia data into multiple files in random access storage; the audio files in random access storage include at least 2 files and each audio file includes means for producing an independent audio channel;</claim-text>
      <claim-text>and the video files in random access storage includes multiple bit reduced images in JPEG format.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A computer network for restoring data, comprising: an electronic memory; means to connect a network input for communicating with the memory; means to connect a network output for communicating with the memory; sequential retrieval means to provide a signal for retrieving information from a sequential access storage system onto the network input; sequential input means to copy information of sequential formatted information blocks from the network input reformatted into multiple disk formatted information blocks, for each sequential formatted information block, in a buffer in the memory; disk output means to copy data directly from such disk formatted blocks in the same buffer onto the network output as disk formatted information blocks;</claim-text>
      <claim-text>and disk storing means to signal a random access storage system to store disk formatted information blocks from the network output.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The computer network of claim 3 in which: the network further comprises disk retrieval means to provide a signal for retrieving information from files of a random access storage system onto a network input; the network further comprises disk input means to copy data of disk formatted information blocks from the network input into disk formatted information blocks in a buffer in the memory; the network further comprises sequential output means to copy data from such disk formatted information blocks in the same buffer onto the network output reformatted into sequential formatted information blocks;</claim-text>
      <claim-text>and the sequential output means include means for creating a sequential output list of address-size pairs in the memory describing a process for moving portions of data from the blocks in the buffer, formatted for random access onto the network output in blocks formatted for sequential access storage; the sequential output means include means for executing movement of the data from the blocks in buffer, formatted for random access onto the network output in blocks formatted for sequential access storage, using a single archetected instruction, and according to the sequential output list of address-size pairs; the network further comprises sequential storing means to signal a sequential access storage system to store the sequential formatted information blocks from the network output; the sequential input means include means for creating a sequential input list of address-size pairs in the memory describing a process for moving portions of data from the network input in blocks formatted for sequential access storage into the buffer in blocks formatted for random access storage; the sequential input means include means for executing movement of the data from the network input in blocks formatted for sequential access storage, into the buffer in blocks formatted for random access storage, using a single archetected, instruction and according to the sequential input list of address-size pairs; the network further comprises stream output means to copy data directly from such disk formatted information blocks in the same buffer, used by the disk input means, onto the network output as a multimedia data stream played in real time; the stream output means include means for creating a stream output list of address-size pairs in the memory describing a process for moving portions of data from the disk formatted blocks in the buffer onto the network output as a multimedia data stream; the stream output means include means for executing movement of the data from the disk formatted blocks in the buffer onto the network output as a multimedia output stream, using a single archetected instruction, and according to the stream output list of address-size pairs; the network further comprising stream playing means to signal a destination of a multimedia data stream to synchronize receiving the stream from the network output; the network further comprising stream recording means to provide a signal to initiate receiving information from a source of a multimedia data stream onto the network input; the network further comprises stream input means to copy data of the multimedia data stream from the network input into a multitude of disk formatted information blocks in the buffer; the steam input means include means for creating a stream input list of address-size pairs in the memory describing a process for moving portions of data from the network input in a multimedia data stream into the buffer in blocks formatted for random access storage; the stream input means include means for executing movement of the data from the network input in a multimedia data stream, into the buffer in blocks formatted for random access in the buffer, using a single archetected instruction, and according to the stream input list of address-size pairs; a processor provides communication between the network input and the memory and between the memory and the network output; the disk input means includes a disk input program module in the memory to control the processor to copy data from disk blocks in the network input into disk blocks in the buffer; the sequential output means includes a sequential output program module in the memory to control the processor to copy the data in the disk blocks in the buffer into the sequential formatted blocks in the network output; the network further comprises archiving means for the disk input program module and the sequential output program module to both control the same processing unit in short periods at interleaved times; the disk output means includes a disk output program module in the memory to control the processor to copy data from disk blocks in the buffer into disk blocks in the network output; the sequential input means includes a sequential input program module in the memory to control the processor to copy the data in the disk blocks in the network input into the sequential formatted blocks in the buffer; the network further comprises restoring means for the sequential input program module and the disk output program module to both control the same processing unit in short periods interleaved in time to restore data from the sequential access storage system into the random access storage systems; the stream input means includes a stream input program module in the memory to control the processor to copy the data in the multimedia data stream in the network input into the disk formatted blocks in the buffer; the network further comprises recording means for the stream input program module and the disk output program module to both control the same processing unit in short periods interleaved in time to record a multimedia data stream from the network input into the random access storage systems; the stream output means includes a stream output program module in the memory to control the processor to copy data from disk formatted blocks in the buffer into a multimedia data stream in the network output; the network further comprises playing means for the disk input program module and the stream output program module to both control the same processing unit in short periods at interleaved times to play a multimedia production from the random access storage system onto the network output; the bandwidth for moving data between the disk formatted blocks in the buffer and the network is substantially greater than the bandwidth for moving and reformatting the data between the disk formatted blocks in the buffer and the sequential formatted information blocks on the network; the multimedia data in random access storage includes multiple files including at least one video file and at least one audio file and at least one auxiliary file containing timing data for generating a multimedia data stream; the data in random access storage is formatted into fixed size blocks of a first size and the data in sequential storage is formatted into fixed size blocks of a different larger second size;</claim-text>
      <claim-text>during archiving information from multiple blocks of disk formatted data is copied into one block of sequential access formatted data;</claim-text>
      <claim-text>and during restoring data from one block of sequential access formatted data is copied into multiple blocks of disk formatted data; the fixed size blocks of the second size are at least twice as large as the fixed size blocks of the first size; the fixed size blocks of the second size contain six fixed size blocks of the fist size; the multimedia data in sequential access storage include one file with data from multiple random access files including at least a video file, an audio file, and an auxiliary file, with the data from the different files interleaved in approximately the temporal order in which the data is required for playing a production; the multimedia data in sequential access storage includes additional information for restoring the multimedia data into multiple files in random access storage; the audio files in random access storage include at least 2 files and each audio file includes means for producing an independent audio channel;</claim-text>
      <claim-text>and the video files in random access storage includes multiple bit reduced images in JPEG format.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A computer network for playing a multimedia data stream, comprising: a memory; means to connect a network input for communicating with the memory; means to connect a network output for communicating with the memory; disk retrieval means to provide a signal for retrieving information from files of a random access storage system onto the network input; disk input means to copy data of blocks of disk formatted information from the network input into disk formatted information blocks in a buffer in the memory; stream output means to copy data directly from such disk formatted information blocks in the same buffer onto the network output reformatted as a multimedia data stream played in real time;</claim-text>
      <claim-text>and stream playing means to signal a destination of the multimedia data stream to synchronize receiving the stream from the network output.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The computer network of claim 5 in which: the network further comprises sequential output means to copy data from such disk formatted information blocks in the same buffer onto the network output reformatted into sequential formatted information blocks; the sequential output means include means for creating a sequential output list of address-size pairs in the memory describing a process for moving portions of data from the disk formatted blocks in the buffer onto the network output in blocks formatted for sequential access storage; the sequential output means include means for executing movement of the data from the blocks in buffer, formatted for random access onto the network output in blocks formatted for sequential access storage, using a single archetected instruction, and according to the sequential output list of address-size pairs; the network further comprises sequential storing means to signal a sequential access storage system to store the sequential formatted information blocks from the network output; the network further comprises sequential retrieval means to provide a signal for retrieving information from the sequential access storage system onto the network input; the network further comprises sequential input means to copy information of sequential formatted information blocks from the network input reformatted into multiple disk formatted information blocks, for each sequential formatted information block, in the buffer in the memory; the sequential input means include means for creating a sequential input list of address-size pairs in the memory describing a process for moving portions of data from the network input in blocks formatted for sequential access storage into the buffer in blocks formatted for random access storage; the sequential input means include means for executing movement of the data from the network input in blocks formatted for sequential access storage, into the buffer in blocks formatted for random access storage, using a single archetected instruction, and according to the sequential input list of address-size pairs; the network further comprises disk output means to copy data directly from such disk formatted information blocks in the same buffer, used by the sequential input means, onto the network output as disk formatted information blocks using a single archetected instruction; the network further comprises disk storing means to signal a random access storage system to store disk formatted information blocks from the network output; the stream output means include means for creating a stream output list of address-size pairs in the memory describing a process for moving portions of data from the blocks in the buffer, formatted for random access, onto the network output as a multimedia data stream; the stream output means include means for executing movement of the data from the blocks in the buffer, formatted for random access, onto the network output as a multimedia output stream, using a single archetected instruction, and according to the stream output list of address-size pairs; the network further comprising stream recording means to provide a signal to initiate receiving information from a source at the network input; the network further comprises stream input means to copy data of a multimedia data stream from the network input into a multitude of disk formatted information blocks in the buffer; the steam input means include means for creating a stream input list of address-size pairs in the memory describing a process for moving portions of data from the network input in a multimedia data stream into the buffer in blocks formatted for random access storage; the stream input means include means for executing movement of the data from the network input in a multimedia data stream, into the buffer in blocks formatted for random access in the buffer, using a single archetected instruction, and according to the stream input list of address-size pairs; a processor provides communication between the network input and the memory and between the memory and the network output; the disk input means includes a disk input program module in the memory to control the processor to copy data from disk blocks in the network input into disk blocks in the buffer; the sequential output means includes a sequential output program module in the memory to control the processor to copy the data in the disk blocks in the buffer into the sequential formatted blocks in the network output; the network further comprises archiving means for the disk input program module and the sequential output program module to both control the same processing unit in short periods at interleaved times; the disk output means includes a disk output program module in the memory to control the processor to copy data from disk blocks in the buffer into disk blocks in the network output; the sequential input means includes a sequential input program module in the memory to control the processor to copy the data in the disk blocks in the network input into the sequential formatted blocks in the buffer; the network further comprises restoring means for the sequential input program module and the disk output program module to both control the same processing unit in short periods interleaved in time to restore data from the sequential access storage system into the random access storage systems; the stream input means includes a stream input program module in the memory to control the processor to copy the data in the multimedia data stream in the network input into the disk formatted blocks in the buffer; the network further comprises recording means for the stream input program module and the disk output program module to both control the same processing unit in short periods interleaved in time to record a multimedia data stream from the network input into the random access storage systems; the stream output means includes a stream output program module in the memory to control the processor to copy data from disk formatted blocks in the buffer into a multimedia data stream in the network output; the network further comprises playing means for the disk input program module and the stream output program module to both control the same processing unit in short periods at interleaved times to play a multimedia production from the random access storage system onto the network output; the bandwidth for moving data between the disk formatted blocks in the buffer and the network is substantially greater than the bandwidth for moving and reformatting the data between the disk formatted blocks in the buffer and the sequential formatted information blocks on the network; the multimedia data in random access storage includes multiple files including at least one video file and at least one audio file and at least one auxiliary file containing timing data for generating a multimedia data stream; the data in random access storage is formatted into fixed size blocks of a first size and the data in sequential storage is formatted into fixed size blocks of a different larger second size;</claim-text>
      <claim-text>during archiving information from multiple blocks of disk formatted data is copied into one block of sequential access formatted data;</claim-text>
      <claim-text>and during restoring data from one block of sequential access formatted data is copied into multiple blocks of disk formatted data; the fixed size blocks of the second size are at least twice as large as the fixed size blocks of the first size; the fixed size blocks of the second size contain six fixed size blocks of the fist size; the multimedia data in sequential access storage include one file with data from multiple random access files including at least video file, an audio file, and an auxiliary file, with the data from the different files interleaved in approximately the temporal order in which the data is required for playing a production; the multimedia data in sequential access storage includes additional information for restoring the multimedia data into multiple files in random access storage; the audio files in random access storage include at least 2 files and each audio file includes means for producing an independent audio channel;</claim-text>
      <claim-text>and the video files in random access storage includes multiple bit reduced images in JPEG format.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A computer network for recording a multimedia data stream, comprising: a memory; means to connect a network input for communicating with the memory; means to connect a network output for communicating with the memory; stream recording means to provide a signal to initiate receiving information from a source of a multimedia data stream onto the network input; stream input means to copy data of the multimedia data stream from the network input reformatted into a multitude of disk formatted information blocks in a buffer in the memory; disk output means to copy data of the blocks of disk formatted information from the same buffer onto the network output in disk formatted information blocks;</claim-text>
      <claim-text>and disk storing means to signal a random access storage system to store information from the network output.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The computer network of claim 7 in which: the network further comprises disk retrieval means to provide a signal for retrieving information from files of a random access storage system onto the network input; the network further comprises disk input means to copy data of disk formatted information blocks from the network input into disk formatted information blocks in a buffer in the memory; the network further comprises sequential output means to copy data from such disk formatted information blocks in the same buffer onto the network output reformatted into a sequential formatted information blocks;</claim-text>
      <claim-text>and the sequential output means include means for creating a sequential output list of address-size pairs in the memory describing a process for moving portions of data from the blocks in the buffer, formatted for random access onto the network output in blocks formatted for sequential access storage; the sequential output means include means for executing movement of the data from the blocks in buffer, formatted for random access onto the network output in blocks formatted for sequential access storage, using a single archetected instruction, and according to the sequential output list of address-size pairs; the network further comprises sequential storing means to signal a sequential access storage system to store the sequential formatted information blocks from the network output; the network further comprises sequential retrieval means to provide a signal for retrieving information from the sequential access storage system onto the network input; the network further comprises sequential input means to copy information of sequential formatted information blocks from the network input reformatted into multiple disk formatted information blocks, for each sequential formatted information block, in the buffer in the memory; the sequential input means include means for creating a sequential input list of address-size pairs in the memory describing a process for moving portions of data from the network input in blocks formatted for sequential access storage into the buffer in blocks formatted for random access storage; the sequential input means include means for executing movement of the data from the network input in blocks formatted for sequential access storage, into the buffer in blocks formatted for random access storage, using a single archetected instruction, and according to the sequential input list of address-size pairs; the network further comprises stream output means to copy data directly from such disk formatted information blocks in the same buffer, used by the disk input means, onto the network output as a multimedia data stream played in real time; the stream output means include means for creating a stream output list of address-size pairs in the memory describing a process for moving portions of data from disk formatted the blocks in the buffer onto the network output as a multimedia data stream; the stream output means include means for executing movement of the data from disk formatted the blocks in the buffer onto the network output as a multimedia output stream, using a single archetected instruction, and according to the stream output list of address-size pairs; the network further comprising stream playing means to signal a designation of a multimedia data stream to synchronize receiving the stream from the network output; the steam input means include means for creating a stream input list of address-size pairs in the memory describing a process for moving portions of data from the network input in a multimedia data stream into the buffer in blocks formatted for random access storage; the stream input means include means for executing movement of the data from the network input in a multimedia data stream, into the buffer in blocks formatted for random access, using a single architected instruction, and according to the stream input list of address-size pairs; a processor provides communication between the network input and the memory and between the memory and the network output; the disk input means includes a disk input program module in the memory to control the processor to copy data from disk blocks in the network input into disk blocks in the buffer; the sequential output means includes a sequential output program module in the memory to control the processor to copy the data in the disk blocks in the buffer into the sequential formatted blocks in the network output; the network further comprises archiving means for the disk input program module and the sequential output program module to both control the same processing unit in short periods at interleaved times; the disk output means includes a disk output program module in the memory to control the processor to copy data from disk blocks in the buffer into disk blocks in the network output; the sequential input means includes a sequential input program module in the memory to control the processor to copy the data in the disk blocks in the network input into the sequential formatted blocks in the buffer; the network further comprises restoring means for the sequential input program module and the disk output program module to both control the same processing unit in short periods interleaved in time to restore data from the sequential access storage system into the random access storage systems;</claim-text>
      <claim-text>the stream input means includes a stream input program module in the memory to control the processor to copy the data in the multimedia data stream in the network input into the disk formatted blocks in the buffer; the network further comprises recording means for the stream input program module and the disk output program module to both control the same processing unit in short periods interleaved in time to record a multimedia data stream from the network input into the random access storage systems; the stream output means includes a stream output program module in the memory to control the processor to copy data from disk formatted blocks in the buffer into a multimedia data stream in the network output; the network further comprises playing means for the disk input program module and the stream output program module to both control the same processing unit in short periods at interleaved times to play a multimedia production from the random access storage system onto the network output; the bandwidth for moving data between the disk formatted blocks in the buffer and the network is substantially greater than the bandwidth for moving and reformatting the data between the disk formatted blocks in the buffer and the sequential formatted information blocks on the network; the multimedia data in random access storage includes multiple files including at least one video file, one audio file, and one auxiliary file containing timing data for generating a multimedia data stream; the data in random access storage is formatted into fixed size blocks of a first size and the data in sequential storage is formatted into fixed size blocks of a different larger second size;</claim-text>
      <claim-text>during archiving information from multiple blocks of disk formatted data is copied into one block of sequential access formatted data;</claim-text>
      <claim-text>and during restoring data from one block of sequential access formatted data is copied into multiple blocks of disk formatted data; the fixed size blocks of the second size are at least twice as large as the fixed size blocks of the first size; the fixed size blocks of the second size contain six fixed size blocks of the fist size; the multimedia data in sequential access storage include one file with data from multiple random access files including at least video file, an audio file, and an auxiliary file, with the data from the different files interleaved in approximately the temporal order in which the data is required for playing a production; the multimedia data in sequential access storage includes additional information for restoring the multimedia data into multiple files in random access storage; the audio files in random access storage include at least 2 files and each audio file includes means for producing an independent audio channel;</claim-text>
      <claim-text>and</claim-text>
      <claim-text>the video files in random access storage includes multiple bit reduced images in JPEG format.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A multimedia data server, comprising: a memory; means to connect a first communications network for communicating with the memory; means to connect a second communications network for communication with the memory; data transfer means to copy multimedia data between disk formatted information blocks in a buffer in the memory and data in a different format on the first network, including: means for creating a list of address-size pairs in the memory describing a process for moving portions of data between the disk formatted blocks in the buffer and the first network;</claim-text>
      <claim-text>and means for executing movement of the data between the disk formatted blocks in the buffer and the first network, according to the list of address-size pairs; disk transfer means to copy data in the blocks of disk formatted information between the second network and the disk formatted information blocks in the same buffer;</claim-text>
      <claim-text>and disk control means to signal a random access storage system to move information between the second network and the random access storage system.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. Apparatus for programming a multimedia network for archiving data, comprising: apparatus to provide disk retrieval means to provide a signal for retrieving information from files of a random access storage system onto a network input; apparatus to provide disk input means to copy data of disk formatted information blocks from the network input into disk formatted information blocks in a buffer in the memory; apparatus to provide sequential output means to copy data from such disk formatted information blocks in the same buffer onto the network output in sequential formatted information blocks;</claim-text>
      <claim-text>and apparatus to provide sequential storing means to signal a sequential access storage system to store information from the network output.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. Apparatus for programming a multimedia network for restoring data, comprising: apparatus to provide sequential retrieval means to provide a signal for retrieving information from a sequential access storage system onto a network input; apparatus to provide sequential input means to copy information of sequential formatted information blocks from the network input into multiple disk formatted information blocks, for each sequential formatted information block, in a buffer in the memory; apparatus to provide disk output means to copy data directly from such disk formatted blocks in the same buffer onto the network output as disk formatted information blocks;</claim-text>
      <claim-text>and apparatus to provide disk storing means to signal a random access storage system to store information from the network output.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. Apparatus for programming a computer network for playing a multimedia data stream, comprising: apparatus to provide disk retrieval means to provide a signal for retrieving information from files of a random access storage system onto a network input; apparatus to provide disk input means to copy data of blocks of disk formatted information from the network input into disk formatted information blocks in a buffer in the memory; apparatus to provide stream output means to copy data directly from such disk formatted information blocks in the same buffer onto the network output reformatted as a multimedia data stream played in real time;</claim-text>
      <claim-text>and apparatus to provide stream playing means to signal a destination of the multimedia data stream to synchronize receiving the stream from the network output.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. Apparatus for programming a computer network for recording a multimedia data stream, comprising: apparatus to provide stream recording means to provide a signal to initiate receiving information from a source of a multimedia data stream onto a network input; apparatus to provide stream input means to copy data of the multimedia data stream from the network input reformatted into a multitude of disk formatted information blocks in a buffer in the memory; apparatus to provide disk output means to copy data of the blocks of disk formatted information from the same buffer onto the network output in disk formatted information blocks;</claim-text>
      <claim-text>and apparatus to provide disk storing means to signal a random access storage system to store information from the network output.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. Apparatus for programming a multimedia data server, comprising: apparatus to provide data transfer means to copy multimedia data between disk formatted information blocks in a buffer in the memory and data in a different format on a first network, including: means for creating a list of address-size pairs in the memory describing a process for moving portions of data between the disk formatted blocks in the buffer and the network;</claim-text>
      <claim-text>and means for executing movement of the data between the disk formatted blocks in the buffer and the first network, according to the list of address-size pairs; apparatus to provide disk transfer means to copy data in the blocks of disk formatted information between the second network and the disk formatted information blocks in the same buffer;</claim-text>
      <claim-text>and apparatus to provide disk control means to signal a random access storage system to move information between the second network and the random access storage system.</claim-text>
    </claim>
  </claims>
</questel-patent-document>