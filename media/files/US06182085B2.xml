<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182085B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182085</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182085</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22198184" extended-family-id="42108866">
      <document-id>
        <country>US</country>
        <doc-number>09086379</doc-number>
        <kind>A</kind>
        <date>19980528</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09086379</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165445</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>8637998</doc-number>
        <kind>A</kind>
        <date>19980528</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09086379</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/30        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   9/50        20060101A I20070721RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>50</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20070721</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <further-classification sequence="1">
        <text>345440000</text>
        <class>345</class>
        <subclass>440000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707999102</text>
        <class>707</class>
        <subclass>999102</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>707999104</text>
        <class>707</class>
        <subclass>999104</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>707999107</text>
        <class>707</class>
        <subclass>999107</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>707E17108</text>
        <class>707</class>
        <subclass>E17108</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>709201000</text>
        <class>709</class>
        <subclass>201000</subclass>
      </further-classification>
      <further-classification sequence="7">
        <text>718105000</text>
        <class>718</class>
        <subclass>105000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/5083</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>5083</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30864</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30864</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99943</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99943</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99945</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99945</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99948</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99948</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>43</number-of-claims>
    <exemplary-claim>14</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>10</number-of-drawing-sheets>
      <number-of-figures>10</number-of-figures>
      <image-key data-format="questel">US6182085</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Collaborative team crawling:Large scale information gathering over the internet</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>MARKS JOSEPH W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5546517</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5546517</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>POPPEN RICHARD F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5706503</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5706503</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>BRENDEL JUERGEN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5774660</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5774660</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>DOLAN MICHAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5963208</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5963208</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Nihar R. Mahapatra and Shantanu Dutt, "Scalable Global and Local Hashing Strategies for Duplicate Pruning in Parallel A* Graph Search", IEEE Transactions On Parallel And Distributed Systems, vol. 8, No. 7, pp. 738-756, Jul. 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Thomas E. Anderson, Edward D. Lazowska, and Henry M. Levy, "The Performance Implications of Thread Management Alternatives for Shared-Memory Multiprocessors", Performance Evaluation Review vol. 17, ACM, pp. 49-60, Jul. 1997.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Eichstaedt, Matthias</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Ford, Daniel Alexander</name>
            <address>
              <address-1>Los Gatos, CA, US</address-1>
              <city>Los Gatos</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Lehman, Tobin Jon</name>
            <address>
              <address-1>Los Gatos, CA, US</address-1>
              <city>Los Gatos</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Lu, Qi</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Teng, Shang-Hua</name>
            <address>
              <address-1>Champaign, IL, US</address-1>
              <city>Champaign</city>
              <state>IL</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Tran, Esq., Khanh O.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Breene, John E.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A distributed collection of web-crawlers to gather information over a large portion of the cyberspace.
      <br/>
      These crawlers share the overall crawling through a cyberspace partition scheme.
      <br/>
      They also collaborate with each other through load balancing to maximally utilize the computing resources of each of the crawlers.
      <br/>
      The invention takes advantage of the hierarchical nature of the cyberspace namespace and uses the syntactic components of the URL structure as the main vehicle for dividing and assigning crawling workload to individual crawler.
      <br/>
      The partition scheme is completely distributed in which each crawler makes the partitioning decision based on its own crawling status and a globally replicated partition tree data structure.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">
      The present invention relates to a scalable method for collaborative web crawling and information processing.
      <br/>
      More particularly, the invention concerns a distributed collection of web crawlers used to cover a large portion of cyberspace where the crawlers share the overall cyberspace crawling and collaborate to maximally utilize computing resources.
    </p>
    <p num="3">2. Description of the Related Art</p>
    <p num="4">
      Cyberspace is a popular way for people and industries to rapidly gather information.
      <br/>
      However, because of the immense amount of information available in cyberspace, automatic information gathering, screening, and delivering systems have become a necessity.
    </p>
    <p num="5">
      One such system is the Grand Central Station (GCS) system being developed at the IBM Almaden Research Center in San Jose, Calif.
      <br/>
      This system combines numerous aspects of information discovery and dissemination into a single, convenient system.
      <br/>
      GCS performs many functions by providing an infrastructure that supports the discovery and tracking of information in a digital domain such as cyberspace, and disseminates these discoveries to those who have an interest.
    </p>
    <p num="6">
      One of the key components of virtually all information discovery system infrastructures accessing cyberspace (i.e. the Internet) is a Gatherer that systematically gathers data sources (crawls) and transforms or summarizes them into a single, uniform, metadata format.
      <br/>
      This format generally reflects the format found in the system used by the person requesting the information.
      <br/>
      Webcasting technology referred to as an "Internet push" is used to match the summarized information with users' profiles and re-channel each piece of information to those who need it.
    </p>
    <p num="7">
      To assist in gathering information, cyberspace data located at a particular site being reviewed is logically arranged into a graph or tree, commonly referred to as a directed graph.
      <br/>
      The Gatherer traverses this web-graph looking for desired information.
      <br/>
      Because of the sheer volume of data available, the graph reviewed might be very large in size.
      <br/>
      For example, a directed graph representing one million pieces of potentially interesting information would be enormous in size and complexity.
      <br/>
      A large graph would require a considerable amount of time for the Gatherer to process the information.
    </p>
    <p num="8">
      To make a Gatherer more efficient, a system that allows partitioning of a web-space directed graph is needed.
      <br/>
      Preferably, the system would also allow "team-crawling," where web-space information could be gathered using multiple processors assigned to crawling parts of the same space.
      <br/>
      However, for such a partitioning to work, problems encountered with automatically partitioning the cyberspace for load balancing among gathering processors needs to be overcome.
      <br/>
      This is a different and much more challenging problem than discussed in current traditional graph partitioning problem studies dealing with very large scale integrated (VLSI) circuit design and parallel scientific computing.
    </p>
    <p num="9">
      For example, one difficulty comes from the fact that a web-space directed graph, used to model the information at the site, is usually not discoverable before the crawling occurs.
      <br/>
      This is because web sites are dynamic, that is, they are always changing, having information added and deleted up to the point the crawling actually takes place.
      <br/>
      This constant changing of the information--and therefore the directed graph used to model the information--prevents directly applying the previously mentioned graph partitioning methods that are designed for static (non-changing) graphs.
      <br/>
      This lack of full knowledge of a web-graph construct before a web space is partitioned also requires the amount of load and the number of hyperlinks across a partition to be changeable at any stage of collaborative crawling, and hence dynamic re-partitioning and load re-balancing would also be necessary.
    </p>
    <p num="10">
      Another problem that would need to be overcome is the addressing problem that arises in attempting to partition a web-space.
      <br/>
      For example, given a uniform resource locator (URL)--a commonly used designator for the location of a piece of information (object)--a quick decision needs to be made as to which partition it would belong.
      <br/>
      Depending upon the partition, it would then be sent to a designated processor for crawling and processing.
      <br/>
      Further, because the web-graph is dynamic, a problem can arise in simply organizing a partition.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="11">
      Broadly, the present invention concerns a method using multiple processors for collaborative web crawling and information processing.
      <br/>
      More particularly, the invention concerns a distributed collection of web crawlers, each of which is used to cover a logical partition created within a cyberspace, where the crawlers share the overall cyberspace crawling and collaborate to maximize the use of available computing resources.
    </p>
    <p num="12">
      In one embodiment, the invention may be implemented to provide a method to dynamically partition a cyberspace and load balance crawling of the space across one or more Gatherers used by the web-crawling system.
      <br/>
      One such version includes using a hierarchial structure of URL names--an intermediate structure called a superpage--used as a basic unit for top level partitioning, where a superpage is a collection of URLs that share some initial sub-sequence of their URL names.
    </p>
    <p num="13">
      For example, for a URL such as "cs.cmu.edu/groups/parallel/parallel.html"--a specification of a path in a tree--may be viewed as a sequence of tokens (edu, cmu, cs, groups, parallel, parallel.html.) In this embodiment, a superpage whose initial tokens form "cs.cmu.edu/groups/parallel" can be formed, and another superpage whose initial tokens form "math.cmu.edu" may be formed.
      <br/>
      In one embodiment, this set of superpages may be formed dynamically during the crawling to accommodate any new information.
      <br/>
      By partitioning and re-partitioning superpages, the method dynamically balances a processing load incurred in information gathering.
    </p>
    <p num="14">
      The methods of the current invention implement an explicitly structured web-graph where every URL belongs to a superpage.
      <br/>
      Each superpage may contain pages that are reasonably local to each other, both in physical addresses and in hyperlink connections.
      <br/>
      If this web-graph is applied onto a set of superpages that are created dynamically, a smaller "coarsened" image of the original web-graph is obtained where this coarsened image approximates the larger web-graph.
    </p>
    <p num="15">
      In this invention, superpages may be automatically recognized and generated.
      <br/>
      Necessary information is obtained and maintained to measure the "volumes" of superpages as well as any pattern of connections among superpages.
      <br/>
      In another embodiment, an access rate for each processor to these superpages is maintained to determine if different processors have different access rates to each superpage.
      <br/>
      For example, a crawler located at IBM-Almaden in the United States may have a longer access time to a server located in Japan than a crawler located in Japan.
    </p>
    <p num="16">
      Once a set of superpages is formed and processor statistical data is obtained, the method employs a partitioning method to automatically generate favored partitions for the superpages, and maps them among available processors.
      <br/>
      The current invention can be used when all information crawlers/gatherers are located on a single, tightly coupled high-performance system as well as when they are scattered in any distributed environment.
    </p>
    <p num="17">
      The method allows the processors to communicate with each other to coordinate and handle hyperlinks across a partition.
      <br/>
      A communication buffer--referred to in this application as "Tspaces"--is used to support fast and inter-process communication.
      <br/>
      Logically, a Tspaces can be viewed as a large "white-board", or global communication buffer accessible by all processors.
      <br/>
      This function is described, for example, in IBM TSPACES, Peter Wyckoff, et al, IBM Sys.
      <br/>
      Journal, August 1998 to appear.
    </p>
    <p num="18">
      In another embodiment, the invention may be implemented to provide a digital signal processing system used to implement the method aspects of the present invention.
      <br/>
      In one embodiment, this system may include a plurality of processors located at one or more locations communicatively connected to storage.
      <br/>
      The system may also be communicatively linked to cyberspace, that is, to an information (object) intensive database.
      <br/>
      In other embodiments, and as discussed further in the detailed description and in relation to the drawings, other hardware commonly found in information gathering and processing systems may be included in the various system embodiments contemplated by the present invention.
    </p>
    <p num="19">In still another embodiment, the invention may be implemented to provide an article of manufacture comprising a data storage device tangibly embodying a program of machine-readable instructions executable by a digital data processing system to perform method steps for collaborative web crawling and information processing.</p>
    <p num="20">
      The invention affords its users with a number of distinct advantages.
      <br/>
      One advantage is that the invention provides for the design of an efficient and dynamic partitioner for handling a large dynamic web-graph.
      <br/>
      Another advantage is that a trade-off between hyperlink locality and network locality in dynamic load balancing may be explored and used to maximize system efficiencies.
    </p>
    <p num="21">
      Yet another benefit is that the present invention optimizes mapping between a web-subdomain and gathering processors that might have different processing and communication capacities.
      <br/>
      Another benefit is that when the size of a gathering process exceeds the size of available memory, a trade-off between introducing redundant computation and accurate computation may be studied and implemented.
      <br/>
      One more advantage is that the invention develops an efficient scheme to determine what fraction of a web-graph that has already been explored.
    </p>
    <p num="22">The present invention also provides a number of other advantages and benefits, which should be apparent from the following description of the invention.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWING</heading>
    <p num="23">
      The nature, objects, and advantages of the invention will become more apparent to those skilled in the art after considering the following detailed description in connection with the accompanying drawings, in which like reference numerals designate like parts throughout, wherein:
      <br/>
      FIG. 1 is a flowchart showing the general environment and application of the present invention;
      <br/>
      FIG. 2 is a flowchart of an operational sequence for one method of the present invention for gathering information from an information system;
      <br/>
      FIG. 3 is a block diagram of one embodiment of a gatherer as used in one embodiment of the present invention;
      <br/>
      FIG. 4 is a flow diagram illustrating collaborative team crawling and the use of a Tspaces in accordance with one embodiment of the present invention;
      <br/>
      FIG. 5 is an illustration of a URL-tree in accordance with one embodiment of the present invention;
      <br/>
      FIG. 6 is a flowchart showing the concept of coarsening and partitioning as used in one embodiment of the present invention;
      <br/>
      FIG. 7 is a URL-tree illustrating physical and hyperlink locality between URL's in a url-tree;
      <br/>
      FIG. 8 is a flow diagram showing the implementation of lightweight crawlers as used in accordance with one embodiment of the present invention;
      <br/>
      FIG. 9 is a perspective view of an exemplary signal-bearing medium in accordance with the invention; and
      <br/>
      FIG. 10 is a block diagram of the hardware components and interconnections of an apparatus in accordance with the invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS OPERATION</heading>
    <p num="24">
      One aspect of the invention concerns a method for collaborative information gathering in a digital domain such as an intranet or an Internet.
      <br/>
      Generally, gathering as shown in FIG. 1 retrieves objects and commands stored throughout a linked net such as a World 102, collects the information using a collection method executed by a collector such as Collector 104, and distributes the objects and commands to users who have requested the information, represented by Data Distribution 106.
    </p>
    <p num="25">
      One embodiment of one method performed during gathering, also referred to as collaborative crawling or team crawling throughout this application, is shown in FIG. 2.
      <br/>
      The method begins in task 202 and a web-graph is constructed in task 204.
      <br/>
      This web-graph is a hierarchial logical structure representing various relationships between information contained within the graph.
      <br/>
      This information is defined by the scope of the search requested.
      <br/>
      The web-graph may be partitioned into sub-graphs in task 206 for various reasons, such as to provide expedited processing of information.
      <br/>
      Graph "coarsening" may be implemented in task 208 as discussed below and superpages may be used in task 210 as required.
      <br/>
      After a web-graph has been completed, these sub-graphs are mapped to respective processors in task 212.
      <br/>
      Generally, the processor to which a sub-graph is mapped is the processor providing the fastest processing time.
      <br/>
      If the processing load becomes unbalanced in task 214, for example, if a sub-graph is added during execution of the method, repartitioning may occur to rebalance the processing load.
      <br/>
      Otherwise, the processing continues until the method ends in task 216.
    </p>
    <p num="26">A fuller discussion regarding gatherers, web-graphs, collaborative crawling, partitioning and graph coarsening, mapping, and load balancing follows.</p>
    <p num="27">A. Gatherers</p>
    <p num="28">
      A Gatherer, used in the present invention, operates similarly to an expanded web crawler.
      <br/>
      Based on its configuration, the Gatherer periodically crawls a list of data sources such as web servers, news servers, file directories, and databases.
      <br/>
      The crawling follows the information organization structure of the corresponding data source such as HTML hyper-links, news group structure, file system hierarchy, and database schemes.
      <br/>
      For each encountered object such as an HTML page, a news article, a file or a database table, the Gatherer first retrieves the object from the data source and creates a summary for it.
      <br/>
      This summary data is represented using a summary or absract format which is simply a list of attribute name and attribute value pairs where the attribute value can be any arbitrary value.
    </p>
    <p num="29">
      One example of a Gatherer 302 communicatively linked to a web 304 is pictured in FIG. 3 and has a number of components.
      <br/>
      The web 304 may comprise an Internet, an intranet, or a single information source including media or multimedia objects.
      <br/>
      The Gatherer 302 may include a Crawler 306 component that crawls media sources and retrieves objects while a Recognizer 308 component tries to determine the format for each of the retrieved objects.
      <br/>
      A Summarizer 310 component contains specialized codes that enable it to read a great number of different object formats such as a Freelance graphics presentation, an HTML page, a Lotus Notes database, or an Excel spreadsheet.
      <br/>
      It also provides a flexible structure for plugging in customized summarization codes to be used for summarizing data from a specific location.
      <br/>
      Compressed files included in a ZIP, TAR or JAR file are first extracted out by an Expander 312 component and then processed by the Summarizer 310.
      <br/>
      A Gatherer may also carry an embedded HTTP server (not shown) so that system administrators can use a web-browser to control its operations and monitor its status.
    </p>
    <p num="30">One example of a method that may be performed by a Gatherer follows:</p>
    <p num="31">
      Method Cyberspace Crawling
      <br/>
      Starting from a collection of source URLs (e.g., www.ibm.com), perform a breadth first search (BFS) search out of the hyperlink;
      <br/>
      When encountering a new page, build a summary for the page (Parts of information kept in a summary page that are important to the crawling method include a URL of a parent on the BFS-tree and all hyperlinks out of the page); and
      <br/>
      Maintain a queue of the set of pages whose parents are found. (The Gather may also maintains a hashtable of the set of URLs that have been summarized.
      <br/>
      If a URL referred by a hyperlink out of the current page has been processed, then it will not be put back into the queue.)
    </p>
    <p num="32">In short, the Gatherer performs BFS on a large web-graph whose structure is not given explicitly in advance.</p>
    <p num="33">B. The Web-graph</p>
    <p num="34">
      As mentioned in the Background of the Related Art section, a static web-graph may be used in current information gathering systems.
      <br/>
      However, these types of static graphs do not work for optimizing the present invention for numerous reasons.
    </p>
    <p num="35">
      First, a web-graph is not known (explicitly) to the present invention's partitioner in advance.
      <br/>
      In addition, the web-graph may be very large and fast growing dynamically.
      <br/>
      In the process of crawling, more and more of this unknown graph may be explored, allowing additional information to be added to the web-graph.
      <br/>
      Therefore, the present invention includes dynamic load balancing and load rebalancing as necessary.
    </p>
    <p num="36">
      Second, the web-graph used for implementing the present invention may be highly irregular.
      <br/>
      The web-graph may include multiple local expander sub-graphs and internal vertices that have very large "in" and "out" degrees, that is, a large number of links to and from the vertices.
      <br/>
      There may also be a lot of local sub-hierarchial structures that are highly connected with URLs leading outside the information defined by the web-graph.
      <br/>
      Therefore, the present invention includes, in various embodiments, methods for handling classes of sub-graphs before actual partitioning of a web-graph occurs.
    </p>
    <p num="37">
      Third, the web-graph is a directed graph, making it difficult to know the in-degree of each page.
      <br/>
      Moreover, web-pages are usually restricted to read-only status.
      <br/>
      This requires the present invention to coordinate among processors to check whether a page has been visited, or whether a visit is necessary.
    </p>
    <p num="38">
      Fourth, and primarily affecting the system embodiments of the present invention discussed below, the systems hyperlink connections (locality) are very different from its network connections (locality).
      <br/>
      If gatherers/crawlers are located at different network sites, then partitioning the web-graph for achieving both hyperlink locality and network locality is also performed in one embodiment of the present invention.
    </p>
    <p num="39">C. Overall Sequence of Operation (Collaborative Crawling)</p>
    <p num="40">
      The distributed environment of the present invention requires the use of more than one gatherer/crawler.
      <br/>
      These gatherers may be organized to collaboratively explore a web-space, to generate summaries, and to store these summaries for future reference.
      <br/>
      In order to achieve the maximum efficiency in collaboration of "team" crawling, these gatherers/crawlers are coordinated so that the load is balanced and computational overhead is minimized.
      <br/>
      Coordination is achieved by partitioning a web-space (the URL space) into sub-spaces and assigning each sub-space to a processor.
      <br/>
      Each processor is responsible to build summaries for those URLs contained within its assigned sub-space.
      <br/>
      During the construction of a summary, new URLs may be added to the web-space.
      <br/>
      In this event, a processor will keep processing those URLs belonging to its sub-space, including the new URL if appropriate, and route other URLs to proper processors.
    </p>
    <p num="41">
      Because of this cross-coordination of processors, the present invention includes a method that allows the processors to communicate with each other.
      <br/>
      There are two types of information needed for the communication in team crawling: foreign URLs, where a processor needs to send a URL given by a crossing hyperlink to the processor assigned to it; and coordination signals, used to remap and load rebalance the system.
    </p>
    <p num="42">
      In one embodiment, the present invention uses Tspaces for processors to support both foreign URLs and coordination signals, where a Tspaces is a shared location that can be thought of as a shared white-board among processors.
      <br/>
      In another embodiment, the invention implements a processor-to-processor communication method to support the communication of foreign URLs, and only uses Tspaces to exchange coordination signals.
      <br/>
      For example, FIG. 4 shows a high-level description of one embodiment of the present invention's team crawling architecture where a bevy of processors 403 are logically shown in a location 402.
      <br/>
      Objects identified by URLs have been divided and assigned to respective processors.
      <br/>
      A to-be-assigned URL space 404, received into location 402 during collaborative crawling, may be moved to Tspaces 406 for assignment to a respective processor.
      <br/>
      Likewise, an assigned URL space 405 may be moved from the Tspaces 406 to a processor 403 after assignment.
      <br/>
      A Tspaces 408, logically shown separate from Tspaces 406--although it may not be physically separate--are used for coordination among processor for load rebalancing.
    </p>
    <p num="43">D. Tspaces</p>
    <p num="44">
      In the present invention, a Tspaces is used in one embodiment for inter-processor communication and coordination.
      <br/>
      The Tspaces space, which may be used in conjunction with a parallel programming language, embodies the following principles:
      <br/>
      Anonymous communication;
      <br/>
      Universal associative addressing; and
      <br/>
      Asynchronous Communication
      <br/>
      Persistent data.
    </p>
    <p num="45">In a Tspaces, unstructured tuples may be posted to a Tspaces; tuples may be used or removed from a Tspaces; and tuples may be read from a Tspaces.</p>
    <p num="46">
      A Tspaces may be used in a general embodiment for logically connecting the distributed components of the present inventions system.
      <br/>
      In another embodiment, Tspaces may also be used to coordinate processors in collaborative crawling.
    </p>
    <p num="47">E. Partitioning</p>
    <p num="48">
      A URL-space such as that logically used in the present invention is a large directed graph called a web-graph, where a directed graph is a collection of vertices and directed edges (ordered pairs of nodes) connecting these vertices.
      <br/>
      In the web-graph, each URL defines a vertex.
      <br/>
      A URL is directly connected with another URL if the second one is linked to the page defined by the first one.
    </p>
    <p num="49">In collaborative crawling, this web-graph (or URL-space) is divided into sub-graphs (sub-URL-spaces) that are mapped among processors that are available for performing processing functions.</p>
    <p num="50">For example, if a web-graph W=(U,L), where U is a set of all interesting URLs in and L is a set of hyperlinks among URLs, a k-way partition of W is the division of U into k subsets represented by U1, U2, . . . , Uk, where L denotes a set of crossing links from Ui to Uj.</p>
    <p num="51">
      If a system has k processors and Ui is mapped onto the ith processor, the processor i needs to examine .vertline.Ui.vertline.
      <br/>
      URLs and send .vertline.Lij.vertline. links to processors during crawling where .vertline.Ui.vertline. and .vertline.Lij.vertline. are the cardinality of sets Ui and Lij.
      <br/>
      This communication of links from one processor to another is one kind of overhead in collaborative team crawling.
    </p>
    <p num="52">
      To maximize efficiency, there are several load balancing measures that the present invention may optimize:
      <br/>
      Work balance: with respect to a partition U1, . . . , Uk, the amount of work that processor i needs to perform may be measured by the total time that processor i spends on retrieving pages from Ui, on generating summaries of these pages, and on processing new links from these pages.
      <br/>
      In team crawling, different processors may have different machine speed, and depending on the site of the machine and the site of the server of the URL-pages, the accessing time of the pages will be different from processors to processors, and from URLs to URLs.
    </p>
    <p num="53">
      Space balance: with respect to a partition, the amount of disk space (memory space) needed by processor i is roughly proportional to the total size of SOIFs that processor i needs to build;
      <br/>
      Minimize crossing links: when a processor finds a page that is not in its partition, it may pass the information to a processor that is responsible, that is, to the processor responsible for processing information in that partition.
    </p>
    <p num="54">Optimizing one or more of the above--matching processors and URLs to load balance and reduce processing overhead--is a major advantage of the present invention.</p>
    <p num="55">F. Partitioning a Web-Space</p>
    <p num="56">
      The web-space partitioning method used by one embodiment is dynamic.
      <br/>
      Because a web-space is large and dynamically changing and its structure is not known in advance, the partitioning method generates a mapping of the web-space automatically.
      <br/>
      In addition, because of the dynamic nature of the processing load and, potentially, the number of available Gatherer processors, the method adjusts to achieve the best performance during a given run-time.
    </p>
    <p num="57">
      The dynamic web-space partitioning method may also automatically form sub-domains that are spatially close, allowing each processor to map to a sub-domain to which it has the most efficient access.
      <br/>
      The method may also automatically form sub-domains that have more internal hyperlinks so that the amount of communication overhead in parallel crawling is reduced, and minimize the computation overhead of a processor that is responsible for a given URL.
    </p>
    <p num="58">
      To minimize computation overhead, such as that experienced by mapping, the present invention includes a partition scheme in one embodiment that does not use a semantic content of an URL-page, i.e., a scheme that only uses information given in the URL name itself.
      <br/>
      Because crawling is an I/O intensive computation, it is expensive to decide which processor should examine a URL page by first fetching the page.
    </p>
    <p num="59">1. Coarsening for a manageable structure over the web-graph</p>
    <p num="60">To cope with large scale and dynamically changing web-graphs, and to reduce computation overhead, one version of the invention uses "graph coarsening" for partitioning a web-graph.</p>
    <p num="61">
      The basic idea of graph coarsening is that given a graph G=(V,E), a coarsened image G'=(V',E') of G is created by vertex-contraction.
      <br/>
      In other words, each vertex in V' corresponds to a subset of vertices in V, where a vertex of G' is a "supemode" of G. Similarly, each edge of E' corresponds to a collection of edges in G. Once the coarsened G' is created, G' can be partitioned and mapped back to G. In general, a good coarsened graph retains the locality of the original graph so that a good partition of G' approximates a good partition of G. One advantage of the coarsening based partitioning is a reduction of the complexity of the web-graph because G' tends to be much smaller than G.
    </p>
    <p num="62">
      Whether or not graph coarsening is implemented, there are a minimum of two types of localities that need to be optimized to reduce overhead.
      <br/>
      In some applications, graph coarsening can help optimize these localities.
    </p>
    <p num="63">a. Physical locality</p>
    <p num="64">
      The physical locality of a processor processing partition information, characteristically defined by the network graph, needs to be mapped to a sub-space where it can work most efficiently.
      <br/>
      To achieve this, URLs are clustered based on how close they are to each other in the network space.
      <br/>
      For example, all URLs from a server may be placed into a same sub-domain in the partition.
      <br/>
      This clustering by network space location is necessary because a domain name itself does not directly give any us the information of physical closeness.
      <br/>
      Nor is the Internet provider (IP) address of the URL domain name helpful in defining physical location.
      <br/>
      For example, in a domain called ibm.com, a tokyo.ibm.com sub-domain may be physically far away from a sub-domain named almaden.ibm.com. In comparison, a sub-domain of xerox.com, may be parc.xerox.com is much closer to almaden.ibm.com in the network.
      <br/>
      On the other hand, gcs.alamada.ibm.com and help desk.alamden.ibm.com may be very close in their network.
      <br/>
      Thus, proper expansion of the URL's domain name hierarchy will gradually provide blocks of servers whose sites are close physically.
    </p>
    <p num="65">
      b. Another way to optimize team crawling, other than balancing the search load, is to optimize hyperlink (link) locality, as defined by the web-graph, so that the partitioning reduces the amount of crossing links among processors.
      <br/>
      Because of limited space in Tspaces, or any other communication mechanism used, optimization of link locality reduces the number of tuples transferred to the Tspaces, saving this iteration.
      <br/>
      In addition, the more tuples on Tspaces, the less efficient the Tspaces will be, creating a communication bottleneck.
      <br/>
      For example, the queue for Tspaces caused in a BFS search can be very large.
    </p>
    <p num="66">
      The present invention applies in one embodiment coarsening based partitioning for dynamic load balancing over a web-graph.
      <br/>
      This coarsening introduces a manageable structure over the web-graph, retaining as much locality as possible.
    </p>
    <p num="67">
      Reducing a web-graph to a manageable structure is necessary because the web-graph is not explicitly given to the partitioner in advance.
      <br/>
      The coarsening method dynamically forms good supernodes, also referred to as superpages, and the contracted graph defined by these superpages.
      <br/>
      A URL name hierarchy is used to define superpages to optimize localities and identification between URLs and superpages.
      <br/>
      The creation of a superpage uses information collected during the gathering phase to dynamically recognize which superpage should be formed for the next phase load rebalancing.
      <br/>
      Partitioning divides the coarsened web-graph defined by these dynamically created superpages and generates a mapping between processors and superpages to further optimize localities.
    </p>
    <p num="68">2. URL name hierarchy</p>
    <p num="69">
      A URL usually contains the following information: host domain name (e.g., almaden.ibm.com), protocols (e.g., ftp), port (e.g., 1080), user ID, uid (e.g., steng), password (e.g., ******), and URI, that is, the directory under a server, (e.g.,/docs/Slides/Tspaces/index.htm).
      <br/>
      In the present invention, the host domain name and URI are used to define superpages as defined below.
      <br/>
      There is a natural hierarchical structure over URL names, generally referred to as a URL-hierarchy or a URL-tree.
      <br/>
      FIG. 5 shows a part of a hierarchal tree defined by URL names.
    </p>
    <p num="70">
      This first part of a URL name 504 shown in FIG. 5 is its Internet host domain name.
      <br/>
      It is a hierarchical naming scheme where a name consists of a sequence of sub-names separated by a delimiter character, the period.
      <br/>
      Each section in the domain name is referred to herein as a token.
      <br/>
      For example, com, ibm, and tokyo would be tokens of the domain name tokyo.ibm.com. A "top level" token of a domain name space looks like the following:
      <br/>
      COM (Commercial Organization)
      <br/>
      EDU (Education Institutions)
      <br/>
      GOV (Government Institutions)
      <br/>
      MIL (Military Groups)
      <br/>
      NET (Major network support centers)
      <br/>
      ORG (Organizations other than those above)
      <br/>
      ARPA (Temporary ARPANET domain)
      <br/>
      country code (Countries other than USA)
    </p>
    <p num="71">
      A domain name could be the name of a machine, of a sub-domain, or even of a user.
      <br/>
      The full domain name of a URL determines its Internet physical address.
      <br/>
      In general, there is a certain block structure (locality structure) relating domain names and IP addresses.
      <br/>
      For example, almost all servers in a sub-domain cmu.edu. shown in FIG. 5 are closely located in Pittsburgh, Pennsylvania.
    </p>
    <p num="72">
      Further, all Internet domain names are associated with servers and are arranged in a tree structure that corresponds to the naming hierarchy.
      <br/>
      This hierarchy demarks sub-domains in the invention's environment, and defines a top section of our URL-hierarchy.
      <br/>
      The URI also defines a hierarchy.
      <br/>
      So the URL-tree is formed by the domain name hierarchy followed by the URI hierarchy, where each URI is associated with a leaf in the URL-tree.
    </p>
    <p num="73">
      In FIG. 5, a representative URL 502--shown as a blank box--comprises a host domain name and a directory with a server situated at the domain location.
      <br/>
      In one case, the URL 502 may comprise a host name 504 of tokyo.ibm.com and a directory 506 of gcs.docs.slides.Tspaces.index.htm. A different URL may comprise a domain 508 comprising cmu.edu and a directory 510 comprising cs.afs.theory..about.miller.index.html.
      <br/>
      Depending upon the information desired, the URL 502 may take on any respective domain name and directory.
    </p>
    <p num="74">3. Superpage</p>
    <p num="75">
      Assuming that one version of the present invention has k "gatherers" or processors, the web-graph is divided into k sub-graphs W1, . . . Wk. Each sub-graph is mapped to a processor (e.g., Wi to processor i).
      <br/>
      If the processing load becomes unbalanced, repartitioning of the web-space is required.
      <br/>
      New partitions W1 ', . . . , Wk ' are formed, and Wk ' is mapped to processor i, then for each i and j, processor i sends the URLs in Wi.solthalfcircle.Wj '--currently located in its queue--to processor j. Similarly, processor j sends the URLs in Wj.solthalfcircle.Wi ' to processor i.
    </p>
    <p num="76">
      However, because the entire web-graph is not known during the time partition nor repartition occur, graph coarsening may be applied in one embodiment as shown in FIG. 6.
      <br/>
      Graph coarsening may be required because it is almost impossible to design a partition at the URL level without knowing the web-graph formation at the partitioning time.
    </p>
    <p num="77">
      FIG. 6 shows an intermediate structure called a superpage 604 of URLs to generate a coarsened image of a web-graph 602.
      <br/>
      The superpage 604 is a set of URLs that are "close" to each other according to the respective URL hierarchy.
      <br/>
      A set of superpages may be formed dynamically in the gathering/crawling phase.
      <br/>
      A partition 606 then is a division of superpages 604 into k sets of URLs.
    </p>
    <p num="78">
      For example, the web-graph 602 of FIG. 6 may be divided into a collection of superpages 604 P1, . . . , Pm, where m is usually much larger than k, the number processors 608.
      <br/>
      From the original web-graph 602 W=(U,L), a new graph C=+P,S} may be constructed where P=+P1, . . . , Pm }, a set of superpages, and S=+Si,j :1 &lt;= I, j &lt;= m} where Si,j is a set of hyperlinks from Pi and Pj.
      <br/>
      Si,j will be referred to as a super-hyperlink from superpage Pi to Pj.
      <br/>
      A weight w(Pi) of each superpage Pi is equal to the number of URLs in Pi.
      <br/>
      In other words, C is a coarsened graph of the original web-graph 602 W.
    </p>
    <p num="79">
      The basic idea for the dynamic load balancing is to define/create superpages from a URL hierarchy, estimate the weight of a superpage by the number of URLs crawled or in the queue, and estimate the number of super-hyperlink similarities.
      <br/>
      The web-graph is then partitioned by partitioning the coarsened graph C over superpages.
      <br/>
      This allows quick decisions concerning which URL belongs to which partition once a partition is formed by first determining the superpage containing the URL by the URL-tree and then returning the partition number of the superpage.
    </p>
    <p num="80">a. Structure and the Definition</p>
    <p num="81">
      Given a URL, a sequence of tokens can be defined from its domain name and its URI.
      <br/>
      Tokens from a domain name are ordered from right to left, while the tokens for the URI are ordered from left to right.
      <br/>
      For example, gcs.almaden.ibm.com/docs/Slides/Tspaces/index.htm defines the sequence: (com, ibm, almaden, gcs, docs, Slides, Tspaces, index.htm).
      <br/>
      Following this sequence of tokens, we can reach to a leaf of this URL in the URL-tree can be accessed.
    </p>
    <p num="82">
      A superpage may be defined as shown in FIG. 7 as a "frontier" of the URL-tree when the tree is "expanded" from the root.
      <br/>
      For example, imagine initially only one superpage, a root 702 of the URL-tree.
      <br/>
      The frontier of the URL-tree is just the root.
      <br/>
      Any node of the tree may be expanded either by singletons or by intervals.
      <br/>
      For example, suppose a root 702 is com.
      <br/>
      A singleton containing ibm 704 defines an expansion of the root, that is, a child of the root 702 whose token is ibm 704.
      <br/>
      Similarly, a singleton expansion of ibm 704 can be made with almaden 706 as the token.
    </p>
    <p num="83">
      In an interval expansion, a sequence of ordered strings such as string 708 can be designated and the children of the node of the tree can be divided into intervals.
      <br/>
      For example, for the root com 702, string (N., Kidsoft, H, creativelabs) can be used to divide the children of the root into intervals whose next token is in �N or larger�, �Kidsoft, N), �H, Kidsoft) �creativelabs, H), �smaller than creativelabs�, respectively.
      <br/>
      Or, as shown in FIG. 5, the string may comprise the interval �&gt;kidsoft��gte,kidsoft��&lt;gte� or any other string that defines the desired expansion.
    </p>
    <p num="84">
      A singleton expansion extends URL trees, and interval expansion clusters the children of a node in the frontier of a tree.
      <br/>
      In one embodiment, an interval is not extended beyond a level where the interval will always be a leaf of the tree.
      <br/>
      Once an expansion has occurred, the node at the frontier is used as the superpage.
    </p>
    <p num="85">
      In team crawling, a user provides an initial expansion.
      <br/>
      One method of the present invention automatically generates an initial partition from this initial expansion.
      <br/>
      Once gathering/crawling starts, each processor may maintain some statistical information in the partial URL-tree that is currently used for defining superpages.
      <br/>
      This statistical information may include a set of tokens in each node which are not currently used in the singleton expansion, but which may be the candidates a next-round singleton expansion.
      <br/>
      A random sample of all the interval visits of a node may also be maintained, and may be used for re-defining an interval expansion of the node.
      <br/>
      In addition, number of visits to each internal nodes of the current partial URL-tree may be recorded and used to estimate the "weight" of each new and old superpage.
      <br/>
      As discussed above, this weighing may be used for load balancing.
    </p>
    <p num="86">Given this information and a selected threshold for a superpage information size, a set of new superpages may be generated by proper singleton and interval expansion as discussed immediately below.</p>
    <p num="87">b. Superpage Partitioning</p>
    <p num="88">
      Using superpages in the present invention permits an addressable structure to be established over the web-graph, where every URL has a superpage "number" or address.
      <br/>
      Even though the precise number of URLs in a superpage may not be known, or how a superpage is connected with other superpages, information gathered can be used to estimate these measures during the processing of crawling/gathering.
      <br/>
      Further, superpages can be used to reduce the partition problem of a large scale unknown graph to a partition problem of a reasonable sized known graph as shown below.
      <br/>
      Superpages may be mapped onto processors to balance/rebalance a processing load, and to optimize a match between processors and superpages.
    </p>
    <p num="89">
      During the crawling/gathering, each processor obtains and maintains some statistical information on the average access time and processing time of a URL page from a superpage.
      <br/>
      In one embodiment, these two pieces of time are combined into a single parameter hereafter referred to as a processing rate.
      <br/>
      Hence, for m superpages and k processors, the processing rate of information can be viewed as a k by m table R=�rij � where rij is the rate that processor i can access/process URL pages in superpage j.
    </p>
    <p num="90">
      In addition, all processors in one embodiment may collaboratively bookkeep the number of URLS visited in each superpage and to be visited in each superpage, and may, also maintain the size of super-hyperlink among these superpages.
      <br/>
      In the partition phase, an array w=�wi � may be obtained where wi is the number of URLS visited at a given time that belong to superpage i, and S=�Si,j � where Si,j is a super-hyperlink from superpage i and superpage j.
    </p>
    <p num="91">G. Dynamic Load Balancing</p>
    <p num="92">This section, discusses how to dynamically create superpages as well as various methods used to partition superpages.</p>
    <p num="93">
      As discussed above, given an expansion of the URL-tree, a set of superpages may be defined from the frontier of the expansion.
      <br/>
      These superpages may be partitioned and distributed across gatherers/crawlers (processors).
      <br/>
      Each Gatherer processor initially "sees" the same expansion and the same set of superpages.
    </p>
    <p num="94">
      Each Gatherer then runs a method described below.
      <br/>
      When it encounters a new URL--one that it did not initially see--it first checks with the current expansion of the URL-tree to determine the superpage that contains the URL.
      <br/>
      It locates the partition that contains the superpage.
      <br/>
      If the superpage is local to the Gatherer itself, it checks with the already--visited pool to decide whether this URL has been processed.
      <br/>
      If not, the new URL will be added to its local queue.
      <br/>
      If the URL belongs to a superpage which is mapped to some other processor, the Gatherer forwards it to the proper processor (in one embodiment, by posting it to the Tspaces).
      <br/>
      Every Gatherer has an observer thread to receive the URLs sent from other gatherers and to insert them in its local URL queue if appropriate.
    </p>
    <p num="95">
      When a URL is pushed down the current expansion of the URL-tree, a set of statistical data stored at each node of the tree is updated.
      <br/>
      This data may be used for further load balancing.
    </p>
    <p num="96">1. Hot Token and Sample Tokens</p>
    <p num="97">
      Whenever a URL passes through a node in the URL-tree, the number-of-visits counter for the node is increased.
      <br/>
      Each Gatherer only updates their own copy of the expansion.
      <br/>
      But, if those numbers are added together among all copies of the expansion, the number of URLs that belong to the subtree of a node in the expansion can be obtained.
    </p>
    <p num="98">
      To assist dynamic load balancing, two other pieces of information may be maintained at each node in the expansion: hot tokens and sample tokens.
      <br/>
      When a URL reaches a node in the expansion tree, its next token in the token sequence of the URL name is examined.
      <br/>
      If the next token matches to a token of the singleton children expansion, it is pushed down to the next level of the expansion tree and the number-of-visits counter is increased.
      <br/>
      The unmatched tokens are divided into two classes: hot tokens and cool tokens.
      <br/>
      A hot token hash may be maintained to bookkeep a list of 50-200 of the most often used unmatched tokens and their counters.
      <br/>
      An unmatched token not in this hash is called a cool token, and a random sample of unmatched tokens may be maintained.
    </p>
    <p num="99">2. Dynamic superpage creation</p>
    <p num="100">
      Dynamic load balancing may be triggered in the present invention in one or more of the following circumstances: a processor is too idle; a new processor joins the crawling team; a processor decides to quit the crawling team; or the physical locality is poorly achieved in the partition.
      <br/>
      Other events specified by the user may singularly or collectively trigger balancing also.
    </p>
    <p num="101">
      Once load re-balancing is to be performed, the gatherers use the Tspaces to reach a consensus and select a "leader" processor to perform the repartition.
      <br/>
      Every other processor used for gathering will send their copies of the expansion tree to the leader processor (leader).
      <br/>
      The leader will merge the information collected at each node in the expansion tree.
      <br/>
      The resulting copy of the expansion tree will maintain all the statistical data about each superpage as well as about each internal node in the expansion tree such as the number-of-visits counter, the set of hot tokens, and the set of sample tokens.
    </p>
    <p num="102">
      In one embodiment, the leader will run the following superpage creation method at each node of the expansion.
      <br/>
      In this method, where k is the number of processors and  DELTA  is a parameter that determines a threshold of the size of the information superpages and typically 20 or more, and W is the number-of-visits to the root of the expansion tree, then W is equal to the number of URLs that have been processed or put in the queue.
      <br/>
      This method yields an estimation of the total weight of the superpage, where  DELTA =W/(k DELTA ).
    </p>
    <p num="103">
      Method Superpage Creation ( DELTA )
      <br/>
      If there is a hot token whose count of visits is at least  DELTA , perform a singleton expansion with that token.
      <br/>
      The weight of the singleton expansion is equal to its number-of-visits count;
      <br/>
      Resample the remaining hot tokens into the cool token samples;
      <br/>
      Let I be the ratio of the total number of cool-token visits to that of  DELTA .
      <br/>
      I will be the number of interval expansions created; and
      <br/>
      Choose I evenly spaced tokens in the cool-token-samples and create I interval expansions.
    </p>
    <p num="104">The application of the above Superpage Creation method is applied to every node in the expansion tree and generates a new frontier to the expansion tree that is used to define the new superpage for the next round of gathering/crawling.</p>
    <p num="105">3. Superpage Partitioning Methods</p>
    <p num="106">
      In order to optimize physical locality between URLs, the access rate of each processor to the severs in each superpage needs to be determined.
      <br/>
      During the crawling, each processor maintains a vector of this average access rate to each sever or a group of severs in the same superpage.
      <br/>
      These data will be sent to the leader to assemble the access/process rate table R mentioned in Section G.2.
    </p>
    <p num="107">In one embodiment, partitioning is performed where, given a collection of m superpages +P1, P2, . . . , Pm }, with weights +w1, w2, . . . , wm }, and k processors whose access rates to the superpages are given in table R, dividing the superpage into k subsets U1, . . . , Uk that minimizes  (Equation image '1' not included in text)</p>
    <p num="108">where  (Equation image '2' not included in text)</p>
    <p num="109">In other words, the version will find a partition that not only balances the work load of each processor, but also optimizes the match between the superpages and processors by trying to assign each superpage to a processor which has the most efficient processing rate.</p>
    <p num="110">
      Method Superpage Partition I
      <br/>
      Sort the superpage in an non-increasing order by their weights, where w1 &gt;= w2 &gt;= wm ;
      <br/>
      Let Ti =0 and Ui =.o slashed. for all 1 &lt;= i &lt;= k;
      <br/>
      for (j=1; j &lt;= m; j++),
    </p>
    <p num="111">
      - Let  DELTA i =wi /rij for i in the range 1 &lt;= i &lt;= k.
      <br/>
      - Add Pj to Us with the s that has the smallest Ts + DELTA s, and let Ts =Ts + DELTA s ; and
      <br/>
      Return U1, U2, . . . , Uk.
    </p>
    <p num="112">
      The above partition may be improved by one local improvement method by reducing maxi Ti by moving a superpage from the Us with the maximum Ts to some other set.
      <br/>
      Other local improvement procedures, readily apparent to those skilled in the art after reading this specification, may also be implemented.
    </p>
    <p num="113">In this version of the partition method, the amount of crossing hyperlinks among superpages in different partitions was not included as a quality measurement.</p>
    <p num="114">
      In another embodiment, the communication overhead of super-hyperlink across partition may be a primary concern, where C is a table of rates where table c=�ci �, and ci is the rate for communicating (sending and receiving) of URLs to other processors.
      <br/>
      In this case, partitioning may comprise given a collection of m superpages +P1, P2, . . . , Pm }, with weights +w1, w2, . . . , wm }, and super-hyperlinks S, and k processors whose access rates to the superpages are given in table R, and whose communication rates are given in table c, dividing the superpage into k subsets U1, . . . , Uk that minimizes  (Equation image '3' not included in text)
    </p>
    <p num="115">where  (Equation image '4' not included in text)</p>
    <p num="116">
      where Bi is the number of hyperlinks that are to or from superpages in Ui that are not in Ui itself.
      <br/>
      In other words, this version finds a partition that not only balances the work load of each processor and minimizes the communication overhead, but also optimizes the match between the superpages and processors by trying to assign each superpage to a processor that has the preferred processing rate.
      <br/>
      In most cases, the preferred processing rate is the fastest processing rate.
      <br/>
      This version of the partitioning method is shown below.
    </p>
    <p num="117">
      Method Superpage Partition II
      <br/>
      Sort the superpage in an non-increasing order of their weights, where w1 &gt;= w2 &gt;=  . . . wm ;
      <br/>
      Let Ti =0 and Ui =.o slashed. for all 1 &lt;= i &lt;= k;
      <br/>
      for (j=1; j &lt;= m; j++),
      <br/>
      - Adding Pj to Ui may increase the time for all processors, including Ti, where an increase on Th is  DELTA i,h.
      <br/>
      - Add Pj to Us with the s that has the smallest maxh Th + DELTA s,h, where Th =Th + DELTA s,h ; and
      <br/>
      Return U1, U2 . . . , Uk.
    </p>
    <p num="118">As indicated with respect to the earlier embodiment of the partitioning method, the partition method above may be further improved by implementing various local improvement procedures.</p>
    <p num="119">H. Hot Pages</p>
    <p num="120">
      A web-graph is generally highly irregular and highly connected.
      <br/>
      Many pages have very large in- and out-degrees, and there may be many densely connected and bi-connected "communities" of pages.
    </p>
    <p num="121">In one embodiment, the present invention dynamically recognizes these special pages, substructures, and highly connected communities, and improves the quality of partitioning and reduces the amount of communication required for distributed crawling.</p>
    <p num="122">
      To better understand this embodiment, an examination of the earlier discussed implementation of sequential crawling is required.
      <br/>
      In crawling, two structures are maintained: a hit-hash of those URLs that have already been visited, and a queue of those URLs whose parents have been visited.
      <br/>
      When a new URL is obtained, the method checks whether the new URL has already been visited.
      <br/>
      If it has been, then the URL is dropped, otherwise, it is inserted into the queue.
      <br/>
      Preferably, before it is inserted into the queue, the URL is checked as to whether it has already been put into the queue at a previous stage.
      <br/>
      The queue grows faster than the hit-hash.
      <br/>
      In fact, it may grow too fast to be reasonably stored in the memory.
      <br/>
      If this is true, then the queue is maintained in storage, and only a window of the queue remains in memory.
    </p>
    <p num="123">
      Because the queue may grow so quickly, the queue may become too large for quick indexing and checking, thereby requiring expensive out-of-core computation, because the earlier embodiment inserts the URL at the end of the queue.
      <br/>
      The result is that there may exist more than one copy of a URL in the queue.
      <br/>
      For example, if a page has M in-links, it could show up in the queue M times.
    </p>
    <p num="124">
      In distributed crawling, this problem of checking which URL has been processed and queued becomes enormous.
      <br/>
      To overcome this problem, in one embodiment, the invention requires each processor to maintain its own hit-hash and queue for its respective partition.
      <br/>
      If a URL belongs to some other processor's partition, it is posted on the Tspaces.
      <br/>
      The processor that extracts the posted URL from Tspaces checks with its own hit-hash and its queue.
    </p>
    <p num="125">If a URL is linked to by M URLs from sub-domains other than the sub-domain that contains the URL, then it will be sent to Tspaces M times.</p>
    <p num="126">
      In an alternative embodiment, each processor is required to maintain a communication queue, c-queue, for those URLs to be sent to Tspaces, and a communication hit-hash, c-hit-hash, for those URLs that have been posted.
      <br/>
      Before posting a URL to Tspaces, the processor will check whether it is already in the c-hit-hash or c-queue.
      <br/>
      This reduces the load of Tspaces.
    </p>
    <p num="127">
      In a preferred embodiment, the present invention solves this queue problem using hot-pages.
      <br/>
      Each Gatherer processor maintains an in-core hash that only stores hot-pages, that is, those URLs that have a potentially large in-degree.
      <br/>
      When the processor encounters a new URL, it checks the URL against a hot-page-hash.
      <br/>
      A dynamic mechanism is implemented to determine hot pages, and to keep the hot-page-hash information small, assuring that it can be stored in the memory.
    </p>
    <p num="128">I. Team Crawling Including Light-weight Helpers</p>
    <p num="129">
      In many organizations, there are a large collection of digital signal processing machines (machine) that will be idle during certain periods of time, e.g., at night.
      <br/>
      These systems may be used in one embodiment of the present invention for team crawling.
    </p>
    <p num="130">
      In the preferred embodiment, a user of a machine has full rights to decide at what time and for how long he/she would like to contribute the machine for crawling.
      <br/>
      This version of the invention does not store information on their local disks.
      <br/>
      As such, these machines are referred to as light-weight digital signal processing machines for crawling.
      <br/>
      Further, when these machines are used for crawling, dynamical load balancing is not performed each time a light-weight machine joins or withdraws from the crawling team.
      <br/>
      FIG. 8 helps to illustrate this architecture.
    </p>
    <p num="131">
      As shown in FIG. 8, this embodiment of the invention may include a team of "regular" distributed crawlers.
      <br/>
      A crawler is such as that discussed above, and is not a lightweight crawler.
      <br/>
      As above, they are coordinated by their own Tspaces domains for crossing hyperlinks and for partition coordination.
      <br/>
      However, this embodiment uses two Tspaces domains, urlTS 804 and soifTS 806, for communicating with light-weight machines 802.
      <br/>
      The Tspaces domain urlTS 804 is for URLs and soifTS 806 is for summaries.
      <br/>
      Regular crawlers 808 can send URLs from its queue to urlTS 804 for light-weight machines.
      <br/>
      The light weight machines that join crawling retrieve URLs from urlTS 804, gather the pages, generate summaries for these pages, and send the summaries to soifTS 806.
      <br/>
      The regular crawlers 808 then retrieve their own summaries from soifTS 806, extract a set of hyperlinks from the SOIFs, and process them using Tspaces 810 and 812.
      <br/>
      In this method, the light-weight machines are used only as occasional helpers.
      <br/>
      Load balancing may be performed between regular crawlers 808 as described above.
    </p>
    <p num="132">Signal-Bearing Media</p>
    <p num="133">
      Such a method may be implemented, for example, by operating a system 1000 (shown in FIG. 10) to execute a sequence of machine-readable instructions.
      <br/>
      These instructions may reside in various types of signal-bearing media.
      <br/>
      In this respect, one aspect of the present invention concerns a programmed product, comprising signal-bearing media tangibly embodying a program of machine-readable instructions executable by a digital data processor to perform a method to gather information using collaborative team crawling.
    </p>
    <p num="134">
      This signal-bearing media may comprise, for example, RAM (not shown) contained within the system 1000.
      <br/>
      Alternatively, the instructions may be contained in another signal-bearing media, such as a magnetic data storage diskette 900 (FIG. 9), directly or indirectly accessible by the system 1000.
      <br/>
      Whether contained in the diskette 900 or elsewhere, the instructions may be stored on a variety of machine-readable data storage media, such as DASD storage (e.g., a conventional "hard drive" or a RAID array), magnetic tape, electronic read-only memory (e.g., ROM, CD-ROM, EPROM, or EEPROM), an optical storage device (e.g., CD-ROM, WORM, DVD, digital optical tape), paper "punch" cards, or other suitable signal-bearing media including transmission media such as digital and analog and communication links and wireless.
      <br/>
      In an illustrative embodiment of the invention, the machine-readable instructions may comprise lines of compiled C, C+ or C++ language code.
    </p>
    <p num="135">Hardware Components &amp; Interconnections</p>
    <p num="136">In addition to the various method embodiments described above, a different aspect of the invention concerns a digital data processing machine for performing the method steps, and which may be embodied by various hardware components and interconnections as described in FIG. 10.</p>
    <p num="137">Although the following detailed description of the invention is discussed in relationship to an Internet system 1000 as shown in FIG. 10, such description is not intended to limit the scope of the invention.</p>
    <p num="138">
      In FIG. 10, the Internet system 1000 as shown comprises two parts, a first system 1001 and a second system 1003.
      <br/>
      The first system 1001 may include a web site server 1002 communicatively connected via a web 1006 to an Internet service provider (ISP) 1010 using fast-link communication channels 1008 and 1009.
      <br/>
      The server 1002 may act as a host location for media or multimedia objects.
      <br/>
      In one embodiment, the server 1002 may be a mainframe computer manufactured by the International Business Machines Corporation of Armonk, N.Y., and may use an operating system sold under trademarks such as MRS.
      <br/>
      Or, the server 1002 may be a Unix computer, or OS/2 server, or Windows NT server or IBM RS/6000 530 workstation with 128 MB of main memory running AIX 3.2.5. The server 1002 may incorporate a database system, such as DB2 or ORACLE, or it may access data on files stored on a data storage medium such as disk, e.g., a 2 GB SCSI 3.5" drive, or tape.
    </p>
    <p num="139">
      In another embodiment, the web site server 1002 may comprise one or more magnetic data storage disks commonly referred to as direct access storage devices (DASD).
      <br/>
      As is well known in the art, the objects may be stored by the server 1002 in various formats depending upon the type of media.
      <br/>
      For example, a multimedia object such as a cartoon figure might be stored in a graphic image format (GIF) and a photograph might be stored in a tagged image format file (TIFF), or a joint photographic expert group (JPEG) format.
    </p>
    <p num="140">
      The ISP 1010 may be connected to the second system 1003 comprising an end-user unit 1016 via a slow-link channel 1014, where the ISP 1010 controls the passage of information between the web site server 1002 and the end-user unit 1016. "Fast-link" and "slow-link", as mentioned above, refer to the relative speed with which the communication channels 1008 and 1014 can transfer a media object.
      <br/>
      In any case, the object transfer capabilities of the fast-link channel must exceed those of the slow-link channel, and one or both links may comprise a line, bus, cable, electromagnetic link, microwave, radio signal, or other wireless means for exchanging commands, media objects, and other information and data between the web site server 1002, the ISP 1010, and the end-user unit 1016.
      <br/>
      If the fast-link channel transfer rate is less than the slow-link transfer rate, no transformation is necessary.
    </p>
    <p num="141">
      Among other features, the ISP 1010 may include a fire wall used as a means of reducing the risk of unwanted access to the end-user unit 1016.
      <br/>
      Although the ISP 1010 is pictured as a separate device, the ISP may be integral to the end-user unit 1016.
      <br/>
      The ISP 1010 may also include a transformer 1012 that may be used to transform an object and set and/or implement transfer parameters to facilitate efficient transfer of objects between the transformer 1012 and the end-user unit 1016.
      <br/>
      In another embodiment, the ISP 1010 may be eliminated from the system 1000 and the transformer 1012 may be integral to the web site server 1002, or may be included within the second system 1003 rather than the first system 1001 as shown.
    </p>
    <p num="142">
      The end-user unit 1016 may include a processing unit (not shown), such as a microprocessor or other processing machine, communicatively coupled to a storage unit.
      <br/>
      The storage unit may include a fast-access memory and may include nonvolatile storage.
      <br/>
      The fast-access memory preferably comprises random access memory, and may be used to store the programming instructions executed by the processing unit during execution of a computer program.
      <br/>
      The nonvolatile storage may comprise, for example, one or more magnetic data storage disks such as a "hard drive" or any other suitable storage device.
      <br/>
      Further, as shown in FIG. 10, the end-user unit 1016 may include in one embodiment an output module 1018 for outputting or displaying program status results on a graphic display 1020, print device 1022 or storage medium 224.
    </p>
    <p num="143">
      Despite the specific foregoing description, ordinarily skilled artisans (having the benefit of this disclosure) will recognize that the machine discussed above may be implemented in a machine of different construction, without departing from the scope of the invention.
      <br/>
      As a specific example, the transformer 1012 may be eliminated; furthermore, the ISP 1010 may be provided on-board the end user unit 1016, even though depicted separately in FIG. 10.
    </p>
    <p num="144">Other Embodiments</p>
    <p num="145">While there have been shown what are presently considered to be preferred embodiments of the invention, it will be apparent to those skilled in the art that various changes and modifications can be made herein without departing from the scope of the invention as defined by the appended claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14.</claim-text>
      <claim-text>A signal-bearing medium tangibly embodying a program of machine-readable instructions executable by a digital processing apparatus to perform a method for gathering objects from an information system, said method comprising: constructing logical web-graphs defining logical relationships between specified objects in the information system; partitioning the web-graph into sub-graphs;</claim-text>
      <claim-text>and processing the specified objects to locate desired objects by: - balancing the processing of the specified objects by mapping the sub-graphs to one or more preferred processors, wherein a processor is preferred if it reduces processing time or overhead;</claim-text>
      <claim-text>and - re-balancing the processing if the processing load becomes unbalanced.</claim-text>
      <claim-text>1. A method to gather data objects from an information system, comprising:</claim-text>
      <claim-text>constructing logical web-graphs defining logical relationships between specified objects in the information system; partitioning the web-graph into sub-graphs;</claim-text>
      <claim-text>and processing the specified objects to locate desired objects by:</claim-text>
      <claim-text>- balancing the processing of the specified objects by mapping the sub-graphs to one or more preferred processors, wherein a processor is preferred if it reduces processing time or overhead;</claim-text>
      <claim-text>and - re-balancing the processing if the processing load becomes unbalanced.</claim-text>
      <claim-text>2. The method recited in claim 1, further comprising pushing the located desired objects to a user desiring the objects.</claim-text>
      <claim-text>3. The method recited in claim 1, wherein the web-graph defines a resource identification space containing resource identifications, the resource identification space being a directed graph having a collection of vertices and ordered nodes connecting the vertices, each resource identification defining a vertex of the directed graph.</claim-text>
      <claim-text>4. The method recited in claim 3, partitioning the web-graph into sub-graphs comprising: coarsening the web-graph to create sub-graphs, the sub-graphs comprising identifiable groupings of objects, where coarsening comprises contracting the vertices in the web-graph;</claim-text>
      <claim-text>and dynamically recognizing each identifiable sub-graph.</claim-text>
      <claim-text>5. The method recited in claim 4, further comprising creating sub-graphs comprising clusters of resources having physical closeness to one another.</claim-text>
      <claim-text>6. The method recited in claim 5, further comprising creating sub-graphs comprising clusters of resources having hyperlink closeness to one another.</claim-text>
      <claim-text>7. The method recited in claim 6, further comprising estimating a weight for each node of a graph, the weight reflecting a number of visits to the node, a cumulative total of the weights for nodes contained in a sub-graph being used for processing (load) balancing.</claim-text>
      <claim-text>8. The method recited in claim 7, load balancing including: maintaining information regarding average access time and processing time of an object or a sub-graph, these access and processing times forming a processing rate; mapping sub-graphs to desired processors based upon processing rate differences.</claim-text>
      <claim-text>9. The method recited in claim 8, further comprising: identifying communities of sub-graphs that have numerous connections;</claim-text>
      <claim-text>and mapping sub-graphs having numerous connections to a same processor.</claim-text>
      <claim-text>10. The method recited in claim 9, further comprising using a hierarchically structured namespace having syntactic components to identify objects.</claim-text>
      <claim-text>11. The method recited in claim 9, further comprising: maintaining a queue and a hit-hash for each processor of sub-graphs, the hit-hash maintained for objects having a potentially large in-degree; checking the processors hit-hash for the object if a new object is encountered by a processor, and processing the object if is the hit-hash, otherwise; moving the object to a temporary location; having each another processor check its hit-hash and queue for the object;</claim-text>
      <claim-text>and further processing the object.</claim-text>
      <claim-text>12. The method recited in claim 9, further comprising using non-preferred (lightweight) processors and preferred processors for processing, wherein a lightweight processor can be removed from processing at any time.</claim-text>
      <claim-text>13. The method recited in claim 12, further comprising not re-balancing the processing load between processors when a lightweight processor is added or removed from processing.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The medium recited in claim 14, the method further comprising pushing the located desired objects to a user desiring the objects.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The medium recited in claim 15, wherein the web-graph defines a resource identification space containing resource identifications, the resource identification space being a directed graph having a collection of vertices and ordered nodes connecting the vertices, each resource identification defining a vertex of the directed graph.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The medium recited in claim 16, partitioning the web-graph into sub-graphs comprising: coarsening the web-graph to create sub-graphs, the sub-graphs comprising identifiable groupings of objects, where coarsening comprises contracting the vertices in the web-graph;</claim-text>
      <claim-text>and dynamically recognizing each identifiable sub-graph.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The medium recited in claim 17, further comprising creating sub-graphs comprising clusters of resources having physical closeness to one another.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The medium recited in claim 18, further comprising creating sub-graphs comprising clusters of resources having hyperlink closeness to one another.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The medium recited in claim 18, load balancing including: maintaining information regarding average access time and processing time of an object or a sub-graph, these access and processing times forming a processing rate; mapping sub-graphs to desired processors based upon processing rate differences.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The medium recited in claim 20, further comprising: identifying communities of sub-graphs that have numerous connections;</claim-text>
      <claim-text>and mapping sub-graphs having numerous connections to a same processor.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The medium recited in claim 21, further comprising using a hierarchically structured namespace having syntactic components to identify objects.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The medium recited in claim 21, further comprising: maintaining a queue and a hit-hash for each processor of sub-graphs, the hit-hash maintained for objects having a potentially large in-degree; checking the processors hit-hash for the object if a new object is encountered by a processor, and processing the object if is the hit-hash, otherwise; moving the object to a temporary location; having each another processor check its hit-hash and queue for the object;</claim-text>
      <claim-text>and further processing the object.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The medium recited in claim 21, further comprising using non-preferred (lightweight) processors and preferred processors for processing, wherein a lightweight processor can be removed from processing at any time.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The medium recited in claim 24, further comprising not re-balancing the processing load between processors when a lightweight processor is added or removed from processing.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The medium recited in claim 17, further comprising estimating a weight for each node of a graph, the weight reflecting a number of visits to the node, a cumulative total of the weights for nodes contained in a sub-graph being used for processing (load) balancing.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. An apparatus for traversing an information system to retrieve designated objects, the apparatus comprising: a recognizer to determine a format for each object retrieved; a summarizer to read varying data formats communicatively coupled to the recognizer; an expander for expanding objects having a compressed format communicatively coupled to the recognizer and the summarizer; storage and processors included in one or more of the above, the processors capable of reading digital signals to traverse the information system to retrieve designated objects by: - constructing logical web-graphs defining logical relationships between specified objects in the information system; - partitioning the web-graph into sub-graphs;</claim-text>
      <claim-text>and - processing the specified objects to locate desired objects by:</claim-text>
      <claim-text>-  balancing the processing of the specified objects by mapping the sub-graphs to one or more preferred processors, wherein a processor is preferred if it reduces processing time or overhead;</claim-text>
      <claim-text>and - re-balancing the processing if the processing load becomes unbalanced.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The apparatus recited in claim 27, further comprising pushing the located desired objects to a user desiring the objects.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The apparatus recited in claim 27, wherein the web-graph defines a resource identification space containing resource identifications, the resource identification space being a directed graph having a collection of vertices and ordered nodes connecting the vertices, each resource identification defining a vertex of the directed graph.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The apparatus recited in claim 29, partitioning the web-graph into sub-graphs comprising: coarsening the web-graph to create sub-graphs, the sub-graphs comprising identifiable groupings of objects, where coarsening comprises contracting the vertices in the web-graph;</claim-text>
      <claim-text>and dynamically recognizing each identifiable sub-graph.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. The apparatus recited in claim 30, further comprising creating sub-graphs comprising clusters of resources having physical closeness to one another.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The apparatus recited in claim 31, further comprising creating sub-graphs comprising clusters of resources having hyperlink closeness to one another.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The apparatus recited in claim 32, further comprising estimating a weight for each node of a graph, the weight reflecting a number of visits to the node, a cumulative total of the weights for nodes contained in a sub-graph being used for processing (load) balancing.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The apparatus recited in claim 33, load balancing including: maintaining information regarding average access time and processing time of an object or a sub-graph, these access and processing times forming a processing rate; mapping sub-graphs to desired processors based upon processing rate differences.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. The apparatus recited in claim 34, further comprising: identifying communities of sub-graphs that have numerous connections;</claim-text>
      <claim-text>and mapping sub-graphs having numerous connections to a same processor.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. The apparatus recited in claim 35, further comprising using a hierarchically structured namespace having syntactic components to identify objects.</claim-text>
    </claim>
    <claim num="37">
      <claim-text>37. The apparatus recited in claim 35, further comprising: maintaining a queue and a hit-hash for each processor of sub-graphs, the hit-hash maintained for objects having a potentially large in-degree; checking the processors hit-hash for the object if a new object is encountered by a processor, and processing the object if is the hit-hash, otherwise; moving the object to a temporary location; having each another processor check its hit-hash and queue for the object;</claim-text>
      <claim-text>and further processing the object.</claim-text>
    </claim>
    <claim num="38">
      <claim-text>38. The apparatus recited in claim 35, further comprising using non-preferred (lightweight) processors and preferred processors for processing, wherein a lightweight processor can be removed from processing at any time.</claim-text>
    </claim>
    <claim num="39">
      <claim-text>39. The apparatus recited in claim 38, further comprising not re-balancing the processing load between processors when a lightweight processor is added or removed from processing.</claim-text>
    </claim>
    <claim num="40">
      <claim-text>40. An apparatus for traversing an information system to retrieve designated objects, the apparatus comprising: a means for recognizing a format for an object retrieved; a means for summarizing and reading varying data formats communicatively coupled to the recognizing means; a means for expanding objects having a compressed format and communicatively coupled to the recognizing means and the summarizing means; storage means and processor means included in one or more of the above, the storage means for storing digital signals, the processor means for reading digital signals and traversing the information system to retrieve designated objects by: - constructing logical web-graphs defining logical relationships between specified objects in the information system; - partitioning the web-graph into sub-graphs;</claim-text>
      <claim-text>and - processing the specified objects to locate desired objects by: -  balancing the processing of the specified objects by mapping the sub-graphs to one or more preferred processors, wherein a processor is preferred if it reduces processing time or overhead;</claim-text>
      <claim-text>and - re-balancing the processing if the processing load becomes unbalanced.</claim-text>
    </claim>
    <claim num="41">
      <claim-text>41. The apparatus recited in claim 40, further comprising a means for pushing the located desired objects to a user desiring the objects.</claim-text>
    </claim>
    <claim num="42">
      <claim-text>42. The apparatus recited in claim 40, wherein the web-graph defines a resource identification space containing resource identifications, the resource identification space being a directed graph having a collection of vertices and ordered nodes connecting the vertices, each resource identification defining a vertex of the directed graph.</claim-text>
    </claim>
    <claim num="43">
      <claim-text>43. The apparatus recited in claim 42, partitioning the web-graph into sub-graphs comprising: a means for coarsening the web-graph to create sub-graphs, the sub-graphs comprising identifiable groupings of objects, where coarsening comprises contracting the vertices in the web-graph;</claim-text>
      <claim-text>and a means for dynamically recognizing each identifiable sub-graph.</claim-text>
    </claim>
  </claims>
</questel-patent-document>