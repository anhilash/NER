<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182241B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182241</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182241</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="24477710" extended-family-id="42021563">
      <document-id>
        <country>US</country>
        <doc-number>09141765</doc-number>
        <kind>A</kind>
        <date>19980827</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09141765</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43043623</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>14176598</doc-number>
        <kind>A</kind>
        <date>19980827</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09141765</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>61844396</doc-number>
        <kind>A</kind>
        <date>19960319</date>
        <priority-linkage-type>1</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1996US-08618443</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  11/14        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>14</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>714016000</text>
        <class>714</class>
        <subclass>016000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>707999202</text>
        <class>707</class>
        <subclass>999202</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>714015000</text>
        <class>714</class>
        <subclass>015000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>714E11130</text>
        <class>714</class>
        <subclass>E11130</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>714E11131</text>
        <class>714</class>
        <subclass>E11131</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/1474</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>1474</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130821</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-2201/80</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>2201</main-group>
        <subgroup>80</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20150924</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99953</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99953</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>11</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>6</number-of-drawing-sheets>
      <number-of-figures>6</number-of-figures>
      <image-key data-format="questel">US6182241</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for improved transaction recovery</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>LAMPSON BUTLER, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5335343</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5335343</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>NGAI GARY C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5850507</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5850507</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>MASAI KAZUO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5065311</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5065311</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>FUKUMOTO TAKESHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5155678</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5155678</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>FREY JR ALEXANDER H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5201044</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5201044</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>MOHAN CHANDRASEKARAN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5280611</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5280611</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>MOHAN CHANDRASEKARAN</text>
          <document-id>
            <country>US</country>
            <doc-number>5333303</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5333303</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>BHIDE ANUPAM K, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5440727</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5440727</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>SAETHER CHRISTIAN D</text>
          <document-id>
            <country>US</country>
            <doc-number>5481699</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5481699</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>LOMET DAVID B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5485608</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5485608</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>LOMET DAVID B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5524205</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5524205</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>FORTIER PAUL J</text>
          <document-id>
            <country>US</country>
            <doc-number>5524239</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5524239</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>GHONEIMY ADEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5524241</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5524241</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>MOHAN CHANDRASEKARAN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5551046</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5551046</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>SARKAR SHYAM S</text>
          <document-id>
            <country>US</country>
            <doc-number>5561795</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5561795</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>WANG YI-MIN</text>
          <document-id>
            <country>US</country>
            <doc-number>5630047</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5630047</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="17">
          <text>ROFFE JAMES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5734817</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5734817</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="18">
          <text>LOMET DAVID B</text>
          <document-id>
            <country>US</country>
            <doc-number>5933838</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5933838</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="19">
          <text>LOMET DAVID B</text>
          <document-id>
            <country>US</country>
            <doc-number>6067550</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6067550</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>IBM Technical Disclosure Bulletin, "Shared Data Availability Across A System Failure" vol. 28, No. 3, pp 950-951, Aug. 1985.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Microsoft Press, "Microsoft Press Computer Dictionary, Third Edition", pp. 408.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Oxford University Press, Dictionary of Computing, Fourth Edition, pp. 125, 299.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Mohan et al., "Aries-RRH: Restricted Repeating of History in the Aries Transaction Recovery Method," Data Engineering, 7th int'l. Conference, IEEE, pp. 718-727. Dec. 1991.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>61844396</doc-number>
              <kind>A</kind>
              <date>19960319</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5850507</doc-number>
              <kind>A</kind>
              <date>19981215</date>
            </document-id>
          </parent-doc>
        </relation>
      </continuation>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Oracle Corporation</orgname>
            <address>
              <address-1>Redwood Shores, CA, US</address-1>
              <city>Redwood Shores</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>ORACLE</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Ngai, Gary C.</name>
            <address>
              <address-1>Saratoga, CA, US</address-1>
              <city>Saratoga</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Rizvi, Hasan</name>
            <address>
              <address-1>Fremont, CA, US</address-1>
              <city>Fremont</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Tan, Leng Leng</name>
            <address>
              <address-1>Sunnyvale, CA, US</address-1>
              <city>Sunnyvale</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Hickman Palermo Truong &amp; Becker, LLP</orgname>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Becker, Edward A.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Le, Dieu-Minh T.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      An approach for recovering after premature termination of a plurality of transactions involves: A) selecting a previously unselected transaction from the plurality of transactions; B) processing the selected transaction by undoing the lesser of a predetermined number of changes made by the selected transaction and all changes made by the selected transaction; and C) repeating steps A) and B) until all of the plurality of transactions have been processed.
      <br/>
      Another aspect of the approach involves: A) selecting a previously unselected transaction from the plurality of transactions, wherein the selected transaction is the previously unselected transaction from the plurality of transactions that made the fewest number of changes in the database; B) processing the selected transaction by undoing one or more changes in the database made by the selected transaction; and C) repeating steps A) and B) until all transactions from the plurality of transactions have been processed.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application is a continuation of application Ser.
      <br/>
      No. 08/618,443 filed Mar. 19, 1996, issued on Dec. 15, 1998 as U.S. Pat. No. 5,850,507.
    </p>
    <heading>FIELD OF THE INVENTION</heading>
    <p num="2">
      The present invention relates to database management systems (DBMS).
      <br/>
      More specifically, the present invention relates to a method and apparatus for recovering after a crash of an instance in a database that allows users to access the database without having to wait for the DBMS to roll back every uncommitted transaction present during system failure.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="3">
      In typical database systems, users store, update and retrieve information by submitting commands to a database application.
      <br/>
      To be correctly processed, the commands must comply with the database language that is supported by the database application.
      <br/>
      One popular database language is known as Structured Query Language (SQL).
    </p>
    <p num="4">
      A logical unit of work that is atomic and comprised of one or more database language statements is referred to as a transaction.
      <br/>
      In a database server, a memory area called the System Global Area (SGA) is allocated and one or more processes are started to execute one or more transactions.
      <br/>
      The combination of SGA background system processes and the processes executing transactions is called a database instance.
    </p>
    <p num="5">
      A buffer cache resides in a portion of the SGA and holds database information.
      <br/>
      Buffers in the buffer cache hold copies of data blocks that have been read from data files.
      <br/>
      The buffers are shared by all user processes concurrently connected to the instance.
      <br/>
      When a transaction desires to make a change to a data block, a copy of the data block is loaded into a buffer and the change is made to the copy of the data block stored in the database buffer cache in dynamic memory.
      <br/>
      Afterwards, a database writer writes the modified blocks of data from the database buffer cache to the data files on disk.
    </p>
    <p num="6">
      The SGA also contains a redo log buffer.
      <br/>
      A redo log buffer is a circular buffer that holds information about update operations recently performed by transactions.
      <br/>
      This information is stored in redo entries.
      <br/>
      Redo entries contain the information necessary to reconstruct, or redo, changes made by operations such as INSERT, UPDATE, DELETE, CREATE, ALTER, or DROP operations for example.
      <br/>
      Redo entries are generated for each change made to a copy of a data block stored in the database buffer cache.
      <br/>
      The redo log buffer is written to an active online redo log file group on disk by a background process.
      <br/>
      The records in the online redo log file group on disk are referred to as redo logs.
    </p>
    <p num="7">
      An instance failure can occur when a problem arises that prevents an instance from continuing work.
      <br/>
      Instance failures may result from hardware problems such as a power outage, or software problems such as an operating system or database system crash.
      <br/>
      Instance failures can also occur expectedly, for example, when a SHUTDOWN ABORT or a STARTUP FORCE statement is issued.
    </p>
    <p num="8">
      Due to the way in which database updates are performed to data files in some database systems, at any given point in time, a data file may contain some data blocks that (1) have been tentatively modified by uncommitted transactions and/or (2) do not yet reflect updates performed by committed transactions.
      <br/>
      Thus, an instance recovery operation must be performed after an instance failure to restore a database to the transaction consistent state it possessed just prior to the instance failure.
      <br/>
      In a transaction consistent state, a database reflects all the changes made by transactions which are committed and none of the changes made by transactions which are not committed.
    </p>
    <p num="9">
      A typical DBMS performs several steps during an instance recovery.
      <br/>
      First, the DBMS rolls forward, or reapplies to the data files all of the changes recorded in the redo log.
      <br/>
      Rolling forward proceeds through as many redo log files as necessary to bring the database forward in time to reflect all of the changes made prior to the time of the crash.
      <br/>
      Rolling forward usually includes applying the changes in online redo log files, and may also include applying changes recorded in archived redo log files (online redo files which are archived before being reused).
      <br/>
      After rolling forward, the data blocks contain all committed changes as well as any uncommitted changes that were recorded in the redo log prior to the crash.
      <br/>
      Rollback segments include records for undoing uncommitted changes made during the roll-forward operation.
      <br/>
      In database recovery, the information contained in the rollback segments is used to undo the changes made by transactions that were uncommitted at the time of the crash.
      <br/>
      The process of undoing changes made by the uncommitted transactions is referred to as "rolling back" the transactions.
    </p>
    <p num="10">
      FIG. 1 illustrates rolling forward and rolling back.
      <br/>
      Database 110 is a database requiring recovery at time t1.
      <br/>
      Database 120 represents the database after a redo log is applied at time t2.
      <br/>
      The database 120 comprises both changes made by committed transactions 121 and changes made by uncommitted transactions 122.
      <br/>
      Database 130 represents the database at time t3 after a rollback segment is applied.
      <br/>
      The database 130 comprises only changes made by committed transactions 121.
    </p>
    <p num="11">
      When rolling back a transaction, the DBMS releases any resources (locks) held by the transaction at the time of failure.
      <br/>
      Lastly, the DBMS resolves any pending distributed transactions that were undergoing a two-phase commit coordinated by the DBMS at the time of the instance failure.
    </p>
    <p num="12">
      One disadvantage of the prior method of recovering after a crash of an instance of a database is that it required changes made by uncommitted transactions to be rolled back before the database could be made available to new transactions.
      <br/>
      This would take a long period of time when a large number of transactions were active during the instance, because it would require a large number of transactions to be rolled back, including changes to the parts of the database which are not of immediate interest to the users.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="13">According to one aspect of the invention, a method for recovering after premature termination of a plurality of transactions comprises the steps of: A) selecting a previously unselected transaction from the plurality of transactions; B) processing the selected transaction by undoing the lesser of a predetermined number of changes made by the selected transaction and all changes made by the selected transaction; and C) repeating steps A) and B) until all of the plurality of transactions have been processed.</p>
    <p num="14">According to another aspect of the invention, a method for recovering a database after the premature termination of a plurality of transactions comprises the computer implemented steps of: A) selecting a previously unselected transaction from the plurality of transactions, wherein the selected transaction is the previously unselected transaction from the plurality of transactions that made the fewest number of changes in the database; B) processing the selected transaction by undoing one or more changes in the database made by the selected transaction; and C) repeating steps A) and B) until all transactions from the plurality of transactions have been processed.</p>
    <p num="15">
      According to another aspect of the invention, a computer system for recovering after premature termination of a plurality of transactions comprises one or more processors and a memory coupled to the one or more processors.
      <br/>
      The memory contains one or more sequences of one or more instructions which, when executed by the one or more processors, cause the one or more processors to perform the steps of: A) selecting a previously unselected transaction from the plurality of transactions; B) processing the selected transaction by undoing the lesser of a predetermined number of changes made by the selected transaction and all changes made by the selected transaction; and C) repeating steps A) and B) until all of the plurality of transactions have been processed.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="16">
      The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:
      <br/>
      FIG. 1 illustrates rolling forward and rollback operations;
      <br/>
      FIG. 2 is a block diagram of a system which may be programmed to implement the present invention;
      <br/>
      FIG. 3 illustrates a rollback segment header according to one embodiment of the present invention;
      <br/>
      FIG. 4 illustrates a data container and rollback records of a database according to an embodiment of the invention;
      <br/>
      FIG. 5 is a flow chart illustrating a method for recovering after an instance failure in a database; and
      <br/>
      FIG. 6 is a flow chart illustrating a method for recovering after a transaction failure in a database.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="17">
      A method and apparatus for recovering after a crash of an instance in a database is described.
      <br/>
      In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention.
      <br/>
      It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details.
      <br/>
      In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.
    </p>
    <heading>HARDWARE OVERVIEW</heading>
    <p num="18">
      Referring to FIG. 2, the computer system upon which the preferred embodiment of the present invention can be implemented is shown as 200.
      <br/>
      Computer system 200 comprises a bus or other communication means 201 for communicating information, and a processing means 202 coupled with bus 201 for processing information.
      <br/>
      System 200 further comprises a random access memory (RAM) or other dynamic storage device 204 (referred to as main memory), coupled to bus 201 for storing information and instructions to be executed by processor 202.
      <br/>
      Main memory 204 also may be used for storing temporary variables or other intermediate information during execution of instructions by processor 202.
      <br/>
      Computer system 200 also comprises a read only memory (ROM) and/or other static storage device 206 coupled to bus 201 for storing static information and instructions for processor 202.
      <br/>
      Data storage device 207 is coupled to bus 201 for storing information and instructions.
    </p>
    <p num="19">
      A data storage device 207 such as a magnetic disk or optical disk and its corresponding disk drive can be coupled to computer system 200.
      <br/>
      Computer system 200 can also be coupled via bus 201 to a display device 221, such as a cathode ray tube (CRT), for displaying information to a computer user.
      <br/>
      An alphanumeric input device 222, including alphanumeric and other keys, is typically coupled to bus 201 for communicating information and command selections to processor 202.
      <br/>
      Another type of user input device is cursor control 223, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor 202 and for controlling cursor movement on display 221.
      <br/>
      This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), which allows the device to specify positions in a plane.
    </p>
    <p num="20">
      Alternatively, other input devices such as a stylus or pen can be used to interact with the display.
      <br/>
      A displayed object on a computer screen can be selected by using a stylus or pen to touch the displayed object.
      <br/>
      The computer detects the selection by implementing a touch sensitive screen.
      <br/>
      Similarly, a light pen and a light sensitive screen can be used for selecting a displayed object.
      <br/>
      Such devices may thus detect selection position and the selection as a single operation instead of the "point and click," as in a system incorporating a mouse or trackball.
      <br/>
      Stylus and pen based input devices as well as touch and light sensitive screens are well known in the art.
      <br/>
      Such a system may also lack a keyboard such as 222 wherein all interface is provided via the stylus as a writing instrument (like a pen) and the written text is interpreted using optical character recognition (OCR) techniques.
    </p>
    <p num="21">In the currently preferred embodiment of the invention, computer system 100 is configured to execute a database application that recovers after a crash of an instance.</p>
    <heading>ROLLBACK SEGMENTS</heading>
    <p num="22">
      Each database contains one or more rollback segments.
      <br/>
      Each rollback segment contains a transaction table and a plurality of rollback entries (undo records).
      <br/>
      After being rolled forward, a rollback segment contains state information of transactions before a crash.
      <br/>
      FIG. 3 illustrates an exemplary rollback segment 300 with transaction table 310 and rollback entries 320.
      <br/>
      A transaction table includes a plurality of slots, where each slot can hold an entry that corresponds to a transaction.
      <br/>
      Each entry contains a sequence number, a status indication, and a field for indicating whether or not the corresponding transaction is dead.
    </p>
    <p num="23">
      The number of entries that a particular transaction table can hold is limited.
      <br/>
      When a transaction table is full and an entry needs to be added for a new transaction, the entry that corresponds to the oldest transaction is overwritten with the new entry.
      <br/>
      To distinguish between transactions that have used the same slot, the sequence number for a slot is changed every time the slot is reused.
      <br/>
      For example, every time a slot is reused, the sequence number may be incremented.
    </p>
    <p num="24">
      To uniquely identify transactions, transaction IDs are generated from the information contained in the transaction table entries that correspond to the transaction.
      <br/>
      In one embodiment, the transaction ID of a transaction consists of the number of the transaction table that contains the entry for the transaction, the slot number that holds the entry, and the sequence number of the transaction.
    </p>
    <p num="25">
      Rollback entries are kept for transaction tables.
      <br/>
      A rollback entry contains undo information that specifies how to remove changes made to the database during an operation in a particular transaction.
      <br/>
      Rollback entries for the same transaction are linked together so the entries can easily be found if necessary for transaction rollback.
    </p>
    <heading>DATA CONTAINERS</heading>
    <p num="26">
      When data in the database is changed in response to the execution of a transaction, the transaction ID of the transaction is stored with the data to identify the transaction that made the changes.
      <br/>
      Referring to FIG. 4, it illustrates an exemplary data container 400 of a database.
      <br/>
      The data container 400 includes a transaction list section 402 and a data section 404.
      <br/>
      The transaction list section 402 includes entries that correspond to transactions that have modified data container 400.
      <br/>
      Each entry includes an index number 422, a transaction ID 424, a status flag 425, a lock count indicator 428, and an undo pointer 432.
    </p>
    <p num="27">
      The status flag 425 indicates whether the transaction that corresponds to the entry is active or has committed.
      <br/>
      The lock count indicator 428 indicates how many rows within the block are write locked by the transaction.
      <br/>
      The undo pointer 432 points to a rollback entry in the rollback segment that indicates how to undo the most recent change made to the block by the transaction that corresponds to the entry.
    </p>
    <p num="28">
      The data section of the block includes rows of data.
      <br/>
      A portion of each row is used as a write lock indicator 434 to indicate whether the row is currently write locked.
      <br/>
      In the preferred embodiment, the write lock indicator 434 contains a number that indicates the entry in the transaction list belonging to the transaction that holds the lock on the row in question.
    </p>
    <heading>ROLLBACK ENTRIES</heading>
    <p num="29">
      FIG. 4 also illustrates the contents of a rollback entry in a rollback segment and how the rollback entry is accessed by an undo pointer according to an embodiment of the invention.
      <br/>
      The rollback entry includes a transaction ID 406, a block number 408, a prior change pointer 410, and undo information 412.
      <br/>
      The transaction ID 406 identifies the transaction which performed the operation that corresponds to the undo record.
      <br/>
      The block number 408 indicates the data container on which the operation was performed.
      <br/>
      The undo information 412 contains data necessary for undoing the operation that was performed on the identified block by the identified transaction.
    </p>
    <p num="30">
      The undo pointer 410 points to a rollback entry 418 for undoing a previous change to the same block by the same transaction.
      <br/>
      Each change made to the block by a transaction is linked in this manner to form a linked list of rollback entries.
      <br/>
      The undo pointer in the transaction list section 402 points to the end of the linked list that represents the most recent change to the block made by the transaction.
      <br/>
      At the other end of the linked list is the undo record that corresponds to the first change made to the block by the transaction.
    </p>
    <p num="31">
      The rollback entry that corresponds to the first change made to the block by a particular transaction does not contain a pointer to an undo record for an earlier change to the block by the same transaction, since there can be no change earlier than the first change.
      <br/>
      Rather, the rollback entry that corresponds to the first change made by a transaction to a block contains the entry that was overwritten in the transaction list of the block by the entry for the transaction at issue.
    </p>
    <p num="32">
      In the illustrated example, the entry 414 corresponds to the transaction identified by the transaction ID "7,3,8".
      <br/>
      The undo pointer in entry 414 points to the rollback entry 416 that corresponds to the last change made to data container 400 by transaction "7,3,8".
      <br/>
      The undo pointer of rollback entry 416 points to rollback entry 418 that corresponds to the first change made to data container 400 by transaction "7,3,8".
      <br/>
      Thus, transaction "738" made two updates to the data in data container 400.
      <br/>
      The undo record 418 contains a record 420 of the entry that was overwritten by entry 414.
    </p>
    <heading>RECOVERY AFTER AN INSTANCE FAILURE</heading>
    <p num="33">
      FIG. 5 is a flowchart illustrating a method for recovering after an instance failure in a database.
      <br/>
      At step 500, cache recovery is performed.
      <br/>
      Cache recovery involves updating the database to reflect changes that had been made to cached blocks of data prior to the crash, but which had not yet been applied to the database at the time of the crash.
      <br/>
      As mentioned earlier, cache recovery typically involves applying a plurality of changes recorded in a redo log to data files in the database.
    </p>
    <p num="34">
      At step 501, transaction information that corresponds to a transaction associated with an instance that crashed is found.
      <br/>
      In one embodiment of the present invention, the transaction information is in the form of a transaction table such as the table illustrated in FIG. 3.
      <br/>
      The transaction table includes entries corresponding to transactions that existed in an instance.
      <br/>
      Finding transaction information corresponding to a transaction associated with an instance that crashed can be achieved by identifying a rollback segment associated with the instance that crashed.
      <br/>
      Once a rollback segment associated with the instance that crashed is identified, a transaction table in the rollback segment may be accessed.
    </p>
    <p num="35">
      At step 502, it is determined based on the transaction information whether the transaction associated with the instance that crashed was active.
      <br/>
      This determination can be achieved by reading status information in the transaction table.
      <br/>
      The status information will indicate whether the transaction was committed or active at the time of the instance failure.
      <br/>
      If the transaction was active when the instance crashed, then control proceeds to step 503.
      <br/>
      If the transaction was committed when the instance crashed, then control proceeds to step 504.
    </p>
    <p num="36">
      At step 503, the transaction information is updated to indicate that the transaction is dead.
      <br/>
      This can be achieved by setting a flag in a field of an entry that is associated with the transaction in the transaction table.
      <br/>
      For example, a bit may be set in the "DEAD" field of the transaction table entry that corresponds to the transaction (see FIG. 3).
    </p>
    <p num="37">
      At step 504, it is determined whether all the transactions are processed.
      <br/>
      If all the transactions are processed, control proceeds to step 505.
      <br/>
      If not all the transactions are processed, control returns to step 501.
    </p>
    <p num="38">
      At step 505, the database is made available to the users.
      <br/>
      By making the database available to the users after updating the transaction information and before undoing any updates performed by the dead transaction, the present method for recovery allows the user to access data that was not affected by the instance crash almost immediately after the crash.
      <br/>
      Thus, the users are not penalized by having to wait for the DBMS to recover data files which the users would otherwise not need to access.
    </p>
    <p num="39">
      At step 506, a new transaction is executed.
      <br/>
      When the new transaction requests access to a resource, it is determined whether the resource is available or unavailable (step 507).
      <br/>
      The resource will not be available if resources is locked by another transaction.
      <br/>
      Determining whether a resource is available or unavailable can be achieved by checking the write lock indicator in the data section of a container.
      <br/>
      If the resource is unavailable, control proceeds to step 508.
      <br/>
      If the resource is available, control proceeds to step 511.
    </p>
    <p num="40">
      At step 508, it is determined whether the locked resource belongs to a dead transaction (i.e. a transaction that was active and uncommitted at the time of the crash).
      <br/>
      Determining whether a resource belongs to a dead transaction can be achieved by first checking the transaction list of the container that corresponds to the resource, such as container 400 illustrated in FIG. 4, to determine the identity of the owner of the resource.
      <br/>
      Once the owner of the resource is identified, transaction information corresponding to the owner (e.g. the transaction table entry for the owner) is found to determine whether the owner is a transaction which is dead.
      <br/>
      If the resource belongs to an owner that is not dead, control proceeds to step 509.
      <br/>
      If the resource belongs to an owner that it is dead, control proceeds to step 510.
    </p>
    <p num="41">
      At step 509, control proceeds to wait for the resource to be made available.
      <br/>
      When the current owner of the resource completes, the lock on the resource will be released.
    </p>
    <p num="42">
      At step 510, the new transaction makes the resource available (unlocks the resource) by undoing some or all of the changes made by the dead transaction, including those changes which caused the resource to be locked.
      <br/>
      To undo the changes, the new transaction retrieves a location of one or more undo records for the transaction which locked the resource.
      <br/>
      After the undo records are retrieved, the operations specified in the undo records are executed and the lock to the resource is released.
    </p>
    <p num="43">At step 511, the new transaction accesses the resource and completes the transaction.</p>
    <p num="44">
      According to one embodiment of the present invention, the new transaction undoes other changes made by the other dead transactions after undoing the change made by the dead transaction which locked the resource.
      <br/>
      The new transaction accesses other rollback entries which are linked to the rollback entry associated with the portion of the change which locked the resource and executes operations in these roll back entries.
      <br/>
      According to an alternate embodiment of the present invention, the new transaction ceases rolling back the dead transaction after a predetermined amount of undo records from the rollback entries have been executed.
      <br/>
      The policy of limiting the amount of rollback a new transaction must perform places a cap on the performance penalty that new transactions will suffer when blocked by a dead transaction.
      <br/>
      According to still an alternate embodiment of the present invention, the new transaction undoes all the changes made by the dead transaction which locked the resource only.
    </p>
    <p num="45">In another embodiment of the present invention, the new transaction undoes all changes made by the transaction which was active when the instance crashed.</p>
    <p num="46">
      An independent background process dedicated to rolling back changes made by dead transactions can be used instead of or in combination with causing new transactions to roll back the dead transactions that block them.
      <br/>
      In one embodiment, an independent recovery process makes multiple passes over all the transactions that need recovery and applies only a predefined number of undo records per dead transaction per pass.
      <br/>
      Thus, instead of sequentially rolling back entire transactions which are marked dead, the independent recovery process applies a predefined number of undo records of a dead transaction and then proceeds to rollback the next dead transaction.
      <br/>
      This prevents the rollback of long transactions that are dead from imposing long delays on the rollback of shorter transactions that are dead.
      <br/>
      In another embodiment of the present invention, the independent recovery process recovers short running transactions before longer running transaction.
      <br/>
      This prevents the longer transactions from holding up the recovery process.
    </p>
    <heading>RECOVERY AFTER A TRANSACTION FAILURE</heading>
    <p num="47">
      FIG. 6 is a flowchart illustrating a method for recovering after a transaction prematurely terminates.
      <br/>
      These steps may be performed when a new transaction attempts to access resource that is held by another transaction.
      <br/>
      At step 600, a new transaction is executed.
    </p>
    <p num="48">
      At step 601, the system detects that a new transaction is blocked.
      <br/>
      The detection is achieved when the new transaction attempts to access a resource held by another transaction.
    </p>
    <p num="49">
      At step 602, transaction information that corresponds to the blocking transaction is found.
      <br/>
      In one embodiment of the present invention, the transaction information is in the form of an entry in a transaction table such as the table 310 illustrated in FIG. 3.
      <br/>
      As explained above, the transaction table 310 includes entries, each of which corresponds to and reflects the current state of the transaction corresponding to transactions that existed in an instance.
    </p>
    <p num="50">
      At step 603, it is determined, based on the transaction information, whether the blocking transaction is an active transaction or a dead transaction.
      <br/>
      This determination can be achieved by reading status information in the transaction table and gaining access to a memory structure indicating that the transaction is still alive.
      <br/>
      The status information will indicate whether the transaction is active or committed.
      <br/>
      According to one embodiment, a dead status is indicated by an active status flag in a transaction table of an instance that crashed.
      <br/>
      If the transaction is dead, then control proceeds to step 604.
      <br/>
      If the transaction is active, then control proceeds to step 605.
    </p>
    <p num="51">
      At step 604, the new transaction undoes some or all of the changes made by the blocking transaction, including those changes which caused the resource to be locked.
      <br/>
      To undo the changes, the new transaction retrieves a location of one or more undo records for the transaction which locked the resource.
      <br/>
      After the undo records are retrieved, the operations specified in the undo records are executed and the lock to the resource is released.
    </p>
    <p num="52">At step 605, the system waits for the blocking transaction to commit.</p>
    <p num="53">At step 606, the new transaction accesses the resource and completes the transaction.</p>
    <p num="54">
      In the foregoing specification, the invention has been described with reference to specific embodiments thereof.
      <br/>
      It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention.
      <br/>
      The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for performing recovery after premature termination of a plurality of transactions, the method comprising the steps of :</claim-text>
      <claim-text>establishing a specified maximum number of changes to be undone for each of the plurality of transactions during a phase of the recovery, wherein the following steps are performed during the phase of the recovery:</claim-text>
      <claim-text>- A) selecting a previously unselected transaction from the plurality of transactions; - B) processing the selected transaction by undoing the lesser of the specified maximum number of changes made by the selected transaction and all changes made by the selected transaction;</claim-text>
      <claim-text>and - C) repeating steps A) and B) until all of the plurality of transactions have been processed.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method as recited in claim 1, wherein the step of undoing the lesser of the specified maximum number of changes made by the selected transaction and all changes made by the selected transaction includes the step of applying the lesser of the specified maximum number of undo records associated with the selected transaction and all undo records associated with the selected transaction.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method as recited in claim 1, further including the steps of D) re-establishing all transactions in the plurality of transactions as unselected transactions, E) repeating steps A), B) and C), and F) repeating steps D) and E) until all of the changes made by the plurality of transactions have been undone.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A method for performing recovery of a database after the premature termination of a plurality of transactions, the method comprising the computer implemented steps of: establishing a specified maximum number of changes to be undone for each of the plurality of transactions during a phase of the recovery, wherein the following steps are performed during the phase of the recovery: - A) selecting a previously unselected transaction from the plurality of transactions, wherein the selected transaction is the previously unselected transaction from the plurality of transactions that made the fewest number of changes in the database; - B) processing the selected transaction by undoing the lesser of the specified maximum number of changes made in the database by the selected transaction and all of the changes in the database made by the selected transaction;</claim-text>
      <claim-text>and - C) repeating steps A) and B) until all transactions from the plurality of transactions have been processed.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method as recited in claim 4, further comprising the step of executing an independent recovery process to undo the lesser of the specified maximum number of changes in the database made by the selected transaction and all of the changes in the database made by the selected transaction.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A computer system for performing recovery after premature termination of a plurality of transactions, the computer system comprising: one or more processors;</claim-text>
      <claim-text>and a memory coupled to the one or more processors and containing one or more sequences of one or more instructions which, when executed by the one or more processors, cause the one or more processors to perform the steps of: - establishing a specified maximum number of changes to be undone for each of the plurality of transactions during a phase of the recovery, wherein the following steps are performed during the phase of the recovery:</claim-text>
      <claim-text>-  A) selecting a previously unselected transaction from the plurality of transactions; -  B) processing the selected transaction by undoing the lesser of the specified maximum number of changes made by the selected transaction and all changes made by the selected transaction;</claim-text>
      <claim-text>and -  C) repeating steps A) and B) until all of the plurality of transactions have been processed.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The computer system as recited in claim 6, wherein the step of undoing the lesser of the specified maximum number of changes made by the selected transaction and all changes made by the selected transaction includes the step of applying the lesser of the specified maximum number of undo records associated with the selected transaction and all undo records associated with the selected transaction.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The computer system as recited in claim 6, wherein memory further includes instructions for D) re-establishing all transactions in the plurality of transactions as unselected transactions, E) repeating steps A), B) and C), and F) repeating steps D) and E) until all of the changes made by the plurality of transactions have been undone.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A computer-readable medium for performing recovery after premature termination of a plurality of transactions, the computer-readable medium carrying: one or more instructions which, when executed by one or more processors, cause the one or more processors to establish a specified maximum number of changes to be undone for each of the plurality of transactions during a phase of the recovery, wherein the following steps are performed during the phase of the recovery: - A) one or more instructions which, when executed by one or more processors, cause the one or more processors to select a previously unselected transaction from the plurality of transactions; - B) one or more instructions which, when executed by the one or more processors, cause the one or more processors to process the selected transaction by undoing the lesser of the specified maximum number of changes made by the selected transaction and all changes made by the selected transaction;</claim-text>
      <claim-text>and - C) one or more instructions which, when executed by the one or more processors, cause the one or more processors to repeat steps A) and B) until all of the plurality of transactions have been processed.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The computer-readable medium as recited in claim 9, wherein the step of undoing the lesser of the specified maximum number of changes made by the selected transaction and all changes made by the selected transaction includes the step of applying the lesser of the specified maximum number of undo records associated with the selected transaction and all undo records associated with the selected transaction.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The computer-readable medium as recited in claim 9, further carrying D) one or more instructions which when executed by the one or more processors, cause the one or more processors to re-establish all transactions in the plurality of transactions as unselected transactions, E) one or more instructions which, when executed by the one or more processors, cause the one or more processors to repeat steps A), B) and C), and F) one or more instructions which, when executed by the one or more processors, cause the one or more processors to repeat steps D) and E) until all of the changes made by the plurality of transactions have been undone.</claim-text>
    </claim>
  </claims>
</questel-patent-document>