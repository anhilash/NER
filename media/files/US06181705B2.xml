<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181705B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181705</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181705</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22622290" extended-family-id="20397492">
      <document-id>
        <country>US</country>
        <doc-number>08691803</doc-number>
        <kind>A</kind>
        <date>19960814</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1996US-08691803</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>20919373</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>69180396</doc-number>
        <kind>A</kind>
        <date>19960814</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1996US-08691803</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>17105093</doc-number>
        <kind>A</kind>
        <date>19931221</date>
        <priority-linkage-type>B</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1993US-08171050</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L  12/56        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>56</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L  13/08        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>13</main-group>
        <subgroup>08</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F  15/16        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>16</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F  13/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>G06F  13/38        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>38</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>G06F  15/163       20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>163</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>370412000</text>
        <class>370</class>
        <subclass>412000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>370429000</text>
        <class>370</class>
        <subclass>429000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>711171000</text>
        <class>711</class>
        <subclass>171000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04L-049/90C</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>049</main-group>
        <subgroup>90C</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04L-049/90</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>90</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04L-049/90M1</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>049</main-group>
        <subgroup>90M1</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/901</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>901</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/90</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>90</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/9052</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>9052</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>17</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>6</number-of-figures>
      <image-key data-format="questel">US6181705</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">System and method for management a communications buffer</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>QUINQUIS JEAN-PAUL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4933932</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4933932</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>FRANKLIN ANDREW D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4953157</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4953157</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>PASHAN MARK A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5233606</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5233606</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>HENRION MICHEL</text>
          <document-id>
            <country>US</country>
            <doc-number>5301192</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5301192</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>KAROL MARK J</text>
          <document-id>
            <country>US</country>
            <doc-number>5416769</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5416769</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>KATAOKA HIDEKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4788679</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4788679</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>FERENC JAMES J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4962497</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4962497</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>CIDON ISRAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4991172</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4991172</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>VESEL JOHN F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4993025</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4993025</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>MUNTER ERNST A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5126999</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5126999</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>NIPPON ELECTRIC ENG</text>
          <document-id>
            <country>JP</country>
            <doc-number>H03203442</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP03203442</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>MATSUSHITA ELECTRIC IND CO LTD</text>
          <document-id>
            <country>JP</country>
            <doc-number>H04192743</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP04192743</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>TOSHIBA CORP</text>
          <document-id>
            <country>JP</country>
            <doc-number>H04237238</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP04237238</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>17105093</doc-number>
              <kind>A</kind>
              <date>19931221</date>
            </document-id>
            <parent-status>ABANDONED</parent-status>
          </parent-doc>
        </relation>
      </continuation>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Branstad, Mark William</name>
            <address>
              <address-1>Rochester, MN, US</address-1>
              <city>Rochester</city>
              <state>MN</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Brech, Brad Louis</name>
            <address>
              <address-1>Rochester, MN, US</address-1>
              <city>Rochester</city>
              <state>MN</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Byrn, Jonathan William</name>
            <address>
              <address-1>Rochester, MN, US</address-1>
              <city>Rochester</city>
              <state>MN</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Delp, Gary Scott</name>
            <address>
              <address-1>Rochester, MN, US</address-1>
              <city>Rochester</city>
              <state>MN</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Montalvo, Rafael M.</name>
            <address>
              <address-1>Yorktown Heights, NY, US</address-1>
              <city>Yorktown Heights</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Felsman, Bradley, Vaden, Gunter &amp; Dillon, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Ngo, Ricky</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A network buffer memory is divided into pools of locations including a plurality of tinygram contiguous sections and a plurality of jumbogram contiguous sections.
      <br/>
      The tinygram contiguous sections available for storage of packets are listed in a list of tinygram pointers.
      <br/>
      The jumbogram contiguous sections available for storage of packets are also listed in a list of jumbogram pointers.
      <br/>
      A threshold for distinguishing the packets as tinygrams and jumbograms is programmed.
      <br/>
      As packets are received, they are measured against the threshold.
      <br/>
      Responsive to detection of an end of packet condition prior to reaching the threshold, storing the packet in a tinygram contiguous section.
      <br/>
      Otherwise, the packet is stored in a jumbogram contiguous section.
      <br/>
      Availability of sections is determined by query to the FIFO lists of pointers.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application is a continuation of Ser.
      <br/>
      No. 08/171,050, filed Dec. 21, 1993, now abandoned.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      1.
      <br/>
      Technical Field
    </p>
    <p num="3">The invention relates to distributed data processing systems and more particularly to management of a buffer for a network adaptor receiving and/or transmitting data packets for a node of a distributed data processing system.</p>
    <p num="4">2. Description of the Related Art</p>
    <p num="5">
      The passing of data between a communications link and a node comprising a computer or terminal is commonly supported by buffering the data.
      <br/>
      The object of buffering is to avoid rigid synchronization in operation of the communications link and the internal operations of the node.
      <br/>
      A buffer may be implemented using memory or data storage registers, a disk drive, a delay line, or any one of a number of technologies.
      <br/>
      Use of a buffer allows for differences in the rate of flow of information or time of occurrence of events when transmitting information between the communications link and node.
    </p>
    <p num="6">
      The organization of data for transmission over a communications link has a number of consequences relating to efficient use of the communications link, management of transmission and receipt of the data, efficient use of memory upon receipt of the data, among other things.
      <br/>
      For example, a common way of handling organization of data is the use of packets, in which control and data elements are switched and transmitted as a composite whole.
      <br/>
      The use of packets simplifies a number of issues concerning routing.
    </p>
    <p num="7">
      Packets, or other types of data frames, may be variable in length.
      <br/>
      This has an advantage over fixed length frames in terms of efficient utilization of a communications link throughput capacity.
      <br/>
      The allocation of space in a buffer for the creation, transmission, copying and manipulation of variable length frames can, however, consume a considerable portion of the processing power of a node if the task is implemented in sequential software.
      <br/>
      The computation and construction of direct memory access (DMA) control blocks is a major part of the problem.
    </p>
    <p num="8">
      One way to reduce the computational load imposed on a receiving node by the use of variable length frames is to receive the frames into buffer locations of fixed length, which allow for any possible size of frame, including headers which may be added to the frame after the bulk data copy.
      <br/>
      A problem with this approach is that requires use of a great deal of memory to implement because of internal fragmentation of the buffer.
    </p>
    <p num="9">
      Buffer location chaining has also been used as an approach to the problem.
      <br/>
      However, doing so requires construction of descriptions of the chains and the need to allocate memory bandwidth for the reading of the chains.
    </p>
    <p num="10">
      Also known is the use of a first-in, first-out (FIFO) receive buffer where only so much location as is needed for a packet/frame is used.
      <br/>
      This approach suffers from the complication of a need for clearing memory.
      <br/>
      When a memory location is released, all of the frames preceding the released frame in time must also be released before the particular location may be reused.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="11">It is an object of the present invention to provide a system and method for the management of a buffer for a network adaptor receiving data packets for a node in a distributed data processing system.</p>
    <p num="12">It is another object of the present invention to provide for a system and method for segregating data frames into two classes for managing buffer space.</p>
    <p num="13">
      The above and other objects of the invention are provided for by a network adaptor for implementing method of managing communication data.
      <br/>
      A network adaptor buffer memory is divided into pools including a plurality of tinygram contiguous sections and a plurality of jumbogram contiguous sections.
      <br/>
      The tinygram contiguous sections available for storage of packets are indicated by a list of pointers to the available tinygram contiguous sections.
      <br/>
      The jumbogram contiguous sections available for storage of packets are also indicated by a list of pointers to the available jumbogram contiguous sections.
      <br/>
      A threshold for distinguishing the packets as tinygrams and jumbograms is selected.
      <br/>
      Then, as packets are received, they are measured against the threshold.
      <br/>
      Responsive to detection of an end of packet condition prior to reaching the threshold, the packet is stored in a tinygram contiguous section.
      <br/>
      Otherwise, the packet is stored in a jumbogram contiguous section.
      <br/>
      The availability of sections is determined by query to the FIFO lists of pointers.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="14">
      The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself however, as well as a preferred mode of use, further objects and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:
      <br/>
      FIG. 1 is a block diagram of a token ring network interconnecting a plurality of nodes;
      <br/>
      FIG. 2 is a block diagram of data flow within a network adaptor for use on the network of FIG. 1;
      <br/>
      FIG. 3 is a graphical depiction of the frequency of occurrence length differentiated packets;
      <br/>
      FIG. 4 is a logical flow chart of a packet reception process for implementing the invention;
      <br/>
      FIG. 5 is a logical flow chart of a process for setting up transmission of packets in accordance with the invention; and
      <br/>
      FIG. 6 is a logical flow chart of a process for transmitting packets in accordance with the invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="15">
      FIG. 1 depicts a block diagram of an illustrative local area network 8 for supporting transmittal of data including file server and multimedia data between a plurality of nodes.
      <br/>
      Local area network 8 is depicted in a token ring geometry, however other geometries are possible.
      <br/>
      Server 12 communicates with computers 12A-12C over a communications channel 10.
      <br/>
      Server 12 is a conventional computer such as an IBM Personal System/2 or AS/400 system programmed to practice this invention, and includes a central processing unit 60, a memory 64, and a network adapter 62 for buffering outgoing and incoming transmissions of data frames or packets.
      <br/>
      Server 12 includes a hard drive unit 56 storing a plurality of multimedia and other data objects pending a request for access by one or more users.
      <br/>
      Such a request results in staging of the data object from hard drive unit 56 to computer memory 64 or network adaptor 62 over system bus 58.
      <br/>
      A number of objects exist within memory 64.
      <br/>
      An operating system and local area network server 66 are represented as one object.
      <br/>
      Objects stored on hard drive unit 64 and memory 64 to be transmitted must be organized into frames or packets and handed off to network adaptor 62.
      <br/>
      Similarly, data being received over ring 10 may be staged from network adaptor 62 for transfer to hard drive unit 56 or memory 64.
      <br/>
      CPU 60 can program a direct memory access (DMA) controller 61 to handle transfer of data over system bus 58 to and from network adaptor 62.
    </p>
    <p num="16">
      Users access data files stored on sever 12 through computers 12A-12C.
      <br/>
      Computer 12B is a typical example.
      <br/>
      A computer 12B operates as a personal workstation communicating with computer 12.
      <br/>
      Schematically the personal workstation 12B is substantially similar to server 12, and includes a network adapter 78, a display adapter 84, a hard drive unit 90, a central processing unit (CPU) 82 and an addressable memory 88.
      <br/>
      Components of personal workstation 12B transfer data internally over a system bus 83.
      <br/>
      CPU 82 directly controls input peripherals 80 which may include a keyboard and a mouse.
      <br/>
      Display adapter 84 drives a display device 86, upon which data from a file is visually presented.
      <br/>
      Memory 88 includes a command structure 94 for use in establishing a communications session on network 8.
      <br/>
      DMA controller 87 fulfills the same function in computer 12B as DMA controller 61 does in server 12.
    </p>
    <p num="17">
      FIG. 2 is a block diagram of network adaptor 62.
      <br/>
      Data frames or packets are received on a First-In, First-Out input buffer 31.
      <br/>
      Concurrently, packets are provided as an input to control logic block 33, which tracks the size of a packet being received from framing information for the packet.
      <br/>
      A threshold 43 accessible by control logic block 33 in memory 35 is used for size categorization, i.e. if the packet meets or is bigger than the threshold the packet is deemed a jumbogram, otherwise it is a tinygram.
      <br/>
      The size category of an incoming packet is known when end of packet information is received or when the threshold is met, whichever comes first.
      <br/>
      At this point an appropriately sized section of memory 35 may be selected for the packet.
      <br/>
      Memory 35 is usually an array of Random Access Memory on the adaptor card, but may be part of System Memory 64.
    </p>
    <p num="18">
      Memory 35 includes a reserved area of data blocks 37 for receiving incoming packets.
      <br/>
      Data blocks 37 come in two sizes, one sized to take any packet smaller than the threshold and a second sized to take the largest expected size of packet.
      <br/>
      The threshold 43 is programmable and may be changed.
      <br/>
      Tinygram pointer list 41 and jumbogram pointer list 42 include pointers to all of the smaller and larger size of blocks available for receiving data, respectively.
      <br/>
      Pointer lists 41 and 42 are preferably implemented as First-In, First-Out lists.
      <br/>
      Alternatively, a chained link list of pointers may be used in a stack implementation.
      <br/>
      A FIFO is easier to debug and implement while a stack has greater versatility.
      <br/>
      Upon retrieving a pointer and completion of reception of the packet, control logic block 33 addresses memory device 35 using the pointer (and associated addresses) and enables FIFO input buffer 31 to write the packet to the locations associated with the pointer into memory device 35.
      <br/>
      The pointer is then placed into receive queue 39.
      <br/>
      The CPU for the node may then be interrupted or some other technique employed to advise an application that data has been received.
      <br/>
      After the data packet is released from memory device 35 the pointer is returned to the appropriate list, either tinygram pointer list 41 or jumbogram pointer list 42.
    </p>
    <p num="19">
      Although not required, transmission of data packets may also utilize the division of memory device 35 into jumbograms and tinygrams.
      <br/>
      In such a case a system CPU may obtain a pointer from lists 41 or 42 and supply the pointer to transmit control 43 through a transmit queue 40.
      <br/>
      After obtaining the pointer transmit control 43 asserts the pointer (and/or associated addresses) as an address to memory device 35 to write the contents of the associated locations into an output buffer 45 for transmission.
      <br/>
      The pointer is then returned to the appropriate list 41 or 42.
      <br/>
      Release of the pointer may be delayed until acknowledgement of successful reception is received from the destination node.
    </p>
    <p num="20">
      FIG. 3 is a graphical depiction of the frequency distribution by size of packets in a network, e.g. for multimedia data.
      <br/>
      The length of frame increases along the X-axis and the probability of occurrence increases along the Y-axis.
      <br/>
      Short packets, generally corresponding to requests, acknowledgements and control information are the predominant type of traffic.
      <br/>
      Longer packets correspond to multimedia data which peak in frequency at a much longer frame length.
      <br/>
      The distribution curve shows two peaks with an intervening trough in distribution.
      <br/>
      The tendency of multimedia data to exhibit such behavior makes division of a memory structure into two predetermined sizes of frames advantageous.
      <br/>
      If for some reason traffic tended to exhibit three pronounced frequency peaks, then utilizing three categories of presized contiguous sections of memory 35 might be advantageous.
    </p>
    <p num="21">
      FIG. 4 is a high level logical flow chart of a process for receiving data packets on network adaptor 62.
      <br/>
      Upon entry to the process on power up, the FIFO jumbogram list 42 and FIFO tinygram list are initialized at step 101.
      <br/>
      Initialization includes allocation of contiguous sections of memory 35 to function as tinygrams and jumbograms.
      <br/>
      The lowest address of the contiguous section may be used as a pointer.
      <br/>
      A section of memory may be reserved for identifying tinygrams and jumbograms by beginning location and type.
      <br/>
      Next, at step 103, a threshold is programmed for use in categorizing packets as either large or small.
    </p>
    <p num="22">
      At step 105, an incoming packet is received into an input buffer.
      <br/>
      Receipt of the packet is monitored and at step 107 it is determined if the packet has ended before the threshold condition is met or not.
      <br/>
      If the threshold is met or exceeded, step 109 follows step 107.
      <br/>
      At step 109, the process attempts to obtain a pointer to a jumbogram in memory device 35 from FIFO jumbogram list 42.
      <br/>
      At step 111 it is determined if a pointer was available.
      <br/>
      If none was, step 113 follows step 111 and the received frame is flushed.
      <br/>
      A failure acknowledgement may now be generated for return to the transmitting node on the network.
      <br/>
      The process is then exited.
    </p>
    <p num="23">
      If an end of frame condition was detected for a packet before reaching the threshold, the end of frame branch is taken from step 107 to step 115.
      <br/>
      At step 115 the FIFO tinygram list is accessed for a pointer.
      <br/>
      Step 117 determines is a pointer was available.
      <br/>
      If none was available, step 119 may be executed to access the FIFO jumbogram list for a pointer.
      <br/>
      Whether step 119 is used or not depends upon whether the cost of using a grossly oversized location in memory for a packet is considered worth the cost.
      <br/>
      Step 121 provides for determining if step 119 failed to return a pointer.
      <br/>
      If no pointer is available, step 123 is executed to flush the frame.
      <br/>
      Step 123 may be executed following detection of a failure at step 117.
      <br/>
      A failure acknowledgement may be sent back to the transmitting node.
    </p>
    <p num="24">
      It at any of steps 111, 117, or 121 it was determined that a pointer was available, step 125 is executed to write the packet from input buffer 31 into memory device 35.
      <br/>
      For jumbograms, the frame does not reside entirely in the input buffer.
      <br/>
      When a packet is determined to be a jumbogram, staging of the packet classes and data goes essentially straight to memory.
      <br/>
      Next, at step 117 the pointer is placed into a receive queue.
      <br/>
      At step 129 the process for which the packet is destined is notified of it availability.
    </p>
    <p num="25">
      The program fork following step 129 relates to logical division of processing between control block 33 and a system CPU and DMA controller.
      <br/>
      Control logic block 33 processing returns to step 105 following step 129.
      <br/>
      Steps 131, 133 and 135 reflect node response to notification of a process of receipt of a packet.
      <br/>
      At step 131 the CPU receives the pointer previously stored in the receive queue.
      <br/>
      Direct memory access controller 61 is then programmed to handle transfer of the packet, typically to system memory.
      <br/>
      If buffer memory is implemented in system memory this step is omitted.
      <br/>
      This operation is reflected by step 133.
      <br/>
      Once the DMA operation is complete, step 135 provides for returning the pointer to the appropriate FIFO jumbogram or tinygram list, indicating that the corresponding locations in memory are now available for reuse.
    </p>
    <p num="26">
      FIG. 5 is a high level logical flow chart of a process for preparing data packets for transmission.
      <br/>
      Step 141 provides for any required initialization of the transmission processor.
      <br/>
      Next, at step 143, the process enters an enforced wait until data becomes available for network transmission.
      <br/>
      Once a frame is available, the frame is categorized as small or large at step 145.
      <br/>
      If the frame is small, step 147 is executed to attempt to obtain a pointer to a tinygram location in memory device 37.
      <br/>
      Otherwise, step 149 is executed to attempt to obtain a pointer to a jumbo location in memory device 37.
      <br/>
      Following either step, step 151 is executed to determine if a pointer was in fact obtained.
      <br/>
      If not, step 153 is executed to interrupt the CPU to handle the error.
      <br/>
      Otherwise, step 155 is executed to perform a direct memory access operation to transfer the data from system memory to memory device 35.
      <br/>
      Next, step 157 provides for placing the pointer into the transmit queue.
      <br/>
      The process is an endless loop and is executed until the system is powered down.
    </p>
    <p num="27">
      FIG. 6 is a high level logical flow chart of a process relating to transmission of tinygrams and jumbograms.
      <br/>
      The discussion is not intended as a full discussion of the operation of a transmission controller.
      <br/>
      The process is entered as step 161 where a pointer location is read from the transmit queue.
      <br/>
      If the pointer value is zero, as determined at step 163, the controller loops back to step 161 to read another location in the queue.
      <br/>
      It a pointer was present, step 165 is executed to determine the buffer size type.
      <br/>
      This allows the process to determine the correct queue to which to return the pointer.
      <br/>
      At step 167 the pointer is returned to the appropriate pool list, 41 or 42 and deleted from the transmit queue.
      <br/>
      Step 167 may wait upon return of a receipt acknowledgement.
    </p>
    <p num="28">
      Transmit control block 43 and control block 33 are preferably implemented as logic gates for optimal speed.
      <br/>
      Compared to a software implemented FIFO input buffer, this implementation reduces memory bandwidth demands by obviating the need for an additional memory move.
    </p>
    <p num="29">
      The invention allows the large buffer memory of a network adaptor to be used in a manner other than first-in, first-out.
      <br/>
      Individual management of buffer locations allows for out of order processing of frames.
      <br/>
      This offers much simpler support of multiple queues.
      <br/>
      Compared with buffer location chaining, the software and memory bandwidth overheads required are considerably reduced.
      <br/>
      Compared with fixed buffering schemes the invention reduces internal memory fragmentation.
      <br/>
      Compared with FIFO buffering with out of sequence memory recovery external fragmentation is substantially reduced.
    </p>
    <p num="30">While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method of managing a network communications buffer, the method comprising:</claim-text>
      <claim-text>dividing a buffer into a plurality of large locations and a plurality of small locations and placing pointers to the locations into a large location first-in, first-out pointer queue or a small location first-in, first-out pointer queue; receiving a data frame; detecting an occurrence of an end of data frame condition or of a threshold size condition for the data frame indicating that the length of the data frame exceeds a predetermined threshold; responsive to occurrence of the threshold size condition, retrieving a pointer from the large location first-in, first-out pointer queue; responsive to occurrence of the end of frame condition, retrieving a pointer from the small location first-in, first-out pointer queue; moving the data frame to a location associated with the retrieved pointer; storing the retrieved pointer in a receive queue;</claim-text>
      <claim-text>and notifying a process of receipt of the data frame.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1, and further comprising; utilizing the pointer from the receiving queue in a direct memory access operation on the data frame;</claim-text>
      <claim-text>and after completion of the direct access memory operation, returning the pointer to the large location pointer queue or to the small location pointer queue.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 2, and further comprising: after the step of dividing, setting the threshold size condition.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 3, and further including the steps of: responsive to a request for transmission of data, retrieving a pointer from the large location pointer queue or the small location pointer queue;</claim-text>
      <claim-text>and after transmission of a data frame from the location indicated by the retrieved pointer, returning the retrieved pointer to the large location pointer queue or the small location pointer queue.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 4, wherein the step of retrieving a pointer from the large location pointer queue is also executed if the step of retrieving a pointer from the small location pointer queue fails.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 5, and further comprising: responsive to the step of retrieving a pointer from the large location pointer queue failing, flushing the data frame.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 6, wherein the large location pointer queue is implemented in a first-in, first-out queue and the small location pointer queue is implemented in a first-in, first-out queue.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 6, wherein the large location pointer queue is implemented in a first linked list stack and the small locator pointer queue is implemented in a second linked list stack.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A data processing system comprising: a transfer buffer within said data processing system comprising a plurality of small locations and a plurality of large locations for holding data frames moving between a communications link and internal logic of a data processing system node; a list of pointers to the large locations available in the transfer buffer for receiving the data frames; a list of pointers to the small locations available in the transfer buffer for receiving the data frames; first means within said data processing system for determining a size category of a received data frame; second means coupled to said first means and responsive to a determination of a size category for the received data frame for retrieving a pointer from either the list of pointers to the small locations or the list of pointers to the large locations;</claim-text>
      <claim-text>and third means coupled to said second means for storing the received data frame in a location of the transfer buffer corresponding to the retrieved pointer.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The data processing system of claim 9, and further comprising: a receive queue for storing the retrieved pointer.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The data processing system of claim 10, wherein the internal logic includes: a system memory; a direct memory access controller for utilizing the pointer in the receive queue for transferring the data frame from the transfer buffer to the system memory; a central processing unit for programming the direct memory access controller with the retrieved pointer from the receive queue and returning the retrieved pointer upon completion of transfer of the data frame to either the list of pointers to the small locations or to the list of pointers to the large locations.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The data processing system of claim 11, wherein the means for determining a size category of a received data frame comprises: means for establishing a threshold for categorizing a data frame as large; means for detecting an end of data frame condition prior to reaching the threshold and for categorizing a data frame as small;</claim-text>
      <claim-text>and means for otherwise categorizing the data frame as large.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The data processing system of claim 11, and further comprising: means for generating a data frame for transmission; means for categorizing the data frame for transmission as large or small; means responsive to a determination of a size category for the data frame for transmission for retrieving a pointer from either the list of pointers to small locations or the list of pointers to large locations; means for storing the data frame for transmission at a location in the transfer buffer corresponding to the pointer; a transmission queue for receiving the pointer retrieved for the data frame for transmission; a processor for utilizing the pointer retrieved for the data frame for transmission for controlling transmission over the communications link of the data frame and returning the pointer retrieved for the data frame for transmission to either the list of pointers to the small locations or to the list of pointers to the large locations.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A method of managing communication data organized into packets, the method comprising: dividing a memory device into pools including a plurality of tinygram contiguous sections and a plurality of jumbogram contiguous sections; setting a threshold for distinguishing the packets as tinygrams and jumbograms; listing tinygram contiguous sections available for storage of packets in a list of pointers to the available tinygram contiguous sections; listing jumbogram contiguous sections available for storage of packets in a list of pointers to the available jumbogram contiguous sections; measuring packets against the threshold upon receipt of the packets; responsive to an occurrence of an end of packet condition prior to reaching the threshold, storing the packet in a tinygram contiguous section by:</claim-text>
      <claim-text>- retrieving a pointer from the list of pointers to the available tinygram contiguous sections; - writing the packet into a location in the memory device corresponding to the pointer; - placing the pointer into a receive queue;</claim-text>
      <claim-text>and otherwise, storing the packet in a jumbogram contiguous section.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 14, wherein storing the packet in a jumbogram contiguous section includes: retrieving a pointer from the list of pointers to the available jumbogram contiguous sections; writing the packet into a location in the memory device corresponding to the pointer;</claim-text>
      <claim-text>and placing the pointer into a receive queue.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 14 wherein packets are part of communications traffic and exhibit at least two distinct peaks in frequency as a function of packet size.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 14, and further comprising: upon storage of a packet in the memory device, retrieving a pointer from one the lists of pointers and placing the pointer in a transmit queue.</claim-text>
    </claim>
  </claims>
</questel-patent-document>