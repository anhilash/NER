<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182153B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182153</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182153</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="8218995" extended-family-id="13707036">
      <document-id>
        <country>US</country>
        <doc-number>08602170</doc-number>
        <kind>A</kind>
        <date>19960215</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1996US-08602170</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>14002538</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="regional" sequence="1">
        <country>EP</country>
        <doc-number>95102234</doc-number>
        <kind>A</kind>
        <date>19950217</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1995EP-0102234</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  13/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   9/44        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>44</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F   9/46        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>46</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>719315000</text>
        <class>719</class>
        <subclass>315000</subclass>
      </main-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-009/46M</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>46M</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/465</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>465</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>16</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>4</number-of-drawing-sheets>
      <number-of-figures>7</number-of-figures>
      <image-key data-format="questel">US6182153</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Object-oriented programming interface for developing and running network management applications on a network communication infrastructure</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>BAPAT SUBODH</text>
          <document-id>
            <country>US</country>
            <doc-number>5291583</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5291583</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>IVANOFF MARIO J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5517622</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5517622</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>ALLEN WADE C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5519868</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5519868</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>CHANG DANIEL T, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5627979</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5627979</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>GOODWIN JEREMY P</text>
          <document-id>
            <country>US</country>
            <doc-number>5632035</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5632035</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>ANEZAKI AKIHIRO</text>
          <document-id>
            <country>US</country>
            <doc-number>4994998</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4994998</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>FUJITA TOMOO</text>
          <document-id>
            <country>US</country>
            <doc-number>5210535</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5210535</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>ANEZAKI AKIHIRO</text>
          <document-id>
            <country>US</country>
            <doc-number>5257371</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5257371</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>CHANG JAMES C M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5418793</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5418793</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>ANEZAKI AKIHIRO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5418963</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5418963</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>ALLEN WADE C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5491822</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5491822</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>LUTOFF DANIEL</text>
          <document-id>
            <country>US</country>
            <doc-number>5504906</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5504906</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>MOTOYAMA TETSURO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5506985</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5506985</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>MATHENY JOHN R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5530864</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5530864</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>CLOUSTON ROBERT D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5568605</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5568605</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>WATANABE TETSUYA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5572724</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5572724</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>SOMobjects Developer Toolkit Users Guide, Version 2.0, p. 6-1 thru 6-21, Jun. 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>DSET Corporations, ASN.C Version 3.2 Programmer's Reference Manual, 1992, p. 5-1-5-10.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>Li et al, Object oriented construction of classes for communication protocols, 1993, International Journal of Mini and Microcomputers, vol. 15, No. 2, p. 90-94.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>IEEE Journal of Selected Areas in Communication, Aug. 1994, vol. 12, #6, pp. 1011-1019 "Automatic Translation of OSI Managed Object Classes . . . ".</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Hollberg, Ulf</name>
            <address>
              <address-1>Wiesloch, DE</address-1>
              <city>Wiesloch</city>
              <country>DE</country>
            </address>
          </addressbook>
          <nationality>
            <country>DE</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Ehrlich, Ralf Stefan</name>
            <address>
              <address-1>Karlsruhe, DE</address-1>
              <city>Karlsruhe</city>
              <country>DE</country>
            </address>
          </addressbook>
          <nationality>
            <country>DE</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Scheere, Ulrich</name>
            <address>
              <address-1>Sindelfingen, DE</address-1>
              <city>Sindelfingen</city>
              <country>DE</country>
            </address>
          </addressbook>
          <nationality>
            <country>DE</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Zimmermann, Olaf</name>
            <address>
              <address-1>Sandhausen, DE</address-1>
              <city>Sandhausen</city>
              <country>DE</country>
            </address>
          </addressbook>
          <nationality>
            <country>DE</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Timar, John J.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Harrell, Robert B.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A programming interface for converting network management application programs written in an object-oriented language into network communication protocols.
      <br/>
      The application programs manipulate managed objects specified according to GDMO/ASN.1 ISO standards.
      <br/>
      Methods are provided for mapping from GDMO templates and ASN.1 defined types into C++ programming language.The interface has both an object interface composing means for generating code which provides proxy managed object classes as local representatives for managed object classes, and a run time system means for providing proxy agent object classes as representatives for remote agents.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      A portion of the disclosure of this patent document contains material which is subject to copyright protection.
      <br/>
      The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent &amp; Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      This invention is directed to a programming interface for developing and running network management application programs written in an object-oriented language having object class definitions, on a network communication infrastructure wherein the application programs manipulate managed objects that are specified according to the GDMO/ASN.1 ISO standards and are made available at remote management agents through the communication infrastructure.
      <br/>
      Beyond this it relates to methods for mapping from Guidelines for Definition of Managed Objects (GDMO) templates and Abstract Syntax Notation One (ASN.1) defined types into the C++ language and a platform for the implementation of the interface.
    </p>
    <p num="3">OSI network management applications and CCITT Telecommunication Management Network (TMN) applications are based on the ability to manipulate managed objects which are specified in GDMO/ASN.1 and which are made available at remote management agents through a communication infrastructure.</p>
    <p num="4">
      Currently, XMP/XOM from the X/Open �X/Open XMP� is the only standardized API to the communication infrastructure for management applications.
      <br/>
      XMP/XOM is cumbersome to use.
      <br/>
      XMP/XOM based applications are lengthy and difficult to write, understand and debug.
      <br/>
      Furthermore XMP/XOM does not allow for static (compile time) type checking, so that many type errors show up at run-time.
      <br/>
      Therefore most programmers certify that using XMP/XOM is cumbersome and time consuming.
      <br/>
      Implementers of network management applications are thus confronted with the user unfriendliness of the XMP/XOM interface.
    </p>
    <p num="5">In order to promote code quality and reusability more and more applications are written in the object-oriented programming language C++. Even though management information is defined in the object-oriented specification language GDMO, XMP/XOM uses the C language.</p>
    <p num="6">
      Further, managed objects are formally specified in GDMO and ASN.1. Development tools that support GDMO and ASN.1 can thus drastically reduce the development time of network management applications.
      <br/>
      Therefore a demand for a C++ embedding to hide the intricacies of XMP/XOM and GDMO based tools to support the development of OSI management applications is ascertainable.
    </p>
    <p num="7">
      The development of applications within the OSI management framework �ISO 10040� is a rather complex undertaking.
      <br/>
      The estimated costs for the development of new applications support this perception.
      <br/>
      In order to boost the development process, additional support by higher-level interface and corresponding tools is required.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="8">It is therefore an objective of the invention to develop an object-oriented interface (OOI) which provides an object-oriented abstraction of OSI management information and services for use in regular, non-distributed applications.</p>
    <p num="9">A further objective of the invention is to provide an OOI for access to managed objects which is simple to use.</p>
    <p num="10">Further objectives of the invention are to relieve the application programmers from most technical details related to communication and XMP/XOM, to provide an object-oriented, strong typed language embedding of management information and management services into C++, to generate automatically methods to manipulate specified managed objects, and to be open to future management paradigms or communication infrastructures, such as OSF-DME.</p>
    <p num="11">The requirements for the OOI design thus can be summarized as follows:</p>
    <p num="12">
      1. relieve the application programmers from most technical details related to communication and XMP/XOM;
      <br/>
      2. provide an object-oriented, strong typed language embedding of management information and management services into C++;
      <br/>
      3. automatically generate methods to manipulate specified managed objects; and
      <br/>
      4. be open to future management paradigms or communication infrastructures, such as OSF-DME.
    </p>
    <p num="13">
      These problems are solved by the features of the invention laid down in the independent claims.
      <br/>
      The programming interface (OOI) according to the invention provides access to managed objects via telecommunication networks.
      <br/>
      The Object Interface Composer (OIC) automatically generates C++ class definition and implementation files based on managed object specifications written in GDMO and ASN.1 and thus increases the efficiency of program developers.
      <br/>
      Using the OOI, a network management application can access managed objects stored at remote agents through methods of those generated classes.
    </p>
    <p num="14">
      The intricacies of XMP/XOM are hidden from the application programmer by C++ classes.
      <br/>
      As a result application programmers can concentrate on writing their application instead of having to deal with communication protocols or low level interfaces to the communication stack.
      <br/>
      The OOI hides the intricacies of the communication infrastructure and particularly that of XMP/XOM behind a programmer-friendly object-oriented C++ operator interface.
    </p>
    <p num="15">
      As opposed to XMP/XOM based code, OOI based code is concise and readable.
      <br/>
      The OIC may also comprise means for minimizing the number of generated classes and the number of objects to be handled by an application at run time, i.e., the OIC generates C++ classes for the relevant GDMO templates only.
      <br/>
      The OOI therefore drastically simplifies the development of management applications by hiding the XMP API below C++ objects.
    </p>
    <p num="16">
      Furthermore the full embedding of managed objects into C++ allows for strong type checking at compile time, whereas cumbersome debugging is usually necessary for XMP/XOM based applications.
      <br/>
      Without the OOI, programmers either use the cryptic and C-oriented XMP/XOM API or develop some kind of OOI on their own.
      <br/>
      Such ad hoc solutions take time to develop and usually lack the support of a source code generator similar to the OIC so that the managed object specification must be manually translated.
      <br/>
      Those solutions are of course time consuming and error prone.
      <br/>
      With the OOI, the additional development effort and the weaknesses of ad hoc solutions can be avoided.
      <br/>
      The OOI Run Time System provides C++ classes which allow convenient access to the Common Management Information Service (CMIS).
    </p>
    <p num="17">Both, the object-oriented interface (OOI) for use in OSI management applications and the related Object Interface Composer (OIC), minimize the effort needed to build the communication related functions of management applications.</p>
    <p num="18">
      An application written on top of the OOI is independent of the management service provider.
      <br/>
      The current version of the OOI is based on the XMP/XOM �XMP� service, but future versions of the OOI could use a different communication vehicle such as OSF-DME.
      <br/>
      The application could be ported to a new service provider with minimal effort.
      <br/>
      The OOI API does not depend upon XMP/XOM so that applications do not need to be rewritten when the OOI is ported to another communication infrastructure.
    </p>
    <p num="19">
      Preferred embodiments of the interface according to the invention are characterized in the claims.
      <br/>
      The OOI provides static type checking and is easy to use.
      <br/>
      The OSI definition of management information is object-oriented, thus the OOI takes advantage of object-oriented design techniques and provides a genuine object-oriented interface written in C++.
    </p>
    <p num="20">
      Managed objects (MO) are formally described in the GDMO/ASN.1 language.
      <br/>
      This allows for the automatic generation of MO specific source code.
      <br/>
      The Object Interface Composer (OIC) takes MO specifications that conform with GDMO/ASN.1 and generates C++ classes that provide methods to manipulate these objects.
      <br/>
      The OOI further provides methods to manipulate standardized MOs.
    </p>
    <p num="21">
      Strong typing is commonly defined as the compile time checking of type compatibility in programs; it is frequently used as co-notation of `static typing`. This means that a correctly compilable program in strong typed language, such as C++, will be guaranteed to be type safe.
      <br/>
      Type safeness means that variables have a defined type which completely specifies the value range and the permissible operations on the values of the type.
      <br/>
      Also, constants must be defined as specific values of certain types.
      <br/>
      This argument also applies to the type checking of parameters of procedures.
    </p>
    <p num="22">The net effect of strong typing is that the compiler will detect and prohibit the invocation of undefined methods on variables and illegal assignments of values of type X to variables of type Y. In this context, illegal means that no appropriate typecast has been defined explicitly.</p>
    <p num="23">
      With respect to object-oriented languages, strong typing is of even greater importance because in these languages it is common to define many application oriented types.
      <br/>
      In writing distributed applications, debugging is far more complicated than for local programs.
      <br/>
      Without strong typing, errors may be caused by unintended misuse of defined variables.
      <br/>
      Obviously, the avoidance of these errors saves debugging time.
    </p>
    <p num="24">
      Further, type safeness is essential for applications which will be installed in a wide range of network conditions.
      <br/>
      Using strong typing, the compiler is enabled to perform the compatibility checks for assignment, procedure parameters etc.
      <br/>
      If the compiler does not guarantee type-safe programs, the type safeness must be enforced at run-time by checking the type compatibility at the right locations in the program, which is by itself an error prone task.
      <br/>
      The execution time for these run-time checks may reach a non-trivial percentage and thus degrade the performance of the application.
    </p>
    <p num="25">
      The OOI supports strong, static typing for management applications which work with a known inventory of management information.
      <br/>
      In addition, the generic part of the OOI supports generic management applications.
      <br/>
      Finally, to allow the coexistence of generic and strong typed components within the same application, the OOI makes provision for using the same objects through the type-safe and the generic interface.
      <br/>
      This means that by using the OOI, objects will be allocated and used in a strong-typed manner as long as their types are known at compile time.
      <br/>
      In addition, objects of types which are unknown at compile time, may be allocated and used via the `weak`-typed interfaces.
    </p>
    <p num="26">
      The invention is also related to methods for mapping GDMO templates and ASN.1 types into C++ classes.
      <br/>
      These objects of the invention and the programming interface itself will become clear with regard to preferred embodiments of the invention which are illustrated by the appended drawings.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="27">
      FIG. 1 shows the OOI components and their run-time environment.
      <br/>
      FIG. 2 gives a tabular overview of GDMO templates and their intended use.
      <br/>
      FIG. 3 shows a flow chart of the GDMO/ASN.1 compilation process.
      <br/>
      FIG. 4 is an example of a inheritance structure for DMI managed object classes.
      <br/>
      FIG. 5 shows the data types available in ASN.1.
      <br/>
      FIG. 6 shows the implementation class hierarchy for meta information.
      <br/>
      FIG. 7 shows the inheritance hierarchy for error classes.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="28">The OOI design is based on the following object-oriented abstractions of the major constituents of OSI management:</p>
    <p num="29">
      1.
      <br/>
      Management information is represented by managed objects, notifications, and ASN.1 types.
      <br/>
      2. Management services are provided by proxy agents.
    </p>
    <p num="30">
      These abstractions allow the OOI to provide an easy to use programming interface.
      <br/>
      Furthermore, they separate the OOI implementation from the application, thus allowing for several different OOI implementations which are based on different communication infrastructures, to be exchanged transparently to the application.
    </p>
    <p num="31">
      FIG. 1 shows the run-time environment of the OOI according to the invention.
      <br/>
      The OOI components are drawn with solid lines.
      <br/>
      An application 10 can interact with the OOI through proxy managed objects (PMO) 20 (arrow 1), directly through the proxy agent objects 30 (arrow 2), or through the notification event queue 35 (arrow 3).
      <br/>
      The OOI uses the XMP API 40 to access the communication infrastructure (CI) 50 which allows it to communicate with an agent 70 that implements the managed objects (MOs) 80.
    </p>
    <p num="32">
      The proxy agent 30 provides the Common Management Information Service (CMIS) interface as standardized by the ISO �ISO 9595 (CMIS)�. Proxy agents 30 are C++ classes which hide the C-oriented XMP API 40.
      <br/>
      Proxy managed objects (PMO) 20 are local representatives of remote managed objects 80.
      <br/>
      PMOs 20 are instances of C++ classes that are automatically generated by the Object Interface Composer (OIC).
      <br/>
      PMOs 20 provide methods for strong typed access to the ASN.1 values of the attributes of managed objects and to the parameters of actions.
    </p>
    <p num="33">
      Incoming notifications are stored in an event queue 35.
      <br/>
      Notifications are instances of C++ classes that are automatically generated by the Object Interface Composer (OIC).
      <br/>
      Notification classes provide methods for the strong typed access to the ASN.1 values of the information and reply syntax of notifications.
    </p>
    <p num="34">
      The ASN.1 values of GDMO attributes, of GDMO action information parameters and of notification information and reply syntax are represented by instances of ASN.1 type C++ classes which are also automatically generated from the ASN.1 definitions parsed by the OIC.
      <br/>
      The ASN.1 type C++ classes provide a set of methods to manipulate the values of the ASN.1 type.
    </p>
    <p num="35">
      The OOI Run Time System (RTS) and the Object Interface Composer (OIC) thus offer maximum development support for those applications.
      <br/>
      The OOI Run Time System (OOI RTS) provides easy to use C++ classes to access management information and management services (XMP/XOM).
      <br/>
      The OIC and the RTS are closely related; in fact the code generated by the OIC must be linked to the OOI RTS to become executable.
    </p>
    <p num="36">
      The use of strong-typed local representations of remote managed objects and the generation of proxy managed object (PMO) classes with the Object Interface Composer causes a paradigm shift from weakly-typed message-oriented communications programming to strongly-typed local object-oriented programming.
      <br/>
      This will increase the productivity of regular programmers and enable more programmers to develop management applications.
    </p>
    <p num="37">
      The OOI provides the following features:
      <br/>
      1.
      <br/>
      Supports management applications written in C++
      <br/>
      2.
      <br/>
      Uses GDMO and ASN.1 definitions as abstract object definitions
      <br/>
      3.
      <br/>
      Uses automatically generated C++ classes from GDMO/ASN.1 definitions (done by the OIC)
      <br/>
      4.
      <br/>
      Relieves the application developer from intricacies of communication interfaces
      <br/>
      5.
      <br/>
      Separates the application from communication interfaces and technologies
      <br/>
      6.
      <br/>
      Provides strong and weak type interface support
      <br/>
      7.
      <br/>
      Provides run-time type information (meta information)
      <br/>
      8.
      <br/>
      Offers a generic communication class (proxy agent) with CMIS functionality
      <br/>
      9.
      <br/>
      Leaves open the migration path towards future communication architectures such as Common Object Request Broker Architecture (CORBA) from Object Management Group (OMG).
    </p>
    <p num="38">These features are detailed in the following sections.</p>
    <p num="39">Mapping of GDMO templates into C++ Classes</p>
    <p num="40">
      GDMO defines several templates for the definitions of management information.
      <br/>
      Documents such as Desktop Management Interface (DMI) or M3100 define managed objects with those templates.
      <br/>
      The Object Interface Composer (OIC) parses GDMO managed object definition documents (such as DMI) and generates C++ classes that represent the managed objects.
      <br/>
      This section briefly describes the templates defined in �ISO 10165-4(GDMO)� and explains how managed objects defined with those templates are mapped into C++ classes by the OIC.
    </p>
    <p num="41">
      FIG. 2 gives an overview of the GDMO templates and their intended use.
      <br/>
      The OIC provides great flexibility for the generation of C++ classes for objects defined using the GDMO templates.
      <br/>
      It was decided not to generate one class for every usage of any template in the parsed document because of the huge number of classes that would have been generated using this approach.
      <br/>
      Instead, the OIC was configured to minimize the number of generated classes and the number of objects to be handled by the application at run time.
    </p>
    <p num="42">
      The OIC generates C++ classes for the relevant GDMO templates only.
      <br/>
      Managed objects are the most relevant objects for management applications.
      <br/>
      A C++ class is generated for every GDMO managed object class.
      <br/>
      The C++ classes reflect the inheritance hierarchy defined in the GDMO document.
    </p>
    <p num="43">
      The major interest of application writers is to get or set the values of the attributes of managed object instances, and to perform actions on them.
      <br/>
      Generating classes for GDMO packages and GDMO attributes would force the application to traverse two additional objects to get access to the value of an attribute.
    </p>
    <p num="44">
      However, no classes are generated for GDMO package and GDMO attribute templates.
      <br/>
      Instead, each managed object class provides methods to manipulate its attributes.
      <br/>
      Attributes have values which can be complex structures defined in ASN.1. A C++ class is generated for each attribute type defined in the GDMO/ASN.1 document parsed by the OIC.
      <br/>
      These classes provide methods to manipulate the attribute values.
    </p>
    <p num="45">
      Access methods to attributes are generated as methods of the managed objects classes of the managed objects that contain the attribute.
      <br/>
      A C++ class is generated for each ASN.1 type.
      <br/>
      These classes provide methods to manipulate the values of the attributes.
    </p>
    <p num="46">
      Also no classes are generated for GDMO action templates.
      <br/>
      Instead access methods for actions are generated as methods of managed objects without further indirection.
    </p>
    <p num="47">
      GDMO notifications may arrive more or less unexpectedly at the management application and contain structured information of some types defined in ASN.1. A reply information structure may have to be transferred as a possible confirmation to the notification.
      <br/>
      Therefore, a C++ class is generated for every GDMO notification template.
      <br/>
      This class provides appropriate access methods to the structured information.
      <br/>
      Confirmable notifications have a reply( ) method.
      <br/>
      The optional attribute identifiers are used to generate additional access methods.
      <br/>
      The errorReply( ) method allows the return of appropriate error information to the issuer of the notifications.
    </p>
    <p num="48">
      GDMO parameters are not represented by classes.
      <br/>
      GDMO parameters are rarely used and parameter information can alternatively be transferred through ASN.1 syntax.
    </p>
    <p num="49">
      GDMO name bindings are not represented by classes.
      <br/>
      Name binding information is regarded to be of low relevance for management applications.
    </p>
    <p num="50">
      The Abstract Syntax Notation One (ASN.1) is used by GDMO to define all values which are transmitted between management applications and agents.
      <br/>
      As mentioned above, C++ classes are generated for all ASN.1 types.
    </p>
    <p num="51">
      The following restrictions are introduced to the design to improve the usability and the performance of the OOI: the value clauses limit the value range of GDMO attributes of managed objects.
      <br/>
      These clauses are of importance to agent implementers but not to application implementers.
      <br/>
      The OOI could be designed to perform run-time checking on the attribute values ("within range?"), but since this checking has to be done in the agent it is estimated that the performance cost is not justified.
      <br/>
      The value clause is therefore ignored by the OIC.
    </p>
    <p num="52">
      GDMO packages are regarded as an aid for the definition of managed object classes.
      <br/>
      According to the GDMO standard, they are of no interest to management applications at run-time, because the attributes, actions and notifications which are defined within packages must be treated as properties of the managed object classes themselves �ISO standard 10165-4 (GDMO)�.
    </p>
    <p num="53">
      GDMO attribute templates point (at least indirectly through another attribute) to the type of their value defined in ASN.1, assign an object identifier to this type and list the operations to be made available for the applications.
      <br/>
      The type information is kept in the GDMO attribute meta objects.
      <br/>
      The value is made accessible directly by the managed object, thus avoiding a superfluous hop and a separate run-time object.
    </p>
    <p num="54">Strong and Weak Typed Usage</p>
    <p num="55">In order to support generic applications that can handle any object as well as specific applications that are tailored to handle a well known subset of the objects, all objects can be accessed in strong-typed and in weak-typed fashion.</p>
    <p num="56">The weak-typed interface can be used to manipulate objects whose type is not yet known at compile time, e.g. analyzing the result of a scoped get, done when a scoped management request returns the management information for several managed object instances as a list of generic managed object instances.</p>
    <p num="57">The strong-typed interface should be used whenever possible to allow the compiler to detect type errors that would otherwise result in CMIP errors (or core dumps in an application that directly uses XMP/XOM API) and to avoid time consuming run-time type checking that affects performance.</p>
    <p num="58">Both types of interfaces can be used interchangeably and concurrently within the same application.</p>
    <p num="59">Proxy Agents</p>
    <p num="60">
      The proxy agent class is one of the fundamental abstractions of the OOI.
      <br/>
      The proxy agent provides the Common Management Interface Service (CMIS).
      <br/>
      A proxy agent object acts as a proxy for a real, remote agent.
      <br/>
      Proxy agent objects are local to the management applications.
      <br/>
      Agents are not aware of the existence of proxy agent objects.
      <br/>
      Proxy agent objects hide the XMP-session and the XMP-context C-structure and the related XMP operations behind convenient methods of the proxy agent class.
    </p>
    <p num="61">Proxy Managed Objects</p>
    <p num="62">
      Proxy Managed Objects (PMO) are stateless representations of managed objects that are instantiated in agents.
      <br/>
      Each PMO C++ class provides a set of object class specific methods through which a management application can conveniently submit CMIS requests to query or manipulate the real managed object in the agent.
      <br/>
      A management application typically instantiates an instance of a PMO class for each real managed object that it wishes to interact with.
    </p>
    <p num="63">Meta-Information</p>
    <p num="64">Meta-information provides the type information derived from GDMO/ASN.1 specifications which is made available at run time.</p>
    <p num="65">
      For the OOI, the presence of meta-information is essential to support the mixed usage of strong- and weak-typed interfaces.
      <br/>
      The meta-information will most likely be used for the conversion between the binary and string representation of objects.
      <br/>
      In addition, the meta-information of ASN.1 objects is used for encoding and decoding of their values.
    </p>
    <p num="66">
      For the OOI, every GDMO/ASN.1 object has a pointer to its meta-information object.
      <br/>
      All instances of one class share the same instance of meta-information object.
    </p>
    <p num="67">The OOI Environment</p>
    <p num="68">
      The OOI Environment object has a single instance in the applications, in order to cluster those objects which belong to the OOI, e.g. proxy agents or meta-information objects.
      <br/>
      The OOI Environment becomes visible to the programmer at initialization time and when the application should wait for the first event which happens on any of the existing proxy agent objects, i.e., on any of the active XMP sessions.
    </p>
    <p num="69">GDMO/ASN.1 Object Interface Composer</p>
    <p num="70">
      The Object Interface Composer (OIC) is a tool for the generation of source code based on the specifications of management information in GDMO and in ASN.1. It takes its input from managed object class definitions written in accordance with the ISO standard "Guidelines for the Definition of Managed Objects" (GDMO) �ISO 10165-4 (GDMO)� and generates C++ classes (header and implementation files) for the managed objects, ASN.1 types and notifications defined in the selected document.
      <br/>
      The Object Interface Composer (OIC) therefore serves as a GDMO/ASN.1 compiler generating C++ classes for XMP/XOM from GDMO/ASN.1 definitions.
      <br/>
      The Appendix illustrates C++ classes generated for GDMO managed objects and ASN.1 notifications.
    </p>
    <p num="71">
      The OIC is based on the IBM TMN WorkBench/6000 �WorkBench� product.
      <br/>
      GDMO and ASN.1 documents are parsed and stored in a relational database or in a shared library by the Managed Object Compiler (MOC) of the WorkBench.
      <br/>
      The Workbench then provides the GDMO and ASN.1 information through an API.
    </p>
    <p num="72">
      The OIC generates:
      <br/>
      a C++ class for every GDMO managed object class;
      <br/>
      a C++ class for each ASN.1 type;
      <br/>
      a C++ class for every GDMO notification;
      <br/>
      meta information data structures for GDMO and ASN.1;
      <br/>
      a set of utility files.
    </p>
    <p num="73">The GDMO/ASN.1 compilation process is shown in greater detail in FIG. 3 and is described in the following.</p>
    <p num="74">Proxy Agent Objects</p>
    <p num="75">
      Proxy agent objects are local to the management applications.
      <br/>
      Agents are not aware of the existence of proxy agent objects.
      <br/>
      Proxy agent objects hide the XMP session and context C-structure and the related XMP operations behind convenient methods of the proxy agent class.
      <br/>
      The implementation of the proxy agent class is provided in Listing 1 in the Appendix.
    </p>
    <p num="76">
      The proxy agent implementation provides synchronous and asynchronous methods.
      <br/>
      Synchronous methods do not return control to the application until a request is fully processed.
      <br/>
      Using synchronous OOI methods, a single process application blocks for an undetermined time while a CMIP request is being processed.
      <br/>
      This behavior may be appropriate for very simple applications, but not for an application that is user-interactive.
    </p>
    <p num="77">Asynchronous methods return control to the application as soon as a CMIP request is sent.</p>
    <p num="78">
      Proxy agent objects provide a service interface to the create, get, set, action, cancelGet and delete operations of CMIS.
      <br/>
      This service is used internally by the OOI implementation of proxy managed objects and by generic management applications which want direct access to a CMIS interface without using the proxy managed object abstraction.
      <br/>
      This interface is not directly used by applications which access managed object information through the proxy managed object (PMO) abstraction.
    </p>
    <p num="79">
      Incoming notifications are queued in the event queue 35 of the responsible proxy agent 30.
      <br/>
      The application can thus process notification at its leisure.
      <br/>
      The OOI optionally can trigger an application callback upon receipt of a notification.
    </p>
    <p num="80">
      Two distinct implementations of proxy agents for direct addressing (DA) and for non-direct addressing (NDAPA) are provided.
      <br/>
      A direct addressing proxy agent (DAPA) can connect to one specific agent at a time.
      <br/>
      DAPAs can be used by management applications which communicate with one specific agent.
      <br/>
      DAPAs are implemented in the "ProxyAgentDA" C++ class.
      <br/>
      Non-direct addressing proxy agents (NDAPA), are not connected to specific agents.
      <br/>
      For each management request, the agent must be addressed in one of two ways: explicitly by supplying an addressing parameter as part of the request and implicitly through the object registration service (ORS).
      <br/>
      In this case, XMP determines the agent's address with the help of the ORS directory service based on the object class and the object instance information of the request.
      <br/>
      NDAPAs are implemented by the "ProxyAgentNDA" C++ class.
    </p>
    <p num="81">Direct Addressing Proxy Agents (DAPA)</p>
    <p num="82">
      A DAPA object represents a real, remote agent.
      <br/>
      The connect( ) method with appropriate parameters will establish a connection (XMP session) to this agent.
      <br/>
      The disconnect methods will release that session binding.
    </p>
    <p num="83">
      The creation of a direct-addressing proxy agent object in a management application for use with a specific agent neither implies, that this agent exists, nor that it can be connected.
      <br/>
      No verification is done when the DAPA object is created.
      <br/>
      The initial state is disconnected.
    </p>
    <p num="84">
      The management application must explicitly try to connect the DAPA object to a real agent.
      <br/>
      This attempt may fail.
      <br/>
      If the connect succeeds, the DAPA object is in state "connected" and is able to transmit management requests to that agent.
      <br/>
      Internally, the connection between the DAPA and the agent is based on an XMP session.
    </p>
    <p num="85">
      The management application can explicitly disconnect a DAPA from the agent.
      <br/>
      A connection can also be aborted by the agent or by the management information service provider.
      <br/>
      The DAPA object is then in the "disconnected" state and can be reconnected to the same agent or to any other agent.
    </p>
    <p num="86">Non-Direct-Addressing Proxy Agents (NDAPA)</p>
    <p num="87">
      A management application can instantiate only one indirect addressing proxy agent object.
      <br/>
      The successful creation of an NDAPA does not imply, that there is an agent available for communication.
      <br/>
      No verification is done when the NDAPA is created.
      <br/>
      The management application must explicitly try to connect to the postmaster daemon process.
      <br/>
      Using the connect( ) method, a non-direct addressing XMP session is established.
      <br/>
      This session remains active until the management application or the postmaster closes it.
      <br/>
      As long as the NDAPA object is in the connected state, it can be used to communicate with any agent.
      <br/>
      The postmaster daemon process directs network management information between multiple applications and agents running concurrently.
      <br/>
      The postmaster determines the route by using specified addresses or a routing table that is configured in the object registration service.
    </p>
    <p num="88">Mixing DAPA and NDAPA</p>
    <p num="89">
      Several DAPA objects and one NDAPA object may exist in the same management application at the same time.
      <br/>
      Each of the connected proxy agents has a connection (XMP session) with the agent.
      <br/>
      The OOI design intends that a management application should only connect one proxy agent object to a specific real agent.
      <br/>
      If the application tries to use two DAPA objects to communicate with the same agent, or uses a DAPA and the NDAPA to communicate with the same agent, the noticeable effects are strictly dependent on the behavior of XMP and the postmaster.
      <br/>
      In such cases it is possible that event forwarding discriminators created over one proxy agent object cause notifications to appear on a different XMP session and consequently, in the event queue of a different proxy agent object.
    </p>
    <p num="90">Operations Provided by Proxy Agents</p>
    <p num="91">
      Management operation can be performed on one or more attributes of one or more objects.
      <br/>
      The proxy agents provide the full set of CMIS services with all parameters as defined in the standard �ISO 9595 (CMIS)�. The resulting structure of the argument and result parameters of the CMIS operations of the proxy agent interface are complex.
      <br/>
      Therefore, a set of additional methods "simple-create", "simple-get", "simple-set", "simple-action" and "simple-delete" is provided with fewer and simplified parameters to perform operations on only one attribute of one managed object or on several attributes of a single managed object.
    </p>
    <p num="92">
      The following methods to inquire as to the state and properties of a proxy agent are provided:
      <br/>
      The connect( ) method establishes an XMP binding between the proxy agent and an agent or the postmaster.
    </p>
    <p num="93">The disconnect( ) method terminates the XMP binding between the proxy agent and an agent or the postmaster.</p>
    <p num="94">The isConnected( ) method checks whether the proxy agent is in the connected state or not.</p>
    <p num="95">
      The id( ) method returns the local id for the proxy agent.
      <br/>
      The id can be used to distinguish this instance from other instances of proxy agents within the same application.
    </p>
    <p num="96">
      The fileDescriptor( ) method returns the file descriptor (e.g. in AIX) which is associated with the XMP session.
      <br/>
      The AIX file descriptor is needed for advanced applications which want to write their own AIX `select` call, e.g. to synchronize between OOI and Xwindows.
    </p>
    <p num="97">The reset( ) method terminates all activities associated with the proxy agent and re-establishes its initial state, including a disconnect( ).</p>
    <p num="98">
      The following methods to access and modify the underlying XMP data structures are provided:
      <br/>
      XMPSession( ) returns a reference to the XMP session which is associated with the proxy agent instance.
      <br/>
      contextControls( ) returns a reference to the XMP context object.
      <br/>
      sessionControls( ) returns a reference to the XMP session object.
      <br/>
      setPresentationModule( ) replaces the defined presentation module.
    </p>
    <p num="99">
      The following methods to inquire as to the state and properties of a proxy agent are provided:
      <br/>
      dump( ) prints out the complete internal status of the proxy agent instance.
      <br/>
      dumpRequestQueue( ) prints out the elements of the queue that stores requests to be sent to the agent.
      <br/>
      dumpCompletedQueue( ) prints out the elements of the queue of requests to which the agent has replied.
    </p>
    <p num="100">
      The following methods offer the full CMIS functionality:
      <br/>
      MCreate( ) creates a managed object instance at an agent's site
      <br/>
      MDelete( ) deletes one or more managed object instances at an agent's site
      <br/>
      MGet( ) gets attribute values of one or several managed objects from an agent
      <br/>
      MSet( ) replaces the values of attributes of one or several managed objects at an agent
      <br/>
      MAction( ) invokes an action of one or several managed objects at an agent.
    </p>
    <p num="101">
      The following methods are provided for easy to use synchronous CMIS functionality:
      <br/>
      simpleMCreate( ) creates a managed object instance at an agent's site
      <br/>
      simpleMDelete( ) deletes a managed object instance at an agent's site
      <br/>
      simpleMGet( ) gets one attribute of a managed object from an agent
      <br/>
      simpleMGetSome( ) gets some attributes of a managed object from an agent
      <br/>
      simpleMSet( ) replaces one attribute of a managed object at an agent
      <br/>
      simpleMSetSome( ) replaces some attributes of a managed object at an agent
      <br/>
      simpleMAction( ) invokes the action of a managed object at an agent.
    </p>
    <p num="102">
      The following methods to wait for the completion of a request or a notification are provided:
      <br/>
      wait( ) waits for a specified amount of time;
      <br/>
      poll( ) checks with XMP whether something has arrived.
    </p>
    <p num="103">
      The following methods to inspect the local state of the proxy agent are provided:
      <br/>
      HasNotificationQueue( ) checks whether this instance has a notification queue, i.e. is prepared to receive notifications
      <br/>
      notificationQueue( ) returns a reference to the notification queue of the proxy agent
      <br/>
      requestQueue( ) returns a reference to the request queue of the proxy agent
      <br/>
      completedQueue( ) returns a reference to the completed queue of the proxy agent.
    </p>
    <p num="104">The implementation of the queues used by proxy agent objects is provided in Listing 2 in the Appendix.</p>
    <p num="105">The Event Queue</p>
    <p num="106">
      The proxy agent objects 30 contain an externally visible event queue object 35 where the received notifications are stored as typed objects (see arrow 3 in FIG. 1).
      <br/>
      Notifications are received at any time when the proxy agent 30 is receiving messages from its XMP session.
      <br/>
      The management application may process the notifications in the queue 35 at any time.
    </p>
    <p num="107">
      The event queue 35 is optional.
      <br/>
      A different constructor can be used for proxy agents whose role does not include monitoring so that they will never receive any notifications.
      <br/>
      The notifications are represented by typed notification objects.
      <br/>
      They are inserted into the event queue of their proxy agent instance as soon as they arrive at the XMP session.
      <br/>
      Notification objects remain in the event queue, until they are explicitly deleted by the delete( ) method.
      <br/>
      For confirmable notifications, the application should invoke the errorReply( ) or the reply( ) method before the delete( ) method, otherwise the agent waiting for the confirmation might get confused.
    </p>
    <p num="108">
      For direct-addressing proxy agents, the source of the notification is the specific agent, whereas for indirect addressing proxy agents, the source can be any agent (excluding those for which an direct-addressing proxy agent with role monitoring exists in the same application).
      <br/>
      The requester address of the sending agent and the requestor title of the sending agent are not available from XMP.
    </p>
    <p num="109">
      For asynchronous requests, a request object is allocated by the application and passed to the OOI.
      <br/>
      This object contains a list, which will be used to collect all replies to this particular request, regardless of whether the replies are successful results or error results.
      <br/>
      The application explicitly passes control to the OOI run-time system (RTS) by invoking a method to check upon or to wait for the reception of incoming messages.
    </p>
    <p num="110">Wait Methods</p>
    <p num="111">
      Since several proxy agent objects may exist at the same time in the same application, several wait methods are available:
      <br/>
      The global wait method returns if anything was received on any proxy agent object, (i.e. on any XMP session).
    </p>
    <p num="112">The wait method of the proxy agent returns if anything was received on that session.</p>
    <p num="113">The wait method of the request object returns if anything was received on that request object.</p>
    <p num="114">
      It is necessary to distinguish between a single-event-mode wherein only a single incoming response or notification indication is received, added to the related queue and returned to the application, and a wait-for-completion-mode wherein partial replies to outstanding requests do not cause the end of the wait method.
      <br/>
      A completed request or a notification will end the wait of the application.
    </p>
    <p num="115">Request Objects</p>
    <p num="116">
      Request objects represent asynchronous requests which the application intends to send or has sent to a remote agent.
      <br/>
      These objects contain all the information needed to keep track of the request, to synchronize with the reply and to access the results or error information.
      <br/>
      The implementation of the request class for the OOI is provided in Listing 3 in the Appendix.
    </p>
    <p num="117">
      Request objects must be explicitly created and deleted by the application.
      <br/>
      Request objects can be reused several times.
    </p>
    <p num="118">
      The following methods to inquire as to the status of a request object are provided:
      <br/>
      confirmationMode( ) returns a reference to the actual confirmation mode of the request,
      <br/>
      toBeConfirmed( ) checks whether the confirmation mode is set to "confirm"
      <br/>
      waitMode( ) distinguishes between the single event of completion mode for wait methods
      <br/>
      invokeId( ) returns the invocation identifier
      <br/>
      state( ) returns the processing state, e.g. `outstanding`
      <br/>
      stateAsString( )returns the processing state as a string
      <br/>
      isIdle( ) queries whether the state, is "idle"
      <br/>
      isOutstanding( ) queries whether the state is "outstanding"
      <br/>
      isCompleted( ) queries whether the state is "completed"
      <br/>
      completionState( ) returns the completion state,
      <br/>
      completionStateAsString( ) returns the completion state as a string
      <br/>
      isNormallyCompleted( ) queries the completion state,
      <br/>
      isCouldNotBeIssued( ) queries whether the completion is due to a local error
      <br/>
      isAbandonedByUser( ) determines if the user has aborted the request
      <br/>
      isAbortedByProvider( ) determines if the service provider, e.g. XMP, aborted the request
      <br/>
      errorOccurred( ) checks if an error occurred
      <br/>
      numberOfResultElementsReceived( ) returns the number of results in the result queue
      <br/>
      numberOfServiceErrorsReceived( ) returns the number of service errors encountered during processing
      <br/>
      numberOfNonServiceErrorsOccurred( ) returns the number of non-service errors
    </p>
    <p num="119">
      The following methods to update data members of a request object, if the request is not in state "outstanding", are provided
      <br/>
      setWaitMode( ) sets the value of the wait mode of the request object
      <br/>
      reset( ) aborts any outstanding activity and re-establishes the initial state of the object
      <br/>
      abandon( ) aborts the outstanding activity by calling the XMP abandon method including cancelGet( ) in case of a get request
      <br/>
      wait( ) waits for a partial result or for the completion of the request depending on its wait mode
      <br/>
      hasAttribute( ) checks whether the request did return an attribute with the passed OID
      <br/>
      receiveAttribute( ) receives an attribute with the passed OID
      <br/>
      receiveNextAttribute( ) is an iterator method
      <br/>
      receiveActionReply( ) receives the reply of an action (if the request was to execute an action)
      <br/>
      dump( ) formats the actual state of the request object into an "ostream" object.
    </p>
    <p num="120">
      Request objects must be explicitly deleted by the application, even if the related proxy agent is deleted.
      <br/>
      All response queue elements included in the request object are automatically deleted with the request object.
      <br/>
      Additional incoming responses are also deleted.
    </p>
    <p num="121">
      An application may delete a response queue after all results have been received by means of the class destructor.
      <br/>
      An abandon/cancel operation on the outstanding operation does not delete the response queue (the queue has to be deleted explicitly).
    </p>
    <p num="122">Responses cannot be received after the proxy agent object was deleted or disconnected from the communication system either by the application or by failure.</p>
    <p num="123">Callbacks for the Reception of Incoming Messages</p>
    <p num="124">
      When using several asynchronous requests at the same time, replies may appear in any order.
      <br/>
      To facilitate the processing of arriving reply messages, the OOI offers the possibility of defining callback methods, which will be activated as soon as a reply message or a notification has been received.
      <br/>
      The OOI is single threaded, therefore callbacks are invoked only during wait( ) or poll( ) calls and not while the application is processing.
    </p>
    <p num="125">
      The OOI distinguishes four different tasks for reply callbacks, and therefore there is the possibility of registering four different callbacks per request:
      <br/>
      partialReply( ) is called for every successful linked reply message from XMP
      <br/>
      errorReply( ) is called for every unsuccessful reply message from XMP
      <br/>
      completed( ) is called upon reception of the "final" reply from XMP
      <br/>
      disconnected( ) is called during the disconnect processing which might have been triggered by XMP or the application.
    </p>
    <p num="126">
      Incoming responses for pending requests are represented by objects which have been derived from the ASN.1 definitions of CMIP.
      <br/>
      These objects are put into the reply queue of the request object.
      <br/>
      The implementation of the response class for the OOI is provided in Listing 4 in the Appendix.
      <br/>
      Incoming notifications are represented by objects which also have been derived from the ASN.1 definitions of CMIP.
      <br/>
      These objects are put into the event queue of their proxy agent.
      <br/>
      Then the callback method incomingNotificationCallback( ) which is defined by the application for the notification queue is executed with the notification object as parameter.
    </p>
    <p num="127">
      The callback informs the application that something has been received, and that the queue structures were updated.
      <br/>
      Thus when the callback is invoked, the object is already in the queue.
    </p>
    <p num="128">
      The steps in a partial response for an outstanding request are:
      <br/>
      1.
      <br/>
      The response object is added to the response list of the request object.
      <br/>
      This includes updating of all related information of the request object, `numberOfResponse` information.
      <br/>
      2. The partialReplyCallback( ) or errorReplyCallback( ) is invoked.
    </p>
    <p num="129">
      The steps in a final response for an outstanding request include the following steps in addition to the partial steps for response callback:
      <br/>
      1.
      <br/>
      The request object is updated.
      <br/>
      Its state is changed to "completed".
      <br/>
      There is no "final response object" added to the response queue.
      <br/>
      2. The request object is moved from the requestQueue to the completedQueue
      <br/>
      3.
      <br/>
      The final callback requestCompletedCallback( ) is called.
    </p>
    <p num="130">
      Incoming notification
      <br/>
      1.
      <br/>
      The notification object is added to the notification queue.
      <br/>
      This includes updating the information in the notification queue header.
      <br/>
      2. The incomingNotificationCallback( ) method is invoked.
    </p>
    <p num="131">
      This scheme allows the application to modify the queue structures, e.g. to `unlink` the received data from the response objects in order to avoid copying.
      <br/>
      Some higher level receive methods may modify the queue structure, e.g. methods like getSubordinates( ), which convert the data of the response queue into a list of proxy managed objects.
    </p>
    <p num="132">Mixed Processing of Synchronous and Asynchronous Requests</p>
    <p num="133">
      It is assumed that the application has issued one or more asynchronous CMIS requests.
      <br/>
      It then decides to send out a synchronous request.
      <br/>
      While the synchronous request processes, the complete application waits.
      <br/>
      In the meantime, responses for the asynchronous requests or notifications may arrive.
    </p>
    <p num="134">
      In order to receive the reply for the synchronous request, the OOI must receive any message from the XMP session of the proxy agent object which was used for the synchronous call.
      <br/>
      All callback methods defined for the incoming messages will be executed to preserve the semantics and to guarantee the highest responsiveness possible.
    </p>
    <p num="135">
      It can be argued whether the same approach should be used for the other proxy agents with outstanding requests.
      <br/>
      For those, the decision was made against receiving to avoid unnecessary pre-reception of messages.
    </p>
    <p num="136">Flow control</p>
    <p num="137">
      The OOI design tries to avoid re-implementing functionality that is already covered by lower layers in the communication stack.
      <br/>
      Therefore, the OOI relies on the flow control mechanism of XMP and of any other underlying components.
      <br/>
      The application is responsible for being responsive enough for retrieving the data quickly from XMP.
      <br/>
      Otherwise purging on XMP level and below may occur.
      <br/>
      There is a recommendation related to the IBM XMP implementation, which recommends receiving as much data as available as fast as possible.
      <br/>
      The OOI does not do internal buffering to avoid uncontrollable memory consumption in the manager application.
    </p>
    <p num="138">
      Using the asynchronous OOI, the manager application has all the mechanisms needed to receive messages from the agents as quickly as it seems advisable from the viewpoint of the application.
      <br/>
      The OOI receives messages from XMP during the processing of one of the several wait methods.
      <br/>
      Depending on the properties of the outstanding request objects and the kind of messages which arrive, one or more messages are received from one or more XMP sessions.
      <br/>
      The provision of callback functions which can handle every message from XMP as soon as it arrives, gives maximum control to the application.
    </p>
    <p num="139">Proxy Managed Objects</p>
    <p num="140">
      Specific management applications can be designed with and rely upon the specific knowledge of managed object classes and of their attributes, which have been defined in GDMO and ASN.1 prior to the development of the application.
      <br/>
      For those applications, the managed object and attribute templates defined in GDMO are automatically compiled into concrete classes with complete implementation in C++.
    </p>
    <p num="141">
      Proxy managed objects (PMO) are local representations of managed objects that are instantiated in agents.
      <br/>
      PMO C++ classes provide a set of methods through which a management application can conveniently call CMIS requests to query or manipulate the real managed object in the agent.
      <br/>
      A management application typically instantiates an instance of a PMO class for each real managed object that it wishes to interact with.
      <br/>
      PMOs may also be created as a result of OOI methods, e.g. getSubordinates( ).
    </p>
    <p num="142">
      The Object Interface Composer (OIC) generates a proxy managed object (PMO) C++ class for every managed object class (MOC) defined in the processed document.
      <br/>
      Each generated PMO class provides type-safe methods for the access to the mandatory and optional attributes and for the execution of the actions of the managed object.
      <br/>
      Type safe methods enforce strong typing and make up the strong-typed interface of the generated PMO.
    </p>
    <p num="143">
      In addition to the strong typed methods, every PMO inherits from the OOIProxyMO class a set of generic methods called the "weak-typed" interface of the PMOs.
      <br/>
      These methods are intended for management applications or components which do not know at compile time, which classes of managed objects might appear from some agent at run time.
      <br/>
      It should be noted that these generic methods can also be used for generated PMOs, but will execute less efficiently due to the necessary dynamic type checking done at run time.
      <br/>
      The implementation of the proxy managed object (OOIProxyMO) class is provided in Listing 5 in the Appendix.
    </p>
    <p num="144">
      The inheritance relation between generated PMO classes in C++ reflects the inheritance relation of the MOCs defined in GDMO/ASN.1 documents.
      <br/>
      In FIG. 4 an example of an inheritance structure for DMI MOCs is shown.
      <br/>
      As can be seen in FIG. 4, all generated, strong-typed PMO Classes are derived from the DMI_ProxyTop PMO class which in turn is derived from the OOIProxyMO class.
      <br/>
      All methods of the OOIProxyMO and DMI_ProxyTop classes are thus inherited by all proxy managed object classes.
    </p>
    <p num="145">
      The OOIProxyMO and OOIGenericMO classes are hand-coded as part of the OOI run-time environment.
      <br/>
      The DMI_ProxyTop class and each of its subclasses are generated by the OIC.
      <br/>
      The DMI_Proxy System subclass generated by the OIC is provided in Listing 6 in the Appendix.
    </p>
    <p num="146">
      The OOIGenericMO class is used to handle managed objects whose types are not known at compile time.
      <br/>
      This feature allows the programmer to write generic applications or provide for the handling of new objects that will be defined after the application has been completed.
    </p>
    <p num="147">Storage Management</p>
    <p num="148">
      For the storage management of the OOI, it is assumed that the OOI will allocate objects and pass them to the application.
      <br/>
      The application must release all allocated objects which it received from the OOI.
      <br/>
      The OOI will only manage those objects which are used internally and which are not made visible to the application.
      <br/>
      Upon reception of data from XMP, only the OOI knows its type, and must therefore allocate the object of the correct type, and after passing of such objects to the application, the OOI does not know when the application has finished using them.
    </p>
    <p num="149">The destructor of the OOI objects will take care of the proper deletion of contained objects.</p>
    <p num="150">All methods are inherited from the OOIProxyMO class according to the semantics of the C++ language.</p>
    <p num="151">Constructors and Destructors of OOIProxyMO</p>
    <p num="152">
      Two constructors are available for OOIProxyMO objects; both expect as parameter the agent on which the MO resides and a pointer to the meta info object.
      <br/>
      One of these additionally accepts the distinguished name of the object as parameter.
      <br/>
      In any case, the name can be set explicitly by the setMOInstance( ) method.
      <br/>
      Both direct-addressing proxy agents (DAPAs) and non-direct addressing proxy agents (NDAPAs) can be used as parameters.
      <br/>
      The copy constructor and the assignment constructor have been explicitly disabled for the OOIProxyMO class and its subclasses.
      <br/>
      Copy constructors are not provided to avoid the automatic generation of multiple instances of proxy managed objects of the same managed object instance within one application.
    </p>
    <p num="153">
      Destructors are provided for each ProxyMO subclass.
      <br/>
      Both constructors and destructors report errors through the exception mechanism.
    </p>
    <p num="154">
      The following methods are inherited from the OOIProxyMO class by each proxy managed object class:
      <br/>
      setAgent( ) method can be used to overwrite the reference to the ProxyAgent object.
      <br/>
      setMOInstance( ) method can be used to overwrite the distinguished name.
      <br/>
      &lt;&lt;print operator creates a formatted printout of the MOC and managed object instances (MOI) values of the PMO.
      <br/>
      agent( ) method returns a pointer to the ProxyAgent object on which the managed object resides,
      <br/>
      moClass( ) method returns a reference to the CMIS_ObjectClass (the MOC may not be known if the object is the result of a scoped MGet operation),
      <br/>
      moClassId( ) method returns the name of the class as a reference to an OOIString,
      <br/>
      moInstance( ) method returns the distinguished name of the MO as a reference to a CMIS_ObjectInstance,
      <br/>
      metaInfo( ) access method retrieves the run time Meta information (i.e. structural information specified in the GDMO MO class definition),
      <br/>
      hasConditionalPackage( ) access method determines the presence of a conditional package,
      <br/>
      reset( ) method re-establishes the initial status of the object.
    </p>
    <p num="155">Strong-Typed Methods of PMO</p>
    <p num="156">
      The OIC generates C++ header and implementation files for every managed object class defined in the parsed GDMO document.
      <br/>
      Each PMO class provides type safe methods for the access to attributes and for the execution of the actions of the managed objects.
      <br/>
      Those methods are said to be strong-typed.
    </p>
    <p num="157">
      As for their superclass, the strong-typed PMO classes have disabled default, copy and assignment constructors.
      <br/>
      The constructor for a typed PMO expects the proxy agent on which the MO resides and the distinguished name of the MO instance as parameters; both are defaulted to NULL and can be modified later on by using the local utility methods setAgent and setMOInstance, which have been described above.
      <br/>
      The class of the represented MOC is known by the type of the proxyMO.
      <br/>
      Constructors and destructors report errors through the exception mechanism.
    </p>
    <p num="158">Multiple Inheritance</p>
    <p num="159">
      GDMO allows the definition of managed object classes being derived from more than one superior class (multiple inheritance).
      <br/>
      This section describes how the OOI represents multiple inheritance of managed object classes in the generated C++ classes.
    </p>
    <p num="160">
      The basic properties of the OOI representation are:
      <br/>
      1.
      <br/>
      The class hierarchy of the OOI proxy managed object classes strictly follows the inheritance structure imposed by the GDMO definition.
      <br/>
      This includes multiple inheritance.
      <br/>
      2. The same holds for the representation of meta information: in case of multiple inheritance, a meta info object for a managed object class has multiple "superior" references.
    </p>
    <p num="161">
      Even though C++ offers multiple inheritance, C++ has some serious restrictions.
      <br/>
      A simple mapping of GDMO multiple inheritance to C++ multiple inheritance is not feasible as will be explained below.
    </p>
    <p num="162">
      As long as multiple inheritance is used in order to inherit from different base classes only, C++ works fine.
      <br/>
      However, in case of a common base class for different inheritance paths, C++ problems arise.
      <br/>
      In order to have only one instance of the common base member variables, which is what is normally needed, the base class has to be made a "virtual" base class.
      <br/>
      Then however, C++ no longer supports casting between base class pointers and sub-class pointers.
    </p>
    <p num="163">
      This restriction is not acceptable for the OOI, since for internal reasons (decoding), as well as for the user model (which is to support generic and type safe usage in a mixed fashion), the ability to cast pointers is a must.
      <br/>
      Furthermore, experiments have shown, that today's C++ compilers impose a very large size overhead per instance.
    </p>
    <p num="164">
      As described above, the main problem of C++ is not related to multiple inheritance itself, but to the use of virtual base class annotation.
      <br/>
      Thus the basic approach is to avoid this annotation, and to handle the "virtual" base class property by other means.
      <br/>
      The original purpose of making the base class virtual is to avoid having multiple instances of the base class members.
    </p>
    <p num="165">
      In case of OOI proxy managed objects, this property is needed.
      <br/>
      Duplicated instances of the "agent-reference" or "packages-cache" members within a proxy managed object are unacceptable.
      <br/>
      The OOI approach is to move the "data members" of a proxy managed object out of the proxy managed object class into a separate object called "proxy managed object data" (PMOData).
      <br/>
      This PMOData object is purely local and completely owned by its corresponding proxy managed object.
      <br/>
      The original proxy managed object merely contains a pointer to this PMOData object.
      <br/>
      As required for casting, the original proxy managed object class is not declared as a virtual base class.
      <br/>
      Obviously, in case of multiple inheritance this may lead to having duplicated pointers to the PMOData.
      <br/>
      The OOI runtime system guarantees that all these pointers point to the same object during the lifetime of the PMOData object.
    </p>
    <p num="166">The implementation uses the "use-count" paradigm for the PMOData objects: during usage, the "use-count" is equivalent to the number of pointer members of the related proxy managed object, and thus to the number of inheritance paths of a specific managed object class to a common base class.</p>
    <p num="167">
      To the user, this solution is completely hidden.
      <br/>
      The user is not aware of the existence of multiple pointers, nor of the fact that the proxy managed object data is stored in a separate object.
      <br/>
      All data and all operations are directly accessible from the proxy managed object interface.
    </p>
    <p num="168">
      Casting for the C++ proxy managed object classes is achieved by the OOI solution described above.
      <br/>
      However, in case of multiple inheritance, C++ casting requires specifying the exact casting path (at least at those places with multiple inheritance paths).
      <br/>
      To simplify this, the OOI offers (as for other classes) a narrow( )operator, which allows casting towards subclasses.
    </p>
    <p num="169">
      In addition, the OOI provides for the proxy managed object classes a widen( ) operator for casting towards the `OOIProxyMO` base class.
      <br/>
      The narrow( ) operator optionally performs run-time checking, whereas this is not necessary for the widen( ) operator.
      <br/>
      Thus there is no need to use plain C++ casts directly.
    </p>
    <p num="170">Notifications</p>
    <p num="171">
      Specific management applications rely upon the specific knowledge of notification object classes which have been defined in GDMO and ASN.1 prior to the development of the application.
      <br/>
      The implementation of the notification base class for the OOI is provided in Listing 7 in the Appendix.
      <br/>
      For those applications, the notification templates defined in GDMO are automatically compiled into concrete classes with complete implementation in C++.
    </p>
    <p num="172">
      The notification objects that are generated from GDMO/ASN.1 definitions by the Object Interface Composer (OIC) are sent to a manager by means of a CMIS event report.
      <br/>
      The DMI object creation class generated for a DMI object creation notification by the OIC is provided in Listing 8 in the Appendix.
      <br/>
      The OOI RTS receives notifications and stores them in the event queue of the responsible proxy agent object.
    </p>
    <p num="173">ASN.1</p>
    <p num="174">
      Specific management applications are designed with and rely upon the specific knowledge of GDMO/ASN.1 definitions, which have been defined in ASN.1 prior to the development of the application.
      <br/>
      For those applications, the abstractly defined ASN.1 types are automatically compiled into concrete classes with complete implementation in C++.
    </p>
    <p num="175">
      The specification language ASN.1 ("Abstract Syntax Notation 1") has been defined by the ISO to specify the format of transmitted data in a formal, abstract notation.
      <br/>
      A standardized encoding scheme, such as the "Basic Encoding Rules" (BER) specifies the precise sequence of "bits on the wire".
      <br/>
      Thus two communicating partners are able to understand each other if they exchange data that is defined in ASN.1 and encoded according to the same encoding rules.
    </p>
    <p num="176">
      ASN.1 offers primitive types, string types and constructors which can be used to define further application related types.
      <br/>
      FIG. 5 shows the types available in ASN.1. In addition to those types, ASN.1 offers the possibility to define named values for some types, and to define several kinds of subtypes.
    </p>
    <p num="177">Mapping Principles</p>
    <p num="178">As shown in FIG. 5 there is a set of primitive ASN.1 types and a set of constructors, which are used to compose application oriented complex types.</p>
    <p num="179">Base Library: For every primitive ASN.1 type and every ASN.1 constructor, there is a corresponding class in the ASN.1 C++ library, e.g. ASN1_Integer, ASN1_SetOf.</p>
    <p num="180">
      Application Types: Each application-defined ASN.1 type is mapped to one or several C++ classes.
      <br/>
      In the general case, instances of these classes will form a tree structure with instances of ASN.1 constructors as intermediate nodes and instances of primitive ASN.1 types as leaves.
      <br/>
      The root object of such a tree will be the application defined class which inherits from the outermost ASN.1 constructor class or simple type.
    </p>
    <p num="181">
      Common Methods: The generated C++ classes and those in the library are derived from a single common class "ASN1_Type".
      <br/>
      The declaration of functions such as assignment, comparison, print, encoding, decoding, checking, conversion into and from ASN.1 value notation, etc. as virtual methods in the common base class allows for generic usage of all ASN.1 specific C++ classes.
    </p>
    <p num="182">
      Strong &amp; Weak Typing: The generated C++ classes inherit from the generic library classes.
      <br/>
      The generated classes offer a strong typing interface while their generic superclasses offer a weak typing interface to the same objects.
      <br/>
      The examples in the following text will show how both are intended to be used.
      <br/>
      A very important feature is that both interfaces can be used for the same objects in a mixed fashion.
      <br/>
      Therefore, it is possible to use generic components together with strong typing components in the same application.
    </p>
    <p num="183">
      Meta Information: Every ASN.1 C++ class has access to run time type information (meta information) to support a dynamic style of usage in the application.
      <br/>
      Generic applications, e.g. a graphic application program, rely on this meta information.
    </p>
    <p num="184">Local Types: Any auxiliary type definition, e.g. the values of an enumeration type or the selector type for alternatives of a choice is defined within the scope of the class which uses it in order to avoid name classes in the global scope.</p>
    <p num="185">Compatibility: All C++ classes for primitive types are made compatible with the corresponding C++ basic type, e.g. ASN.1 integers are compatible with C++ integers.</p>
    <p num="186">
      Qualified Identifiers: The overall convention for generated names is: "&lt;ASN.1 Module&gt;_&lt;ASN.1 type name&gt;_&lt;ASN.1 component name&gt;", where the module name is a nickname in upper case letters, and the type name is the same as in the ASN.1 source text.
      <br/>
      The component name is only generated for anonymous component types.
    </p>
    <p num="187">Meta Information</p>
    <p num="188">
      The purpose of meta information is to provide the type information derived from the various GDMO and ASN.1 specifications which is needed by the OOI at run time.
      <br/>
      Such information may be used directly or indirectly by applications that
      <br/>
      1. use the generic interfaces of the OOI (as opposed to the type-safe interface);
      <br/>
      2. offer a generic graphical user interface (GUI) requiring conversion to/from string format; and
      <br/>
      3. display GDMO meta information to a user.
    </p>
    <p num="189">
      Typically the meta information is not used directly by applications that only use the type safe interface.
      <br/>
      Internally, the OOI-Run Time System (RTS) makes use of the meta information.
    </p>
    <p num="190">
      The GDMO standard 10165-2 defines templates for the definition of management information.
      <br/>
      The OOI RTS provides meta information about management information specified using the following templates:
      <br/>
      Managed Object Class which specifies the names of the mandatory and optional packages of a managed object;
      <br/>
      Parameter which specifies the syntax and behavior of parameters that may be associated with particular attributes, operations and notifications;
      <br/>
      Attribute which defines admissible operations for the attribute and refers to an ASN.1 type definition;
      <br/>
      Attribute Group which specifies a cluster of attributes that can be accessed or operated upon under one name;
      <br/>
      Action which refers to an ASN.1 type for outgoing or incoming information; and
      <br/>
      Notification which refers to an ASN.1 type for the information that is passed with an event notification of the defined type.
    </p>
    <p num="191">
      A C++ class is defined for each of those templates.
      <br/>
      The Meta Information class hierarchy implementation is depicted in FIG. 6.
      <br/>
      An instance of this class is instantiated for each GDMO template defined in the GDMO document parsed by OIC.
      <br/>
      A single instance of the OOIMetaInfoRepository class serves as anchor for the meta information.
      <br/>
      Additionally instances of C++ classes are generated for each document, each ASN.1 module, and each ASN.1 type defined in a GDMO/ASN.1 document.
    </p>
    <p num="192">
      The OOI Meta Information can be seen as a data structure which holds most of the information contained in GDMO/ASN.1 documents.
      <br/>
      This information is stored in a set of objects that provide methods to retrieve specific meta information and to "navigate" through the meta information data structure.
      <br/>
      For example, the OOIMetaRepository class provides methods to access OOI Document Meta Info and ASN.1 Module Meta Info.
      <br/>
      Document Meta Information is stored in a list of object instances.
      <br/>
      Each instance holds or refers to most of the information contained in one GDMO document.
    </p>
    <p num="193">These instances provide methods to access Managed Object Class Meta Info, Parameter Meta Info, Attribute Meta Info, Attribute Group Meta Info, Action Meta Info, Notification Meta Info, ASN.1 Meta Info, which are defined in the document.</p>
    <p num="194">OOI Error Handling</p>
    <p num="195">
      Three kinds of errors can be encountered when using the OOI:
      <br/>
      1.
      <br/>
      Application Related Errors,
      <br/>
      2.
      <br/>
      OOI Internal Errors,
      <br/>
      3.
      <br/>
      Communication Errors.
    </p>
    <p num="196">
      Application related errors occur through incorrect coding of the application.
      <br/>
      Because the OOI supports strong typing, most coding errors will be detected at compile time, but some errors can only be detected at run-time, e.g. trying to set the hour attribute to the unsupported value of 24 or trying to access a bit outside of a string.
    </p>
    <p num="197">OOI internal errors can be caused by system problems (e.g. resource contingency such as being out of memory), XMP library or system errors.</p>
    <p num="198">
      Communication Errors are ACSE or CMIS service errors.
      <br/>
      Those errors are expected as they are an inherent part of the protocol definition.
    </p>
    <p num="199">
      The OOI uses four mechanisms to signal errors:
      <br/>
      Boolean return value;
      <br/>
      NULL pointers return value;
      <br/>
      Error objects returned as function return or through function reference arguments; and
      <br/>
      Error objects thrown by exceptions.
    </p>
    <p num="200">
      Error Objects are the preferred error handling method of the OOI.
      <br/>
      Alternatively, booleans or NULL pointers are returned by some functions to provide additional comfort to the application writer.
    </p>
    <p num="201">Boolean return values are used by functions that are typically used in an evaluation.</p>
    <p num="202">NULL pointer return values are returned by Meta Info access methods if the meta information is not available.</p>
    <p num="203">Error objects are returned through function reference arguments of the called methods.</p>
    <p num="204">
      Exceptions must be used in C++ to handle failing constructors, because constructors do not support result parameter (hence can't return an error code).
      <br/>
      Furthermore, exceptions provide a convenient mechanism to indicate internal errors.
      <br/>
      The OOI throws error objects of the same classes as those used in reference function arguments.
    </p>
    <p num="205">Error Objects</p>
    <p num="206">
      Error objects are returned by C++ functions through reference arguments or thrown via C++ exceptions.
      <br/>
      FIG. 7 describes the inheritance hierarchy of OOIErrors.
    </p>
    <p num="207">
      Communication errors are expected as they are inherent in the ACSE and CMIS protocol operation.
      <br/>
      Error objects describing communication errors are usually `returned` and not `thrown`. Communication errors can originate from the stack interface (currently XMP) or from the CMIS protocol itself.
    </p>
    <p num="208">Methods of OOI Error Objects</p>
    <p num="209">
      OOI error objects usually are allocated by the OOI and passed to the application.
      <br/>
      It is the responsibility of the application to delete these objects.
      <br/>
      Constructors are disabled explicitly, but the application may use the copy( ) method to create a copy of an existing error object.
    </p>
    <p num="210">
      The following methods for inspecting the kind of error are provided:
      <br/>
      isCommunicationsError( ) checks if the error is of the category communication error
      <br/>
      isCMISError( ) checks if the error is of the category CMIS error
      <br/>
      isLocalError( ) checks if the error is of the category local error
      <br/>
      isApplicationError( ) checks if the error is of the category application error
      <br/>
      isInternalError( ) checks if the error is of the category internal error
    </p>
    <p num="211">
      The following general support methods are provided:
      <br/>
      name( ) returns the name of the objects class
      <br/>
      typeCodeIndex( ) returns the index of the subclass (used for inspecting/classifying an error, usually followed by ::narrow)
      <br/>
      &lt;&lt;print operator puts a formatted print of the status of the object into an ostream object
      <br/>
      asString( ) returns a string containing the formatted status of the object
      <br/>
      copy( ) returns a pointer to a copy of the parameter object
      <br/>
      metaInfo( ) returns a pointer to the meta information of the object
      <br/>
      narrow( ) performs a type safe conversion into an instance of a subclass
    </p>
    <heading>-- APPENDIX</heading>
    <p num="212">
      -- Listing 1: Proxy Agent Class
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ***/
      <br/>
      -- /**                                                                 */
      <br/>
      -- /**    Licensed Materials - Property of IBH                           */
      <br/>
      -- /**                                                                 */
      <br/>
      -- /**    5799-QLN                                                       */
      <br/>
      -- /**                                                                 */
      <br/>
      -- /**    .COPYRGT. Copyright IBM Corporation 1995, 1996                    */
      <br/>
      -- /**                                                                 */
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ***/
      <br/>
      -- /*
      <br/>
      --  *  RCS LOG:
      <br/>
      --  *
      <br/>
      --  * $Log:     OOIProxyAgent.H,v $
      <br/>
      --  *
      <br/>
      --  */
      <br/>
      -- -ifndef _OOI_PROXY_AGENT_INCLUDED--
      <br/>
      -- -define _OOI_PROXY_AGENT_INCLUDED--
      <br/>
      -- -include "CMIS.ALL.H"
      <br/>
      -- -include "OOIErrors.H"
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- // exported class definitions
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // OOIProxyAgentNDA0: proxy agent with no queue automatically allocated
      <br/>
      -- // OOIProxyAgentNDA: proxy agent with standard notification queue
      <br/>
      -- // OOIProxyAgentDA0: proxy agent with notification queue
      <br/>
      -- // OOIProxyAgentDA:  proxy agent with standard notification queue
      <br/>
      -- class OOIProxyAgentXX;
      <br/>
      -- class OOIProxyAgentDA0;
      <br/>
      -- class OOIProxyAgentDA;
      <br/>
      -- class OOIProxyAgentNDA0;
      <br/>
      -- class OOIProxyAgentNDA;
      <br/>
      -- // type OOIWaitStatus
      <br/>
      -- // type OOIProxyAgentList
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- // useful macro definitions related to CMIS confimation mode
      <br/>
      -- //
      <br/>
      -- -define OOI_CONFIRMED   CMIS_Mode::confirmed
      <br/>
      -- -define OOI_NONCONFIRMED CMIS_Mode::nonConfirmed
      <br/>
      -- -define OOI_UNCONFIRMED OOI_NONCONFIRMED
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // OOIWait::`Status` enum type
      <br/>
      -- // used as argument for OOI wait( ) &amp; poll( ) methods
      <br/>
      -- // (warning: this type is different from the XMP completion_flag_return
      <br/>
      --  type �)
      <br/>
      -- //
      <br/>
      -- class OOIWait +
      <br/>
      --  public :
      <br/>
      --      enum Status Enum +
      <br/>
      --        error = -1, // indicating `wait` internal error,
      <br/>
      --                      // ( `ooiStat` will also have a value &lt; &gt; SUCCESS)
      <br/>
      --                      // ( unless exception mode is used. . .)
      <br/>
      --        nothing = 0, // nothing received / wait timeout occured
      <br/>
      --        response = 1, // `non-empty` response, containing cmis data or cmis
      <br/>
      --  error:
      <br/>
      --                      // - `partial` response of a linked reply, or
      <br/>
      --                      // - `single` (and thus final) response of a
      <br/>
      --  non-linked reply,
      <br/>
      --                      // (`empty` response, not containing cmis data / cmis
      <br/>
      --  error)
      <br/>
      --        notification  // incoming notification (mgr side only)
      <br/>
      --        indication    // incoming indication (agent side only)
      <br/>
      --        };
      <br/>
      --  static OOIString asString( OOIWait::StatusEnum waitStatus );
      <br/>
      -- };
      <br/>
      -- typedef OOIWait::StatusEnum OOIWaitStatus;
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- // extern class definitions (see `OOIProxyMO.H` ):
      <br/>
      -- //
      <br/>
      -- -ifdef _OOI_DUMMY_PNO--
      <br/>
      --  class OOIProxyMO + };
      <br/>
      --  class OOIProxyMOList + };
      <br/>
      -- -else
      <br/>
      --  class OOIProxyMO;
      <br/>
      --  class OOIProxyMOList;
      <br/>
      -- -endif
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- -include "OOIPresentationModule.H"
      <br/>
      -- -include "OOIQueues.H"
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // overview about important CMIS data structures: ( Session, Context )
      <br/>
      -- //
      <br/>
      -- //  Session ::= SEQUENCE
      <br/>
      -- //  requestorAddress Address OPTIONAL
      <br/>
      -- //  requestorTitle Title OPTIONAL
      <br/>
      -- //  role Role OPTIONAL
      <br/>
      -- //  fileDescriptor INTEGER
      <br/>
      -- //  responderAddress Address OPTIONAL
      <br/>
      -- //  responderTitle Title OPTIONAL
      <br/>
      -- //  accessControl AccessControl OPTIONAL
      <br/>
      -- //  cmisFunctionalUnits FunctionalUnits OPTIONAL
      <br/>
      -- //
      <br/>
      -- //  PAContent ::= SEQUENCE
      <br/>
      -- //  accessControl AccessControl OPTIONAL
      <br/>
      -- //  priority Priority
      <br/>
      -- //  responderAddress Address OPTIONAL for NDAPA only
      <br/>
      -- //  responderTitle Title OPTIONAL for NDAPA only
      <br/>
      -- //  useActualClass   BOOLEAN  OPTIONAL -- DEFAULT TRUE --
      <br/>
      -- //
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // definition of OOIProxyAgent &amp; OOIProxyAgentList (list of pointers to
      <br/>
      --  OOIProxyAgent's
      <br/>
      -- //
      <br/>
      -- // this type is mainly used OOI internally �
      <br/>
      -- //
      <br/>
      -- // warning: this list contains only `aliases` to proxy agents:
      <br/>
      -- //        the proxy agents are not owned by this list, assignment &amp; copy is
      <br/>
      --  `shallow`
      <br/>
      -- //
      <br/>
      -- -include "isetsls.h"
      <br/>
      -- class OOIProxyAgentListElement +
      <br/>
      --  public:
      <br/>
      --      OOIProxyAgentListElement( );
      <br/>
      --      OOIProxyAgentListElement( const OOIProxyAgentListElement&amp; rh);
      <br/>
      --      OOIProxyAgentListElement( const OOIProxyAgentXX * agent);
      <br/>
      --      .asterisk-pseud.OOIProxyAgentListElement( );
      <br/>
      --      OOIProxyAgentListELement&amp; operator=( const OOIProxyAgentListElement&amp;
      <br/>
      --  rh);
      <br/>
      --      OOIBoolean operator==( const OOIProxyAgentListElement&amp; rh) const;
      <br/>
      --      OOIBoolean operator&lt;( const OOIProxyAgentListElement&amp; rh) const;
      <br/>
      --      OOIProxyAgentXX * agent( ) const;
      <br/>
      --  private:
      <br/>
      --      OOIProxyAgentXX * _agent;
      <br/>
      -- };
      <br/>
      -- typedef ISetOnSortedLinkedSequence&lt; OIProxyAgentListElement &gt;
      <br/>
      --  OOIProxyAgentList;
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- class OOIProxyAgentXX +
      <br/>
      --  friend class OOI;
      <br/>
      --  friend class OOIGenericQueue;
      <br/>
      --  friend class OOIRequest;
      <br/>
      -- //friend class OOINotificationQueue;
      <br/>
      --  friend class OOINotification;
      <br/>
      --  friend class OOIGenericQueueElement;
      <br/>
      --  friend class OOIIndication;
      <br/>
      -- public:
      <br/>
      --  enum Kind +
      <br/>
      --      directAddressing,
      <br/>
      --      nonDirectAddressing
      <br/>
      --      };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      --  //
      <br/>
      --  // standard constructors/destructors
      <br/>
      --  //
      <br/>
      -- private:
      <br/>
      --  // default constructor, disabled
      <br/>
      --  OOIProxyAgentXX( );
      <br/>
      --  // copy constructor, disabled
      <br/>
      --  OOIProxyAgentXX( const OOIProxyAgentXX&amp; rhs );
      <br/>
      --  // standard assignment operatore, disabled
      <br/>
      --  OOIProxyAgentXX&amp; operator=( const OOIProxyAgentXX&amp; rhs );
      <br/>
      -- public:
      <br/>
      --  // destructor
      <br/>
      --  virtual  OOIProxyAgentXX( );
      <br/>
      -- protected:
      <br/>
      --  // initialization constructor
      <br/>
      --  OOIProxyAgentXX+
      <br/>
      --               Kind                kind,
      <br/>
      --               OOINotificationQueue * notificationQueue // IN, if
      <br/>
      --  NULL--&gt;none
      <br/>
      --               OOIIndicationQueue * indicationQueue  // IN, if NULL--&gt;none
      <br/>
      --              };
      <br/>
      -- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * *
      <br/>
      --  *
      <br/>
      --  * Name:       initialization constructor
      <br/>
      --  * Purpose:    allocate proxy agent
      <br/>
      --  * Input:      notificationQueue:
      <br/>
      --  *             indicationQueue: may be NULL
      <br/>
      --  * Output:     %
      <br/>
      --  * Return:     %
      <br/>
      --  * Errors:     %
      <br/>
      --  * Exceptions: %
      <br/>
      --  * Note:       the queues are `linked` in, not copied.
      <br/>
      Then they are
      <br/>
      --  `owned`
      <br/>
      --  *             by the proxy agent, and will usually be deleted
      <br/>
      --  automatically when the
      <br/>
      --  *             proxy agent itself is deleted: see proxyAgentDeleted( )
      <br/>
      --  callback.
      <br/>
      --  *
      <br/>
      --  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * */
      <br/>
      --  //
      <br/>
      --  // type specific
      <br/>
      --  //
      <br/>
      -- public:
      <br/>
      --  // data member access methods
      <br/>
      --  int id( ) const;
      <br/>
      --  OOIBoolean isConnected( ) const;
      <br/>
      --  Kind kind( ) const;
      <br/>
      --  OOIBoolean isDirectAddressingProxyAgent( ) const;
      <br/>
      --  //
      <br/>
      --  // access to session controls
      <br/>
      --  // use methods from CMIS_Session to read the contents
      <br/>
      --  //
      <br/>
      --  //  - the proxy agent has to be in `state` unconnected, if you
      <br/>
      --  //    want to change any settings
      <br/>
      --  //   - role
      <br/>
      --  //   - accessControl (although not really supported by Telco 6k)
      <br/>
      --  //   - cmisFunctionalUnits
      <br/>
      --  const CMIS_Session &amp; sessionControls( ) const;
      <br/>
      --  void resetSessionControls( );
      <br/>
      --  void setRole( const CMIS_Role               &amp; role );
      <br/>
      --  void setDefaultRole( );
      <br/>
      --  void setSessionAccessControl(
      <br/>
      --                const CMIS_ExternalAC                 &amp; accessControl );
      <br/>
      --  void setCMISFunctionalUnits(
    </p>
    <p num="213">
      --                const CMIS_FunctionalUnits &amp; functionalUnits );
      <br/>
      --  void setRequestorTitle(
      <br/>
      --         const CMIS_Title                             &amp; title );
      <br/>
      --  void setRequestorAddress+
      <br/>
      --         const CMIS_PresentationAddress               &amp; address };
      <br/>
      --  void setResponderTitle+
      <br/>
      --         const CMIS_Title                             &amp; title };
      <br/>
      --  void setResponderAddress+
      <br/>
      --         const CMIS_PresentationAddress               &amp; address };
      <br/>
      -- // read/write-access to context controls
      <br/>
      -- //  use methods from CMIS_PAContext to read the contents
      <br/>
      -- //  - you may set:
      <br/>
      -- //  - priority
      <br/>
      -- //  - accessControl (although not really supported by Telco 6k)
      <br/>
      -- //
      <br/>
      -- //  - for NDA - proxy agents (*), you may set
      <br/>
      -- //  - responderAddress
      <br/>
      -- //  - responderTitle
      <br/>
      -- //
      <br/>
      -- //  (*) if you want to have context addressing for DA - proxy agents,
      <br/>
      -- //  as well, you have to switch `OOI::enableDAPAContextAddressing` to true,
      <br/>
      -- //
      <br/>
      -- //  - note: the following original (XMP) context controls
      <br/>
      -- //  - mode
      <br/>
      -- //  - asynchronous
      <br/>
      -- //  - (sizeLimit, timeLimit)
      <br/>
      -- //  are not provided through `PAContext`, but via other
      <br/>
      -- //  OOI means.
      <br/>
      -- const CMIS_PAContext &amp; defaultContext( ) const;
      <br/>
      -- void                  setDefaultContext( const CMIS_PAContext &amp; context );
      <br/>
      -- void                  resetDefaultContext( );
      <br/>
      -- // return the file descriptor associated with this proxy agent
      <br/>
      -- //  (returns -1 in case of disconnected proxy agents)
      <br/>
      -- int                       fileDescriptor( ) const;
      <br/>
      -- const OM_private_object &amp; XMPSession( ) const;
      <br/>
      -- // methods related to queues
      <br/>
      -- OOIBoolean                   hasNotificationQueue( ) const;
      <br/>
      -- OOINotificationQueue        &amp; notificationQueue( ) const;
      <br/>
      -- OOIBoolean                   hasIndicationQueue( ) const;
      <br/>
      -- OOIIndicationQueue          &amp; indicationQueue( ) const;
      <br/>
      -- OOIRequestQueue             &amp; requestQueue( ) const;
      <br/>
      -- OOIRequestQueue             * completedQueue( ) const;
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- // global useful consts
      <br/>
      -- static
      <br/>
      -- const OOIOID              &amp; actualClassOID( );
      <br/>
      -- static
      <br/>
      -- const CMIS_ObjectClass    &amp; actualClassMOC( );
      <br/>
      -- // empty attribute id list
      <br/>
      -- static
      <br/>
      -- const CMIS_AttributeIdList&amp; emptyAttributeIdList( );
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // SYNCHRONOUS INTERFACE:
      <br/>
      -- //
      <br/>
      -- // impl. note 1: all operations are declared non-`const`
      <br/>
      -- // impl. note 2:
      <br/>
      -- //   the need for the `proxyMO` parameter is related to the `packages
      <br/>
      --  caching`
      <br/>
      -- //   resp. the fact, that this interface is also internally by the
      <br/>
      -- //   OOIProxyMO implementation
      <br/>
      -- //   for direct usage without proxy MO: simply pass NULL
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- void simpleMAction(
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO            * proxyMO,            // IN, maybe NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOCLass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_ActionInfo       &amp; actionInfo,     // IN
      <br/>
      --         CMIS_ActionReply            * actionReply = NULL, // OUT,
      <br/>
      --  conditional
      <br/>
      --         OOIBoolean                  * actionReplyPresence = NULL,// OUT,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_Mode             &amp; confirmationMode = OOI_CONFIRMED //
      <br/>
      --  IN
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- void simpleMCreate+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO            * proxyMO,            // IN, maybe NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; moClass,        // IN, mandatory
      <br/>
      --         const CMIS_CreateObjectInstance * createObjectInstance, // IN,
      <br/>
      --  opetional
      <br/>
      --         const CMIS_ObjectInstance   * referenceObjectInstance, // IN,
      <br/>
      --  optional
      <br/>
      --         const CMIS_AttributeList    * attributeList,      // IN, optional
      <br/>
      --         CMIS_ObjectInstance         * MOInstance = NULL, // OUT,
      <br/>
      --  conditional (3)
      <br/>
      --         OOIBoolean                  * MOInstancePresence = NULL, // INOUT,
      <br/>
      --  conditional (3) ?
      <br/>
      --         CMIS_AttributeList          * attributeListResult = NULL, // OUT,
      <br/>
      --  conditional (3)
      <br/>
      --         OOIBoolean                  * attributeListResultPresence=NULL, //
      <br/>
      --  INOUT, conditional (3)
      <br/>
      --         ASN1_GeneralizedTime        * currentTimeResult = NULL, // OUT,
      <br/>
      --  optional (4)
      <br/>
      --         OOIBoolean                  * currentTimeResultPresence = NULL  //
      <br/>
      --  OUT, conditional
      <br/>
      --         };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- void simpleMDelete+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO            * proxyMO,            // IN, maybe NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance  // IN, mandatory
      <br/>
      --         };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- void simpleMGetSome+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO            * proxyMO,            // IN, maybe NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_AttributeIdList  * attributeIdList,    // IN, optional
      <br/>
      --         CMIS_AttributeList          &amp; attrListResult
      <br/>
      --         };
      <br/>
      -- void simpleMGet+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO            * proxyMO,            // IN, maybe NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_AttributeId      &amp; attributeId,    // IN, mandatory
      <br/>
      --         ASN1Type                    &amp; getResult       // OUT, conditional
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- void simpleMSetSome+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO            * proxyMO,            // IN, maybe NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_Mode             &amp; confirmationMode, // IN, mandatory
      <br/>
      --         const CMIS_ModificationList &amp; modificationList, // IN, mandatory
      <br/>
      --         CMIS_AttributeList          * attrListResult      // OUT, if &lt; &gt;
      <br/>
      --  NULL / cond.
      <br/>
      --         };
      <br/>
      -- void simpleMSet+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO            * proxyMO,            // IN, maybe NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_Mode             &amp; confirmationMode, // IN, mandatory
      <br/>
      --         const CMIS_AttributeId      &amp; attributeId,    // IN, mandatory
      <br/>
      --         const ASN1Type              * valueToBeSet,       // IN,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_ModifyOperator   &amp; modifyOperator  // IN, with default
      <br/>
      -- = CMIS_ModifyOperator::replace ,
      <br/>
      --         ASN1Type                    * result = NULL, // OUT, if&lt;
      <br/>
      --  &gt;NULL/cond.
      <br/>
      --         OOIBoolean                  * resultPresence = NULL // OUT,
      <br/>
      --  conditional
      <br/>
      --         };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- void doSynchronousUnscopedRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO            * proxyMO,            // IN, maybe NULL
      <br/>
      --         const ASN1Type              &amp; cmisRequest,    // IN
      <br/>
      --         ASN1Type                    *&amp; cmisResult,    // OUT, conditional
      <br/>
      --         const CMIS_Mode             &amp; confirmationMode = OOI_CONFIRMED, //
      <br/>
      --  IN
      <br/>
      --         const CMIS_PAContext        * singleCallContext = NULL,// IN, may
      <br/>
      --  be NULL
      <br/>
      --         OOIReqServicePrimitiveEnum primitive = CMIS_SP_UNSPECIFIED
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // ASYNCHRONOUS INTERFACE:
      <br/>
      -- //
      <br/>
      -- // these operations are similar to the operations offered at the PMO
      <br/>
      --  interface
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // cmis operations, single mo, asynchronous
      <br/>
      -- //
      <br/>
      -- // action
      <br/>
      -- void simpleMActionRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; actionOID,      // IN
      <br/>
      --         const ASN1Type              * actionInfo          // IN, optional
      <br/>
      --         } const;
      <br/>
      -- // create
      <br/>
      -- void simpleMCreateRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; moClass,     // IN, mandatory
      <br/>
      --         const CMIS_CreatObjectInstance * createObjectInstance, // IN,
      <br/>
      --  optional
      <br/>
      --         const CMIS_ObjectInstance   * referenceObjectInstance,//IN,
      <br/>
      --  optional
      <br/>
      --         const CMIS_AttributeList    * attributeList       // IN, optional
      <br/>
      --         } const;
      <br/>
      -- // simple delete
      <br/>
      -- void simpleMDeleteRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance  // IN, mandatory
      <br/>
      --         } const;
      <br/>
      -- // simpleMGet: get a single attribute
      <br/>
      -- void simpleMGetRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance  // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID    // IN
      <br/>
      --         } const;
      <br/>
      -- void simpleMGetSomeRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_AttributeIdList  &amp; attrIdList      // IN
      <br/>
      --         } const;
      <br/>
      -- void simpleMGetSomeRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_AttributeIdList  * attrIdList = NULL // IN, optional
      <br/>
      --         } const;
      <br/>
      -- void simpleMGetAllRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         } const;
      <br/>
      -- // set
      <br/>
      -- void simpleMSetRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const ASN1Type              * value,              // IN,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_ModifyOperator   &amp; modifyOperator  // IN, with default
      <br/>
      -- = CMIS_ModifyOperator::replace
      <br/>
      --         } const;
      <br/>
      -- void simpleMSetToDefaultRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         cost OID                    &amp; attributeOID    // IN
      <br/>
      --         } const;
      <br/>
      -- void simpleMReplaceRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const ASN1Type              &amp; value           // IN
      <br/>
      --         } const;
      <br/>
      -- void simpeMAddRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const ASN1Type              &amp; value           // IN
      <br/>
      --         } const;
      <br/>
      -- void simpleMRemoveRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const ASN1Type              &amp; value           // IN
      <br/>
      --         } const;
      <br/>
      -- void simpleMSetSomeRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_ModificationList &amp; modificationList // IN, mand.
      <br/>
      --         } const;
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // cmis operations, scoped, synchronous
      <br/>
      -- //
      <br/>
      -- // scoped MGet: get some mo's,
      <br/>
      -- // - cannot be used to retrieve attributes
      <br/>
      -- //  (except objectclass/objectinstance)
      <br/>
      -- //  use asynchronous scoped get calls in order to retrieve attributes
      <br/>
      -- void scopedMGet+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         OOIProxyMOList              &amp; proxyMOList,    // OUT
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         };
      <br/>
      -- // alternatively to the generalized `scopedMGet` method,
      <br/>
      -- // these scope specific methods are offered:
      <br/>
      -- void getSubordinates+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         OOIProxyMOList              &amp; proxyMOList,    // OUT
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         };
      <br/>
      -- void GetNthLevelSubordinates+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         OOIProxyMOList              &amp; proxyMOList,    // OUT
      <br/>
      --         int                          nthLevel,       // IN
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         };
      <br/>
      -- void getBaseToNthLevelSubordinates+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         OOIProxyMOList              &amp; proxyMOList,    // OUT
      <br/>
      --         int                          nthLevel,       // IN
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         };
      <br/>
      -- void getWholeSubtree+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         OOIProxyMOList              &amp; proxyMOList,    // OUT
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         };
      <br/>
      -- // scoped delete
      <br/>
      -- void scopedMDelete+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mmandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // cmis operations, scoped, asynchronous
      <br/>
      -- //
      <br/>
      -- // action
      <br/>
      -- void scopedMActionRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; actionOID,      // IN
      <br/>
      --         const ASN1Type              * actionInfo,         // IN, optional
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- // create
      <br/>
      -- // - there is no scoped create request
      <br/>
      -- // scoped delete
      <br/>
      -- void scopedMDeleteRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- // scoped get: no / one / some / all attributes
      <br/>
      -- void scopedMGetRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- void scopedMGetSomeRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_AttributeIdList  &amp; attrIdList,     // IN
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- void scopedMGetSomeRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_AttributeIdList  &amp; attrIdList,     // IN
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      --         void scopedMGetAllRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- // set
      <br/>
      -- void scopedMSetRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const ASN1Type              * value,              // IN,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_ModifyOperator   &amp; modifyOperator, // IN
      <br/>
      -- // = CMIS_ModifyOperator::replace
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- void scopedMSetToDefaultRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- void scopedMReplaceRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const ANS1Type              &amp; value,          // IN
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- void scopeMAddRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const ANS1Type              &amp; value,          // IN
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- void scopedMRemoveRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const OID                   &amp; attributeOID,   // IN
      <br/>
      --         const ANS1Type              &amp; value,          // IN
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- void scopedMSetSomeRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const CMIS_ObjectClass      &amp; baseMOClass,    // IN, mandatory
      <br/>
      --         const CMIS_ObjectInstance   &amp; baseMOInstance, // IN, mandatory
      <br/>
      --         const CMIS_ModificationList &amp; modificationList, // IN, mand.
      <br/>
      --         const CMIS_Scope            &amp; scope,          // IN, mandatory
      <br/>
      --         const CMIS_Filter           * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync             * synchronization = NULL // IN,
      <br/>
      --  optional
      <br/>
      --         } const;
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- // `generic` CMIS request method
      <br/>
      -- // for specification: check similar methods at proxy agent / OOI request
      <br/>
      --  class
      <br/>
      -- void sendCMISRequest+
      <br/>
      --         OOIStatus                   * ooiStat,            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIRequest                  &amp; requestToken,   // INOUT
      <br/>
      --         const ASN1Type              &amp; cmisRequest,    // IN
      <br/>
      --         OOIReqServicePrimitiveEnum   primitive = CMIS_SP_UNSPECIFIED, // IN
      <br/>
      --         OOIRequest::WaitMode         waitMode        // IN
      <br/>
      -- = OOIRequest::waitUntilPartialReply
      <br/>
      --         } const;
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- // proxy mo -retrieve methods
      <br/>
      -- OOIProxyMO * getObject+
      <br/>
      --         OOIStatus                   * ooiStat,       // OUT, if &lt; &gt; NULL
      <br/>
      --         const CMIS_ObjectInstance   &amp; moInstance
      <br/>
      --         };
      <br/>
      -- // get root managed object
      <br/>
      -- //  is defined as getObject+ distinguishedname = empty local dn };
      <br/>
      -- OOIProxyMO &amp; getRoot+
      <br/>
      --         OOIStatus                   * ooiStat = NULL // OUT, if &lt; &gt; NULL
      <br/>
      --         };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- // set presentationModule (optional feature)
      <br/>
      -- void      setPresentationModule( const OOIPresentationModule *
      <br/>
      --  presentationModule );
      <br/>
      -- / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * *
      <br/>
      --  *
      <br/>
      --  * Name:       setPresentationModule
      <br/>
      --  * Purpose:    associate a proxy agent with a presentation module
      <br/>
      --  * Precond.:   the proxy agent must be in state `unconnected`
      <br/>
      --  * Input:      the presentation module to be associated, usually �= NULL
      <br/>
      --  * Output:     %
      <br/>
      --  * Return:     %
      <br/>
      --  * Errors:     %
      <br/>
      --  * Exceptions: %
      <br/>
      --  * Note:       thanks to the OOI default presentation modules mechanism,
      <br/>
      --  *             you usually don't need this method.
      <br/>
      --  *             Use it, if you need a more restricted presentation module
      <br/>
      --  *             for (some of) your proxy agents.
      <br/>
      --  * Note:       The initial (default) value of the presentation module
      <br/>
      --  *             of a proxy agent is the OOI default presentation module (see
      <br/>
      --  OOIEnv.H).
      <br/>
      --  *             This initial value is set at proxy agent creation time.
      <br/>
      --  *             Using this method, you may change the value of the
      <br/>
      --  *             presentation module afterwards. (You may even reset it to
      <br/>
      --  *             NULL, but this doesn't make much sense.)
      <br/>
      --  *             For a connect, a value �= NULL is required.
      <br/>
      --  * Note:       Any errors related to inability to create a OM workspace
      <br/>
      --  *             and/or load OH packages are not detected in here, but during
      <br/>
      --  *             proxy agent connect( ).
      <br/>
      --  *
      <br/>
      --  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * */
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- virtual void connect+
      <br/>
      --         OOIStatus                   * ooiStat = NULL // OUT, if &lt; &gt; NULL
      <br/>
      --         };
      <br/>
      -- virtual void disconnect+
      <br/>
      --         OOIStatus                   * ooiStat = NULL // OUT, if &lt; &gt; NULL
      <br/>
      --         };
      <br/>
      -- virtual OOIStatus reset+
      <br/>
      --         OOIBoolean                   resetSessionControls = false,
      <br/>
      --         OOIBoolean                   resetDefaultContext = false
      <br/>
      --         };
      <br/>
      -- // dump operation, for debugging
      <br/>
      -- virtual void     dump+ ostream&amp; os, OOIBoolean withData } const;
      <br/>
      -- void             dumpRequestQueue+ ostream&amp; os, OOIBoolean withData }
      <br/>
      --  const;
      <br/>
      -- void             dumpCompletedQueue+ ostream&amp; os, OOIBoolean withData }
      <br/>
      --  const;
      <br/>
      -- // wait, poll methods
      <br/>
      -- void wait+
      <br/>
      --           OOIStatus              * ooiStat,      // out, if &lt; &gt; NULL
      <br/>
      --           OOIWaitStatus          &amp; waitStatus, // out
      <br/>
      --           OOIGenericQueue       ** queue,             // out, if &lt; &gt; NULL
      <br/>
      --           OOIGenericQueueElement ** element,           // out, if &lt; &gt; NULL
      <br/>
      --           long                    maxMilliSecondsToWait = -1
      <br/>
      --         };
      <br/>
      -- void poll +
      <br/>
      --           OOIStatus              *ooiStat,       // out, if &lt; &gt; NULL
      <br/>
      --           OOIWaitStatus          &amp; waitStatus, // out
      <br/>
      --           OOIGenericQueue       ** queue,             // out, if &lt; &gt; NULL
      <br/>
      --           OOIGenericQueueElement ** element            // out, if &lt; &gt; NULL
      <br/>
      --         };
      <br/>
      -- protectd:
      <br/>
      --      // class data members
      <br/>
      --      static int  _idCounter; // used for unique proxy agent id's
      <br/>
      --      int         _id;        // each proxy agent has a unique `id`
      <br/>
      --                              // (mainly for debugging &amp; use of ordered
      <br/>
      --  collections
      <br/>
      --      Kind        _kind;
      <br/>
      --      // queue data members
      <br/>
      --      OOINotificationQueue * _notificationQueue; // maybe NULL --&gt; no
      <br/>
      --  monitoring role
      <br/>
      --      OOIIndicationQueue *_indicationQueue; // maybe NULL --&gt; no agent role
      <br/>
      --      OOIRequestQueue     _requestQueue;
      <br/>
      --      OOIRequestQueue     _completedQueue;
      <br/>
      --      // connection info related data members
      <br/>
      --      OOIPresentationModule *_presentationModule;
      <br/>
      --      CMIS_Session          _session;
      <br/>
      --      OM_private_object     _XMPSession;   // the XMP session bound for this
      <br/>
      --  PA
      <br/>
      --      OOIBoolean            _XMPActivated; // used for mp_wait/mp_receive
      <br/>
      --      OOIBoolean            _isConnected;
      <br/>
      --      CMIS_PAContext        _defaultContext;
      <br/>
      --      // some useful vars:
      <br/>
      --      // the `actual class` OID
      <br/>
      --      static
      <br/>
      --      OOIOID                _actualClassOID;
      <br/>
      --      static
      <br/>
      --      CMIS_ObjectClass     * _actualClassMOC;
      <br/>
      --      // empty attribute id list
      <br/>
      --      static
      <br/>
      --      CMIS_AttributeIdList * _amptyAttribureIdList;
      <br/>
      -- };
      <br/>
      -- //
    </p>
    <p num="214">
      --  **************************************************************************
      <br/>
      -- **
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- **
      <br/>
      -- class OOIProxyAgentDA0 : public OOIProxyAgentXX +
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, see below
      <br/>
      --        // OOIProxyAgentDA0( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIProxyAgentDA0&amp; operator=+ const OOIProxyAgentDA0&amp; rhs };
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        // includes automatic disconnect (if necessary)
      <br/>
      --        virtual .asterisk-pseud.OOIProxyAgentDA0( );
      <br/>
      --        // initialization constructors
      <br/>
      --        OOIProxyAgentDA0+
      <br/>
      --                  OOINotificationQueue        * notificationQueue = NULL //
      <br/>
      --  IN, if NULL--&gt;none
      <br/>
      --               ,    OOIIndicationQueue          * indicationQueue  = NULL //
      <br/>
      --  IN, if NULL--&gt;none
      <br/>
      --                    };
      <br/>
      --        OOIProxyAgentDA0+
      <br/>
      --                  const CMIS_Title            &amp; requestorTitle,
      <br/>
      --                  const CMIS_PresentationAddress * requestorAddress,
      <br/>
      --                  OOINotificationQueue        * notificationQueue = NULL //
      <br/>
      --  IN, if NULL--&gt;none
      <br/>
      --               ,    OOIIndicationQueue          * indicationQueue  = NULL //
      <br/>
      --  IN, if NULL--&gt;none
      <br/>
      -- / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * *
      <br/>
      --  *
      <br/>
      --       * Name:       initialization constructor
      <br/>
      --       * Purpose:    allocate proxy agent - direct-addressing
      <br/>
      --       * Input:      indicationQueue:   may be NULL
      <br/>
      --       *             notificationQueue: may be NULL
      <br/>
      --       * Output:     %
      <br/>
      --       * Return:     %
      <br/>
      --       * Errors:     %
      <br/>
      --       * Exceptions: %
      <br/>
      --       * Note:       the queues are `linked` in, not copied.
      <br/>
      Then they are
      <br/>
      --  `owned`
      <br/>
      --       *             by the proxy agent, and will usually be deleted
      <br/>
      --  automatically when the
      <br/>
      --       *             proxy agent itself is deleted: see proxyAgentDeleted( )
      <br/>
      --  callback.
      <br/>
      --       *
      <br/>
      --       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * */
      <br/>
      --      // note:  the first `connect` is just a redeclaration of the inherited
      <br/>
      --  `connect`
      <br/>
      --      //        in order to prevent `hiding` of the first one by the second
      <br/>
      --  `connect`
      <br/>
      --      virtual void connect+
      <br/>
      --              OOIStatus                   * ooiStat = NULL // OUT, if &lt; &gt;0
      <br/>
      --  NULL
      <br/>
      --      };
      <br/>
      --      virtual void connect+
      <br/>
      --              OOIStatus                   * ooiStat,         // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --              const CMIS_Title            &amp; responderTitle,
      <br/>
      --             const CMIS_PresentiationAddress * responderAddress = NULL };
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- **
      <br/>
      -- class OOIProxyAgentDA : public OOIProxyAgentDA0 +
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, disabled
      <br/>
      --        OOIProxyAgentDA( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIProxyAgentDA( const OOIRequest&amp; rhs );
      <br/>
      --        // standard assignment operator, disabled
      <br/>
      --        OOIProxyAgentDA&amp; operator=( const OOIProxyAgetnDA&amp; rhs );
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIProxyAgentDA( )
      <br/>
      --        // initialization constructor
      <br/>
      --        OOIProxyAgentDA(
      <br/>
      --                  const CMIS_Title            &amp; requestorTitle,
      <br/>
      --                  const CMIS_PresentationAddress * requestorAddress = NULL
      <br/>
      --                  };
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- **
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- **
      <br/>
      -- class OOIProxyAgentNDA0 : public OOIProxyAgentXX +
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, see below
      <br/>
      --        //OOIProxyAgentNDA0( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIProxyAgentNDA0&amp; operator=( const OOIProxyAgentNDA0&amp; rhs );
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        // includes automatic disconnect (if necessary)
      <br/>
      --        virtual .asterisk-pseud.OOIProxyAgentNDA0() :
      <br/>
      --        // initialization constructors
      <br/>
      --        // 1: create PA
      <br/>
      --        // (but don't connect to communications infrastructure
      <br/>
      --        // set requestorTitle first, then call connect( ))
      <br/>
      --        OOIProxyAgentNDA0+
      <br/>
      --                 OOINotificationQueue * notificationQueue = NULL // IN, if
      <br/>
      --  NULL--&gt;none
      <br/>
      --                , OOIIndicationQueue * indicationQueue = NULL // IN, if
      <br/>
      --  NULL--&gt;none
      <br/>
      --                  };
      <br/>
      --        // 2: create PA &amp; set requestor title
      <br/>
      --        // (but don't connect to communications infrastructure, use connect(
      <br/>
      --  ) explicitly)
      <br/>
      --        OOIProxyAgentNDA0+
      <br/>
      --                     const CMIS_Title       &amp; requestorTitle,
      <br/>
      --                     const CMIS_PresentationAddress  * requestorAddress =
      <br/>
      --  NULL,
      <br/>
      --                     OOINotificationQueue  * notificationQueue = NULL // IN,
      <br/>
      --  if NULL--&gt;none
      <br/>
      --                    , OOIIndicationQueue        * indicationQueue  = NULL //
      <br/>
      --  IN, if NULL--&gt;none
      <br/>
      --                      };
      <br/>
      --      / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --       *
      <br/>
      --       * Name:       initialization constructor
      <br/>
      --       * Purpose:    allocate proxy agent - direct-addressing
      <br/>
      --       * Input:      indicationQueue:   may be NULL
      <br/>
      --       *             notificationQueue: may be NULL
      <br/>
      --       * Output:     %
      <br/>
      --       * Return:     %
      <br/>
      --       * Errors:     %
      <br/>
      --       * Exceptions: %
      <br/>
      --       * Note:       the queues are `linked` in, not copied.
      <br/>
      Then they are
      <br/>
      --  `owned`
      <br/>
      --       *             by the proxy agent, and will usually be deleted
      <br/>
      --  automatically when the
      <br/>
      --       *             proxy agent itself is deleted: see proxyAgentDeleted( )
      <br/>
      --  callback.
      <br/>
      --       *
      <br/>
      --       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * */
      <br/>
      --      // connect to / disconnect from communications infrastructure
      <br/>
      --      //virtual void connect(
      <br/>
      --      //   OOIStatus                   * ooiStat             // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --      //   }; is inheritied
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- **
      <br/>
      -- class OOIProxyAgentDNA : public OOIProxyAgentDA0 +
      <br/>
      --      //
      <br/>
      --      // standard constructors/destructors
      <br/>
      --      //
      <br/>
      --  private:
      <br/>
      --      // default constructor, see below
      <br/>
      --      //OOIProxyAgetnNDA( );
      <br/>
      --      // copy constructor, disabled
      <br/>
      --      OOIProxyAgentNDA( const OOIRequest&amp; rhs );
      <br/>
      --      // standard assignment operator, disabled
      <br/>
      --      OOIProxyAgentNDA &amp; operator=( const OOIProxyAgentNDA&amp; rhs );
      <br/>
      --  public:
      <br/>
      --      // destructor
      <br/>
      --      virtual .asterisk-pseud.OOIProxyAgentNDA( );
      <br/>
      --      // initialization constructors
      <br/>
      --      // 1: create PA
      <br/>
      --      // (but don't connect to communications infrastructure
      <br/>
      --      // first you have to set requestorTitle, then call connect( ))
      <br/>
      --      OOIProxyAgentNDA+
      <br/>
      --                  OOIIndicationQueue * indicationQueue = NULL // IN, if
      <br/>
      --  NULL--&gt;none
      <br/>
      --                   };
      <br/>
      --      // 2: create PA &amp; set requestor title
      <br/>
      --      // (but don't connect to communications infrastructure, use connect( )
      <br/>
      --  explicitly)
      <br/>
      --      OOIProxyAgentNDA+
      <br/>
      --                const CMIS_Title         &amp; requestorTitle,
      <br/>
      --                const CMIS_PresentationAddress * requestorAddress = NULL
      <br/>
      --               , OOIIndicationQueue           * indicationQueue  = NULL  //
      <br/>
      --  IN, if NULL--&gt;none
      <br/>
      --                };
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- **
      <br/>
      -- -endif
    </p>
    <p num="215">
      --
      <br/>
      -- Listing 2: Queues Used by Proxy Agent Objects
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ***/
      <br/>
      -- /**                                                                   */
      <br/>
      -- /**    Licensed Materials - Property of IBM                           */
      <br/>
      -- /**                                                                   */
      <br/>
      -- /**    5799-QLN                                                       */
      <br/>
      -- /**                                                                   */
      <br/>
      -- /**    .COPYRGT. Copyright IBM Corporation 1995                          */
      <br/>
      -- /**                                                                   */
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ***/
      <br/>
      -- /*
      <br/>
      --  * RCS LOG:
      <br/>
      --  *
      <br/>
      --  * $Log:   OOIQueues.H,v $
      <br/>
      --  *
      <br/>
      --  */
      <br/>
      -- -ifndef _OOI_QUEUES_INCLUDED--
      <br/>
      -- -define _OOI_QUEUES_INCLUDED--
      <br/>
      -- -include "OOI.XMP.H"
      <br/>
      -- -include "CMIS.ALL.H"
      <br/>
      -- -include "OOIErrors.H"
      <br/>
      -- -include "OOIMeta.ALL.H"
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- // extern:
      <br/>
      -- class OOIProxyAgentXX;
      <br/>
      -- class OOIProxyMO;
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- class OOIGenericQueue;
      <br/>
      -- class OOIRequest;
      <br/>
      -- class OOINotificationQueue;
      <br/>
      -- class OOIIndicationQueue;
      <br/>
      -- class OOIRequestQueue;   // request or completed queue
      <br/>
      -- class OOIGenericQueueElement;
      <br/>
      -- class OOIGenericDataElement;
      <br/>
      -- class OOIResponse;
      <br/>
      -- class OOIIndicationOrNotification;
      <br/>
      -- class OOINotification;
      <br/>
      -- class OOIGenericNotification;
      <br/>
      -- class OOIIndication;
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- // misc. lists holding pointers to some ooi object:
      <br/>
      -- -include &lt;iseq.h&gt;
      <br/>
      -- -include &lt;ieqseq.h&gt;
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- // OOIGenericQueueElementList:
      <br/>
      -- //
      <br/>
      -- //  the elements of such a list are either:
      <br/>
      -- //  - individual (partial) responses for one specific request
      <br/>
      -- //  - individual indications
      <br/>
      -- //  - individual notifications
      <br/>
      -- //  - requests, as part of the requestQueue or the completeQueue
      <br/>
      -- typedef IEqualitySequence&gt; OOIGenericQueueElement* &gt;
      <br/>
      --  OOIGenericQueueElementList;
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- //     `cmis request related service primitives`
      <br/>
      -- //
      <br/>
      -- enum OOIRegServicePrimitiveEnum +
      <br/>
      --      CMIS_SP_GET_REQ                = 40,
      <br/>
      --      CMIS_SP_GET_RSP                ,
      <br/>
      --      CMIS_SP_SET_REQ                ,
      <br/>
      --      CMIS_SP_SET_RSP                ,
      <br/>
      --      CMIS_SP_ACTION_REQ             ,
      <br/>
      --      CMIS_SP_ACTION_RSP             ,
      <br/>
      --      CMIS_SP_CREATE_REQ             ,
      <br/>
      --      CMIS_SP_CREATE_RSP             ,
      <br/>
      --      CMIS_SP_DELETE_REQ             ,
      <br/>
      --      CMIS_SP_DELETE_RSP             ,
      <br/>
      --      CMIS_SP_EVENT_REPORT_REQ       ,
      <br/>
      --      CMIS_SP_EVENT_REPORT_RSP       ,
      <br/>
      --      CMIS_SP_CANCEL_GET_REQ         ,
      <br/>
      --      CMIS_SP_CANCEL_GET_RSP         ,
      <br/>
      --      CMIS_SP_UNSPECIFIED            = 99
      <br/>
      --      };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- //     `cmis response related service primitives`
      <br/>
      -- //
      <br/>
      -- //   + based on XMP: mp_receive primitive_return values }
      <br/>
      -- enum OOIRcvServicePrimitiveEnum +
      <br/>
      --      CMIS_SP_GET_IND                  = MP_GET_IND         ,
      <br/>
      --      CMIS_SP_GET_CNF                  = MP_GET_CNF         ,
      <br/>
      --      CMIS_SP_GET_ERROR                = 20,
      <br/>
      --      CMIS_SP_SET_IND                  = MP_SET_IND         ,
      <br/>
      --      CMIS_SP_SET_CNF                  = MP_SET_CNF         ,
      <br/>
      --      CMIS_SP_SET_ERROR                = 21,
      <br/>
      --      CMIS_SP_ACTION_IND               = MP_ACTION_IND      ,
      <br/>
      --      CMIS_SP_ACTION_CNF               = MP_ACTION_CNF      ,
      <br/>
      --      CMIS_SP_ACTION_ERROR             = 22,
      <br/>
      --      CMIS_SP_CREATE_IND               = MP_CREATE_IND      ,
      <br/>
      --      CMIS_SP_CREATE_CNF               = MP_CREATE_CNF      ,
      <br/>
      --      CMIS_SP_DELETE_IND               = MP_DELETE_IND      ,
      <br/>
      --      CMIS_SP_DELETE_CNF               = MP_DELETE_CNF      ,
      <br/>
      --      CMIS_SP_DELETE_ERROR             = 24,
      <br/>
      --      CMIS_SP_EVENT_REPORT_IND         = MP_EVENT_REPORT_IND ,
      <br/>
      --      CMIS_SP_EVENT_REPORT_CNF         = MP_EVENT_REPORT_CNF ,
      <br/>
      --      CMIS_SP_CANCEL_GET_IND           = MP_CANCEL_GET_IND  ,
      <br/>
      --      CMIS_SP_CANCEL_GET_CNF           = MP_CANCEL_GET_CNF  ,
      <br/>
      --      CMIS_SP_PROCESSING_FAILURE          = 27,
      <br/>
      --      CMIS_SP_SERVICE_ERROR               = 28,
      <br/>
      --      CMIS_SP_NONSERVICE_ERROR            = 33
      <br/>
      -- //CMIS_SP_COMMUNICATIONS_ERROR          = 29, is covered by
      <br/>
      --  CMIS_SP_NONSERVICE_ERROR
      <br/>
      -- //CMIS_SP_LIBRARY_ERROR                 = 30, "
      <br/>
      -- //CMIS_SP_SYSTEM_ERROR                  = 3  "
      <br/>
      --      };
      <br/>
      -- //
      <br/>
      -- // class OOIRcvServicePrimitive:
      <br/>
      -- //
      <br/>
      -- // encapsulates the service primitives from above into
      <br/>
      -- // a `class`, providing categorization &amp; asString( ) methods
      <br/>
      -- //
      <br/>
      -- class OOIRcvServicePrimitive +
      <br/>
      --  private:
      <br/>
      --      OOIRcvServicePrimitiveEnum  _primitive;
      <br/>
      --  public:
      <br/>
      --      // constructor &amp; destructor
      <br/>
      --      OOIRcvServicePrimitive( );
      <br/>
      --      OOIRcvServicePrimitive+ OOIRcvServicePrimitiveEnum primitive };
      <br/>
      --      virtual .asterisk-pseud.OOIRcvServicePrimitive( );
      <br/>
      --      // assignment &amp; cast
      <br/>
      --      OOIRcvServicePrimitive&amp; operator=+ OOIRcvServicePrimitiveEnum
      <br/>
      --  primitive };
      <br/>
      --      operator int( ) const;
      <br/>
      --      // operator OOIRcvServicePrimitiveEnum( ) const; no, (int) is enough
      <br/>
      --      void setFromInteger( int i );
      <br/>
      --      OOIString   asString( ) const;
      <br/>
      --      OOIBoolean  isErrorPrimitive( ) const;
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- // class OOIGenericQueue
      <br/>
      -- //
      <br/>
      -- // abstract base class for all queue types employed in the ooi:
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //     _queueId:            each queue has a unique `id`
      <br/>
      -- //                          - enabling use of ordered collections
      <br/>
      -- //                          - useful for debugging
      <br/>
      -- //
      <br/>
      -- //     _queueType:          + requestQueue, responseQueue,
      <br/>
      --  notificationQueue }
      <br/>
      -- //
      <br/>
      -- //     _numberOfElementsReceived: statistical information about number of
      <br/>
      --  elements
      <br/>
      -- //                               `received`/`contained` in this queue so
      <br/>
      --  far
      <br/>
      -- //                               (even if these elements have already been
      <br/>
      --  pulled out)
      <br/>
      -- //
      <br/>
      -- //     _proxyAgentReference: the proxy Agent to which this queue belongs
      <br/>
      -- //
      <br/>
      -- //                          always &lt; &gt; NULL for - indicationQueues
      <br/>
      -- //                                             - notificationQueues
      <br/>
      -- //                                             - requestQueues
      <br/>
      --  (&amp;completedQueues)
      <br/>
      -- //                          may be NULL for    - responses
      <br/>
      -- //                                             - request objects not in any
      <br/>
      --  queue
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //     _elementList;        generic list to store the elements
      <br/>
      -- //                          + requests, respones, notifications . . . }
      <br/>
      -- //                          dependent on the queue type
      <br/>
      -- //
      <br/>
      -- //     _numberOfElements:   current number of elements in the queue
      <br/>
      -- //                          basically equal to
      <br/>
      --  `elementList.numberOfElements( )`
      <br/>
      -- //                          but stored explicitly to ease debugging
      <br/>
      -- //
      <br/>
      -- class OOIGenericQueue +
      <br/>
      --  friend class OOI;
      <br/>
      --  friend class OOIGenericQueueElement;
      <br/>
      --  friend class OOIGenericQueueDataElement;
      <br/>
      --  friend class OOIResponse;
      <br/>
      --  friend class OOIIndication;
      <br/>
      --  friend class OOIRequest;
      <br/>
      --  friend class OOINotification;
      <br/>
      --  friend class OOIIndicationOrNOtification;
      <br/>
      --  public:
      <br/>
      --      // queue type
      <br/>
      --      enum OOIQueueType +
      <br/>
      --        requestQueue,
      <br/>
      --        responseQueue,
      <br/>
      --        notificationQueue,
      <br/>
      --        indicationQueue,
      <br/>
      --        dummyQueue = 99   // dummy last entry
      <br/>
      --        };
      <br/>
      --      //
      <br/>
      --      // class for Cursor:
      <br/>
      --      //
      <br/>
      --      class Cursor : public OOIGenericQueueElementList::Cursor
      <br/>
      --      +
      <br/>
      --        public:
      <br/>
      --        // constructor
      <br/>
      --        Cursor+ const OOIGenericQueue&amp; queue };
      <br/>
      --        //
      <br/>
      --        // cursor functions
      <br/>
      --        //
      <br/>
      --        // OOIGenericQueueElement &amp; element( ) const; defined automatically
      <br/>
      --      };
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, disabled
      <br/>
      --        OOIGenericQueue( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIGenericQueue+ const OOIGenericQueue&amp; rhs };
      <br/>
      --        // standard assignment operator, disabled
      <br/>
      --        OOIGenericQueue&amp; operator=+ const OOIGenericQueue&amp; rhs };
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIGenericQueue( );
      <br/>
      --      protected:
      <br/>
      --        // initialization constructor
      <br/>
      --        OOIGenericQueue+
      <br/>
      --                       OOIQueueType           queueType,
      <br/>
      --                       const OOIProxyAgentXX * proxyAgentReference
      <br/>
      --                       };
      <br/>
      --        / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * * *
      <br/>
      --         *
      <br/>
      --         * Name:       initializatoin constructor
      <br/>
      --         * Purpose:    allocate queue
      <br/>
      --         * Input:      queueType
      <br/>
      --         *      proxyAgentReference: - must be &lt; &gt; NULL for responseQueue
      <br/>
      --         *                         - usually == NULL for indication
      <br/>
      --  Queue/notificationQ
      <br/>
      --         *                    --&gt; automatically set afterwards by proxy
      <br/>
      --  agent constructor
      <br/>
      --         *                        (which is usually called shortly
      <br/>
      --  afterwards)
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     %
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       %
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --      public:
      <br/>
      --        // data member access methods
      <br/>
      --        // queue_type
      <br/>
      --        OOIQueueType               queueType( ) const;
      <br/>
      --        // queue id
      <br/>
      --        int                        queueId( ) const;
      <br/>
      --        // reference to agent
      <br/>
      --        OOIProxyAgentXX           * proxyAgentReference( ) const;
      <br/>
      --        // current number of elements in queue
      <br/>
      -- int                             numberOfElements( ) const;
      <br/>
      --        // total number of elements received so far
      <br/>
      --        int                        numberOfElementsReceived( ) const;
      <br/>
      --        // access to queue
      <br/>
      --        OOIGenericQueueElementList &amp; elementList( ) const;
      <br/>
      --        OOIGenericQueueElement    * lookupElementByInvokeId( int invokeId )
      <br/>
      --  const;
      <br/>
      --        // may return NULL
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void          dump+ ostream&amp; os, OOIBoolean withData }
      <br/>
      --  const;
      <br/>
      --        // data members
      <br/>
      --      protected:
      <br/>
      --        static int         _idCounter;   // used for unique queue id's
      <br/>
      --        int                _queueId;     // each queue has a unique `id`
      <br/>
      --                                         // (mainly for debugging &amp; use of
      <br/>
      --  ordered collections
      <br/>
      --        OOIQueueType       _queueType;
      <br/>
      --        int                _numberOfElementsReceived; // so far (altogether)
      <br/>
      --        OOIProxyAgentXX *  _proxyAgentReference;
      <br/>
      --        int                _numberOfElements; //     current number of
      <br/>
      --  elements
      <br/>
      --                                              // ==
      <br/>
      --  _elementList.numberOfElements
      <br/>
      --                                              //     stored explicitly to
      <br/>
      --  ease debugging
      <br/>
      --                                              //     (it is too difficult to
      <br/>
      --  look inside templates . . .)
      <br/>
      --        OOIGenericQueueElementList  _elementList;
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // class OOIGenericQueueElement
      <br/>
      -- //
      <br/>
      -- // abstract base class for all queue elements, e.g.
      <br/>
      -- //
      <br/>
      -- // - requests
      <br/>
      -- // - responses
      <br/>
      -- // - notifications
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //     _elementId:      each queue element has a unique `id`
      <br/>
      -- //                      - enabling use of ordered collections
      <br/>
      -- //                      - useful for debugging
      <br/>
      -- //
      <br/>
      -- //     _elementKind:    + request, response, notification . . . }
      <br/>
      -- //
      <br/>
      -- //     _queueReference: reference to queue this element is contained in
      <br/>
      -- //                      + &lt; &gt; NULL, as long as the element is inside a
      <br/>
      --  queue }
      <br/>
      -- //
      <br/>
      -- //     _invokeId:       invoke id of request, notification, . . .
      <br/>
      -- //                      not used for responses / linked id's are not stored
      <br/>
      -- //
      <br/>
      -- class OOIGenericQueueElement +
      <br/>
      --      friend class OOI;
      <br/>
      --      friend class OOIGenericQueue;
      <br/>
      --      friend class OOIRequest;
      <br/>
      --      friend class OOINotificationQueue;
      <br/>
      --      friend class OOIIndicationQueue;
      <br/>
      --      public:
      <br/>
      --        // element kind
      <br/>
      --        enum Kind +
      <br/>
      --         request,
      <br/>
      --         response,
      <br/>
      --         notification,
      <br/>
      --         indication,
      <br/>
      --         dummyKind = 99
      <br/>
      --         };
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, disabled
      <br/>
      --        OOIGenericQueueElement( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIGenericQueueElement+ const OOIGenericQueueElement&amp; rhs };
      <br/>
      --        // standard assignment operator, disabled
      <br/>
      --        OOIGenericQueueElement&amp; operator=+ const OOIGenericQueueElement&amp; rhs
      <br/>
      --  };
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIGenericQueueElement( );
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --      protected:
      <br/>
      --        // initialization constructor
      <br/>
      --        OOIGenericQueueElement+
      <br/>
      --                             Kind                   elementKind
      <br/>
      --                              };
      <br/>
      --        OOIGenericQueueElement+
      <br/>
      --                             Kind                   elementKind,
      <br/>
      --                             const OOIGenericQueue * queueReference,
      <br/>
      --                             int                    invokeId
      <br/>
      --                             };
      <br/>
      --        void set+        const OOIGenericQueue * queueReference,
      <br/>
      --                              int                    invokeId
      <br/>
      --                              };
      <br/>
      --      public:
      <br/>
      --        // data member access methods
      <br/>
      --        // element id
      <br/>
      --        int                     elementId( ) const;
      <br/>
      --        // element kind
      <br/>
      --        OOIGenericQueueElement::Kind elementKind( ) const;
      <br/>
      --        // reference to own queue
      <br/>
      --        OOIGenericQueue       * queueReferenceGeneric( ) const;
      <br/>
      --        // inovke-id
      <br/>
      --        int                     invokeId( ) const;
      <br/>
      --      public:
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        vitual void           dump+ ostream&amp; os, OOIBoolean withData }
      <br/>
      --  const;
      <br/>
      --      protected:
      <br/>
      --        // class data members
      <br/>
      --        static int         _idCounter; // used for unique queue element id's
      <br/>
      --        int                _elementKind; // each queue element has a
      <br/>
      --  globally unique `id`
      <br/>
      --                                        // (mainly for debugging &amp; use of
      <br/>
      --  ordered collections
      <br/>
      --        Kind               _elementKind; // request, response, notification
      <br/>
      --  . . .
      <br/>
      --        OOIGenericQueue  * _queueReference;
      <br/>
      --        int                _invokeId; // (no linked id's stored)
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- // class OOIGenericQueueDataElement
      <br/>
      -- //
      <br/>
      -- // abstract class, inherited from OOIGenericQueueElement, used for
      <br/>
      -- //
      <br/>
      -- // - notifications
      <br/>
      -- // - responses
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //     _primitive: CMIS_SP_GET_IND, CMIS_SP_EVENT_REPORT_IND etc.
      <br/>
      -- //
      <br/>
      -- //     _status:    represent error information in case of
      <br/>
      -- //                 `responses` containing
      <br/>
      -- //                 CMIS_SP_SERVICE_ERROR
      <br/>
      -- //                 CMIS_SP_NONSERVICE_ERROR
      <br/>
      -- //
      <br/>
      -- //     _data:      represent received `data`
      <br/>
      -- //
      <br/>
      -- // either `data` or `status` is set.
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // the _primitive indicates what was received:
      <br/>
      -- //
      <br/>
      -- //  note that in case of a linked reply, the linked reply data structure
      <br/>
      -- // (CMIS_LinkedReplyArgument) is automatically broken up, and the actual
      <br/>
      --  data
      <br/>
      -- // (e.g. CMIS_GetArgument) is stored here.
      <br/>
      -- //
      <br/>
      -- // OOIRcvServicePrimitive           status        data
      <br/>
      -- //
      <br/>
      -- // CMIS_SP_GET_IND                  SUCCESS       CMIS_GetArgument
      <br/>
      -- // CMIS_SP_GET_CNF                  SUCCESS       CMIS_GetArgument
      <br/>
      -- // CMIS_SP_GET_ERROR             (L)  SUCCESS       CMIS_GetListError
      <br/>
      -- // CMIS_SP_SET_IND                    SUCCESS       CMIS_SetArgument
      <br/>
      -- // CMIS_SP_SET_CNF                    SUCCESS       CMIS_SetArgument
      <br/>
      -- // CMIS_SP_SET_ERROR             (L)  SUCCESS       CMIS_SetListError
      <br/>
      -- // CMIS_SP_ACTION_IND                 SUCCESS       CMIS_ActionArgument
      <br/>
      -- // CMIS_SP_ACTION_CNF                 SUCCESS       CMIS_ActionArgument
      <br/>
      -- // CMIS_SP_ACTION_ERROR          (L)  SUCCESS       CMIS_ActionError
      <br/>
      -- // CMIS_SP_CREATE_IND                 SUCCESS       CMIS_CreateArgument
      <br/>
      -- // CMIS_SP_CREATE_CNF                 SUCCESS       CMIS_CreateArgument
      <br/>
      -- // CMIS_SP_DELETE_IND                 SUCCESS       CMIS_DeleteArgument
      <br/>
      -- // CMIS_SP_DELETE_CNF                 SUCCESS       CMIS_DeleteArgument
      <br/>
      -- // CMIS_SP_DELETE_ERROR          (L)  SUCCESS       CMIS_DeleteError
      <br/>
      -- // CMIS_SP_EVENT_IND                SUCCESS       CMIS_EventReportArgument
      <br/>
      -- // CMIS_SP_EVENT_CNF                SUCCESS       CMIS_EventReportArgument
      <br/>
      -- // CMIS_SP_CANCEL_GET_IND           SUCCESS       CMIS_CancelGetArgument
      <br/>
      -- // (CMIS_SP_CANCEL_GET_CNF)         &lt;is never represented by a
      <br/>
      --  `GenericQueueDataElement`
      <br/>
      -- //
      <br/>
      -- // CMIS_SP_PROCESSING_FAILURE    (L)  SUCCESS       CMIS_ProcessingFailure
      <br/>
      -- //
      <br/>
      -- // CMIS_SP_SERVICE_ERROR              OOICMISError  - (NULL)
      <br/>
      -- // CMIS_SP_NONSERVICE_ERROR           OOIError      - (NULL)
      <br/>
      -- //
      <br/>
      -- // (*) may be of class CMIS-service-error �
      <br/>
      -- // (L) only used when received as part of a linked reply.
      <br/>
      Otherwise, CMIS
      <br/>
      --  reports
      <br/>
      -- //   these errors via a CMIS_SP_SERVICE_ERROR.
      <br/>
      -- //
      <br/>
      -- class OOIGenericQueueDataElement : public OOIGenericQueueElement +
      <br/>
      --      friend class OOI;
      <br/>
      --      friend class OOIGenericQueue;
      <br/>
      --      friend class OOIRequest;
      <br/>
      --      friend class OOINotificationQueue;
      <br/>
      --      friend class OOIIndicationQueue;
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, disabled
      <br/>
      --        OOIGenericQueueDataElement( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIGenericQueueDataElement( const OOIGenericQueueDataElement&amp; rhs );
      <br/>
      --        // standard assignment operator, disabled
      <br/>
      --        OOIGenericQueueDataElement&amp; operator=( const
      <br/>
      --  OOIGenericQueueDataElement&amp; rhs );
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIGenericQueueDataElement( );
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --      protected:
      <br/>
      --        // initialization constructor
      <br/>
      --        OOIGenericQueueDataElement+
      <br/>
      --                      OOIGenericQueueElement::Kind elementKind,
      <br/>
      --                      const OOIGenericQueue   * queueReference,
      <br/>
      --                      OOIRcvServicePrimitive   primitive,
      <br/>
      --                      int                      invokeId,
      <br/>
      --                      OOIError                * error,
      <br/>
      --                      const ASN1Type          * data };
      <br/>
      --        OOIGenericQueueDataElement+
      <br/>
      --                      OOIGenericQueueElement::Kind elementKind,
      <br/>
      --                      OOIRcvServicePrimitive   primitive
      <br/>
      --                      };
      <br/>
      --        void set+ const OOIGenericQueue   * queueReference,
      <br/>
      --                       int                      invokeId,
      <br/>
      --                       OOIError                * error,
      <br/>
      --                       const ASN1Type          * data };
      <br/>
      --      public:
      <br/>
      --        // data member access methods
      <br/>
      --        // primitive
      <br/>
      --        OOIRcvServicePrimitive primitive( ) const;
      <br/>
      --        // data         &amp; status( ) const;
      <br/>
      --        ASN1Type       *&amp; data( ) const;
      <br/>
      --        // operations:
      <br/>
      --        ASN1Type    * unlinkData( ); // unlink data from response object,
      <br/>
      --  may return NULL
      <br/>
      --      public:
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void   dump+ ostream&amp; os, OOIBoolean withData } const;
      <br/>
      --      protected:
      <br/>
      --        // class data members
      <br/>
      --        OOIRcvServicePrimitive   _primitive;
      <br/>
      --        OOIStatus              _status
      <br/>
      --        ASN1Type             * _data;
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- class OOIIndicationQueue : public OOIGenericQueue +
      <br/>
      --      friend class OOI;
      <br/>
      --      friend class OOIProxyAgentXX;
      <br/>
      --      friend class OOIIndication;
      <br/>
      --      //
      <br/>
      --      // class for Cursor:
      <br/>
      --      //
      <br/>
      --      class Cursor : public OOIGenericQueue::Cursor
      <br/>
      --      +
      <br/>
      --        public:
      <br/>
      --        // constructor
      <br/>
      --        Cursor+ const OOIIndicationQueue&amp; queue };
      <br/>
      --        //
      <br/>
      --        // cursor functions
      <br/>
      --        //
      <br/>
      --      };
      <br/>
      --       // class data members
      <br/>
      --      protected:
      <br/>
      --        int            _numberOfOutstandingElements;
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      public:
      <br/>
      --        // default constructor
      <br/>
      --        OOIIndicationQueue( );
      <br/>
      --      private:
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIIndicationQueue&amp; operator=+ const OOIIndicationQueue&amp; rhs };
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIIndicationQueue( );
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --      public:
      <br/>
      --        static OOIIndication &amp; narrow+ const OOIGenericQueueElement *
      <br/>
      --  source};
      <br/>
      --        data member access methods
      <br/>
      --        int numberOfOutstandingElements( ) const;
      <br/>
      --        // queue methods
      <br/>
      --        // reset queue
      <br/>
      --        virtual OOIStatus   reset( );
      <br/>
      --      protected:
      <br/>
      --      // virtual callback methods for specialization in sub classes
      <br/>
      --      virtual void incomingIndicationCallback+
      <br/>
      --                      OOIIndication  * indication
      <br/>
      --                      };
      <br/>
      --      public:
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void     dump( ostream&amp; os, OOIBoolean withData ) const;
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // class OOINotificationQueue
      <br/>
      -- // concrete class, to store notification
      <br/>
      -- //
      <br/>
      -- //  _numberOfOutstandingElements:
      <br/>
      -- //                        number of notifications in this queue, for which
      <br/>
      -- //                        confirmations are outstanding
      <br/>
      -- //
      <br/>
      -- class OOINotificationQueue : public OOIGenericQueue +
      <br/>
      --      friend class OOI;
      <br/>
      --      friend class OOIProxyAgentXX;
      <br/>
      --      friend class OOINotification;
      <br/>
      --      //
      <br/>
      --      // class for Cursor:
      <br/>
      --      //
      <br/>
      --      class Cursor : public OOIGenericQueue::Cursor
      <br/>
      --      +
      <br/>
      --        public:
      <br/>
      --        // constructor
      <br/>
      --        Cursor+ const OOINotificationQueue&amp; queue };
      <br/>
      --        //
      <br/>
      --        // cursor functions
      <br/>
      --        //
      <br/>
      --      };
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      public:
      <br/>
      --        // default constructor
      <br/>
      --        OOINotificationQueue( );
      <br/>
      --      private:
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOINotificationQueue+ const OOINotificationQueue&amp; rhs };
      <br/>
      --        // standard assignment operator, disabled
      <br/>
      --        OOINotificationQueue&amp; operator=+ const OOINotificationQueue&amp; rhs };
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOINotificationQueue( );
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --      public:
      <br/>
      --        static OOINotification * narrow+ const OOIGenericQueueElement *
      <br/>
      --  source};
      <br/>
      --        // data member access methods
      <br/>
      --        int numberOfOutstandingElements( ) const;
      <br/>
      --        // queue methods
      <br/>
      --        // reset queue
      <br/>
      --        virtual OOIStatus   reset( );
      <br/>
      --      protected:
      <br/>
      --        // virtual callback methods for specialization in sub classes
      <br/>
      --        virtual void incomingNotificationCallback+
      <br/>
      --                             OOINotification * notification
      <br/>
      --                             };
      <br/>
      --      public:
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void   dump+ ostream&amp; os, OOIBoolean withData } const;
      <br/>
      --        // class data members
      <br/>
      --      protected:
      <br/>
      --      int                _numberOfOutstandingElements;
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // class OOIRequestQueue:
      <br/>
      -- //
      <br/>
      -- // a request queue contains references to request objects.
      <br/>
      -- //
      <br/>
      -- // each proxy agent has two request queues:
      <br/>
      -- //  1 - a outstanding-request queue
      <br/>
      -- //  2 - a completed-request queue
      <br/>
      -- //
      <br/>
      -- // the request objects in (1) are in state `outstanding`
      <br/>
      -- // whereas the ones in (2) are in state `completed`.
      <br/>
      -- //
    </p>
    <p num="216">
      -- // note that the request objects are not owned by this queue, but
      <br/>
      -- // by the application. +this is different to notification queues}
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // data members:
      <br/>
      -- //  + this queue class does not define any additional data members }
      <br/>
      -- //
      <br/>
      -- class OOIRequestQueue : public OOIGenericQueue +
      <br/>
      --      friend class OOI;
      <br/>
      --      friend class OOIProxyAgentXX;
      <br/>
      --      //
      <br/>
      --      // class for Cursor:
      <br/>
      --      //
      <br/>
      --      class Cursor : public OOIGenericQueue::Cursor
      <br/>
      --      +
      <br/>
      --        public:
      <br/>
      --        // constructor
      <br/>
      --        Cursor+ const OOIRequestQueue&amp; queue };
      <br/>
      --        //
      <br/>
      --        // cursor functions
      <br/>
      --        //
      <br/>
      --      };
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, disabled
      <br/>
      --        OOIRequestQueue( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIRequestQueue+ const OOIRequestQueue&amp; rhs };
      <br/>
      --        // standard assignment operator, disabled
      <br/>
      --        OOIRequestQueue&amp; operator=+ const OOIRequestQueue&amp; rhs };
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIRequestQueue( );
      <br/>
      --        // initialization constructor
      <br/>
      --        OOIRequestQueue+
      <br/>
      --                  const OOIProxyAgentXX   &amp; proxyAgentReference };
      <br/>
      --        / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * * *
      <br/>
      --         *
      <br/>
      --         * Name:       initialization constructor
      <br/>
      --         * Purpose:    allocate queue
      <br/>
      --         * Input:
      <br/>
      --         *             proxyAgentReference: - must be &lt; &gt; NULL for
      <br/>
      --  responseQueue
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     %
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       %
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --      public:
      <br/>
      --        static OOIRequest * narrow+ const OOIGenericQueueElement * source};
      <br/>
      --        // data member access methods
      <br/>
      --        // queue methods
      <br/>
      --      public:
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void     dump+ ostream&amp; os, OOIBoolean withData } const;
      <br/>
      --        // class data members
      <br/>
      --        // (none)
      <br/>
      --      };
      <br/>
      --      //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      --      //
      <br/>
      --      //
      <br/>
      --      // class OOIIndicationOrNotification:
      <br/>
      --      //
      <br/>
      --      // this abstract class inherits from OOIGenericQueueDataElement and is
      <br/>
      --  the base class
      <br/>
      --      // of OOINotification.
      <br/>
      --      //
      <br/>
      --      // data members
      <br/>
      --      //
      <br/>
      --      //     _toBeConfirmed: is this notification (indication) to be
      <br/>
      --  confirmed
      <br/>
      --      //
      <br/>
      --      //     _outstanding:  for notification (indication) to be confirmed:
      <br/>
      --      //                    - true, if not yet confirmed
      <br/>
      --      //                    - false, if already confirmed
      <br/>
      --      //                    for notification (indication) not to be
      <br/>
      --  confirmed:
      <br/>
      --      //                    - false
      <br/>
      --      //                    number of notifications in this queue, for which
      <br/>
      --      //
      <br/>
      --      class OOIIndicationOrNotification : public OOIGenericQueueDataElement
      <br/>
      --      +
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, disabled
      <br/>
      --        OOIIndicationOrNOtification( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIIndicationOrNOtification( const OOIIndicationOrNotification&amp; rhs
      <br/>
      --  );
      <br/>
      --        // standard assignment operator, disabled
      <br/>
      --        OOIIndicationOrNotification&amp; operator=+ const
      <br/>
      --  OOIIndicationOrNotification&amp; ths };
      <br/>
      --      protected:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIIndicationOrNotification( );
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --        // initialization constructor
      <br/>
      --        OOIIndicationOrNotification+
      <br/>
      --                  OOIGenericQueueElement::Kind elementKind,
      <br/>
      --                  const OOIGenericQueue * queueReference,
      <br/>
      --                  OOIRcvServicePrimitive   primitive,
      <br/>
      --                  int                    invokeId,
      <br/>
      --                  OOIBoolean             toBeConfirmed,
      <br/>
      --                  OOIError             * error,
      <br/>
      --                  const ASN1Type       * data };
      <br/>
      --        OOIIndicationOrNotification+
      <br/>
      --                  OOIGenericQueueElement::Kind elementKind,
      <br/>
      --                  OOIRcvServicePrimitive   primitive
      <br/>
      --                  };
      <br/>
      --        void set+ const OOIGenericQueue * queueReference,
      <br/>
      --                       int                    invokeId,
      <br/>
      --        OOIBoolean       toBeConfirmed,
      <br/>
      --        OOIError       * error,
      <br/>
      --        const ASN1Type * data };
      <br/>
      --        // data member access methods
      <br/>
      --      public:
      <br/>
      --        // confirmed/unconfirmed
      <br/>
      --        OOIBoolean            toBeConfirmed( ) const;
      <br/>
      --        // state
      <br/>
      --        OOIBoolean            isOutstanding( ) const;
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void dump+ ostream&amp; os, OOIBoolean withData } const;
      <br/>
      --      protected:
      <br/>
      --        // class data members
      <br/>
      --        OOIBoolean            _toBeConfirmed;
      <br/>
      --        OOIBoolean            _outstanding;
      <br/>
      --      };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- class OOIIndication : public OOIIndicationOrNOtification +
      <br/>
      --      friend class OOIProxyAgentXX;
      <br/>
      --      protected:
      <br/>
      --        // class data members
      <br/>
      --        int            _numberOfReplies;
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, disabled
      <br/>
      --        OOIIndication( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIIndication( const OOIIndication &amp; rhs );
      <br/>
      --        // standard assignment operator disabled
      <br/>
      --        OOIIndication &amp; operator=+ const OOIIndication &amp; rhs };
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIIndication( );
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --      protected:
      <br/>
      --      // initialization constructor
      <br/>
      --      OOIIndication+
      <br/>
      --                      const OOIIndicationQueue * queueReference,
      <br/>
      --                      OOIRcvServicePrimitive   primitive,
      <br/>
      --                      int                     invokeId,
      <br/>
      --                      OOIBoolean              toBeConfirmed,
      <br/>
      --                      OOIError              * error
      <br/>
      --                      const ASN1 Type       * data };
      <br/>
      --      public:
      <br/>
      --        // data member access methods
      <br/>
      --        // reference to own queue
      <br/>
      --        OOIIndicationQueue * queueReference( ) const;
      <br/>
      --        // is scoped request ?  (shortcut for looking into CMIS_xxxArgument)
      <br/>
      --        OOIBoolean       isScoped( ) const;
      <br/>
      --        // reply methods:
      <br/>
      --        // empty reply, e.g. no object selected by scoping
      <br/>
      --        //  use linkedReplyCompleted( )
      <br/>
      --        // simple reply:
      <br/>
      --        //  - one successful reply - unlinked
      <br/>
      --        // or use 0..n time linkedXXXReply( ) and finish wth
      <br/>
      --  linkedReplyCompleted( )
      <br/>
      --        // or use 0..n time linkedXXXReply( ) and finish with error reply (
      <br/>
      --  operation-cancelled)
      <br/>
      --        // or use error reply: reply with CMIS service error (generally not
      <br/>
      --  a linked reply)
      <br/>
      --        void simpleReply+
      <br/>
      --                  OOIStatus          * ooiStat,         // OUT, if &lt; &gt; NULL
      <br/>
      --                  const ASN1Type     &amp; reply };
      <br/>
      -- void linkedReply+
      <br/>
      --                  OOIStatus          * ooiStat,         // OUT, if &lt; &gt; NULL
      <br/>
      --                  const ASN1Type     &amp; reply };
      <br/>
      -- void linkedReplyCompleted+
      <br/>
      --                  OOIStatus          * ooiStat          // OUT, if &lt; &gt; NULL
      <br/>
      --                  };
      <br/>
      -- void errorReply+
      <br/>
      --                  OOIStatus          * ooiStat,         // OUT, if &lt; &gt; NULL
      <br/>
      --                  const OOICMISError &amp; reply };
      <br/>
      --      public:
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void         dump+ ostream&amp; os, OOIBoolean withData } const;
      <br/>
      -- };
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- -include "OOIRequest.H"
      <br/>
      -- -include "OOIResponse.H"
      <br/>
      -- -include "OOINotification.H"
      <br/>
      -- -include "OOIGenericNotification.H"
      <br/>
      -- //
      <br/>
      --  **************************************************************************
      <br/>
      -- ***
      <br/>
      -- -endif
    </p>
    <p num="217">
      --
      <br/>
      -- Listing 3: OOI Request Class
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ****/
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    Licensed Materials - Property of IBM                            */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    5799-QLN                                                        */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    .COPYRGT. Copyright IBM Corporation 1995, 1996
      <br/>
      --  */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ****/
      <br/>
      -- -ifndef _OOI_REQUEST_INCLUDED--
      <br/>
      -- -define _OOI_REQUEST_INCLUDED--
      <br/>
      -- //
      <br/>
      -- // class OOIRequest
      <br/>
      -- //
      <br/>
      -- // instances represent CMIS requests
      <br/>
      -- // these request objects may be contained in a RequestQueue or
      <br/>
      --  CompletedQueue
      <br/>
      -- //  of a proxy agent
      <br/>
      -- // each request object has a response queue
      <br/>
      -- //
      <br/>
      -- // applications may define their own request class inherited from this
      <br/>
      --  class,
      <br/>
      -- // and supply application specific callback logic.
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // data members:
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   CMIS_Mode           _confirmationMode:
      <br/>
      -- //
      <br/>
      -- //      - stores confirmation mode of an outstanding request.
      <br/>
      -- //      - set when the request is issued by the application
      <br/>
      -- //      - information is valid until a request object is `reset` or
      <br/>
      --  `reused` for
      <br/>
      -- //       a different request
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   OOIProxyMO         * _proxyMOReference:
      <br/>
      -- //
      <br/>
      -- //      - used if this request has been initiated via a PMO
      <br/>
      -- //      - references this PMO, otherwise NULL
      <br/>
      -- //      - if the PMO is deleted (or changed), the ooi automatically cares
      <br/>
      --  for
      <br/>
      -- //       resetting this reference to NULL
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   WaitMode            _waitMode:
      <br/>
      -- //
      <br/>
      -- //      - to remember `waitMode` during outstanding call
      <br/>
      -- //      - set when the request is issued by the application
      <br/>
      -- //      - information is valid until a request object is `reset` or
      <br/>
      --  `reused` for
      <br/>
      -- //       a different request
      <br/>
      -- //
      <br/>
      -- //   OOIBoolean          _isScoped;
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //      - to remember whether a request is scoped or unscoped during
      <br/>
      --  outstanding call
      <br/>
      -- //      - set when the request is issued by the application
      <br/>
      -- //      - information is valid until a request object is `reset` or
      <br/>
      --  `reused` for
      <br/>
      -- //       a different request
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   int                 _requestCounter;
      <br/>
      -- //
      <br/>
      -- //      - statistical information about how many requests have been issued
      <br/>
      -- //       using this request object, (may be useful for debugging)
      <br/>
      -- //      - initially 0,
      <br/>
      -- //      - == 1, while first request is outstanding or completed
      <br/>
      -- //      -  &gt; 1, if this request object is reused
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   OOIReqServicePrimitiveEnum _primitive:
      <br/>
      -- //
      <br/>
      -- //      - to remember the service primitive, e.g. CMIS_SP_GET_REQ, during
      <br/>
      --  outstanding call
      <br/>
      -- //      - set when the request is issued by the application
      <br/>
      -- //      - information is valid until a request object is `reset` `reused`
      <br/>
      --  for
      <br/>
      -- //       a different request
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   state               _state:
      <br/>
      -- //
      <br/>
      -- //      - state of this request:  idle, outstanding, or completed
      <br/>
      -- //      - state is related to queue membership:
      <br/>
      -- //        state       request if contained in queue:
      <br/>
      -- //        -idle;      &lt;in no queue&gt;
      <br/>
      -- //        -outstanding &lt;in outstanding-request-queue of a proxy agent&gt;
      <br/>
      -- //        -completed  &lt;in completed-request-queue of a proxy agent&gt;
      <br/>
      -- //        or          &lt;in no queue&gt;
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   CompletionState     _completionState;
      <br/>
      -- //
      <br/>
      -- //      - information about how a request has completed
      <br/>
      -- //      - information is only useful for requests in state `completed`
      <br/>
      -- //      - the `completionStatus` described next is similar, but provides
      <br/>
      --  more
      <br/>
      -- //       detailed information
      <br/>
      -- //      - values:
      <br/>
      -- //          unspecified:     request is not in state `completed`
      <br/>
      -- //          normallyCompleted: successful as specified by protocol /
      <br/>
      --  service interface
      <br/>
      -- //                           (responses were either indicating success or
      <br/>
      --  cmis-errors,
      <br/>
      -- //                           but no other errors)
      <br/>
      -- //          couldNotBeIssued, issuance of request failed
      <br/>
      -- //          abandonedByUser: the user (== the ooi application) has
      <br/>
      --  abandonned the request
      <br/>
      -- //          abortedByProvider: request ended due to broken connection
      <br/>
      -- //
      <br/>
      -- //      - information is valid until a request object is `reset` or
      <br/>
      --  `reused` for
      <br/>
      -- //       a different request
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   OOIStatus           _completionStatus
      <br/>
      -- //
      <br/>
      -- //      - information about how a request has completed, provided via a
      <br/>
      --  `status object`
      <br/>
      -- //      - information is only useful for requests in state `completed`
      <br/>
      -- //      - value:
      <br/>
      -- //          SUCCESS:         only `successful` responses have been
      <br/>
      --  received,
      <br/>
      -- //                           (even no cmis-errors ���)
      <br/>
      -- //          OOICMISError:    for a scoped request several responses have
      <br/>
      --  been received.
      <br/>
      -- //                           Several of them were cmis-errors.)
      <br/>
      -- //          CMISERR_XXX:     (a particular cmis-error)
      <br/>
      -- //                           a single response, containing `this`
      <br/>
      --  cmis-error has
      <br/>
      -- //                           been received
      <br/>
      -- //                           Note the special case of a
      <br/>
      --  CMISERR_OperationCancelled:
      <br/>
      -- //                           Its original purpose in CMIS is to indicate
      <br/>
      --  that processing of
      <br/>
      -- //                           a get request has been terminated due to a
      <br/>
      --  cancel get.
      <br/>
      -- //                           The ooi extends this meaning to all CMIS
      <br/>
      --  requests:
      <br/>
      -- //                           all requests can be abandonned, this `abandon`
      <br/>
      --  is
      <br/>
      -- //                           represented by a completionStatus
      <br/>
      --  `CMISERR_OperationCancelled`.
      <br/>
      -- //          OOIXMPCommunicationsError: request is ended due to
      <br/>
      --  communications error
      <br/>
      -- //          &lt;OTHER ERROR&gt;: internal error or any other application error
      <br/>
      --  during issuance
      <br/>
      -- //                           of the request of processing of responses.
      <br/>
      -- //      - information is valid until a request object is `reset` or
      <br/>
      --  `reused` for
      <br/>
      -- //       a different request
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   int                 _numberOfResultElementsReceived;
      <br/>
      -- //
      <br/>
      -- //      - number of cmis-result (excluding cmis service errors) received
      <br/>
      --  for `this` request
      <br/>
      -- //      - information is valid until a request object is `reset` or
      <br/>
      --  `reused` for
      <br/>
      -- //       a different request
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   int                 _numberOfServiceErrorsReceived;
      <br/>
      -- //
      <br/>
      -- //      - number of cmis-service-error received for `this` request
      <br/>
      -- //      - information is valid until a request object is `reset` or
      <br/>
      --  `reused` for
      <br/>
      -- //       a different request
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      --      int                 _numberOfNonServiceErrorsOccurred
      <br/>
      -- //
      <br/>
      --         - number of errors other than cmis service errors
      <br/>
      -- //      - either `0` or `1`
      <br/>
      -- //      - if `1`, then request is completed with completionState `???`
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   CMIS_PAContext     * _defaultContext
      <br/>
      -- //
      <br/>
      -- //      - a default context may be defined for a request object
      <br/>
      -- //      - this default context overrides the proxy agent default context
      <br/>
      -- //      - this default context may however be overridden by a `single cell
      <br/>
      --  context&gt;
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   CMIS_PAContext     * _actualContext:
      <br/>
      -- //
      <br/>
      -- //      - used to remember context for potential `cancel` of a get req
      <br/>
      -- //      - &lt; &gt; NULL only for outstanding `get-requests`
      <br/>
      -- //      - this mechanism is only enabled when the
      <br/>
      --  OOI::saveGetContextForAbandon switch
      <br/>
      -- //       is turned on.
      <br/>
      Otherwise `actualContext` is ==NULL.
      <br/>
      -- //
      <br/>
      -- class OOIRequest : public OOIGenericQueue, public OOIGenericQueueElement +
      <br/>
      --      friend class OOI;
      <br/>
      --      friend class OOIProxyMO;
      <br/>
      --      public:
      <br/>
      --        // current state of request
      <br/>
      --        enum State +
      <br/>
      --         idle = 0,
      <br/>
      --         outstanding,
      <br/>
      --         completed
      <br/>
      --         };
      <br/>
      --        // wait mode
      <br/>
      --        enum WaitMode +
      <br/>
      --         waitUntilPartialReply = 0,
      <br/>
      --         waitUntilCompletion = 1,
      <br/>
      --         synchronousWait    = 2
      <br/>
      --         };
      <br/>
      --        // completion info
      <br/>
      --        enum CompletionState +
      <br/>
      --         unspecified = 0,
      <br/>
      --         normallyCompleted, // successful as specified by protocol / service
      <br/>
      --  interface
      <br/>
      --         couldNotBeIssued,  // could not be issued
      <br/>
      --         abandonnedByUser,  // by application
      <br/>
      --         abortedByProvider  // connection broken etc
      <br/>
      --         };
      <br/>
      --      //
      <br/>
      --      // class for Cursor:
      <br/>
      --      //
      <br/>
      --      class Cursor : public OOIGenericQueue::Cursor
      <br/>
      --      +
      <br/>
      --        public:
      <br/>
      --        // constructor
      <br/>
      --        Cursor + const OOIRequest&amp; queue };
      <br/>
      --        //
      <br/>
      --        // cursor functions
      <br/>
      --        //
      <br/>
      --      };
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, see below
      <br/>
      --        // OOIRequest( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIRequest+ const OOIRequest&amp; rhs );
      <br/>
      --        // standard assignment operator, disabled
      <br/>
      --        OOIRequest&amp; operator=+ const OOIRequest&amp; rhs };
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIRequest( );
      <br/>
      --        // initialization/default constructor
      <br/>
      --        OOIRequest+
      <br/>
      --                  const OOIProxyAgentXX * proxyAgentReference = NULL,
      <br/>
      --                  const OOIProxyMO      * proxyMOReference = NULL
      <br/>
      --                  };
      <br/>
      --        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --         *
      <br/>
      --         * Name:       initialization constructor
      <br/>
      --         * Purpose:    allocate queue
      <br/>
      --         * Input:
      <br/>
      --         *             proxyAgentReference: - may be NULL
      <br/>
      --         *             proxyMOReference:  - may be NULL
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     %
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       in order to issue requests, proxyAgentReference has
      <br/>
      --  to be &lt; &gt; NULL
      <br/>
      --         *             (when an request is actually to be issued).
      <br/>
      --         *             see also setProxyAgentReference
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --      public:
      <br/>
      --        static OOIResponse * narrow+ const OOIGenericQueueElement * source};
      <br/>
      --        // data member access methods
      <br/>
      --        const CMIS_Mode      &amp; confirmationMode( ) const; // doesn't make
      <br/>
      --  sense for non-outstanding requests
      <br/>
      --        OOIBoolean            toBeConfirmed( ) const; // however, doesn't
      <br/>
      --  cause any error
      <br/>
      --        OOIProxyMO           * proxyMOReference( ) const;
      <br/>
      --        WaitMode              waitMode( ) const;
      <br/>
      --        OOIBoolean            isScoped( ) const;
      <br/>
      --        OOIReqServicePrimitiveEnum primitive( ) const;
      <br/>
      --        // int                invokeId( ) const; (is inherited)
      <br/>
      --        // about the state of the request
      <br/>
      --        State                state( ) const;
      <br/>
      --        OOIString            stateAsString( ) const;
      <br/>
      --        OOIBoolean           isIdle( ) const;
      <br/>
      --        OOIBoolean           isOutstanding( ) const;
      <br/>
      --        OOIBoolean           isCompleted( ) const;
      <br/>
      --        CompletionState      completionState( ) const;
      <br/>
      --        OOIString            completionStateAsString( ) const;
      <br/>
      --        OOIBoolean           isNormallyCompleted( ) const;
      <br/>
      --        OOIBoolean           isCouldNotBeIssued( ) const;
      <br/>
      --        OOIBoolean           isAbandonnedByUser( ) const;
      <br/>
      --        OOIBoolean           isAbortedByProvider( ) const;
      <br/>
      --        const OOIStatus  &amp; completionStatus( ) const;
      <br/>
      --        OOIBoolean           errorOccurred( ) const;
      <br/>
      --        int                  numberOfResultElementsReceived( ) const;
      <br/>
      --        int                  numberOfServiceErrorsReceived( ) const;
      <br/>
      --        int                  numberOfNonServiceErrorsOccurred( ) const;
      <br/>
      --        // methods to update data members
      <br/>
      --        // precondition: request is not in state `outstanding`
      <br/>
      --        void                 setProxyAgentReference+ const OOIProxyAgentXX *
      <br/>
      --  pxyAgent };
      <br/>
      --        void                 setProxyMOReference+ const OOIProxyMO * proxyMO
      <br/>
      --  }; // may be NULL
      <br/>
      --        // context related
      <br/>
      --        const CMIS_PAContext &amp; defaultContext( ) const;
      <br/>
      --        OOIBoolean            hasDefaultContext( ) const;
      <br/>
      --        void                  setDefaultContext( const CMIS_PAContext &amp;
      <br/>
      --  context );
      <br/>
      --        void                 resetDefaultContext( );
      <br/>
      --        // queue methods
      <br/>
      --        // reset queue
      <br/>
      --        virtual OOIStatus  reset( ); // = reset( false, false, false )
      <br/>
      --        OOIStatus reset+
      <br/>
      --                  OOIBoolean                 resetProxyAgentReference,//
      <br/>
      --        OOIBoolean                           resetProxyMOReference, // =
      <br/>
      --  false,
      <br/>
      --        OOIBoolean                           resetDefaultContext // = false
      <br/>
      --        };
      <br/>
      --        virtual void doRequest+
      <br/>
      --                  OOIStatus                 * ooiStat,              // OUT,
      <br/>
      --  if &lt; &gt; NULL
      <br/>
      --                  const OOIProxyMO          * proxyMO,              // IN,
      <br/>
      --  maybe NULL
      <br/>
      --                  const ASN1Type            &amp; cmisRequest,      // IN
      <br/>
      --                  const CMIS_Mode           &amp; confirmationMode  // IN
      <br/>
      --                  const CMIS_PAContext      * singleCallContext = NULL,//
      <br/>
      --  IN, may be NULL
      <br/>
      --                  OOIReqServicePrimitiveEnum  primitive =
      <br/>
      --  CMIS_SP_UNSPECIFIED
      <br/>
      --                  WaitMode                   waitMode =
      <br/>
      --  waitUntilPartialReply };
      <br/>
      --                  };
      <br/>
      --        virtual void doSynchronousRequest+
      <br/>
      --                  OOIStatus                 * ooiStat,              // OUT,
      <br/>
      --  if &lt; &gt; NULL
      <br/>
      --                  const OOIProxyMO          * proxyMO,              // IN,
      <br/>
      --  maybe NULL
      <br/>
      --                  const ASN1Type            &amp; cmisRequest,      // IN
      <br/>
      --        const CMIS_PAContext                * singleCallContext = NULL,//
      <br/>
      --  IN, may be NULL
      <br/>
      --        OOIReqServicePrimitiveEnum           primitive = CMIS_SP_UNSPECIFIED
      <br/>
      --        };
      <br/>
      --        virtual void abandon+
      <br/>
      --                  OOIStatus                 * ooiStat = NULL, // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --                  const CMIS_PAContext      * cancelGetContext = NULL // IN,
      <br/>
      --  may be NULL
      <br/>
      --                  };
      <br/>
      --        void cancel+
      <br/>
      --                  OOIStatus                 * ooiStat,              // OUT,
      <br/>
      --  if &lt; &gt; NULL
      <br/>
      --                  OOIRequest                &amp; cancelRequestToken, // INOUT
      <br/>
      --                  const CMIS_PAContext      * cancelGetContext = NULL // IN,
      <br/>
      --  may be NULL
      <br/>
      --                  } const;
      <br/>
      --        void        wait+
      <br/>
      --                    OOIStatus                 * ooiStat = NULL // OUT, if &lt;
      <br/>
      --  &gt; NULL
      <br/>
      --                    };
      <br/>
      --        virtual void takeOutOfQueue+
      <br/>
      --                  OOIStatus                 * ooiStat = NULL // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --                  };
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       doRequest
      <br/>
      --         * Purpose:
      <br/>
      --         * Input:
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     %
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       %
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       doSynchronousRequest
      <br/>
      --         * Prupose:
      <br/>
      --         * Input:
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     %
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       == doRequest+ confirmed, synchronousWait }
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       abandon
      <br/>
      --         * Purpose:    abandon an active (asynchronous-confirmed) request
      <br/>
      --         * Input:      sendCancelGet: include sending of a cancel get, if
      <br/>
      --  the original
      <br/>
      --                                       request was a get request
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     %
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       has not effect if the request is not outstanding.
      <br/>
      --         * Note:       if the original request was a get-request and if
      <br/>
      --  `sendCancelGet` is true,
      <br/>
      --         *             a cancel-get request if sent.
      <br/>
      However, the
      <br/>
      --  confirmation of the cancel-get
      <br/>
      --         *             will not be returned to the application.
      <br/>
      The request
      <br/>
      --  immediately will
      <br/>
      --         *             change its state to `completed`.
      <br/>
      --         * Note:       the abandonCallback will be invoked
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       cancel
      <br/>
      --         * Purpose:    cancel this outstanding get request by issuing a
      <br/>
      --         *             cancel get request
      <br/>
      --         * Precond.:   `this` request must be a get-request, and outstanding
      <br/>
      --         *             `cancelRequestToken` may not be outstanding
      <br/>
      --         * Input:      cancelRequestToken
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     OOIInvalidRequest etc.
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       this method implements the `normal` CMIS cancel get:
      <br/>
      --         *             As defined by CMIS, the request to be cancelled is
      <br/>
      --  not
      <br/>
      --         *             immediately abandonned.
      <br/>
      Responses can still be
      <br/>
      --  received,
      <br/>
      --         *             until the agent sends the final
      <br/>
      --  CMIS-operation-cancelled service error.
      <br/>
      --         *
      <br/>
      --         *             The `cancelRequestToken` request object is an
      <br/>
      --  `outstanding` request on
      <br/>
      --         *             its own, and will be confirmed by a cancel-get-cnf.
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       takeOutOfQueue
      <br/>
      --         * Purpose:    take a completed request out of the completed queue
      <br/>
      --  (if in there)
      <br/>
      --         * Precond:    request is not in state outstanding
      <br/>
      --         * Input:      %
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     %
      <br/>
      --         * Exceptions: OOIInvalidRequest, if `request` is outstanding
      <br/>
      --         * Note:       %
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --        // equality: two request are equal, only if they are the same object
      <br/>
      --  (--&gt;pointer comparison)
      <br/>
      --        friend int operator==+ const OOIResponse&amp; lhs, const OOIResponse$
      <br/>
      --  rhs };
      <br/>
      --        //
      <br/>
      --        // methods related to responses
      <br/>
      --        // (see also OOIProxyMO)
      <br/>
      --        //
      <br/>
      --        OOIBoolean hasAttribute+
      <br/>
      --                  OOIStatus                 * ooiStat,              // OUT,
      <br/>
      --  if &lt; &gt; NULL
      <br/>
      --                  const OID                 &amp; attributeOID      // IN
      <br/>
      --                  } const;
      <br/>
      --        void receiveAttribute+
      <br/>
      --                  OOIStatus                 * ooiStat               // OUT,
      <br/>
      --  if &lt; &gt; NULL
      <br/>
      --                  const OID                 &amp; attributeOID,     // IN
      <br/>
      --                  ASN1Type                  &amp; result            // OUT
      <br/>
      --                  } const;
      <br/>
      --        ASN1Type * receiveNextAttribute+
      <br/>
      --                  OOIStatus                 * ooiStat               // OUT,
      <br/>
      --  if &lt; &gt; NULL
      <br/>
      --                  OID                       &amp; attributeOID,     // OUT,
      <br/>
      --  conditional
      <br/>
      --                  ASN1Type                  *&amp; attributeError   // OUT, only
      <br/>
      --  if attributeError
      <br/>
      --                  };
      <br/>
      --        ASN1Type * receiveActionReply+
      <br/>
      --                  OOIStatus                 * ooiStat               // OUT,
      <br/>
      --  if &lt; &gt; NULL
      <br/>
      --                  } const;
      <br/>
      --        void receiveActionReply+
      <br/>
      --                  OOIStatus                 * ooiStat,              // OUT,
      <br/>
      --  if &lt; &gt; NULL
      <br/>
      --                  ASN1Type                  * actionReplyData,      // OUT,
      <br/>
      --  conditional
      <br/>
      --                  OOIBoolean                * actionReplyPresence = NULL //
      <br/>
      --  OUT, conditional
      <br/>
      --                  } const;
      <br/>
      --        // unfortunately the `actionReplyDate` parameter can not default to
      <br/>
      --  NULL,
      <br/>
      --        // (would collide with 1st version of this method)
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       hasAttribute
      <br/>
      --         * Purpose:    test, whether a specific attributeValue available
      <br/>
      --         *             if the atttributeValue is part of a cmis error etc,
      <br/>
      --  partial reply error etc.
      <br/>
      --         *             it is nevertheless indicated as present, and may be
      <br/>
      --  retrieved via
      <br/>
      --         *             receiveAttribute.
      <br/>
      This does not hold for attribute
      <br/>
      --  related error
      <br/>
      --         *             without error value (e.g. NoSuchAttribute),
      <br/>
      --         *             and also not for cmis-setlisterror
      <br/>
      --         * Precond.:   request is completed
      <br/>
      --         * Input:
      <br/>
      --         * Output:
      <br/>
      --         * Return:
      <br/>
      --         * Errors:     if the attributeValue can not be found, ooiStat resp.
      <br/>
      --  the exception
      <br/>
      --         *             will indicate an internal error or a cmis error
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       %
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       receiveNextAttribute (`iterator method`)
      <br/>
      --         * Purpose:    receive `next` attribute related info of a cmis
      <br/>
      --  result
      <br/>
      --         *             this functions should only be used for results, that
      <br/>
      --  contain
      <br/>
      --         *             attribute related information, such as:
      <br/>
      --         *              CreateResult
      <br/>
      --         *              GetListError
      <br/>
      --         *              GetResult
      <br/>
      --         *              SetListError
      <br/>
      --         *              SetResult
      <br/>
      --         *              (InvalidAttributeValue ?)
      <br/>
      --         *              (MIssionAttributeValue ?)
      <br/>
      --         *              (NoSuchAttribute?)
      <br/>
      --         * Precond.:   request if completed
      <br/>
      --         * Input:      this request, representing cmis result structure, of
      <br/>
      --  a type
      <br/>
      --         *              listed above.
      <br/>
      --         *             If called with other results structures --&gt; see
      <br/>
      --  errors
      <br/>
      --         * Output:     see below
      <br/>
      --         *              ooiStat/the exception will indicate AccessError
      <br/>
      --         *              in return code mode: returns NULL, resets
      <br/>
      --  attributeOID to EMPTY_OID
      <br/>
      --         *
      <br/>
      --         *             if there is data:
      <br/>
      --         *              set `attributeOID`, return the value
      <br/>
      --         *
      <br/>
      --         *             if there is attribute related error info:
      <br/>
      --         *              set `attributeOID`, return NULL,
      <br/>
      --         *              ooiStat/the exception will indicate the attribute
      <br/>
      --  related error
      <br/>
      --         *
      <br/>
      --         * Return:     &lt;explained above&gt;
      <br/>
      --         * Errors:     CMIS-error : `XXX` if a cmis error other than listed
      <br/>
      --  above occurred
      <br/>
      --         * Errors:     OOIInvalidRequest / InternalError etc. : in other
      <br/>
      --  cases
      <br/>
      --         *
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       see also the mibDumpCB sample
      <br/>
      --         *
      <br/>
      --         *
      <br/>
      --         * The following table defines the various return values
      <br/>
      --         * of the receiveNextAttribute( ) methods.
      <br/>
      --         *
      <br/>
      --         *
      <br/>
      --         * called with:
      <br/>
      --         * cmis objects: (`cmisResponseData`)
      <br/>
      --         *               ooiStat     OID    Value  Error
      <br/>
      --         * CreateResult       success     + + -
      <br/>
      --         *                    AccessError - - -
      <br/>
      --         *
      <br/>
      --         * GetListError       success     + + -
      <br/>
      --         *                    success     + - +
      <br/>
      --         *                                              (Get/SetInfoStatus)
      <br/>
      --         *                    AccessError - - -
      <br/>
      --         *
      <br/>
      --         * GetResult          success     + + -
      <br/>
      --         *                    AccessError - - -
      <br/>
      --         *
      <br/>
      --         * SetListError see GetListError
      <br/>
      --         * SetResult   - see SetResult
      <br/>
      --         *
      <br/>
      --         * &lt;other cmis objs&gt; InvRequest  - - -
      <br/>
      --         *
      <br/>
      --         *
      <br/>
      --         *
      <br/>
      --         * cmis/ooi error objects: (`errorResponseData`)
      <br/>
      --         *
      <br/>
      --         * InvalidAttr.Val.   success     + - +
      <br/>
      --         *                                              (Attribute)
      <br/>
      --         *                    AccessError - - -
      <br/>
      --         *
      <br/>
      --         * NoSuchAttr.
      <br/>
      Val.   success     + - - (�)
    </p>
    <p num="218">
      --         *                    AccessError - - -
      <br/>
      --         *
      <br/>
      --         * MissingAttr.Val.   success     + - - (�)
      <br/>
      --         *                    AccessError - - -
      <br/>
      --         *
      <br/>
      --         * &lt;other error objs&gt; &lt;error obj&gt; - - -
      <br/>
      --         *
      <br/>
      --         *
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       receiveActionReply
      <br/>
      --         * Purpose:    receive the `reply` data of a completed action
      <br/>
      --         * Precond.:   request is completed
      <br/>
      --         *             received cmis data is actionResult
      <br/>
      --         *
      <br/>
      --         * Input:      %
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     %
      <br/>
      --         * Errors:     %
      <br/>
      --         * Exceptions: %
      <br/>
      --         * Note:       %
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --      protected:
      <br/>
      --        // virtual callback methods for specialization in sub classes
      <br/>
      --        virtual void partialReplyCallback+
      <br/>
      --                           OOIResponse        * response
      <br/>
      --                           };
      <br/>
      --        virtual void errorReplyCallback+
      <br/>
      --                           OOIResponse        * response
      <br/>
      --                           };
      <br/>
      --        virtual void replyCompletedCallback( );
      <br/>
      --      public:
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void         dump+ ostream&amp; os, OOIBoolean withData } const;
      <br/>
      --        // class data members
      <br/>
      --      protected:
      <br/>
      --        CMIS_Mode           _confirmationMode; // stores confirmationMode
      <br/>
      --  for a particular request
      <br/>
      --        OOIProxyMO         * _proxyMOReference; // may be NULL
      <br/>
      --        WaitMode            _waitMode;     // to remember `waitMode` during
      <br/>
      --  outstanding call
      <br/>
      --        OOIBoolean          _isScoped;
      <br/>
      --        int                 _requestCounter; // number of requests issued
      <br/>
      --        OOIReqServicePrimitiveEnum _primitive; // GET, SET etc.
      <br/>
      --        State               _state;
      <br/>
      --        CompletionState     _completionState; // valid only if _state ==
      <br/>
      --  completed
      <br/>
      --        OOIStatus           _completionStatus; // valid only if _stats ==
      <br/>
      --  completed
      <br/>
      --        int                 _numberOfResultElementsReceived;
      <br/>
      --        int                 _numberOfServiceErrorsReceived;
      <br/>
      --        int                 _numberOfNonServiceErrorsOccurred;
      <br/>
      --        CMIS_PAContext     * _defaultContext;   // may be NULL
      <br/>
      --        CMIS_PAContext     * _actualContext;    // remember context for
      <br/>
      --  potential `cancel` of a get req
      <br/>
      --      };
      <br/>
      --      -endif // _OOI_REQUEST_INCLUDED--
    </p>
    <p num="219">
      --
      <br/>
      --                                                                       */
      <br/>
      -- Listing 4: OOI Response Class
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ****/
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    Licensed Materials - Property of IBM                            */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    5799-QLN                                                        */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    .COPYRGT. Copyright IBM Corporation 1995
      <br/>
      --  */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ****/
      <br/>
      -- -ifndef _OOI_RESPONSE_INCLUDED--
      <br/>
      -- -define _OOI_RESPONSE_INCLUDED--
      <br/>
      -- //
      <br/>
      -- // class OOIResponse:
      <br/>
      -- //
      <br/>
      -- // instances of this class are responses for requests,
      <br/>
      -- // these responses are stored
      <br/>
      -- // in a response queue belonging to the request
      <br/>
      -- //
      <br/>
      -- // (note that for linked replies the `final element` is not
      <br/>
      -- // stored in the response queue at all)
      <br/>
      -- //
      <br/>
      -- // data members
      <br/>
      -- //     _finalElement ( OOIBoolen ): basically as in CMIS &amp; DMP:
      <br/>
      -- //                             1 - for linked replies:
      <br/>
      -- //                               set to true only for the last element
      <br/>
      -- //                             2 - for a single reply:
      <br/>
      -- //                               set to true
      <br/>
      -- //
      <br/>
      -- //          (however as noted above, for linked replies the `final element`
      <br/>
      --  is not
      <br/>
      -- //          stored in the response queue at all)
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- class OOIResponse : public OOIGenericQueueDataElement +
      <br/>
      --      friend class OOIRequest;
      <br/>
      --        //
      <br/>
      --        // standard constructors/destructors
      <br/>
      --        //
      <br/>
      --      private:
      <br/>
      --        // default constructor, disabled
      <br/>
      --        OOIResponse( );
      <br/>
      --        // copy constructor, disabled
      <br/>
      --        OOIResponse( const OOIResponse% rhs );
      <br/>
      --        // standard assignment operator, diabled
      <br/>
      --        OOIResponse&amp; operator=( const OOIResponse&amp; rhs );
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --        virtual .asterisk-pseud.OOIResponse( );
      <br/>
      --        //
      <br/>
      --        // type specific
      <br/>
      --        //
      <br/>
      --        // initialization constructor
      <br/>
      --        OOIResponse+
      <br/>
      --                       const OOIRequest     * requestReference,
      <br/>
      --                       OOIRcvServicePrimitive  primitive,
      <br/>
      --                       int                   invokeId,
      <br/>
      --                       OOIBoolean            finalElement,
      <br/>
      --                       OOIError             * error,
      <br/>
      --                       const ASN1Type       * data };
      <br/>
      --        // data member access methods
      <br/>
      --        // reference to request
      <br/>
      --        OOIRequest       * requestReference( ) const;
      <br/>
      --        OOIBoolean        isFinalElement( ) const;
      <br/>
      --        // note: these methods returns `alias` pointers to data owned by
      <br/>
      --        //      the response object
      <br/>
      --        CMIS_ObjectInstance  * lookupObjectInstance+
      <br/>
      --               OOIErrorMode  errorMode = OOI_ERR_RC
      <br/>
      --               } const;
      <br/>
      --        OOIProxyMO    * createProxyMOFromData+
      <br/>
      --               OOIErrorMode  errorMode = OOI_ERR_RC
      <br/>
      --               } const;
      <br/>
      --        // what's in the response ?
      <br/>
      --        OOIBoolean isSuccess( ) const;
      <br/>
      --        OOIBoolean isError( ) const;
      <br/>
      --        OOIBoolean isLinkedError( ) const;
      <br/>
      --        OOIBoolean isCMISError( ) const;
      <br/>
      --        OOIBoolean isNonCMISError( ) const;
      <br/>
      --        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --         *
      <br/>
      --         * primitive                      classification
      <br/>
      --  data/status
      <br/>
      --         *
      <br/>
      --         *                                Success
      <br/>
      --         *                          .vertline.
      <br/>
      Error
      <br/>
      --         *                          .vertline. .vertline.
      <br/>
      LinkedError
      <br/>
      --         *                          .vertline. .vertline. .vertline.
      <br/>
      --  CMISError
      <br/>
      --         *                          .vertline. .vertline. .vertline.
      <br/>
      --  .vertline.
      <br/>
      NonCMISError
      <br/>
      --         *                          .vertline. .vertline. .vertline.
      <br/>
      --  .vertline. .vertline.
      <br/>
      --         * CMIS_SP_GET_CNF                S    -- -- -- --       `data`
      <br/>
      --         * CMIS_SP_GET_ERROR              -- E    L    -- --       `data`
      <br/>
      --         * CMIS_SP_SET_CNF                S    -- -- -- --       `data`
      <br/>
      --         * CMIS_SP_SET_ERROR              -- E    L    -- --       `data`
      <br/>
      --         * CMIS_SP_ACTION_CNF             S    -- -- -- --       `data`
      <br/>
      --         * CMIS_SP_ACTION_ERROR           -- E    L    -- --       `data`
      <br/>
      --         * CMIS_SP_CREATE_CNF             S    -- -- -- --       `data`
      <br/>
      --         * CMIS_SP_DELETE_CNF             S    -- -- -- --       `data`
      <br/>
      --         * CMIS_SP_DELETE_ERROR           -- E    L    -- --       `data`
      <br/>
      --         * CMIS_SP_EVENT_REPORT_CNF       S    -- -- -- --       `data`
      <br/>
      --         *
      <br/>
      --         * (CMIS_SP_CANCEL_GET_CNF)       --          (no response object at
      <br/>
      --  all)
      <br/>
      --         *
      <br/>
      --         * CMIS_SP_PROCESSING_FAILURE     -- E    L    -- --       `data`
      <br/>
      --         *
      <br/>
      --         * CMIS_SP_SERVICE_ERROR          -- E    -- C    --       `status`
      <br/>
      --         * CMIS_SP_NONSERVICE_ERROR       -- E    -- -- N
      <br/>
      --  `status`
      <br/>
      --         *
      <br/>
      --         *
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --        //
      <br/>
      --        // methods related to reponses
      <br/>
      --        // (see similar methods in OOIRequest( ) for documentation)
      <br/>
      --        OOIBoolean hasAttribute+
      <br/>
      --                  OOIStatus          * ooiStat        // OUT, if &lt; &gt; NULL
      <br/>
      --                  const OID          &amp; attributeOID // IN
      <br/>
      --                  } const;
      <br/>
      --        void receiveAttribute+
      <br/>
      --                  OOIStatus          * ooiStat,       // OUT, if &lt; &gt; NULL
      <br/>
      --                  const OID          &amp; attributeOID, // IN
      <br/>
      --                  ANS1Type           &amp; result     // OUT
      <br/>
      --                  } const;
      <br/>
      --        ASN1Type * receiveNextAttribute+
      <br/>
      --                  OOIStatus          * ooiStat,       // OUT, if &lt; &gt; NULL
      <br/>
      --                  OID                &amp; attributeOID, // OUT, conditional
      <br/>
      --                  ASN1Type           *&amp; attributeError // OUT, only if
      <br/>
      --  attributeError
      <br/>
      --                  };
      <br/>
      --        ASN1Type * receiveActionReply+
      <br/>
      --                  OOIStatus          * ooiStat        // OUT, if &lt; &gt; NULL
      <br/>
      --                  } const;
      <br/>
      --        void receiveActionReply+
      <br/>
      --                  OOIStatus          * ooiStat,       // OUT, if &lt; &gt; NULL
      <br/>
      --                  ASN1Type           * actionReplyData, // OUT, conditional
      <br/>
      --  (*)
      <br/>
      --                  OOIBoolean         * actionReplyPresence = NULL // OUT,
      <br/>
      --  conditional
      <br/>
      --                  } const;
      <br/>
      --                  // (*): impl. note (quirk):
      <br/>
      --                  // `actionReplyData` can not default to NULL, would
      <br/>
      --  collide with 1st version of this method
      <br/>
      --        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * * *
      <br/>
      --        // dump operation, for debugging
      <br/>
      --        virtual void    dump( ostream&amp; os, OOIBoolean withData ) const;
      <br/>
      --        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --         *
      <br/>
      --         * Name:       createProxyMOFromData
      <br/>
      --         * Purpose:    look at data in response, and build up proxy mo
      <br/>
      --  object
      <br/>
      --         *             works only, if data contains moc &amp; moi
      <br/>
      --         * Input:      errorMode:  if proxy mo cannot be created,
      <br/>
      --         *                         report error either by return NULL or via
      <br/>
      --  exc.
      <br/>
      --         * Output:     %
      <br/>
      --         * Return:     NULL, if no data available, or moc and/or moi missing
      <br/>
      --         * Errors:     %
      <br/>
      --         * Eceptions:  %
      <br/>
      --         * Note:       may create a generic proxy mo, if moc unknown
      <br/>
      --         *             current version does not destroy moc/moi info of data
      <br/>
      --         *             this may change in future �
      <br/>
      --         *
      <br/>
      --         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * */
      <br/>
      --        // class data members
      <br/>
      --      protected:
      <br/>
      --        OOIBoolean           _finalElement;
      <br/>
      -- };
      <br/>
      -- -endif // _OOI_RESPONSE_INCLUDED--
    </p>
    <p num="220">
      --
      <br/>
      -- Listing 5: Proxy Managed Object Class
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ****/
      <br/>
      -- /**                                                      */
      <br/>
      -- /**  Licensed Materials - Property of IBM      */
      <br/>
      -- /**                                                      */
      <br/>
      -- /**  5799-QLN                                  */
      <br/>
      -- /**                                                      */
      <br/>
      -- /**  .COPYRGT.  Copyright IBM Corporation 1995 */
      <br/>
      -- /**                                                      */
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ****/
      <br/>
      -- /*
      <br/>
      --  * RCS LOG:
      <br/>
      --  *
      <br/>
      --  *
      <br/>
      --  */
      <br/>
      -- -ifndef _OOI_PROXY_MO_INCLUDED--
      <br/>
      -- -define _OOI_PROXY_MO_INCLUDED--
      <br/>
      -- //
      <br/>
      -- // EXPORTS:
      <br/>
      -- // the following class definitions are exported to OOI applications:
      <br/>
      -- //
      <br/>
      -- class OOIProxyMO;
      <br/>
      -- class OOIProxyMOList;
      <br/>
      -- // externals:
      <br/>
      -- class OOIProxyMOData;
      <br/>
      -- //
      <br/>
      -- // includes:
      <br/>
      -- //
      <br/>
      -- -include &lt;iseq.h&gt;
      <br/>
      -- -include "OOIProxyAgent.H"
      <br/>
      -- -include "OOIPMORequest.H"
      <br/>
      -- // the following `include` is currently needed for generated PMO's:
      <br/>
      -- // but also useful for debugging...
      <br/>
      -- -include "OOIProxyMOData.H"
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // class OOIProxyMO is the abstract base class of
      <br/>
      -- //                    all typed proxy mo's and OOIGenericMO
      <br/>
      -- //
      <br/>
      -- // it provides
      <br/>
      -- //
      <br/>
      -- //  _metaInfo:   pointer to MOCMetaInfo, always &lt; &gt; NULL
      <br/>
      -- //                    for generic proxy mo's (of class OOIGenericMO) one
      <br/>
      --  special
      <br/>
      -- //                    meta info object `OOI_GenericMO_MetaInfo` with
      <br/>
      -- //                    moClass set to " " (empty-oid) is provided.
      <br/>
      -- //                    this is a read-only member
      <br/>
      -- //  _moClass;    available thru meta info, resp. stored in OOIGenericMO
      <br/>
      --  class
      <br/>
      -- //                    this is a read-only member
      <br/>
      -- //  _instanceName: distinguished name, may be empty (up to you...)
      <br/>
      -- //  _packagesCacheValid: indicates validity of cached _packages info,
      <br/>
      --  (internal)
      <br/>
      -- //  _packages:   retrieve-once, provide-many `cache` for packages
      <br/>
      --  attributed (internal)
      <br/>
      -- //  _agent:      reference to proxy agent, normally &lt; &gt; NULL
      <br/>
      -- //                    in order to invoke cmis operations
      <br/>
      -- //                    this agent reference has to be &lt; &gt; NULL
      <br/>
      -- //                    this agent reference may be temporarily == NULL (up
      <br/>
      --  to you...)
      <br/>
      -- //
      <br/>
      -- // About the `packages` cache:
      <br/>
      -- //
      <br/>
      -- //  when is the packages cache filled:
      <br/>
      -- //
      <br/>
      -- //  a. when it is empty, and
      <br/>
      -- //  b. when one of the following requests is issued:
      <br/>
      -- //      1-   hasConditionalPackage
      <br/>
      -- //      2-   getPackage
      <br/>
      -- //      3-   or when any response for an unscoped request containing
      <br/>
      -- //           package attribute information arrives
      <br/>
      -- //           e.g. a create-response, get-some-response, get-list-error
      <br/>
      -- //  c. when the CMIS request is issued using a proxy MO
      <br/>
      -- //
      <br/>
      -- //  d. or: when the OOI built up the proxy MO and information about the
      <br/>
      -- //      packages cache was available. (getSubordinates( ) etc.)
      <br/>
      -- //
      <br/>
      -- //  an update of `instanceName` or `agent` (from NULL-&gt;agent) will cause
      <br/>
      -- //  the packages cache to be invalidated.
      <br/>
      -- //
      <br/>
      -- // note:
      <br/>
      -- //      -    the absence of the `packages` attribute in the agent-mo is
      <br/>
      --  represented by
      <br/>
      -- //           `_packagesCacheIsValid` : TRUE
      <br/>
      -- //           `_packages` : NULL
      <br/>
      -- //           in this case, `hasConditionalPackage` will always return
      <br/>
      --  `false`
      <br/>
      -- //           in this case, `getPackage` will return a `NoSuchAttribute`
      <br/>
      --  cmis error
      <br/>
      -- //           (in accordance to normal cmis behaviour)
      <br/>
      -- //
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // these dummy definitions are related to the `packages caching logic`
      <br/>
      -- //  and `cmis create`
      <br/>
      -- // these definitions are OOI internal only:
      <br/>
      -- //
      <br/>
      -- -ifndef _DMI_PACKAGES_INCLUDED--
      <br/>
      -- -define DMI_Packages    ASN1Type
      <br/>
      -- -endif
      <br/>
      -- -ifndef _DMI_NAME_BINDING_INCLUDED--
      <br/>
      -- -define DMI_NameBinding  ASN1Type
      <br/>
      -- -endif
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // class OOIProxyMO
      <br/>
      -- //
      <br/>
      -- // this is a public OOI class
      <br/>
      -- // it is the abstract base class of
      <br/>
      -- //  all typed proxy mo's and OOIGenericMO
      <br/>
      -- //
      <br/>
      -- // this class provides the following categories of methods:
      <br/>
      -- //
      <br/>
      -- //  - local member access (of course...)
      <br/>
      -- //  - packages cache related methods
      <br/>
      -- //  - unscoped  synchronous cmis operations
      <br/>
      -- //  -  scoped  synchronous cmis operations
      <br/>
      -- //  - unscoped asynchronous cmis send operations
      <br/>
      -- //  -  scoped asynchronous cmis send operations
      <br/>
      -- //  - receive attribute value resp. action reply value methods for
      <br/>
      -- //    looking at responses of asynchronous requests
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // note: `equality of mo's/pmo's`:
      <br/>
      -- //      there is no equality operator (==) provided for this class
      <br/>
      -- //      and for its subclasses.
      <br/>
      -- //      the most reasonable equality test for proxy mo's is to
      <br/>
      -- //      test for equality of the `MOI`-information:
      <br/>
      -- //
      <br/>
      -- //       if ( pmo1.moInstance( ) == pmo2.moInstance( ) )
      <br/>
      -- //
      <br/>
      -- //      this however does not take into account, that
      <br/>
      -- //      a pmo with a `localDistinguishedName` may be the same
      <br/>
      -- //      as one with a `distinguishedName` resp. a `nonSpecificForm`.
      <br/>
      -- //
      <br/>
      -- class OOIProxyMO
      <br/>
      -- +
      <br/>
      --      // friend's (for packages cache etc)
      <br/>
      --      friend class OOI;
      <br/>
      --      friend class OOIRequest;
      <br/>
      --      public:
      <br/>
      --         // state of packages cache
      <br/>
      --         enum CacheStatus +
      <br/>
      --          invalid,
      <br/>
      --          updating,
      <br/>
      --          valid
      <br/>
      --          };
      <br/>
      --         //
      <br/>
      --         // standard constructors/destructors
      <br/>
      --         //
      <br/>
      --      private:
      <br/>
      --         // default constructor, disabled
      <br/>
      --         OOIProxyMO( );
      <br/>
      --         // copy constructor, disabled
      <br/>
      --         OOIProxyMO( const OOIProxyMO&amp; rhs );
      <br/>
      --         // standard assignment operator, disabled
      <br/>
      --         OOIProxyMO&amp; operator=( const OOIProxyMO&amp; rhs );
      <br/>
      --      public:
      <br/>
      --         // destructor
      <br/>
      --         virtual %OOIProxyMO( );
      <br/>
      --      protected:
      <br/>
      --         // these initialization constructors are employed by the subclasses
      <br/>
      --  only
      <br/>
      --         // (remember: the OOIProxyMO class is an abstract base class)
      <br/>
      --         // initialization constructor, taking OOIProxyMOData
      <br/>
      --         OOIProxyMO(
      <br/>
      --            const OOIProxyMOData    * data
      <br/>
      --            );
      <br/>
      --         //
      <br/>
      --         // type specific
      <br/>
      --         //
      <br/>
      --      public:
      <br/>
      --         // data member access methods
      <br/>
      --         const OOIMOCMetaInfo      * metaInfo( ) const;
      <br/>
      --         virtual CMIS_ObjectClass    moClass( ) const;
      <br/>
      --         virtual const OOIString   &amp; moClassId( ) const;
      <br/>
      --         const CMIS_ObjectInstance &amp; moInstance( ) const;
      <br/>
      --         OOIProxyAgentXX           * agent( ) const;
      <br/>
      --         // data member update
      <br/>
      --         void   setAgent(  const OOIProxyAgentXX   * agent ); // may be NULL
      <br/>
      --         void   setMOInstance( const CMIS_ObjectInstance &amp; moInstance ); //
      <br/>
      --  may be `unselected`
      <br/>
      --                                                     // -&gt; behaves like
      <br/>
      --  resetMOInstance( )
      <br/>
      --         void   resetMOInstance( );
      <br/>
      --         // create pmo from oid
      <br/>
      --         static OOIProxyMO         * createPMOFromOID(
      <br/>
      --                const OID          &amp; oid,
      <br/>
      --                OOIBoolean            createGenericPMOIfOIDUnknown = true,
      <br/>
      --                OOIErrorMode          errorMode = OOI_ERR_RC
      <br/>
      --                );
      <br/>
      --         // make a copy of this pmo
      <br/>
      --         OOIProxyMO * copy( ) const;
      <br/>
      --         // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * * * *
      <br/>
      --         //
      <br/>
      --         // packages cache related operations:
      <br/>
      --         //
      <br/>
      --         // predicate: packages cache is valid
      <br/>
      --         // method:  reset packages cache
      <br/>
      --         // (both more or less internal, but if you want to call them...)
      <br/>
      --         OOIBoolean                   packagesCacheIsValid( ) const;
      <br/>
      --         void                         resetPackages( );
      <br/>
      --         // the following operations are for replacing the standard
      <br/>
      --         // `accessPackages( )` &amp; `getPackages( )` methods of DMI_ProxyTop
      <br/>
      --         // the DMI_ProxyTop class is uses these new methods
      <br/>
      --         // instead of the standard `getAttribute( )` methods
      <br/>
      --         // applications usually call the DMI_ProxyTop methods rather than
      <br/>
      --         // these methods directly
      <br/>
      --         const DMI_Packages        * accessPackages( ) const; // may return
      <br/>
      --  NULL
      <br/>
      --         DMI_Packages * getPackages(
      <br/>
      --                OOIStatus                        * ooiStat = NULL // OUT, if
      <br/>
      --  &lt; &gt; NULL
      <br/>
      --                ) const;
      <br/>
      --         //
      <br/>
      --         // remember: getPackages:
      <br/>
      --         //  if there is no packages attribute in the agent, this
      <br/>
      --         //  method behaves like standard CMIS:
      <br/>
      --         //  -&gt; return CMISERR_NoSuchAttribute via `ooiStat`/exception
      <br/>
      --         //
      <br/>
      --         // hasConditionalPackage:
      <br/>
      --         OOIBoolean hasConditionalPackage(
      <br/>
      --                OOIStatus          * ooiStat,           // OUT, if &lt; &gt; NULL
      <br/>
      --                const OID          &amp; packageOID
      <br/>
      --                ) const;
      <br/>
      --         OOIBoolean hasPackagesPackage(
      <br/>
      --                OOIStatus          * ooiStat = NULL // OUT, if &lt; &gt; NULL
      <br/>
      --                ) const;
      <br/>
      --         // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * * * *
      <br/>
      --         //
      <br/>
      --         // cmis operations, single mo / unscoped, synchronous
      <br/>
      --         //
      <br/>
      --      public:
      <br/>
      --         // implementation note:
      <br/>
      --         // although some methods may change the state of the packages
      <br/>
      --  cache,
      <br/>
      --         // they are declared as `const`.
      <br/>
      --         // this also holds for MCreate, where the MOI info might be set
      <br/>
      --  from
      <br/>
      --         // info contained in the response
      <br/>
      --         // action
      <br/>
      --         void simpleMAction(
      <br/>
      --                OOIStatus          * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --                const OID          &amp; actionOID,        // IN
      <br/>
      --                const ASN1Type     * actionInfoData,       // IN, optional
      <br/>
      --                ASN1Type           * actionReplyDate = NULL, // OUT,
      <br/>
      --  conditional
      <br/>
      --                OOIBoolean         * actionReplyPresence=NULL,// OUT,
      <br/>
      --  conditional
      <br/>
      --                const CMIS_Mode    &amp; confirmationMode = OOI_CONFIRMED // IN
      <br/>
      --                ) const;
      <br/>
      --      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * *
      <br/>
      --       *
      <br/>
      --       * Name:       simpleMAction
      <br/>
      --       * Purpose:    issue cmis-action operation - single mo - single reply
      <br/>
      --       * Input:      actionInfoData:
      <br/>
      --       *              if there is a INFORMATION SYNTAX specified for the
      <br/>
      --  action
      <br/>
      --       *               related to `actionOID`, data of the type as specified
      <br/>
      --       *               by INFORMATION SYNTAX has to be passed
      <br/>
      --       *              if there is no INFORMATION SYNTAX specified for the
      <br/>
      --  action
      <br/>
      --       *               related to `actionOID`, pass NULL
      <br/>
      --       *
      <br/>
      --       * Output:     actionReply:
      <br/>
      --       *
      <br/>
      --       *             only if confirmed:
      <br/>
      --       *        actionReplyPresence: indicates whether reply contains user
      <br/>
      --  info
      <br/>
      --       *                           (replySyntax) -&gt; whether actionReply
      <br/>
      --       *                           contains data
      <br/>
      --       *        actionReply:       holds user info from peer
      <br/>
      --       *                           only valid if `actionReplyPresence` is
      <br/>
      --  true
      <br/>
      --       * Return:     %
      <br/>
      --       * Errors:     %
      <br/>
      --       * Exceptions: %
      <br/>
      --       * Note:       don't use this method in case the agent may return
      <br/>
      --  multiple repies
      <br/>
      --       *             (you have to use asynchronous calls instead)
      <br/>
      --       *             for `actionReplyData` you have to supply an object of
      <br/>
      --  the `correct`
      <br/>
      --       *              ASN.1 syntax related to this particular action.
      <br/>
      --       *              In case this action has no reply syntax, simply pass
      <br/>
      --  NULL/NULL.
      <br/>
      --       *
      <br/>
      --       *             this interface provides for synchronous-confirmed as
      <br/>
      --  well as for
      <br/>
      --       *             unconfirmed operations
      <br/>
      --       *
      <br/>
      --       *             Basically `actionReplyPresence` is superflouous, since
      <br/>
      --  it should be
      <br/>
      --       *             clear from the action definition whether there is
      <br/>
      --  replyData or not.
      <br/>
      --       *             But for convenience, it is provided anyway.
      <br/>
      --       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * */
      <br/>
      --       // create
      <br/>
      -- //protected: (must be public due to C++ cast problem)
      <br/>
      -- public:
      <br/>
      --      void simpleMCreate(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_ObjectInstance * superiorMOInstanceName, // IN, may be
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO          * referenceObject,      // IN, may be
      <br/>
      --  NULL
      <br/>
      --         const CMIS_AttributeList  * attributeList         // IN, may be
      <br/>
      --  NULL
      <br/>
      --         //CMIS_AttributeList      * resultAttributeList = NULL  // OUT,
      <br/>
      --  conditional
      <br/>
      --         ) const;
      <br/>
      --      // currently no support for create-result information
      <br/>
      --      // if you're interested in create-result information
      <br/>
      --      //  -&gt; use the asynchronous interface
      <br/>
      --      // simple delete
      <br/>
      --      void simpleMDelete(
      <br/>
      --         OOIStatus                 * ooiStat = NULL // OUT, if &lt; &gt; NULL
      <br/>
      --         ) const;
      <br/>
      --      // simpleMGet: get a single attribute
      <br/>
      --      // see also getPackages( )
      <br/>
      --      ASN1Type * simpleMGet(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OID                 &amp; attributeOID      // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMGet(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         ASN1Type                  &amp; result            // OUT
      <br/>
      --         ) const;
      <br/>
      --      // note: for `result` you have to supply an object of the `correct`
      <br/>
      --  ASN.1 syntax
      <br/>
      --      //    related to `attributeOID`
      <br/>
      --      void simpleMGetSome(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_AttributeIdList * attrIdList,           // IN, NULL-&gt;all
      <br/>
      --         CMIS_AttributeList        &amp; attributeList     // OUT
      <br/>
      --         ) const;
      <br/>
      --      // set
      <br/>
      --      void simpleMSet(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            * value,                // IN,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_ModifyOperator &amp; modifyOperator    // IN, with default
      <br/>
      --                                   = CMIS_ModifyOperator::replace,
      <br/>
      --         ASN1Type                  * result = NULL, // OUT, conditional
      <br/>
      --         OOIBoolean                * resultPresence = NULL, // OUT,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_Mode           &amp; confirmationMode = OOI_CONFIRMED // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMSetToDefault(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         ASN1Type                  * result = NULL, // OUT, conditional
      <br/>
      --         OOIBoolean                * resultPresent = NULL, // OUT,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_Mode           &amp; confirmationMode = OOI_CONFIRMED // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMReplace(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value,            // IN
      <br/>
      --         ASN1Type                  * result = NULL, // OUT, conditional
      <br/>
      --         OOIBoolean                * resultPresence = NULL, // OUT,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_Mode           &amp; confirmationMode = OOI_CONFIRMED // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMAdd(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value,            // IN
      <br/>
      --         ASN1Type                  * result = NULL, // OUT, conditional
      <br/>
      --         OOIBoolean                * resultPresence = NULL, // OUT,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_Mode           &amp; confirmationMode = OOI_CONFIRMED // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMRemove(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value,            // IN
      <br/>
      --         ASN1Type                  * result = NULL, // OUT, conditional
      <br/>
      --         OOIBoolean                * resultPresence = NULL, // OUT,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_Mode           &amp; confirmationMode = OOI_CONFIRMED // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMSetSome(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_ModificationList &amp; modificationList, // IN, mand.
      <br/>
      --         CMIS_AttributeList        * attributeListResult = NULL, // OUT,
      <br/>
      --  cond.
      <br/>
      --         OOIBoolean                * resultPresence = NULL, // OUT,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_Mode           &amp; confirmationMode = OOI_CONFIRMED // IN
      <br/>
      --         ) const;
      <br/>
      --      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * *
      <br/>
      --       *
      <br/>
      --       * Name:       simpleMSet etc.
      <br/>
      --       * Purpose:    issue cmis-set operation - single mo - single attribute
      <br/>
      --       *             if the caller is interested in the set-result value,
      <br/>
      --  he/she may indicate
      <br/>
      --       *             this by passing:
      <br/>
      --       *             - the address of an appropriate ASN.1 object (owned by
      <br/>
      --  the caller)
      <br/>
      --       *              as argument to `result`.
      <br/>
      --       *             - the address of an OOIBoolean as argument to
      <br/>
      --  `resultPresence`
      <br/>
      --       *             if the result is returned by the agent (which is not
      <br/>
      --  guaranteed), the
      <br/>
      --       *             `result` object will hold the value, and
      <br/>
      --  `resultPresence` will indicate
      <br/>
      --       *             `true`.
      <br/>
      --       * Input:      %
      <br/>
      --       * Output:     result: see above
      <br/>
      --       * Return:     %
      <br/>
      --       * Errors:     %
      <br/>
      --       * Exceptions: %
      <br/>
      --       * Note:
      <br/>
      --       *             this interface provides for synchronous-confirmed as
      <br/>
      --  well as for
      <br/>
      --       *             unconfirmed operations
      <br/>
      --       *
      <br/>
      --       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * */
      <br/>
      --       // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * * *
      <br/>
      --       //
      <br/>
      --       // `receive attribute value`
      <br/>
      --       // local access to attribute value of a cmis-get-result,
      <br/>
      --  get-list-error etc.
      <br/>
      --       //
      <br/>
      --       // - `hasAttribute( )`: is an attribute value available ?
      <br/>
      --       // - `receiveAttribute( )`: unlink and return the attribute value
      <br/>
      --       //  2 flavours: 1 - returning the value via result / reference
      <br/>
      --       //        2 - returning the value as pointer object,
      <br/>
      --       //
      <br/>
      --       // both methods come in two version:
      <br/>
      --       // - request based, mainly useful for unscoped requests
      <br/>
      --       // - response based, useful for scoped (&amp; unscoped) requests
      <br/>
      --       // request based versions:
      <br/>
      --      OOIBoolean hasAttribute(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIPMORequest       &amp; requestToken,     // IN
      <br/>
      --         const OID                 &amp; attributeOID      // IN
      <br/>
      --         ) const;
      <br/>
      --      void receiveAttribute(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // IN
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         ASN1Type                  &amp; result            // OUT
      <br/>
      --         ) const;
      <br/>
      --      // note: for `result` you have to supply an object of the `correct`
      <br/>
      --  ASN.1 syntax
      <br/>
      --      //      related to `attributeOID`
      <br/>
      --      ASN1Type * receiveAttribute(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // IN
      <br/>
      --         const OID                 &amp; attributeOID      // IN
      <br/>
      --         ) const;
      <br/>
      --      ASN1Type * receiveActionReply(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken      // IN
      <br/>
      --         ) const;
      <br/>
      --      void receiveActionReply(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // IN
      <br/>
      --         ASN1Type                  * actionReplyData,      // OUT,
      <br/>
      --  conditional (*)
      <br/>
      --         OOIBoolean                * actionReplyPresence = NULL // OUT,
      <br/>
      --  conditional
      <br/>
      --         ) const;
      <br/>
      --         // impl note (quirk):
      <br/>
      --         // `actionReplyData` can not default to NULL, would collide with
      <br/>
      --  1st version of this method
      <br/>
      --      // note: for `actionReplyDate` you have to supply an object of the
      <br/>
      --  `correct` ASN.1 syntax
      <br/>
      --      //      related to this particular action.
      <br/>
      In case this action has no
      <br/>
      --      //      reply syntax, simply pass NULL/NULL
      <br/>
      --      // response based versions:
      <br/>
      --      OOIBoolean hasAttribute(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const OOIResponse         &amp; response,         // IN
      <br/>
      --         const OID                 &amp; attributeOID      // IN
      <br/>
      --         ) const;
      <br/>
      --      void receiveAttribute(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIResponse               &amp; response,         // IN (non-const)
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         ASN1Type                  &amp; result            // OUT
      <br/>
      --         ) const;
    </p>
    <p num="221">
      --      // note: for `result` you have to supply an object of the `correct`
      <br/>
      --  ASN.1 syntax
      <br/>
      --      //      related to `attributeOID`
      <br/>
      --      ASN1Type * receiveAttribute(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIResponse               &amp; response,         // IN (non-const)
      <br/>
      --         const OID                 &amp; attributeOID      // IN
      <br/>
      --         ) const;
      <br/>
      --      ASN1Type * receiveActionReply(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIResponse               &amp; response          // IN (non-const)
      <br/>
      --         ) const;
      <br/>
      --      void receiveActionReply(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIResponse               &amp; response,         // IN (non-const)
      <br/>
      --         ASN1Type                  * actionReplyData,      // OUT,
      <br/>
      --  conditional
      <br/>
      --         OOIBoolean                * actionReplyPresence = NULL // OUT,
      <br/>
      --  conditional
      <br/>
      --         ) const;
      <br/>
      --         // impl note (quirk):
      <br/>
      --         // `actionReplyData` can not default to NULL, would collide with
      <br/>
      --  1st version of this method
      <br/>
      --      // note: for `actionReplyData` you have to supply an object of the
      <br/>
      --  `correct` ASN.1 syntax
      <br/>
      --      //      related to this particular action.
      <br/>
      In case this action has no
      <br/>
      --      //      reply syntax, simply pass NULL/NULL
      <br/>
      --      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --      //
      <br/>
      --      // cmis operations, single mo, asynchronous
      <br/>
      --      //
      <br/>
      --      // action
      <br/>
      --      void simpleMActionRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; actionOID,        // IN
      <br/>
      --         const ASN1Type            * actionInfo            // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      // create
      <br/>
      -- //protected: (must be public due to C++ cast problem)
      <br/>
      -- public:
      <br/>
      --      void simpleMCreateRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_ObjectInstance * superiorMOInstanceName, // IN, may be
      <br/>
      --  NULL
      <br/>
      --         const OOIProxyMO          * referenceObject,      // IN, may be
      <br/>
      --  NULL
      <br/>
      --         const CMIS_AttributeList  * attributeList         // IN, may be
      <br/>
      --  NULL
      <br/>
      --         ) const;
      <br/>
      --      // simple delete
      <br/>
      --      void simpleMDeleteRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken      // INOUT
      <br/>
      --         ) const;
      <br/>
      --      // simpleMGet
      <br/>
      --      //  several versions, for one / some / none-one-some-all / all
      <br/>
      --  attributes
      <br/>
      --      //  the 3rd version is the one providing `full` CMIS functionality
      <br/>
      --      //  (where `attributeIdList` is an optional parameter)
      <br/>
      --      void simpleMGetRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID      // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMGetSomeRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_AttributeIdList &amp; attrIdList        // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMGetSomeRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_AttributeIdList * attrIdList = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void simpleMGetAllRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken      // INOUT
      <br/>
      --         ) const;
      <br/>
      --      // set
      <br/>
      --      void simpleMSetRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            * value,                // IN,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_ModifyOperator &amp; modifyOperator    // IN, with default
      <br/>
      --                                      = CMIS_ModifyOperator::replace
      <br/>
      --         ) const;
      <br/>
      --      void simpleMSetToDefaultRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID      // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMReplaceRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value             // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMAddRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value             // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMRemoveRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value             // IN
      <br/>
      --         ) const;
      <br/>
      --      void simpleMSetSomeRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_ModificationList &amp; modificationList  // IN, mand.
      <br/>
      --         ) const;
      <br/>
      --      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --      // `generic` CMIS request method
      <br/>
      --      // for specification: check similar methods at proxy agent / OOI
      <br/>
      --  request class
      <br/>
      --      void sendCMISRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const ASN1Type            &amp; cmisRequest,      // IN
      <br/>
      --         OOIReqServicePrimitiveEnum    primitive = CMIS_SP_UNSPECIFIED, //
      <br/>
      --  IN
      <br/>
      --         OOIRequest::WaitMode         waitMode
      <br/>
      --                           = OOIRequest::waitUntilPartialReply // IN
      <br/>
      --         ) const;
      <br/>
      --      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --      //
      <br/>
      --      // cmis operations, scoped, synchronous
      <br/>
      --      //
      <br/>
      --      // scoped MGet: get some mo's,
      <br/>
      --      // - cannot be used to retrieve attributes
      <br/>
      --      //  (except objectclass/objectinstance)
      <br/>
      --      //  use asynchronous scoped get calls in order to retrieve attributes
      <br/>
      --      void scopedMGet(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIProxyMOList            &amp; proxyMOList,      // OUT
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         );
      <br/>
      --      // alternatively to the generalized `scopedMGet` method,
      <br/>
      --      // these scope specific methods are offered:
      <br/>
      --      void getSubordinates(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIProxyMOList            &amp; proxyMOList,      // OUT
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         );
      <br/>
      --      void getNthLevelSubordinates(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIProxyMOList            &amp; proxyMOList,      // OUT
      <br/>
      --         int                          nthLevel, // IN
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         );
      <br/>
      --      void getBaseToNthLevelSubordinates(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIProxyMOList            &amp; proxyMOList,      // OUT
      <br/>
      --         int                          nthLevel, // IN
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         );
      <br/>
      --      void getWholeSubtree(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIProxyMOList            &amp; proxyMOList,      // OUT
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         );
      <br/>
      --      // scoped delete
      <br/>
      --      void scopedMDelete(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         );
      <br/>
      --      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --      //
      <br/>
      --      // cmis operations, scoped, asynchronous
      <br/>
      --      //
      <br/>
      --      // action
      <br/>
      --      void scopedMActionRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; actionOID,        // IN
      <br/>
      --         const ASN1Type            * actionInfoData,       // IN, optional
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      // create
      <br/>
      --      // - there is no scoped create request
      <br/>
      --      // scoped delete
      <br/>
      --      void scopedMDeleteRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      // scoped get:
      <br/>
      --      //  several versions, for one / some / none-one-some-all / all
      <br/>
      --  attributes
      <br/>
      --      //  the 3rd version is the one providing `full` CMIS functionality
      <br/>
      --      //  (where `attributeIdList` is an optional parameter)
      <br/>
      --      void scopedMGetRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void scopedMGetSomeRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_AttributeIdList * attrIdList,           // IN
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void scopedMGetSomeRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_AttributeIdList * attrIdList,           // IN, optional
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void scopedMGetAllRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      // set
      <br/>
      --      void scopedMSetRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            * value,                // IN,
      <br/>
      --  conditional
      <br/>
      --         const CMIS_ModifyOperator &amp; modifyOperator    // IN
      <br/>
      --                                     // = CMIS_ModifyOperator::replace
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void scopedMSetToDefaultRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void scopedMReplaceRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value,            // IN
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void scopedMAddRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value,            // IN
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void scopedMRemovalRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const OID                 &amp; attributeOID,     // IN
      <br/>
      --         const ASN1Type            &amp; value,            // IN
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      void scopedMSetSomeRequest(
      <br/>
      --         OOIStatus                 * ooiStat,              // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --         OOIPMORequest             &amp; requestToken,     // INOUT
      <br/>
      --         const CMIS_ModificationList &amp; modificationList, // IN, mand.
      <br/>
      --         const CMIS_Scope          &amp; scope,            // IN, mandatory
      <br/>
      --         const CMIS_Filter         * filter       = NULL, // IN, optional
      <br/>
      --         const CMIS_Sync           * synchronization = NULL // IN, optional
      <br/>
      --         ) const;
      <br/>
      --      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --      //
      <br/>
      --      // general operations
      <br/>
      --      //
      <br/>
      --      // reset
      <br/>
      --      void                  reset( );
      <br/>
      --      // asString, not yet supported for this class. use dump( )
      <br/>
      --      // OOIString  asString( ) const;
      <br/>
      --      // print operator / dump
      <br/>
      --      friend ostream&amp; operator&lt;&lt;( ostream&amp; os, const OOIProxyMO&amp; mo);
      <br/>
      --      void           dump   ( ostream&amp; os, OOIBoolean withData) const;
      <br/>
      --      // narrow-operator:
      <br/>
      --      // not supported for this abstract base class
      <br/>
      --      //  but for all subclasses
      <br/>
      --      // static OOIProxyMO * narrow( const OOIProxyMO   * source,
      <br/>
      --      //                        OOICheckModeT   chkMode = OOI_CHK_TYPE_RC );
      <br/>
      --      // widen:
      <br/>
      --      // cast to base class pointer
      <br/>
      --      virtual OOIProxyMO *   widen( ) const;
      <br/>
      --      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * * * *
      <br/>
      --      protected:
      <br/>
      --         // class members:
      <br/>
      --         // unfortunately `_data` has to be public
      <br/>
      --         // in order to allow access to `_data` for generated code
      <br/>
      --         // (reason: `this` is casted)
      <br/>
      --      public:
      <br/>
      --         OOIProxyMOData     * _data;
      <br/>
      -- };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // class OOIProxyMOList (public class)
      <br/>
      -- //
      <br/>
      -- // - a OOIProxyMOList contains a list of pointers to OOIProxyMO's
      <br/>
      -- // - the OOIProxyMO's in this list are `owned` by the list,
      <br/>
      -- // - when the list is destroyed, the elements that are currently referenced
      <br/>
      -- //  the list, are destroyed too.
      <br/>
      -- // - in and out operations are per pointer, not per value copy.
      <br/>
      -- //  therefore, assignment &amp; copy constructor's are currently not supported
      <br/>
      -- //
      <br/>
      -- // for operations, see Collection Class Library documentation about
      <br/>
      --  `ISequence`
      <br/>
      -- //-include &lt;iseq.h&gt;
      <br/>
      -- class  OOIProxyMOList : public ISequence &lt;OOIProxyMO * &gt;
      <br/>
      -- +
      <br/>
      --  public:
      <br/>
      --         //
      <br/>
      --         // standard methods
      <br/>
      --         //
      <br/>
      --         // default constructor
      <br/>
      --         OOIProxyMOList( ) : ISequence&lt;OOIProxyMO*&gt;( ) + ;}
      <br/>
      --      private:
      <br/>
      --         // copy constructor, disabled
      <br/>
      --         OOIProxyMOList( const OOIProxyMOList &amp; );
      <br/>
      --         // std. assignment, disabled
      <br/>
      --         OOIProxyMOList&amp; operator=( const OOIProxyMOList &amp; );
      <br/>
      --      public:
      <br/>
      --         // destructor
      <br/>
      --         virtual %OOIProxyMOList( ); // follow pointers and delete
      <br/>
      --  OOIProxyMOs
      <br/>
      --         //
      <br/>
      --         // type specific
      <br/>
      --         //
      <br/>
      --         void   removeAllObjects( );
      <br/>
      --         // unlink `element`
      <br/>
      --         // returns NULL, if `element` was not in list
      <br/>
      --         OOIProxy MO * unlinkElement( OOIProxyMO * element );
      <br/>
      -- };
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- //
      <br/>
      -- // undefine packages cache / cmis create related dummy definitions
      <br/>
      -- //
      <br/>
      -- -ifndef _DMI_PACKAGES_INCLUDED--
      <br/>
      --  -undef   DMI_Packages
      <br/>
      -- -endif
      <br/>
      -- -ifndef _DMI_NAME_BINDING_INCLUDED--
      <br/>
      --  -undef   DMI_NameBinding
      <br/>
      -- -endif
      <br/>
      -- // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      <br/>
      --  * * * * * * *
      <br/>
      -- -endif
    </p>
    <p num="222">
      --
      <br/>
      -- Listing 6: Generated DMI Proxy Managed Object Class
      <br/>
      -- // This file has been generated by the Object Oriented Interface Generator
      <br/>
      --  1995
      <br/>
      -- // Version 1.2.0
      <br/>
      -- //
      <br/>
      -- //  Time: WED NOV 29 18:36:16 1995
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // SHARED LIBRARIES used
      <br/>
      -- //
      <br/>
      -- -ifndef _DMI_PROXY_SYSTEM_INCLUDED--
      <br/>
      -- -define _DMI_PROXY_SYSTEM_INCLUDED--
      <br/>
      -- //
      <br/>
      -- // this class DMI_ProxySystem represents
      <br/>
      -- //  remote `system` managed objects
      <br/>
      -- // include all superior classes
      <br/>
      -- -include "DMI_ProxyTop.H"
      <br/>
      -- // include related document
      <br/>
      -- -include "DMI.GDMO.INIT.H"
      <br/>
      -- // include ASN.1 types of all attributes
      <br/>
      -- -include "DMI_SystemId.H"
      <br/>
      -- -include "DMI_SystemTitle.H"
      <br/>
      -- -include "DMI_OperationalState.H"
      <br/>
      -- -include "DMI_UsageState.H"
      <br/>
      -- -include "DMI_AdministrativeState.H"
      <br/>
      -- -include "DMI_SupportedFeatures.H"
      <br/>
      -- class DMI_ProxySystem : public DMI_ProxyTop
      <br/>
      -- +
      <br/>
      --      public:
      <br/>
      --        //
      <br/>
      --        // standard methods
      <br/>
      --        //
      <br/>
      --        // default constructor/ initialization constructor
      <br/>
      --        DMI_ProxySystem( const OOIProxyAgentXX   * agent = NULL,
      <br/>
      --                         const CMIS_ObjectInstance * instanceName = NULL );
      <br/>
      --        DMI_ProxySystem( const OOIProxyMOData   * data );
      <br/>
      --      private:
      <br/>
      --        // copy constructor
      <br/>
      --         // copy constructor is disabled to avoid multiple
      <br/>
      --         // proxies of the same managed object instance
      <br/>
      --         DMI_ProxySystem( const DMI_ProxySystem&amp; rhs );
      <br/>
      --        // assignment operator
      <br/>
      --         // assignment operator is disabled to avoid multiple
      <br/>
      --         // proxies of the same managed object instance
      <br/>
      --         DMI_ProxySystem&amp; operator=( const DMI_ProxySystem&amp; rhs );
      <br/>
      --      public:
      <br/>
      --        // destructor
      <br/>
      --         virtual
      <br/>
      --        -DMI_ProxySystem( );
      <br/>
      --        //////////////////////////////////////////////////
      <br/>
      --        // SYNCHRONOUS INTERFACE //
      <br/>
      --        //////////////////////////////////////////////////
      <br/>
      --        //
      <br/>
      --        // single attribute related methods
      <br/>
      --        //
      <br/>
      --        // attributes of mandatory package `systemPackage`
      <br/>
      --        DMI_SystemId*    getSystemId( OOIStatus * _status );
      <br/>
      --        DMI_SystemTitle*    getSystemTitle( OOIStatus * _status );
      <br/>
      --        DMI_OperationalState*    getOperationalState( OOIStatus * _status );
      <br/>
      --        DMI_UsageState*    getUsageState( OOIStatus * _status );
      <br/>
      --        // attributes of conditional package `administrativeStatePackage`
      <br/>
      --        OOIBoolean            hasAdministrativeStatePackage( OOIStatus *
      <br/>
      --  _status = NULL );
      <br/>
      --        DMI_AdministrativeState*  getAdministrativeState( OOIStatus &amp;
      <br/>
      --  _status );
      <br/>
      --        void           setAdministrativeState( OOIStatus &amp; _status,
      <br/>
      --                       const DMI_AdministrativeState &amp; _value ,
      <br/>
      --                       const CMIS_Mode &amp; _confimrationMode = OOI_CONFIRMED
      <br/>
      --  );
      <br/>
      --        // attributes of condtional package `supportedFeaturesPackage`
      <br/>
      --        OOIBoolean             hasSupportedFeaturesPackage( OOIStatus &amp;
      <br/>
      --  _status = NULL );
      <br/>
      --        DMI_SupportedFeatures* getSupportedFeatures( OOIStatus * _status );
      <br/>
      --        void           setSupportedFeatures( OOIStatus * _status,
      <br/>
      --                       const DMI_SupportedFeatures &amp; _value ,
      <br/>
      --                       const CMIS_Mode &amp; _confirmationMode = OOI_CONFIRMED
      <br/>
      --  );
      <br/>
      --        void           addSupportedFeaturesElement( OOIStatus * _status,
      <br/>
      --                       const DMI_SupportedFeatures &amp; _value ,
      <br/>
      --                       const CMIS_Mode &amp; _confirmationMode = OOI_CONFIRMED
      <br/>
      --  );
      <br/>
      --        void           removeSupportedFeaturesElement( OOIStatus * _status,
      <br/>
      --                       const DMI_SupportedFeatures &amp; _value ,
      <br/>
      --                       const CMIS_Mode &amp; _confirmationMode = OOI_CONFIRMED
      <br/>
      --  );
      <br/>
      --        //
      <br/>
      --        // methods to create and delete managed objects
      <br/>
      --        //
      <br/>
      --        // create a managed object
      <br/>
      --        void simpleMCreate( OOIStatus              * _status,
      <br/>
      --                         const CMIS_ObjectInstance * _superiorMOInstanceName
      <br/>
      --  = NULL,
      <br/>
      --                         const DMI_ProxySystem   * _referenceObject = NULL,
      <br/>
      --                         // only two attributes of class Top
      <br/>
      --                         const DMI_NameBinding     * nameBinding = NULL,
      <br/>
      --                         const DMI_Packages        * packages = NULL,
      <br/>
      --                         // attributes of mandatory package `systemPackage`
      <br/>
      --                         const DMI_SystemId*         systemId = NULL,
      <br/>
      --                         const DMI_SystemTitle*      systemTitle = NULL,
      <br/>
      --                         const DMI_OperationalState*    operationalState =
      <br/>
      --  NULL,
      <br/>
      --                         const DMI_UsageState*       usageState = NULL,
      <br/>
      --                         // attributes of conditional package
      <br/>
      --  `administrativeStatePackage`
      <br/>
      --                         const DMI_AdministrativeState* administrativeState
      <br/>
      --  = NULL,
      <br/>
      --                         // attribute of conditional package
      <br/>
      --  `supportedFeaturesPackage`
      <br/>
      --                         const DMI_SupportedFeatures*   supportedFeatures =
      <br/>
      --  NULL
      <br/>
      --                       };
      <br/>
      --        // delete a managed object (inherited from class OOIProxyMO)
      <br/>
      --        // void simpleMDelete( OOIStatus          * _status,
      <br/>
      --                         // attributes of class Top
      <br/>
      --                         CMIS_ObjectClass      ** objectClass,
      <br/>
      --                         DMI_NameBinding       ** nameBinding,
      <br/>
      --                         DMI_Packages          ** packages,
      <br/>
      --                         DMI_Allomorphs        ** allomorphs,
      <br/>
      --                         // atttributes of mandatory package `systemPackage`
      <br/>
      --                         DMI_SystemId**       systemId,
      <br/>
      --                         DMI_SystemTitle**           systemTitle,
      <br/>
      --                         DMI_OperationalState**      operationalState,
      <br/>
      --                         DMI_UsageState**            usageState,
      <br/>
      --                         // attributes of conditional package
      <br/>
      --  `administrativeStatePackage`
      <br/>
      --                         DMI_AdministrativeState**      administrativeState,
      <br/>
      --                         attributes of conditional package
      <br/>
      --  `supportedFeaturesPackage`
      <br/>
      --                         DMI_SupportedFeatures**     supportedFeatures
      <br/>
      --                       };
      <br/>
      --        //
      <br/>
      --        // method to set some or all settable attributes
      <br/>
      --        //
      <br/>
      --        void simpleMSetSome( OOIStatus            * _status,
      <br/>
      --                         const CMIS_Mode         &amp; _confirmationMode,
      <br/>
      --                         attributes of conditional package
      <br/>
      --  `administrativeStatePackage`
      <br/>
      --                         const DMI_AdministrativeState* administrativeState
      <br/>
      --  = NULL,
      <br/>
      --                         // attributes of conditional package
      <br/>
      --  `supportedFeaturesPackage`
      <br/>
      --                         const DMI_SupportedFeatures* supportedFeatures =
      <br/>
      --  NULL
      <br/>
      --           };
      <br/>
      --        //////////////////////////////////////////////////
      <br/>
      --        // ASYNCHRONOUS INTERFACE //
      <br/>
      --        //////////////////////////////////////////////////
      <br/>
      --        //
      <br/>
      --        // single attribute related request methods
      <br/>
      --        //
      <br/>
      --        // attributes of mandatory package `systemPackage`
      <br/>
      --        void                  getSystemIdRequest+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        void                  getSystemTitleRequst+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        void                  getOperationalStateRequest+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        void                  getUsageStateRequest+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        // attributes of conditional package `admnistrativeStatePackage`
      <br/>
      --        void                  getAdministrativeStateRequest+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --                             void
      <br/>
      --  setAdministrativeStateRequest+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --                              const DMI_AdministrativeState &amp; _value };
      <br/>
      --        attributes of conditional package `supportedFeaturesPackage`
      <br/>
      --        void                  getSupportedFeaturesRequest+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        void                  setSupportedFeatruesRequst+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --                              const DMI_SupportedFeatures &amp; _value };
      <br/>
      --        void                  addSupportedFeaturesElementRequest+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --                              const DMI_SupportedFeatures &amp; _value };
      <br/>
      --        void                  removeSupportedFeaturesElementRequest+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --                              const DMI_SupportedFeatures &amp; _value };
      <br/>
      --        //
      <br/>
      --        // single attribute related receive methods
      <br/>
      --        //
      <br/>
      --        // attributes of mandatory package `systemPackage`
      <br/>
      --        DMI_SystemId*         receiveSystemId+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_SystemId*         receiveSystemId+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_SystemTitle*      receive SystemTitle+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_SystemTitle*      receive SystemTitle+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_OperationalState* receiveOperationalState+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_OperationalState* receiveOperationalState+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_UsageState*       receiveUsageState+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_UsageState*       receiveUsageState+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        // attributes of conditional package `administrativeStatePackage`
      <br/>
      --        DMI_AdministrativeState* receiveAdministrativeState+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_AdministrativeState* receiveAdministrativeState+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        // attributes of conditional package `supportedFeaturesPackage`
      <br/>
      --        DMI_SupportedFeatures* receiveSupportedFeatures+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        DMI_SupportedFeatures* receiveSupportedFeatures+
      <br/>
      --                              OOIStatus          * _status,
      <br/>
      --                              OOIPMORequest      &amp; _requestToken };
      <br/>
      --        //
      <br/>
      --        // request methods to create and delete managed objects
      <br/>
      --        //
      <br/>
      --        // create a managed object
      <br/>
      --        void simpleMCreateRequest+ OOIStatus  * _status,
      <br/>
      --                              OOIPMORequest        &amp; _requestToken,
      <br/>
      --                       const CMIS ObjectInstance * _superiorMOInstanceName =
      <br/>
      --  NULL,
      <br/>
      --                       const DMI_ProxySystem   * _referenceObject = NULL,
      <br/>
      --                       // only two attributes of class Top
      <br/>
      --                       const DMI_NameBinding       * nameBinding = NULL,
      <br/>
      --                       const DMI_Packages          * packages = NULL,
      <br/>
      --                       // attributes of mandatory package `systemPackage`
      <br/>
      --                       const DMI_SystemId*          systemId = NULL,
      <br/>
      --                       const DMI_SystemTitle*       systemTitle = NULL,
      <br/>
      --                       const DMI_OperationalState*    operationalState =
      <br/>
      --  NULL,
      <br/>
      --                       const DMI_UsageState*        usageState = NULL,
      <br/>
      --                       // attributes of conditional package
      <br/>
      --  `administrativeStatePackage`
    </p>
    <p num="223">
      --                       const DMI_AdministrativeState* administrativeState =
      <br/>
      --  NULL,
      <br/>
      --                       // attributes of conditional package
      <br/>
      --  `supportedFeaturesPackage`
      <br/>
      --                       const DMI_SupportedFeatures*   supportedFeatures =
      <br/>
      --  NULL
      <br/>
      --                      };
      <br/>
      --        // delete a managed object (inherited from class OOIProxyMO)
      <br/>
      --        //void  simpleMDelete+ OOIStatus             * _status,
      <br/>
      --        //                    OOIPMORequest         &amp; _requestToken };
      <br/>
      --        //
      <br/>
      --        // requst method to get some or all attributes
      <br/>
      --        //
      <br/>
      --        void simpleMGetSomeRequest+ OOIStatus            * _status,
      <br/>
      --                                  OOIPMORequest+  &amp; _request(Token };
      <br/>
      --                       // attributes of class Top
      <br/>
      --                       CMIS ObjectClass      ** objectClass,
      <br/>
      --                       DMI_NameBinding       ** nameBinding,
      <br/>
      --                       DMI_Packages          ** packages,
      <br/>
      --                       DMI_Allomorphs        ** allmomorphs,
      <br/>
      --                       // attributes of mandatory package `systemPackage`
      <br/>
      --                       DMI_SystemId**       systemId,
      <br/>
      --                       DMI_SystemTitle**     systemTitle,
      <br/>
      --                       DMI_OperationalState** operationalState,
      <br/>
      --                       DMI_UsageState**      usageState,
      <br/>
      --                       // attributes of conditional package
      <br/>
      --  `administrativeStatePackage`
      <br/>
      --                       DMI_AdministrativeState** administrativeState,
      <br/>
      --                       // attributes of conditional package
      <br/>
      --  `supportedFeaturesPackage`
      <br/>
      --                       const DMI_SupportedFeatures* supportedFeatures = NULL
      <br/>
      --           };
      <br/>
      --        //
      <br/>
      --        // instance creation and narrowing
      <br/>
      --        //
      <br/>
      --        static OOIProxyMO *    create( );
      <br/>
      --        static DMI_ProxySystem * narrow+ const OOIProxyMO   * source,
      <br/>
      --                                  OOICheckModel   chkMode = OOI_CHK_TYPE_RC
      <br/>
      --  };
      <br/>
      --        virtual OOIProxyMO *  widen( ) const;
      <br/>
      -- };
      <br/>
      -- -endif // _DMI_PROXY_SYSTEM_INCLUDED--
    </p>
    <p num="224">
      --
      <br/>
      -- Listing 7: Notification Base Class
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ****/
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    Licensed Materials - Property of IBM                            */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    5799-QLN                                                        */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /**    .COPYRGT. Copyright IBM corporation 1995
      <br/>
      --  */
      <br/>
      -- /**                                                                    */
      <br/>
      -- /
      <br/>
      --  **************************************************************************
      <br/>
      -- ****/
      <br/>
      -- -ifndef _OOI_NOTIFICATION_INCLUDED--
      <br/>
      -- -define _OOI_NOTIFICATION_INCLUDED--
      <br/>
      -- //
      <br/>
      -- // class OOINotification
      <br/>
      -- //
      <br/>
      -- // this abstract class is the base class of all notification classes
      <br/>
      -- //
      <br/>
      -- class OOINotification : public OOIIndicationOrNotification +
      <br/>
      --  friend class OOIPropyAgentXX;
      <br/>
      --      //
      <br/>
      --      // standard constructors/destructors
      <br/>
      --      //
      <br/>
      --  private:
      <br/>
      --      // default constructor, disabled
      <br/>
      --      OOINotification( );
      <br/>
      --      // copy constructor, disabled
      <br/>
      --      OOINotification( const OOINotification&amp; rhs );
      <br/>
      --      // standard assignment operator, disabled
      <br/>
      --      OOINotification&amp; operator=( const OOINotification&amp; rhs );
      <br/>
      --  public:
      <br/>
      --      // destructor
      <br/>
      --      virtual .asterisk-pseud.OOINotification( );
      <br/>
      --  protected:
      <br/>
      --      //
      <br/>
      --      // type specific
      <br/>
      --      //
      <br/>
      --      // initialization constructor
      <br/>
      --      OOINotification+
      <br/>
      --                    const OOINotificationQueue * queueReference,
      <br/>
      --                    int                      invokeId,
      <br/>
      --                    OOIBoolean               toBeConfirmed,
      <br/>
      --                    OOIError                * error,
      <br/>
      --                    const ASN1Type          * date,
      <br/>
      --                    const OOINotificationMetaInfo * metaInfo );
      <br/>
      --      OOINotification+ const OOINotificationMetaInfo * metaInfo
      <br/>
      --               };
      <br/>
      --      void set+ const OOINotificationQueue  * queueReference,
      <br/>
      --                     int                        invokeId,
      <br/>
      --                     OOIBoolean                 toBeConfirmed,
      <br/>
      --                     OOIError                  * error,
      <br/>
      --                     const ASN1Type            * data );
      <br/>
      --  public:
      <br/>
      --      // reference to own queue
      <br/>
      --      OOINotificationQueue * queueReference( ) const;
      <br/>
      --      const OOINotificationMetaInfo = metaInfo( ) const;
      <br/>
      --      virtual const OID     &amp; oid( ) const;
      <br/>
      --      // generic interface
      <br/>
      --      // access to info syntax
      <br/>
      --      ASN1Type *              informationSyntaxGeneric( );
      <br/>
      --      // event argument access:
      <br/>
      --      const CMIS_EventReportArgument&amp; eventReportArgument( ) const;
      <br/>
      --      // reply methods:
      <br/>
      --      void replyGeneric+
      <br/>
      --               OOIStatus                 * ooiStat,            // OUT, if &lt;
      <br/>
      --  &gt; NULL
      <br/>
      --               const ASN1Type            * replyValue = NULL ); // IN, may
      <br/>
      --  be NULL
      <br/>
      --                                                  // NULL &lt;--&gt; no reply
      <br/>
      --  syntax
      <br/>
      --      void eventReply+
      <br/>
      --               OOIStatus                 * ooiStat            // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --               const CMIS_EventReportResult &amp; reply };
      <br/>
      --      void errorReply+
      <br/>
      --               OOIStatus                 * ooiStat,           // OUT, if &lt; &gt;
      <br/>
      --  NULL
      <br/>
      --               const OOICMISError        &amp; reply };
      <br/>
      --      // create notification from OID
      <br/>
      --      static OOINotification * creatNotificationFromOID+
      <br/>
      --               const OID          &amp; oid,
      <br/>
      --               OOIBoolean           createGenericNotificationIfOIOUnknown =
      <br/>
      --  true,
      <br/>
      --               OOIErroMode          errorMode = OOI_ERR_RC
      <br/>
      --      // dump operation, for debugging
      <br/>
      --      virtual void       dump( ostream&amp; os, OOIBoolean withData ) const;
      <br/>
      --      // data members
      <br/>
      -- +private:
      <br/>
      --      OOINotificationMetaInfo * _metaInfo;
      <br/>
      -- };
      <br/>
      -- -endif // _OOI_NOTIFICATION_INCLUDED--
    </p>
    <p num="225">
      --
      <br/>
      -- Listing 8: Generated DMI Object Creation Class
      <br/>
      -- // This file has been generated by the Object Oriented Interface Generator
      <br/>
      --  1995
      <br/>
      -- // Version 1.2.0
      <br/>
      -- //
      <br/>
      -- //   Time: WED NOV 29 18:36:50 1995
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- // SHARED LIBRARIES used
      <br/>
      -- //
      <br/>
      -- //
      <br/>
      -- //   objectCreation NOTIFICATION
      <br/>
      -- //     BEHAVIOUR
      <br/>
      -- //      objectCreationBehaviour
      <br/>
      -- //      WITH INFORMATION SYNTAX Notification-ASN1Module.DMI_ObjectInfo
      <br/>
      -- //      AND ATTRIBUTE IDS
      <br/>
      -- //        sourceIndicator  sourceIndicator
      <br/>
      -- //        attributeList  attributeList
      <br/>
      -- //        notificationIdentifier  notificationIdentifier
      <br/>
      -- //        correlatedNotifications  correlatedNotifications
      <br/>
      -- //        additionalText  additionalText
      <br/>
      -- //         additionalInformation  additionalInformation
      <br/>
      -- //   REGISTERED AS +2.9.3.2.10.6}
      <br/>
      -- -ifndef _NOTIFICATION_DMI_OBJECT_CREATION_INCLUDED--
      <br/>
      -- -define _NOTIFICATION_DMI_OBJECT_CREATION_INCLUDED--
      <br/>
      -- -include "DMI_DOCUMENT.H"
      <br/>
      -- -include "OOIQueues.H"
      <br/>
      -- -include "DMI_ObjectionInfo.H"
      <br/>
      -- -include "DMI_SourceIndicator.H"
      <br/>
      -- -include "DMI_AttributeList.H"
      <br/>
      -- -include "DMI_NotificationIdentifier.H"
      <br/>
      -- -include "DMI_CorrelatedNotifications.H"
      <br/>
      -- -include "DMI_AdditionalText.H"
      <br/>
      -- -include "DMI_AdditionalInformation.H"
      <br/>
      -- class DMI_objectCreation : public OOINotification
      <br/>
      -- +
      <br/>
      --      //
      <br/>
      --      // standard methods
      <br/>
      --      //
      <br/>
      --      public:
      <br/>
      --      // default constructor
      <br/>
      --      DMI_objectCreation( );
      <br/>
      --      // destructor
      <br/>
      --      virtual -DMI_objectCreation( );
      <br/>
      --      private:
      <br/>
      --      // copy constructor, disabled
      <br/>
      --      DMI_objectCreation( const DMI_objectCreation &amp; rhs );
      <br/>
      --      // assignment operator, disabled
      <br/>
      --      DMI_objectCreation &amp; operator=+ const DMI_objectCreation &amp; rhs };
      <br/>
      --      public:
      <br/>
      --      //
      <br/>
      --      // information &amp; reply syntax
      <br/>
      --      //
      <br/>
      --      // return INFORMATION SYNTAX
      <br/>
      --      const DMI_ObjectInfo*  informationSyntax( );
      <br/>
      --      // send REPLY SYNTAX
      <br/>
      --      void   reply( OOIStatus * _status = NULL ); // OUT, if &lt; &gt; NULL
      <br/>
      --      //
      <br/>
      --      // access to attribute ids ( WITH ALTERNATIVE IDS clause )
      <br/>
      --      //
      <br/>
      -- //   NOTE:   if the component of the underlying ASN.1 type (SEQUENCE)
      <br/>
      --  related to
      <br/>
      -- //           a field is optional, NULL will be returned if the
      <br/>
      --  corresponding attribute
      <br/>
      -- //           has not been sent.
      <br/>
      --      DMI_SourceIndicator*  sourceIndicator( );
      <br/>
      --      DMI_AttributeList*  attributeList( );
      <br/>
      --      DMI_NotificationIdentifier*  notificationIdentifier( );
      <br/>
      --      DMI_CorrelatedNotifications*  correlatedNotifications( );
      <br/>
      --      DMI_AdditionalText*  additionalText( );
      <br/>
      --      DMI_AdditionalInformation*  additionalInformation( );
      <br/>
      --      //
      <br/>
      --      // weak type interface support
      <br/>
      --      //
      <br/>
      --      static OOINotification    * create( );
      <br/>
      --      static DMI_objectCreation * narrow( const OOINotification * source,
      <br/>
      --                      OOICheckModeT chkMode = OOI_CHK_TYPE_RC );
      <br/>
      -- };
      <br/>
      -- -endif
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>Having thus described our invention, what we claim and desire to protect by Letters Patent is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>An object-oriented programming interface for developing and running a plurality of network management applications on a network communication infrastructure, wherein each of said management applications has access to and can manipulate a plurality of managed objects which are accessible at a plurality of remote managed agents through the communication infrastructure and can exchange management information between the management applications and the remote managed agents, and wherein the plurality of managed objects are defined by a corresponding plurality of managed object classes and are specified in an object-oriented syntax notation defining data types;</claim-text>
      <claim-text>said programming interface comprising:</claim-text>
      <claim-text>object interface composing means for generating code which provides a plurality of proxy managed object classes as local representatives for the plurality of managed object classes, a plurality of object classes for types defined in said syntax notation, a plurality of notification classes for incoming notifications, and a plurality of object-oriented methods for manipulating a plurality of specified managed objects; run time system means for providing a plurality of proxy agent object classes as representatives for the plurality of remote managed agents which provide access to the operations of the common management information services; wherein the code generated by the object interface composing means is linked to the run time system for execution.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The programming interface according to claim 1, wherein the object interface composing means generates C++ code, the application programs are written in C++, and the plurality of proxy managed object classes and the ASN classes are object classes in C++.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The programming interface according to claim 1 or 2, wherein the object interface composing means generates automatically proxy managed object C++ class definitions and implementation files based on managed objects written in accordance with the ISO standard GDMO and ASN.1.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The programming interface according to claim 1 or 2, wherein the object interface composing means comprises generating means for the generation of code for said plurality of managed objects based on the specifications of management information in GDMO and in ASN.1.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The programming interface according to claim 1, including means for providing non-direct-addressing proxy agents for which, for each management request, the agent must be addressed explicitly by supplying an addressing parameter as part of the request by means of a context object or implicitly through a directory service.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The programming interface according to claim 5 wherein the object interface composing means generates a C++ class for every GDMO managed object class, a C++ class for each ASN.1 type, a C++ class for every GDMO notification, meta information data structures for GDMO and ASN.1, and a set of utility files.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The programming interface according to claim 1, including means for signalling errors by error objects returned as a function return or through function reference arguments and by error objects thrown by exceptions.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The programming interface according to claim 7, including means for defining error classes representing an inheritance hierarchy.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The programming interface according to claim 1, wherein the inheritance relation between generated proxy managed object classes in C++ reflects the inheritance relation of the managed object classes defined in GDMO and ASN.1 documents.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The programming interface according to claim 9, wherein the definition of managed object classes is derived from more than one superior class thereby providing multiple inheritances.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The programming interface according to claim 1, wherein said plurality of managed objects are fully embedded into C++ to allow strong type checking at compile time.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The programming interface according to claim 1, wherein said incoming notifications are stored in an event queue object.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The programming interface according to claim 1, wherein the plurality of proxy agent objects provide a service interface to the operations of the common management information services.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The programming interface according to claim 1, including means for providing direct-addressing proxy agents which can connect to one specific agent at a time.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The programming interface according to claim 1 wherein the proxy agents provide a set of additional methods including simple-create, simple-get, simple-action and simple-delete to perform operations on only one attribute of one managed object or on several attributes of a single managed object.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The programming interface according to claim 1, wherein the run time system receives notifications and stores them in the event queue means of the responsible proxy agent object.</claim-text>
    </claim>
  </claims>
</questel-patent-document>