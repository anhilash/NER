<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185210B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185210</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185210</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25475227" extended-family-id="42113205">
      <document-id>
        <country>US</country>
        <doc-number>08940666</doc-number>
        <kind>A</kind>
        <date>19970930</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08940666</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43171309</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>94066697</doc-number>
        <kind>A</kind>
        <date>19970930</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08940666</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L  12/56        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>56</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04Q  11/04        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>Q</subclass>
        <main-group>11</main-group>
        <subgroup>04</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>370395320</text>
        <class>370</class>
        <subclass>395320</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>370397000</text>
        <class>370</class>
        <subclass>397000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04Q-011/04S2</text>
        <section>H</section>
        <class>04</class>
        <subclass>Q</subclass>
        <main-group>011</main-group>
        <subgroup>04S2</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04Q-011/0478</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>Q</subclass>
        <main-group>11</main-group>
        <subgroup>0478</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-2012/5636</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>2012</main-group>
        <subgroup>5636</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-2012/5642</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>2012</main-group>
        <subgroup>5642</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-2012/5667</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>2012</main-group>
        <subgroup>5667</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04L-012/56A16C4</classification-symbol>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04L-012/56A18B2</classification-symbol>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04L-012/56A18P1</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>20</number-of-claims>
    <exemplary-claim>7</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>11</number-of-drawing-sheets>
      <number-of-figures>11</number-of-figures>
      <image-key data-format="questel">US6185210</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Virtual circuit management for multi-point delivery in a network system</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HAHNE ELLEN L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5014265</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5014265</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>HAHNE ELLEN L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5163046</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5163046</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>LEE WHAY C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5446730</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5446730</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>CALLON ROSS W</text>
          <document-id>
            <country>US</country>
            <doc-number>5583862</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5583862</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>TERASLINNA KARI</text>
          <document-id>
            <country>US</country>
            <doc-number>5706279</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5706279</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>BEN-NUN MICHAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5724513</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5724513</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>LIANG CHUNG C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5781529</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5781529</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>BRODY RICHARD J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5822304</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5822304</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>CALLON ROSS W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5854899</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5854899</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>ARAS CAGLAN M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5867653</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5867653</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>PERLMAN RADIA J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5511168</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5511168</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>FARINACCI DINO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5519704</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5519704</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>LIU VINCE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5530703</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5530703</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>CISCO SYSTEMS INC</text>
          <document-id>
            <country>WO</country>
            <doc-number>9613922</doc-number>
            <kind>A2</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>WO9613922</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>BBN Corporation</orgname>
            <address>
              <address-1>Cambridge, MA, US</address-1>
              <city>Cambridge</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>BBN</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Troxel, Gregory D.</name>
            <address>
              <address-1>Stow, MA, US</address-1>
              <city>Stow</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Suchyta, Leonard Charles</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Weixel, James K.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Olms, Douglas W.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A system and method for optimizing and managing Qos (Quality of Service) in a network system including a plurality of open point-to-multipoint virtual circuits (VC)s between various endpoint sites, for example in multicast systems.
      <br/>
      VC optimization includes determining more appropriate set of VC endpoints to reduce oversent data.
      <br/>
      If below the VC limit, a set of potential VCs is determined, the set excluding combinations with VC connections already open.
      <br/>
      An estimation or calculation is performed to determined a reduction in oversent data that would occur if that a possible VC was opened.
      <br/>
      The possible VC with the greatest reduction in oversent data is then opened.
      <br/>
      Appropriate traffic is moved over to the newly opened VC, and any VCs which no longer have any traffic are closed.
      <br/>
      If a VC limit is reached for a node, a different optimization technique is used.
      <br/>
      A set of possible VCs to endpoint sites is determined.
      <br/>
      From this set, a new VC to open is selected which, if opened, would cause the greatest reduction in oversent data.
      <br/>
      From the presently opened VCs, an open VC is selected which, if closed, would cause the least increase in oversent data.
      <br/>
      The new VC is opened, and appropriate traffic and flows are moved to it.
      <br/>
      The open (old) VC is then closed.
      <br/>
      These optimization techniques are alternated with other optimization techniques.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>STATEMENT REGARDING FEDERALLY-SPONSORED RESEARCH</heading>
    <p num="1">The U.S. Government has a paid up non-exclusive, nontransferable license to practice or have practiced for or on behalf of the United States this invention as provided for by the terms of contract No. N66001-96-D8608, awarded by DARPA.</p>
    <heading>BACKGROUND</heading>
    <p num="2">
      A computer network typically comprises a collection of interconnection nodes such as computer systems and switches.
      <br/>
      These may in turn be connected through an irregular configuration of transmission lines, i.e., links.
      <br/>
      The switches are specialized computers used to connect two or more links.
      <br/>
      Data is exchanged among nodes of such an arbitrary topology network by passing packets and messages from switch to switch over the links.
      <br/>
      Specifically, when a packet or message arrives on an incoming link, the switch decides onto which of the outgoing links that packet will be forwarded.
    </p>
    <p num="3">
      In a connection-oriented network, a virtual circuit (VC) is commonly established when exchanging packets between nodes of the network.
      <br/>
      The virtual circuit is a temporary logical path connection that requires a set up procedure to open the virtual circuit prior to transferring the data packets, and a release procedure to close the circuit once the data transfer is complete.
      <br/>
      This obviates the need for effecting routing decisions for each data packet that is transferred between the nodes once the circuit is opened.
      <br/>
      For point-to-point communication, the set up procedure creates a virtual circuit by allocating certain switches and links in the network to establish the "best" route, according to conventional route configuration techniques, between a source node and a destination node.
      <br/>
      However, opening and closing virtual circuits is a time and resource consuming task.
      <br/>
      Further, there are limits as to how many virtual circuits can be opened and supported simultaneously.
    </p>
    <p num="4">
      Virtual circuits can also perform point-to-multipoint connections, where one source node connects to several destination nodes.
      <br/>
      This allows several techniques, including multicasting, which involves transmitting a single multicast packet from a source node and having it received by a group of destination nodes.
    </p>
    <p num="5">
      One use for multicasting is Distributed Interactive Simulation (DIS) applications.
      <br/>
      An example of DIS is military training, although DIS technology can be used for training non-military personnel and to construct distributed virtual-reality games.
      <br/>
      A simulation involving a multitude of actors or objects is set up and maintained in near-real time.
      <br/>
      Typical objects are tanks, trucks, planes, helicopters, ships, and dismounted infantry (soldiers).
      <br/>
      In a simulation, a computer is responsible for modeling some number (typically between 1 and 100) entities.
      <br/>
      Each machine sends packets containing the current state of locally modeled entities, and receives packets containing the current state of remote entities within the region of interest of local entities.
    </p>
    <p num="6">
      DIS can benefit from IP multicasting in that simulation packets are delivered to only those simulators that need them.
      <br/>
      Typically, each entity transmits to one multicast group and joins a number of multicast groups.
      <br/>
      One can imagine a grid in latitude and longitude and sending to a group corresponding to one's location and joining all nearby groups.
    </p>
    <p num="7">
      One technique for providing multicast is called bilevel multicast.
      <br/>
      The central idea of bilevel multicast is the construction of a private virtual multicast network using an existing multipoint delivery service.
      <br/>
      All bilevel multicast routers (BMRS) are peers connected to the multipoint delivery service.
      <br/>
      More features of bilevel multicast will be discussed below.
    </p>
    <p num="8">
      There is a need to use more and more multicast groups for DIS and other applications to obtain finer-grained control over data delivery and deliver less unneeded data.
      <br/>
      There are also constraints which prevent the use of as many multicast groups as are desired.
      <br/>
      Routers cannot support a very large number of groups.
      <br/>
      Multicast routing protocols that can handle a very large number of concurrent multicast groups have not yet been developed.
      <br/>
      Some problems that must be addressed include routing traffic caused by transient joining of groups, the requirement of sufficient router memory to hold multicast routing tables.
    </p>
    <p num="9">
      Another constraint is the inability of hosts to support a large number of subscribed multicast groups efficiently.
      <br/>
      There are two common problems: a shortage of hardware filtering slots, so that the network interface delivers all multicast packets to the operating system; and the lack of efficiency of networking code to deal with one hundred or more subscribed groups.
      <br/>
      Accordingly, efficient delivery of packets to the proper destinations with a minimum of oversent data is very important.
      <br/>
      Oversent data is data sent to more destinations than it is needed.
      <br/>
      Further, the efficient use of bandwidth to deliver as many packets as possible, while observing packet requirements including priority levels.
      <br/>
      Obtaining a proper balance of high packet throughput while guaranteeing high-priority packets are not delayed (often referred to as Quality of Service (QoS)) is extremely problematic.
    </p>
    <p num="10">
      Accordingly, what is needed is a system and method for optimizing a network's virtual circuits (VCs), including minimizing oversent data, and utilizing VC bandwidth for optimum delivery while still maintaining quality of service.
      <br/>
      Further, the optimizations should perform well with the transient nature of nodes joining and leaving multicast groups, and VCs opening and closing in response to the multicast membership changes.
    </p>
    <heading>SUMMARY</heading>
    <p num="11">
      The present invention is directed towards a system and method for optimizing flow control through a node in a network system, where messages forwarded to the node have one of at least two priorities, a normal priority and a high priority.
      <br/>
      It includes a token counter associated with a flow into the node, the token counter holding a numeric value representing a number of tokens.
      <br/>
      The token counter is incremented at a predetermined rate of tokens per second, and has a maximum value.
    </p>
    <p num="12">
      The token counter is decremented by a number of tokens as required for passing an arriving message in that flow through the node.
      <br/>
      The number of tokens required for passing the arriving message is determined by attributes of the arriving message, for example one token for each byte of message size.
    </p>
    <p num="13">
      A normal priority threshold value is associated with the token counter.
      <br/>
      If a message with a high priority arrives at the node, the message is marked non-conforming if the token counter is below the number of tokens required for passing said message.
      <br/>
      If a message with a normal priority arrives at node, the message is marked non-conforming if the token counter is below the number of tokens required for passing said message plus the normal priority threshold value.
    </p>
    <p num="14">Messages marked non-conforming in the first stage may be dropped, or passed on the more policing processing, or sent out of the node with appropriate standard tagging for network messages over a flow.</p>
    <p num="15">
      The system and method also includes a second stage, which includes an aggregate token counter, for holding a numeric value representing a number of tokens, the aggregate token counter is incremented at a predetermined rate of tokens per second, and is decremented by a number of tokens as required for passing the arriving message through the node, the number of tokens required for passing said arriving message is determined by attributes of the arriving message.
      <br/>
      This aggregate token counter also includes a maximum limit value.
    </p>
    <p num="16">
      An aggregate normal priority threshold value is associated with the aggregate token counter.
      <br/>
      If a message with a high priority was not marked non-conforming in the first stage, the message is marked non-conforming in the second stage if the aggregate token counter is below the number of tokens required for passing the message.
      <br/>
      If a message with a low priority was not marked non-conforming in the first stage, the message is marked non-conforming in the second stage if the aggregate token counter is below the number of tokens required for passing said message plus the normal priority threshold value.
    </p>
    <p num="17">Messages marked non-conforming in said second stage may be dropped or sent out appropriately tagged for the network flow.</p>
    <p num="18">
      The system and method also includes an aggregate headroom threshold value associated with the aggregate token counter, the aggregate headroom threshold value being greater than the aggregate normal priority threshold value.
      <br/>
      If a message was marked non-conforming in the first stage (or was marked non-conforming by a previous node or router), the message is marked conforming if the aggregate token counter is at or above the number of tokens required for passing the message plus the aggregate headroom threshold value.
    </p>
    <p num="19">
      In one embodiment, the number of tokens required for passing a message is related to the cost of sending said message out over a particular network.
      <br/>
      Types of networks include an IP network, where messages marked as non-conforming are sent out as routine status, and messages marked as conforming are sent out as elevated status; and an ATM network, and messages marked as non-conforming are sent out as CLP-1, and messages marked as conforming are sent out as CLP-0.
    </p>
    <p num="20">
      The present invention also is directed towards optimizing and managing Qos (Quality of Service) among VCs for point-to-multipoint connections.
      <br/>
      In a network system including a plurality of open point-to-multipoint virtual circuits (VC)s between various endpoint sites, a method of optimizing traffic flow is presented.
    </p>
    <p num="21">
      A set of possible VCs is determined, the set excluding combinations with VC connections already open.
      <br/>
      For each possible VC in the set, an estimation or calculation is performed to determined a reduction in oversent data that would occur if that possible VC was opened.
      <br/>
      The possible VC with the greatest reduction in oversent data is then opened.
      <br/>
      Appropriate traffic is moved over to the newly opened VC, and any VCs which no longer have any traffic are closed.
    </p>
    <p num="22">Other methods of optimizing traffic flow including resizing the Qos (quality of service) requirement of an existing open VC, or opening a similar VC (with the same endpoint set), with the new Qos requirements, and moving appropriate flows over to the new VC, and closing down the old VC.</p>
    <p num="23">
      If a (real or predetermined) VC limit is reached for a node, the present invention includes a method for optimization.
      <br/>
      A set of possible VCs to endpoint sites is determined.
      <br/>
      From this set, a new VC to open is selected which, in the preferred embodiment, if opened, would cause the greatest reduction in oversent data.
      <br/>
      From the presently opened VCs, an open VC is selected which, in the preferred embodiment, if closed, would cause the least increase in oversent data.
    </p>
    <p num="24">
      If the new VC is different from the open VC, then new VC is opened, and appropriate traffic and flows are moved to it.
      <br/>
      The open (old) VC is then closed.
    </p>
    <p num="25">
      If the selected possible VC can not be opened, an identification of that possible VC is placed on a list of VCs which could not be opened.
      <br/>
      When determining the set of possible VCs to the endpoint sites, VCs identified by the list of VCs which could not opened will be excluded.
      <br/>
      This list is periodically cleared of all entries.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="26">
      FIG. 1 is an pictorial overview of a network system;
      <br/>
      FIG. 2 is the pictorial overview of the network system of FIG. 1, with some example point to multipoint Virtual Circuits (VC) created between nodes;
      <br/>
      FIG. 3 shows an example Distributed Interactive Simulation (DIS) site.
      <br/>
      FIG. 4 shows how data is encapsulated at different interfaces to the Qos-Capable Bilevel Multicast Router (qcbmr);
      <br/>
      FIG. 5 shows a basic process structure of Qos-Capable Bilevel Multicast Router (qcbmr).
      <br/>
      FIG. 6 is a flowchart of steps performed for optimizing traffic flow when a qcbmr is below the VC limit, according to one embodiment of the invention;
      <br/>
      FIG. 7 is a flowchart of steps performed for optimizing traffic flow when a qcbmr is at the VC limit, according to one embodiment of the invention;
      <br/>
      FIG. 8 block diagram showing how token buckets feed forward for several flows into a node;
      <br/>
      FIG. 9 is an overview of priority policing according to another embodiment of the present invention;
      <br/>
      FIG. 10 is an overview of two-stage policing according to another embodiment of the present invention;
      <br/>
      FIG. 11 is a block diagram providing more details of two-stage policing as shown in FIG. 10.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="27">
      An example ATM (Asynchronous Transfer Mode) network 20 is shown in FIG. 1.
      <br/>
      The "ATM Cloud" is a set of nodes (for example node 24 and 25) which have established paths 27 between other networks 22.
      <br/>
      The networks 22 can be of any type including LAN and WAN, or backbones to other systems.
    </p>
    <p num="28">
      In an ATM system, virtual circuits (VCs) are established in point-to-point or point-to-multipoint arrangements using the paths 27 and nodes 25.
      <br/>
      For example, as shown in FIG. 2, VC 26 is established from network 22a to network 22d and 22e.
      <br/>
      Also, a second VC 28 is established from network 22b to network 22c and 22f.
    </p>
    <p num="29">
      Ideally, networks 22a, 22d and 22e as connected by VC 26 are one multicast group, and data and packets sent to those networks will only reach the nodes as necessary for that multicast group.
      <br/>
      However, data and copies of data must often be sent to more nodes than necessary to guarantee delivery to the appropriate group of destinations.
      <br/>
      With a VC created for each multicast group, there is exponential growth as more multicast groups are created and modified.
    </p>
    <p num="30">
      FIG. 3 shows the elements of an example DIS site.
      <br/>
      The simulators are shown connected to an ethernet 30.
      <br/>
      To this Ethernet 30 are connected a router 32 and a qcbmr 34, which are interconnected via a 100 Mb/s Ethernet 36.
      <br/>
      The router 32 is any commercial router configured to forward only IP unicast traffic.
      <br/>
      The qcbmr 34 is used for forwarding IP multicast traffic.
      <br/>
      The two NNI switches 38 are used to concentrate traffic coming (over a network 40 for example, a UNI 3.1 network) from the router 32 and the qcbmr 34 to the ATM network 20.
      <br/>
      Alternatively, a single switch 38 could be used having both the router 32 and the qcbmr 34 connected to it.
    </p>
    <p num="31">The qcbmr 34 is currently implemented using an Intel Pentium.RTM. or Pentium Pro.RTM. PC, including a 100 mbit/second ethernet card, and an OC-3C 155 mbit/second interconnection (for example Efficient Networks interconnection) and running NetBSD.</p>
    <p num="32">
      FIG. 4 shows how DIS data is encapsulated at the different interfaces to the qcbmr 34.
      <br/>
      At the interface to the Simulators (31 FIG. 3), the encapsulating protocols are Ethernet, IP, and UDP.
      <br/>
      At the interface to the Router, the encapsulating protocols are Ethernet, IP, IP, and UDP (including double IP encapsulation).
      <br/>
      At the interface to the ATM card (switch 38), in the qcbmr, the encapsulating headers are LLC-SNAP, IP, and UDP.
      <br/>
      At the interface to the FASTLANE, the previous frame has been split into cells and AAL5 information has been added to each cell.
    </p>
    <p num="33">
      In terms of bilevel multicast a private virtual multicast network using an existing multipoint delivery service is constructed.
      <br/>
      All bilevel multicast routers (BMRs) are peers connected to the multipoint delivery service.
    </p>
    <p num="34">
      There should exist some set of named multipoint delivery objects.
      <br/>
      These could be IP multicast groups, simply named by the multicast IP destination address.
      <br/>
      These could also be ATM virtual circuits (VCs), ST2 streams, or any other mechanism which allows one BMR to convey data to a set of other BMRs.
      <br/>
      A feature is that the multipoint mechanism need not be reliable.
    </p>
    <p num="35">
      For each BMR, there should be a multipoint delivery object with at least all other BMRs as recipients.
      <br/>
      In the IP case, this requirement can be satisfied with an "all-BMR" multicast group, and in the ATM case, it can be satisfied by having each BMR open an SVC (or have an open PVC) with all other BMRs as leaves.
    </p>
    <p num="36">
      The simplest case is IP/IP 2N bilevel, where the underlying service is IP multicast, and approximately 2n multicast groups are used for n BMRs --one group for each member of the power set of BMRs.
      <br/>
      The BMR with index i (from 0 to n-1) is a member of the jth group if bit i is set in j. If there are 10 BMRs, and the underlying service multicast groups are 230 0 (slashed zero) 0.0 through 230 0 (slashed zero) 3.255, then BMRs 0, 1, 4, and 9 would each join group 230 0 (slashed zero) 2.19. Note that each BMR joins approximately half of the underlying service multicast groups.
      <br/>
      This scheme does not work well if n is large, and we later discuss mechanisms for when n is so large that using 2n multipoint delivery objects is problematic, as well as a scheme for ATM.
    </p>
    <p num="37">To implement this virtual multicast network, each bilevel multicast router (BMR):</p>
    <p num="38">
      determines local membership in constructed multicast service (CMS) groups (using IGMP, exactly as a conventional multicast router would).
      <br/>
      distributes the list of local memberships to all other BMRs so that each knows which CMS groups are needed by which BMR.
      <br/>
      knowing the membership of BMRs in underlying multicast service (UMS) groups and which CMS groups are needed by each BMR, computes the UMS group to be used for each CMS group so that packets addressed to the CMS group are delivered to at least the BMRs with local members of that groups.
      <br/>
      on receipt of an CMS packet from the local attached network, decrements the TTL, and forwards it via the appropriate UMS group.
      <br/>
      For the IP/IP case, this means encapsulating it in IP, with the outer header having the correct UMS group as destination.
      <br/>
      For ATM, it means sending it on the appropriate VC.
      <br/>
      on receipt of a (possibly encapsulated) CMS packets from the UMS, decrements the TTL and delivers it to the attached network if there are local members.
    </p>
    <p num="39">
      A central point of bilevel multicast is that it can construct a service with properties needed by users from a service that has properties that are reasonable from a network point of view.
      <br/>
      This implementation of multicast routing at the edges of a network can isolate the network providers from the group joining and leaving behavior of the users.
      <br/>
      An example of this is when a user community wants to use 10000 or more multicast groups, and the backbone provider does not wish to provide multicast routing with adequate table space for that many groups, or when the provider does not want the routers to handle the requisite multicast routing traffic.
    </p>
    <p num="40">
      IP/IP Bilevel multicast can function well with a modest underlying multicast service (UMS):
      <br/>
      moderate number of groups (2N for N sites, or even fewer as described below)
      <br/>
      very large join times in UMS are acceptable
    </p>
    <p num="41">
      Bilevel multicast provides a very capable multicast service as the constructed multicast service (CMS):
      <br/>
      large number of groups (64K, for example) (independent of the number of supported UMS groups)
      <br/>
      low join times (on the order of a one-way trip time (OTT))
    </p>
    <p num="42">
      In bilevel multicast all of the control traffic of the CMS is data to the UMS.
      <br/>
      That is, all of the communications between bilevel routers about which CMS groups are needed where are data to the routers and switches of the UMS, rather than being routing traffic which must be processed.
      <br/>
      This is advantageous for three reasons.
      <br/>
      First, the routers (or switches) of the UMS do not participate in the bilevel routing protocol, and therefore do not have to allocate resources for this function.
      <br/>
      Second, it means that the BMR-BMR routing information transfer latency is the one-way trip time across the UMS, plus any processing delays at the two BMRs.
      <br/>
      There are no processing delays at the intermediate routers of the UMS, since they are merely forwarding data.
      <br/>
      Third, one can run a bilevel multicast implementation on a given multicast service without needing permission from the UMS operator, since bilevel appears to the UMS as a multicast user.
    </p>
    <p num="43">
      All bilevel routers are direct peers of each other.
      <br/>
      Bilevel routers communicate with each other directly using the underlying multicast service, and that they do not send constructed service datagrams received from another bilevel router to a third bilevel router.
      <br/>
      Thus, no bilevel router acts as an intermediate hop.
    </p>
    <p num="44">
      There are two classes of multicast routing protocols, join-driven and data-driven.
      <br/>
      The earliest, referred to as dense-mode, or data-driven, forward data via a flooding mechanism until they receive prune messages from parts of the distribution tree that do not need data for that group.
      <br/>
      PIM-dense and DVMRP fall into this category.
      <br/>
      With a data-driven protocol, routing state is propagated by the transmission of data packets.
      <br/>
      In general, no routing state is propagated by a join (unless "prune" state already exists).
    </p>
    <p num="45">
      The other broad class of routing protocol is referred to as sparse-mode or join-driven.
      <br/>
      In this type of protocol, sending data does not propagate routing state.
      <br/>
      Joining a group causes routing state to be set up.
      <br/>
      Then, data is forwarded using the previously created state.
      <br/>
      CBT and PIM-sparse are examples of join-driven protocols.
    </p>
    <p num="46">
      When a CMS data packet arrives, it is forward according to existing routing state, and no routing protocol operations are triggered by this arrival.
      <br/>
      When a bilevel router detects that a new group has one or more members, it sends a message (via the Bilevel Multicast Routing Protocol (BMRP)) to its peers, which then update their routing tables.
      <br/>
      Therefore, Bilevel multicast is a join-driven protocol.
    </p>
    <p num="47">
      There are practical limits on the number of CMS groups.
      <br/>
      One is the amount of memory required to hold table entries.
      <br/>
      Each BMR must hold an entry for a group for which any BMR has a local member.
      <br/>
      In addition, there are limits imposed by the rate at which routing messages can be sent.
    </p>
    <p num="48">
      Bilevel multicast is a special case of multilevel multicast, in which a bilevel implementation uses as its UMS a multicast service which may be the CMS of a separate bilevel implementation.
      <br/>
      The fundamental concept of the bilevel approach is the construction of a multicast service with substantially more useful properties than those of the underlying service--the construction of a user-centric service from a network-centric service.
    </p>
    <p num="49">
      Bilevel multicast is a mechanism to aggregate group state to control the amount of routing state needed in the core routers.
      <br/>
      In this regard it is like the use of hierarchical postal addresses, or the use of aggregable prefixes in unicast routing.
      <br/>
      However, the aggregated labels are multicast rather than unicast, and they are not derived from the original (constructed service) addresses themselves, but from routing state maintained by the bilevel scheme.
    </p>
    <p num="50">
      The role of a routing protocol used for bilevel multicast is to transmit the list of multicast groups for which there are local members from each bilevel router to all other bilevel routers.
      <br/>
      Because bilevel multicast is intended for situations where there are many groups and a high frequency of joins and leaves, the protocol must be efficient under those circumstances.
      <br/>
      The protocol must be robust in that it must operate correctly as bilevel routers appear, restart, and disappear.
    </p>
    <p num="51">
      With regard to bilevel multicast when the UMS is IP multicast, special situations are presented.
      <br/>
      The possible number of connections between routers can be determined and optimized.
      <br/>
      Let N be the number of bilevel multicast routers (BMRs).
      <br/>
      Given a set of N names of bilevel routers S, one would like to have one multicast group for every member of the set of subsets of S: +s.vertline.s.OR right.S}. This is the power set of S, and there are 2N members.
      <br/>
      However, it is clearly unnecessary to use a multicast group for the empty set containing no members of S. So, the number of multicast groups needed is 2N-1.
    </p>
    <p num="52">
      A further reduction is achieved if one is willing to send some traffic via the unicast routing of the UMS rather than multicast.
      <br/>
      In this case, UMS groups that contain only one BMR can be eliminated.
      <br/>
      There are N such groups, one containing each BMR.
      <br/>
      So, the number of multicast groups need in this case is 2N -N-1.
      <br/>
      For N=7, this is 120; it is not appreciably different from 2N.
      <br/>
      One might wish to send traffic to single-BMR multicast groups rather than sending the traffic unicast if unicast and multicast routing are substantially different.
    </p>
    <p num="53">
      Upon receiving a multicast datagram from the CMS-side interface, a BMR MUST first decrement the TTL of the datagram, and discard it if it is zero.
      <br/>
      Then, it examines the destination multicast (CMS) address of the packet.
      <br/>
      From the information exchanged by the routing protocol in use (such as BMRP), it determines the set of remote BMRs that should receive the packet.
      <br/>
      It then finds the UMS group with that subset of BMRs as members.
      <br/>
      The packet is encapsulated in an outer IP packet by prefixing an IP header.
      <br/>
      The source address is the BMR's address on the UMS-side interface.
      <br/>
      The destination address is the UMS group chosen above.
      <br/>
      The TTL is set to an administratively configured value sufficient to reach all peer BMRs.
      <br/>
      The TOS byte is copied from the original IP header, as is the DF bit.
      <br/>
      The Next Protocol field should be set to "Internet Protocol".
      <br/>
      The newly constructed packet is then forwarded via the UMS-side interface.
    </p>
    <p num="54">
      Upon receipt, the packet is deincapsulated.
      <br/>
      Each BMR joins the appropriate groups on the UMS-side interface.
      <br/>
      Upon receipt of a packet on one of these groups on the UMS-side interface with Next Protocol field "IP", the BMR strips and discards the outer IP header.
      <br/>
      Then, it processes the inner IP datagram.
      <br/>
      First, it MUST decrement the IP TTL and discard the packet if it is zero.
      <br/>
      Then, it checks whether the CMS destination address is one for which there is a local member.
      <br/>
      If so, the packet is transmitted via the CMS-side interface.
      <br/>
      Otherwise, the packet is silently discarded.
      <br/>
      There are two reasons why a packet addressed to a group with no local members may be received during normal operation.
      <br/>
      Routing state may have changed recently, and the destination group may no longer be needed locally.
      <br/>
      Another is that a BMR may have sent a packet via a UMS group that contains more BMRs than the required set; this case is discussed below.
    </p>
    <p num="55">
      A multicast packet sent by a CMS host will in general see two routers as intermediate hops: the bilevel router serving the network of the host, and the bilevel router serving the network where the packet is delivered.
      <br/>
      Each of these routers will decrement the TTL.
      <br/>
      When the encapsulated packet is processed by routers of the UMS, the TTL of the `outer` IP header is decremented, but the inner IP header, which is now `data` is not modified.
      <br/>
      The possibly many hops in the UMS are part of the link between the two bilevel routers.
      <br/>
      This scheme does not violate the rule that a router must decrement the TTL when forwarding a packet, as a bilevel router does decrement the TTL of an IP packet when it makes a routing decision about that packet.
    </p>
    <p num="56">Since IP is a datagram service and does not guarantee packet ordering, there is no concern with whether a bilevel implementation will cause packets to be reordered.</p>
    <p num="57">
      While only a moderate number of UMS groups are required for a small number of BMRs, the number of UMS groups becomes excessive for 20 or 30 BMRs because the number of UMS groups is exponential in the number of bilevel routers.
      <br/>
      In this case, bilevel multicast no longer limits the number of UMS groups used.
      <br/>
      It does, however, still cause the CMS routing information to be data to the UMS.
    </p>
    <p num="58">
      One way to address this is to use a sparse subset of the 2N groups.
      <br/>
      A sparse subset R of the set of 2N possible groups S is chosen.
      <br/>
      Even if the size of R is still exponential with respect to N, a sparse subset is useful if it allows 30 bilevel routers to function with a number of UMS groups that is achievable, such as 1024.
    </p>
    <p num="59">
      Alternate sparse subsets are possible, and could be chosen based upon observed traffic patterns or further study.
      <br/>
      With the simple scheme above, having 30 BMRs is reasonable with m=3 or m=4, requiring 1023 or 255 UMS groups, respectively.
    </p>
    <p num="60">
      A dynamic scheme solution is possible, where the membership of BMRs in UMS groups changes under the control of the routing scheme.
      <br/>
      One could allocate a certain number of UMS groups to each BMR, and have it send commands to other BMRs to join and leave those groups.
      <br/>
      Each BMR would then choose a subset of S depending on the current set of destinations.
    </p>
    <p num="61">
      Bilevel multicast has been implemented and tested.
      <br/>
      The first prototype BMR implementation was entirely in user space on an SGI workstation, including data forwarding.
      <br/>
      The UMS was provided by Bay Networks routers connected by a mesh of ATM pt-pt PVCs and using DVMRP, across 6 physical sites in DC area, Austin and San Diego.
      <br/>
      Seven bilevel routers (two at one site serving separate LANs) supported a 5K entity simulation exercise using about 700 multicast groups, and another simulation with about 1000 groups.
      <br/>
      Some sites had 2K join events over 30 minutes, or on the order of one join per second.
      <br/>
      The BMRs used 126 UMS groups.
    </p>
    <p num="62">
      Bilevel multicast over ATM is fundamentally different than IP-over-IP bilevel multicast because the ATM service model is different from the IP multicast service model.
      <br/>
      In particular, the underlying multicast services do not have similar characteristics.
      <br/>
      Because bilevel multicast does not assume any particular details of the IP multicast service model, it is reasonably straightforward to develop IP-over-ATM bilevel multicast.
      <br/>
      It should be noted that IP over general NBMA bilevel multicast would be similar.
    </p>
    <p num="63">
      With an ATM UMS, each bilevel router may open a number of point-to-multipoint virtual circuits and request that they terminate at some set of remote bilevel routers.
      <br/>
      Then, the BMR may send IP packets to any of these VCs.
      <br/>
      Since bilevel multicast only assumes that each bilevel router has a mechanism to cause IP datagrams to be conveyed to various subsets of other bilevel routers, the mechanism provided by ATM is sufficient.
    </p>
    <p num="64">
      In using multipoint VCs as the UMS, for the simplest case (where a maximal set of groups in the UMS is to be used), each bilevel router opens 2n-1 -1 VCs, going to the members of the set of subsets of all other routers.
      <br/>
      Of the VCs created by a bilevel router, almost all of them will be necessarily point-to-multipoint because they have multiple destinations.
      <br/>
      A small number (n-1) of them could be point-point, as they have one destination.
    </p>
    <p num="65">
      Most of the VCs which terminate at a bilevel router will be "incoming" and leaves of point-to-multipoint VCs created by other bilevel routers.
      <br/>
      This can be seen by observing that the average number of leaves of a VC is roughly (n-1)/2. Therefore, if the VC configuration is fully symmetric with respect to each router, there will be (n-1)/2 incoming VCs for each outgoing VC.
    </p>
    <p num="66">
      These considerations are quite important, because ATM implementations typically place limits on the number of open VCs, and the bilevel scheme does, in the simple case above, reach typical limits of 1-4K with on the order of 10 bilevel routers.
      <br/>
      However, in ATM point-to-multipoint, packets can be replicated by cell switches in the provider's network; this does not incur extra endpoint link trips or duplication on a given link.
    </p>
    <p num="67">
      For the case of less than 2n-1 VCs (ATM LT2N), with a moderate number of bilevel routers, an excessive number of multipoint VCs may be needed to reach each member of the power set of recipients.
      <br/>
      Therefore a strategy is needed for using fewer VCs than the full power set, and for dynamically choosing the set of open VCs.
      <br/>
      It is assumed that there are constraints on the number of VCs a particular BMR may have open.
      <br/>
      These could be a limit on the total number of VCs, the number outgoing VCs, the number of leaves on outgoing VCs, the number of incoming VCs, or other limits.
      <br/>
      There could also be constraints on the number of total VCs open by all bilevel routers.
    </p>
    <p num="68">
      Because ATM VCs are controlled by the sender, and because VCs from different senders going to the same destination do not share control resources, individual routers can choose their own VC set.
      <br/>
      This differs from the IP-over-IP case, where the constraint (when using (S,G)-style multicast protocols) is more likely the total number of active IP multicast groups and having two senders to a one group may not be incrementally more expensive.
    </p>
    <p num="69">
      In order to evaluate a scheme for a bilevel router to choose which VCs to use, the effects on the other routers must be considered.
      <br/>
      As an example, assume that each router is constrained to have no more than v VCs open for bilevel routing purposes, and that each slot may be for an incoming or outgoing VC.
    </p>
    <p num="70">
      The example strategy takes as input the number of VCs available (v) and the number of bilevel routers (N).
      <br/>
      It then assigns use of the VC slots on each bilevel router: 2v/(N+1) for outgoing VCs, and v/(N+1) for incoming VCs for each of the other (N-1) routers.
      <br/>
      Then, each bilevel router may choose the endpoint set for each of its outgoing VCs, except that it must have no more than v/(N+1) VCs that include a particular peer router as a leaf.
    </p>
    <p num="71">Within this constraint, the router is free to open and close VCs in order to optimize delivery of data, ensuring that data is delivered to all appropriate peer bilevel routers and to as few additional ones as possible.</p>
    <p num="72">
      Given bilevel multicast, the question of resource reservation arises.
      <br/>
      For example, a classical router has links of some capacity, and it has to choose how to allocate outgoing capacity, typically doing some kind of packet scheduling and policing functions to choose which packets get transmitted and when.
    </p>
    <p num="73">
      In a bilevel router, however, one of the "output links" is, in the IP-over-IP case, a virtual link or tunnel to some remote set of bilevel routers.
      <br/>
      A bilevel router could reserve capacity over such a virtual link.
      <br/>
      A physical link over which the packets are sent may have more capacity than the reserved virtual link capacity.
      <br/>
      Thus, a router could send more traffic on a virtual link than the capacity of that link.
      <br/>
      For physical links, this is not possible.
      <br/>
      Now, the nature of output management has changed from choosing which packet to send on a fixed-rate link when the link becomes free, to choosing which packets to send to a resource-reserved multicast group.
      <br/>
      If it is assumed that the UMS reservation is in terms of sustained rate and burst size, the output scheduling problem becomes more complex compared to scheduling for fixed-rate lines.
    </p>
    <p num="74">
      In addition, the problem is more complex because the bilevel router can request reservations of differing sizes over time, rather than making do with the administratively-configured line rate.
      <br/>
      Thus, the bilevel router must determine what traffic specification (TSPEC) to use when making a UMS reservation.
      <br/>
      It can do this by examining the reservations made for traffic that it must forward for each of the CMS groups.
    </p>
    <p num="75">
      The basic process structure of the qcbmr 34 is shown in FIG. 5.
      <br/>
      It includes network Interfaces to the LAN 40, WAN 42, and ATM 20 networks.
      <br/>
      The Forwarding/Policing function 44 is included within the qcbmr kernel that performs the bilevel routing operation, translating LAN multicast groups to WAN multicast groups and vice versa.
      <br/>
      It also marks or discards packets, as appropriate, to support the QoS operations.
      <br/>
      The qcbmr Daemon (qcbmrd) 46 is responsible for managing the translation of LAN multicast groups to WAN multicast groups and the associated QoS parameters, and for setting the parameters in the kernel to control routing and policing of traffic.
      <br/>
      The qcbmrd 46 is also responsible for the exchange of multicast translations with other qcbmrs 40 through the Bilevel Multicast Routing Protocol (BMRP); and for the request for VC 26 setup in the ATM 20 network.
    </p>
    <p num="76">
      The RSVP Daemon (RSVPd) 48, receives the path state information from the simulators, which in one embodiment it provides to the WAN 42 and to qcbmrd 46 through PATH messages 50.
      <br/>
      The ATM Daemon (ATMD) 50 participates in the setup and management of ATM VCs.
    </p>
    <p num="77">The forwarding module (both IP/IP and IP/ATM) performs several functions including encapsulation and forwarding of data packets, deincapsulation and delivery of received data packets, monitoring data flows and policing data flows.</p>
    <p num="78">
      Forwarding in the IP/IP Case is handled as follows: Upon receiving a multicast datagram from the CMS-side interface, a BMR first decrements the TTL of the datagram, and discards the packet if the TTL is zero.
      <br/>
      Then it examines the destination multicast (CMS) address of the packet.
      <br/>
      From the information exchanged by BMRP, it determines the set of remote BMRs that should receive the packet.
      <br/>
      It then finds the UMS group with that subset of BMRs as members.
    </p>
    <p num="79">
      The packet is encapsulated in an outer IP packet by prefixing an IP header.
      <br/>
      The source address is the BMR's address on the UMS-side interface.
      <br/>
      The destination address is the UMS group chosen above.
      <br/>
      The TTL should be set to an administratively configured value sufficient to reach all peer BMRs.
      <br/>
      The TOS byte and DF bit are copied from the original IP header.
      <br/>
      The Next Protocol field should be set to "Internet Protocol".
      <br/>
      The newly constructed packet is then forwarded via the UMS-side interface.
    </p>
    <p num="80">
      Each BMR joins the appropriate groups on the UMS-side interface.
      <br/>
      Upon receipt of a packet on one of these groups on the UMS-side interface with Next Protocol field "IP", the BMR strips and discards the outer IP header.
      <br/>
      Then, it processes the inner IP datagram.
      <br/>
      First, it decrements the IP TTL and discard the packet if the TTL is zero.
      <br/>
      Then, it checks whether the CMS destination address is one for which there is a local member.
      <br/>
      If so, the packet is transmitted via the CMS-side interface.
      <br/>
      Otherwise, the packet is silently discarded.
      <br/>
      The access to the kernel routing table to support multicast is via a routing socket.
    </p>
    <p num="81">
      The case of forwarding for IP/ATM enables efficient use of point-to-multipoint ATM VCs, and is as follows: Upon receiving a multicast datagram from the CMS-side interface, a BMR first decrements the TTL of the datagram, and discards the packet if the TTL is zero.
      <br/>
      Then it examines the destination multicast (CMS) address of the packet.
      <br/>
      From the information exchanged by BMRP, it determines the set of remote BMRs that should receive the packet.
      <br/>
      It then finds the VC.
      <br/>
      The packet is then transmitted on that VC.
    </p>
    <p num="82">
      Upon receipt of a packet on one of VCs interface the qcbmr assembles and processes the IP datagram.
      <br/>
      First, it decrements the IP TTL and discard the packet if the TTL is zero.
      <br/>
      Then, it checks whether the CMS destination address is one for which there is a local member.
      <br/>
      If so, the packet is transmitted via the CMS-side interface.
      <br/>
      Otherwise, the packet is silently discarded.
    </p>
    <p num="83">
      Simulators (or agents) speak RSVP, and their requests are for Controlled Load Service.
      <br/>
      The service provided to within-reservation packets should be equivalent to that of an unloaded network.
      <br/>
      Controlled Load flowspec is essentially an (r, b) token-bucket specification.
      <br/>
      The RSVP PATH messages contain the sender's IP address.
      <br/>
      The qcbmrd interprets joining a group as an implicit request for a reservation for all of the data sent to the group.
      <br/>
      With ATM, all receivers should have the same QoS.
      <br/>
      Implicit reservations means that all receivers have the same QoS.
    </p>
    <p num="84">
      The qcbmr QoS Module is responsible for managing WAN resources to serve the needs of simulation LAN groups.
      <br/>
      The QoS module must, then, a) parcel out limited WAN resources, and b) prioritize signaling with the WAN, while maintaining an RSVP signaling relationship with the applications, in which the WAN constraints are hidden.
    </p>
    <p num="85">
      The QoS module runs continually, as a part of the qcbmrd.
      <br/>
      At a high level it cycles and processes input events.
      <br/>
      The input events include:
    </p>
    <p num="86">Case 1: add a qcbmr to a LAN group qcbmr list.</p>
    <p num="87">
      qcbmr_need_group(IPADDRESS qcbmr, IPADDRESS langroup)
      <br/>
      +
      <br/>
      Look up the destination LAN group in the LAN group table.
      <br/>
      If not found, add a new entry with Tspec "epsilon"*.
    </p>
    <p num="88">
      * epsilon is a special Tspec less than any reasonable Tspec, but greater than 0.
      <br/>
      It allows a forwarding table to be computed which serves the new qcbmr, but may be supplanted if a new Tspec is developed.
    </p>
    <p num="89">
      Add qcbmr to the qcbmr list for this LAN group.
      <br/>
      }
    </p>
    <p num="90">
      Case 2: drop a qcbmr from a LAN group's qcbmr list.
      <br/>
      qcbmr_noneed_group(IPADDRESS qcbmr, IPADDRESS langroup)
      <br/>
      +
      <br/>
      Look up the destination LAN group in the LAN group table.
    </p>
    <p num="91">Remove qcbmr from the qcbmr list.</p>
    <p num="92">
      If this was the last qcbmr in the list, and there are no senders to this group, delete LAN group entry.
      <br/>
      }
    </p>
    <p num="93">
      Case 3: Path Processing
      <br/>
      void process_LAN_path(PATH_MSG
      <br/>
      +*path_msg)
      <br/>
      Look up destination LAN group in LAN group table.
    </p>
    <p num="94">If LAN group not found, make a new LAN group block and install in LAN group table.</p>
    <p num="95">
      Look up path msg sender in LAN group entry sender list.
      <br/>
      If sender not found and path msg Tspec �=0, add a new sender entry to the LAN group.
    </p>
    <p num="96">If path msg Tspec �=sender entry Tspec, change sender entry Tspec.</p>
    <p num="97">If new tspec is 0 (i.e. this is path timeout), delete sender.</p>
    <p num="98">If no senders and no qcbmrs, delete entry.</p>
    <p num="99">Set the recompute_Tspec flag in entry.</p>
    <p num="100">
      --
      <br/>
      -- }
      <br/>
      --   Case 4: WAN results
      <br/>
      -- void process_WAN_result()
      <br/>
      -- +
      <br/>
      -- Match the result with the request.
      <br/>
      -- If a new VC was opened, initialize an actual-VC entry.
      <br/>
      If a VC was
      <br/>
      -- closed, delete an actual-VC entry.
      <br/>
      If an open failed, add it to the
      <br/>
      -- Failed Holdoff table.
      <br/>
      -- }
    </p>
    <p num="101">
      Changes in flow or routing state must be reflected in the forwarding table.
      <br/>
      Two update strategies are possible: 1) recompute forwarding for groups that change one-by-one as input events are processed; or 2) note which groups have changed, as they change, and do all the forwarding table computation at once just prior to the QoS cycle.
    </p>
    <p num="102">The Qos module also performs the following cycles, which break down into three pieces: propagate changed Tspec's, perform ATM signaling, and choose how to forward.</p>
    <p num="103">
      For both IP/IP and IP/ATM solutions, the following three-stage approach is used: First, compute aggregated reservations, in which the QoS information is collected from an agent of the simulators in the form of RSVP PATH messages, which are then aggregated for the WAN multicast groups.
      <br/>
      Second, make WAN reservations using methods consistent with the properties of the transport mechanism.
      <br/>
      In the IP/IP case, this depends on the use of RSVP signaling on the multicast groups, in the IP/ATM case the QoS parameters for the VC corresponding to the group are set.
      <br/>
      Finally, choose which UMS group to forward to.
    </p>
    <p num="104">
      The methods for WAN reservations for IP multicast groups and ATM point-to-multipoint VCs are fundamentally different.
      <br/>
      In each case, there is a resource limit in the form of the number of groups or VCs available.
      <br/>
      However, ATM signaling is slow and the number of outstanding requests small, which serializes the operations that open or modify circuit properties.
      <br/>
      Also, RSVP reservation changes can be signaled quickly, although we do not know how long it takes to take effect in the intermediate routers.
    </p>
    <p num="105">
      ATM signaling is either opening new VC's, or resizing existing VC's.
      <br/>
      Individual QoS cycles will alternate between these two options.
      <br/>
      Resizing can be done in two ways: expansion of a VC Tspec to guarantee delivery of more data, or reduction of a VC Tspec to return unneeded bandwidth to the network.
      <br/>
      The VC to be resized is chosen from the actual-VC table, by the criteria:
      <br/>
      largest increase needed (desired Tspec-actual Tspec), or
      <br/>
      largest decrease allowed (actual Tspec-desired Tspec)
    </p>
    <p num="106">
      QoS cycles which resize VC's will alternate between enlarging and reducing VC's.
      <br/>
      A "resize" may be "close VC" if it is no longer needed.
    </p>
    <p num="107">There are two strategies for choosing VC's to open: one to use when below the VC limit for the network port, and one to use when at the limit.</p>
    <p num="108">
      The steps performed for below the VC limit are outlined in FIG. 6.
      <br/>
      Optimization starts, step 200.
      <br/>
      As previously mentioned optimization can take several forms, which in the preferred embodiment includes alternating between resizing an existing VC, and attempting to open a new VC.
      <br/>
      Here, the optimization is attempting to open a new VC.
      <br/>
      The set of sites which do not have VCs open to them is computed, step 202.
      <br/>
      For example, consider sets of qcbmrs to which we would like to deliver a LAN group, which are currently delivered to a superset.
      <br/>
      For each set, compute all the flows that would prefer a new VC opened to that Set, step 205.
      <br/>
      Then compute the reduction in Oversent data if the new VC was opened, step 206.
    </p>
    <p num="109">
      Open a VC to this set, if the VC is not listed in the Failed Holdoff Table, step 208.
      <br/>
      If unable to open that VC step 210, the VC is added to the Failed Holdoff Table, step 212; and the optimization cycle is complete.
      <br/>
      Adding the VC which could not be opened to Failed Holdoff table prevents the (open new VC) optimization cycle from continually trying to open the same VC repeatedly.
      <br/>
      The Failed Holdoff Table is cleared periodically, for example, every thirty seconds.
      <br/>
      Alternatively, a heuristic may be used to monitor and clear the Failed Holdoff Table.
    </p>
    <p num="110">
      If the attempt to open the new VC was successful, then move the flows appropriate to that VC over to the new VC, step 214.
      <br/>
      If any presently open VCs are now empty, close them, step 216.
    </p>
    <p num="111">
      The steps performed when at the VC limit are outlined in FIG. 7.
      <br/>
      Optimization begins, step 200, which is the same as in FIG. 6.
      <br/>
      Possible Site Sets (VCs connecting subsets of all sites) are determined, step 220 FIG. 7.
      <br/>
      These site sets are considered, step 222.
      <br/>
      A VC is selected from the site sets that we wish to open, step 224.
      <br/>
      In the preferred embodiment, the VC is chosen which results in the greatest reduction in oversent data (data sent to more recipients than necessary).
    </p>
    <p num="112">
      Now, with consideration of the set of presently open VCs plus the selected new VC, an select an open VC to close, step 226.
      <br/>
      In the preferred embodiment, the open VC is selected which, when closed, causes the least increase in oversent data.
    </p>
    <p num="113">Although steps 222 and 224 are performed sequentially in the preferred embodiment, the steps can be performed separately, wherein the open VC is selected without consideration of the selected new VC to open.</p>
    <p num="114">At step 228, if the new selected VC turns out to be the same as the presently open VC, the optimization does not continue, since that would create a new VC with the same site set as the presently open VC.</p>
    <p num="115">
      If the VCs are different, attempt to open the new VC, step 230.
      <br/>
      This step is similar to step 208, 210 and 212 of FIG. 6., in that if the request to open the new VC is denied, the denied VC is placed on the Failed Holdoff Table.
      <br/>
      Further, in the preferred embodiment, if the new VC is already in the Failed Holdoff table, do not attempt to open the new VC.
    </p>
    <p num="116">If the new VC is opened, then move appropriate flows over to the new VC, step 232, and then close the old VC (the VC selected to be closed), step 234.</p>
    <p num="117">In the preferred embodiment, this functionality is performed by the functions computeVCToOpen, closeAVC, belowLimitReduceOversent, and atLimitReduceOversent.</p>
    <p num="118">
      The procedure computeVCToOpen is called by belowLimitReduceOvesent and atLimitReduceOversen.
      <br/>
      It chooses the "best" VC to open, in regards to reducing oversent traffic.
    </p>
    <p num="119">
      This procedure takes one input argument, checkOptHoldoff which is Boolean TRUE if optimization Holdoff should be observed.
      <br/>
      This procedure takes pointer arguments used for output: bestSiteList, the SiteList of VC to open; bestTSpec, the TSpec of VC to open; bestlgbList, the list of Lan groups to be forwarded on the VC; and bestPerSiteLimited, which is Boolean TRUE if new VC hits a per-site VC limit.
    </p>
    <p num="120">
      ComputeVCToOpen generates a list of Lan groups which are delivered to more places than necessary.
      <br/>
      This is done by cycling through the Lan group table, looking at the actual VC serving each group.
      <br/>
      If the SiteList of the VC is a proper superset of the Lan's desired sitelist, the group is considered oversent.
      <br/>
      If that group is not already in the oversent list, it is added.
    </p>
    <p num="121">
      ComputeVCToOpen considers sets of qcbmrS to which it could open a new VC, onto which it could move traffic which is oversent on existing VC's.
      <br/>
      The VC which results in the greatest reduction in oversent traffic is considered the "best".
      <br/>
      A Lan group's oversent traffic typically is measured as a TSpec, and is the product of the number of extra sites to which it is sent multiplied by the TSpec of that group.
    </p>
    <p num="122">
      ComputeVCToOpen( ) does not consider all 2 N possible VC's to N qcbmrS.
      <br/>
      It checks only VC's to SiteLists that 1 or more existing Lan groups already wish to be delivered.
      <br/>
      This cuts down the search space (the procedure only needs to look at entries in the Lan group table).
      <br/>
      It has the effect of rejecting any VC which would combine the traffic from two or more different Lan groups of which one groups SiteList is not a superset of the other(s).
      <br/>
      For example, group 1 going to A&amp;B will never be merged with group 2 going to B&amp;C on a VC going to ABC.
    </p>
    <p num="123">
      As computeVCToOpen( ) goes through the Lan group table, looking for SiteLists to which it could open a VC, it will skip a candidate SiteList if
      <br/>
      The Lan group of that SiteList is on a VC that is signaling.
    </p>
    <p num="124">The candidate SiteList has failed signaling recently.</p>
    <p num="125">
      The optimization holdoff is selected and the candidate
      <br/>
      SiteList has failed optimization recently.
    </p>
    <p num="126">Note that if opening a VC to the sitelist being considered would cause a per-site VC limit to be exceeded, the optimization holdoff will be checked for that sitelist even if the caller did not ask for it.</p>
    <p num="127">
      The procedure closeAVC( ) picks a VC to close given a VC to be opened.
      <br/>
      It is called when VC resource limit is reached, a new VC can not be opened without closing an old one (as outlined in FIG. 7).
    </p>
    <p num="128">The procedure closeAVC takes the following input arguments: subset, the set of sites which VC to be closed must service; newSiteList, the Sitelist of VC to be opened; reducedTSpec, the amount of reduction gained by opening new VC; vcToOpen, VC Block of new VC; newTSpec, the TSpec of new VC; and newlgbList, the LAN group block list of new VC.</p>
    <p num="129">
      CloseAVC( ) determines the best VC to close, given that the specified VC will be opened.
      <br/>
      The "best" VC is the one whose closure would result in the lowest increase in oversent traffic.
      <br/>
      If closing the "best" VC would result in a greater increase in oversend than the new VC would eliminate, no VC is closed (optimization has failed).
    </p>
    <p num="130">
      Choosing the VC to close is done as follows:
      <br/>
      Insert the VC to be opened into the actualVCTable.
    </p>
    <p num="131">Initialize per-VC "increased oversent" bins to 0 TSpec.</p>
    <p num="132">
      Cycle through all the LAN blocks.
      <br/>
      For each LAN:
      <br/>
      +
      <br/>
      Remove LAN's VC from actualVCTable.
    </p>
    <p num="133">Find a new VC for LAN.</p>
    <p num="134">Compute the change oversend: oversend.newVC-oversend.oldVC of this LAN (may be negative).</p>
    <p num="135">Add this change to that VC's increased-oversent bin.</p>
    <p num="136">
      Put LAN's VC back into actualVCTable.
      <br/>
      }
      <br/>
      Select VC with smallest change in oversent (may be negative) as the one to close.
    </p>
    <p num="137">
      The procedure belowLimitReduceOversent reduces oversent traffic by opening a new VC.
      <br/>
      This procedure starts by calling computeVCToOpen.
      <br/>
      ComputeVCToOpen may return a VC sitelist of an existing VC, but with a larger TSpec.
      <br/>
      If it does, the Lan groups specified in the return argument are moved onto the existing VC.
      <br/>
      A later "improveGuarantees" phase will open a larger capacity VC to that sitelist.
    </p>
    <p num="138">
      If a VC to the "best" sitelist does not exist, it is opened.
      <br/>
      The new VC may exceed the outgoing VC limit for one or more sites.
      <br/>
      If so, closeAVC is called to close a VC that goes to those sites.
    </p>
    <p num="139">If no limit is exceeded, the procedure simply opens a new VC to the "best" sitelist returned by computeVCToOpen.</p>
    <p num="140">
      The procedure atLimitReduceOversent reduces oversent traffic by opening a new VC and closing an old one.
      <br/>
      The procedure calls computeVCToOpen( ).
      <br/>
      If the indicated VC is already open, the Lan groups identified are shuffled onto that VC, as in "belowLimit".
      <br/>
      CloseAVC is then called.
    </p>
    <p num="141">
      Another feature of the present invention includes policing for Quality of Service for aggregated flows.
      <br/>
      The reservation system in RSVP does not specify a particular mechanism for characterizing or aggregating flows, but uses the generic concept of a flowspec.
      <br/>
      The qcbmr system uses a Controlled Load model for the traffic, and characterizes the flowspec through Token Bucket parameters.
      <br/>
      In the simplest version of this model, one imagines a flow of tokens into a bucket.
      <br/>
      When a packet arrives for processing, the system compares the packet size (l) with the number of tokens (n) in the bucket.
      <br/>
      If 1&lt;=n, the packet is said to conform with the condition set by the flowspec, and therefore decrement the number of tokens by 1, and let the packet pass.
      <br/>
      If 1&gt;n, the packet is said to be non-conforming, it is discarded.
      <br/>
      This process is called traffic policing.
      <br/>
      In the qcbmr a novel version of policing is used.
    </p>
    <p num="142">
      In token bucket model, for any flow f(t) over some period 0&lt;t&lt;T and any bucket refill rate r, there is a bucket size b that will accommodate the flow.
      <br/>
      The pair (r,b) is the flowspec in this model.
      <br/>
      If the reserved rate is small relative to the actual rate for an extended period, the required bucket size b becomes large.
      <br/>
      The challenge is to pick (r, b) that accommodates the flow but consumes as little of the system's resources as possible.
    </p>
    <p num="143">
      To choose optimally among multiple valid (r, b), consider network admission control algorithms.
      <br/>
      FIG. 8 illustrates a scenario where packets that arrive on a particular physical or virtual interface for a group, A must be replicated and forwarded out physical or virtual interface D. Packets arriving for a different combination of physical or virtual interface and group, B in the figure, also need to be forwarded out of interface D. Note that A and B could alternately represent a single group that has two distinct sources.
    </p>
    <p num="144">
      Potential policing points are available at the token buckets.
      <br/>
      Policing can take place at flows through the router.
      <br/>
      Token buckets 1 and 3 are associated with the arrival of a flow from an interface (IN), before the point where packets are replicated/switched, and bucket 4 is associated with flows being sent out an interface (OUT) (or VC in the case of ATM).
      <br/>
      Bucket 3 is referenced by the "destination" portion of the first route in the example, bucket 4 is referenced by the "gateway" portion of the first and third routes, and bucket 1 is logically referenced by the "destination" portion of the last two routes.
    </p>
    <p num="145">
      The qcbmr according to one embodiment of the present invention makes a decision to send or drop each packet, and does not perform packet scheduling.
      <br/>
      Each packet being policed has policing state information associated with it.
    </p>
    <p num="146">
      In the simplest case, called strict policing, the token bucket process compares the number of byte tokens, n in the bucket at any time with the length, l, of the packet being processed.
      <br/>
      If n&gt;1, then the packet is, the number of tokens is decremented by 1, and the packet is passed to the next stage.
      <br/>
      Otherwise the token bucket is not modified and the packet is discarded.
    </p>
    <p num="147">
      The token bucket structure is expanded according to one embodiment of the present invention to support two levels of policing, as shown in FIG. 9.
      <br/>
      The token bucket 60 is refilled at a rate r (61).
      <br/>
      Messages and packets which arrive at the node associated with token bucket 60 use different outlets to measure whether the packets conform.
      <br/>
      High priority packets that conform to all previous flowspecs use the entire bucket 60 by "using" high priority outlet 62.
      <br/>
      Low priority packets use only the contents bl of the token bucket as shown by outlet 64.
      <br/>
      Normal or Low priority packets that conform to all previous flowspecs use the upper portion of the bucket only, through outlet 64.
      <br/>
      This leaves blo tokens available for a burst of high-priority packets.
    </p>
    <p num="148">
      If the token bucket 60 does not contain enough tokens for the packet (depending on the outlet 62, 64), the packet is marked as non-conforming.
      <br/>
      The non-conforming packet may be dropped, or be further processed as described below.
    </p>
    <p num="149">Packets that arrive at this policing point marked as non-conforming, may be upgraded to conforming using a priority upgrade outlets 74 as shown in and described with conjunction to FIG. 10. The priority upgrade outlet 74 uses only a small amount of headroom at the top of the token bucket.</p>
    <p num="150">
      In another embodiment of the present invention, known as two-stage policing, packets are compared to the tokens in a first token bucket 60a-n FIG. 10, which is on a per-flow basis.
      <br/>
      High priority packets use the entire contents of the token bucket, as shown by the high priority outlet 62.
      <br/>
      Low priority packets use only the contents of the token bucket as shown by outlet 64.
    </p>
    <p num="151">
      If there are not enough tokens (as drawn from the outlet 62 or 64, depending on packet priority), the packet is marked non-conforming.
      <br/>
      As described below, non-conforming packets may be dropped, or passed on, or possibly marked conforming.
    </p>
    <p num="152">
      A second token bucket 68 is used for the combined (aggregated) flows which then pass through the node.
      <br/>
      This second token bucket 68 is similar to first stage token buckets, but also includes a priority upgrade outlet 71, for use in certain policing modes.
    </p>
    <p num="153">
      Packets which were conforming in the first stage token buckets 60 are again tested using second stage token bucket 68.
      <br/>
      Similarly, high priority packets "use" high priority outlet 75, and low priority packets use low or normal priority outlet 77.
      <br/>
      In either case, if there are not enough tokens as required in token bucket 68 for the packet, the packet is marked non-conforming.
    </p>
    <p num="154">
      The priority upgrade outlet 71 allows for situations where, if a node has extra unused capacity 74 (in the form of extra tokens above the priority upgrade outlet 71), packets which come in non-conforming may be upgraded to conforming.
      <br/>
      This is a great benefit in certain situations, for example where low-priority traffic in one Lan group flow is protected from high-priority traffic in a misbehaving (not conforming to specified flow spec) flow when both flows are forwarded through the same wangroup/VC.
      <br/>
      Although the priority upgrade outlet 71 is described in terms of two-stage policing, it is equally applicable to single stage (as shown in FIG. 9).
    </p>
    <p num="155">
      In the preferred embodiment, the token bucket parameters, specified in a struct tb_params, are as follows.
      <br/>
      mtu Maximum packet size to be passed.
      <br/>
      m Minimum policed unit.
      <br/>
      r Number of bytes per second to be added to the bucket.
      <br/>
      bh Number of bytes for high priority packets (70, FIG. 10).
      <br/>
      bl Number of bytes for low priority packets (77, FIG. 10).
      <br/>
      bhr Number of bytes for non-conforming packets (74, FIG. 10).
    </p>
    <p num="156">mode Policing mode, a Pol_xxx value.</p>
    <p num="157">The mtu parameter is the maximum size (IP length), in bytes, allowed for a packet to be conforming.</p>
    <p num="158">
      The m parameter is the minimum policed unit.
      <br/>
      Packets whose size, in bytes, is less than this value are treated as having a size m.
    </p>
    <p num="159">
      The r parameter, in bytes per second, is the rate at which tokens are added to the token bucket.
      <br/>
      It is the sustained flow rate.
    </p>
    <p num="160">
      The bh parameter, in bytes, is the token bucket size for "high priority" packets (IP precedence greater than 0).
      <br/>
      If the bucket contains fewer tokens than the packet size, the packet is non-conforming.
    </p>
    <p num="161">
      The bl parameter, in bytes, is the token bucket size for "low priority" packets (IP precedence of 0).
      <br/>
      If the bucket contains fewer tokens than the packet size plus (bh-bl), the packet is non-conforming.
      <br/>
      The bl parameter must be no larger than the bh parameter.
    </p>
    <p num="162">
      The bhr parameter, in bytes, is the token bucket size for "non-conforming" packets.
      <br/>
      If the bucket contains fewer tokens than the packet size plus (bh-bhr), the packet is non-conforming.
      <br/>
      The bhr parameter must be no larger than the bl parameter.
      <br/>
      Note that this parameter is only used for the Pol_Hdrm_Strict or Pol_Hdrm_Tag modes (see below).
    </p>
    <p num="163">Possible parameter values for the bucket contents are bhr=10000 bl=20000 bh=30000.</p>
    <p num="164">
      The mode parameter indicates how the policing is performed.
      <br/>
      The basic policies are:
      <br/>
      allow a packet and mark it conforming,
      <br/>
      allow a packet and mark it non-conforming (tagging), or
      <br/>
      drop a non-conforming packet.
    </p>
    <p num="165">
      A packet becomes non-conforming when its size exceeds the mtu parameter, or the token bucket has insufficient tokens.
      <br/>
      There are three cases, depending on the packet priority and non-conforming status.
    </p>
    <p num="166">
      Already non-conforming -tokens&lt;size+(bh--bhr), or
      <br/>
      Low priority -tokens&lt;size+(bh--bl), or
      <br/>
      High priority -tokens&lt;size
    </p>
    <p num="167">The policing modes supported are defined by the police_modes enumeration.</p>
    <p num="168">Pol_None No policing.</p>
    <p num="169">Pol_Strict Drop non-conforming packets, based on priority.</p>
    <p num="170">Pol_Tag Tag non-conforming packets, based on priority.</p>
    <p num="171">Pol_Hdrm_Strict First considering headroom, drop non-conforming.</p>
    <p num="172">Pol_Hdrm_Tag First considering headroom, tag non-conforming.</p>
    <p num="173">
      Pol_None mode indicates that no policing or token bucket updates should be performed.
      <br/>
      All packets are considered to be conforming.
    </p>
    <p num="174">Pol_Strict mode indicates that non-conforming packets should be dropped.</p>
    <p num="175">Pol_Tag mode indicates that non-conforming packets should be tagged so that subsequent processing steps, e.g., another token bucket or a network driver that implements tagging, can process the non-conforming packets accordingly.</p>
    <p num="176">
      Pol_Hdrm_Strict mode indicates that non-conforming packets for which there are sufficient tokens in the token bucket (based on the bhr parameter) should be considered to be conforming.
      <br/>
      If there are insufficient tokens, the packet should be dropped.
    </p>
    <p num="177">
      Pol_Hdrm_Tag mode indicates that non-conforming packets for which there are sufficient tokens in the token bucket 68 (based on the bhr parameter) should be considered to be conforming (they use outlet 71).
      <br/>
      If there are insufficient tokens, the packet should be "tagged" by the network driver, if the driver supports tagging.
    </p>
    <p num="178">Each token bucket contains the following information.</p>
    <p num="179">
      --
      <br/>
      -- Dynamic parameters
      <br/>
      -- b           Number of tokens (bytes) in the bucket.
      <br/>
      -- c           Counter at last update (platform dependent).
      <br/>
      -- t           Time of Day at last update.
      <br/>
      May only be accurate to
      <br/>
      --             a few tens of milliseconds.
      <br/>
      Indicates when bucket
      <br/>
      --             was last used, and available to management.
      <br/>
      -- Statistics
      <br/>
      -- pkts        Packets &amp; bytes examined.
      <br/>
      -- bytes
      <br/>
      -- tag_pkts    Packets &amp; bytes tagged.
      <br/>
      -- tag_bytes
      <br/>
      -- drp_pkts    Packets &amp; bytes dropped.
      <br/>
      -- drp_bytes
      <br/>
      -- tb_accid    When non-zero, the token bucket ID of a bucket
      <br/>
      --             whose statistics are updated like those above.
      <br/>
      -- Control/management
      <br/>
      -- ref_cnt     Number of references to this bucket.
      <br/>
      -- k0          Number of seconds that will fill the bucket.
      <br/>
      -- flags       Control flags:
      <br/>
      --             TB_PURGE Token bucket should be freed when ref_cnt
      <br/>
      --             becomes zero.
      <br/>
      --             TB_ACTIVE Token bucket is in use.
      <br/>
      --             TB_IN Incoming, e.g., a destination, bucket.
      <br/>
      --             TB_OUT Outgoing, e.g., a gateway, bucket.
      <br/>
      --             TB_LCPB r is right shifts for cycles/byte approximation.
      <br/>
      --             TB_BPC r is bytes/cycle, not cycles/byte.
      <br/>
      -- Static configuration
      <br/>
      -- r           Converted refill rate, see TB_BPC &amp; TB_LCPB.
      <br/>
      -- bnco        Non-conforming bytes, bh - bhr.
      <br/>
      -- blo         Low priority bytes, bh - bl.
      <br/>
      -- bh          High priority bytes, depth of bucket.
      <br/>
      -- m           Minimum policed unit.
      <br/>
      -- mtu         Maximum packet size.
      <br/>
      -- mode        Policing mode, see enum police_modes.
      <br/>
      -- Identification
      <br/>
      -- id          Bucket id information, for SNMP, e.g., a
      <br/>
      --             sockaddr with group and interface address.
    </p>
    <p num="180">
      All token bucket structures are located in a contiguous memory region and referenced by a &lt;pointer, identifier &gt;tuple.
      <br/>
      The static pointer permits the contiguous region to be expanded as the number of token buckets grows.
      <br/>
      The identifier is held, e.g., in the routing table entries that use a particular bucket.
      <br/>
      Being in a contiguous region of memory makes it possible to quickly obtain a consistent snapshot of the statistics information for all token buckets.
      <br/>
      In addition, some token buckets may be used as ""accumulators" of the packet and byte counts of other token buckets.
      <br/>
      The token bucket identifier of the accumulator, if any, is held in the tb_accid entry of those token buckets to be summed.
    </p>
    <p num="181">
      The first entry in the region is used for overhead information.
      <br/>
      The t variable contains the time that a snapshot was taken.
      <br/>
      The b variable contains the number of token buckets allocated in the region.
      <br/>
      The r variable contains the index of a free bucket.
      <br/>
      The r variables in free entries contains the index of the next free entry.
      <br/>
      A value of zero is used to terminate the free list.
    </p>
    <p num="182">
      Each packet being policed has policing state information associated with it.
      <br/>
      The information is stored in the m_pkthdr part of the mbuf chain holding the packet.
      <br/>
      priority Priority of packet, 0 is low.
      <br/>
      nonconform The packet is non-conforming.
    </p>
    <p num="183">
      The policing function, tb_filter( ), has three parameters: the token bucket identifier, a pointer to the packet, and the length of the packet.
      <br/>
      It either updates the packet state information and returns zero or it returns ENOBUFS when the packet should be dropped.
    </p>
    <p num="184">
      For Pentium based qcbmrs, the built in 64-bit cycle counter is used to measure elasped time.
      <br/>
      The r parameter will be converted to units based on the pre-configured rate of the counter.
      <br/>
      The cycle_counter( ) routine can be used to read the counter.
    </p>
    <p num="185">
      An application with root privileges manages token buckets using a set of IOCTLs.
      <br/>
      IOCTLs allow an operation and its outcome to be easily associated without having to search through a set of messages looking for the response, as is the case for use of, e.g., a routing socket.
    </p>
    <p num="186">
      An application with root privileges may associate token buckets with routing table entries that are being created.
      <br/>
      A PF_ROUTE socket of type SOCK_RAW is used to specify routes.
      <br/>
      A route is added or deleted by sending a message of type RTM_ADD or RTM_DELETE (or RTM_MADD or RTM_MDELETE in the case of multicast routes) to a routing socket.
      <br/>
      The message begins with a struct rt_msghdr header and is followed by zero or more sockaddrs, as specified by the rtm_addrs bit mask field in the message header.
      <br/>
      The rtm_addrs bit mask has been extended to include bits for token buckets.
      <br/>
      A list token bucket identifiers, each sizeof (u_int32_t) bytes long, follows the sockaddrs.
    </p>
    <p num="187">
      The RTA_TBDST bit in rtm_addrs indicates that a token bucket identifier is present.
      <br/>
      That token bucket is used for all packets that match the destination specified in the route.
      <br/>
      In the RITN context, this token bucket would be used to police "Lan" traffic.
    </p>
    <p num="188">
      As another example of two-stage policing according to one embodiment of the present invention, flows 92a-n FIG. 11 arrive at the first stage policing 88.
      <br/>
      A token counter 90 maintains a count of the number of tokens presently contained in the "token bucket".
      <br/>
      The token counter 90 is updated by token rate r, as previously discussed.
      <br/>
      The token counter 90 also has an upper (maximum), which if reached, will not go above that limit.
      <br/>
      Associated with token counter 90 is a normal priority threshold value 94.
      <br/>
      This corresponds to blo (bh-bl) level as shown in FIG. 9.
      <br/>
      High priority packets arriving on flow 92 are compared (based on the number of tokens required to pass that packet) to the direct value of token counter 90.
      <br/>
      Low priority packets are similarly compared to the value of token counter 90 minus the normal priority threshold value 94.
    </p>
    <p num="189">
      When either type of packet is below the compared value (--i.e., there are not enough tokens to send it), it is marked as non-conforming, at location 97.
      <br/>
      Depending on the policing mode, non-conforming packets may be dropped at this point.
    </p>
    <p num="190">
      Second stage policing is shown at 89.
      <br/>
      Aggregate token counter 100 is updated by token rate R. R can for example be the sum of the r rates for first stage token buckets 90.
      <br/>
      Aggregate token counter 100 has associated with it an aggregate normal priority threshold value 102, which is similar to normal priority threshold values 94 in first stage policing 88.
      <br/>
      Packets which were conforming for the first stage policing are again compared (by token requirements) to the value in aggregate token counter 100.
      <br/>
      High priority packets compare against the direct value 100, and low priority packets compare to the direct value 100 minus the aggregate normal priority threshold value 102.
      <br/>
      Depending on the policing mode, packets which fail are marked as non-conforming, or dropped.
    </p>
    <p num="191">
      Also associated with aggregate token counter 100 is aggregate headroom threshold value 104, which compares to bnco (bh-bhr) as shown in FIG. 9.
      <br/>
      According to one embodiment of the invention, a packet that was marked non-conforming in first stage policing 88 (FIG. 10) may be marked as conforming by comparing the number of tokens the packet requires to aggregate token counter 100 minus aggregate headroom threshold value 104.
      <br/>
      If the there are enough tokens, then the packet may be marked conforming (upgraded from CLP 1 to CLP 0).
    </p>
    <p num="192">
      The IP and ATM wan environments are somewhat similar, but differ fundamentally in that there is a useful priority bit (CLP) in the ATM case.
      <br/>
      The ATM switches are expected to forward all conforming cells of compliant VCs.
      <br/>
      They are also expected to drop all nonconforming cells, and are not be expected to do anything at all useful with noncompliant VCs.
      <br/>
      VBR-tagged is used, or VBR-non-tagged (for strict policing.
    </p>
    <p num="193">
      IP routers will likely not respect the TOS byte (at the present time, this could change).
      <br/>
      For IP/strict mode, this is unnecessary.
      <br/>
      However the present invention could support routine and elevated status for IP/priority mode.
    </p>
    <p num="194">
      Essentially, two output modes are provided.
      <br/>
      One is that packets which fail policing will be dropped.
      <br/>
      The other is that they will be sent in a low-priority mode.
      <br/>
      For ATM, this is CLP=1.
      <br/>
      For IP, this would be TOS routine.
    </p>
    <p num="195">
      Thus, the output CLP does not reflect whether a packet is high or low priority, but whether it has passed policing and should be protected.
      <br/>
      This allows low-priority traffic in one LAN group flow to be protected from high-priority traffic in a misbehaving flow when both are forwarded via the same VC.
    </p>
    <p num="196">As various changes could be made in the above constructions without departing from the scope of the invention, it should be understood that all matter contained in the above description or shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.</p>
    <heading>APPENDIX A</heading>
    <p num="197">
      Glossary
      <br/>
      ATM: Asynchronous Transfer Mode, a cell-based high speed networking protocol.
    </p>
    <p num="198">BMR: A bilevel multicast router is a device which provides a constructed multicast service (CMS) from an underlying multicast service (UMS).</p>
    <p num="199">BMRP: A bilevel multicast routing protocol) is a particular protocol in use between one implementation of bilevel multicast routers.</p>
    <p num="200">CBR: Continuous (or Constant) Bit Rate, a characterization of a VC indicating that the flow is relatively constant over time.</p>
    <p num="201">
      CLP: Cell Loss Priority, a one-bit flag in the ATM cell header.
      <br/>
      Cells that have the CLP=1 can be discarded in favor cells that have CLP=0.
    </p>
    <p num="202">Compliant: A sequence of packets is compliant if most of them are conforming.</p>
    <p num="203">
      Conforming: A packet is conforming if it meets the token bucket QoS specification.
      <br/>
      A packet with size &gt;MTU is nonconforming.
    </p>
    <p num="204">CMS: The constructed multicast service is the multicast service provided by a bilevel multicast implementation.</p>
    <p num="205">
      Distributed Interactive Simulation: Distributed Interactive Simulation (DIS) is a system for simulating physical objects (entities) that move about in virtual space.
      <br/>
      The DNEM project is designed to support DIS.
    </p>
    <p num="206">
      GRCA: Generic Cell Rate Algorithm
      <br/>
      IGMP: Internet Group Membership Protocol.
    </p>
    <p num="207">IP/ATM: The case where the LAN multicast packet is transported from one site to another using an ATM point-to-multipoint SVC.</p>
    <p num="208">IP/IP: The case where the LAN multicast packet is encapsulated in a WAN packet using a limited number of WAN multicast groups for efficient transport of the traffic over the WAN connection.</p>
    <p num="209">LT2N: A strategy for establishing multicast connections (paths?) that requires, for n sites, fewer than 2 n paths/connections.</p>
    <p num="210">
      Minimum Policed Unit: In a controlled load flowspec, packets that are smaller than the minimum policed unit are treated as if they were precisely the size of the minimum policed unit.
      <br/>
      Essentially, before the computation is done, one adjusts the length (or the number of tokens required to satisfy the requirement) using the rule:
      <br/>
      if (1&lt;m) then 1=m;
    </p>
    <p num="211">For example, if m is 50 bytes, a 30 byte packet is counted as 50 bytes.</p>
    <p num="212">MBS: Maximum Burst Size, in cells, used by ATM QoS specifications.</p>
    <p num="213">MTU: Maximum Transmission Unit, the size in bytes of the largest packet that can be accepted by the network without fragmentation.</p>
    <p num="214">NNI: Network-Network Interface, which specifies the protocols that are used between two switches in the interior of the network.</p>
    <p num="215">PVC: Permanent Virtual Circuit, a virtual circuit set up when the switch starts, defined in the configuration files of the switch.</p>
    <p num="216">
      QoS: Quality of Service
      <br/>
      qcbmr: QoS-Capable bilevel Multicast Router
      <br/>
      SCR: Sustainable Cell Rate
      <br/>
      SVC: Switched Virtual Circuit, a virtual circuit set up on demand.
      <br/>
      The qcbmr uses point-to-multipoint ATM circuits to transport packets from one site to another.
    </p>
    <p num="217">UMS: The underlying multicast service is the multicast service used by a bilevel multicast implementation.</p>
    <p num="218">UNI: User-Network Interface, which specifies the protocols that are used between a device at the edge of the network (an end system or user system}) and the network.</p>
    <p num="219">VBR: Variable Bit Rate, a characterization of a VC indicating that the flow is bursty.</p>
    <p num="220">VC: Virtual Circuit, a logical connection between two points in the network, generally an entrance and exit point, that has state defining the passage of data from one end to the other.</p>
    <p num="221">
      WAN: Wide Area Network
      <br/>
      Weakly Conforming: A cell is weakly conforming if it meets the CLP=0+1 QoS spec but not the CLP=0, that is if the network is allowed to discard the cell to avoid congestion.
      <br/>
      This essentially means that it meets the PCR spec but not SCR/BT.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7.</claim-text>
      <claim-text>In a network system including a plurality of endpoint sites, said network system including a plurality of open point-to-multipoint virtual circuits (VC)s between various endpoint sites, a method of optimizing traffic flow, comprising: determining whether a number of open VCs is at a VC limit; determining a set of possible VCs to said endpoint sites when the number is at the VC limit; estimating, for each of the possible VCs, a reduction of oversent data; from said set of possible VCs to said endpoint sites, selecting a new VC to open based on the estimating; from said plurality of open point-to-multipoint VCs, selecting an open VC to close; if said new VC is different from said open VC, then opening said new VC; moving appropriate traffic to said new VC;</claim-text>
      <claim-text>and closing said open VC.</claim-text>
      <claim-text>1. In a network system including a plurality of endpoint sites, said network system including a plurality of open point-to-multipoint virtual circuits (VC)s between various endpoint sites, a method of optimizing traffic flow, comprising:</claim-text>
      <claim-text>determining a set of possible point-to multipoint VCs to said endpoint sites, said set excluding combinations with VC connections already open; for each possible VC in said set, estimating a reduction in oversent data that would occur if said possible VC was opened; opening a new VC corresponding to said possible VC with a greatest reduction in oversent data; moving appropriate traffic over to the newly opened VC;</claim-text>
      <claim-text>and closing any open VCs which no longer have any traffic.</claim-text>
      <claim-text>2. The method of claim 1 wherein said step of opening said possible VC further includes: if said possible VC can not be opened, an identification of said possible VC is placed on a list of VCs which could not be opened.</claim-text>
      <claim-text>3. The method of claim 2 wherein said step of determining the set of possible VCs to said endpoint sites further includes excluding VCs identified by said list of VCs which could not be opened.</claim-text>
      <claim-text>4. The method of claim 2 wherein said list of VCs which could not be opened is periodically cleared of all entries.</claim-text>
      <claim-text>5. The method of claim 1 wherein said method of optimizing traffic flow further includes: resizing the Qos (quality of service) of an existing open VC.</claim-text>
      <claim-text>6. The method of claim 1 wherein if an open VC limit is reached, the steps of: determining a set of possible VCs to said endpoint sites; from said set of possible VCs to said endpoint sites, selecting a new VC to open which, if opened, would cause the greatest reduction in oversent data; from said plurality of open point-to-multipoint VCs, selecting an open VC which, if closed, would cause the least increase in oversent data; if said new VC is different from said open VC, then opening said new VC; moving appropriate traffic to said new VC;</claim-text>
      <claim-text>and closing said open VC.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 7 wherein if said step of selecting the new VC to open from said set of possible VCs to said endpoint sites further includes: selecting a new VC to open which would cause the greatest reduction in oversent data.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method of claim 8 wherein if said step of selecting an open VC from said plurality of open point-to-multipoint VCs further includes: selecting an open VC which, if closed, would cause a least increase in oversent data.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 9 wherein if said step of selecting an open VC which, if closed, would cause the least increase in oversent data includes accounting for said new VC having been opened.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 7 wherein said step of opening said new VC further includes: if said new VC can not be opened, an identification of said new VC is placed on a list of VCs which could not be opened.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method of claim 11 wherein said step of determining a set of possible VCs to said endpoint sites further includes excluding VCs identified by said list of VCs which could not be opened.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 11 wherein said list of VCs which could not be opened is periodically cleared of all entries.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A system for controlling traffic flow in a network system, said network system including a plurality of endpoint sites, and including a plurality of open point-to-multipoint virtual circuits (VC)s between various endpoint sites, said system comprising: an open VC table to hold entries indicating said open VCs, each entry also including an indication of oversent data on each of said open VCs; a possible VC table to hold entries indicating a set of possible VCs to said endpoint sites; a network traffic estimator to scan said open VC table and said possible VC table, and to determine, for each entry in said possible VC table, a reduction in oversent data which would occur if a new VC was opened corresponding to that entry; a VC instantiating component, to open a new VC corresponding to an entry in said possible VC table with a greatest reduction in oversent data;</claim-text>
      <claim-text>and a network traffic controller, to move appropriate network traffic to said newly opened VC.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The system of claim 14 wherein said network traffic estimator determines said reduction in oversent data which would occur if a new VC was opened corresponding to that entry, by determining what network traffic would be appropriate to send on said new VC.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The system of claim 14 wherein said network traffic estimator scans said open VC table to select one of said open VCs to close, and determines a reduction in oversent data for each entry in said possible VC table while presuming said selected open VC is closed.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The system of claim 16 further including a VC closing component, to close said selected one of said open VC's to close.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The system of claim 14 wherein said VC instantiating component includes a failed VC table, to place indications of failed VCs that said VC instantiating component is not able to open.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The system of claim 18 wherein said possible VC table excludes entries which correspond to indications of failed VCs in said failed VC table.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The system of claim 18 wherein said failed VC table is periodically cleared of said indications of failed VCs.</claim-text>
    </claim>
  </claims>
</questel-patent-document>