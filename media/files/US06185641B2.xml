<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185641B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185641</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185641</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="25299217" extended-family-id="3872798">
      <document-id>
        <country>US</country>
        <doc-number>08846882</doc-number>
        <kind>A</kind>
        <date>19970501</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08846882</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>4004630</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>84688297</doc-number>
        <kind>A</kind>
        <date>19970501</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08846882</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  13/36        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>36</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   5/06        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>5</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F  13/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F  13/38        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>38</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>710056000</text>
        <class>710</class>
        <subclass>056000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>370402000</text>
        <class>370</class>
        <subclass>402000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>710112000</text>
        <class>710</class>
        <subclass>112000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>710306000</text>
        <class>710</class>
        <subclass>306000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-005/06P</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>005</main-group>
        <subgroup>06P</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-005/065</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>5</main-group>
        <subgroup>065</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>25</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>4</number-of-drawing-sheets>
      <number-of-figures>4</number-of-figures>
      <image-key data-format="questel">US6185641</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Dynamically allocating space in RAM shared between multiple USB endpoints and USB host</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HAMMOND JOHN A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5214760</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5214760</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>LONG MARTY L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5416909</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5416909</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KIM MAN S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5604916</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5604916</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>KELLEY RICHARD ALLEN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5764929</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5764929</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>KREIN WILLIAM TODD, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5802055</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5802055</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>MORZANO CHRISTOPHER K, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5805931</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5805931</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>SHEMLA DAVID, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5923660</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5923660</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>HENDEL ARIEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5313582</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5313582</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>HENDEL ARIEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5602995</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5602995</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>John Millios et al., USB, A Peripheral Point of View.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Intel 82930A Universal Serial Bus Microcontroller.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>USB Synthesizable Function Core Solutions, CAE Technology, Inc.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>USB Device Controller Synthesizable Core, Sand Microelectronics, Inc.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>Cypress Preliminary CY763000/CY76601, CY763200/CY766201.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Standard Microsystems Corp.</orgname>
            <address>
              <address-1>Hauppauge, NY, US</address-1>
              <city>Hauppauge</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>STANDARD MICROSYSTEMS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Dunnihoo, Jeffrey Clay</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Proskauer Rose LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Lee, Thomas C.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      The present invention relates to a peripheral microcontroller for providing a high performance USB (Universal Serial Bus) connection to existing peripheral architectures (such as printers and disk drives with existing microcontrollers) and to new peripheral architectures (such as a 4-port USB-to-Ethernet Bridge).
      <br/>
      The USB peripheral microcontroller includes three units.
      <br/>
      A Serial Interface Engine (SIE) connects to a USB host or USB hub.
      <br/>
      A Microcontroller (MCU) Interface Unit connects to one or more peripheral devices such as ISA-like peripherals.
      <br/>
      A Memory Management Unit (MMU) provides a buffering mechanism between the SIE and MCU Interface Unit.
      <br/>
      The MMU utilizes a unique data packet buffering architecture.
      <br/>
      Packets received at the MMU from a peripheral for transmission to the USB host and packets received at the MMU from the USB host for transmission to a peripheral are buffered in a RAM.
      <br/>
      The capacity of the RAM is dynamically allocatable among various USB endpoints and the USB host so that the size of the RAM is minimized.
      <br/>
      The data path of the inventive USB peripheral controller is also highly advantageous.
      <br/>
      The SIE accesses the packet buffer RAM via a DMA controller in the MMU.
      <br/>
      The MCU Interface Unit accesses the packet buffer RAM via a microcontroller or a DMA controller.
      <br/>
      An arbiter in the MMU enables these multiple masters to access the packet buffer RAM.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The present invention relates to a peripheral microcontroller for providing a high performance USB (Universal Serial Bus) connection to existing peripheral architectures (such as printers and disk drives with existing microcontrollers) and to new peripheral architectures (such as a 4-port USB-to-Ethernet Bridge).</p>
    <p num="2">
      The USB peripheral microcontroller includes three units.
      <br/>
      A Serial Interface Engine (SIE) connects to a USB host or USB hub.
      <br/>
      A Microcontroller (MCU) Interface Unit connects to one or more peripheral devices such as ISA-like peripherals.
      <br/>
      A Memory Management Unit (MMU) provides a buffering mechanism between the SIE and MCU Interface Unit.
    </p>
    <p num="3">
      The MMU utilizes a unique data packet buffering architecture.
      <br/>
      Packets received at the MMU from a peripheral for transmission to the USB host and packets received at the MMU from the USB host for transmission to a peripheral are buffered in a RAM.
      <br/>
      The capacity of the RAM is dynamically allocatable among various USB endpoints and the USB host so that the size of the RAM is minimized.
    </p>
    <p num="4">
      The data path of the inventive USB peripheral controller is also highly advantageous.
      <br/>
      The SIE accesses the packet buffer RAM via a DMA controller in the MMU.
      <br/>
      The MCU Interface Unit accesses the packet buffer RAM via a microcontroller or a DMA controller.
      <br/>
      An arbiter in the MMU enables these multiple masters to access the packet buffer RAM.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="5">
      The USB (Universal Serial Bus) is a peripheral bus specification developed by PC and telecom industry leaders.
      <br/>
      The USB brings the plug-and-play capability of computer peripherals outside the PC box.
      <br/>
      This eliminates the need to install cards into dedicated computer slots and reconfigure the system each time a peripheral is attached or detached from a PC.
      <br/>
      Personal computers equipped with USB allow computer peripherals to be automatically configured as soon as they are physically attached without the need to reboot or run setup.
      <br/>
      USB allows multiple devices--up to 127--to run simultaneously on a computer, with peripherals such as monitors and key boards acting as additional plug-in sites or hubs.
    </p>
    <p num="6">
      The USB is described in detail in the Universal Serial Bus Specification, Revision 1.0 published Jul. 15, 1996. The specification is jointly published by Compaq, Digital Equipment Corporation, IBM PC Company, Intel, Microsoft, NEC and Northern Telecom.
      <br/>
      The contents of this USB specification are incorporated herein by reference.
    </p>
    <p num="7">
      The USB bus topology may be described as follows.
      <br/>
      The USB connects USB devices with a USB host.
      <br/>
      There are two types of USB devices: the hub and the function.
      <br/>
      A hub is a device which provides additional attachment points for the USB.
      <br/>
      A function provides capabilities to the system, e.g., an ISDN connection, a digital joystick, a speaker, a keyboard, a mouse, etc.
      <br/>
      The hub and the function are described in greater detail below.
    </p>
    <p num="8">
      The USB physical interconnect is a tiered star topology.
      <br/>
      A hub is at the center of each star.
      <br/>
      Each wire segment is a point-to-point connection: (a) between the host and a hub, or (b) between a host and a function, or (c) between a hub and another hub or function.
    </p>
    <p num="9">
      FIG. 1 illustrates the topology of the USB system.
      <br/>
      The USB system 10 comprises a host 12.
      <br/>
      There are two points of attachment in the host 12: port 1 and port 2.
      <br/>
      The port 2 is connected by the wire segment 28 to the function 29.
      <br/>
      The port 1 is connected by the wire segment 18 to hub 1.
      <br/>
      The hub 1 has five ports 20.
      <br/>
      The function 22 is connected to one of these ports by the wire segment 24.
      <br/>
      Similarly, the hub 2 and hub 3 are also connected to ports of hub 1.
      <br/>
      Various functions (e.g., function 30, 32, etc.) are connected to ports on the hub 2 or the hub 3.
    </p>
    <p num="10">
      Hubs are a key element in the plug-and-play architecture of USB.
      <br/>
      Hubs serve to simplify USB connectivity from the user's perspective and provide robustness at low cost and complexity.
      <br/>
      Hubs are wiring concentrators and enable the multiple attachment characteristics of USB.
      <br/>
      Attachment points are referred to as ports (see FIG. 1).
      <br/>
      Each hub converts a single attachment point into multiple attachment points.
      <br/>
      The architecture supports concatenation of multiple hubs.
      <br/>
      The upstream port of a hub connects the hub towards the host.
      <br/>
      Each of the other downstream ports of a hub allows connection to another hub or function.
      <br/>
      Hubs can detect the attachment and detachment of a USB device at each downstream port and enable the distribution of power to these downstream USB devices.
      <br/>
      Each downstream port can be individually enabled and configured as either full or low speed.
      <br/>
      The hub isolates low speed ports from full speed signaling.
    </p>
    <p num="11">
      A function is a USB device that is able to transmit or receive data or control information over the USB.
      <br/>
      A function is typically implemented as a separate peripheral device with a cable that plugs into a port on a hub.
      <br/>
      However, a physical package may implement multiple functions and an embedded hub with a single USB cable.
      <br/>
      This is known as a compound device.
      <br/>
      A compound device appears to the host as a hub with one or more permanently attached USB devices.
      <br/>
      Examples of functions include a printer, a monitor, a mouse, a keyboard, a modem, an audio CD player, a tape player, an ISDN connection, etc.
    </p>
    <p num="12">
      There is only one host on any USB system.
      <br/>
      The USB interface to the host computer system is referred to as the host controller.
      <br/>
      The host controller may be implemented in a combination of hardware, firmware, or software.
      <br/>
      A root hub is integrated within the host system to provide one or more attachment points.
    </p>
    <p num="13">
      A device endpoint refers to a uniquely identifiable portion of a USB device (hub or function) that is a source or sink of information in a communication flow between host and USB device.
      <br/>
      An example of a USB function with more than one endpoint is a Data/Voice modem.
      <br/>
      There may be one endpoint for voice packets and one endpoint for data packets.
    </p>
    <p num="14">
      All bus transactions involve the transmission of up to three packets.
      <br/>
      Each transaction begins when the host controller, on a scheduled basis, sends a USB packet describing the type and direction of transaction, the USB device address, and endpoint number.
      <br/>
      This packet is referred to as the Token Packet.
      <br/>
      The USB device that is addressed by the Token Packet selects itself by decoding the appropriate address fields of the Token Packet.
      <br/>
      In a given transaction, data is transferred either from the host to a device or from a device to the host.
      <br/>
      The direction of data transfer is specified in the Token Packet.
      <br/>
      The source of the transaction then sends a data packet indicating whether the transfer was successful.
    </p>
    <p num="15">
      In general, most peripherals include I/O controllers which are designed to generate transactions for commonly used busses such as ISA, EISA, PCI, and the proprietary NU bus of Apple.
      <br/>
      It is desirable to adapt these peripherals for use with the highly advantageous USB.
      <br/>
      To accomplish this, it is desirable to provide a USB microcontroller which can generate familiar bus transactions such as ISA bus transactions from the USB serial protocol stream.
    </p>
    <p num="16">
      A block diagram of such a USB microcontroller unit is shown in FIG. 2.
      <br/>
      This microcontroller unit 50 comprises three blocks, a USB Serial Interface Engine (SIE) 60, Microcontroller Interface Unit 70, and a Memory Management Unit (MMU) 80. The SIE 60 connects to a port on a USB hub or on a USB host and serves as an interface to the USB protocol.
      <br/>
      Specifically, the SIE 60 formats data to be transmitted from the peripheral to the host in accordance with the USB protocol.
      <br/>
      It reformats data received from the USB host in accordance with the USB protocol into a form that can be buffered in the Memory Management Unit.
      <br/>
      The Microcontroller Interface Unit 70 interfaces with the I/O controller of the peripheral.
    </p>
    <p num="17">In conventional USB peripheral microcontrollers, the Memory Management Unit includes a plurality of FIFOs for buffering data packets, there being a dedicated FIFO for each USB endpoint.</p>
    <p num="18">Prior art USB microcontrollers are the 82930 Universal Serial Bus Microcontroller--available from Intel, USB Function Core--available from CAE, USB Device Controller Synthesizable Core--available from Sand Microelectronics and the CY7C63000/1 and CY7C36200/1 Cypress USB Controller.</p>
    <p num="19">
      A deficiency of these prior art USB microcontrollers is the memory management technique used within the Memory Management Unit.
      <br/>
      Typically, the MMU unit includes one FIFO buffer for packets received from the USB host and destined for the peripheral, and one FIFO buffer for each USB endpoint contained within the peripheral that can transmit packets to the USB host.
      <br/>
      All peripherals will have Endpoint 0 for control packets and Endpoint 1 for user packets.
      <br/>
      Many peripherals such as audio devices with multiple audio channels will have additional USB endpoints.
    </p>
    <p num="20">The use of a dedicated FIFO for packet from each USB endpoint and the use of a dedicated FIFO for packets from the host is very inefficient use of memory, especially as the FIFOs increase in size.</p>
    <p num="21">
      An improved memory management technique is disclosed in U.S. Pat. No. 5,313,586 and in U.S. Pat. No. 5,602,995, both of which are assigned to Standard Microsystems Corporation.
      <br/>
      These patents disclose a communication controller which is interfaced with a host processor and which includes a control unit for accessing a communication medium.
      <br/>
      Each data packet to be transmitted or received is assigned a packet number.
      <br/>
      Packet number assignment is carried out by a Memory Management Unit within the communication controller.
      <br/>
      The Memory Management Unit dynamically allocates to each assigned packet number one or more pages in a data packet buffer memory for the storage of the corresponding data packet.
      <br/>
      Upon issuing the assigned packet number, the physical addresses of the allocated pages of data packet buffer memory storage space are generated in a manner transparent to both the host processor and the control unit.
      <br/>
      Upon completion of each data packet loading operation, the corresponding packet number is stored in a packet number queue maintained for subsequent retrieval in order to generate the physical addresses at which the corresponding data packet has been stored.
      <br/>
      The contents of the above-identified U.S. patents are incorporated herein by reference.
    </p>
    <p num="22">In view of the foregoing, it is an object of the present invention to provide a USB microcontroller with an improved Memory Management Unit.</p>
    <p num="23">In particular, it is an object of the invention to provide a USB microcontroller with a Memory Management Unit that makes more efficient use of memory than the prior art.</p>
    <p num="24">More specifically, it is an object of the invention to provide a USB microcontroller dynamically allocates space in RAM to packets to be buffered instead of using a dedicated FIFO for each USB endpoint and a dedicated FIFO for the USB host.</p>
    <p num="25">A further disadvantage of the conventional USB microcontrollers is their data path which typically is arranged as follows:</p>
    <p num="26">USB --&gt; FIFO --&gt; MCU Interface Unit --&gt; Peripheral</p>
    <p num="27">Because of the use of FIFOs to buffer packets in the MMU, it is difficult, if not impossible, to have more than one master in the MCU Interface Unit access the FIFOs.</p>
    <p num="28">Accordingly, it is a further object of the invention to provide a USB peripheral microcontroller with an improved data path, in particular, a data path including a packet buffer which can be accessed by more than one master in an MCU Interface Unit.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="29">
      In accordance with an illustrative embodiment, the present invention is directed to an improved USB microcontroller.
      <br/>
      The USB microcontroller includes an SIE, an MCU Interface Unit with two masters, such as a microcontroller and a DMA (Direct Memory Access) controller, and an improved MMU.
    </p>
    <p num="30">
      The improved MMU unit comprises a RAM (e.g., a single ported RAM) for buffering data packets.
      <br/>
      The packets may come from a peripheral and be destined for the USB host.
      <br/>
      Or, the packets may come from the USB host and be destined for a peripheral.
      <br/>
      There may be more than one USB endpoint associated with the USB microcontroller.
      <br/>
      Capacity in the RAM is dynamically allocatable to the packets from the various USB endpoints and the packets from the host.
    </p>
    <p num="31">The improved MMU includes an arbiter which makes the single ported buffer RAM appear to be simultaneously available to the MCU Interface Unit, (specifically both a microcontroller and a DMA controller therein) and to the SIE interface via an SIE DMA controller located in the MMU.</p>
    <p num="32">
      The MMU includes a single receive packet queue and a plurality of transmit packet queues.
      <br/>
      These queues do not store packets (the packets being stored in the single ported RAM).
      <br/>
      Rather, the queues store numbers or other identifiers for the packets stored in the RAM.
      <br/>
      The single receive packet queue stores packet numbers for packets received from the USB and addressed to a USB endpoint.
      <br/>
      Each transmit queue stores packet numbers for packets to be transmitted from the corresponding USB endpoint to the USB host.
    </p>
    <p num="33">
      The inventive MMU includes a memory manager which allocates space (e.g., pages) to each packet in the RAM and provides a mechanism for converting between packet numbers and the physical addresses in RAM where the corresponding packets are stored.
      <br/>
      Thus, to access a packet buffered in the RAM, the packet number in the appropriate queue is retrieved to determine the particular address space in RAM to be accessed.
    </p>
    <p num="34">
      The inventive USB peripheral microcontroller is highly advantageous in comparison to prior art USB peripheral controllers because of its highly efficient use of a packet RAM in the MMU.
      <br/>
      In particular, in the inventive USB peripheral microcontroller, capacity in the packet buffer RAM is dynamically allocatable between packets from multiple USB endpoints and packets from USB host.
      <br/>
      This is far more efficient than the prior art which utilizes a dedicated FIFO for each USB endpoint.
    </p>
    <p num="35">
      Consider for example a USB Data/Fax/Speaker Phone modem.
      <br/>
      One USB endpoint is configured to receive and transmit Isochronous Speaker Phone Digital Audio (384 byte packets).
      <br/>
      Another USB endpoint is configured for Digital Modem Data (64 byte packets).
      <br/>
      If the user is talking on the phone, no data is being sent.
      <br/>
      If data is being sent, the user is not talking on the phone.
      <br/>
      A conventional USB microcontroller includes a two packet FIFO for the first endpoint and an additional two packet FIFO for the second endpoint for a total of 384+384+64+64=896 bytes of FIFO.
      <br/>
      In contrast, the inventive USB microcontroller has a Memory Management Unit which would require only 768 bytes (i.e., two audio packets) of RAM (not FIFO) because the RAM is dynamically allocatable among the endpoints.
    </p>
    <p num="36">
      The USB microcontroller with improved MMU of the present invention has an improved datapath in comparison to conventional USB microcontrollers.
      <br/>
      Specifically, the MMU with SIE DMA controller and arbiter makes the following datapaths available
    </p>
    <p num="37">
      (a) SIE --&gt; SIE DMA --&gt; BUFFER RAM
      <br/>
      (b) Buffer RAM --&gt; MCU Interface Unit DMA controller --&gt; Peripheral
      <br/>
      (c) Buffer RAM --&gt; MCU Microcontroller --&gt; Peripheral
    </p>
    <p num="38">As indicated by these data paths, the arbiter permits multiple masters to access the buffer RAM simultaneously.</p>
    <p num="39">The inventive USB peripheral microcontroller may be implemented as a single integrated circuit.</p>
    <p num="40">
      In an alternative embodiment of the invention, the MCU Interface Unit may be omitted.
      <br/>
      In this case, the USB peripheral microcontroller comprises an SIE, an MMU, and an external interface device for connecting with an external MPU, DSP (Digital Signal Processor), DMA Engine, or other external device.
      <br/>
      In this case, the MMU has the same architecture as discussed above wherein an arbiter makes a single ported packet buffer RAM appear to be available to both the external device interface and SIE DMA controller.
      <br/>
      The transmit and receive queues are used to store packet identifiers in the manner discussed above.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWING</heading>
    <p num="41">
      FIG. 1 schematically illustrates a USB system architecture.
      <br/>
      FIG. 2 schematically illustrates a USB peripheral microcontroller.
      <br/>
      FIG. 3 schematically illustrates a USB peripheral microcontroller in accordance with an illustrative embodiment of the present invention.
      <br/>
      FIG. 4 schematically illustrates a USB peripheral microcontroller in accordance with an alternative illustrative embodiment of the invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="42">
      A USB peripheral microcontroller in accordance with an illustrative embodiment of the present invention is shown in FIG. 1.
      <br/>
      The USB peripheral microcontroller comprises the Serial Interface Engine (SIE) 60, the MCU Interface Unit 70, and the Memory Manager Unit 80.
    </p>
    <p num="43">
      The Serial Interface Engine 60 comprises the analog transceiver 62, the SIE function block 64, the SIE DMA interface logic 66, and the endpoint control logic 68.
      <br/>
      The analog transceiver 62 connects the SIE 60 to a USB differential line 61, which line 61 is in turn connected to a USB host or a USB hub.
      <br/>
      The specification for this transceiver is in chapter 7 of the USB specification referred to above.
      <br/>
      The SIE function block translates packets of the serial USB bitstream into parallel data.
      <br/>
      As is explained below, this parallel data is then buffered in the RAM 82 in the MMU 80.
      <br/>
      The SIE function block 64 also translates packets retrieved from the buffer RAM 82 in the MMU 70 into USB format serial packets.
    </p>
    <p num="44">
      The endpoint control logic 68 provides control signals to properly sequence the SIE function block 64 through the USB protocol, for example, for packet generation/reception, PID (Packet ID) verification, CRC checking, etc.
      <br/>
      The SIE DMA interface logic 66 generates and loads packet identification information (e.g., packet number or other packet header information) into the Rx queue 92 in the MMU 80 via the SIE DMA controller in the MMU 80.
    </p>
    <p num="45">
      The MCU Interface Unit 70 includes two masters, a microcontroller 72 such as the 8051 and a DMA controller 74 such as the 8237.
      <br/>
      The masters 72 and 74 are connected to a bus interface engine 76.
      <br/>
      The bus interface engine is connected to the I/O controller of a peripheral (not shown).
      <br/>
      Illustratively, both the peripheral I/O controller and Bus Interface Engine generate ISA bus type transactions.
      <br/>
      In alternative embodiments of the invention, transactions for different bus types, such as EISA, PCI or NU may be utilized.
    </p>
    <p num="46">
      It should be noted that the 8051 microcontroller can be replaced by any CPU or even a hard coded state machine.
      <br/>
      The DMA controller 74 is optional and may be omitted.
      <br/>
      Alternatively, the MCU interface unit may include several different kinds of bus interface engines.
    </p>
    <p num="47">In another case, the USB peripheral microcontroller may interface with the proprietary bus of a super I/O chip.</p>
    <p num="48">
      The Memory Manager Unit 80 comprises the RAM 82.
      <br/>
      The RAM 82 buffers packets which arrive from the USB host and buffers packets which arrive from the USB peripheral.
      <br/>
      The capacity of the RAM is dynamically allocatable to these various packets.
      <br/>
      The Memory Manager Unit 80 also includes an arbiter 84 and an SIE DMA controller 86.
      <br/>
      The SIE 60 accesses the RAM 82 via the SIE DMA controller 86.
      <br/>
      The arbiter 84 makes the single ported RAM buffer 82 appear to be simultaneously available to two masters in the MCU Interface Unit 70, i.e., the DMA controller 74 and microcontroller 72, and to the SIE DMA controller 86.
    </p>
    <p num="49">
      The Memory Manager Unit 80 also includes a plurality of queues 92, 94.
      <br/>
      The Rx (receive queue) 92 stores a packet number which identifies each packet from USB host which is buffered in the RAM 82.
    </p>
    <p num="50">
      There are also a plurality of Tx (i.e., transmit) queues 94.
      <br/>
      There is one transmit queue 94 for each USB endpoint associated with the peripheral device.
      <br/>
      Each Tx queue 94 stores the packet numbers for the packets from the corresponding USB endpoint which are buffered in the RAM 82.
      <br/>
      The queues 92, 94 are controlled by a queue control 95 which forms part of the SIE DMA controller 86.
    </p>
    <p num="51">
      The Memory Manager Unit 86 also includes a memory manager 98 and a MAP RAM 99.
      <br/>
      The memory manager 98 and MAP RAM 99 together generate a physical address in the packet buffer RAM 82.
      <br/>
      One such addressing scheme is discussed in detail in the above-identified U.S. Pat. No. 5,313,588. Consider, for example, the case where the RAM 82 is a 4K RAM which comprises 32 pages * 128 bytes per page.
      <br/>
      Each byte location in the RAM has a 12-bit address.
      <br/>
      The five MSB (Most Significant Bits) of the address are outputted from the MAP RAM 99 in response to a packet number and a page number within the packet generated by the arbiter 84.
      <br/>
      The 7 LSB (Least Significant Bits) of the address are a page offset output directly by the arbiter 84.
    </p>
    <p num="52">
      The operation of the inventive USB peripheral microcontroller with inventive Memory Manager Unit is now considered.
      <br/>
      Specifically, four transactions are considered.
      <br/>
      These are (1) receiving a packet from the USB host, (2) sending a packet to the ISA Peripheral, (3) receiving a packet from the ISA Peripheral, and (4) sending a packet to the USB host.
    </p>
    <p num="53">(1) Receiving a Packet from the USB Host</p>
    <p num="54">
      As the SYNC field of a USB packet from the host is detected by the SIE function block 64, the SIE DMA 86 requests a single page allocation in RAM 82 from the arbiter 84.
      <br/>
      The SIE DMA 86 transfers data from the SIE function block 64 into the RAM 82 and requests the arbiter 84 to allocate more pages as needed.
      <br/>
      The memory manager 98 generates a packet number for the packet which is stored in the Rx queue 92. (This packet number may be utilized later by the memory manager 98 to generate the address space in the RAM 82 where the packet is stored for subsequent retrieval of the packet.)
    </p>
    <p num="55">(2) Sending a Packet to the ISA Peripheral</p>
    <p num="56">
      A valid packet number (retrieved from the Rx queue 92) and offset is all that is needed for the MCU Interface Unit (DMA controller or microcontroller) to generate the necessary physical address to access any allocated byte in the buffer RAM 82.
      <br/>
      The access request to the buffer RAM 82 can be made by the DMA controller 74 or microcontroller 72 to the arbiter 84.
      <br/>
      The retrieved data from the RAM 82 can be written into the address space of the Bus Interface Engine 76 for transfer to the peripheral.
    </p>
    <p num="57">(3) Receiving a Packet from the ISA Peripheral</p>
    <p num="58">
      To load data from the peripheral, the MCU Interface Unit transmits to the arbiter 84 a request for an allocation of new buffer pages in the RAM 82.
      <br/>
      The MCU Interface Unit can then write data from the Bus Interface Engine into the RAM 82 using packet number and auto generated offsets.
      <br/>
      The packet numbers are stored in the appropriate Tx queue 94.
    </p>
    <p num="59">(4) Sending a Packet to the USB Host</p>
    <p num="60">
      When the USB host polls a particular USB endpoint, the SIE DMA 86 immediately makes a request to the arbiter 84 for read access to the next packet in the Tx queue 94 for the polled USB endpoint.
      <br/>
      The packet number from the queue is utilized to generate the physical address for the packet in RAM 82.
      <br/>
      The corresponding packet is read from the RAM 82 and transferred via the SIE DMA controller 86 to the SIE 60 for transmission to the USB host.
    </p>
    <p num="61">
      An alternative embodiment of the invention is shown in FIG. 4.
      <br/>
      The USB peripheral microcontroller 50' of FIG. 4 comprises an SIE 60 and an MMU 80.
      <br/>
      The SIE 60 and MMU 80 of FIG. 4 are identical to those shown in FIG. 3.
      <br/>
      In FIG. 4, the MCU Interface unit 70 is omitted and instead there is an external device interface 170 which is connected to the arbiter 84 in the MMU 80.
      <br/>
      The external device interface 170 can be connected with an external microcontroller or DSP.
      <br/>
      This can provide a high performance USB connection to an existing peripheral device which has its own main microcontroller and which has its own proprietary bus structure.
      <br/>
      Some examples of such existing peripherals are printers and disk drives with existing microcontrollers.
    </p>
    <p num="62">
      In the USB peripheral microcontroller of FIG. 4, the arbiter 84 makes the single ported packet buffer RAM 82 appear to be simultaneously available to the external device interface 170 and to the SIE DMA controller 86.
      <br/>
      The RAM 82 then buffers packets which come from the external device connected to the interface 170 and packets which arrive from the USB host via SIE 60.
    </p>
    <p num="63">The Rx queue 92 and Tx queues 94 serve the functions discussed above.</p>
    <p num="64">
      In short, a novel USB peripheral microcontroller has been disclosed.
      <br/>
      Finally, the above-described embodiments of the invention are intended to be illustrative only.
      <br/>
      Numerous alternative embodiments may be devised by those skilled in the art without departing from the scope of the claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A USB microcontroller comprising:</claim-text>
      <claim-text>a first interface for interfacing with one of a USB host or USB hub, at least one second interface for interfacing with at least one peripheral device so that said peripheral device can be connected to said USB host or USB hub, and a single memory management unit connected to both said first and said at least one second interface, said memory management unit comprising a RAM for buffering packets received from said first interface or received from said at least one second interface, wherein said RAM is not limited to buffering said packets in a first-in-first-out (FIFO) paradigm, and an arbiter for dynamically allocating capacity in said RAM to packets received from said first and said at least one second interface.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The USB microcontroller of claim 1 wherein said first interface is a Serial Interface Engine (SIE).</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The USB microcontroller of claim 1 wherein said memory management unit includes a first DMA controller for providing a data path between said first interface and said RAM.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The USB microcontroller of claim 3 wherein said second interface comprises a microcontroller and a second DMA controller and wherein said arbiter arbitrates access of said first DMA controller, said second DMA controller and said microcontroller to said RAM.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The USB microcontroller of claim 4 wherein said second interface includes a bus interface for connecting to an I/O controller of said peripheral.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The USB microcontroller of claim 5 wherein said bus interface is an ISA bus interface.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The USB microcontroller of claim 5 wherein said bus interface is an EISA bus interface.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The USB microcontroller of claim 5 wherein said bus interface is a PCI bus interface.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The USB microcontroller of claim 5 wherein said bus interface is an NU bus interface.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The USB microcontroller of claim 1 wherein said memory management unit includes a receive packet buffer for storing packet identifiers corresponding to packets received from said USB host and buffered in said RAM.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The USB microcontroller of claim 10 wherein said memory management unit includes a transmit packet buffer corresponding to each USB endpoint associated with said peripheral device, each of said transmit packet buffers storing packet identifiers for packets buffered in said RAM and associated with the corresponding USB endpoint.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The memory management unit of claim 11 wherein said memory management unit includes a circuit for converting between said packet identifiers and a corresponding physical address space in said RAM.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The USB microcontroller of claim 1, wherein said first interface and said at least one second interface is capable of requesting an allocation of space of said RAM from said arbiter, such that said arbiter dynamically allocates space to multiple requesting interfaces simultaneously.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A USB microcontroller comprising: a first interface for interfacing with one of a USB host or USB hub, at least one second interface for interfacing with at least one peripheral device so that said peripheral device can be connected to said USB, and a memory management unit for use in a USB peripheral controller comprising a single RAM whose address space is dynamically allocatable between packets associated with a plurality of USB endpoints and packets associated with said USB host, and whose buffering is not limited to a first-in-first-out (FIFO) paradigm.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The USB microcontroller of claim 14 further comprising a receive buffer for storing identifiers of said packets associated with said USB host.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The USB microcontroller of claim 14 further comprising a transmit buffer corresponding to each of said USB endpoints for storing identifiers of said packets associated with the corresponding USB endpoints.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The USB microcontroller of claim 14 further comprising an arbiter which controls allocation of said address space in said RAM to said packets.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The USB microcontroller of claim 17 further including a first DMA controller for enabling a USB Serial Interface Engine to access said RAM.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The USB microcontroller of claim 18 wherein said arbiter enables a microcontroller and a second DMA controller to access said RAM.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. A USB microcontroller comprising: a first interface for interfacing with one of USB host or USB hub, a second interface for interfacing with at least one peripheral device and comprising first and second masters, a memory management unit connected to both said first and second interfaces, said memory management unit comprising a single RAM whose address space is dynamically allocated to packets directly received by the first and second interfaces, where the packets are associated with both a plurality of USB endpoints and said USB host, wherein said RAM is not limited to buffering said packets in a first-in-first-out (FIFO) paradigm, and an arbiter for enabling said first and second masters and a master associated with said first interface to access said RAM.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. A memory management unit for a USB peripheral controller comprising a single RAM whose address space is dynamically allocatable between packets directly received from a plurality of USB endpoints and a USB host, a receive queue for queuing identifiers of said packets associated with said USB host, a transmit queue associated with each of said USB endpoints for queuing identifiers of said packets associated with the corresponding USB endpoint.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The memory management unit of claim 21, further comprising a circuit for relating each of said packet identifiers to a particular address space in said RAM.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The memory management unit of claim 21 wherein said memory management unit is connected to an external device interface and to USB serial input engine.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. A USB peripheral microcontroller comprising: a Serial Input Engine for interfacing with one of a USB host or USB hub, an external device interface for interfacing with at least one peripheral device, and a memory management unit connected to said Serial Input Engine and said external device interface, said memory management unit comprising a RAM whose address space is dynamically allocated to packets generated at one or more USB endpoints associated with said at least one peripheral device and packets transmitted from said host via said USB hub, and whose buffering is not limited to a first-in-first-out (FIFO) paradigm.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. A USB microcontroller comprising: a first interface for interfacing with one of a USB host or USB hub, said first interface being an upstream USB port, at least one second interface for interfacing with at least one peripheral device so that said peripheral device can be connected to one of said USB host or said USB hub, and a single memory management unit connected to both said first and said at least one second interface wherein said USB microcontroller being configured such that one of said at least one peripheral device is capable of transfering information to another of said at least one peripheral device through said USB host or said USB hub.</claim-text>
    </claim>
  </claims>
</questel-patent-document>