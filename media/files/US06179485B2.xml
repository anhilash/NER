<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06179485B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06179485</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6179485</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25025265" extended-family-id="2567129">
      <document-id>
        <country>US</country>
        <doc-number>08752190</doc-number>
        <kind>A</kind>
        <date>19961118</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1996US-08752190</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>2671094</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>75219096</doc-number>
        <kind>A</kind>
        <date>19961118</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1996US-08752190</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>B41J   5/30        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>B</section>
        <class>41</class>
        <subclass>J</subclass>
        <main-group>5</main-group>
        <subgroup>30</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>B41J  21/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>B</section>
        <class>41</class>
        <subclass>J</subclass>
        <main-group>21</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G03G  21/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>03</class>
        <subclass>G</subclass>
        <main-group>21</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F   3/12        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>12</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>H04N   1/40        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>1</main-group>
        <subgroup>40</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>H04N   1/60        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>1</main-group>
        <subgroup>60</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>358001900</text>
        <class>358</class>
        <subclass>001900</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>358001110</text>
        <class>358</class>
        <subclass>001110</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>358401000</text>
        <class>358</class>
        <subclass>401000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>358501000</text>
        <class>358</class>
        <subclass>501000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>358530000</text>
        <class>358</class>
        <subclass>530000</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>382162000</text>
        <class>382</class>
        <subclass>162000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04N-001/40B</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>001</main-group>
        <subgroup>40B</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-001/40012</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>1</main-group>
        <subgroup>40012</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>18</number-of-claims>
    <exemplary-claim>18</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>7</number-of-drawing-sheets>
      <number-of-figures>9</number-of-figures>
      <image-key data-format="questel">US6179485</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Printing black and white reproducible colored stroke documents</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>ISEMURA KEIZO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5557430</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5557430</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>KAMEI MASAFUMI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5691827</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5691827</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>HARRINGTON STEVEN J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5701401</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5701401</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>ISEMURA KEIZO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5726781</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5726781</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>HOYDIC F</text>
          <document-id>
            <country>US</country>
            <doc-number>3807852</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US3807852</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>OHNUMA TAKASHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4308551</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4308551</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>HAGGERTY WILLIAM T</text>
          <document-id>
            <country>US</country>
            <doc-number>4703318</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4703318</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>VOORHEES SCOTT W</text>
          <document-id>
            <country>US</country>
            <doc-number>5098817</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5098817</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>NG YEE S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5138465</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5138465</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>KARIDIS JOHN P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5142337</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5142337</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>HARRINGTON STEVEN J</text>
          <document-id>
            <country>US</country>
            <doc-number>5153576</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5153576</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>LAMAN ROBERT R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5153739</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5153739</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>HECKMAN DEAN A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5291243</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5291243</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>HASUO KAMON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5321470</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5321470</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>WAGLEY JOHN S</text>
          <document-id>
            <country>US</country>
            <doc-number>5568248</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5568248</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Xerox Corporation</orgname>
            <address>
              <address-1>Stamford, CT, US</address-1>
              <city>Stamford</city>
              <state>CT</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>XEROX</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Harrington, Steven J.</name>
            <address>
              <address-1>Webster, NY, US</address-1>
              <city>Webster</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Costello, Mark</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Rogers, Scott</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A document containing colored strokes or lines is reproduced in a way to preserve the color intent if the reproduced document is copied on a black-and-white device.
      <br/>
      Dashed lines are generated for insertion into the stroke, with dashing patterns that reflect the original color of the stroke.
      <br/>
      Outlining in black or white, dependent on the stroke color, may be provided.
      <br/>
      If the stroke is wide enough, the color within the stroke may alternatively be reproduced with a black and white reproducible pattern.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The present invention relates to a method and apparatus for printing color documents in such a manner that when the color documents are reproduced on a black and white copier or printer, their color information content is retained.</p>
    <heading>CROSS REFERENCE AND INCORPORATION BY REFERENCE</heading>
    <p num="2">
      Cross reference is made to co-pending U.S. patent application Ser.
      <br/>
      No. 08/720,654, now U.S. Pat. No. 5,701,401,by S. Harrington and J. Taber, entitled, "Printing Black and White Reproducible Documents", which is also incorporated by reference for its teachings.
    </p>
    <heading>COPYRIGHT NOTICE</heading>
    <p num="3">A portion of the disclosure of this patent document contains material which is subject to copyright protection, The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or record, but otherwise reserves all copyright rights whatsoever.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="4">
      Color printers and copiers usually operate in work environments that still include black and white devices.
      <br/>
      While color printing has become increasingly common in the workplace, the cost of color printing still remains substantially above that of black and white printing.
      <br/>
      Thus, while color documents can be readily created for small volume use, large volume reproduction suggests that black and white printers or copiers should be used.
    </p>
    <p num="5">
      When a color document is copied to black and white, the information conveyed by the color can be lost.
      <br/>
      Information is often conveyed by color through the use of distinct colors representing distinct information.
      <br/>
      When color documents are copied on a black and white copier, or faxed on a black and white facsimile machine, or reproduced from a color file to a black and white print, information may be lost.
      <br/>
      These devices usually threshold the luminance component of the source image to represent the image in either black or white, raising the problem of translating the intermediate luminance of colored objects on a page.
      <br/>
      Many darker colors often copy as black, while lighter colors drop out completely.
      <br/>
      When gray tones are reproduced, they are often mottled or ragged.
      <br/>
      Ironically, increases in printer resolution and halftone frequency that improve color image quality act to exacerbate the copy problem.
      <br/>
      Increases in printer resolution make the image appear to the copier as well as to the human observer as smooth areas of intermediate luminance rather than a pattern of halftone dots.
    </p>
    <p num="6">
      Even if a copier could reproduce the luminance level of source colors reliably, many different colors have the same luminance and are therefore indistinguishable after copying.
      <br/>
      This may not be a severe problem for pictorial images where much of the information is in the luminance component, but for text or presentation graphics, color offers new dimensions for conveying information.
      <br/>
      Color can be used to organize important items, distinguish categories, and organize documents and document content.
      <br/>
      However, when copied or faxed to black and white, the distinguishing capability of color is lost.
    </p>
    <p num="7">
      The primary goals of most documents is to convey information.
      <br/>
      If one can anticipate that the document will be copied or faxed with a black-and-white reproduction device, and information might therefore, be lost, it might be desirable to sacrifice some of the appearance of the original document for the sake of information content.
      <br/>
      One might, for example, decide not to use color at all.
      <br/>
      Alternatively, a selection may be made to use only color and color features that can be copied well.
      <br/>
      Such choices are significant barriers in document creation.
    </p>
    <p num="8">
      It is known that selected background and/or alphanumeric text areas may be printed in repeating and/or varying patterns of highlight color and interposed with black repeating or varying patterns as disclosed, for example, for single pass xerographic printing of composite image security documents in U.S. Pat. No. 5,291,243 to Heckman et al.
      <br/>
      Some of such color patterns might also reproduce when such documents are copied on a black and white copier, however, such copying is not reliable.
    </p>
    <p num="9">
      Of further background interest are U.S. Pat. No.5,308,553 to Roetling and U.S. Pat. No. 5,153,576 to Harrington.
      <br/>
      These patents, however, electronically convert a full color document into a monochrome facsimile for subsequent monochrome printing by electronically converting pixel by pixel the original solid colors into various different patterns of black only images.
      <br/>
      Such an arrangement, by definition, does not produce originals, which are reproduced in color, for subsequent copying on a black and white copier which retains the informational content of the original color image.
      <br/>
      Further, the patterns that these methods produce are limited either to a fixed set, or to designs directly controlled by only the three color components and where areas controlled by the different color components do not overlap.
    </p>
    <p num="10">
      Other patents of interest include U.S. Pat. No. 4,703,318 to Haggerty, which illustrates the idea of forming a character based monochromatic image from a digital representation of a color image by: (1) forming a character based representation of the color image in which a plurality of color characters each describe the background or foreground color within a defined area of the color image; (2) providing a plurality of color pattern masks each corresponding to a color in the color image comprising a pattern of light and dark dots capable of providing in the monochromatic image visual discrimination between areas of different color; (3) transforming the color characters into monochromatic characters by replacing the background and foreground colors of each color character in the corresponding pattern of light and dark dots; and (4) displaying the monochromatic characters on a character based output device.
      <br/>
      The present invention differs from Haggerty in that the goal is to produce a printed image in which is copyable, and in which colors and shades of colors can be reproduced to maintain the informational content of the original document which used those colors.
    </p>
    <p num="11">U.S. Pat. No. 3,807,852 to Hoydic illustrates an arrangement in which color is used to identify particular identified areas for copying on a black and white copier.</p>
    <p num="12">U.S. Pat. No. 5,321,470 to Hasuo et al relates to an arrangement which uses color and the processes of a color copier to prevent forgery of color documents by improper copying.</p>
    <p num="13">U.S. Pat. No. 5,138,465 to Ng et al relates to an apparatus and method for producing selectively edited reproductions of the original document in which alphanumeric character codes written using highlighted color arrangements designated treatment to be applied to a particular document.</p>
    <p num="14">
      U.S. Pat. No. 5,153,739 to Laman et al the use of different fonts corresponding to different colors.
      <br/>
      In such an arrangement, the difference in the font itself provides distinction between different colors which copied in black and white.
    </p>
    <p num="15">
      U.S. Pat. No. 5,098,817 to Voorhees teaches highlighting of text in a manner which will reproduce when electronically copied.
      <br/>
      This is accomplished by applying a tone to only that area of the document to be highlighted and so that the tone remains in place during copying.
      <br/>
      The tone is sufficiently dark so as to highlight text but light enough so that the text is readable.
    </p>
    <p num="16">U.S. Pat. No. 5,142,337 to Karidis et al teaches an arrangement for reproducing gray levels in place of colors in a two color printer.</p>
    <p num="17">U.S. Pat. No. 5,568,248 to Wagley teaches that a pattern can be substituted for a color in a document reproduction.</p>
    <p num="18">The above-identified references are incorporated herein by reference for their teachings.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="19">The present invention is directed to a method and apparatus for producing a varying pattern in colors which allows the use of color in the creation of a color original, and will retain distinguishing color content when the color original is copied in black and white.</p>
    <p num="20">
      Merely using patterns to make colors reproduce in a distinguishable form when copied to black-and-white will not work for strokes (unless the strokes are quite large) because the coarse pattern will interfere with the fine structure of the strokes.
      <br/>
      The result would appear ragged or dashed or might vanish completely.
      <br/>
      A technique is described for printing colored strokes in such a way that they can be copied and still remain distinguishable in black-and-white.
    </p>
    <p num="21">
      These and other aspects of the invention will become apparent from the following description used to illustrate a preferred embodiment of the invention and read in conjunction with the accompanying drawings in which:
      <br/>
      FIG. 1 illustrates a system in which the present invention may find advantageous use;
      <br/>
      FIGS. 2A and 2B show the appearance of a dashed centerline overlaid on the colored line or stroke;
      <br/>
      FIG. 3 illustrates the use of dash length and spacing to indicate color;
      <br/>
      FIG. 4 shows the effect of outlining strokes or lines against ark or light background; and
      <br/>
      FIGS. 5-8 show a flow chart for a processor-based implementation of the invention.
    </p>
    <p num="22">
      Initially, the principles of the invention will be discussed before describing an embodiment of the invention.
      <br/>
      In accordance with the invention, a method to allow black and white friendly copying, is to impose a pattern in the colors in graphic strokes within an image, where the pattern has a distinctive appearance in the luminance component of the image.
      <br/>
      The idea is that upon copying, the pattern remains even though the color is lost.
      <br/>
      Thus, one can tell that the stroke had color and even distinguish between, strokes of different colors since they will have different patterns.
      <br/>
      The motivation is similar to that of the above-cited Roetling and Harrington patents, which map colors to black-and-white textures that can then be copied.
      <br/>
      The method described here differs, however, in that it produces colored stroke patterns that use original colors in the original color document Thus the original document can use color to display information, and retains its colored look if it, is not copied.
    </p>
    <p num="23">
      Merely using patterns to make colors reproduce in a distinguishable form when copied to black-and-white will not work for strokes (unless the strokes are quite large) because the coarse pattern will interfere with the fine structure of the strokes.
      <br/>
      The result would appear ragged or dashed or might vanish completely.
      <br/>
      Described is a technique for printing colored strokes in such a way that they can be copied and still remain distinguishable in black-and-white.
      <br/>
      Colored lines are indistinguishable when copied, or printed on a black and white printer The objective is that the copies of the colored lines and strokes to be visible and look different from the black or white ones.
      <br/>
      In addition, one would like to be able to distinguish strokes of different colors even after reduction to black-and-white.
    </p>
    <p num="24">
      One way to guarantee that the colored strokes will copy and will look different from black or white cases is to draw them as outlines with light interiors.
      <br/>
      The problem with using this alone is that it does not provide a means for differentiating colors after copying.
      <br/>
      In addition, limiting color to boundaries of the stroke may adversely affect the visibility and impact of the color in the original copyable colored image.
    </p>
    <p num="25">
      The method proposed here is to include a dash pattern within small and medium width strokes and lines.
      <br/>
      The interiors of wide strokes may be filled with patterns such as described for solid areas in co-pending U.S. patent application Ser.
      <br/>
      No. 08/720,654, by S. Harrington and J. Taber. With reference to FIG. 2, a dash pattern of black and/or white dashes can be placed along the center of the stroke and can have a width much smaller than the stroke (for example, a quarter of the original stroke width).
      <br/>
      This allows the rest of the stroke to be filled with the desired color, thus preserving much of the impact of the color, as seen in FIG. 2.
      <br/>
      For very thin strokes there will be some limiting width that the printing device is capable of producing.
      <br/>
      The dash pattern cannot be reduced beyond this width, so for even thinner strokes the colored area beyond the dash pattern will continue to shrink until it encounters the limits of the device.
      <br/>
      At this point the color will be contributed by only the spaces between the dashes.
      <br/>
      Of course, other dashed line colors could be used, although white and black are desirable because of their strong contrast in luminance with most colors.
    </p>
    <p num="26">
      Referring now to FIG. 3, one would like every color to have a unique dash pattern.
      <br/>
      Colors can be expressed in terms of red, green, and blue amounts (r, g, b), so every r, g, b coordinate triple should map to a unique dash pattern.
      <br/>
      The approach is to allow the r, g, and b values to control the length of the dashes.
      <br/>
      For example, a large b value would generate a long dash, a small value a short dash.
      <br/>
      The three parameters r, g, and b will each control a distinct and identifiable portion of the pattern.
    </p>
    <p num="27">
      When colors are copied to black-and-white, some appear black while others become white.
      <br/>
      If one uses black dashes against a color that copies as black, then they will not be visible.
      <br/>
      Likewise, white dashes will disappear against colors that copy as white.
      <br/>
      To overcome this problem, we construct the dash pattern using both black and white dashes.
      <br/>
      At least one will always be visible.
      <br/>
      While you could use the same dash lengths for both black and white dashes, it is better to use r, g, b for black dashes and 1-r, 1-g, 1-b to control the lengths of the white (Here r, g, and b are assumed to vary between 0 and 1).
      <br/>
      There are two advantages in doing this.
      <br/>
      One is that for light colors you get long black dashes that are easily visible and short white ones, while for dark colors one gets long white dashes that are again easily visible and short black ones.
      <br/>
      The second advantage is that the black and white dash lengths add up to a constant value so that taken together the frequency of the dash pattern does not change.
      <br/>
      This means that the length of the overall pattern can be used for any color component as a way of differentiating components from each other.
      <br/>
      For example, the length of the portion of the pattern contributed by red can be made shorter than the length contributed by green.
    </p>
    <p num="28">
      The number of dashes can also be used in the portion of the pattern contributed by a color component to distinguish it from other components.
      <br/>
      A possible pattern structure is shown in FIG. 3, which shows an example line segment with a red control area, a green control area, and a blue control area.
    </p>
    <p num="29">
      You can outline the stroke as well as place the dash pattern down its center so that the stroke-width will be indicated when copied, even if the color disappears.
      <br/>
      The outline can be black or white or some combination of the two.
      <br/>
      When the source image contains dashed strokes, trying to place dashes within dashes may be too much and just result in confusion.
      <br/>
      Dashed strokes can be drawn using just the outline, or with the outline and a solid black or white contrasting stroke down the center to guarantee copying.
      <br/>
      The color-dependent central dash pattern should be used only when the original stroke is solid.
      <br/>
      The effect of this pattern on strokes of various colors is shown in FIG. 4, which shows various strokes, outlines and non-outlined, against a white background and a dark background.
      <br/>
      Stokes A, C and F have white outlining, while strokes B, D, and E have black outlining.
      <br/>
      Strokes G-L all have black outlining.
    </p>
    <p num="30">
      The black-and-white friendly stroke patterns described can be constructed by replacing the original stroke with an overlaid sequence of solid and dashed strokes along the same original center line.
      <br/>
      The effect of outlining a stroke can be obtained by drawing a stroke with greater width in the outline color beneath the stroke drawn in the interior color.
      <br/>
      The black and white dash patterns can be created by drawing black dashed strokes and white dashed strokes on top of the colored stroke.
      <br/>
      Dashes can also be produced by individually placing each black or white dash if the page description does not support a dashed stroke primitive.
      <br/>
      The substitution of the stroke set producing the patterns for the original stroke can occur either at the PDL level by the print driver or at the raster level by the rasterization software.
    </p>
    <p num="31">
      A GDI description might be modified to construct the stroke patterns although this would entail individual description of each dash.
      <br/>
      Modification of the rendering software would most likely provide the most efficient implementation, but it requires control of that software.
    </p>
    <p num="32">
      Turning now to an implementation of the invention, and referring to FIG. 1, a simplistic description of a possible environment for the invention is shown.
      <br/>
      A document creator 10, perhaps a computer or word processor, generates a file in a PDL or page description language.
      <br/>
      An image processing unit 11 includes, among other functions, a PDL interpreter 12 and a black and white preservation specification function 13.
      <br/>
      Determination of whether black and white preservation rendering will be applied occurs within the IPU, at block 13 responsive to the PDL file directed thereto.
      <br/>
      The PDL is a relatively high level language, which must be interpreted or decomposed to generate a rasterized image for use by a printer.
      <br/>
      Typically, a decomposer or interpreter 12, which accomplishes this task can be in either a computer attached to a printer, or be combined or combinable with a printer, as a "printer front end" or ESS.
      <br/>
      Upon generating a rasterized version of the image, the decomposer passed the image to a printer engine for printing.
      <br/>
      A document is output as a result of the process.
      <br/>
      The printer in the particular environment shown may be either a color printer 14 or a black and white printer 16.
      <br/>
      In this environment, an ON/OFF switch is provided, suitably by a user interface command to the application software, to turn ON or OFF the black and white reproducible print option.
    </p>
    <p num="33">
      At FIG. 5, the Stroke module is called by interpreter 12, when required.
      <br/>
      At step 100, an determination is made as to whether the stroke is black /white or colored.
      <br/>
      If the stroke is black/white, at step 102 a normal stroke process is used to generate the stroke.
      <br/>
      If the stroke is colored, at step 110, it is checked to see if it is dashed.
      <br/>
      If the stroke is dashed, at step 112, the dashed stroke elements are outlined, using module Patdash, better shown at FIG. 6.
    </p>
    <p num="34">
      At FIG. 6, module Patdash is illustrated.
      <br/>
      Initially, the stroke is outlined at step 202.
      <br/>
      At step 204, the dashed stroke is imaged or rasterized.
      <br/>
      At step 206, a stroke width for the thin center line is determined.
      <br/>
      At step 208, the color of the thin center line stroke is set to white.
      <br/>
      At step 210, the thin center line is imaged or rasterized and combined with the main dashed stroke, and the process returns to module stroke in FIG. 5.
    </p>
    <p num="35">
      Referring now back to FIG. 5, if at step 110, the stroke is determined not to be dashed, then at step 113, the outline of the stroke, or the stroke boundary, is generated at module Strokeboundary.
      <br/>
      Referring now to FIG. 7, this process begins with a determination of luminance of the stroke at step 302.
      <br/>
      At step 304, luminance of the stroke is checked against a preset threshold such as 0.7 on as scale of 0 to 1.
      <br/>
      Alternatively, on a system that allows examination of the background values, the luminance of the background can be obtained and examined in steps 302 and 304.
      <br/>
      Depending on whether the luminance exceeds the threshold level, the outline color of the stroke is set either to black (step 306) or white (step 308).
      <br/>
      Taking into account the determination, the black or white outline is generated at step 310.
      <br/>
      Next, based on the color of the stroke, a solid saturated color is determined or calculated for the stroke at step 312.
      <br/>
      With the color now available, a solid color outline is generated for the stroke, at step 314.
    </p>
    <p num="36">
      With the outline generated, the interior of the stroke is processed, with the module Patstroke 114, shown in detail at FIG. 8.
      <br/>
      At step 302, a determination is made initially as to whether the size is too small for a pattern representing the color to be imposed onto the stroke.
      <br/>
      If the stroke width is an appropriate size for such a pattern, the color of the stroke is set to such a pattern at step 304, and the stroke is imaged with such a pattern.
      <br/>
      For details of the pattern generation, see U.S. patent application Ser.
      <br/>
      No. 08/720,654 by S. Harrington and J. Taber, entitled, "Printing Black and White Reproducible Document", which is also incorporated by reference for its teachings.
    </p>
    <p num="37">
      If, at step 302 the stroke width is too small a value to include a pattern, then the stroke is imaged using the original color of the stroke at step 306.
      <br/>
      Next, a dash pattern is calculated using the color of the stroke at step 307.
      <br/>
      At step 308, the dash width is set, as a function of the stroke width.
      <br/>
      At step 310, the black and white dashed generated, for combination with the original color stroke.
    </p>
    <p num="38">It will no doubt be appreciated that this algorithm can be used for formatting strokes to be printed in color that is highly reproducible in black and white copying, or printed directly in black, in which case, the strokes are still formatted in a manner allowing black and white copying.</p>
    <p num="39">
      The disclosed method may be readily implemented in software using object oriented software development environments that provide portable source code that can be used on a variety of computer or workstation hardware platforms.
      <br/>
      Alternatively, the disclosed image processing system may be implemented partially or fully in hardware using standard logic circuits or specifically on a single chip using VLSI design.
      <br/>
      Whether software or hardware is used to implement the system varies depending on the speed and efficiency requirements of the system and also the particular function and the particular software or hardware systems and the particular microprocessor or microcomputer systems being utilized.
      <br/>
      The image processing system, however, can be readily developed by those skilled in the applicable arts without undue experimentation from the functional description provided herein together with a general knowledge of the computer arts.
    </p>
    <p num="40">
      While this invention has been described in conjunction with a preferred embodiment thereof, it is evident that many alternatives, modifications, and variations will be apparent to those skilled in the art.
      <br/>
      Accordingly, it is intended to embrace all such alternatives, modifications and variations as fall within the spirit and broad scope of the appended claims.
    </p>
    <p num="41">
      --
      <br/>
      -- �
      <br/>
      -- %--------------------------
      <br/>
      -- % BLACK-AND-WHITE FRIENDLY COLOR HEADER
      <br/>
      -- % Copyright Xerox Corporation, 1996.
      <br/>
      All rights reserved
      <br/>
      -- %--------------------------
      <br/>
      -- % Black-and-White Friendly Color provides rendering of a document so as to
      <br/>
      -- preserve
      <br/>
      -- % color information should the document be copied on a black-and-white
      <br/>
      -- device.
      <br/>
      -- % It does this by redefining the PostScript rendering operators.
      <br/>
      -- % Thick strokes are imaged by filling with two-dimensional patterns, but
      <br/>
      --  often
      <br/>
      -- % strokes and lines may be too thin to support the two-dimensional pattern.
      <br/>
      -- % The strategy, in this circumstance, is to place a
      <br/>
      -- % dash pattern down the center of the stroke.
      <br/>
      The dash pattern is made from
      <br/>
      -- % both black and white dashes on the colored background.
      <br/>
      This way at least
      <br/>
      -- % half of the dashes remain visible even if the color becomes solid black
      <br/>
      --  or
      <br/>
      -- % white when copied.
      <br/>
      Black or white edges can also be added to the border
      <br/>
      -- of the
      <br/>
      -- % stroke so that a colored stroke drawn on a colored background remains
      <br/>
      -- visible
      <br/>
      -- % when copied.
      <br/>
      Stroke processing is done by redefining the "stroke"
      <br/>
      -- operator.
      <br/>
      -- %------
      <br/>
      -- % define some useful parameters
      <br/>
      -- %------
      <br/>
      -- /patterncellsize 3 def  % controls the coarsness of the pattern
      <br/>
      -- /patternstrokewidth 7 def  % size for filling strokes with dashs or
      <br/>
      --  patterns
      <br/>
      -- %-----UTILITIES----------
      <br/>
      -- /currentrgbdecodecolor
      <br/>
      -- %------
      <br/>
      -- % This procedure is an alternative to currentrgbcolor that does reasonable
      <br/>
      -- things
      <br/>
      -- % when the device independent color spaces are used.
      <br/>
      -- % It's pretty dumb in that it just treats CIABasedABC as if it were RGB
      <br/>
      -- % with no conversions.
      <br/>
      -- % And for CIEBasedA it just duplicates the parameter twice for the RGB
      <br/>
      -- values.
      <br/>
      -- % PostScript should do the right thing for the device dependent spaces.
      <br/>
      -- % There is a setrgbcodecolor operator to set values extracted this way
      <br/>
      -- %-----
      <br/>
      -- + currentcolorspace  % determine what color space we must deal with
      <br/>
      -- 0 get     % we get an array with name and parameter, keep the
      <br/>
      -- name
      <br/>
      -- dup /CIEBasedABC eq   % dup the name so we dont lose it and see if its
      <br/>
      -- ABC
      <br/>
      -- +    % assume rgb in disguise for now
      <br/>
      -- pop currentcolor}  % if so pop the name and get the ABC values
      <br/>
      -- + dup /CIEBasedA eq   % if not see if its CIEBased A
      <br/>
      -- +    % assume gray linear for now
      <br/>
      -- pop currentcolor  % pop the name and get the A value
      <br/>
      -- dup dup }   % dup twice to get values for r, g and b
      <br/>
      -- +     % anything else use device rgb or black
      <br/>
      --   pop currentrgbcolor }
      <br/>
      -- ifelse
      <br/>
      -- } ifelse
      <br/>
      -- }bind def
      <br/>
      -- /setrgbcodecolor
      <br/>
      -- %-----
      <br/>
      -- % This procedure is an alternative to setrgbcolor that does reasonable
      <br/>
      --  things
      <br/>
      -- % when the device independent color spaces are used.
      <br/>
      -- % It's pretty dumb in that it just treats CIABasedABC as if it were RGB
      <br/>
      -- % with no conversions.
      <br/>
      -- % There is a setrgbcodecolor operator to set values extracted this way
      <br/>
      -- %----
      <br/>
      -- +currentcolorspace  % determine what color space we must deal with
      <br/>
      -- 0 get   % we get an array with name and parameter, keep the name
      <br/>
      -- /CIEBasedABC eq    % at this time we only support ABC or RGB
      <br/>
      -- +setcolor}
      <br/>
      -- +setrgbcolor}
      <br/>
      -- ifelse
      <br/>
      -- } bind def
      <br/>
      -- %------ STROKE RENDERING -------
      <br/>
      -- /strokeboundary
      <br/>
      -- %-----
      <br/>
      -- % This operator draws a boundary around strokes so that color on color will
      <br/>
      -- % remain visible when copied to black-and-white
      <br/>
      -- % This is done by drawing the stroke in black or white with additional
      <br/>
      -- thickness
      <br/>
      -- % We also draw an edge in a saturated extrapolation of the color
      <br/>
      -- % The regular stroke with then be rendered on top and only the edge will
      <br/>
      -- remain
      <br/>
      -- %-----
      <br/>
      -- +
      <br/>
      -- gsave   % save the graphic state to preserve path, color and width
      <br/>
      -- % first decide if border should be black or white
      <br/>
      -- % if the luminance is lighter than 0.7 we use black, for dark colors we use
      <br/>
      -- white
      <br/>
      -- currentrgbdecodecolor   % get the current color
      <br/>
      -- 0.1 mul exch 0.6 mul add exch 0.3 mul add    % calculate its luminance
      <br/>
      -- 0.7 gt +0} +1} ifelse   % test for brightness and pick black or white
      <br/>
      -- setgray     % and make it the current color
      <br/>
      -- % now we want to add a little bit to the stroke width
      <br/>
      -- % but to do this we must include current transformation
      <br/>
      -- matrix currentmatrix
      <br/>
      -- matrix defaultmatrix
      <br/>
      -- matrix invertmatrix   % so we remove the default transformation
      <br/>
      -- matrix concatmatrix   % from the current transformation
      <br/>
      -- dup 0 get exch dup 3 get exch dup 1 get exch 4 get  % use the determinant
      <br/>
      -- mul 3 1 roll mul sub abs sqrt 1.5 exch div   % to scale the addition
      <br/>
      -- currentlinewidth add setlinewidth % and add it to the stroke width
      <br/>
      -- true setstrokeadjust
      <br/>
      -- stroke   % we can now draw the black or white background stroke
      <br/>
      -- grestore   % and restore the graphics state including path and color
      <br/>
      -- gsave   % save color and path again
      <br/>
      -- currentrgbdecodecolor % get the current color to calculate a saturated
      <br/>
      -- version
      <br/>
      -- % this next calculation finds the minimum of the r, g, b components
      <br/>
      -- 3 copy
      <br/>
      -- 2 copy lt + pop } + exch pop } ifelse
      <br/>
      -- 2 copy lt + pop } + exch pop } ifelse
      <br/>
      -- 1 exch sub   % this is 1-min(r, g, b)
      <br/>
      -- dup 0 gt  % if 1-min is 0 the color is white and we don't what to do the
      <br/>
      --   % calculation because it would divide by zero
      <br/>
      -- % The calculation basically subtract out the minimum and then rescales
      <br/>
      -- % so that the maximum component is 1
      <br/>
      -- % if minimum is m this is (r-m)/(1-m), (g-m)/(1-m), (b-m)/(1-m)
      <br/>
      -- + dup 3 2 roll 1 exch sub exch div 1 exch sub 4 1 roll
      <br/>
      -- dup 3 2 roll 1 exch sub exch div 1 exch sub 4 1 roll
      <br/>
      -- exch 1 exch sub exch div 1 exch sub 3 1 roll
      <br/>
      -- setrgbcodecolor  % use this saturated color for stroke edge
      <br/>
      -- }
      <br/>
      -- +pop pop pop pop } % in the case of white just clear the calculation
      <br/>
      -- ifelse
      <br/>
      -- true setstrokeadjust
      <br/>
      -- stroke   % now actually render the colored edge
      <br/>
      -- grestore   % and restore the color and path
      <br/>
      -- } bind def
      <br/>
      -- /patstroke
      <br/>
      -- %-----
      <br/>
      -- % this operator fills the interior of a stroke
      <br/>
      -- % it uses either a 2-dimensional pattern or a dash pattern
      <br/>
      -- % depending on the stroke thickness
      <br/>
      -- %
      <br/>
      -- +
      <br/>
      -- &lt;&lt;    % dictionary of some variables used in the computation
      <br/>
      -- /dscl 3   % scalr factor for calculating dash lengths from color values
      <br/>
      -- /rlcorpat 0  % dash length parameter for red, (green, blue, cyan, etc)
      <br/>
      -- /glcorpat 0
      <br/>
      -- /blcorpat 0
      <br/>
      -- /clcorpat 0
      <br/>
      -- /mlcorpat 0
      <br/>
      -- /ylcorpat 0
      <br/>
      -- /slcorpat 2  % amount of space between dashes
      <br/>
      -- /thnwcorpat 1 % holds a reduced stroke width
      <br/>
      -- /wscale 1   % amount to scale lengths to work in current transformation
      <br/>
      -- &gt;&gt;
      <br/>
      -- begin
      <br/>
      -- matrix currentmatrix
      <br/>
      -- matrix defaultmatrix
      <br/>
      -- matrix invertmatrix % remove the default transformation from the current
      <br/>
      -- matrix concatmatrix % to get the users coordinate transform
      <br/>
      -- dup 0 get exch dup 3 get exch dup 1 get exch 4 get % calculate determinant
      <br/>
      -- mul 3 1 roll mul sub abs sqrt 1 exch div /wscale exch def % and use as
      <br/>
      --  scale
      <br/>
      -- /dscl dscl wscale mul def
      <br/>
      -- /slcorpat slcorpat wscale mul def
      <br/>
      -- currentrgbdecodecolor 3 copy  % get the current color and make a copy
      <br/>
      -- dscl mul /blcorpat exch def % scale color values to get r, g, b dash
      <br/>
      --  lengths
      <br/>
      -- dscl mul /glcorpat exch def
      <br/>
      -- dscl mul /rlcorpat exch def
      <br/>
      -- 1 exch sub dscl mul /ylcorpat exch def % use 1-color for initial space
      <br/>
      --  lengths
      <br/>
      -- 1 exch sub dscl mul /mlcorpat exch def
      <br/>
      -- 1 exch sub dscl mul /clcorpat exch def
      <br/>
      -- % next find the stroke width in known (default) coordinates
      <br/>
      -- % now decide if the stroke can be filled with a pattern
      <br/>
      -- % or if it is too thin and needs dashes
      <br/>
      -- currentlinewidth
      <br/>
      -- 7 wscale mul gt % compare current width with 7 scaled to current
      <br/>
      -- coordinates
      <br/>
      -- +  % large enough to fill with a pattern
      <br/>
      -- gsave  % save the current color and width
      <br/>
      -- currentrgbdecodecolor setnewpattern   % set the color to a pattern
      <br/>
      -- currentlinewidth 0.8 mul setlinewidth  % narrow the width to give solid
      <br/>
      --  edges
      <br/>
      -- true setstrokeadjust
      <br/>
      -- stroke  % image the patterned portion of the stroke
      <br/>
      -- grestore  % restore color, path, width
      <br/>
      -- } % end of fill-with-pattern case
      <br/>
      -- + % case of filling with dashes (narrow strokes)
      <br/>
      -- % first do a colored background for the dashes
      <br/>
      -- gsave   % save color width and path
      <br/>
      -- currentlinewidth 0.8 mul % narrow the width to give solid colored edges
      <br/>
      -- setlinewidth
      <br/>
      -- true setstrokeadjust
      <br/>
      -- stroke   % image the stroke-this gives background for dashes
      <br/>
      -- grestore  % restore the path and width
      <br/>
      -- % here we draw the black dashes
      <br/>
      -- gsave   % save state again so can restore what is changed
      <br/>
      -- % set up black dash pattern-leave spaces for white dashes as well as gaps
      <br/>
      -- �rlcorpat clcorpat slcorpat add   % 2 dashes for red
      <br/>
      -- rlcorpat clcorpat slcorpat add
      <br/>
      -- glcorpat mlcorpat slcorpat add slcorpat add % 2 &amp; extra space for green
      <br/>
      -- glcorpat mlcorpat slcorpat add
      <br/>
      -- blcorpat ylcorpat slcorpat add �   % only one dash for blue
      <br/>
      -- 0 setdash
      <br/>
      -- % the width used for dashes is max(W/4, min(0.8*W, 1)) where W is stroke
      <br/>
      -- width
      <br/>
      -- currentlinewidth 4 div
      <br/>
      -- /thnwcorpat currentlinewidth 0.8 mul def
      <br/>
      -- thnwcorpat wscale it +thnwcorpat} +wscale} ifelse
      <br/>
      -- 2 copy it +exch pop} +pop} ifelse
      <br/>
      -- setlinewidth
      <br/>
      -- true setstrokeadjust
      <br/>
      -- 0 setgray % change color to black
      <br/>
      -- stroke   % and draw the dashes
      <br/>
      -- grestore  % restore path and color (lose dash info)
      <br/>
      -- %  now we will draw the white dashes
      <br/>
      -- gsave   % save state again so can restore what is changed
      <br/>
      -- % set up white pattern
      <br/>
      -- % similar to black only length for dash and space are switched
      <br/>
      -- % and there is an offset to place the white between the black
      <br/>
      -- �ylcorpat rlcorpat slcorpat add
      <br/>
      -- clcorpat rlcorpat slcorpat add
      <br/>
      -- clcorpat glcorpat slcorpat add
      <br/>
      -- mlcorpat glcorpat slcorpat add slcorpat add
      <br/>
      -- mlcorpat blcorpat slcorpat add
      <br/>
      -- �ylcorpat slcorpat 2 div add setdash
      <br/>
      -- % the width used for dashes is max(W14, min(0.8*W, 1)) where W is stroke
      <br/>
      -- width
      <br/>
      -- % same as for the black dashes
      <br/>
      -- currentlinewidth 4 div
      <br/>
      -- thnwcorpat wscale lt +thnwcorpat} +wscale} ifelse
      <br/>
      -- 2 copy lt +exch pop} +pop} ifelse
      <br/>
      -- setlinewidth
      <br/>
      -- true setstrokeadjust
      <br/>
      -- 1 setgray  % change the color to white
      <br/>
      -- stroke   % draw the white dashes
      <br/>
      -- grestore  % restore the widths and no dash state
      <br/>
      -- }ifelse
      <br/>
      -- newpath   % all the grestores left the path, but stroke should clear it
      <br/>
      -- end
      <br/>
      -- }bind def
      <br/>
      -- /patdash
      <br/>
      -- %-----
      <br/>
      -- % This procedure is called to render a stroke that already has dashes
      <br/>
      -- % It outlines the stroke and places a thin white line down the center
      <br/>
      -- % of the dashes
      <br/>
      -- %-----
      <br/>
      -- +
      <br/>
      -- strokeboundary   % This call handles the outlining
      <br/>
      -- gsave   % Save the path so we can stroke more than once
      <br/>
      -- stroke   % First just draw the original stroke over outlining
      <br/>
      -- grestore   % restore the path
      <br/>
      -- gsave   % This save is to preserve the stroke width and color
      <br/>
      -- currentlinewidth 0.15 mul setlinewidth % Set width to faction of the
      <br/>
      --  original
      <br/>
      -- 1 setgray   % set color to white
      <br/>
      -- stroke   % overprint white center lines on the dashed stroke
      <br/>
      -- grestore   % restore color and stroke width
      <br/>
      -- newpath   % path would also be restored, but stroke should clear it
      <br/>
      -- }bind def
      <br/>
      -- /buildpattern
      <br/>
      -- %-----
      <br/>
      -- % takes rgb and constructs a pattern in unit square
      <br/>
      -- % the pattern can be used for filling strokes
      <br/>
      -- % the operator expects r, g, b values on the stack
      <br/>
      -- %-----
      <br/>
      -- +
      <br/>
      -- &lt;&lt;    % set up dictionary of local variables
      <br/>
      -- 4 1 rol   % roll the r, g, b values past dictionary marker
      <br/>
      -- /rcorpat 4 1 roll % position them as value to variables
      <br/>
      -- /gcorpat 3 1 roll
      <br/>
      -- /bcorpat exch
      <br/>
      -- /ccorpat 0    % we will calculate and save values for c, m, y, k, w
      <br/>
      -- /mcorpat 0
      <br/>
      -- /ycorpat 0
      <br/>
      -- /kcorpat 0
      <br/>
      -- /wcorpat 0
      <br/>
      -- /rwcorpat 0    % pattern width parametes fro the various colors
      <br/>
      -- /gwcorpat 0
      <br/>
      -- /bwcorpat 0
      <br/>
      -- /cwcorpat 0
      <br/>
      -- /mwcorpat 0
      <br/>
      -- /ywcorpat 0    % thickness of circle used for complete yellow pattern
      <br/>
      -- /koffset 0
      <br/>
      -- /go1 0
      <br/>
      -- /go2 0
      <br/>
      -- /yo1 0
      <br/>
      -- /yo2 0
      <br/>
      -- /c01 0
      <br/>
      -- /co2 0
      <br/>
      -- /thickenough 0.0
      <br/>
      -- /twcorpat 0.02
      <br/>
      -- /steps 16
      <br/>
      -- /halfstep 0.5 16 div
      <br/>
      -- /quarterstep 0.25 1 6 div
      <br/>
      -- /stepssq2 16 0.71 div
      <br/>
      -- /swcp 0   % used to calculate the fraction of steps to be imaged in a
      <br/>
      --  pattern
      <br/>
      -- /nwcp 0   % used for integer number of steps to be imaged
      <br/>
      -- /tln 0  % used to calculate the fraction of step and corresponding lengths
      <br/>
      -- /bw1 0 % thickness parameter for blue partial pattern
      <br/>
      -- /I1b 0  % lengths for the blue partial pattern
      <br/>
      -- /I2b 0
      <br/>
      -- /I3b 0
      <br/>
      -- /I4b 0
      <br/>
      -- /tln 0
      <br/>
      -- /mw1 0   % thickness parameter for magenta partial pattern
      <br/>
      -- /I1m 0  % lengths for magenta partial pattern segments
      <br/>
      -- /I2m 0
      <br/>
      -- /I3m 0
      <br/>
      -- /I4m 0
      <br/>
      -- /gw1 0   % thickness parameter for green partial pattern
      <br/>
      -- /I1g 0  % lengths for the green partial pattern
      <br/>
      -- /I2g 0
      <br/>
      -- /I3g 0
      <br/>
      -- /I4g 0
      <br/>
      -- /rw1 0  % thickness parameter for red partial pattern
      <br/>
      -- /I1r 0 % arclengths for the red partial pattern
      <br/>
      -- /I2r 0
      <br/>
      -- /I3r 0
      <br/>
      -- /I4r 0
      <br/>
      -- /cw1 0  % thickness parameter for cyan partial pattern
      <br/>
      -- /I1c 0 % arclengths for the cyan partial pattern components
      <br/>
      -- /I2c 0
      <br/>
      -- /I3c 0
      <br/>
      -- /I4c 0
      <br/>
      -- /yw1 0  % thickness of partial yellow pattern
      <br/>
      -- /I1y 0 % length of partial arc for partial yellow pattern
      <br/>
      -- /kw1 0  % size parameter for black partial pattern
      <br/>
      -- /I1k 0 % side length adjustments for the black partial pattern
      <br/>
      -- /I2k 0
      <br/>
      -- /I3k 0
      <br/>
      -- /I4k 0
      <br/>
      -- /I5k 0
      <br/>
      -- /I6k 0
      <br/>
      -- /I7k 0
      <br/>
      -- /I8k 0
      <br/>
      -- &gt;&gt;
      <br/>
      -- begin
      <br/>
      -- gsave
      <br/>
      -- twcorpat setlinewidth
      <br/>
      -- 0 setlinecap
      <br/>
      -- 2 setlinejoin
      <br/>
      -- % set wcorpat to min (the amount of white in the color),
      <br/>
      -- % set kcorpat to 1-max (the amount of black in the color)
      <br/>
      -- rcorpat gcorpat gt +/koorpat rcorpat def /wcorpat gcorpat def } +/kcorpat
      <br/>
      -- gcorpat def /wcorpat rcorpat def } ifelse
      <br/>
      -- bcorpat kcorpat gt + /kcorpat bcorpat def } if
      <br/>
      -- bcorpat wcorpat It + /wcorpat bcorpat def } if
      <br/>
      -- /kcorpat 1 kcorpat sub def
      <br/>
      -- % remove white from rgb
      <br/>
      -- /rcorpat rcorpat wcorpat sub def
      <br/>
      -- /gcorpat gcorpat wcorpat sub def
      <br/>
      -- /bcorpat bcorpat wcorpat sub def
      <br/>
      -- % calculate secondary color
      <br/>
      -- gcorpat bcorpat gt +/ccorpat bcorpat def} +/ccorpat gcorpat def} ifelse
      <br/>
      -- rcorpat bcorpat gt +/mcorpat bcorpat def} +/mcorpat rcorpat def} ifelse
      <br/>
      -- rcorpat gcorpat gt +/ycorpat gcorpat def} +/ycorpat rcorpat def} ifelse
      <br/>
      -- % remove secondary color from primary
      <br/>
      -- /rcorpat rcorpat mcorpat ycorpat add sub def
      <br/>
      -- /gcorpat gcorpat ycorpat ccorpat add sub def
      <br/>
      -- /bcorpat bcorpat ccorpat mcorpat add sub def
      <br/>
      -- % in the Adobe PostScript implementation patterns don't grow smoothly
      <br/>
      -- % for example if the pattern is a horizontal line if the width of the line
      <br/>
      -- % is continuously increased, the width of the rendered pattern will
      <br/>
      --  increase
      <br/>
      -- % in discrete steps.
      <br/>
      -- % this can cause jumps in intensity of the pattern causing contours in
      <br/>
      --  sweeps
      <br/>
      -- % To work around this we can make the pattern with a full horizontal line
      <br/>
      --  at
      <br/>
      -- % one width and a partial line on top of it at a thicker width.
      <br/>
      -- % instead of thickening the line we increase the length of the thicker
      <br/>
      --  piece.
      <br/>
      -- % we thicken until it fills the length of the cell then start a new thicker
      <br/>
      --  line
      <br/>
      -- % This idea is done for all the patterns, so they need two width and also
      <br/>
      -- % lengths for the thicker partial patterns.
      <br/>
      -- % Some pattern are made of several lines so we need lengths for all pieces.
      <br/>
      -- % Also a line can be thickened on just one side, and then on the other
      <br/>
      --  side.
      <br/>
      -- %-----------
      <br/>
      -- % calculate the cyan pattern parameters
      <br/>
      -- % begin by calculating a width to use for the cyan pattern
      <br/>
      -- % c, m, and y are laid down last so no compensation is needed for other
      <br/>
      -- colors
      <br/>
      -- /cwcorpat ccorpat def
      <br/>
      -- % scale the total number of steps to fill cell by
      <br/>
      -- /swcp steps cwcorpat mul def   % the fraction of the cell to be colored
      <br/>
      -- /nwcp swcp floor def   % the integer part is how many complete steps are
      <br/>
      -- drawn
      <br/>
      -- /tln swcp nwcp sub def  % fractional part is used for the next partial
      <br/>
      --  pattern
      <br/>
      -- /cwcorpat nwcp halfstep mul def  % parameter needed is half stroke width
      <br/>
      -- /cw1 nwcp 1 add halfstep mul def  % and half width of larger partial stroke
      <br/>
      -- % Next we need the lengths for the partial pattern components
      <br/>
      -- % The cyan pattern is a squiggle made from two arcs of 120 degrees
      <br/>
      -- % We can increase the width on both sides of both arcs
      <br/>
      -- % so there is 480 degrees to play with
      <br/>
      -- /tln tln 480 mul def  % set the total length amount (in degrees for cyan)
      <br/>
      -- % now break this up into the length of the four strokes
      <br/>
      -- % no arc length can be more than 120 degrees
      <br/>
      -- /I1c tln 120 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I1c sub def
      <br/>
      -- /I2c tln 120 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I2c sub def
      <br/>
      -- /I3c tln 120 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /I4c tln I3c sub def
      <br/>
      -- %-------
      <br/>
      -- % calculate the yellow pattern parameters
      <br/>
      -- % begin by calculating a width to use for the yellow pattern
      <br/>
      -- % yellow is a circle and as its thickness increases it exceeds the square
      <br/>
      --  cell
      <br/>
      -- % we use a quadratic function to increase thickness faster as cell fills
      <br/>
      -- % yw = 0.3y + 0.45y*y
      <br/>
      -- /ywcorpat 0.3 ycorpat mul 0.45 ycorpat dup mul mul add def
      <br/>
      -- % scale the total number of steps to fill cell by
      <br/>
      -- /swcp steps ywcorpat mul def  % the fraction of the cell to be colored
      <br/>
      -- /nwcp swcp floor def   % the integer part is how many complete steps are
      <br/>
      -- drawn
      <br/>
      -- /tln swcp nwcp sub def  % fractional part is used for the next partial
      <br/>
      --  pattern
      <br/>
      -- /ywcorpat nwcp steps div def  % stroke width of complete yellow circle
      <br/>
      -- /yw1 nwcp 1 add steps div def  % stroke width of larger partial arc
      <br/>
      -- % length of the partial arc is its fraction of a full circle (360 degrees)
      <br/>
      -- /I1y tln 360 mul def
      <br/>
      -- %------------
      <br/>
      -- % calculate parameters for the magenta pattern
      <br/>
      -- % magenta uses two 45 degree lines
      <br/>
      -- % the step width is increased by sqrt(2) for 45 degress and halved for 2
      <br/>
      --  lines
      <br/>
      -- /mwcorpat 0.71 mcorpat mul def
      <br/>
      -- %new magenta growth
      <br/>
      -- % scale the total number of steps to fill cell by square root 2 for
      <br/>
      --  diagonal and
      <br/>
      -- /swcp stepssq2 mwcorpat mul def  % the fraction of the cell to be colored
      <br/>
      -- /nwcp swcp floor def   % the integer part is how many complete steps are
      <br/>
      -- drawn
      <br/>
      -- /tln swcp nwcp sub def % fractional part is used for the next partial
      <br/>
      --  pattern
      <br/>
      -- /mwcorpat nwcp quarterstep mul def % half width for each line is 1/4 total
      <br/>
      -- step
      <br/>
      -- /mw1 nwcp 1 add quarterstep mul def % half width for thicker partial
      <br/>
      --  pattern
      <br/>
      -- % tln was scaled to the proper length coordinates above
      <br/>
      -- % now we must separate it into for segments (each side of each line)
      <br/>
      -- % we will grow each line from center out in two directions so we want
      <br/>
      -- % a half length value.
      <br/>
      -- % since the lengths (I1m etc) are x and y offsets there is no sqrt(2)
      <br/>
      --  factor
      <br/>
      -- % on the longer (inside) side of the stroke we add the width to the length
      <br/>
      -- % to cover diagonal cut of line by cell boundary
      <br/>
      -- /I1m tln 0.25 mwcorpat add 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I1m sub def
      <br/>
      -- % for the shorter (outside) side of the stroke we can subtract the width
      <br/>
      -- /I2m tln 0.25 mwcorpat sub 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I2m sub def
      <br/>
      -- /I3m tln 0.25 mwcorpat add 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /I4m tln I3m sub def
      <br/>
      -- % calculate parameters for red
      <br/>
      -- % the red pattern is a squiggle made from two arcs
      <br/>
      -- % red is draw before magenta or yellow so these can partially obscure it.
    </p>
    <p num="42">
      -- % to compensate we increase the red width if there is yellow or magenta
      <br/>
      -- % the heuristic used is rw = r/max(0.1, 1-2*y-m)
      <br/>
      -- /rwcorpat rcorpat 1 ywcorpat 2 mul mwcorpat add sub dup 0.1 It +pop 0.1} if
      <br/>
      -- div def
      <br/>
      -- % scale the total number of steps to fill cell by
      <br/>
      -- /swcp steps rwcorpat mul def % the fraction of the cell to be colored
      <br/>
      -- /nwcp swcp floor def  % the integer part is how many complete steps are
      <br/>
      -- drawn
      <br/>
      -- /tln swcp nwcp sub def % fractional part is used for the next partial
      <br/>
      --  pattern
      <br/>
      -- /rwcorpat nwcp halfstep mul def % parameter needed is half stroke width
      <br/>
      -- /rw1 nwcp 1 add halfstep mul def % and half width of larger partial stroke
      <br/>
      -- % Next we need the lengths for the partial pattern components
      <br/>
      -- % The red pattern is a squiggle made from two arcs of 120 degrees
      <br/>
      -- % We can increase the width on both sides of both arcs
      <br/>
      -- % so there is 480 degrees to play with
      <br/>
      -- /tln tln 480 mul def % set the total length amount (in degrees for red)
      <br/>
      -- % now break this up into the length of the four strokes
      <br/>
      -- % no arc length can be more than 120 degrees
      <br/>
      -- /Ilr tln 120 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln Ilr sub def
      <br/>
      -- /I2r tln 120 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I2r sub def
      <br/>
      -- /I3r tln 120 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /I4r tln I3r sub def
      <br/>
      -- %--------
      <br/>
      -- % calculate the parameters for a blue pattern
      <br/>
      -- % blue is draw before magenta or cyan so these can partially obscure it.
      <br/>
      -- % to compensate we increase the blue width if there is cyan or magenta
      <br/>
      -- % the heuristic used is bw = b/max(0.1, 1-0.89*(c + m))
      <br/>
      -- % blue uses two 45 degree lines
      <br/>
      -- % the step width is increased by sqrt(2) for 45 degress and halved for 2
      <br/>
      --  lines
      <br/>
      -- /bwcorpat 0.71 bcorpat mul 1 cwcorpat mwcorpat add 0.89 mul sub dup 0.1 It
      <br/>
      -- +pop 0.1} if div def
      <br/>
      -- % new blue growth
      <br/>
      -- % scale the total number of steps to fill cell by square root 2 for
      <br/>
      --  diagonal and
      <br/>
      -- /swcp stepssq2 bwcorpat mul def  % the fraction of the cell to be colored
      <br/>
      -- /nwcp swcp floor def  % the integer part is how many complete steps are
      <br/>
      -- drawn
      <br/>
      -- /tln swcp nwcp sub def % fractional part is used for the next partial
      <br/>
      --  pattern
      <br/>
      -- /bwcorpat nwcp quarterstep mul def % half width for each line is 1/4 total
      <br/>
      --  step
      <br/>
      -- /bw1 nwcp 1 add quarterstep mul def % half width for thicker partial
      <br/>
      --  pattern
      <br/>
      -- % tln was scaled to the proper length coordinates above
      <br/>
      -- % since the lengths (l1b etc) are x and y offsets there is no sqrt(2)
      <br/>
      --  factor
      <br/>
      -- % now we must separate it into for segments (each side of each line)
      <br/>
      -- % we will grow each line from center out in two directions so we want
      <br/>
      -- % a half length value.
      <br/>
      -- % on the longer (inside) side of the stroke we add the width to the length
      <br/>
      -- % to cover diagonal cut of line by cell boundary
      <br/>
      -- /I1b tln 0.25 bwcorpat add 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I1b sub def
      <br/>
      -- /I2b tln 0.25 bwcorpat sub 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I2b sub def
      <br/>
      -- /I3b tln 0.25 bwcorpat add 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /I4b tln I3b sub def
      <br/>
      -- %---------
      <br/>
      -- % calculate parameters for red
      <br/>
      -- % the pattern for green is a cross
      <br/>
      -- % green is drawn before cyan or yellow so they can obscure it
      <br/>
      -- % to compensate we increase the green width if there is yellow or cyan
      <br/>
      -- % the heuristic used is gw = g/max(0.1 1-2*(y + c))
      <br/>
      -- /gwcorpat gcorpat 1 ywcorpat cwcorpat 2 mul add 2 mul sub dup 0.1 It +pop
      <br/>
      -- 0.1} if div dup mul def
      <br/>
      -- % green growth
      <br/>
      -- % scale the total number of steps to fill cell by
      <br/>
      -- /swcp steps gwcorpat mul def   % the fraction of the cell to be colored
      <br/>
      -- /nwcp swcp floor def   % the integer part is how many complete steps ar
      <br/>
      -- drawn
      <br/>
      -- /tln swcp nwcp sub def % fractional part is used for the next partial
      <br/>
      --  pattern
      <br/>
      -- /gwcorpat nwcp halfstep mul def  % parameter needed is half stroke width
      <br/>
      -- /gw1 nwcp 1 add halfstep mul def  % and half width of larger partial stroke
      <br/>
      -- % for green we did not bother growing the two sides of a line independently
      <br/>
      -- % so we calculate two lengths I1g and I3g and use them for the other side
      <br/>
      --  too
      <br/>
      -- % the partial pattern is grown in both direction from the cell center
      <br/>
      -- % so the maximum length is half the cell size
      <br/>
      -- /I1g tln 0.5 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /I2g I1g def
      <br/>
      -- /I3g tln I2g sub def
      <br/>
      -- /I4g I3g def
      <br/>
      -- %-------
      <br/>
      -- % The pattern for black is a set of diamond shapes on 45 degree centers
      <br/>
      -- % This is done by constructing a diamond at the center and one at the
      <br/>
      --  corner
      <br/>
      -- % The corner case is made from 4 triangles
      <br/>
      -- % calculate offset for black triangles
      <br/>
      -- % in theory this should go as the square root of amount of black
      <br/>
      -- % but it seems to look better if it doesn't drop off so fast
      <br/>
      -- % we use (k + sqrt(k))/4
      <br/>
      -- % black can be obscured by the other colors, but we ignore this for now
      <br/>
      -- /koffset kcorpat kcorpat sqrt add 4 div def
      <br/>
      -- % since koffset only ranges to 0.5 we must multiply by 2 to scale the steps
      <br/>
      -- /swcp steps koffset mul 2 mul def
      <br/>
      -- /nwcp swcp floor def   % the integer part is how many complete steps are
      <br/>
      -- drawn
      <br/>
      -- /tln swcp nwcp sub def % fractional part is used for the next partial
      <br/>
      --  pattern
      <br/>
      -- /koffset nwcp halfstep mul def % half the step size is used for each side
      <br/>
      -- /kw1 nwcp 1 add halfstep mul def % find the next size for partial pattern
      <br/>
      -- % for the range of the partial length we use the offset for a side times
      <br/>
      -- % the 8 sides of the two diamonds
      <br/>
      -- /tln tln kw1 mul 8 mul def
      <br/>
      -- % we have 8 possible growth regions (the sides of the two diamonds)
      <br/>
      -- % we segment the total length into these 8 regions
      <br/>
      -- % where no region can be longer than the offset kw1
      <br/>
      -- /I1k tln kw1 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I1k sub def
      <br/>
      -- /I2k tln kw1 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I2k sub def
      <br/>
      -- /I3k tln kw1 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tin tln I3k sub def
      <br/>
      -- /I4k tln kw1 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I4k sub def
      <br/>
      -- /I5k tln kw1 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I5k sub def
      <br/>
      -- /I6k tln kw1 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tin tln I6k sub def
      <br/>
      -- /I7k tln kw1 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- /tln tln I7k sub def
      <br/>
      -- /I8k tln kw1 2 copy gt +exch pop} +pop} ifelse def
      <br/>
      -- % calculate offsets for diagonals
      <br/>
      -- /go1 0.5 gwcorpat 2 div sub def
      <br/>
      -- /go2 go1 gwcorpat add def
      <br/>
      -- /yo1 0.5 ywcorpat 2 div sub def
      <br/>
      -- /yo2 yo1 ywcorpat add def
      <br/>
      -- /co1 0.5 cwcorpat 2 div sub det
      <br/>
      -- /co2 co1 cwcorpat add def
      <br/>
      -- % At this point the parameters needed for pattern construction have been
      <br/>
      -- found
      <br/>
      -- % now start constructing the pattern
      <br/>
      -- %----
      <br/>
      -- % white background
      <br/>
      -- 1 setgray   % set color to white
      <br/>
      -- 0 0 1 1 rectfill % and fill the cell
      <br/>
      -- %-------
      <br/>
      -- % pattern for black
      <br/>
      -- % black triangles in the corners and a diamond in the center
      <br/>
      -- koffset 0 gt % only do it if there actually is some black
      <br/>
      -- +0 setgray   % set the color to black
      <br/>
      -- newpath   % start with a fresh path
      <br/>
      -- % draw the triangles in the corners
      <br/>
      -- 0 0 moveto 0 koffset lineto koffset 0 lineto fill
      <br/>
      -- 0 1 moveto 0 1 koffset sub lineto koffset 1 lineto fill
      <br/>
      -- 1 0 moveto 1 koffset sub 0 lineto 1 koffset lineto fill
      <br/>
      -- 1 1 moveto 1 1 koffset sub lineto 1 koffset sub 1 lineto fill
      <br/>
      -- % now draw the diamond in the center
      <br/>
      -- 0.5 koffset add 0.5 moveto
      <br/>
      -- 0.5 0.5 koffset add lineto
      <br/>
      -- 0.5 koffset sub 0.5 lineto
      <br/>
      -- 0.5 0.5 koffset sub lineto fill
      <br/>
      -- } if
      <br/>
      -- % next draw the partial pattern for black
      <br/>
      -- % this is a set of up to 8 triangles that extend each of the sides of
      <br/>
      -- % the two diamonds
      <br/>
      -- % for each we first check to see if the side needs extension
      <br/>
      -- % if the offset adjustment parameter is not zero then we construct the
      <br/>
      --  triangle
      <br/>
      -- newpath
      <br/>
      -- I1k 0 gt
      <br/>
      -- 0 0 moveto 0 kw1 lineto I1k kw1 I1k sub lineto fill
      <br/>
      -- } if
      <br/>
      -- 12k 0 gt
      <br/>
      -- +
      <br/>
      -- 0 1 moveto 0 1 kw1 sub lineto I2k 1 kw1 sub I2k add lineto fill
      <br/>
      -- } if
      <br/>
      -- I3k 0 gt
      <br/>
      -- +
      <br/>
      -- 1 0 moveto 1 kw1 sub 0 lineto 1 kw1 sub I3k add I3k lineto fill
      <br/>
      -- } if
      <br/>
      -- I4k 0 gt
      <br/>
      -- +
      <br/>
      -- 1 1 moveto 1 1 kw1 sub lineto 1 I4k sub 1 kw1 sub I4k add lineto fill
      <br/>
      -- } if
      <br/>
      -- 15k 0 gt
      <br/>
      -- +
      <br/>
      -- 0.5 0.5 moveto 0.5 kw1 add 0.5 lineto I5k neg I5k neg rlineto fill
      <br/>
      -- } if
      <br/>
      -- 16k 0 gt
      <br/>
      -- +
      <br/>
      -- 0.5 0.5 moveto 0.5 0.5 kw1 add lineto I6k I6k neg rlineto fill
      <br/>
      -- } if
      <br/>
      -- 17k 0 gt
      <br/>
      -- +
      <br/>
      -- 0.5 0.5 moveto 0.5 kw1 sub 0.5 lineto I7k I7k rlineto fill
      <br/>
      -- } if
      <br/>
      -- I8k 0 gt
      <br/>
      -- +
      <br/>
      -- 0.5 0.5 moveto 0.5 0.5 kw1 sub lineto I8k neg I8k rlineto fill
      <br/>
      -- } if
      <br/>
      -- % curve for red
      <br/>
      -- % red is a vertical squiggle
      <br/>
      -- gsave
      <br/>
      -- 1 0 0 setrgbcodecolor  % set the current color to red
      <br/>
      -- % first check to see if there is any red to be drawn
      <br/>
      -- rwcorpat 0 gt
      <br/>
      -- +
      <br/>
      -- % here we draw the basic red pattern
      <br/>
      -- % it is the two sides of the two arcs
      <br/>
      -- newpath
      <br/>
      -- 0.5 1.1 moveto
      <br/>
      -- 0.644 rwcorpat sub 0.75 .288 110 240 arc
      <br/>
      -- 0.356 rwcorpat sub 0.25 .288 60 290 arcn
      <br/>
      -- 0.356 rwcorpat add 0.25 .288 290 60 arc
      <br/>
      -- 0.644 rwcorpat add 0.75 .288 240 110 arcn
      <br/>
      -- fill
      <br/>
      -- % these next two fills give the connecting arcs for neighboring cells
      <br/>
      -- % this is so we get a clean join were the patterns meet across the cell
      <br/>
      --  edge
      <br/>
      -- 1.5 1.1 moveto
      <br/>
      -- 1.644 rwcorpat sub 0.75 .288 110 240 arc
      <br/>
      -- 1.5 0.5 lineto
      <br/>
      -- fill
      <br/>
      -- -0.5 0.5 moveto
      <br/>
      -- -0.644 rwcorpat add 0.25 .288 290 60 arc
      <br/>
      -- -0.5 0 lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- % red growth
      <br/>
      -- % these are the fills for the partial pattern
      <br/>
      -- % there are 4 cases since each side of each arc can grow
      <br/>
      -- % we first check to see if there is some growth necessary before drawing
      <br/>
      -- % growth is done by extending the arc length for a thicker pattern
      <br/>
      -- % we include the adjoining cell piece
      <br/>
      -- I1r 0 gt+
      <br/>
      -- 0.5 0.5 moveto
      <br/>
      -- 0.644 rw1 sub 0.75 0.288 240 240 I1r sub arcn
      <br/>
      -- 0.644 rwcorpat add 0.75 0.288 240 I1r sub 240 arc
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I1r 0 gt +
      <br/>
      -- 1.5 0.5 moveto
      <br/>
      -- 1.644 rw1 sub 0.75 0.288 240 240 I1r sub arcn
      <br/>
      -- 1.644 rwcorpat add 0.75 0.288 240 I1r sub 240 arc
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I2r 0 gt+
      <br/>
      -- 0.5 0.5 moveto
      <br/>
      -- 0.356 rw1 sub 0.25 0.288 60 60 I2r sub arcn
      <br/>
      -- 0.356 rwcorpat add 0.25 0.288 60 I2r sub 60 arc
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I3r 0 gt+
      <br/>
      -- 0.5 0.5 moveto
      <br/>
      -- 0.644 rw1 sub 0.75 0.288 240 240 I3r sub arcn
      <br/>
      -- 0.644 rw1 add 0.75 0.288 240 I3r sub 240 arc
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I4r 0 gt +
      <br/>
      -- 0.5 0.5 moveto
      <br/>
      -- 0.356 rw1 sub 0.25 0.288 60 60 I4r sub arcn
      <br/>
      -- 0.356 rw1 add 0.25 0.288 60 I4r sub 60 arc
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I4r 0 gt +
      <br/>
      -- -0.5 0.5 moveto
      <br/>
      -- -0.644 rw1 sub 0.25 0.288 60 60 I4r sub arcn
      <br/>
      -- -0.644 rw1 add 0.25 0.288 60 I4r sub 60 arc
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- grestore
      <br/>
      -- %-------
      <br/>
      -- % fills for blue
      <br/>
      -- % blue is two diagonal lines
      <br/>
      -- gsave
      <br/>
      -- 0 0 1 setrgbcodecolor    % set the color to blue
      <br/>
      -- newpath
      <br/>
      -- % the lines are constructed as polygons
      <br/>
      -- % we only do it if there is some blue to draw
      <br/>
      -- bwcorpat 0 gt +
      <br/>
      -- % polygon vertices are extended outside the cell to be sure you can't see
      <br/>
      -- ends
      <br/>
      -- -0.25 bwcorpat sub 0.25 bwcorpat add moveto
      <br/>
      -- -0.25 bwcorpat add 0.25 bwcorpat sub lineto
      <br/>
      -- 0.75 bwcorpat add 1.25 bwcorpat sub lineto
      <br/>
      -- 0.75 bwcorpat sub 1.25 bwcorpat add lineto
      <br/>
      -- fill
      <br/>
      -- % this is the second line
      <br/>
      -- 0.25 bwcorpat sub -0.25 bwcorpat add moveto
      <br/>
      -- 0.25 bwcorpat add -0.25 bwcorpat sub lineto
      <br/>
      -- 1.25 bwcorpat add 0.75 bwcorpat sub lineto
      <br/>
      -- 1.25 bwcorpat sub 0.75 bwcorpat add lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- % blue growth
      <br/>
      -- % this draws the partial pattern where required
      <br/>
      -- % there are 4 possible fills for the two sides of the two lines
      <br/>
      -- % the extension grow in both directions from the line center
      <br/>
      -- I1b 0 gt +
      <br/>
      -- 0.75 I1b sub bwcorpat add 0.25 I1b sub bwcorpat sub moveto
      <br/>
      -- 0.75 I1b add bwcorpat add 0.25 I1b add bwcorpat sub lineto
      <br/>
      -- 0.75 I1b add bw1 sub 0.25 I1b add bw1 add lineto
      <br/>
      -- 0.75 I1b sub bw1 sub 0.25 I1b sub bw1 add lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I4b 0 gt +
      <br/>
      -- 0.75 I4b sub bw1 sub 0.25 I4b sub bw1 add moveto
      <br/>
      -- 0.75 I4b add bw1 sub 0.25 I4b add bw1 add lineto
      <br/>
      -- 0.75 I4b add bw1 add 0.25 I4b add bw1 sub lineto
      <br/>
      -- 0.75 I4b sub bw1 add 0.25 I4b sub bw1 sub lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I2b 0 gt+
      <br/>
      -- 0.25 I1b sub bwcorpat add 0.75 I1b sub bwcorpat sub moveto
      <br/>
      -- 0.25 I1b add bwcorpat add 0.75 I1b add bwcorpat sub lineto
      <br/>
      -- 0.25 I1b add bw1 sub .75 I1b add bw1 add lineto
      <br/>
      -- 0.25 I1b sub bw1 sub .75 I1b sub bw1 add lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I3b 0 gt +
      <br/>
      -- 0.25 I3b sub bw1 sub 0.75 I3b sub bw1 add moveto
      <br/>
      -- 0.25 I3b add bw1 sub 0.75 I3b add bw1 add lineto
      <br/>
      -- 0.25 I3b add bw1 add 0.75 I3b add bw1 sub lineto
      <br/>
      -- 0.25 I3b sub bw1 add 0.75 I3b sub bw1 sub lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- g restore
      <br/>
      -- % fills for green
      <br/>
      -- % The pattern for green is a cross
      <br/>
      -- gsave
      <br/>
      -- 0 1 0 setrgbcodecolor   % the color is set to green
      <br/>
      -- newpath
      <br/>
      -- % the lines are actually constructed as polygons
      <br/>
      -- % this is the horizontal line
      <br/>
      -- gwcorpat 0 gt +
      <br/>
      -- 0 gwcorpat sub 0.5 gwcorpat add moveto
      <br/>
      -- 1 gwcorpat add 0.5 gwcorpat add lineto
      <br/>
      -- 1 gwcorpat add 0.5 gwcorpat sub lineto
      <br/>
      -- 0 gwcorpat sub 0.5 gwcorpat sub lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- % this is the vertical line
      <br/>
      -- gwcorpat 0 gt +
      <br/>
      -- 0.5 gwcorpat sub 0 gwcorpat sub moveto
      <br/>
      -- 0.5 gwcorpat sub 1 gwcorpat add lineto
      <br/>
      -- 0.5 gwcorpat add 1 gwcorpat add lineto
      <br/>
      -- 0.5 gwcorpat add 0 gwcorpat sub lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- % now we do the partial pattern for green where necessary
      <br/>
      -- % the partial is a thicker line segment that grows out in both directions
      <br/>
      -- % from the center
      <br/>
      -- % this is one side of the horizontal
      <br/>
      -- I1g 0 gt+
      <br/>
      -- 0.5 I1g sub 0.5 gwcorpat sub moveto
      <br/>
      -- 0.5 I1g add 0.5 gwcorpat sub lineto
      <br/>
      -- 0.5 I1g add 0.5 gw1 add lineto
      <br/>
      -- 0.5 I1g sub 0.5 gw1 add lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- % one side of the vertical
      <br/>
      -- I2g 0 gt+
      <br/>
      -- 0.5 gwcorpat sub 0.5 I2g sub moveto
      <br/>
      -- 0.5 gwcorpat sub 0.5 I2g add lineto
      <br/>
      -- 0.5 gw1 add 0.5 I2g add lineto
      <br/>
      -- 0.5 gw1 add 0.5 I2g sub lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- % second horizontal side
      <br/>
      -- I3g 0 gt+
      <br/>
      -- 0.5 I3g sub 0.5 gw1 sub moveto
      <br/>
      -- 0.5 I3g add 0.5 gw1 sub lineto
      <br/>
      -- 0.5 I3g add 0.5 gw1 add lineto
      <br/>
      -- 0.5 I3g sub 0.5 gw1 add lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- % second vertical side
      <br/>
      -- I4g 0 gt +
      <br/>
      -- 0.5 gw1 sub 0.5 I4g sub moveto
      <br/>
      -- 0.5 gw1 sub 0.5 I4g add lineto
      <br/>
      -- 0.5 gw1 add 0.5 I4g add lineto
      <br/>
      -- 0.5 gw1 add 0.5 I4g sub lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- grestore
      <br/>
      -- %-------
      <br/>
      -- % fills for magenta
      <br/>
      -- % magenta is two diagonal lines
      <br/>
      -- gsave
      <br/>
      -- 1 0 1 setrgbcodecolor % set color to magenta
      <br/>
      -- newpath
      <br/>
      -- % the lines are constructed as polygons
      <br/>
      -- % we only do it if there is some magenta to draw
      <br/>
      -- mwcorpat 0 gt +
      <br/>
      -- % polygon vertices are extended outside the cell to be sure you can't see
      <br/>
      -- ends
      <br/>
      -- 0.75 mwcorpat sub -0.25 mwcorpat sub moveto
      <br/>
      -- 0.75 mwcorpat add -0.25 mwcorpat add lineto
      <br/>
      -- -0.25 mwcorpat add 0.75 mwcorpat add lineto
      <br/>
      -- -0.25 mwcorpat sub 0.75 mwcorpat sub lineto
      <br/>
      -- fill
      <br/>
      -- 1.25 mwcorpat sub 0.25 mwcorpat sub moveto
      <br/>
      -- 1.25 mwcorpat add 0.25 mwcorpat add lineto
      <br/>
      -- 0.25 mwcorpat add 1.25 mwcorpat add lineto
      <br/>
      -- 0.25 mwcorpat sub 1.25 mwcorpat sub lineto
      <br/>
      -- fill
      <br/>
      -- }if
      <br/>
      -- % mag growth
      <br/>
      -- % this draws the partial pattern where required
      <br/>
      -- % there are 4 possible fills for the two sides of the two lines
      <br/>
      -- % the extension grow in both directions from the line center
      <br/>
      -- I1m 0 gt+
      <br/>
      -- 0.75 I1m sub mwcorpat add 0.75 I1m add mwcorpat add moveto
      <br/>
      -- 0.75 I1m add mwcorpat add 0.75 I1m sub mwcorpat add lineto
      <br/>
      -- 0.75 I1m add mw1 sub 0.75 I1m sub mw1 sub lineto
      <br/>
      -- 0.75 I1m sub mw1 sub 0.75 I1m add mw1 sub lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I4m 0 gt +
      <br/>
      -- 0.75 I4m sub mw1 sub 0.75 I4m add mw1 sub moveto
      <br/>
      -- 0.75 I4m add mw1 sub 0.75 I4m sub mw1 sub lineto
      <br/>
      -- 0.75 I4m add mw1 add 0.75 I4m sub mw1 add lineto
      <br/>
      -- 0.75 I4m sub mw1 add 0.75 I4m add mw1 add lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I2m 0 gt +
      <br/>
      -- 0.25 I2m sub mwcorpat add 0.25 I2m add mwcorpat add moveto
      <br/>
      -- 0.25 I2m add mwcorpat add 0.25 I2m sub mwcorpat add lineto
      <br/>
      -- 0.25 I2m add mw1 sub .25 I2m sub mw1 sub lineto
      <br/>
      -- 0.25 I2m sub mw1 sub .25 I2m add mw1 sub lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I3m 0 gt+
      <br/>
      -- 0.25 I3m sub mw1 sub 0.25 I3m add mw1 sub moveto
      <br/>
      -- 0.25 I3m add mw1 sub 0.25 I3m sub mw1 sub lineto
      <br/>
      -- 0.25 I3m add mw1 add 0.25 I3m sub mw1 add lineto
      <br/>
      -- 0.25 I3m sub mw1 add 0.25 I3m add mw1 add lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- grestore
      <br/>
      -- %-----
      <br/>
      -- % draw the yellow pattern
      <br/>
      -- % yellow is a circle
      <br/>
      -- gsave
      <br/>
      -- 1 1 0 setrgbcodecolor % set the color to yellow
      <br/>
      -- % check to see if there is yellow to draw
      <br/>
      -- ywcorpat 0 gt
      <br/>
      -- +
      <br/>
      -- ywcorpat setlinewidth  % yellow is drawn as a stroke
      <br/>
      -- 0.5 0.5 .25 0 360 arc stroke
      <br/>
      -- } if
      <br/>
      -- % growth in yellow is done as a partial circle
      <br/>
      -- I1y 0 gt
      <br/>
      -- +
      <br/>
      -- yw1 setlinewidth    % use the thicker line width
      <br/>
      -- 0.5 0.5 0.25 0 I1y arc stroke % and draw the arc
      <br/>
      -- } if
      <br/>
      -- grestore
      <br/>
      -- %-----
      <br/>
      -- % curve for cyan
      <br/>
      -- % cyan is a horizontal squiggle
      <br/>
      -- gsave
      <br/>
      -- 0 1 1 setrgbcodecolor % set the color to cyan
      <br/>
      -- % first check to see if there is any cyan to be drawn
      <br/>
      -- cwcorpat 0 gt
      <br/>
      -- +
      <br/>
      -- newpath
      <br/>
      -- % here we draw the basic cyan pattern
      <br/>
      -- % it is the two sides of the two arcs
      <br/>
      -- 1.1 0.5 moveto
      <br/>
      -- 0.75 0.644 cwcorpat sub .288 330 210 arcn
      <br/>
      -- 0.25 0.356 cwcorpat sub .288 30 150 arc
      <br/>
      -- 0.25 0.356 cwcorpat add .288 150 30 arcn
      <br/>
      -- 0.75 0.644 cwcorpat add .288 210 330 arc fill
      <br/>
      -- % these next two fills give the connecting arcs for neighboring cells
      <br/>
      -- % this is so we get a clean join were the patterns meet across the cell
      <br/>
      --  edge
      <br/>
      -- .75 1.5 moveto
      <br/>
      -- 0.75 1.644 cwcorpat sub .288 330 200 arcn
      <br/>
      -- 0.5 1.5 lineto
      <br/>
      -- fill
      <br/>
      -- 0.5 -0.5 moveto
      <br/>
      -- 0.25 -0.644 cwcorpat add .288 20 150 arc
      <br/>
      -- -0.5 0 lineto
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- % cyan growth
      <br/>
      -- % these are the fills for the partial pattern
      <br/>
      -- % there are 4 cases since each side of each arc can grow
      <br/>
      -- % we first check to see if there is some growth necessary before drawing
      <br/>
      -- % growth is done by extending the arc length for a thicker pattern
      <br/>
      -- % we include the adjoining cell piece
      <br/>
      -- I1c 0 gt +
      <br/>
      -- 0.5 0.5 moveto
      <br/>
      -- 0.75 0.644 cw1 sub 0.288 210 210 I1c add arc
      <br/>
      -- 0.75 0.644 cwcorpat add 0.288 210 I1c add 210 arcn
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I1c 0 gt+
      <br/>
      -- 0.5 1.5 moveto
      <br/>
      -- 0.75 1.644 cw1 sub 0.288 210 210 I1c add arc
      <br/>
      -- 0.75 1.644 cwcorpat add 0.288 210 I1c add 210 arcn
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I2c 0 gt+
      <br/>
      -- 0.5 0.5 moveto
      <br/>
      -- 0.25 0.356 cw1 sub 0.288 30 30 I2c add arc
      <br/>
      -- 0.25 0.356 cwcorpat add 0.288 30 I2c add 30 arcn
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I3c 0 gt +
      <br/>
      -- 0.5 0.5 moveto
      <br/>
      -- 0.75 0.644 cw1 sub 0.288 210 210 I3c add arc
      <br/>
      -- 0.75 0.644 cw1 add 0.288 210 I3c add 210 arcn
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I4c 0 gt +
      <br/>
      -- 0.5 0.5 moveto
      <br/>
      -- 0.25 0.356 cw1 sub 0.288 30 30 I4c add arc
      <br/>
      -- 0.25 0.356 cw1 add 0.288 30 I4c add 30 arcn
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- I4c 0 gt +
      <br/>
      -- 0.5 -0.5 moveto
      <br/>
      -- 0.25 -0.644 cw1 sub 0.288 30 30 I4c add arc
      <br/>
      -- 0.25 -0.644 cw1 add 0.288 30 I4c add 30 arcn
      <br/>
      -- fill
      <br/>
      -- } if
      <br/>
      -- grestore
      <br/>
      -- %--------------
      <br/>
      -- % As the colors become more saturated, the patterns grow to they fill the
      <br/>
      --  cell
      <br/>
      -- % It this happens we no longer have a distinguishable pattern
      <br/>
      -- % To prevent this and to give a clean pattern shape we overlay a white
      <br/>
      --  curve
      <br/>
      -- % along the boundary where the pattern components meet
      <br/>
      -- % This is done for r, g, b, c, m
      <br/>
      -- % if there is red we draw a white vertical squiggle along the cell boundary
      <br/>
      -- 1 setgray
      <br/>
      -- 0.1 setlinewidth
      <br/>
      -- newpath
      <br/>
      -- rwcorpat 0 gt
      <br/>
      -- +
      <br/>
      -- 1.144 0.75 .288 110 250 arc stroke
      <br/>
      -- -0.144 0.25 .288 290 70 arc stroke
      <br/>
      -- }
      <br/>
      -- +
      <br/>
      -- 1.144 0.75 .288 240 240 I1r I2r add I3r add I4r add 4 div sub arcn stroke
      <br/>
      -- -0.144 0.25 .288 240 I1r I2r add I3r add I4r add 4 div sub 240 arcn stroke
      <br/>
      -- }
      <br/>
      -- ifelse
      <br/>
      -- % if there is enough blue we place a diagonal white line down the cell
      <br/>
      --  center
      <br/>
      -- % bwcorpat thickenough gt
      <br/>
      -- % +
      <br/>
      -- gsave
      <br/>
      -- 1 setgray
      <br/>
      -- newpath
      <br/>
      -- 0.1 setlinewidth
      <br/>
      -- bwcorpat 0 gt
      <br/>
      -- +
      <br/>
      -- 0 0 moveto 1 1 lineto stroke
      <br/>
      -- -0.2 0.8 moveto 0.2 1.2 lineto stroke
      <br/>
      -- 0.8 -0.2 moveto 1.2 0.2 lineto stroke
      <br/>
      -- }
      <br/>
      -- +
      <br/>
      -- 0 0 moveto I1b I1b add I3b add I4b add dup lineto stroke
      <br/>
      -- } ifelse
      <br/>
      -- grestore
      <br/>
      -- % } if
      <br/>
      -- % for green we draw a white cross along the cell boundary
      <br/>
      -- gsave
      <br/>
      -- 1 setgray
      <br/>
      -- newpath
      <br/>
      -- 0.05 setlinewidth
      <br/>
      -- gwcorpat 0 gt
      <br/>
      -- + 0 0 moveto 1.0 0 lineto 1.0 0.05 lineto 0.0 0.05 lineto fill
      <br/>
      -- 0 0 moveto 0 1 lineto 0.05 1 lineto 0.05 0 lineto fill
      <br/>
      -- }
      <br/>
      -- +
      <br/>
      -- 0 0 moveto I1g I3g add dup 0 lineto dup 0.05 lineto 0 0.05 lineto fill
      <br/>
      -- 0 0 moveto dup 0 exch lineto 0.05 exch lineto 0.05 0 lineto fill
      <br/>
      -- } ifelse
      <br/>
      -- grestore
      <br/>
      -- % if there is enough magenta we place a diagonal white line down the cell
      <br/>
      -- center
      <br/>
      -- % mwcorpat thickenough gt
      <br/>
      -- % +
      <br/>
      -- 1 setgray
      <br/>
      -- newpath
      <br/>
      -- 0.1 setlinewidth
      <br/>
      -- mwcorpat 0 gt
      <br/>
      -- +
      <br/>
      -- 0 1 moveto 1 0 lineto stroke
      <br/>
      -- -0.2 0.2 moveto 0.2 -0.2 lineto stroke
      <br/>
      -- 0.8 1.2 moveto 1.2 0.8 lineto stroke
      <br/>
      -- }
      <br/>
      -- +
      <br/>
      -- 0 1 moveto I1m I2m add I3m add I4m add dup 1 exch sub lineto stroke
      <br/>
      -- } ifelse
      <br/>
      -- % 0.75 mw1 0.035 add dup 0.25 gt + pop 0.25 } if add
      <br/>
      -- % -0.25 mw1 0.035 add dup 0.25 gt + pop 0.25 } if add moveto
      <br/>
      -- % 0.75 mw1 dup 0.215 gt +pop 0.215} if add
      <br/>
      -- % -0.25 mw1 dup 0.215 gt + pop 0.215 } it add lineto
      <br/>
      -- % -0.25 mw1 dup 0.215 gt + pop 0.215 } if add
      <br/>
      -- % 0.75 mw1 dup 0.215 gt + pop 0.215 } if add lineto
      <br/>
      -- % -0.25 mw1 0.035 add dup 0.25 gt + pop 0.25 } if add
      <br/>
      -- % 0.75 mw1 0.035 add dup 0.25 gt + pop 0.25 } if add lineto
      <br/>
      -- % fill
      <br/>
      -- % } if
      <br/>
      -- % draw horizontal white squiggle along cell boundary for near solid cyan
      <br/>
      -- 1 setgray
      <br/>
      -- 0.1 setlinewidth
      <br/>
      -- newpath
      <br/>
      -- cwcorpat 0 gt
      <br/>
      -- +
      <br/>
      -- 0.75 1.144 .288 330 200 arcn stroke
      <br/>
      -- 0.25 -0.144 .288 20 160 arc stroke
      <br/>
      -- }
      <br/>
      -- +
      <br/>
      -- 0.75 1.144 .288 200 200 I1c I2c add I3c add I4c add 4 div add arc stroke
      <br/>
      -- 0.25 -0.144 .288 20 20 I1c I2c add I3c add I4c add 4 div add arc stroke
      <br/>
      -- } ifelse
      <br/>
      -- % We handle yellow somewhat differently
      <br/>
      -- % we dont use a white line because yellow will probably copy as white
      <br/>
      -- % and it wouldn't be seen.
      <br/>
      -- % we could use black, but not a join line of pattern because it doesn't
      <br/>
      --  join
      <br/>
      -- % we could put black down the center of the circle, but this is too dark
      <br/>
      -- % we could put dashes to lighten it up
      <br/>
      -- % and we can use red and green dashes instead of black to further lighten
      <br/>
      --  it
      <br/>
      -- % this is what we do.
      <br/>
      -- % we want these dashes to always be visible because they are all that will
      <br/>
      -- copy
      <br/>
      -- % In order to distinguish strong yellow from weak we change the dash length
      <br/>
      -- ywcorpat 0.05 gt   % if there is some yellow (so we don't hide it)
      <br/>
      -- +
      <br/>
      -- 1 0 0 setrgbcodecolor % set the color to red
      <br/>
      -- �0.2 ycorpat mul dup 0.8 exch sub� 0 setdash % dash length by yellow
      <br/>
      -- strength
      <br/>
      -- newpath
      <br/>
      -- 0.5 0.5 .25 0 360 arc stroke   % draw a red dashed circle
      <br/>
      -- 0 1 0 setrgbcodecolor    % set the color to green
      <br/>
      -- �0.2 ycorpat mul dup 0.8 exch sub� 0.4 setdash % green dashes between
      <br/>
      -- reds
      <br/>
      -- newpath
      <br/>
      -- 0.5 0.5 .25 0 360 arc stroke  % draw green dashed circle
      <br/>
      -- } if
      <br/>
      -- g restore
      <br/>
      -- end
      <br/>
      -- } bind def
      <br/>
      -- /setnewpattern
      <br/>
      -- % This operator constructs and installs a pattern for a color
      <br/>
      -- % It expects the RGB color coordinates on the stack
      <br/>
      -- +
      <br/>
      -- gsave   % save the current transformation
      <br/>
      -- matrix defaultmatrix setmatrix   % install the default transformation
      <br/>
      --        % so we will know the pattern size
      <br/>
      -- patterncellsize patterncellsize scale  % scale to the desired size
      <br/>
      -- % A PostScript pattern is actually defined by a dictionary
      <br/>
      -- % that includes among other things the procedure for drawing the pattern
      <br/>
      -- shape
      <br/>
      -- % Here is our pattern dictionary
      <br/>
      -- &lt;&lt;
      <br/>
      -- 4 1 roll   % we roll the color coordinates into the dictionary
      <br/>
      -- /patr 4 1 roll % and assign them to variables
      <br/>
      -- /patg 3 1 roll
      <br/>
      -- /patb exch
      <br/>
      -- /PaintType 1   % It is a colored pattern
      <br/>
      -- /PatternType 1/TilingType 1   % lt uses constant spacing
      <br/>
      -- /BBox �0 0 1 1�    % its a unit cell in the pattern coordinates
      <br/>
      -- /XStep 1 /YStep 1
      <br/>
      -- /PaintProc +   % and to draw the pattern we call buildpattern with r, g, b
      <br/>
      -- begin
      <br/>
      -- patr patg patb buildpattern
      <br/>
      -- end
      <br/>
      -- }
      <br/>
      -- &gt;&gt;
      <br/>
      -- matrix    % Identity matrix, no further transformation
      <br/>
      -- makepattern  % Here we construct the pattern
      <br/>
      -- grestore
      <br/>
      -- setpattern    % Now we install the pattern as the current color
      <br/>
      -- } bind def
      <br/>
      -- %----------------------
      <br/>
      -- /stroke
      <br/>
      -- %-----
      <br/>
      -- % redefinition of stroke to outline and fill with patterns or dashes
      <br/>
      -- % patterns and dashes depend upon the current color
      <br/>
      -- %-----
      <br/>
      -- +
      <br/>
      -- currentrgbdecodecolor   % get the current color and test
      <br/>
      -- add add dup 0 eq exch 3 eq or  % if it is black or white
      <br/>
      -- +stroke}    % then process as an ordinary stroke
      <br/>
      -- + currentdash pop length 0 ne  % otherwise check to see if its already
      <br/>
      -- dashed
      <br/>
      -- +patdash}    % don't dash a dashed stroke, so just outline
      <br/>
      -- +strokeboundary    % for a normal stroke outline it
      <br/>
      -- patstroke}    % and fill with pattern or dashes
      <br/>
      -- ifelse
      <br/>
      -- }
      <br/>
      -- ifelse
      <br/>
      -- } bind def
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>I claim:</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A method for reproducing a color document containing color lines or strokes in a format enabling improved black and white copying retaining color intent of the color document including: receiving electronic documents having line or stroke representations therein designated to be printed in a color other than black; generating a new line or stroke representation in format retaining color if printed on a color printer, including a differentiating centerline overlaid on said stroke, whereby color differentiation of the stroke is retained if said document is printed or copied exclusively in black and white; reproducing said lines or strokes, which when copied on a black and white copier, retains color intent in terms of differentiation of areas of color.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A method for reproducing a color document containing color lines or strokes in a format enabling improved black and white copying retaining color intent of the color document including: receiving electronic documents having line or stroke representations therein designated to be printed in a color other than black; generating at least one dashed line having a dash structure sized and spaced as a function of said color other than black; generating a line or stroke representation in said color other than black, having said dashed lines overlaid thereon, said new line or stroke representation in format retaining color if printed on a color printer, and retaining color differentiation if printed on a black and white printer; reproducing said line or stroke, which when copied or printed exclusively in black and white, retains color intent in terms of differentiation of areas of color.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. A method for reproducing a color document containing color lines or strokes in a format enabling improved black and white copying retaining color intent of the color document including: receiving electronic documents having line or stroke representations therein designated to be printed in a color other than black; calculating luminance of each line or stroke; using calculated luminance to set an outline color for each item of lines or strokes to black or white; generating outlines for each item of lines or strokes, using said set outline color; determining a thickness for each line or stroke; as a function of the thickness of said lines of strokes, selecting one of:</claim-text>
      <claim-text>- generating a dashed line, having dashes sized and spaced as a function of the color;</claim-text>
      <claim-text>and - generating a colored pattern selected to represent said color, whenever determined size exceeds a predetermined threshold size; reproducing said lines or strokes, with said color pattern, said outlines and said dashed line, whereby when copied or printed in black and white, retains color intent in terms of differentiation of areas of color.</claim-text>
      <claim-text>1. A document reproduction system, for reproducing a document containing colored lines or strokes in a format enabling improved black and white copying, retaining color intent of the document, including:</claim-text>
      <claim-text>a document input, receiving electronic documents having colored lines or strokes represented therein designated to be printed in a color other than black; an image processing unit, processing said documents for printing and generating lines or stroke representations in a format retaining color if printed on a color printer, including a differentiating centerline overlaid on said stroke, whereby said representation retains color differentiation if printed on a black and white printer; a printer, reproducing said new line or stroke representation in said document, so that when copied, the document retains color intent in terms of differentiation of areas of color.</claim-text>
      <claim-text>2. The system as defined in claim 1, where said differentiating centerline is a new stroke filled with a pattern.</claim-text>
      <claim-text>3. The system as defined in claim 1, where said differentiating centerline is a dashed new stroke.</claim-text>
      <claim-text>4. The system as defined in claim 1, where said printer is a color printer, printing each color with a colorant in a limited set of thereof.</claim-text>
      <claim-text>6. The document reproduction system as defined in claim 5, where said differentiating centerline is a new stroke filled with a pattern.</claim-text>
      <claim-text>7. The system as defined in claim 5, where said differentiating centerline is a dashed new stroke.</claim-text>
      <claim-text>9. The method of reproducing a color document as described in claim 8, wherein said at least one dashed line is generated with a dashed line color selected as a function of said color other than black.</claim-text>
      <claim-text>10. The method of reproducing a color document as described in claim 9, wherein said dashed line color is black or white.</claim-text>
      <claim-text>11. The method of reproducing a color document as described in claim 8, where said at least one dashed line is generated with at least two colors.</claim-text>
      <claim-text>12. The method of reproducing a color document as described in claim 11, wherein said at least two colors include black and white.</claim-text>
      <claim-text>13. The method as defined in claim 8, and including: generating an outline for said line or stroke, and overlaying said outline at edges of said line or stroke.</claim-text>
      <claim-text>14. The method as defined in claim 13, and including: setting said outline to one of black or white in accordance with a luminance level of any background over which said lines or strokes are to be printed.</claim-text>
      <claim-text>15. The method as defined in claim 8, and including: setting said outline to one of black or white in accordance with a luminance level of said color other than black and white.</claim-text>
      <claim-text>16. The method as defined in claim 8, wherein said function of said color other than black is defined in terms of red-green-blue components of said color.</claim-text>
      <claim-text>17. The method as defined in claim 8, wherein for lines or strokes determined to be large, said color is replaced with a color pattern specific to said color.</claim-text>
    </claim>
  </claims>
</questel-patent-document>