<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182201B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182201</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182201</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25266158" extended-family-id="20727567">
      <document-id>
        <country>US</country>
        <doc-number>08834116</doc-number>
        <kind>A</kind>
        <date>19970414</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08834116</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>21259337</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>83411697</doc-number>
        <kind>A</kind>
        <date>19970414</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08834116</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <term-of-grant>
      <disclaimer/>
    </term-of-grant>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  12/06        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>06</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  12/08        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>08</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>711202000</text>
        <class>711</class>
        <subclass>202000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>711141000</text>
        <class>711</class>
        <subclass>141000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>711145000</text>
        <class>711</class>
        <subclass>145000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>711E12026</text>
        <class>711</class>
        <subclass>E12026</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>711E12033</text>
        <class>711</class>
        <subclass>E12033</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-012/08B4P</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>012</main-group>
        <subgroup>08B4P</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-012/08B4P4</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>012</main-group>
        <subgroup>08B4P4</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/0831</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>0831</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/0815</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>0815</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>4</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>2</number-of-drawing-sheets>
      <number-of-figures>2</number-of-figures>
      <image-key data-format="questel">US6182201</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Demand-based issuance of cache operations to a system bus</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>MYRE JR WILLIAM W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5043866</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5043866</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>LIU LISHING</text>
          <document-id>
            <country>US</country>
            <doc-number>5418922</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5418922</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KHALIDI YOUSEF A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5446854</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5446854</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SITES RICHARD L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5454091</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5454091</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>KHALIDI YOUSEF A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5479627</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5479627</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>WATANABE TETSUYA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5522056</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5522056</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>JOSTEN JEFFREY W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5546579</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5546579</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>DIBRINO MICHAEL T, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5581734</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5581734</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>BEAVERS BRAD, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5604879</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5604879</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>VICIK FREDERIC OTTO</text>
          <document-id>
            <country>US</country>
            <doc-number>5737611</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5737611</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>SHINOHARA TAKAYUKI</text>
          <document-id>
            <country>US</country>
            <doc-number>5742934</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5742934</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>HOOVER RUSSELL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5749087</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5749087</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>HAMMOND GARY N</text>
          <document-id>
            <country>US</country>
            <doc-number>5752275</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5752275</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>MANGES MARK GREGORY, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5765201</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5765201</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>BRACERAS GEORGE M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5781922</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5781922</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="16">
          <text>KHALIDI YOUSEF A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5784707</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5784707</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="17">
          <text>KAISER JOHN MICHAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5784710</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5784710</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="18">
          <text>PATEL RAJESH BHIKHUBHAI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5802572</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5802572</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="19">
          <text>SITES RICHARD LEE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6076158</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6076158</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Dwarkadas et al. "Comparative Evaluation of Fine- and Coarse-Grain Approaches for Software Distributed Shared Memory", IEEE Transactions on High-Performance Computer, p 260-269, 1999.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>PUPA 2-90259, Published Mar. 29, 1990.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>PUPA 57-186282, Published Nov. 16, 1982.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Arimilli, Ravi Kumar</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Dodson, John Steven</name>
            <address>
              <address-1>Pflugerville, TX, US</address-1>
              <city>Pflugerville</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Lewis, Jerry Don</name>
            <address>
              <address-1>Round Rock, TX, US</address-1>
              <city>Round Rock</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Williams, Derek Edward</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>McBurney, Mark E.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <orgname>Felsman, Bradley, Vaden, Gunter &amp; Dillon, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Cabeca, John W.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method of managing and speculatively issuing architectural operations in a computer system is disclosed.
      <br/>
      A first architectural operation at a first coherency granule size is issued and translated into a large-scale architectural operation.
      <br/>
      The first architectural operation can be a first cache instruction directed to a memory block, and the translating results in a page-level cache instruction being issued which is directed to a page that includes the memory block.
      <br/>
      The large-scale architectural operation is transmitted to a system bus of the computer system.
      <br/>
      A system bus history table may be used to store a record of the large-scale architectural operations.
      <br/>
      The history table then can be used to filter out any later architectural operation that is subsumed by the large-scale architectural operation.
      <br/>
      The history table monitors the computer system to ensure that the large-scale architectural operations recorded in the table are still valid.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">The present invention generally relates to computer systems and, more particularly, to a method of optimizing architectural-level operations such as cache instructions.</p>
    <p num="3">2. Description of the Related Art</p>
    <p num="4">
      The basic structure of a conventional computer system 10 is shown in FIG. 1.
      <br/>
      Computer system 10 may have one or more processing units, two of which 12a and 12b are depicted, which are connected to various peripheral devices, including input/output (I/O) devices 14 (such as a display monitor, keyboard, and permanent storage device), memory device 16 (such as random access memory or RAM) that is used by the processing units to carry out program instructions, and firmware 18 whose primary purpose is to seek out and load an operating system from one of the peripherals (usually the permanent memory device) whenever the computer is first turned on.
      <br/>
      Processing units 12a and 12b communicate with the peripheral devices by various means, including a generalized interconnect or bus 20.
      <br/>
      Computer system 10 may have many additional components which are not shown, such as serial and parallel ports for connection to, e.g., modems or printers.
      <br/>
      Those skilled in the art will further appreciate that there are other components that might be used in conjunction with those shown in the block diagram of FIG. 1; for example, a display adapter might be used to control a video display monitor, a memory controller can be used to access memory 16, etc.
      <br/>
      Also, instead of connecting I/O devices 14 directly to bus 20, they may be connected to a secondary (I/O) bus which is further connected to an I/O bridge to bus 20.
      <br/>
      The computer can have more than two processing units.
    </p>
    <p num="5">
      In a symmetric multi-processor (SMP) computer, all of the processing units are generally identical; that is, they all use a common set or subset of instructions and protocols to operate, and generally have the same architecture.
      <br/>
      A typical architecture is shown in FIG. 1.
      <br/>
      A processing unit includes a processor core 22 having a plurality of registers and execution units, which carry out program instructions in order to operate the computer.
      <br/>
      An exemplary processing unit includes the PowerPC (tm)  processor marketed by International Business Machines Corporation.
      <br/>
      The processing unit can also have one or more caches, such as an instruction cache 24 and a data cache 26, which are implemented using high-speed memory devices.
      <br/>
      Caches are commonly used to store temporarily values that might be accessed repeatedly by a processor, in order to speed up processing by avoiding the longer step of loading the values from memory 16.
      <br/>
      These caches are referred to as "on-board" when they are integrally packaged with the processor core on a single integrated chip 28.
      <br/>
      Each cache is associated with a cache controller (not shown) that manages the transfer of data between the processor core and the cache memory.
    </p>
    <p num="6">
      A processing unit 12 can include additional caches, such as cache 30, which is referred to as a level 2 (L2) cache since it supports the on-board (level 1) caches 24 and 26.
      <br/>
      In other words, cache 30 acts as an intermediary between memory 16 and the on-board caches, and can store a much larger amount of information (instructions and data) than the on-board caches can, but at a longer access penalty.
      <br/>
      For example, cache 30 may be a chip having a storage capacity of 256 or 512 kilobytes, while the processor may be an IBM PowerPC (tm)  604-series processor having on-board caches with 64 kilobytes of total storage.
      <br/>
      Cache 30 is connected to bus 20, and all loading of information from memory 16 into processor core 22 must come through cache 30.
      <br/>
      Although FIG. 1 depicts only a two-level cache hierarchy, multi-level cache hierarchies can be provided where there are many levels of serially connected caches.
    </p>
    <p num="7">
      A cache has many blocks or lines which individually store the various instructions and data values.
      <br/>
      An exemplary cache line (block) includes an address tag field, a state bit field, an inclusivity bit field, and a value field for storing the actual instruction or data.
      <br/>
      The state bit field and inclusivity bit fields are used to maintain cache coherency in a multiprocessor computer system (indicate the validity of the value stored in the cache).
      <br/>
      The address tag is a subset of the full address of the corresponding memory block.
      <br/>
      A compare match of an incoming effective address with one of the tags within the address tag field indicates a cache "hit." The collection of all of the address tags in a cache (and sometimes the state bit and inclusivity bit fields) is referred to as a directory, and the collection of all of the value fields is the cache entry array.
      <br/>
      The cache 30 of FIG. 1 depicts such a cache entry array 32 and a cache directory 34.
    </p>
    <p num="8">
      When all of the blocks in a set for a given cache are full and that cache receives a request, whether a "read" or "write," to a memory location that maps into the full set, the cache must "evict" one of the blocks currently in the set.
      <br/>
      The cache chooses a block by one of a number of means known to those skilled in the art (least recently used (LRU), random, pseudo-LRU, etc.) to be evicted.
      <br/>
      An LRU unit 36 is depicted in FIG. 1.
      <br/>
      If the data in the chosen block is modified, that data is written to the next lowest level in the memory hierarchy which may be another cache (in the case of the L1 or on-board cache) or main memory (in the case of an L2 cache, as depicted in the two-level architecture of FIG. 1).
      <br/>
      By the principle of inclusion, the lower level of the hierarchy will already have a block available to hold the written modified data.
      <br/>
      However, if the data in the chosen block is not modified, the block is simply abandoned and not written to the next lowest level in the hierarchy.
      <br/>
      This process of removing a block from one level of the hierarchy is known as an "eviction." At the end of this process, the cache no longer holds a copy of the evicted block.
    </p>
    <p num="9">
      A conventional cache has many queues: cacheable store queues 38 (which may include read and write queues for each of the cache directory, cache entry array, and other arrays, to fetch data coming in to reload this cache); a cache-inhibited store queue 40; a snoop queue 42 for monitoring requests to, e.g., intervene some data; and a cache operations queue 44 which handles cache instructions that execute control at an architectural level.
      <br/>
      For example, the PowerPC (tm)  processor utilizes certain instructions that specially affect the cache, such as a flush instruction, a kill instruction, a clean instruction, and a touch instruction.
      <br/>
      These instructions are stored in cache operations queue 44.
    </p>
    <p num="10">
      Cache instructions allow software to manage the cache.
      <br/>
      Some of the instructions are supervisory level (performed only by the computer's operating system), and some are user level (performed by application programs).
      <br/>
      The flush instruction (data cache block flush--"dcbf") causes a cache block to be made available by invalidating the cache block if it contains an unmodified ("shared" or "exclusive") copy of a memory block or, if the cache block contains a modified copy of a memory block, then by first writing the modified value downward in the memory hierarchy (a "push"), and thereafter invalidating the block.
      <br/>
      The kill instruction (data cache block invalidate--"dcbi," instruction cache block invalidate--"icbi," or data cache block set to zero--"dcbz") is similar to the flush instruction except that a kill instruction immediately forces a cache block to an invalidate state, so any modified block is killed without pushing it out of the cache.
      <br/>
      The clean instruction (data cache block store--"dcbst") causes a block that has been modified to be written to main memory; it affects only blocks which have been modified.
      <br/>
      The touch instruction (data cache block touch--"dcbt") provides a method for improving performance through the use of software-initiated prefetch hints.
    </p>
    <p num="11">
      All of the foregoing cache instructions operate on a block whose size is referred to as the processor coherency granule.
      <br/>
      For many computers, the processor coherency granule is 32 bytes, i.e., the processor can operate on a 32-byte sector in a cache block of the L1 cache.
      <br/>
      The system bus granule, however, may be larger, for example, 64 bytes or 128 bytes, i.e., the full size of the cache line that is transmitted from the L2 cache to the system bus is 64 bytes or 128 bytes.
      <br/>
      In other words, an instruction sent along the system bus references a 64-byte word or a 128-byte word, not just 32 bytes.
      <br/>
      Coherency sizes can vary further, for example, having three coherency sizes with a two-level cache (a processor coherency granule of 32 bytes, an L1 coherency granule of 64 bytes, and an L2/system bus coherency granule of 128 bytes).
    </p>
    <p num="12">
      This variation in coherency size along the memory hierarchy can lead to certain inefficiencies.
      <br/>
      For example, if a processor issues an "icbi" instruction to a particular 32-byte sector, that instruction will be sent along the system bus and be treated as a 64-byte instruction; then, if the processor immediately issues another "icbi" instruction for another 32-byte sector that was part of the same 64-byte word as the previous instruction, then traditional systems will send a second 64-byte "icbi" instruction to the same 64-byte word even though a single system bus instruction would have sufficed to kill the two adjacent 32-byte sectors.
      <br/>
      Another problem can arise when two different processes or threads have issued instructions which result in redundant performance of the same cache instruction.
      <br/>
      For example, the cache operations queue may include two "icbi" instructions with the same operand, i.e., acting on exactly the same 32-byte cache sector.
      <br/>
      These instructions are then redundantly repeated.
    </p>
    <p num="13">
      Another problem relating to the coherency granularity is that a smaller granule increases the number of instructions that are required to complete certain large-scale procedures.
      <br/>
      For example, a procedure might be performing page-level operations such as copying several pages of memory (a page is a plurality of contiguous memory blocks).
      <br/>
      If a page were 4 kilobytes and the processor coherency granule were 32 bytes, then a processor performing a flush on an entire page would have to issue 128 "dcbf" instructions, but if the coherency granule were 64 bytes or more, then the number of instructions would be reduced proportionately.
      <br/>
      This result leads to performance degradation when a procedure is doing many page-level cache operations.
      <br/>
      Performance is further decreased as the number of processors increases since a processor issuing the cache instructions must wait for snoop responses from all of the other processors before it is sure that the instruction has been completed.
    </p>
    <p num="14">
      Consider further how a second processor responds to the cache instructions issued by the first processor.
      <br/>
      If the processor coherency granule is 32 bytes and the system bus granule is 128 bytes, then when the first processor wants to flush a 32-byte sector, the second processor ends up snooping a 128-byte flush.
      <br/>
      So even though the first processor just wanted to flush a single 32-byte sector, four such sectors will have to be flushed in the cache of the second processor.
      <br/>
      This problem is exacerbated, however, when page-level cache operations such as those described above are performed, which result in a large number (128) of such 128-byte snooped flushes.
      <br/>
      The instructions and ensuing responses create a significant amount of address traffic.
      <br/>
      It would, therefore, be desirable to devise a method of handling large-scale architectural operations, such as page-level cache instructions, which decreased bus traffic.
      <br/>
      It would be further advantageous if the method could result in a decreased number of cache instructions that have to be performed, regardless of variations in the coherency granule of the memory hierarchy, and in quicker execution of those instructions.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="15">It is therefore one object of the present invention to provide an improved method of handling architectural operations in a computer system, particularly cache instructions.</p>
    <p num="16">It is another object of the present invention to provide such a method that reduces inefficiencies associated with the coherency granule size of the memory hierarchy.</p>
    <p num="17">It is yet another object of the present invention to provide such a method that takes advantage of variations in the coherency granule size of the memory hierarchy.</p>
    <p num="18">
      The foregoing objects are achieved in a method of managing architectural operations in a computer system, generally comprising the steps of issuing a first architectural operation at a first coherency granule size, and translating the first architectural operation into a large-scale architectural operation.
      <br/>
      The first architectural operation can be a first cache instruction directed to a memory block, and the translating step includes the step of issuing a page-level cache instruction directed to a page which includes the memory block.
      <br/>
      The large-scale architectural operation is transmitted to a system bus of the computer system.
      <br/>
      A history table may be used to store a record of the large-scale architectural operations.
      <br/>
      The history table then can be used to filter out any later architectural operation that is subsumed by the large-scale architectural operation.
      <br/>
      The history table monitors the computer system to ensure that the large-scale architectural operations recorded in the table are still valid.
    </p>
    <p num="19">The above as well as additional objectives, features, and advantages of the present invention will become apparent in the following detailed written description.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="20">
      The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives, and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:
      <br/>
      FIG. 1 is a block diagram of a prior art multiprocessor computer system; and
      <br/>
      FIG. 2 is a block diagram of one embodiment of a cache construction according to the present invention.
    </p>
    <heading>DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="21">
      With reference now to the figures, and in particular with reference to FIG. 2, there is depicted one embodiment of a simplified memory hierarchy 50 constructed in accordance with the present invention.
      <br/>
      Memory hierarchy 50 includes a memory device 52 connected to a system bus 54, and two caches 56a and 56b which are also connected to system bus 54.
      <br/>
      In the preferred embodiment, each cache 56a, 56b is identical.
      <br/>
      The memory hierarchy may further includes additional caches if more than two processors are provided in the multiprocessor computer system.
      <br/>
      Cache 56a has cache logic 58 which includes a cache directory, cache entry array, LRU unit, and appropriate logic to write to the cache lines, detect cache hits, and read stored values.
      <br/>
      The cache logic is connected to the processor, or a processor side of the memory hierarchy, by processor bus 60.
      <br/>
      Cache 56a further has one or more queues, including a cache operations queues 62.
      <br/>
      Cache operations queue 62 contains a serialized list of cache instructions such as those described above in the Description of the Related Art.
      <br/>
      As noted further below, the cache operations are part of a class of "architectural" operations, generally including any operation other that a load, store or fetch, which results in a bus operation.
    </p>
    <p num="22">
      In the depicted embodiment, the coherency granule size of memory hierarchy 50 varies.
      <br/>
      An exemplary implementation uses a 32-byte processor coherency granule, and a system bus coherency granule of 64 bytes.
      <br/>
      Inefficiencies associated with varying the coherency granule size are lessened by using a queue controller 64 which is connected to cache operations queue 62 and controls what instructions are placed in the queue.
      <br/>
      Queue controller 64 includes appropriate logic to associatively compare current entries in queue 62 to a new entry which is to be loaded in the queue.
      <br/>
      If the results of the comparison indicate that it is not necessary to perform the new entry, as it would be redundant with a current entry, then the new entry is dynamically folded into the current entry, i.e., simply not loaded in queue 62.
    </p>
    <p num="23">
      Consider the following example, a first kill instruction, such as the PowerPC (tm)  "icbi" instruction, is issued by a processor associated with cache 56a, in order to invalidate a first 32-byte sector.
      <br/>
      This first kill instruction is placed in queue 62.
      <br/>
      Shortly thereafter (while the first kill instruction is still in the queue), the same processor issues a second "icbi" instruction, this time on a second 32-byte sector, but on a sector which is the complement of the first 32-byte sector based on the coherency granule of the system bus.
      <br/>
      In other words, the second 32-byte sector is contiguous with the first 32-byte sector in memory device 52.
      <br/>
      Queue controller 64 will associatively compare the address of the second 32-byte sector with the previous entries in queue 62 to determine if an earlier "icbi" instruction was issued for any addresses which are associated the second 32-byte address by the large system bus granularity.
      <br/>
      In this example, the result of the comparison will be positive as queue controller will associate the second kill instruction with the first kill instruction that is still in the queue (they are in the same coherency granule).
      <br/>
      Based on this result, queue controller does not load the second kill instruction into queue 62.
    </p>
    <p num="24">
      The dynamic folding of a cache instruction into a current queue entry can reduce significantly address operations on system bus.
      <br/>
      From the processor perspective, the folded instruction was fully executed, but it required no latency.
      <br/>
      The advantages increase with increasing depth of the cache operations queue, and with increasing system bus coherency granule size.
      <br/>
      In the depicted embodiment, the cache instruction queue is eight deep.
      <br/>
      The logic required for queue controller 64 is relatively simple, particularly in relation to the benefits achieved.
    </p>
    <p num="25">
      Caches 56a and 56b utilize another method to minimize inefficiencies associated with varying coherency granule size.
      <br/>
      As noted above in the Description of Related Art, a cache instruction is often issued as part of a page-level operation, requiring many bus operations to handle the procedure.
      <br/>
      In the present invention, this concern may be addressed by performing speculatively all appropriate cache operations at the page level.
      <br/>
      In other words, if a processor issues a cache instruction at a first coherency size, that instruction is translated into a page-level operation that is transmitted to the system bus.
      <br/>
      This allows for a single bus operation per page affected.
      <br/>
      By way of comparison, in the prior art, it might take 128 32-byte flushes on the system bus to completely flush a page, but this procedure takes only one operation in the present invention.
      <br/>
      Therefore, the present invention particularly reduces address traffic during times of many page-level cache operations/instructions.
    </p>
    <p num="26">
      FIG. 2 also shows that each cache has a system bus history table 66.
      <br/>
      System bus history table 66 keeps track of the last several page-level operations issued to the system bus (speculative or normal).
      <br/>
      If a page-level operation has recently been executed (as described in the foregoing paragraph) that subsumes a later operation at the level of the processor granularity, then system bus history table 66 acts as a filter to keep the later operation from passing to the system bus.
      <br/>
      For example, if the processor issued a first flush instruction on a 32-byte sector, this instruction would be translated into a page-level operation, and the address of the accessed page (e.g., a twenty bit address for the page level) would be recorded in system bus history table 66.
      <br/>
      Thereafter, if the processor issues a second flush instruction for a second 32-byte sector that was still in the same page of the first instruction, then system bus history table 66 realizes that this second flush instruction is unnecessary because the entire page, including the second 32-byte sector, has already been flushed speculatively.
      <br/>
      In this sense, the issuance of the cache instructions is demand based, i.e., only when necessary.
    </p>
    <p num="27">
      System bus history table 66 monitors the system bus to ensure that the page-level operations recorded in the table are still valid.
      <br/>
      If any processor issues an instruction that would affect a page-level operation recorded in system bus history table 66, then that operation is removed from the table.
      <br/>
      In the exemplary embodiment, the history table is 20 deep.
    </p>
    <p num="28">
      The cache construction according to the present invention provides further means for minimizing the inefficiencies associated with small coherency granule sizes.
      <br/>
      Similar to the manner in which the cache may translate an instruction to the system bus at the page level, the cache also may translate a system bus operation to the processor bus at the page level, again in a speculative manner.
      <br/>
      In other words, if a cache snoops a cache instruction at a first coherency size, that instruction is translated speculatively into a page-level operation that is transmitted to the processor bus.
      <br/>
      For example, if the cache receives a 32-byte flush instruction from the system bus, it determines which page the 32-byte sector is in, and then sends a multiplicity (e.g., 128) of cache instructions to the processor bus, to completely flush the entire page.
      <br/>
      A processor bus history table 68 is used to keep track of the last several page-level operations so issued to the processor bus.
      <br/>
      Thereafter, if the cache receives a later flush instruction for a 32-byte sector which is part of the page already flushed, then processor bus history table 68 acts as a filter to keep the later operation from passing to the processor bus.
      <br/>
      The issuance of the cache instructions therefore is demand based again.
    </p>
    <p num="29">
      Even though this method of presenting a page-level operation may require issuing more instructions to the processor bus than are actually necessary, in those situations where many page-level operations are issued, the operations retire more quickly, since arbitration is simplified and pipelining is possible.
      <br/>
      There is just one arbitration step followed by a burst (a page's worth) of cache instructions.
    </p>
    <p num="30">
      Processor bus history table 68 can be used even if the cache does not generate multiple instructions to translate a low granularity instruction into a page-level operation.
      <br/>
      For example, processor bus history table 68 can keep track of operations which were transmitted previously to the processor bus (speculative or normal) as explained above.
    </p>
    <p num="31">
      Although the invention has been described with reference to specific embodiments, this description is not meant to be construed in a limiting sense.
      <br/>
      Various modifications of the disclosed embodiment, as well as alternative embodiments of the invention, will become apparent to persons skilled in the art upon reference to the description of the invention.
      <br/>
      For example, improved performance may be achieved by applying the present invention to any sort of architectural operation, not just cache operations; a history table could be used with a display buffer to improving certain multimedia procedures.
      <br/>
      The invention is generally applicable to any large-scale architectural operation which might be more efficiently handled by speculating that more operations will be required in addition to a single architectural operation.
      <br/>
      It is therefore contemplated that such modifications can be made without departing from the spirit or scope of the present invention as defined in the appended claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A device for managing architectural operations in a component of a computer system, comprising:</claim-text>
      <claim-text>means for translating architectural operations directed to one of a plurality of memory blocks in a memory device of the computer system into large scale architectural operations directed to a page which includes the memory block, said architectural operations are cache instructions, and said translating means issues page-level cache instructions;</claim-text>
      <claim-text>and a history table for storing a record of said large-scale architectural operations, said history table filters out any later architectural operation that is subsumed by said large-scale architectural operations, and said history table monitors the computer system to ensure that said large-scale architectural operations recorded in the table are still valid.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The device of claim 1 wherein said translating means includes means for transmitting said large-scale architectural operations to a system bus of the computer system.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A method of managing architectural operations in a computer system, comprising the steps of: issuing a first architectural operation directed to one of a plurality of memory blocks in a memory device of the computer system, the first architectural operation is a first cache instruction; translating the first architectural operation into a large scale architectural operation directed to a page which includes the memory block, the translating including issuing a page level cache instruction;</claim-text>
      <claim-text>and storing a record of the large-scale architectural operation in a history table, the history table filtering out any later architectural operation that is subsumed by the large-scale architectural operation, and the history table monitoring the computer system to ensure that the large-scale architectural operations recorded in the table are still valid.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1 wherein the large-scale architectural operation is transmitted to a system bus of the computer system.</claim-text>
    </claim>
  </claims>
</questel-patent-document>