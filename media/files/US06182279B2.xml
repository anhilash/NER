<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182279B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182279</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182279</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25428365" extended-family-id="42109152">
      <document-id>
        <country>US</country>
        <doc-number>08910144</doc-number>
        <kind>A</kind>
        <date>19970812</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08910144</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165836</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>91014497</doc-number>
        <kind>A</kind>
        <date>19970812</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08910144</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   9/445       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>445</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  21/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>717100000</text>
        <class>717</class>
        <subclass>100000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>717107000</text>
        <class>717</class>
        <subclass>107000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-008/36</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>36</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-021/12A4A</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>021</main-group>
        <subgroup>12A4A</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-008/36</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>36</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-021/126</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>126</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>32</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>11</number-of-drawing-sheets>
      <number-of-figures>13</number-of-figures>
      <image-key data-format="questel">US6182279</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for storing templates in a component system</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HESTON MARVIN D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4935888</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4935888</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>MORRIS JAMES M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5500802</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5500802</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>ATKINSON ROBERT G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5715441</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5715441</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>ROBBINS JEFFREY C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5729748</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5729748</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>BROMAN DAVID MICHAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5754858</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5754858</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>LYONS RICHARD J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5189608</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5189608</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>IIZAWA ATSUSHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5353401</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5353401</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>QUIMBY JOHN</text>
          <document-id>
            <country>US</country>
            <doc-number>5367573</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5367573</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>CARMAN II FRANK C</text>
          <document-id>
            <country>US</country>
            <doc-number>5454046</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5454046</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>RYU TADAMITSU, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5481718</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5481718</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>STUTZ DAVID S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5517645</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5517645</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>ALLEN WADE C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5519868</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5519868</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>BERRY RICHARD E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5537630</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5537630</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>IMAMURA SATOSHI</text>
          <document-id>
            <country>US</country>
            <doc-number>5560014</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5560014</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>SPENCER PERCY L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5603021</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5603021</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>MCMANIS CHARLES E</text>
          <document-id>
            <country>US</country>
            <doc-number>5692047</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5692047</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="17">
          <text>WORCESTER WINTHROP G</text>
          <document-id>
            <country>US</country>
            <doc-number>5706455</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5706455</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="18">
          <text>MARUYAMA TAKEO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5710920</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5710920</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="19">
          <text>MAURER JOSEPH CLARK</text>
          <document-id>
            <country>US</country>
            <doc-number>5710926</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5710926</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="20">
          <text>WOLD IVAR</text>
          <document-id>
            <country>US</country>
            <doc-number>5724589</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5724589</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="21">
          <text>HILL CHARLES E</text>
          <document-id>
            <country>US</country>
            <doc-number>5754864</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5754864</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="22">
          <text>SONDEREGGER KELLY ERVIN</text>
          <document-id>
            <country>US</country>
            <doc-number>5761499</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5761499</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="23">
          <text>GRANTZ JEFFREY A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5771347</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5771347</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="24">
          <text>MACRAE KENNETH I, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5786816</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5786816</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="25">
          <text>SADOWSKY RICHARD SCOTT</text>
          <document-id>
            <country>US</country>
            <doc-number>5790796</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5790796</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="26">
          <text>YATES JOHN S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5802373</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5802373</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="27">
          <text>KARAEV ISAAK, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5802518</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5802518</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="28">
          <text>TURKOWSKI KENNETH E</text>
          <document-id>
            <country>US</country>
            <doc-number>5819283</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5819283</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="29">
          <text>PRAGER NEAL R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5838918</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5838918</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="30">
          <text>WILLIAMS DAVID MARK</text>
          <document-id>
            <country>US</country>
            <doc-number>5850548</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5850548</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="31">
          <text>KLENCKE DAVID L</text>
          <document-id>
            <country>US</country>
            <doc-number>5867709</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5867709</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="32">
          <text>MALONE THOMAS W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5900870</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5900870</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="33">
          <text>THURLOW SCOTT A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5917489</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5917489</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Ross Nelson, "Running Visual Basic for Windows", Microsoft Press, pp. 1-3, 6-13, 17-21, 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Ross Nelson, "Running Visual Basic for Window", Microsoft Press, pp. 1-21, 23-32, 71-87, 115-122, 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>IBM Technical Disclosure Bulletin, "Software Packaging Tool", vol. 33, No. 3A, Aug. 1990.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="4">
          <text>IBM Technical Disclosure Bulletin, "Dynamic Packaging of Template Extraction Files From New Icons Folder", vol. 34, No. 5, Oct. 1991.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="5">
          <text>IBM Technical Disclosure Bulletin, "Packaging Template Extraction Files Using OS/2 Office Registration", vol. 34, No. 5, Oct. 1991.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>Brown et al., Footstore Searcher Tours, Online?CDROM '92 exhibits, "Dayone/Daytwo" in Dialog R File 148.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="7">
          <text>AN 96:407102, Title: "Sun Storms The Enterprise-SonSoft Unit Delivers NEO, A Comprehensive Suite of Object-Oriented Tools", Source: Information Week, Aug. 12, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="8">
          <text>AN 96:229987, Title: "Novell: New Tools in Green River Release of Netware 5 Extend Novell's Lead in Network Admin &amp; Management", Source: M Presswire, Jul. 16, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="9">
          <text>Brpwm et al., Footstore searcher tours ONLINE/CD-ROM'92 exhibits. "Dayone/Daytwo" in DIALOG(R) File 148.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="10">
          <text>In M2 Presswire the article "Topseed's clarion for windows adds 32-bit development option" in Dialog file(R).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="11">
          <text>Kythe, Dave, "The Promise of Distributed Business Components", AT&amp;T Technical Journal, vol. 75 pp. 20-29.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="12">
          <text>"Lotus Components-Developing Notes Applications with Lotus Components", Lotus Development Corporation, Ch. 7, pp. 130-147.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="13">
          <text>Cowart, Robert, "Mastering Window 3.1", Sybex Inc., pp. 489-499, 767-769, 894-896.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="14">
          <text>Sneed, H.; Wills, L.; Baxter, I.; Chikofsky, E.; "Encapsulating Legacy Software for Use in Client/Server Systems", Proceedings of the Third Working Conference on Reverse Engineering, pp. 104-119, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="15">
          <text>Orfali, R.; Harkey, D.; Edwards, J.; "The Essential Distributed Objects Survival Guide"; John Wiley &amp; Sons, Inc., pp. 283-295 and 429-452, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="16">
          <text>Newell, D.; Jones, O.; Machura, M.; "Interoperable Object Models for Large Scale Distributed Systems"; International Seminar on Client/Server Computing (IEE Digest No. 1995/184); vol. 1, pp. 14/1-14/6, 1995.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="17">
          <text>"Self-Contained Reusable Programmed Components"; IBM Technical Disclosure Bulletin; vol. 38, No. 7, pp. 283-285, 1995.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="18">
          <text>In Computer the article "Eco System: An Internet Commerce Architecture" written by Tenebaum et al.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Buxton, Jeffrey J.</name>
            <address>
              <address-1>North Andover, MA, US</address-1>
              <city>North Andover</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Kurdirka &amp; Jobse, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Hafiz, Tariq R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A component customization and distribution system in an object oriented environment provides a template builder utility which enables a base component to be selectively modified and the modifications to the base component stored as a template.
      <br/>
      The templates are stored in a template storage file by a template storage dynamic link library.
      <br/>
      Each template contains initialization data representing the modifications to the state of persistent data of the base component, as well as information useful in registering the template with the file system registry of another computer system, and, optionally, one or more user-defined instructions useful in utilizing the modifications or customizations to the base component.
      <br/>
      A template storage file containing one or more indexed templates serves as a database from which template distribution packs may be generated.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>COPENDING APPLICATIONS</heading>
    <p num="1">This application is the one of five U.S. patent applications filed on an even date herewith and commonly assigned, including:</p>
    <p num="2">
      Ser.
      <br/>
      No. 08/910,366, by Jeffrey J. Buxton, et. al. entitled "Architecture for customizable Component System";
    </p>
    <p num="3">
      Ser.
      <br/>
      No. 08/910,144, by Jeffrey J. Buxton, et. al. entitled "Method and Apparatus for Building Templates in a Component System";
    </p>
    <p num="4">
      Ser.
      <br/>
      No. 08/909,753, by Jeffrey J. Buxton, et. al. entitled "Method and Apparatus for Loading Components in a Component System"; and
    </p>
    <p num="5">
      Ser.
      <br/>
      No. 08/910,140, by Jeffrey J. Buxton entitled "Method and Apparatus for Distributing Templates in a Component System.
    </p>
    <p num="6">The subject matters of the above-identified copending patent applications are hereby incorporated herein by reference.</p>
    <heading>FIELD OF THE INVENTION</heading>
    <p num="7">This invention relates generally to improvements in computer systems, and, more particularly, to a system for creating and distributing customized applications.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="8">
      In the evolution of data processing systems, much of the functionality which previously had been performed by hardware system components is now being constructed utilizing software programming instead.
      <br/>
      Such an approach disfavors proprietary hardware architectures and encourages open system architectures on which a multitude of software algorithms can be executed on a common hardware architecture.
      <br/>
      As a result, software programs or applications have become more powerful and increasingly complex.
      <br/>
      Unfortunately, numerous difficulties arise in the development and maintenance of such software applications.
      <br/>
      Traditional applications have become so large and complex that even minor changes may take several weeks or months to implement.
      <br/>
      Accordingly, the trend in both software development and program language development is towards more modular, self-contained software designs.
    </p>
    <p num="9">
      One of the major developments in the field of software design has been the emergence of object-oriented technology.
      <br/>
      As explained in greater detail hereinafter, object-oriented technology enables the analysis, design and implementation of software systems with intelligent, autonomous agents called objects.
      <br/>
      Such objects facilitate the design of modular software which more closely mimics the physical or logical entities within the real world.
    </p>
    <p num="10">
      Despite the emergence of object-oriented technology most end-users have been typically unable to directly utilize the efficient, more modular design of an application, even if the application has been designed using object-oriented technology.
      <br/>
      For example, users of applets, i.e., small applications such as spreadsheets and file viewers, typically wish to customize such applications for their own preferred tasks and to allow such applications to interact with one another to form larger customized applications without having to redesign or make extensive modifications to such applications.
      <br/>
      Further, even if such applications were modifiable, their inherent value is often directly related to the ability to distribute such customized applications with accompanying data in a manner which is both efficient and respects the intellectual property rights of the authors.
      <br/>
      Accordingly, a need exists for a system of intelligent, self-contained software modules which may be used to construct larger applications in a modular fashion.
      <br/>
      Further, a need exists for a technique in which software applications may be modified as desired by an end-user in the manner which is both simplified and efficient.
    </p>
    <p num="11">
      A further need exists for a technique in which such modifications to standard applications may be distributed and used in an efficient manner.
      <br/>
      In addition, a need exists for a technique in which use and distribution of such customized application may be performed only by those who are properly authorized by the software licensor.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="12">
      The present invention provides a component system in which a number of base applications, i.e. components, such as file viewers, spreadsheets, draw/diagram utilities, etc. may be customized by a user and the customizations, i.e., the differences from the base applications, distributed in the form of a template to another user having the same base applications on his/her system.
      <br/>
      A special loader utility, when used in conjunction with the template and the base application from which the template was derived, enables the recipient system to recreate the behavior of the customized application.
    </p>
    <p num="13">
      The invention is contemplated for use in object-oriented system in which components are implemented as objects.
      <br/>
      A template builder utility allows a user to select a base component, modify the persistent data of the component, and store the modifications as a template in a predetermined format.
      <br/>
      The template builder utility further enables the user to package templates in a template distribution package format which enables the templates to be distributed to other users having the same base components installed on their systems.
      <br/>
      A component loader utility loads the template onto a recipient user system and utilizes the information contained within the template distribution pack to spoof the already installed base component.
      <br/>
      The method of spoofing is achieved using aggregation of object properties so that method calls to the templated component are selectively directed to the base component by the component loader utility.
      <br/>
      The component loader utility, however, reserves the right of changing, enhancing or disabling the results of the method call to recreate the behavior of the customized or templated component.
    </p>
    <p num="14">
      According to one aspect of the invention, a computer program product used with a computer system comprises a computer system useable medium having computer readable program code in the medium.
      <br/>
      The computer program code comprises program code for defining a storage file, program code for storing at least one template in the storage file, and program code for indexing the template within the storage file.
      <br/>
      In one embodiment, the template comprises initialization data associated with the template, the initialization data representing changes to the state of persistent data of the component from the template was derived.
      <br/>
      In another embodiment, the template comprises user-defined instruction associated with the template and information useful in registering the template with a file system registry of a computer system.
      <br/>
      Such information may include the path name of the component from which the template was derived, and information indicating whether the template is scriptable, and whether the template may be initialized from persistent data.
    </p>
    <p num="15">According to a second aspect of the invention, an apparatus for storing a plurality of templates in a computer system comprises a memory having one or more locations, means for indexing one or more locations within the memory, a template stored in at least one of the memory locations, initialization data associated with the template, key information associated with the template, and means coupling the memory to a central processing unit within the computer system.</p>
    <p num="16">
      In accordance with a third aspect of the invention, a method of generating a template of customizations to a component in an object-oriented computer system comprises the steps of storing as initialization data in a memory, modifications to the state of persistent data of a component, and associating with the initialization data an information key useful in registering the template with a file system registry of a computer system.
      <br/>
      In one embodiment, the method further comprises the step of associating with the initialization data user-defined instructions related to the template.
      <br/>
      In another embodiment, the information key may comprise information indicating the path name of the component from the template was derived, information indicating whether the template may be initialized from persistent data or information indicating a class identifier of the object on which the template is based.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="17">
      The above and other features, objects and advantages of the invention will be better understood by referring to the following detailed description in conjunction with the accompanying drawing in which:
      <br/>
      FIG. 1 is a block diagram of a computer system suitable for use with the present invention;
      <br/>
      FIG. 2 is a conceptual diagram of the elements comprising the component system in accordance with the present invention;
      <br/>
      FIG. 3A is a conceptual diagram of the structure of a component in accordance with the present invention;
      <br/>
      FIG. 3B is a conceptual diagram of the structure of the registry entries associated with the component of FIG. 3A;
      <br/>
      FIG. 4A is a conceptual block diagram of a template builder in accordance with the present invention;
      <br/>
      FIG. 4B is a conceptual block diagram of the structure of a template and a template storage file in accordance with the present invention;
      <br/>
      FIG. 4C is a conceptual block diagram of the registry entries associated with the template of FIG. 4B;
      <br/>
      FIG. 5 is a conceptual block diagram of a component distribution pack in accordance with the present invention;
      <br/>
      FIG. 6 is a flow chart illustrating the method steps for creating a component distribution pack in accordance with the present invention;
      <br/>
      FIG. 7 is a flow chart illustrating methods performed by the component loader in accordance with the present invention;
      <br/>
      FIGS. 8A-B collectively form a flow chart illustrating the methods performed by the component loader in accordance with the present invention; and
      <br/>
      FIG. 9 is a flow chart illustrating methods performed by the component loader in accordance with the present invention.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="18">
      FIG. 1 illustrates the system architecture for a computer system 100 such as an IBM PS/2.RTM., on which the invention may be implemented.
      <br/>
      The exemplary computer system of FIG. 1 is for descriptive purposes only.
      <br/>
      Although the description may refer to terms commonly used in describing particular computer systems, such as in IBM PS/2 computer, the description and concepts equally apply to other systems, including systems having architectures dissimilar to FIG. 1.
    </p>
    <p num="19">
      Computer system 100 includes a central processing unit (CPU) 105, which may be implemented with a conventional microprocessor, a random access memory (RAM) 110 for temporary storage of information, and a read only memory (ROM) 115 for permanent storage of information.
      <br/>
      A memory controller 120 is provided for controlling RAM 110.
    </p>
    <p num="20">
      A bus 130 interconnects the components of computer system 100.
      <br/>
      A bus controller 125 is provided for controlling bus 130.
      <br/>
      An interrupt controller 135 is used for receiving and processing various interrupt signals from the system components.
    </p>
    <p num="21">
      Mass storage may be provided by diskette 142, CD ROM 147, or hard drive 152.
      <br/>
      Data and software may be exchanged with computer system 100 via removable media such as diskette 142 and CD ROM 147.
      <br/>
      Diskette 142 is insertable into diskette drive 141 which is, in turn, connected to bus 130 by a controller 140.
      <br/>
      Similarly, CD ROM 147 is insertable into CD ROM drive 146 which is, in turn, connected to bus 130 by controller 145.
      <br/>
      Hard disk 152 is part of a fixed disk drive 151 which is connected to bus 130 by controller 150.
    </p>
    <p num="22">
      User input to computer system 100 may be provided by a number of devices.
      <br/>
      For example, a keyboard 156 and mouse 157 are connected to bus 130 by controller 155.
      <br/>
      An audio transducer 196, which may act as both a microphone and a speaker, is connected to bus 130 by audio controller 197, as illustrated.
      <br/>
      It will be obvious to those reasonably skilled in the art that other input devices, such as a pen and/or tabloid may be connected to bus 130 and an appropriate controller and software, as required.
      <br/>
      DMA controller 160 is provided for performing direct memory access to RAM 110.
      <br/>
      A visual display is generated by video controller 165 which controls video display 170.
      <br/>
      Computer system 100 also includes a communications adaptor 190 which allows the system to be interconnected to a local area network (LAN) or a wide area network (WAN), schematically illustrated by bus 191 and network 195.
    </p>
    <p num="23">
      Operation of computer system 100 is generally controlled and coordinated by operating system software, such as the OS/2.RTM. operating system, available from International Business Machines Corporation, Boca Raton, Fla. or Windows 95 from Microsoft Corp., Edmond, Wash.
      <br/>
      The operating system controls allocation of system resources and performs tasks such as processing scheduling, memory management, networking, and I/O services, among things.
      <br/>
      In particular, an operating system 210 resident in system memory and running on CPU 105 coordinates the operation of the other elements of computer system 100.
      <br/>
      The present invention may be implemented with any number of commercially available operating systems including OS/2, UNIX Windows NT and DOS, etc.
      <br/>
      One or more applications 202 such as Lotus Notes, commercially available from Lotus Development Corp., Cambridge, Mass., may be executable under the direction of operating system 215.
      <br/>
      If operating system 215 is a true multitasking operating system, such as OS/2, multiple applications may execute simultaneously.
    </p>
    <p num="24">
      FIG. 2 illustrates conceptually the component system 200 in accordance with the present invention.
      <br/>
      In a preferred embodiment, the elements of component system 200 are implemented in the C++ programming language using object-oriented programming techniques. C++ is a compiled language, that is, programs are written in a human-readable script and this script is then provided to another program called a compiler which generates a machine-readable numeric code that can be loaded into, and directly executed by, a computer.
      <br/>
      As described below, the C++ language has certain characteristics which allow a software developer to easily use programs written by others while still providing a great deal of control over the reuse of programs to prevent their destruction or improper use.
      <br/>
      The C++ language is well-known and many articles and texts are available which describe the language in detail.
      <br/>
      In addition, C++ compilers are commercially available from several vendors including Borland International, Inc. and Microsoft Corporation.
      <br/>
      Accordingly, for reasons of clarity, the details of the C++ language and the operation of the C++ compiler will not be discussed further in detail herein.
    </p>
    <p num="25">
      As will be understood by those skilled in the art, Object-Oriented Programming (OOP) techniques involve the definition, creation, use and destruction of "objects".
      <br/>
      These objects are software entities comprising data elements, or attributes, and methods, or functions, which manipulate the data elements.
      <br/>
      The attributes and related methods are treated by the software as an entity and can be created, used and deleted as if they were a single item.
      <br/>
      Together, the attributes and methods enable objects to model virtually any real-world entity in terms of its characteristics, which can be represented by the data elements, and its behavior, which can be represented by its data manipulation functions.
      <br/>
      In this way, objects can model concrete things like people and computers, and they can also model abstract concepts like numbers or geometrical designs.
    </p>
    <p num="26">
      Objects are defined by creating "classes" which are not objects themselves, but which act as templates that instruct the compiler how to construct the actual object.
      <br/>
      A class may, for example, specify the number and type of data variables and the steps involved in the methods which manipulate the data.
      <br/>
      When an object-oriented program is compiled, the class code is compiled into the program, but no objects exist.
      <br/>
      Therefore, none of the variables or data structures in the compiled program exist or have any memory allotted to them.
      <br/>
      An object is actually created by the program at runtime by means of a special function called a constructor which uses the corresponding class definition and additional information, such as arguments provided during object creation, to construct the object.
      <br/>
      Likewise objects are destroyed by a special function called a destructor.
      <br/>
      Objects may be used by using their data and invoking their functions.
      <br/>
      When an object is created at runtime memory is allotted and data structures are created.
    </p>
    <p num="27">
      The principle benefits of object-oriented programming techniques arise out of three basic principles; encapsulation, polymorphism and inheritance.
      <br/>
      More specifically, objects can be designed to hide, or encapsulate, all, or a portion of, the internal data structure and the internal functions.
      <br/>
      More particularly, during program design, a program developer can define objects in which all or some of the attributes and all or some of the related functions are considered "private" or for use only by the object itself.
      <br/>
      Other data or functions can be declared "public" or available for use by other programs.
      <br/>
      Access to the private variables by other programs can be controlled by defining public functions for an object which access the object's private data.
      <br/>
      The public functions form a controlled and consistent interface between the private data and the "outside" world.
      <br/>
      Any attempt to write program code which directly accesses the private variables causes the compiler to generate an error during program compilation which error stops the compilation process and prevents the program from being run.
    </p>
    <p num="28">
      Polymorphism is a concept which allows objects and functions which have the same overall format, but which work with different data, to function differently in order to produce consistent results.
      <br/>
      For example, an addition function may be defined as variable A plus variable B (A+B) and this same format can be used whether the A and B are numbers, characters or dollars and cents.
      <br/>
      However, the actual program code which performs the addition may differ widely depending on the type of variables that comprise A and B. Polymorphism allows three separate function definitions to be written, one for each type of variable (numbers, characters and dollars).
      <br/>
      After the functions have been defined, a program can later refer to the addition function by its common format (A+B) and, at runtime, the program will determine which of the three functions is actually called by examining the variable types.
      <br/>
      Polymorphism allows similar functions which produce analogous results to be "grouped" in the program source code to produce a more logical and clear program flow.
    </p>
    <p num="29">
      The third principle which underlies object-oriented programming is inheritance, which allows program developers to easily reuse pre-existing programs and to avoid creating software from scratch.
      <br/>
      The principle of inheritance allows a software developer to declare classes (and the objects which are later created from them) as related.
      <br/>
      Specifically, classes may be designated as subclasses of other base classes.
      <br/>
      A subclass "inherits" and has access to all of the public functions of its base classes just as if these function appeared in the subclass.
      <br/>
      Alternatively, a subclass can override some or all of its inherited functions or may modify some or all of its inherited functions merely by defining a new function with the same form (overriding or modification does not alter the function in the base class, but merely modifies the use of the function in the subclass).
      <br/>
      The creation of a new subclass which has some of the functionality (with selective modification) of another class allows software developers to easily customize existing code to meet their particular needs.
    </p>
    <p num="30">
      Object-oriented technology forms the basis for component system 200 of the present invention.
      <br/>
      For the purpose of the illustrative embodiment, components are essentially C++ objects that conform to an object model, such as Microsoft's Component Object Model.
      <br/>
      An object module is a unifying set of rules that describe object structure, object life cycle, and inter-object communication.
      <br/>
      Object structure relates to the physical layout of objects in memory, while object life cycle refers to how applications create and destroy objects.
      <br/>
      Inter-object communication refers to protocols by which objects communicate with one another.
      <br/>
      Object modules are useful in contexts where all objects in a given system need to conform to a given protocol governing these parameters.
      <br/>
      Most object-oriented and object-based languages, including the C++ programming language, do not specify true object modules, but merely specify syntax and semantics of a basic object implementation without specifying the rules that unify object systems.
    </p>
    <p num="31">
      Component system 200 of the present invention will be described by way of example as being implemented using Microsoft's Component Object Model (COM) and Object Linking and Embedding (OLE) standards.
      <br/>
      Other object models, however, such as IBM Corporation's System Object Model (SOM) and Distributed System Object Model (DSOM), may be utilized for implementing the inventive component system described herein.
      <br/>
      MicroSoft has published a COM specification which defines a set of rules intended to unify all objects in a given software system and which further identifies and defines a number of standard interfaces, e.g. publicly available protocols, that have been found to be universally applicable to the development of object-oriented software.
      <br/>
      For example, COM specifies the interfaces for object creation, persistence, event notification, visual rendering, etc.
      <br/>
      The actual implementation of the interfaces as defined by the COM specification, is left to the software developer.
    </p>
    <p num="32">
      When an object conforms to the COM specification, the object behaves functionally as described by the COM interface.
      <br/>
      Generally, an object which implements the COM interface is referred to as a server, while applications and other objects that use these interfaces are referred to as clients.
      <br/>
      Accordingly, through interfaces, the COM specification defines a simple client/server module.
    </p>
    <p num="33">
      Microsoft Corporation has also published an Object Linking and Embedding (OLE) 2.0 specification which defines the rules regarding linking and embedding of object which conform to the COM specification.
      <br/>
      OLE is a set of system-level services which utilize the interfaces defined by the COM specification.
      <br/>
      These services are implemented as a series of OLE libraries in the form of Dynamic Link Libraries (DLLs) that come with the Microsoft's Windows operating system and supply built-in services that do generalized, low-level tasks.
      <br/>
      One of the mechanisms defined by OLE specification is referred to as an OLE control (OCX).
      <br/>
      Controls are autonomous software building blocks which embody all other OLE technologies.
      <br/>
      OLE controls are implemented as in-process servers, i.e. dynamic link libraries, which implement extra interfaces required to handle such functions as automation, inside/outside activation, events, properties and change notifications.
    </p>
    <p num="34">
      OLE controls operate within the context of applications referred to as containers.
      <br/>
      A container is a stand-alone application capable of embedding OLE controls.
      <br/>
      As a result, containers themselves implement a set of interfaces to deal with items such as a tool bar, menu and status bar negotiation, events, properties, control placement and sizing, etc.
    </p>
    <p num="35">Having defined the object-oriented technology and exemplary specifications, including the COM specification and the OLE specification, with which the inventive component system may be designed, the component system itself will be described with reference to component structure, and elements of the component system.</p>
    <p num="36">Component System</p>
    <p num="37">
      FIG. 2 illustrates conceptually the inventive component system 200 and various elements of operating system 215 which interact with the component system 200, but are not considered part of the component system 200.
      <br/>
      Specifically, component system 200 comprises one or more base OLE controls 230, referred to hereinafter as "components" or "base component", a template builder 204, a template installer executable 210, a component loader 206, a template storage DLL 205, a template storage 212, and, optionally, a distribution pack 208.
      <br/>
      The elements of the operating system which interact with component system 200 include an OLE container 220, OLE libraries 230, application program interfaces (APIs) 240 which may comprise WIN 32 API designed by Microsoft Corp., and the operating system registry 250.
    </p>
    <p num="38">
      In the illustrative embodiment, operating system 215 comprises the Windows 95 or Windows NT operating system, both available from MicroSoft Corporation, Redmond, Wash.
      <br/>
      Container 220 may comprise any stand alone application capable of embedding OLE controls.
      <br/>
      A container 220 interacts with the WIN32 APIs 240 through the OLE libraries 230 in order to insert OLE objects or controls into the operating system registry 250.
      <br/>
      Examples of OLE containers are Lotus Notes available from Lotus Development Corporation, Cambridge, Mass., and MicroSoft Word, available from MicroSoft Corporation, Redmond, Wash.
      <br/>
      OLE libraries 230 comprise the set of system-level services in accordance with the OLE specification 2 0 (slashed zero)  The OLE libraries function to call the WIN32APIs 240 to locate registered objects in registry 250 and to insert and create object dialog and return results to callers.
      <br/>
      When creating an OLE object or an OLE control, OLE libraries 230 call the WIN32 APIs 240 to read the registry 250 and to find out the server for an object or a control.
      <br/>
      The OLE libraries 230 further cause the server to be loaded and to cause the ICLASSFACTORY interface to be called to create the instance of an OLE control.
    </p>
    <p num="39">
      Registry 250 comprises a file in memory, typically on disk, containing information registered about various programs and objects.
      <br/>
      The system registry 250 is organized into "hives" and structured hierarchically.
      <br/>
      A hive is a discrete body of root level keys, subkeys, and values that is rooted at the top of the registry hierarchy.
      <br/>
      A hive is backed by a single file and .LOG file.
      <br/>
      In the illustrative embodiment, hives are portions of the Windows registry that contain a subtree of registry entries.
      <br/>
      There are five hives: HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS_, HKEY_CURRENT_CONGIF, and HKEY_CURRENT_USER.
      <br/>
      Data items within the registry 250 are retrievable via calls to the WIN32 APIs 240.
    </p>
    <p num="40">
      The elements of component system 200 are described hereinafter in greater detail.
      <br/>
      Headings have been inserted into the specification to assist the reader in locating those sections of interest.
    </p>
    <p num="41">
      Component system 200 may function as a standalone application or may be used with Lotus Notes or any software application which implements OLE controls.
      <br/>
      A component system 200 implemented in accordance with the present invention is commercially available from Lotus Development Corporation, Cambridge, Mass. as the Component Starter Pack 1 0 (slashed zero)  The standard components included with the Component Starter Pack 1.0 include applications such as Chart, Comment, Draw/Diagram, File Viewer, Project Scheduler, and Spreadsheet, in addition to a template builder utility and a component loader utility.
    </p>
    <p num="42">
      A user interface enables a user to interact with component system 200 and may be implemented with a simple command line interpreter or may have a more sophisticated graphic user interface with pull down menus to select various options available, such as selection of a specific component, the component loader 206, the template builder 204, etc.
      <br/>
      The design of such a user interface is within the scope of those reasonably skilled in the arts.
    </p>
    <p num="43">Component Structure</p>
    <p num="44">
      FIG. 3A illustrates conceptually the logical structure of a component 300 similar to components 202 of FIG. 2.
      <br/>
      In the illustrative embodiment, component 300 may be implemented as any OLE control having all or a portion of the functionality described in OLE specification.
      <br/>
      Such an implementation allows component 300 to function as an intelligent, self-contained software module that may be used to construct other software in a modular fashion and which allows components to communicate with one another and to be integrated smoothly with other applications.
      <br/>
      The methods of the object(s) within each component perform the functions which characterize the nature of the component content, e.g., a file viewer, a project scheduler, a spreadsheet, etc.
      <br/>
      Such objects typically include methods to present a standardized graphic user interface, negotiate menus and exchange data with other applications and databases.
      <br/>
      In addition, when placed in other containers, components 300 may act like a traditional OLE control, as defined in the OLE specification.
      <br/>
      Components 300 register themselves in registry 250 with WIN32 APIs 240 so that the OLE libraries 230 are aware of the component's existence.
    </p>
    <p num="45">
      Component 300 comprises component contents 302 and a digital signature 304.
      <br/>
      Component content 302 are defined by the software developer and comprise one or more objects or classes of objects whose respective methods define the specific functionality of the component, i.e., a spreadsheet, a file viewer, etc.
      <br/>
      Provided the appropriate interfaces which adhere to both the COM specification and the OLE specification are implemented within the component contents 302, the actual functions implemented by the component are left to the discretion of the software programmer.
    </p>
    <p num="46">
      In the illustrative embodiment, a digital signature 304, appended to component contents 302, uniquely identifies the component and the vendor or source of the component.
      <br/>
      Digital signature 304 may be implemented as a hash of the component contents and may be encrypted using any number of commercially available encryption algorithms, such as Message Digest, Version 5, commercially available from RSA Data Securities, Inc., Redwood, Calif.
      <br/>
      The content of the actual component itself does not have to be encrypted directly, although such may be an option of the system designer without affecting the functionality of the invention.
      <br/>
      In such an implementation, the component vendor encrypts digital signature 304 with the private key portion of a public/private key encryption combination using the above-described encryption technology.
      <br/>
      The vendor would then make publicly available the public key portion of the public/private key encryption combination to allow use of the component 300.
      <br/>
      The message digest algorithm used to generate the hash of the component contents may be created and encrypted at the vendor's site.
      <br/>
      In order for all users of component 300 to have the same public key for each component, a message digest algorithm is typically created at the time of code build of the component.
      <br/>
      Alternatively, if each customer is to have a different public key, the message digest may be created once a user orders the component or component system.
      <br/>
      In the latter scenario, the digital signature is added following code build of the component.
    </p>
    <p num="47">
      In the illustrative embodiment, component 300 supports OLE aggregation.
      <br/>
      Aggregation refers to the technique of forming an aggregate or composite object from two or more objects, typically a control object and a noncontrol object, each of which have their own interfaces.
      <br/>
      Typically, the control object forms the aggregate object's personality and determines how the aggregate object operates, making decisions about which of the interfaces are exposed publicly, outside of the object, and which interfaces remain private.
      <br/>
      The control object typically has a special instance of the IUNKNOWN interface referred to as the controlling unknown which is implemented as part of the new code written when the aggregate object is formed.
      <br/>
      The IUNKNOWN interface is defined in the OLE specification.
      <br/>
      The control object holds a pointer to the noncontrol objects IUNKNOWN interface implementation so that the control object can call the noncontrol methods when appropriate.
      <br/>
      The noncontrol object holds a pointer to the controlling objects IUNKNOWN implementation for the same reason.
      <br/>
      The net result of aggregation is the ability to reuse interface implementations, allowing multiple objects having different interfaces to be combined into composite object having interfaces which are combinations of its constituent objects.
    </p>
    <p num="48">
      In addition to component contents 302 and digital signature 304, a number of entries in the system registry 250, in the form of registry keys or subkeys, are associated with each component, as illustrated in FIG. 3B. Under the CLSID root for the global unique ID (GUID) for each object loaded or spoofed by the loader, as explained hereinafter, a number of keys reside within registry 250.
      <br/>
      Generally, each OLE control has a subkey under the CLSID interface that OLE libraries 230 use to find out information about the OLE control.
      <br/>
      Most OLE object application information is stored in subkeys under the CLSID root key.
      <br/>
      As a result, only classes explicitly intended to be user-visible appear when the registration database viewer is executed.
      <br/>
      The immediate subkey of the CLSID root key is a string version of the CLSID.
      <br/>
      The subkey indicates where the code that services an object class can be find.
      <br/>
      Most of the information found under the CLSID root key is used by the OLE default object handler to return various information about an object's class when the object is in the loaded state.
    </p>
    <p num="49">
      FIG. 3B shows conceptually a number of keys and subkeys associated with a component 300 but maintained within registry 250.
      <br/>
      A certificate key 305, as illustrated in FIG. 3B, contains all the registered certificates of a component.
      <br/>
      Each certificate may be implemented as a subtree under a terms tree and may be an encrypted binary file containing the vendor's name, the component's public key, and an optional time-trial value.
    </p>
    <p num="50">
      In addition, each component 300 has subkeys 306 as illustrated in FIG. 3B and described in Table 1 herein.
      <br/>
      For example, key 306A contains information defining the full path name to component loader 206.
      <br/>
      Key 306B contains information identifying the original value of the component loader and refers to the original OLE control or object being spoofed, also known as the base control.
      <br/>
      Key 306C may comprise a binary signature indicating the specific vendor or source of the component.
      <br/>
      Key 306D contains information indicating that the subject component is an OLE control which may be safely scripted.
      <br/>
      Key 306E contains information indicating that the subject component is an OLE control that is safely initializable for persistent data in an object-oriented environment.
    </p>
    <p num="51">To assist the reader in understanding the structure and function of the component system set forth herein, several key OLE interfaces are described below.</p>
    <p num="52">
      An ISTREAM is an OLE interface which supports reading and writing of data to stream objects.
      <br/>
      Stream objects are elements nested within a storage object and are similar to standard files.
      <br/>
      Stream objects are typically used to store data for an application.
    </p>
    <p num="53">
      An ISTORAGE is an OLE interface which supports the creation and management of structure storage objects.
      <br/>
      Such structured storage objects provide hierarchical storage of information within a single file similar to a file system within a file.
      <br/>
      Storage objects act like directories within a file system and provide the structure within a structure storage object.
      <br/>
      Structured storage objects can contain other storage objects or stream objects.
      <br/>
      Stream objects act like files within a traditional file system and contain the actual data content in a storage object.
      <br/>
      The OLE specification provides an implementation of the ISTORAGE interface in compound files and provides a set of functions for using the compound file implementation of storage objects.
      <br/>
      OLE structured storage files are also known as compound document files and function as a root ISTORAGE interface.
      <br/>
      Such ISTORAGE interfaces may contain other ISTORAGE interfaces or ISTREAM interfaces nested to an arbitrary depth.
    </p>
    <p num="54">
      A CLSID identifies the functionality of an object class that can display and/or provide programmatic access to property values.
      <br/>
      Most OLE object application information is stored in subkeys under the CLSID root key of the file system registry.
      <br/>
      A subkey is used by an OLE control under the CLSID to find out information about the control.
    </p>
    <p num="55">
      An FORMATETC (abbreviated FMTETC) is an OLE data structure which acts in a generalized clipboard format.
      <br/>
      The FORMATETC structure encompasses a target device the aspect or view of the data and a storage medium indicator.
      <br/>
      The FORMATETC data structure is used as a parameter in OLE functions and methods that require data format information.
    </p>
    <p num="56">Template Builder</p>
    <p num="57">
      Template builder 204, indicated in FIG. 4A as template builder 400, allows users to create customized or "templated" components based on a base component 202.
      <br/>
      The customized or templated components, referred to hereinafter as "templates", can then be used similar to base components 202.
      <br/>
      In addition, these templates may be stored to facilitate efficient distribution of templates to others, as explained hereinafter with reference to the distribution pack and the component loader.
      <br/>
      FIGS. 4A and 4B illustrate conceptually the elements comprising template builder 400 and an exemplary template 420, respectively.
      <br/>
      The description of template builder 400 will be illustrated in conjunction with the structure of a template to facilitate a better understanding of each concept.
      <br/>
      Template builder 400 comprises a graphic user interface 402, editor module 404 template installer executable 410 and a distribution pack generator module 406.
      <br/>
      Template builder 400 is itself a separate application which may be launched on a standalone basis or from a menu contained within user interface of component system 200.
    </p>
    <p num="58">
      Once invoked, template builder 400 provides a graphic user interface (GUI) 402, which enables users to perform a variety of different actions.
      <br/>
      GUI 402 may have the following exemplary menu options:
    </p>
    <p num="59">
      New Template
      <br/>
      Open Template
      <br/>
      Close
      <br/>
      Save
      <br/>
      Save as
      <br/>
      Delete
      <br/>
      Template Properties
      <br/>
      Create Distribution Pack
      <br/>
      Exit Template Builder
    </p>
    <p num="60">
      GUI 402 may be implemented with one or more objects or classes of objects whose respective methods perform the functions necessary to enable a user to selectively modify a component and to create templates as described hereinafter.
      <br/>
      Such methods may include those functions for displaying menu options and other visual features such as status bars, tool bars, etc. as well as those functions actually implemented once a menu option is selected.
      <br/>
      The actual selection and class definitions of such objects being left to the designer, depending on the functions of the template builder desired.
    </p>
    <p num="61">In the illustrative embodiment, template builder 400 may be implemented as an OLE control (OCX) container and, therefore, has three distinct menu states: OCX User Interface (UI) Active, OCX User Interface (UI) Inactive, and OCX Not Present.</p>
    <p num="62">
      The New Template, Open Template, Delete, and Create Distribution Pack menu options are available whenever the OCX is UI-Active, UI-Inactive, or Not Present.
      <br/>
      The Close, Save, Save As, and Exit Template Builder menu options are available only when the OCX is UI-Active or UI-Inactive and disabled if the OCX is Not Present.
      <br/>
      The Save menu option is available only when the OCX is UI-Active and UI-Inactive.
    </p>
    <p num="63">
      Selection of the menu from graphic user interface 402 generates a dialog box in which the user may enter a descriptive name of the template, and instructions for using the template.
      <br/>
      Selection of the Template Properties menu option generates a listing of the template name, the date of creation of the template, the date of most recent modification to the template, and a descriptive name of the template.
      <br/>
      The Template Properties menu option also generates a dialog box where the user may enter instructions on using the template, and, select whether such instructions are shown when the template is first used.
      <br/>
      Selection of the Save As and Template Properties menu options may also generate a check box and password dialog box which, if selected, enable a user to lock a template from further editing or modification until the correct password is supplied.
    </p>
    <p num="64">
      Selection of the Create Distribution Pack menu option enables users to create a distribution pack file to facilitate distribution of one or more templates.
      <br/>
      A menu, which may be optionally scrollable, is presented upon selection of the Create Distribution Pack option and allows users to identify one or more templates to be packaged as an executable file.
      <br/>
      In the absence of a direct selection, graphic user interface 402 may be implemented to highlight a default selection, e.g., the first template listed in the displayed list.
      <br/>
      The methods used by the template builder of the distribution pack are set forth in greater detail hereinafter.
      <br/>
      To complete creation of the distribution pack, the user may enter the name of the executable file which contains the previously selected templates, or, a name may be determined by default, e.g. the name of the first selected template.
    </p>
    <p num="65">
      It will be obvious to those reasonably skilled in the art that graphic user interface 402 associated with template builder 400 may include one or more icons in addition to or in place of the menu options previously described herein, as well as other visual features such as status bars, tool bars, etc.
      <br/>
      The remaining implementation details of graphic user interface 402 of template builder 400 are within the scope of those reasonably skilled in the arts, in light of the disclosure provided herein with reference to object-oriented technology, the COM and OLE specifications, and the descriptions of menu options and responses contained herein.
    </p>
    <p num="66">
      Editor module 404 of template builder 400 enables users to selectively modify the functionalities contained within a base component such as component 300 of FIG. 3A. Editor module 404 operates in a manner similar to file based editors, i.e. an original component is opened, changes are made using editor 404, and the modified component saved as a template.
      <br/>
      In the contemplated embodiment, components which are shipped with the system have a number of predetermined functions which may be selectively modified by the user.
      <br/>
      For example, a user may initially select a spreadsheet component and, using editor module 404 selectively modify the spreadsheet component's functionality to create a customized component whose function is dedicated to performing mortgage calculations.
      <br/>
      In this scenario, the functionality of the customized component, i.e. the mortgage calculator is a subset of the original functions supplied with the base component, i.e. the spreadsheet, such customizations being contained within the OLE control itself.
    </p>
    <p num="67">
      Template builder 400 creates and hosts and instance of a component to be templated.
      <br/>
      Most customization to the component are contained by the actual OLE control comprising the component.
      <br/>
      The customizations applied by editor module 404 is the ability to save and show "Quicksteps", i.e., help instructions about the template which may be displayed when the component is reused in another context, such as a Lotus Notes document or a MicroSoft Word document.
      <br/>
      In addition, editor module 404 may provide the ability to lock the template with a password such that further editing of the template contents is not allowed by template builder 400.
      <br/>
      When used in other application, e.g., Lotus Notes, Word Pro, MicroSoft Word, the templated control may still be edited.
    </p>
    <p num="68">
      Template builder 400 creates templates 420 as described hereinafter with the assistance of the template storage DLL 205.
      <br/>
      Template storage DLL 205 performs a number of formatting and storage/retrieval methods which manage the storage and registration of templated components for component loader 206, template builder 400 and template installer 410.
      <br/>
      Template storage DLL 205 ensures all additional registry keys and library types are created for template 420 so that spoofing of a templated component makes the templated component appear to be the base control of the original component as far as the OLE libraries 230 and the container 220 containing the base controller concerned.
      <br/>
      Template storage DLL 205 may be implemented with one or more objects or classes of objects whose respective methods perform the functions hereinafter.
    </p>
    <p num="69">
      Template builder 400 further generates creation distribution packs 500 as further described with reference to FIG. 6.
      <br/>
      Template builder 400 contains an integral part thereof, a template installer executable 410, similar to template installer 210 of FIG. 2.
      <br/>
      The template installer 410 also comprises an integral part of a distribution pack 500 and may be implemented as a self-executing program which reads a data dictionary at the end of the distribution pack, as explained hereinafter.
      <br/>
      Template builder 400 includes a copy algorithm for copying template installer 410 into a distribution pack 500 upon request.
    </p>
    <p num="70">Templates and Template Storage</p>
    <p num="71">
      FIG. 4B illustrates the logical structure of template storage 440 and an exemplary template 420 in accordance with the present invention.
      <br/>
      In the illustrative embodiment, template storage 440 may be implemented as a OLE structured storage file stored on a disk or any suitable memory apparatus.
      <br/>
      Each template 420 is stored in an ISTORAGE whose name is unique to the machine for that template.
      <br/>
      The name is assigned by the temporary storage DLL 205 when the template is created and may have the form TEMPLEnnn, where nnn may be a decimal number.
    </p>
    <p num="72">
      Templates 420 is stored in template storage 440 by template storage DLL 205 in the following manner.
      <br/>
      A root storage, referred to as "slotmap" contains a binary bit map of used and available slots.
      <br/>
      Each slot is encoded into a byte (8 bit) in the stream (ISTREAM) The least significant bit of the first byte in the stream is for template 1, while the most significant bit of the first byte in the stream is for template 8, etc.
      <br/>
      A binary "1" in a bit indicates that the slot is used, a binary "0" indicates that a slot is available.
      <br/>
      Each storage location off of the root storage contains the following items: 1) an ISTREAM containing information about the templates FMTETC, 2) an ISTREAM containing the contents that an OLE control will write to the storage location, 3) an ISTREAM containing user instructions entered by the creator of the template when saving the template, and 4) an ISTREAM containing information about the subject template, i.e. template information.
      <br/>
      The data structures, including data type, name, size and description, of such template information are set forth in Table 3 herein.
      <br/>
      The sizes of the data types listed in Table 3 are further defined by the data structures contained in Table 4.
    </p>
    <p num="73">
      Generally, a template 420 comprises initialization data and other data needed to enhance, modify or disable the component to be spoofed, as well as data to find and run the spoofed component.
      <br/>
      Referring to FIG. 4B, each template 420 comprises initialization data 425, user instructions 445, and one or more registry keys or subkeys 450.
      <br/>
      Initialization data 425 comprises the persistent data representing the state of changes made to the base component 300 with GUI 402 of template builder 400.
      <br/>
      When template builder 400 saves the template, it instructs the component, to save itself as an OLE structure storage file.
      <br/>
      Additional data to identify and register the component is also saved in various ISTREAMS and ISTORAGES in the templates ISTORAGE.
      <br/>
      This ISTORAGE is held inside the template storage file 440 created on the user's machine.
    </p>
    <p num="74">
      User instructions 445, entered by the author of the template, may be stored in Unicode form in template 420 itself.
      <br/>
      The Unicode standard is well known and is an international character code standard for information processing.
      <br/>
      The Unicode standard encompasses the principle scripts of the world and provides the foundation for internationalization and localization of software.
    </p>
    <p num="75">
      When template 420 is created, template builder 400 and template storage DLL 205 combine to write operating system registry 250.
      <br/>
      For example, if the Windows operating system is utilized, the Windows registry is used to register component 420 as an OLE control and as a component on the user's machine.
      <br/>
      The human readable name for the component may be chosen by a user.
      <br/>
      The remainder of the operating system registry entries are generated by code in the template storage DLL 205 and are stored in both registry 250 and the template 420.
      <br/>
      To facilitate loading of template 420 onto another system as described hereinafter, a number of registration key or subkey 450 are included with template 420.
      <br/>
      Each template 420 may have the keys 450A-I, as illustrated in FIG. 4C and further described in Table 2.
      <br/>
      Keys 450A-C are identical in structure and function to keys 306A-C of component 300, as previously described with reference to FIG. 3B and Table 1.
      <br/>
      Key 450D contains information indicating that the subject component is a templated object.
      <br/>
      Key 450E contains information that the subject templated component is a control which may be safely scripted.
      <br/>
      Key 450F contains information indicating that the subject templated component is a control that is safely initializable for persistent data in an object-oriented environment.
      <br/>
      Key 450G contains information indicating the CLSID of the object upon which the subject template is based.
      <br/>
      Key 450H contains information indicating the name of the storage object in template storage file 440 where initialization data 425 for the templated component may be located.
      <br/>
      Finally, key 450I contains information identifying the CLSID of the general type library for the template.
    </p>
    <p num="76">
      Specifically, key 450I "points" to the GUID found under the TYBELIB root to find the type library for the OLE automation which will be a new TYBELIB library derived from the base controls type library.
      <br/>
      As such, the base controls, i.e., the components registry entries will be duplicated in a new registry entry with a new TYBELIB file.
      <br/>
      The new TYBLIB file enables operations of the component to be enhanced, modified, or disabled.
      <br/>
      Spoofing the TYBELIB ensures proper operation of the templated control in an OLE automation environment.
    </p>
    <p num="77">Distribution Pack</p>
    <p num="78">As stated previously, one of the menu options available from graphic user interface 402 of template builder 400 is the Create Distribution Pack option which, when selected, causes template builder 400 to create a template distribution pack 500, as illustrated in FIG. 5.</p>
    <p num="79">
      Distribution pack 500 may be implemented as an executable program including an OLE structured storage file containing the data for one or more templates, as previously described.
      <br/>
      The distribution pack 500 may be stored on a medium for physical distribution or election downloading over a network.
      <br/>
      When executed, distribution pack 500 installs, on the user's machine, the templates contained therein and any other data items appended to the templates.
      <br/>
      As illustrated in FIG. 5, the distribution pack 500 comprises a template installer executable 502 one or more template(s) 505 and a data dictionary 508.
      <br/>
      Template installer 502 is a self-executable file, similar to template installer 410 described previously, which is copied into distribution pack 500 by template builder 400.
      <br/>
      Template(s) 505 have that same format as described with reference to FIG. 4B.
    </p>
    <p num="80">
      Generally, template builder 400 generates a distribution pack 500 by copying the template installer executable 502 into the distribution pack, copying those templates specified by a user from template storage 440 into the distribution pack, and generating an attachment signature for the template(s) file containing the attachment signatures forming data dictionary 508.
      <br/>
      Distribution pack 500 is capable of installing one or more items appended to it by reading data dictionary 508 at the end of the template installer executable 502.
      <br/>
      Specifically, data dictionary 508 comprises an attachment description count 504 and one or more attachment signature(s) 506. Attachment description count 504 may be implemented as a variable-sized integer, the value thereby being determined by the number of attachment signatures.
      <br/>
      Attachment description count 504 has the data structure as set forth in Tables 7 and 8 herein.
      <br/>
      Attachment signatures 506, have the format and data structures, as set forth in Table 5 and 6 herein.
    </p>
    <p num="81">Each attachment description 504 may be implemented using the following C++ code example:</p>
    <p num="82">
      --
      <br/>
      -- typedef struct_tagAttachmentDescription
      <br/>
      -- +AttachmentType  m_Type; // type
      <br/>
      -- DWORD m_dwFileOffset;       // offset in the file from BOF
      <br/>
      -- DWORD m_dwLength:           // length of the attachment in BYTEs
      <br/>
      -- OLECHAR m_Name �_MAX_PATH�; // name of file to detach to}
      <br/>
      -- AttachmentDescription;
    </p>
    <p num="83">Each attachment type implemented in the above code example may be implemented using the following C++ code example:</p>
    <p num="84">
      --
      <br/>
      -- struct AttachmentType
      <br/>
      -- Description: an attachment type
      <br/>
      -- Assumes: Preceding the AttachmentSignature in a template installer is
      <br/>
      -- a variable number (AttachmentSignature.m_dwNumAttachments) of
      <br/>
      -- AttachmentDescription structures.
      <br/>
      The AttachmentType of an
      <br/>
      -- AttachmentDescription describes the type of attachment, which also
      <br/>
      -- implies the install-time behavior.
      <br/>
      -- typedef enum _tagAttachmentType
      <br/>
      -- +TINSTAR_FILE = 1, // yes, these can recurse
      <br/>
      -- INSTALLEXE_FILE = 2,    // recurses, but does not delete
      <br/>
      --                                itself
      <br/>
      -- TAC_BLOCK = 3,          // a Lotus Terms &amp; Conditions
      <br/>
      --                                block
      <br/>
      -- SIGNATURE_BLOCK = 4,    // a Lotus Signature block
      <br/>
      -- DOCFILE_FILE = 5,       // a DocFile (Use
      <br/>
      --                                StgOpenDocfile to open)
      <br/>
      -- TEMPLATE_DOCFILE_FILE = 6, // a DocFile of Templates (Use
      <br/>
      --                                StgOpenDocfile to open)
      <br/>
      -- BENSTORE_FILE = 7,      // a Bento storage file (Use
      <br/>
      --                                StgOpenBento to open)
      <br/>
      -- TEMPLATE_BENSTORE_FILE = 8, // a Bento storage file of
      <br/>
      --                                Templates (Use StgOpenBento
      <br/>
      --                                to open)
      <br/>
      -- OCX_FILE = 9,           // a generic OCX -- install it
      <br/>
      --                                and call DllRegisterServer
      <br/>
      -- DLL_FILE = 10,          // a generic DLL -- install it and
      <br/>
      --                                if it is self-registering call
      <br/>
      --                                DllRegisterServer
      <br/>
      -- EXE_FILE = 11,          // a generic EXE -- install it and
      <br/>
      --                                run with -- Register on
      <br/>
      --                                command line
      <br/>
      -- OLE_DLL_FILE = 12,      // an OLE inproc server and call
      <br/>
      --                                DllRegisterServer
      <br/>
      -- OLE_EXE_FILE = 13,      // an OLE container or server
      <br/>
      --                                EXE and run with -- Register
      <br/>
      --                                on command line
      <br/>
      -- REG_FILE = 14,          // a .REG file -- register it
      <br/>
      -- LC_OCX_FILE = 15,       // a Lotus components OCS --
      <br/>
      --                                install it and call
      <br/>
      --                                DllRegisterServer
      <br/>
      -- }
    </p>
    <p num="85">Attachment Signatures 506 may be implemented using the following C++ code example:</p>
    <p num="86">
      --
      <br/>
      -- typedef struct_tagAttachmentSignature
      <br/>
      -- +// a pair of magic numbers to "tag" the file
      <br/>
      -- DWORD       m_dwMagic1;
      <br/>
      -- DWORD       m_dwMagic2;
      <br/>
      -- // size of this struct
      <br/>
      -- DWORD       m_dwSize;
      <br/>
      -- // version of this struct
      <br/>
      -- DWORD       m_dwVersion;
      <br/>
      -- //number of variable-sized attachments that precede us in the file
      <br/>
      -- DWORD       m_dwNumAttachments;
      <br/>
      -- // a title for this pack
      <br/>
      -- OLECHAR     m_szTitle �ATTACHMENT_MAXTITLE�;
      <br/>
      -- // an MD-5 signature
      <br/>
      -- BYTE    m_MessageDigest �ATTACHMENT_SIGNEDBYTES_SIZE�;
      <br/>
      -- }
      <br/>
      -- AttachmentSignatures;
    </p>
    <p num="87">
      FIG. 6 is a flow chart illustrating the basic process steps used by template builder 400 to create a distribution pack 500 in accordance with the present invention.
      <br/>
      The coding of the method steps of the illustrated flow chart into instructions or objects having analogous method functions suitable for control of the central processing unit of the user's machine will be understood by those having ordinary skill in the art of programming.
    </p>
    <p num="88">
      As illustrated in FIG. 6, the process by which the template builder executable 400 creates a distribution pack starts with the step of creating a first temporary file, as illustrated by process step 602.
      <br/>
      Next, the template installer executable 502 is read from the template builder executable and the size of the template installable executable determined, as illustrated by process step 604.
      <br/>
      The template installer executable 502 is then written to the first temporary file, as illustrated in procedural step 606.
      <br/>
      Next, a second temporary file is created as an OLE structure storage, file, as illustrated by procedural step 608.
      <br/>
      Next, template storage DLL 430 copies one or more selected templates from template storage file 440 to the second temporary file, as illustrated by procedural step 610.
      <br/>
      A data dictionary 508 is then created in memory and the contents of the second temporary file appended thereto, as illustrated by procedural step 612.
      <br/>
      The data dictionary indicates to the template installer executable 502 what is appended to the data dictionary and how to handle such appendages.
      <br/>
      Next, the second temporary file, i.e., the OLE structure storage file, is appended to the first temporary storage file, i.e. the template installer executable 502, to form a composite temporary file, as illustrated by procedural step 614.
      <br/>
      The data dictionary 508 is then appended to the composite temporary file, as illustrated by procedural step 616.
      <br/>
      Finally the composite temporary file is renamed to the name of the distribution packet, as selected by the user, as illustrated by procedural step 618.
    </p>
    <p num="89">Once a distribution pack 500 is generated by template builder 400 in accordance with the previously described method, the distribution pack, in conjunction with component loader 206 and template storage DLL 205 is capable of installing templates from an embedded storage file within the distribution pack into a registered template storage file on a different system using the code within template storage DLL 205.</p>
    <p num="90">Component Loader</p>
    <p num="91">
      Component loader 206, performs three functions in accordance with the illustrative embodiment.
      <br/>
      First, the component loader will load, verify and check the license and integrity of a component.
      <br/>
      Second, the component loader extends the function of the templated component to be loaded through a process known as aggregation, which allows additional interfaces to be added to an existing object interface without modifying the object itself.
      <br/>
      Third, the component loader loads the component.
      <br/>
      These three functionalities are described in greater detail below.
    </p>
    <p num="92">
      In order to utilize template 420 generated by the template builder 400, the system must have installed thereon the component loader 206 and the template storage DLL 205.
      <br/>
      Component loader 206 contains code that recognizes the load of a component as the load of a template 420 and finds the template storage DLL 205 that will enable reading of the template initialization data 425 from the distribution pack.
    </p>
    <p num="93">
      Component loader 206 loads, verifies and checks the license of a component 208 by replacing in the registry 250 the InProcessServer32 entry, i.e. key 450A, for the component with the full path name to component loader 206 and adding additional registry keys 450B-J, as previously described, that will let the component loader then load the correct OLE control.
      <br/>
      Component loader 206 provides default functionality to a component using OLE aggregation.
      <br/>
      Specifically, component loader 206 adds a secure loading interface to a generic OLE control, which ensures that the OLE control is uncorrupted and properly obtained.
      <br/>
      Component loader 206 utilizes digital signature verification and license verification to establish secure loading of an OLE control.
      <br/>
      Specifically, a component includes a digital signature, similar to digital signature 304 previously described, which ensures that the OLE control loaded and OLE control installed are one and the same.
      <br/>
      The digital signature further ensures that the component that was installed was produced by the vendor of the component, either directly or indirectly, as the component is signed by the vendor with a private key.
      <br/>
      Specifically, the component vendor may sign the component through use of a public/private key encryption technology, as previously described.
      <br/>
      Verifier module within the component loader 206 ensures that the component is properly licensed, i.e. is used within the terms and conditions agreed to at the time of installation.
      <br/>
      The license itself may comprise a number of terms and conditions implemented as data blocks stored in system registry 250, such data blocks being verifiable through a public/private key encryption technology.
    </p>
    <p num="94">
      A number of specific licensing techniques may be utilized to ensure proper licensing of a component or template.
      <br/>
      For example, components supplied with the component system 200 may be provided with specific mechanisms to automatically determine the occurrence of a certain event, i.e. counters and time-bombs.
      <br/>
      Such mechanism may comprise a soft time-bomb, i.e. a component is licensed to work for a specified time after installation of the component.
      <br/>
      Alternatively, a component may be configured with a hard time-bomb, i.e. the component is licensed to work up to a specific stop date regardless of the date of installation.
      <br/>
      Such a mechanism may alternatively comprise a usage count, i.e. the component is licensed to work for a specified number of times (usages) after installation.
      <br/>
      The design and structure of such licensing enforcement mechanisms is within the scope of those reasonably skilled in the relevant arts and will not be described hereinafter for brevity.
    </p>
    <p num="95">
      For each component that is loaded by component loader 206, the component loader 206 looks up the public key of the vendor stored in a certification list and validates the signature.
      <br/>
      If a component's certification is not on the list, it is assumed that the component is unlicensed and therefore is not loaded and its use is unauthorized.
      <br/>
      If the vendor's certificate is on the list, but the signature does not match, there is a possibility that the component has been damaged.
      <br/>
      In such instance, component loader 206 may, optionally, delete or disable the component as there is a possibility that the component is carrying a computer virus.
      <br/>
      Finally, if the component vendor certificate is in the list and the digital signature within the component matches, it may be assumed that the license for the component is valid and that the component is safe to use.
      <br/>
      At such point, a flag within the component's data space within registry 250 may be set and checked on all subsequent calls to the component.
      <br/>
      When a component has simply been copied from one user to another, component loader 206 will detect the lack of a vendor certificate and will prevent loading of the component and subsequent use of the copied component's functionality.
      <br/>
      In any event, when container 220 either does not support or ignores the test results from the component loader 206, the previously mentioned flag within the component's data space will not be set and all subsequent calls to the component will fail, and, possibly, cause a message to be displayed indicating "unauthorized use." The methods performed by the component loader 206 to verify the license and signature are set forth in greater detail with reference to FIGS. 7-8B.
    </p>
    <p num="96">
      In addition to the verification functions described above, component loader 206 functions as the registered server for the new OLE controls representing a template 420.
      <br/>
      Loader 206 "spoofs" the original OLE control and aggregates itself on top of the original OLE control, loading the template data in conjunction with template storage DLL 205, as appropriate.
      <br/>
      In the case of an OLE control, the registry 250 is used by the OLE 230 libraries to locate and run a server for a given registry GUID.
      <br/>
      Component loader 206 registers itself as the server for all components and saves the knowledge of the actual component to be run.
      <br/>
      When an application uses OLE libraries 230 to create a new instance of a registered component, the component loader 206 is instanced instead of the component.
      <br/>
      Component loader 206 then utilizes information about the actual component to "wrap" or "spoof" the component.
      <br/>
      This method of wrapping is achieved using the OLE Aggregation properties defined by the COM specification so that method calls to the object presented to OLE 230 as the instanced component are selectively directed to the actual component.
      <br/>
      The component loader 206, however, reserves the right, by virtue of being the actual software entity called by the OLE 230, of changing, enhancing or disabling the results of a method call.
      <br/>
      As such, spoofing is different from "data stuffing." In data stuffing, data is read into the component transparently to an outside caller.
      <br/>
      With spoofing, additional behaviors are added or enhanced to the component in the form of user instructions, i.e. Quicksteps.
      <br/>
      The aggregation performed by component loader 206 may be used to enhance, disable or modify any method call exposed by a component on any COM interface, beyond what is currently done by component loader 206.
      <br/>
      For example, a new type library, needed by the OLE automation builders, such as Lotus Notes and Microsoft Visual Basic, is created by the template storage DLL 205 and registered in the registry 250 for a specific template.
      <br/>
      Component loader 206 can then be used to enhance, disable or modify those functions available to the OLE automation for the base component of the specific template.
    </p>
    <p num="97">The spoofing process performed by component loader 206 as defined above, and as further defined with reference to FIG. 9, may utilize any of the following OLE data structures and objects, as set forth in the OLE 2.0 specification, to perform the spoofing methods set forth herein.</p>
    <heading>OLESTR</heading>
    <heading>GUID</heading>
    <p num="98">IClassFactory</p>
    <heading>CLSID</heading>
    <heading>IID</heading>
    <p num="99">IUnknown</p>
    <p num="100">IPersistentStreamInit</p>
    <p num="101">IPersistentStorage</p>
    <p num="102">IStorage</p>
    <p num="103">IStream</p>
    <heading>HRESULT</heading>
    <p num="104">IOIeObject</p>
    <p num="105">IDispatch</p>
    <heading>DISPPARAMS</heading>
    <heading>VARIANT</heading>
    <heading>EXCEPINFO</heading>
    <heading>LCID</heading>
    <p num="106">ITypeInfo</p>
    <p num="107">
      Component loader 206 works in conjunction with template installer 502 to unload templates 505 from distribution pack 500 into a storage file on the recipient component system on which component loader 206 is executing.
      <br/>
      Template installer 502 loads templates 505 which have been formatted by template storage DLL 205 according to the following method.
      <br/>
      First, template installer 502 seeks the end of the file of the last attachment signature 506 in distribution pack 500.
      <br/>
      Next, template installer 502 reads the attachment signature(s) 506 and verifies the attachment signature using an appropriate call, such as a CheckAttachmentSig call.
      <br/>
      Next, all of the attachment description(s) 504 within data dictionary 508 of the distribution pack 500 are read.
      <br/>
      Finally, template installer 502 loops through all attachment description(s) 504 reading the file(s) in the attachment descriptions and performing the operations required by the attachment description type fields specifies, including launching the template installer executable types as processes.
    </p>
    <p num="108">
      Component loader 206 utilizes the methods performed by template storage DLL 205 to obtain the OLE ISTORAGE containing the data of a template.
      <br/>
      Component loader 206 then utilizes the template data to initialize the base controls data, i.e. the component's data.
      <br/>
      To achieve this, component loader 206 inserts the template data into the component using methods in the IDATAOBJECT (IDATA Object.SetData) to pass the OLE ISTORAGE.
      <br/>
      The IDATAOBJECT is obtained from the component using the Queryinterface defined by the COM specification.
      <br/>
      As a result, the IDATAOBJECT is spoofed by component loader 206 prohibiting a template based on a component having either an invalid signature or certificate from loading, since the certification thread will either cause the IDATAOBJECT method to fail or the component to be closed.
    </p>
    <p num="109">
      Component loader 206 is implemented with a dynamic link library module which serves as a standard unit process server.
      <br/>
      The dynamic link library has two exports and implements an object ICLASSFACTORY and a generic object to aggregate all loaded components.
      <br/>
      The ICLASSFACTORY object is a master class factory for all components loadable by the component loader 206.
      <br/>
      By providing a generic implementation of the ICLASSFACTORY, the component loader DLL can intercept all calls to create an instance and aggregate default functionality onto a component.
    </p>
    <p num="110">
      When a container 220 incorporates a component 202, the component loader DLL will be loaded and call DLLGetClassObject.
      <br/>
      The algorithm performed by the methods of the DLLGetClassObject is described with reference to FIG. 7.
      <br/>
      The coding of the method steps of the flow chart of FIG. 7 into instructions or objects having analogous method functions suitable for control of the central processing unit of the user's machine will be understood by those having ordinary skill in the art of programming.
      <br/>
      First, a subkey, such as HKEY_CLASSES_ROOT.backslash.CLSID.backslash.+CLSID}.backslash.CLSID, is read from registry 250 to determine the real component CLSID, as indicated by process step 700.
      <br/>
      Next, a determination is made as to whether a certificate exists by reading the appropriate registry entry such as HKEY_CURRENT_USER.backslash.Software.backslash.Lotus.backslash.LOCX.backslash.+szRealCLSID}, as indicated by decisional block 702.
      <br/>
      If no certificate exists, the user will be notified and a failure message returned, as indicated by procedural block 704.
      <br/>
      If a certificate does exist, a determination is made as to whether or not a license period has expired, as indicated by decisional step 706.
      <br/>
      If the license period has expired, the user is informed and a failure message returned, as illustrated by procedural step 704.
      <br/>
      If the license period has not expired, a message may be displayed with all information necessary for the user to order the component, as illustrated in procedural block 708.
      <br/>
      Next, in procedural block 710, the relevant character string from the registry is converted to a CLSID.
      <br/>
      The component loader 206 then calls the GetClassObject to retrieve the real component's class factory, as indicated by process 712.
      <br/>
      Next, the component loader's class factory references the component class factory and adds itself to a list of loaded class factories, as indicated in procedural step 714.
      <br/>
      A determination is then made if a certification thread exists in decisional block 716.
      <br/>
      If no certification thread exists, one is created in procedural step 718, as indicated in FIG. 7.
      <br/>
      In procedural step 720, the certification thread blocking a semaphore is released forcing the thread to process all loaded objects, as indicated by procedural step 720.
      <br/>
      Next, the component loader DLL class factory is returned back to the container 220, as indicated by procedural step 722.
    </p>
    <p num="111">
      The certification thread may periodically go through the list of all class factory objects and certify the component.
      <br/>
      In this manner, certificates and licenses may be checked periodically to ensure that the time trial licenses are in force.
    </p>
    <p num="112">
      The method performed by the certification thread is described with reference to the process steps illustrated in FIGS. 8A-B. The coding of the method steps of the illustrated flow chart into instructions or objects having analogous method functions suitable for control of the central processing unit of the user's machine will be understood by those having ordinary skill in the art of programming.
      <br/>
      First, for each object loaded by component loader 206, the certification thread compares the current date with the date on which that object was last checked, as illustrated by process blocks 800 and 802.
      <br/>
      If the dates are the same, the certification thread advances to the next object, as illustrated by decisional block 804.
      <br/>
      If the dates are dissimilar, the certification thread obtains the components file name from the InProcessserver32 registry entry of registry 250, as illustrated by process step 806.
      <br/>
      Next, the component's certificate is obtained from the entry of registry 250, such as HKEY_CURRENT_USER.backslash.SOFTWARE.backslash.LOTUS.backslash.LOCX.backslash.+CLSID.backslash. as indicated by process step 808.
      <br/>
      The certification thread then determines if the certificate has expired, as illustrated by decisional block 810.
      <br/>
      If the certificate has expired, the certification thread cripples the component by forcing all future calls to certain objects, such as ICLASSFACTORY ITYPEINFOC, and IPERSISTORAGE to return an error message.
      <br/>
      Alternatively, the component may be forced into immediate closure by an appropriate method call such as OLEObject::Close, as illustrated by procedural block 812.
      <br/>
      If the certificate for the component has not expired, the certification thread decrypts the certificate, as illustrated by procedural block 814.
      <br/>
      Next, a flag may be set in the component's name space, e.g. the component's dynamic link library to let the system know that component resources may be accessed, as illustrated by procedural step 816.
      <br/>
      Next, a signature resource at the end of the component file is located and the resource decrypted using the vendor's public key in the component certificate, as illustrated by process 818.
      <br/>
      A message digest of the component dynamic link library is then generated, as illustrated by step 820.
      <br/>
      Next, the message digest generated is compared with the message digest stored in the component dynamic link library, as illustrated by procedural step 822.
      <br/>
      If the message digests are the same, as illustrated by decisional block 824, the certification thread marks the object as valid, as illustrated by procedural block 826.
      <br/>
      Alternatively, if the message digests are dissimilar, the component is crippled or closed, as illustrated in procedural block 812.
      <br/>
      If more objects exist, the certification thread will advance to the next object, as illustrated by decisional block 828, otherwise, the certification thread may remain dormant for a predetermined period of time, as illustrated by process block 830.
    </p>
    <p num="113">
      With the above described method, certification thread verifies that the digital signature of a loaded component and blocks operation of the component if the digital signature fails.
      <br/>
      Further, the certification thread verifies the duration of the license associated with the component and blocks operation if the license has expired.
    </p>
    <p num="114">
      The methods performed by component loader 206 in spoofing a component are illustrated with reference to FIG. 9.
      <br/>
      The coding of the method steps of the flowchart in FIG. 9 into instructions or objects having analogous method functions suitable for control of the central processing unit of the user's machine will be understood by those having ordinary skill in the art of programming.
      <br/>
      First, component loader 206 registers as the server for all components with registry 250, as illustrated by procedural step 900.
      <br/>
      Component loader 206 next saves information i.e. the initialization information 425, user instruction 445 and key 450, about the component to be utilized, as illustrated by procedural step 902.
      <br/>
      When a container or application utilizes OLE libraries 230 to create a new instance of the component, a new instance of the component loader 206 is created instead, as illustrated by decisional step 904 and procedural step 906.
      <br/>
      Next, component loader 206 uses the persistent data of the component to wrap or spoof the component using OLE Aggregation to create a composite object, as previously described and as illustrated by procedural step 908.
      <br/>
      Next, when a method call to the component is presented to the OLE library 230, component loader 206 detects the method call and selectively determines, based on the component loader's knowledge of the templated component, whether or not the call should be selectively forwarded to the component, as illustrated by decisional steps 910 and 912.
      <br/>
      If component loader 206 determines that the method call may be forwarded to the component, the call is forwarded, as illustrated by procedural step 914.
      <br/>
      Otherwise, component loader 206 determines whether or not the call results should be modified directly, or as returned from the component, as illustrated by decisional block 916.
      <br/>
      If no changes in the behavior of the base component are required, the method call results are returned, as illustrated by the "NO" branch of decisional block 916 and procedural block 920.
      <br/>
      Otherwise, component loader 206 enhances, disables or modifies the results of the method call as illustrated by procedural step 918 prior to returning the call results in procedural step 920, as illustrated.
    </p>
    <p num="115">
      Utilizing the methods and processes outlined above, applications or other entities making method calls to a templated component are actually interacting with the component loader 206 which utilizes the persistent data of the template and the functionality of the base component being spoofed to appear as the templated component.
      <br/>
      For example, a method call to the previously described mortgage calculator component would actually be received by the component loader which then enhances, modifies or changes the behavior of the base spreadsheet component from which the mortgage calculator component was derived.
      <br/>
      Using the state of the modification to the persistent data stored in the template, i.e. the changes which distinguish the behavior of the mortgage calculator from the spreadsheet, enables the component loader to appear as the mortgage calculator even though a mortgage calculator component does not exist on the component.
      <br/>
      In this manner, multiple users having the same base components or their system may receive and utilize templates of customized components.
      <br/>
      The component loader on the recipient system utilizes the template information and the base components to recreate the behavior of the customized components without the necessity to have the complete customized component distributed.
      <br/>
      As previously described, the component loader further facilitates validation of digital signatures and licensing as well.
    </p>
    <p num="116">Source and Recipient Component Systems</p>
    <p num="117">
      To further illustrate the advantages of the inventive component system described herein, the following examples are provided with references to FIG. 2.
      <br/>
      A "source" system, i.e., a component system capable of customizing components and generating distribution packs, has the configuration as illustrated by component system 200 of FIG. 2.
      <br/>
      Template builder 204 is required for a source system to generate distribution pack 208, in the manner previously described.
      <br/>
      The distribution pack 208 may then be distributed to a recipient system, i.e. a component system capable of utilizing the templated components generated by the source system.
      <br/>
      A recipient system has a configuration similar to component system 200 of FIG. 2, except that template builder 204 and template installer 210 are not required to utilize the contents of distribution pack 208.
      <br/>
      In order to fully enjoy the benefits of the templates contained in the distribution pack, the recipient system need only have the component loader 206, template storage DLL 205, and base component(s) 202. Upon receipt of a distribution pack 208 by the recipient system, a template storage file 212 is generated by component loader 206 which, in conjunction with template storage DLL 205, utilizes the templates to spoof the base component 202, as required.
      <br/>
      Templates 212, in conjunction with base component 202 and component loader 206 enable the user of the recipient system to utilize the behavior of the customized templated components without the need to have the actual customized component in its entirety distributed to the recipient system.
    </p>
    <p num="118">
      To further illustrate this concept, the following scenario is provided with reference to the previously described example.
      <br/>
      A base component representing a spreadsheet is assumed to be installed and loaded on both the source component system and the recipient component system.
      <br/>
      A template representing modifications and persistent data to the base spreadsheet component, which modify the spreadsheet behavior into a mortgage calculator component, are generated by the template builder on the source system and distributed to the recipient system in the form of a distribution pack.
      <br/>
      The component loader in the recipient system utilizes the mortgage calculator in the distribution pack in conjunction with the template storage DLL of the recipient system.
      <br/>
      When method calls are received for the mortgage calculator, the component loader utilizes its knowledge of the mortgage calculator in conjunction with the methods of the base spreadsheet component and selectively modifies the behavior of the spreadsheet component in accordance with the template information to recreate the behavior characterized by the mortgage calculator component.
    </p>
    <p num="119">The reader will appreciate that the inventive component system described herein enables the utilization of numerous customized components by creating, formatting and storing only the modifications to those components, i.e. templates which, when combined with the original base components, allows the behavior of the customized component to be realized in an object-oriented environment.</p>
    <p num="120">
      A software implementation of the above described embodiment(s) may comprise a series of computer instructions either fixed on a tangible medium, such as a computer readable media, e.g. diskette 142, CD-ROM 147, ROM 115, or fixed disk 152 of FIG. 1, or transmittable to a computer system, via a modem or other interface device, such as communications adapter 190 connected to the network 195 over a medium 191.
      <br/>
      Medium 191 can be either a tangible medium, including but not limited to optical or analog communications lines, or may be implemented with wireless techniques, including but not limited to microwave, infrared or other transmission techniques.
      <br/>
      The series of computer instructions embodies all or part of the functionality previously described herein with respect to the invention.
      <br/>
      Those skilled in the art will appreciate that such computer instructions can be written in a number of programming languages for use with many computer architectures or operating systems.
      <br/>
      Further, such instructions may be stored using any memory technology, present or future, including, but not limited to, semiconductor, magnetic, optical or other memory devices, or transmitted using any communications technology, present or future, including but not limited to optical, infrared, microwave, or other transmission technologies.
      <br/>
      It is contemplated that such a computer program product may be distributed as a removable media with accompanying printed or electronic documentation, e.g., shrink wrapped software, preloaded with a computer system, e.g., on system ROM or fixed disk, or distributed from a server or electronic bulletin board over a network, e.g., the Internet or World Wide Web.
    </p>
    <p num="121">
      Although various exemplary embodiments of the invention have been disclosed, it will be apparent to those skilled in the art that various changes and modifications can be made which will achieve some of the advantages of the invention without departing from the spirit and scope of the invention.
      <br/>
      It will be obvious to those reasonably skilled in the art that other components performing the same functions may be suitably substituted.
      <br/>
      Further, the methods of the invention may be achieved in either all software implementations, using the appropriate processor instructions, or in hybrid implementations which utilize a combination of hardware logic and software logic to achieve the same results.
      <br/>
      Such modifications to the inventive concept are intended to be covered by the appended claims.
    </p>
    <p num="122">
      --      TABLE 1
      <br/>
      --      Key Name             Description
      <br/>
      --      InProcServer32       full path to component loader
      <br/>
      --      Locx32               full path to OLE control
      <br/>
      --      Vendor ID            identifies the component vendor
      <br/>
      --      Script Status        marks this as a controls that is safely
      <br/>
      --                           scriptable
      <br/>
      --      Initialization Status marks this as a controls that is safely
      <br/>
      --                           initializable from persistent data
    </p>
    <p num="123">
      --      TABLE 2
      <br/>
      --      Key Name           Description
      <br/>
      --      InProcServer32     full path to component loader
      <br/>
      --      Locx32             full path to real OLE control
      <br/>
      --      Vendor ID          identifies the Component Vendor
      <br/>
      --      Template Status    marks this as a Templated Object
      <br/>
      --      Script Status      marks this as a controls that is safely
      <br/>
      --                         scriptable
      <br/>
      --      Initialization Status marks this as a control that is safely
      <br/>
      --                         initializable from persistent data
      <br/>
      --      BaseGUID           the CLSID of the object that this template
      <br/>
      --                         is based on
      <br/>
      --      StorageName        the name of the storage in Template
      <br/>
      --                         Storage file where the initialization data is
      <br/>
      --      Typelib            CLSID of the general type library
    </p>
    <p num="124">
      -- TABLE 3
      <br/>
      -- Data Type     Name                 Size in bytes           Description
      <br/>
      -- DWORD         m_dwSize             4                       size of this
      <br/>
      --  structure
      <br/>
      -- DWORD         m_dwVersion          4                       version number
      <br/>
      --  of this
      <br/>
      --                                                            structure
      <br/>
      -- CLSID         m_CLSID              sizeof(CLSID)           CLSID of this
      <br/>
      --  template
      <br/>
      -- CLSID         m_BaseGUID           sizeof(CLSID)           CLSID of the OCX
      <br/>
      --  being
      <br/>
      --                                                            spoofed (the
      <br/>
      --  base GUID)
      <br/>
      -- OLECHAR       m_oleStorageName     MAX_STORAGENAME*        IStorage name of
      <br/>
      --  the data for
      <br/>
      --                                    sizeof(OLECHAR)         this template
      <br/>
      -- OLECHAR       m_oleDisplayName     MAX_DISPLAYNAME*        User-displayed
      <br/>
      --  name of this
      <br/>
      --                                    sizeof(OLECHAR)         template
      <br/>
      -- DWORD         m_dwRegInfoLength    4                       length of the
      <br/>
      --  registration data
      <br/>
      --                                                            that follows in
      <br/>
      --  OLECHARs
      <br/>
      -- BOOL          m_bShowInstructio    4                       show
      <br/>
      --  instructions
      <br/>
      --               sWhenInserted                                (QuickSteps) for
      <br/>
      --  this template
      <br/>
      --                                                            when inserted?
      <br/>
      -- BOOL          m-bHasGUID           4                       does this
      <br/>
      --  template have a
      <br/>
      --                                                            GUID assigned to
      <br/>
      --  it yet?
      <br/>
      -- OLECHAR       m_oleProgID          MAX_PROGID*             ProgID for the
      <br/>
      --  template
      <br/>
      --                                    sizeof(OLECHAR)         (script name)
      <br/>
      -- CLSID         m_clsidTypelib       sizeof(CLSID)           CLSID for the
      <br/>
      --  type library
      <br/>
      --                                                            created from the
      <br/>
      --  type library
      <br/>
      --                                                            associated with
      <br/>
      --                                                            m_BaseGUID
      <br/>
      -- BOOL          m_bHasTypelibID      4                       has a Typelib
      <br/>
      --  CLSID been
      <br/>
      --                                                            associated yet?
      <br/>
      -- OLECHAR       m-olePassword        MAX-TEMPLATE            Unicode password
      <br/>
      --  for this
      <br/>
      --                                    _PASSWORD*              template (all
      <br/>
      --  Unicode NULL if
      <br/>
      --                                    sizeof(OLECHAR)         no password)
    </p>
    <p num="125">
      -- TABLE 4
      <br/>
      -- Name                           Value   Description
      <br/>
      -- MAX_CLID                       256     maximum size of a CLSID string
      <br/>
      -- MAX_DISPLAYNAME                128     maximum size of a Display name
      <br/>
      --  string
      <br/>
      -- MAX_STORAGENAME                128     maximum size of a Storage name
      <br/>
      --  string
      <br/>
      -- MAX_PROGID                     40      maximum size of a ProgID name string
      <br/>
      --                                        (including NULL)
      <br/>
      -- MAX_TEMPLATE_PASSWORD          32      maximum size of a Password string
      <br/>
      --                                        (including NULL)
    </p>
    <p num="126">
      -- TABLE 5
      <br/>
      -- Data Type     Name                  Size in bytes Description
      <br/>
      -- DWORD         m_dwMagic1            4             a pair5 of magic numbers
      <br/>
      --  to "tag" the file,
      <br/>
      --                                                   value is
      <br/>
      --                                                   ATTACHMENTSIGNATURE_MAGIC
      <br/>
      --  1
      <br/>
      -- DWORD         m_dwMagic2            4             (so as to properly
      <br/>
      --  identify the file as a
      <br/>
      --                                                   TINSTSAR file, value is
      <br/>
      --                                                   ATTACHMENTSIGNATURE_MAGIC
      <br/>
      --  1
      <br/>
      -- DWORD         m_dwSize              4             size of this structure,
      <br/>
      --  value is 196
      <br/>
      -- DWORD         m_dwVersion           4             version of this
      <br/>
      --  structure, value is
      <br/>
      --
      <br/>
      --  ATTACHMENTSIGNATURE_VERSION
      <br/>
      -- DWORD         m_dwNumAttachments    4             the number of
      <br/>
      --  AttachmentDescription
      <br/>
      --                                                   structures that precede
      <br/>
      --  this data
      <br/>
      --                                                   dictionary in the file
      <br/>
      -- OLECHAR       m_szTitle             160           ATTACHMENT_MAXTITLE
      <br/>
      --  Unicode
      <br/>
      --                                                   characters for the title
      <br/>
      --  of this set of
      <br/>
      --                                                   attachments constituting
      <br/>
      --  a Distribution
      <br/>
      --                                                   Pack
      <br/>
      -- BYTE          m_MessageDigest       16
      <br/>
      --  ATTACHMENT_SIGNEDBYTES_SIZE
      <br/>
      --                                                   bytes for an MD5
      <br/>
      --  signature
    </p>
    <p num="127">
      -- TABLE 6
      <br/>
      -- Symbol Name                         Value          Description
      <br/>
      -- ATTACHMENT_MAXTITLE                 80             Maximum size of a title
      <br/>
      --                                                    string including the
      <br/>
      --  NULL
      <br/>
      -- ATTACHMENT_SIGNED BYTES_SIZE        16             Number of bytes in the
      <br/>
      --                                                    MD5 signature block
      <br/>
      -- ATTACHMENTSIGNATURE_MAGIC1          (DWORD)        "magic" value -1 used to
      <br/>
      --                                                    tag the data dictionary
      <br/>
      --  at
      <br/>
      --                                                    the end of a TINSTAR
      <br/>
      --  file
      <br/>
      -- ATTACHMENTSIGNATURE_MAGIC2          (DWORD)        "magic" value -2 used to
      <br/>
      --                                                    tag the data dictionary
      <br/>
      --  at
      <br/>
      --                                                    the end of a Template
      <br/>
      --                                                    Installer file
      <br/>
      -- ATTACHMENTSIGNATURE_VERSION         (DWORD) 1L)    version number for
      <br/>
      --                                                    attachment data
      <br/>
      --  dictionary
    </p>
    <p num="128">
      -- TABLE 7
      <br/>
      -- Data Type     Name           Size in bytes Description
      <br/>
      -- Attachment    m_Type         4             Type of attachment: only values
      <br/>
      --  from the
      <br/>
      -- Type                                       enumeration.
      <br/>
      AttachmentType are
      <br/>
      --  valid.
      <br/>
      --                                            AttachmentType is the attachment
      <br/>
      --  type, and
      <br/>
      --                                            the AttachmentType is an
      <br/>
      --                                            AttachmentDescription describes
      <br/>
      --  the type of
      <br/>
      --                                            attachment, which also implies
      <br/>
      --  the install-time
      <br/>
      --                                            behavior.
      <br/>
      Note that once value
      <br/>
      --  for types are
      <br/>
      --                                            established in this enum, they
      <br/>
      --  must not be
      <br/>
      --                                            changed.
      <br/>
      New types must be added
      <br/>
      --  to the
      <br/>
      --                                            end of the enum list.
      <br/>
      -- DWORD         m_dwFile       4             offset in the file of the
      <br/>
      --  attachment data from
      <br/>
      --               Offset                       the beginning of the file (BOF)
      <br/>
      -- DWORD         m_dwLength     4             length of the attachment in
      <br/>
      --  BYTEs
      <br/>
      -- OLECHAR       m_Name         520           the name of file to detach to,
      <br/>
      --  _MAX_PATH
      <br/>
      --                                            Unicode characters (_MAX_PATH is
      <br/>
      --  defined
      <br/>
      --                                            to be 260)
    </p>
    <p num="129">
      -- TABLE 8
      <br/>
      -- Attachment Type              ID     Description             Installation
      <br/>
      --  Instructions
      <br/>
      -- TEMPLATE                     1      The attachment is an    1.
      <br/>
      Install as a
      <br/>
      --  temporary file.
      <br/>
      -- INSTALLER_FILE                      executable based on     2.
      <br/>
      Create a
      <br/>
      --  process based
      <br/>
      --                                     TEMPLATE                  on that temp
      <br/>
      --  file.
      <br/>
      --                                     INSTALLER.EXE.          3.
      <br/>
      Wait for
      <br/>
      --  that process to
      <br/>
      --                                     Implies that Template     finish
      <br/>
      --  executing and then
      <br/>
      --                                     Installer files can also   delete the
      <br/>
      --  temp file.
      <br/>
      --                                     "recurse"
      <br/>
      -- INSTALLEXE_FILE              2      The attachment is an    1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                     executable: executes, but   directory.
      <br/>
      --                                     does not delete itself  2.
      <br/>
      Create a
      <br/>
      --  process based
      <br/>
      --                                                               on that file.
      <br/>
      -- TAC_BLOCK                    3      a Lotus Terms &amp;     1.
      <br/>
      Register the
      <br/>
      --  CLSID in the
      <br/>
      --                                     Conditions block          T&amp;C block in
      <br/>
      --  the Registry
      <br/>
      --                                                               under the key
      <br/>
      --
      <br/>
      --  HKEY_CURRENT_USE
      <br/>
      --
      <br/>
      --  R.backslash.Software.backslash.Lotus.backslash.LOCX
      <br/>
      -- SIGNATURE_BLOCK              4      a Lotus Signature block obsolete
      <br/>
      -- DOCFILE_FILE                 5      a DocFile (Use          1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                     StgOpenDocfile to open)   directory
      <br/>
      -- TEMPLATE_DOCFILE-FILE        6      a DocFile of Templates  1.
      <br/>
      Detaches
      <br/>
      --  this attachment
      <br/>
      --                                     (Use StgOpenDocfile to    as a temp
      <br/>
      --  file and marks
      <br/>
      --                                     open)                     it for
      <br/>
      --  deletion.
      <br/>
      This file is
      <br/>
      --                                                               created as an
      <br/>
      --  OLE
      <br/>
      --                                                               Structured
      <br/>
      --  Storage
      <br/>
      --                                                               suitable for
      <br/>
      --  use by
      <br/>
      --                                                               Template
      <br/>
      --  Storage DLL,
      <br/>
      --                                                               and is called
      <br/>
      --  a Template
      <br/>
      --                                                               Root Storage.
      <br/>
      --                                                             2.
      <br/>
      Opens the
      <br/>
      --  current
      <br/>
      --                                                               Template Root
      <br/>
      --  Storage
      <br/>
      --                                                               for updating.
      <br/>
      --                                                             3.
      <br/>
      Creates a
      <br/>
      --  progress
      <br/>
      --                                                               window.
      <br/>
      --                                                             4.
      <br/>
      Enumerates
      <br/>
      --  each of the
      <br/>
      --                                                               templates in
      <br/>
      --  the temp file
      <br/>
      --                                                               Template Root
      <br/>
      --  Storage,
      <br/>
      --                                                               performing
      <br/>
      --  steps 5
      <br/>
      --                                                               through 7.
      <br/>
      --                                                             5.
      <br/>
      Updates the
      <br/>
      --  progress
      <br/>
      --                                                               window.
      <br/>
      --                                                             6.
      <br/>
      Checks to
      <br/>
      --  see if the
      <br/>
      --                                                               ProgID or
      <br/>
      --  Template
      <br/>
      --                                                               names are
      <br/>
      --  used before
      <br/>
      --                                                               attempting
      <br/>
      --  install, and
      <br/>
      --                                                               prompts the
      <br/>
      --  user for
      <br/>
      --                                                               overwrite if
      <br/>
      --  they are.
      <br/>
      --                                                             7.
      <br/>
      Installs the
      <br/>
      --  template.
      <br/>
      --                                                             8.
      <br/>
      Deletes the
      <br/>
      --  temp file
      <br/>
      --                                                             9.
      <br/>
      If
      <br/>
      --  instructed to do so by
      <br/>
      --                                                               the presence
      <br/>
      --  of a -D or a
      <br/>
      --                                                               -d on the
      <br/>
      --  command line,
      <br/>
      --                                                               marks the
      <br/>
      --  Distribution
      <br/>
      --                                                               Pack for a
      <br/>
      --  "lazy delete"
      <br/>
      -- BENSTORE_FILE                7      a Bento storage file (Use 1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                     StgOpenBento to open)     directory.
      <br/>
      -- TEMPLATE_BENSTORE_FILE       8      a Bento storage file of 1.
      <br/>
      Install as
      <br/>
      --  per
      <br/>
      --                                     Templates (Use
      <br/>
      --  TEMPLATE_DOCFILE_FILE,
      <br/>
      --                                     StgOpenBento to open)     except use
      <br/>
      --  Bento to
      <br/>
      --                                                               open.
      <br/>
      -- OCX_FILE                     9      a generic OCX           1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory.
      <br/>
      --                                                             2. call
      <br/>
      --  LoadLibrary on it
      <br/>
      --                                                             3. call
      <br/>
      --  DllRegisterServer
      <br/>
      -- DLL_file                     10     a generic DLL           1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory.
      <br/>
      --                                                             2. check to see
      <br/>
      --  if it is self-
      <br/>
      --                                                               registering
      <br/>
      --  (if not, skip all
      <br/>
      --                                                               remaining
      <br/>
      --  steps)
      <br/>
      --                                                             3. call
      <br/>
      --  LoadLibrary on it
      <br/>
      --                                                             4. call
      <br/>
      --  DllRegisterServer.
      <br/>
      -- EXE_FILE                     11     a generic EXE           1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory.
      <br/>
      -- OLE_DLL_FILE                 12     an OLE inproc server    1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory.
      <br/>
      --                                                             2. call
      <br/>
      --  DllRegisterServer
      <br/>
      -- OLE_EXE_FILE                 13     an OLE container or     1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                     server EXE                directory.
      <br/>
      --                                                             2. run with
      <br/>
      --  -Register on
      <br/>
      --                                                               command line.
      <br/>
      -- REG_FILE                     14     a .REG file             1. use the
      <br/>
      --  Registry APIs to
      <br/>
      --                                                               add all
      <br/>
      --  entries in the file
      <br/>
      --                                                               to the
      <br/>
      --  Windows Registry
      <br/>
      -- LC_OCX_FILE                  15     a Lotus components OCX  1.
      <br/>
      Verify the
      <br/>
      --  signature
      <br/>
      --                                                             2.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory.
      <br/>
      --                                                             3. call
      <br/>
      --  LoadLibrary on it
      <br/>
      --                                                             4. call
      <br/>
      --  DllRegisterServer
      <br/>
      -- LC_DLL_FILE                  16     a Lotus components DLL  1.
      <br/>
      Verify the
      <br/>
      --  signature
      <br/>
      --                                                             2.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory
      <br/>
      --                                                             3. check to see
      <br/>
      --  if it is self-
      <br/>
      --                                                               registering
      <br/>
      --  (if not, skip all
      <br/>
      --                                                               remaining
      <br/>
      --  steps)
      <br/>
      --                                                             4. call
      <br/>
      --  LoadLibrary on it
      <br/>
      --                                                             5. call
      <br/>
      --  DllRegisterServer
      <br/>
      -- LC_EXE_FILE                  17     a Lotus components EXE  1.
      <br/>
      Verify the
      <br/>
      --  signature
      <br/>
      --                                                             2.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory
      <br/>
      --                                                             3.
      <br/>
      Create a
      <br/>
      --  process with the
      <br/>
      --                                                               file using
      <br/>
      --  -Register on the
      <br/>
      --                                                               command line
      <br/>
      -- GENERIC_FILE                 18     a generic file          1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory
      <br/>
      -- ARJ_FILE                     19     a file created using ARJ 1. decompress
      <br/>
      --  into the
      <br/>
      --                                     compression               current
      <br/>
      --  directory
      <br/>
      -- ZIP_FILE                     20     a file created using    1. decompress
      <br/>
      --  into the
      <br/>
      --                                     compression               current
      <br/>
      --  directory
      <br/>
      -- LHZ_FILE                     21     a file created using LHZ 1. decompress
      <br/>
      --  into the
      <br/>
      --                                     compression               current
      <br/>
      --  directory
      <br/>
      -- INSTRUCTIONS_BLOCK           22     A Lotus Components      1. display a
      <br/>
      --  dialog with the
      <br/>
      --                                     Distribution Pack         instructions
      <br/>
      --  for this
      <br/>
      --                                     Instructions Block:       distribution
      <br/>
      --  pack
      <br/>
      --                                     1.
      <br/>
      DWORD
      <br/>
      --                                       dwNumChars- number
      <br/>
      --                                       of OLECHARs to
      <br/>
      --                                       follow
      <br/>
      --                                     2.
      <br/>
      OLECHAR�dwNumCha
      <br/>
      --                                       rs� -- UniCode
      <br/>
      --                                       instructions string
      <br/>
      -- TYPELIB_TLB                  23     An OLE TypeLibrary      1.
      <br/>
      Install in
      <br/>
      --  the current
      <br/>
      --                                                               directory
      <br/>
      --                                                             2. register the
      <br/>
      --  .TLB
      <br/>
      -- TYPELIB_ODL                  24     An OLE TypeLibrary      1.
      <br/>
      Install as a
      <br/>
      --  temp file
      <br/>
      --                                     (.ODL)                  2.
      <br/>
      Run mktyplib
      <br/>
      --  on the temp
      <br/>
      --                                                               file to
      <br/>
      --  create a .TLB file in
      <br/>
      --                                                               the current
      <br/>
      --  directory
      <br/>
      --                                                             3.
      <br/>
      Register the
      <br/>
      --  resulting
      <br/>
      --                                                               .TLB
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A computer program product for use with a computer system having a memory, the computer program product comprising a computer usable medium having computer readable program code embodied in the medium for defining templated components, the medium further comprising:</claim-text>
      <claim-text>program code for defining a storage file; program code that loads a base component into the computer system memory and executes the base component; program code that builds at least one template, the template comprising modifications to the base component which modifications are made with the executing base component itself and are executable by an operating system operating on a computer system to customize the base component when executed with the template by the operating system, by examining modifications made to the executing base component by a user and separating the modifications from the base component; program code that formats the modifications into a template format suitable for storage;</claim-text>
      <claim-text>and program code for indexing the template within the storage file.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The computer program product of claim 1 wherein the template comprises: initialization data associated with the template.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The computer program product of claim 2 wherein the template comprises an object and the initialization data for the template comprises a user-defined set of changes to the state of persistent data of the object.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The computer program product of claim 1 wherein the template comprises: user-defined instructions associated with the template.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The computer program product of claim 4 wherein the user-defined instructions comprise at least one Unicode instruction.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The computer program product of claim 2 wherein the template comprises an OLE control.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The computer program product of claim 1 wherein the template comprises: information useful in registering the template with a file system registry of a computer system.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The computer program product of claim 7 wherein the template is derived from an object and the information useful in registering the template comprises: information indicating the path name of the object.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The computer program product of claim 7 wherein the template is loadable by a component loader utility and the information useful in registering the template comprises: information indicating the path name of the component loader utility.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The computer program product of claim 7 wherein the template is an object and the information useful in registering the template comprises: information indicating whether the template is initializable from persistent data.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The computer program product of claim 7 wherein the template is derived from an object and the information useful in registering the template comprises: information indicating a class identifier of the object on which the template is based.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The computer program product of claim 7 wherein the template is an object and the information useful in registering the template comprises: information indicating that the object has been templated.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. An apparatus for storing a plurality of templates in an object-oriented computer system having an operating memory, each template derived from a base component, the apparatus comprising: a. a memory store having one or more locations; b. means for indexing one of the locations within the memory; c. a loader that loads the base component into the operating memory and executes the base component; d. a template builder that examines modifications made to the executing base component by a user using the executing base component itself, separates the modifications from the base component to produce initialization data comprising changes to the state of persistent data of the base component from which the template is derived and that formats the modifications into a template suitable for storage; e. key information associated with the template and stored with the template, the key information useful in registering the template with a file system registry of the computer system;</claim-text>
      <claim-text>and f. means coupling the memory to a central processing unit within the computer system.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A method for generating a template of customizations to a base component with persistent data in an object-oriented computer system having a memory, the base component implemented as an object having a class definition and defined methods, method comprising the steps of: a. loading the base component into the computer system memory and executing the base component; b. examining modifications made to the persistent data of the executing base component by a user using the executing base components itself and separating the modifications from the base component; c. storing as initialization data in an a memory, the modifications to the persistent data of the base component;</claim-text>
      <claim-text>and d. forming a template by associating with the initialization data, an information key useful in registering the template with a file system registry of the object-oriented computer system.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 14 further comprising the step of: c. associating with the initialization data a user-defined instruction related to the template.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 14 wherein the information key comprises: information indicating the path name of the object from which the template was derived.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 14 wherein the information key comprises: information indicating the path name of a component loader utility.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 14 wherein the information key comprises: information indicating whether the template is initializable from persistent data.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 14 wherein the information key comprises: information indicating a class identifier of the object on which the template is based.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of claim 14 wherein the information key comprises: information indicating that the object has been templated.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. A computer data signal embodied in a carrier wave for use with a computer system having a memory, the computer data signal comprising: program code for defining a storage file; program code that loads a base component into the computer system memory and executes the base component; program code that builds at least one template, the template comprising modifications to the base component which modifications are made with the executing base component itself and are executable by an operating system operating on a computer system to customize the base component when executed with the template by the operating system, by examining modifications made to the executing base component by a user and separating the modifications from the base component; program code that formats the modifications into a template format suitable for storage;</claim-text>
      <claim-text>and program code for indexing the template within the storage file.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The computer data signal of claim 21 wherein the template comprises: initilization data associated with the template.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The computer data signal of claim 22 wherein the template comprises an object and the initialization data for the template comprises a user-defined set of changes to the state of persistent data of the object.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The computer data signal of claim 21 wherein the template comprises: user-defined instructions associated with the template.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The computer date signal of claim 24 wherein the user-defined instructions comprise at least one Unicode instruction.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The computer data signal of claim 22 wherein the template comprises an OLE control.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The computer data signal of claim 21 wherein the template comprises: information useful in registering the template with a file system registry of a computer system.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The computer data signal of claim 27 wherein the template is derived from an object and the information useful in registering the template comprises: information indicating the path name of the object.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The computer data signal of claim 27 wherein the template is loadable by a component loader utility and the information useful in registering the template comprises: information indicating the path name of the component loader utility.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The computer data signal of claim 27 wherein the template is an object and the information useful in registering the template comprises: information indicating whether the template is initializable from persistent data.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. The computer data signal of claim 27 wherein the template is derived from an object and the information useful in registering the template comprises: information indicating a class identifier of the object on which the template is based.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The computer data signal of claim 27 wherein the template is an object and the information useful in registering the template comprises: information indicating that the object has been templated.</claim-text>
    </claim>
  </claims>
</questel-patent-document>