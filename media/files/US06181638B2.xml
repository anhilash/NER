<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181638B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181638</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181638</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22767994" extended-family-id="42108239">
      <document-id>
        <country>US</country>
        <doc-number>09206793</doc-number>
        <kind>A</kind>
        <date>19981207</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09206793</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43164645</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>20679398</doc-number>
        <kind>A</kind>
        <date>19981207</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09206793</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  13/42        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>42</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>365233100</text>
        <class>365</class>
        <subclass>233100</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>365233110</text>
        <class>365</class>
        <subclass>233110</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>711104000</text>
        <class>711</class>
        <subclass>104000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>711167000</text>
        <class>711</class>
        <subclass>167000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>713600000</text>
        <class>713</class>
        <subclass>600000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-013/42C3S</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>013</main-group>
        <subgroup>42C3S</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-013/4243</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>4243</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>20</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>5</number-of-figures>
      <image-key data-format="questel">US6181638</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method for receiving data from a synchronous random access memory</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>FINNEY DAMON W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5487092</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5487092</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>JEDDELOH JOE M</text>
          <document-id>
            <country>US</country>
            <doc-number>5909701</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5909701</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>JEDDELOH JOE M</text>
          <document-id>
            <country>US</country>
            <doc-number>5926838</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5926838</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>PROEBSTING ROBERT J</text>
          <document-id>
            <country>US</country>
            <doc-number>6044023</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6044023</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Micron Technology, Inc.</orgname>
            <address>
              <address-1>Boise, ID, US</address-1>
              <city>Boise</city>
              <state>ID</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>MICRON TECHNOLOGY</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Jeddeloh, Joseph M.</name>
            <address>
              <address-1>Minneapolis, MN, US</address-1>
              <city>Minneapolis</city>
              <state>MN</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Park &amp; Vaughan LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Chan, Eddie P.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>GRANTED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      One embodiment of the present invention provides a method for receiving data from a synchronous random access memory.
      <br/>
      This method receives a stream of data along with a data clock signal from the synchronous random access memory.
      <br/>
      This stream of data is alternately clocked into a first memory register and a second memory register using the data clock signal.
      <br/>
      At the same time, data is alternately clocked from the first memory register into a first system register, and from the second memory register into a second system register using a slower-speed system clock.
      <br/>
      These data transfers are coordinated so that data transfers from the synchronous random access memory into the memory registers do not interfere with data transfers from the memory registers into the system registers.
      <br/>
      More specifically, the method ensures that the first memory register is loaded from the synchronous random access memory while the data is being transferred from the second memory register into the second system register.
      <br/>
      On alternate cycles the method ensures that the second memory register is loaded from the synchronous random access memory while data is being transferred from the first memory register into the first system register.
      <br/>
      In a variation on this embodiment, the first and second memory registers are composed of a plurality of separately-clocked data words.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>RELATED APPLICATION</heading>
    <p num="1">
      The subject matter of this application is related to the subject matter in a co-pending non-provisional application by the same inventor(s) as the instant application and filed on the same day as the instant application entitled, "Apparatus for Receiving Data From a Synchronous Random Access Memory," having Ser.
      <br/>
      No. 09/206454, and filing date Dec. 7, 1998.
    </p>
    <heading>BACKGROUND</heading>
    <p num="2">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="3">The present invention relates to memory systems for computers, and more particularly to the design of a memory interface that receives data and a clock signal from a memory during a read operation.</p>
    <p num="4">2. Related Art</p>
    <p num="5">
      As processor speed continually increase, memory systems are under increasing pressure to provide data at faster rates.
      <br/>
      This has recently led to the development of new memory system designs.
      <br/>
      Memory latencies have been dramatically decreased by using page mode and extended data out (EDO) memory designs, which achieve a high burst rate and low latencies within a single page of memory.
      <br/>
      Another recent innovation is to incorporate a synchronous clocked interface into a memory chip, thereby allowing data from within the same page of memory to be clocked out of the memory in a continuous stream.
      <br/>
      Such memory chips, with clocked interfaces are known as synchronous random access memories.
    </p>
    <p num="6">
      Recently, standards such as Rambus and SyncLink have been developed to govern the transfer of data between memory and processor using such clocked interfaces.
      <br/>
      SyncLink, which will be known as IEEE Standard 1596.7, specifies an architecture that supports a 64M-bit memory with a data transfer rate of 1.6 gigabytes per second.
      <br/>
      SyncLink packetizes and pipelines the address, command and timing signals, and adds features that significantly increase data bus speed, thereby providing fast memory accesses without losing the ability to move quickly from row to row or to obtain bursts of data.
    </p>
    <p num="7">
      During read operations, synchronous random access memories return a data clock signal along with the data; this data clock signal is used to clock the data into the processor (or into a memory controller attached to the processor).
      <br/>
      This feature is a significant difference from conventional memory systems, which rely on the system clock to receive data during read operations.
    </p>
    <p num="8">
      Designing an interface that receives a high-speed data clock from a synchronous random access memory during a read operation presents challenges because at some point data returned during a read operation must be transferred from the high speed data clock domain into the slower speed system clock domain.
      <br/>
      This is hard to accomplish because the slower speed circuitry must somehow be able to match the data transfer rate of the high-speed circuitry.
      <br/>
      Additionally, the slower speed circuitry typically requires more setup and hold time for memory elements than is provided by the high-speed circuitry.
    </p>
    <p num="9">What is needed is a system that receives data along with an associated high-speed clock from a memory during a read operation, and that transfers this data into circuitry that is clocked by a slower system clock.</p>
    <heading>SUMMARY</heading>
    <p num="10">
      One embodiment of the present invention provides a method for receiving data from a synchronous random access memory.
      <br/>
      This method receives a stream of data along with a data clock signal from the synchronous random access memory.
      <br/>
      This stream of data is alternately clocked into a first memory register and a second memory register using the data clock signal.
      <br/>
      At the same time, data is alternately clocked from the first memory register into a first system register, and from the second memory register into a second system register using a slower-speed system clock.
      <br/>
      These data transfers are coordinated so that data transfers from the synchronous random access memory into the memory registers do not interfere with data transfers from the memory registers into the system registers.
      <br/>
      More specifically, the method ensures that the first memory register is loaded from the synchronous random access memory while the data is being transferred from the second memory register into the second system register.
      <br/>
      On alternate cycles the method ensures that the second memory register is loaded from the synchronous random access memory while data is being transferred from the first memory register into the first system register.
      <br/>
      In a variation on this embodiment, the first and second memory registers are composed of a plurality of separately-clocked data words.
    </p>
    <heading>BRIEF DESCRIPTION OF THE FIGURES</heading>
    <p num="11">
      FIG. 1 illustrates a computer system including a synchronous random access memory in accordance with an embodiment of the present invention.
      <br/>
      FIG. 2 illustrates a circuit for receiving data and a data clock signal from a synchronous random access memory in accordance with an embodiment of the present invention.
      <br/>
      FIG. 3 is a timing diagram illustrating relationships between control signals in the circuitry illustrated in FIG. 2 in accordance with an embodiment of the present invention.
      <br/>
      FIG. 4 illustrates circuitry for generating the enable or disable signals for the circuitry illustrated in FIG. 2 in accordance with an embodiment of the present invention.
      <br/>
      FIG. 5 is a flow chart illustrating the process of receiving data in the circuitry illustrated in FIG. 2 in accordance with an embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="12">
      The following description is presented to enable any person skilled in the art to make and use the invention, and is provided in the context of a particular application and its requirements.
      <br/>
      Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention.
      <br/>
      Thus, the present invention is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.
    </p>
    <p num="13">Description of Computer System</p>
    <p num="14">
      FIG. 1 illustrates a computer system including a synchronous random access memory in accordance with an embodiment of the present invention.
      <br/>
      The computer system illustrated in FIG. 1 includes processors 112, 114 and 116, which are coupled to processor bus 108.
      <br/>
      Processor 112, 114 and 116 may be any type of general or special purpose processors, including, but not limited to microprocessors, mainframe computers, digital signal processors, graphics processors and device controllers.
      <br/>
      Processor bus 108 may be any type of communication channel for coupling a processor to other devices in a computer system, including peripheral devices, memory devices and other processors.
    </p>
    <p num="15">
      North bridge 102 couples processor bus 108 to synchronous random access memory (synchronous RAM) 104, graphics unit 10 and bus 106.
      <br/>
      As illustrated in FIG. 1, north bridge 102 contains processor interface 126 for communicating with processor bus 108, accelerated graphics port (AGP) 128 for communicating with graphics unit 110, memory interface 122 for communicating with synchronous RAM 104 and bus interface 130 for communicating with bus 106.
      <br/>
      Interfaces 126, 128, 122 and 130 are coupled together through switch 124, which can be any type of switching circuitry that is able to selectively couple together to interfaces 126, 128, 122 and 130.
    </p>
    <p num="16">
      Synchronous RAM 104 may be any type of memory with a clocked interface that returns data with a clock signal for latching the data during read operations.
      <br/>
      This may include memory implementing the SyncLink interface standard.
      <br/>
      In some embodiments, synchronous RAM 104 includes a plurality of banks of memory, each of which includes a plurality of memory chips.
      <br/>
      As illustrated in FIG. 1, synchronous RAM 104 includes interface 105, which interacts with memory interface 122 in north bridge 102 to send data to and from north bridge 102.
    </p>
    <p num="17">
      Graphics unit 110 can include any special-purpose circuitry for performing graphics operations.
      <br/>
      This allows graphics computations to be off-loaded from processors 112, 114 and 116.
    </p>
    <p num="18">
      Bus 106 couples north bridge 102 to south bridge 118.
      <br/>
      Bus 106 may include any type of communication channel for coupling a north bridge 102 to other devices in a computer system, including peripheral devices and memory devices.
      <br/>
      In one embodiment of the present invention, bus 106 is a PCI bus.
    </p>
    <p num="19">
      South bridge 118 includes circuitry for coupling together components of the computer system.
      <br/>
      More, particularly, south bridge 118 couples bus 106 to peripheral bus 120.
      <br/>
      Peripheral bus 120 may be any type of communication channel for coupling a south bridge 118 to other devices in a computer system, including peripheral devices and memory devices.
      <br/>
      In one embodiment of the present invention, peripheral bus 120 is an ISA bus.
    </p>
    <p num="20">
      During operation, the system illustrated in FIG. 1 operates as follows.
      <br/>
      A processor, such as processor 112, performs a read operation.
      <br/>
      This read operation is relayed across processor bus 108 and into memory interface 122 within north bridge 102.
      <br/>
      Memory interface 122 sends a read request to interface 105 within synchronous RAM 104.
      <br/>
      Interface 105 returns data and an associated data clock signal to memory interface 122.
      <br/>
      This data clock signal is used to clock the data into memory interface 122.
      <br/>
      Next, the read operation is completed by transferring data across processor bus 108 to processor 112.
    </p>
    <p num="21">Description of Receiving Circuitry</p>
    <p num="22">
      FIG. 2 illustrates a circuit for receiving data and a data clock signal from a synchronous random access memory in accordance with an embodiment of the present invention.
      <br/>
      This circuit resides within memory interface 122 within north bridge 102 in the system illustrated in FIG. 1.
      <br/>
      The circuit illustrated in FIG. 2 receives data stream 202 and data clock 204 from synchronous RAM 104 from FIG. 1.
      <br/>
      The circuit uses data clock 204 to latch data stream 202 into registers 218 through 232, and then transfers the data into registers 234 and 236, which are clocked by system clock 208.
      <br/>
      The data is then transferred across north bridge 102 and processor bus 108 to the processor that initiated the read operation.
    </p>
    <p num="23">
      More specifically, the illustrated circuit operates in two phases.
      <br/>
      During a first phase, data stream 202 is latched into registers 218, 220, 222, and 224 using data clock 204 in the upper half of the circuit illustrated in FIG. 2, while data from registers 226, 228, 230 and 232 is latched into register 236 using the system clock in the lower half of the circuit.
      <br/>
      During a second phase, data from registers 218, 220, 222 and 224 is latched into register 234 using the system clock, while data stream 202 is latched into registers 226, 228, 230, and 232 using data clock 204.
      <br/>
      By alternating the loading of registers in this way, the slower speed system clock is allowed sufficient set up and hold time to latch data into registers 234 and 236.
    </p>
    <p num="24">
      Note that in loading registers 218, 220, 222 and 224 during the first phase, data stream 202 first passes through registers 210 and 212.
      <br/>
      More specifically, data from register 210 passes into registers 218 and 222, and data from register 212 passes into registers 220 and 224.
      <br/>
      Note that registers 210, 218 and 222 are triggered by the rising edge of data clock 204, and registers 212, 220 and 224 are triggered by the falling edge of data clock 204.
      <br/>
      During the loading process, registers 218, 220, 222 and 224 are selectively enabled by enable signals 238, 240, 242 and 244, so that corresponding registers 218, 220, 222 and 224 are loaded in sequential order.
      <br/>
      The above discussion within this paragraph also applies to loading registers 226, 228, 230 and 232 during the second phase, so this discussion will not be repeated.
    </p>
    <p num="25">
      System clock 208 triggers both registers 234 and 236.
      <br/>
      These registers are selectively enabled by enable signals 254 and 256 so that register 236 loads during the first phase and register 234 loads during the second phase.
    </p>
    <p num="26">
      In the circuit illustrated in FIG. 1, data clock 204 is twice as fast as system clock 208.
      <br/>
      Since data is loaded on both rising and falling edges of data clock 204, the effective data clock rate is four times as fast.
      <br/>
      For example, system clock 208 might run at 100 MHz while data clock 204 runs at 200 MHz.
      <br/>
      At 200 MHz, there are 2.5 nanoseconds between rising and falling edges of data clock 204.
      <br/>
      To accommodate this difference in speed, registers 234 and 236 are four times wider than registers 218 through 232.
      <br/>
      For example, registers 234 and 236 might be 128 bits in size while registers 218 through 232 are 32 bits in size.
    </p>
    <p num="27">
      Note that the circuit illustrated in FIG. 1 can be expanded to provide for different ratios between the speeds of data clock 204 and system clock 208.
      <br/>
      For example, if data clock 204 increases to four times the speed of system clock 208, the system can be expanded in two ways.
      <br/>
      Registers 234 and 236 can be doubled in size to 256 bits so that they each accommodate data from eight 32-bit registers.
      <br/>
      Alternatively, the upper and lower halves of the circuit illustrated in FIG. 2 can be expanded into four units so that four 128-bit registers are each fed by four 32-bit registers.
    </p>
    <p num="28">Description of Timing Relationships Between Control Signals</p>
    <p num="29">
      FIG. 3 is a timing diagram illustrating relationships between control signals in the circuitry illustrated in FIG. 2 in accordance with an embodiment of the present invention.
      <br/>
      Recall that the enable signals feeding into the various registers of FIG. 2 control the sequencing of data through the circuit illustrated in FIG. 2.
      <br/>
      The circuitry that generates the enable signals receives data stream 202 along with data clock 204.
      <br/>
      As illustrated in FIG. 3, data clock 204 is aligned so that it captures the stable regions in data stream 202.
    </p>
    <p num="30">
      Immediately below data stream 202 and data clock 204 are four enable signals, en0, en1, en2 and en3.
      <br/>
      Referring the FIG. 2, these enable signals correspond to enable signals 238, 240, 242 and 244, which latch data stream 202 into registers 218, 220, 222 and 224, respectively, during the first phase.
      <br/>
      These enable signals additionally correspond to enable signals 246, 248, 250 and 252, which latch data stream 202 into registers 226, 228, 230 and 232, respectively, during the second phase.
    </p>
    <p num="31">
      Enable signals en0, en1, en2 and en3 are generated so that they latch successive data words from data stream 202 into registers 218, 220, 222 and 224.
      <br/>
      To this end, en0 is centered on a rising edge of data clock 204; en1 is centered on the next falling edge; en2 is centered on the next rising edge; and e3 is centered on the next falling edge.
    </p>
    <p num="32">
      Alternatively, the system can work with disable signals.
      <br/>
      When disable signals are used, registers, such as registers 218 through 232 from FIG. 2, continually latch new data until they are disabled.
      <br/>
      The advantage of using a disable signal is that it can be generated after the data has been latched into the register by the clock signal.
      <br/>
      This gives the circuitry time to generate a disable signal in response to a clock signal.
      <br/>
      Otherwise, a complicated system of delays is required to generate an enable signal in response to a change in data clock 204, and to then use the enable signal to enable a register to be latched by the change in data clock 204.
    </p>
    <p num="33">To this end, dis0 disables a first register after a rising edge in data clock 204; dis1 disables a second register after the next falling edge, dis2 disables a third register after the next rising edge, and dis3 does not need to perform any disabling.</p>
    <p num="34">
      Not shown in FIG. 3 is what happens to enable and disable signals during alternate phases of the data transfer process.
      <br/>
      During an alternate phase, the contents of registers 218, 220, 222 and 224 remain unchanged while data is being transferred to register 234.
      <br/>
      For the registers to remain unchanged, enable signals en0, en1, en2 and en3 must remain at an unasserted level, whereas disable signals dis0, dis1, dis2 and dis3 must remain at an asserted level.
    </p>
    <p num="35">Description of Circuit for Generating Enable or Disable Signals</p>
    <p num="36">
      FIG. 4 illustrates circuitry for generating the enable or disable signals for the circuit illustrated in FIG. 2 in accordance with an embodiment of the present invention.
      <br/>
      The circuitry illustrated in FIG. 4 moves data clock 204 through a chain of D flip-flops to generate the sequence of enable and disable signals illustrated in FIG. 3.
      <br/>
      More specifically, data clock 204 feeds through delay element 402 and AND-gate 404 into the input of D-flip-flop (DFF) 406, which is clocked by the falling edge of data clock 204.
      <br/>
      The output of DFF 406 feeds into the input of DFF 408, which is clocked by the rising edge of data clock 204.
      <br/>
      The output of DFF 408 feeds into the input of DFF 410, which is clocked by the falling edge of data clock 204.
      <br/>
      Finally, the output of DFF 410 feeds into the input of DFF 412, which is clocked by the rising edge of data clock 204.
    </p>
    <p num="37">
      AND-gate 404 takes in two additional inputs from the inverse outputs of DFF 408 and DFF 412.
      <br/>
      This ensures that only a single pulse at a time is propagated through DFFs 406, 408, 410 and 412.
      <br/>
      Finally, the outputs of DFFs 406, 408, 410 and 412 are used as enable signals en0, en1, en2 and en3, respectively.
    </p>
    <p num="38">
      Referring to FIG. 3, disable signals dis0, dis1, dis2 and dis3 are formed by ORing together enable signals en1, en2 and en3.
      <br/>
      More specifically, dis0 is generated by passing en1, en2 and en3 through OR-gate 414, dis1 is generated by passing en2 and en3 through OR-gate 416, dis2 is the same as en3, and dis3 remains unasserted.
    </p>
    <p num="39">Note that the above enable and disable signals can be ANDed or ORed (not shown) with enable signals 254 and 256 from FIG. 2, so that enable signals en0, en1, en2 and en3 remain at an unasserted level during alternate phases, and so that disable signals dis0, dis1, dis2 and dis3 remain at an asserted level during alternate phases.</p>
    <p num="40">Description of Process of Receiving Data</p>
    <p num="41">
      FIG. 5 is a flow chart illustrating the process of receiving data in the circuitry illustrated in FIG. 2 in accordance with an embodiment of the present invention.
      <br/>
      The system starts by sending a read request to synchronous RAM 104 in FIG. 1 (state 502).
      <br/>
      The system next receives data stream 202 and data clock 204 when they are returned from synchronous RAM 104 (state 504).
    </p>
    <p num="42">
      Next, the system enters a first phase where data stream 202 is clocked into a first memory register using data clock 204, while the contents of a second memory register is clocked into a second system register using system clock 208 (state 506).
      <br/>
      In FIG. 2, this corresponds to data stream 202 being clocked into registers 218, 220, 222 and 224 (which correspond to the first memory register), while data is being clocked from registers 226, 228, 230 and 232 (which correspond the second memory register) into register 236 (which corresponds to the second system register).
    </p>
    <p num="43">
      Next, the system enters a second phase where data stream 202 is clocked into a second memory register using data clock 204, while the contents of the first memory register is clocked into a first system register using system clock 208 (state 508).
      <br/>
      In FIG. 2, this corresponds to data stream 202 being clocked into registers 226, 228, 230 and 232 (which correspond to the first memory register), while data is being clocked from registers 218, 220, 222 and 224 (which correspond the first memory register) into register 234 (which corresponds to the first system register).
      <br/>
      The above states 506 and 508 are repeated until the read operation is complete.
    </p>
    <p num="44">
      The foregoing descriptions of embodiments of the invention have been presented for purposes of illustration and description only.
      <br/>
      They are not intended to be exhaustive or to limit the invention to the forms disclosed.
      <br/>
      Accordingly, many modifications and variations will be apparent to practitioners skilled in the art.
      <br/>
      Additionally, the above disclosure is not intended to limit the invention.
      <br/>
      The scope of the invention is defined by the appended claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for receiving data from a synchronous random access memory, comprising:</claim-text>
      <claim-text>receiving a stream of data from the synchronous random access memory; receiving a data clock signal from the synchronous random access memory for clocking the stream of data; clocking the stream of data into a first memory register using the data clock signal; clocking the stream of data into a second memory register using the data clock signal; clocking a contents of the first memory register into a first system register using a system clock signal while the stream of data is being clocked into the second memory register, the system clock signal being slower than the data clock signal;</claim-text>
      <claim-text>and clocking a contents of the second memory register into a second system register using the system clock signal.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1, wherein the first memory register includes a plurality of separately-clocked data words, and clocking the stream of data into the first memory register involves sequentially clocking the stream of data into successive words in the plurality of separately-clocked data words.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 2, wherein the plurality of separately-clocked data words are coupled to a plurality of word enable signals that work in concert with the data clock signal to provide the sequential clocking, the plurality of word enable signals being generated by a shift register.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 2, wherein the plurality of separately-clocked data words are coupled to a plurality of word disable signals that work in concert with the data clock signal to provide the sequential clocking, the plurality of word disable signals being generated in response to changes in the data clock signal.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 2, wherein the act of sequentially clocking the stream of data into successive words includes clocking successive words on alternating rising and falling edges of the data clock signal.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 1, wherein clocking the stream of data into the first memory register includes using both rising and falling edges of the data clock signal to clock the first memory register.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 1, wherein receiving the stream of data from the synchronous random access memory includes receiving the stream of data from a random access memory adhering to the SyncLink interface standard.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 1, wherein the act of receiving the stream of data includes receiving the stream of data at a memory controller coupled to a processor.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method of claim 1, wherein the act of receiving the stream of data includes receiving the stream of data at a processor.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 1, further comprising: clocking the stream of data into a third memory register using the data clock signal; clocking the stream of data into a fourth memory register using the data clock signal; clocking a contents of the third memory register into a third system register using the system clock signal while the stream of data is being clocked into the fourth memory register;</claim-text>
      <claim-text>and clocking a contents of the fourth memory register into a fourth system register using the system clock signal; wherein the act of clocking a contents of the second memory register into the second system register occurs while the stream of data is being clocked into the third memory register.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 1, further comprising calibrating a skew between the stream of data and the data clock signal by sending configuration information to the synchronous random access memory.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method of claim 1, further comprising transmitting a stream of data to the synchronous random access memory.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A method for receiving data from a synchronous random access memory, comprising: receiving a stream of data from the synchronous random access memory, which adheres to the SyncLink interface standard; receiving a data clock signal from the synchronous random access memory for clocking the stream of data; clocking the stream of data into a first memory register using the data clock signal, wherein the first memory register includes a plurality of separately-clocked data words, and clocking the stream of data into the first memory register involves sequentially clocking the stream of data into successive words in the plurality of separately-clocked data words, the plurality of separately-clocked data words being coupled to a plurality of word enable/disable signals that work in concert with the data clock signal to provide the sequential clocking; clocking the stream of data into a second memory register using the data clock signal; clocking a contents of the first memory register into a first system register using a system clock signal while the stream of data is being clocked into the second memory register, the system clock signal being slower than the data clock signal and being generated outside the synchronous random access memory;</claim-text>
      <claim-text>and clocking a contents of the second memory register into a second system register using the system clock signal.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 13, wherein the act of sequentially clocking the stream of data into successive words includes clocking successive words on alternating rising and falling edges of the data clock signal.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 13, wherein clocking the stream of data into the first memory register includes using both rising and falling edges of the data clock signal to clock the first memory register.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 13, wherein the act of receiving the stream of data includes receiving the stream of data at a memory controller coupled to a processor.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 13, wherein the act of receiving the stream of data includes receiving the stream of data at a processor.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 13, further comprising: clocking the stream of data into a third memory register using the data clock signal; clocking the stream of data into a fourth memory register using the data clock signal; clocking a contents of the third memory register into a third system register using the system clock signal while the stream of data is being clocked into the fourth memory register;</claim-text>
      <claim-text>and clocking a contents of the fourth memory register into a fourth system register using the system clock signal; wherein the act of clocking a contents of the second memory register into the second system register occurs while the stream of data is being clocked into the third memory register.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 13, further comprising calibrating a skew between the stream of data and the data clock signal by sending configuration information to the synchronous random access memory.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of claim 13, further comprising transmitting a stream of data to the synchronous random access memory.</claim-text>
    </claim>
  </claims>
</questel-patent-document>