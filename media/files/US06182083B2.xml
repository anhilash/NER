<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182083B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182083</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182083</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26722049" extended-family-id="1281087">
      <document-id>
        <country>US</country>
        <doc-number>09044835</doc-number>
        <kind>A</kind>
        <date>19980320</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09044835</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43112175</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>4483598</doc-number>
        <kind>A</kind>
        <date>19980320</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09044835</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>97152997</doc-number>
        <kind>A</kind>
        <date>19971117</date>
        <priority-linkage-type>2</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-08971529</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/30        20060101A I20070721RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20070721</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   9/445       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>445</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F   9/46        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>46</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F   9/50        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>50</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>G06F  12/02        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>02</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>H04L  12/417       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>417</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="7">
        <text>H04L  29/06        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <further-classification sequence="1">
        <text>707999001</text>
        <class>707</class>
        <subclass>999001</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707999103</text>
        <class>707</class>
        <subclass>999103</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30607</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30607</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/4411</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>4411</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/465</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>465</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/52</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>52</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/547</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>547</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/0261</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>0261</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-029/06</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-069/24</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>69</main-group>
        <subgroup>24</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131017</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99931</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99931</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="10">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99944</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99944</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>23</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>18</number-of-drawing-sheets>
      <number-of-figures>21</number-of-figures>
      <image-key data-format="questel">US6182083</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and system for multi-entry and multi-template matching in a database</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>WURST WOLFGANG, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5832593</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5832593</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>KRIENS PETER, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5864862</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5864862</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>LEWIS LUNDY, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5872928</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5872928</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>WALDO JAMES H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6016500</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6016500</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>ARNOLD KENNETH C R C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6032151</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6032151</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>ELLIS JOHN R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5088036</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5088036</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>SKEEN MARION D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5187787</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5187787</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>SKEEN MARION D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5257369</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5257369</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>FERGUSON EDWARD E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5293614</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5293614</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>SKEEN MARION D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5557798</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5557798</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>NILSEN KELVIN D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5560003</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5560003</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>BLANDY GEOFFREY O, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5561785</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5561785</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>WHITE JAMES E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5603031</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5603031</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>RICHMAN DARRYL STEVEN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5655148</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5655148</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>HENINGER ANDREW G</text>
          <document-id>
            <country>US</country>
            <doc-number>5659751</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5659751</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>Georg Gottlob et al., "Extending Object-Oriented Systems with Roles," ACM Transactions on Information systems, vol. 14, No. 3, pp. 268-296 (Jul. 1996).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Elisa Bertino et al., "Object-Oriented Database Management Systems: Concepts and Issues," Computer, vol. 24, No. 4, pp. 33-47, (Apr. 1991), Los Alamitos, CA.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>David Beech et al., "Object Databases as Generalizations of Relational Databases," Computer Standards &amp; Interfaces, vol. 13, Nos. 1/3, pp. 221-230, (1991) Amsterdam, NL.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>O. Deux et al., "The 02 System," Communications of the ACM, vol. 34, No. 10, pp. 34-48, (Oct. 1991), New York.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>Michael H. Kay et al., "An Overview of the Raleigh Object-Oriented Database System," ICL Technical Journal, vol. 7, No. 4, pp. 780-798, (Nov. 1991), Oxford, GB.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>Xuequn WU, "A Type system for an Object-Oriented Database System," Proceedings of the International Computer Software and Applications Conference (COMPSAC), pp. 333-338, Sep. 11-13, 1991, Tokyo, Japan.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="7">
          <text>Mullender, Distributed Systems, Second Edition, Addison-Wesley, 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="8">
          <text>Howard et al., Scale and Performance in a Distributed File System, ACM Transaction on Computer Systems, vol. 6, No. 1, Feb. 1988, pp. 51-81.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="9">
          <text>Cardelli, Obliq, A lightweight language for network objects, Nov. 5, 1993, pp. 1-37.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="10">
          <text>Dijkstra, Self-stabilizing Systems in Spite of Distributed Control, Communications of the ACM, vol. 17, No. 11, Nov. 1974, pp. 643-644.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="11">
          <text>Ousterhout et al., The Sprite Network Operating System, Computer, IEEE, Feb. 1988, pp. 23-36.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="12">
          <text>Dourish, A Divergence-Based Model of Synchrony and Distribution in Collaborative Systems, Xerox Technical Report EPC-1194-102, 1994, pp. 1-10.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="13">
          <text>Sharrott et al., ObjectMap: Integrating High Performance Resources into a Distributed Object-oriented Environment, ICODP, 1995.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="14">
          <text>Birrell et al., Grapevine: An Exercise in Distributed Computing, Communications of the ACM, vol. 25, No. 4, Apr. 1982, pp. 260-274.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="15">
          <text>Transparent Network Computing, Locus Computing Corporation, Jan. 5, 1995.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="16">
          <text>Gray et al., Leases: An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency, ACM, 1989, pp. 202-210.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="17">
          <text>Lamport et al., The Byzantine Generals Problem, ACM Transactions on Programming Languages and Systems, vol. 4, No. 3, Jul. 1982, pp. 382-401.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="18">
          <text>Dolev et al., On the Minimal Synchronism Needed for Distributed Consensus, Journal of the ACM, vol. 34, No. 1, Jan. 1987, pp. 77-97.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="19">
          <text>Mummert et al., Long Term Distributed File Reference Tracing: Implementation and Experience, Carnegie Mellon University School of Computer Science, Nov. 1994, pp. 1-28.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="20">
          <text>Gelernter et al., Parallel Programming in Linda, Yale University, Jan. 1985, pp. 1-21.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="21">
          <text>Cannon et al., Adding Fault-Tolerant Transaction Processing to Linda, Software-Practice and Experience, vol. 24(5), May 1994, pp. 449-466.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="22">
          <text>Kambhatla et al., Recovery with Limited Replay: Fault-Tolerant Processes in Linda, Oregon Graduate Institute, Technical Report CSIE 90-019, Sep. 1990, pp. 1-16.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="23">
          <text>Anderson et al., Persistent Linda: Linda + Transactions + Query Processing, Proceedings of the 13th Symposium on Fault Tolerant Systems, 1994, pp. 93-109.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="24">
          <text>Gelernter, Generative Communication in Linda, ACM Transactions on Programming Languages and Systems, vol. 7, No. 1, Jan. 1985, pp. 80-112.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="25">
          <text>Carriero et al., Distributed Data Structures in Linda, Principals of Programming Language, 1986, pp. 1-16.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="26">
          <text>Pinakis, Using Linda as the Basis of an Operating System Microkernel, University of Western Australia, Department of Computer Science, Aug. 1993, pp. 1-165.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="27">
          <text>Linda Database Search, Jul. 20, 1995, pp. 1-68.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="28">
          <text>Carriero et al, Distributed Data Structures in Linda, Yale Research Report YALEU/DCS/RR-438, Nov. 1985.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="29">
          <text>Agha et al., Actorspaces: An Open Distributed Programming Paradigm, University of Illinois, Report No. UIUCDCS-R-92-1766, Open Systems Laboratory TR No. 8, Nov. 1992, pp. 1-12.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="30">
          <text>Ahmed et al., A Program Building Tool for Parallel Applications, Yale University, Dec. 1, 1993, pp. 1-23.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="31">
          <text>Liskov et al., Distributed Object Management in Thor, International Workshop on Distributed Object Management, 1992, pp. 12.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="32">
          <text>Coulouris et al., Distributed Systems Concepts and Designs, Second Edition, Addison-Wesley, 1994.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="33">
          <text>Birrell et al., Network Objects, DEC SRC Research Report 115, Feb. 28, 1994.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="34">
          <text>Birrell et al., Distributed Garbage Collection for Network Objects, DEC SRC Research Report 116, Dec. 15, 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="35">
          <text>Jaworski, Java 1.1 Developer's Guide, Sams.net, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="36">
          <text>Wollrath et al., A Distributed Object Model for the Java(TM) System, USENIX Association, Conference on Object-Oriented Technologies and Systems, Jun. 17-21, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="37">
          <text>Harris et al., Proposal for a General Java Proxy Class for Distributed Systems and Other Uses, Netscape Communications Corp., Jun. 25, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="38">
          <text>Hamilton, Java and the Shift to Net-Centric Computing Computer, Aug. 1996, pp. 31-39.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="39">
          <text>Chung et al., A "Tiny' Pascal Compiler: Part 1: The P-Code Interpreter, BYTE Publications, Inc., Sep. 1978.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="40">
          <text>Chung et al., A "Tiny' Pascal Compiler: Part 2: The P-Compiler, BYTE Publications, Inc., Oct. 1978.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="41">
          <text>Thompson, Regular Expression Search Algorithm, Communications of the ACM, vol. II, No. 6, p. 149 et seq., Jun. 1968.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="42">
          <text>Mitchell et al., Mesa Language Manual, Xerox Corporation.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="43">
          <text>McDaniel, An Analysis of a Mesa Instruction Set, Xerox Corporation, May 1982.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="44">
          <text>Pier, A Retrospective on the Dorado, A High-Performance Personal Computer, Xerox Corporation, Aug. 1983.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="45">
          <text>Pier, A Retrospective on the Dorado, A High-Performance Personal Computer, IEEE Conference Proceedings, The 10th Annual international Symposium on Computer Architecture, 1983.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="46">
          <text>Krasner, The Smalltalk-80 Virtual Machine, BYTE Publications Inc., Aug. 1991, pp. 300-320.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="47">
          <text>Operating Systems Review, ACM Press, vol. 27, No. 5, Dec. 1993, pp. 217-230.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="48">
          <text>Remote Method Invocation Specification, Sun Microsystems, Inc., (1997), http://java.sun.com/products/jdk/1.1/docs/guide/rmi/spec/rmiTOC.doc.html.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation-in-part>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>97152997</doc-number>
              <kind>A</kind>
              <date>19971117</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>6032151</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </continuation-in-part>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/076,048</doc-number>
          <date>19980226</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Sun Microsystems, Inc.</orgname>
            <address>
              <address-1>Palo Alto, CA, US</address-1>
              <city>Palo Alto</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>SUN MICROSYSTEMS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Scheifler, Robert W.</name>
            <address>
              <address-1>Somerville, MA, US</address-1>
              <city>Somerville</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Arnold, Kenneth C. R. C.</name>
            <address>
              <address-1>Lexington, MA, US</address-1>
              <city>Lexington</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Waldo, James H.</name>
            <address>
              <address-1>Dracut, MA, US</address-1>
              <city>Dracut</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Finnegan, Henderson Farabow, Garrett and Dunner, L.L.P.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Alam, Hosain T.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A database system wherein one or more entry databases store a plurality of entries.
      <br/>
      Each entry is of a given type that defines the fields of the entry.
      <br/>
      Each field contains or identifies an object with associated attributes or data.
      <br/>
      The type of each entry may further define behavior in the form of methods the entry can implement.
      <br/>
      An entry type which is a subtype of another inherits all fields and behavior of its super-type, and contains additional fields and/or defines new/modified behavior.
      <br/>
      Entries may be expressed in a Java(TM) programming language.
      <br/>
      The database system may further employ a search engine which allows queries to be made upon entries in the database.
      <br/>
      In one implementation, the queries include a read operation, a take operation, and a notify operation.
      <br/>
      Each query request includes a command indicating the type of operation, and a template which is an entry object having some or all of its fields set to specific values that must be matched exactly.
      <br/>
      Other fields of the template entry may be specified as wildcards, whose values do not matter.
      <br/>
      The search engine may further be configured to create an index for caching entries having characteristics which are commonly specified by queries.
      <br/>
      In one implementation, the databases may also store sets of entries which are matched using sets of templates.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>RELATED APPLICATIONS</heading>
    <p num="1">
      This application is a Continuation-In-Part of U.S. application Ser.
      <br/>
      No. 08/971,529 filed on Nov. 17, 1997, U.S. Pat. No. 6,032,151, which is incorporated herein by reference.
    </p>
    <p num="2">The following identified U.S. patent applications are relied upon and are incorporated by reference in this application.</p>
    <p num="3">Provisional U.S. Patent Application No. 60/076,048, entitled "Distributed Computing System," filed on Feb. 26, 1998.</p>
    <p num="4">
      U.S. patent application Ser.
      <br/>
      No. 09/044,923, entitled "Method and System for Leasing Storage," filed on the same date herewith.
    </p>
    <p num="5">
      U.S. patent application Ser.
      <br/>
      No. 09/044,838, entitled "Method, Apparatus, and Product for Leasing of Delegation Certificates in a Distributed System," filed on the same date herewith.
    </p>
    <p num="6">
      U.S. patent application Ser.
      <br/>
      No. 09/044,834, entitled "Method, Apparatus and Product for Leasing of Group Membership in a Distributed System," filed on the same date herewith.
    </p>
    <p num="7">
      U.S. patent application Ser.
      <br/>
      No. 09/044,916, entitled "Leasing for Failure Detection," filed on the same date herewith.
    </p>
    <p num="8">
      U.S. patent application Ser.
      <br/>
      No. 09/044,933, entitled "Method for Transporting Behavior in Event Based System," filed on the same date herewith.
    </p>
    <p num="9">
      U.S. patent application Ser.
      <br/>
      No. 09/044,919, entitled "Deferred Reconstruction of Objects and Remote Loading for Event Notification in a Distributed System," filed on the same date herewith.
    </p>
    <p num="10">
      U.S. patent application Ser.
      <br/>
      No. 09/044,938, entitled "Methods and Apparatus for Remote Method Invocation," filed on the same date herewith.
    </p>
    <p num="11">
      U.S. patent application Ser.
      <br/>
      No. 09/045,652, entitled "Method and System for Deterministic Hashes to Identify Remote Methods," filed on the same date herewith.
    </p>
    <p num="12">
      U.S. patent application Ser.
      <br/>
      No. 09/044,790, entitled "Method and Apparatus for Determining Status of Remote Objects in a Distributed System," filed on the same date herewith.
    </p>
    <p num="13">
      U.S. patent application Ser.
      <br/>
      No. 09/044,930, entitled "Downloadable Smart Proxies for Performing Processing Associated with a Remote Procedure Call in a Distributed System," filed on the same date herewith.
    </p>
    <p num="14">
      U.S. patent application Ser.
      <br/>
      No. 09/044,917, entitled "Suspension and Continuation of Remote Methods," filed on the same date herewith.
    </p>
    <p num="15">
      U.S. patent application Ser.
      <br/>
      No. 09/044,839, entitled "Method and System for In-Place Modifications in a Database," filed on the same date herewith.
    </p>
    <p num="16">
      U.S. patent application Ser.
      <br/>
      No. 09/044,945, entitled "Method and System for Typesafe Attribute Matching in a Database," filed on the same date herewith.
    </p>
    <p num="17">
      U.S. patent application Ser.
      <br/>
      No. 09/044,931, entitled "Dynamic Lookup Service in a Distributed System," filed on the same date herewith.
    </p>
    <p num="18">
      U.S. patent application Ser.
      <br/>
      No. 09/044,939, entitled "Apparatus and Method for Providing Downloadable Code for Use in Communicating with a Device in a Distributed System," filed on the same date herewith.
    </p>
    <p num="19">
      U.S. patent application Ser.
      <br/>
      No. 09/044,826, entitled "Method and System for Facilitating Access to a Lookup Service," filed on the same date herewith.
    </p>
    <p num="20">
      U.S. patent application Ser.
      <br/>
      No. 09/044,932, entitled "Apparatus and Method for Dynamically Verifying Information in a Distributed System," filed on the same date herewith.
    </p>
    <p num="21">
      U.S. patent application Ser.
      <br/>
      No. 09/030,840, entitled "Method and Apparatus for Dynamic Distributed Computing Over a Network," and filed on Feb. 26, 1998.
    </p>
    <p num="22">
      U.S. patent application Ser.
      <br/>
      No. 09/044,938, entitled "An Interactive Design Tool for Persistent Shared Memory Spaces," filed on the same date herewith.
    </p>
    <p num="23">
      U.S. patent application Ser.
      <br/>
      No. 09/044,934, entitled "Polymorphic Token-Based Control," filed on the same date herewith.
    </p>
    <p num="24">
      U.S. patent application Ser.
      <br/>
      No. 09/044,915, entitled "Stack-Based Access Control," filed on the same date herewith.
    </p>
    <p num="25">
      U.S. patent application Ser.
      <br/>
      No. 09/044,944, entitled "Stack-Based Security Requirements," filed on the same date herewith.
    </p>
    <p num="26">
      U.S. patent application Ser.
      <br/>
      No. 09/044,837, entitled "Per-Method Designation of Security Requirements," filed on the same date herewith.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="27">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="28">
      This invention relates to database systems and, more particularly, to entry storage in database systems.
      <br/>
      The invention also relates to query matching methodologies employed in database systems.
    </p>
    <p num="29">2. Description of the Related Art</p>
    <p num="30">
      Database systems are serving increasingly important roles in today's society.
      <br/>
      The amount of data that may be stored by typical database systems is growing at staggering rates, and providing expedient and flexible access to the data is often vital.
      <br/>
      However, the job of designing database systems which perform in an optimal manner is difficult.
    </p>
    <p num="31">
      A particularly important consideration in database design is to store the data so that it can be used for a wide variety of applications and such that the manner in which it may be used can be changed quickly and easily.
      <br/>
      It is further often desirable to allow additional data types or categories to be added without significantly affecting other portions of the database system.
    </p>
    <p num="32">
      Unfortunately, it is remarkably difficult to change the way data is used and organized in many database systems, and to allow for additional data types and categories.
      <br/>
      Modifications can set off a chain reaction of changes to programs and other components of the database system, and hence can be exceedingly expensive to accomplish.
      <br/>
      Consequently, data processing has tended to become frozen into its old data structures.
      <br/>
      Additionally, designers of database systems tend to make numerous intricate trade-offs between one aspect of the design and another, thus leading to a less than optimal resulting design.
    </p>
    <p num="33">
      To elaborate further, storing information in a database system is usually done by exact type; that is, a record stored in a database system typically has a certain number and type of fields, such as a tuple in a relation of a relational database.
      <br/>
      Each field may be defined to store a particular type of data, such as string data, integer data, boolean data, or some other data type, as desired.
      <br/>
      If a user wants to look-up information in the database, the user must look-up the exact record type (i.e., records of different types are typically searched independently).
      <br/>
      Thus, if data in which the searcher is interested may be in a record of any one of several different types, the searcher must know in advance which record types might exist, or have some explicit way of asking for all types.
      <br/>
      The searcher is then required to explicitly look through all possible record types to find the particular record of interest.
      <br/>
      This complicates the software associated with the search engine and can practically limit the number of different record types that can be maintained.
    </p>
    <p num="34">
      Furthermore, fields in a record in a database typically do not refer to other records.
      <br/>
      This reduces the amount and kind of information a single record typically holds.
      <br/>
      Consequently, databases are limited by their inability to store and manipulate records that are sets of records.
    </p>
    <p num="35">
      In addition, a record in a typical database is usually not associated with characteristics apart from the actual data itself.
      <br/>
      For example, when data is found, there is no way to associate behavior with the record that changes with the record type, thus allowing the program to use various records returned by the match in a single way to achieve record-type specific results.
    </p>
    <p num="36">
      Regarding another aspect of database systems, the usual way of specifying attributes or properties in a database is by a simple set of &lt;name, value&gt; pairs, where the values are either restricted to strings or else are of arbitrary type (type "any").
      <br/>
      There is no way to restrict type in these &lt;name, value&gt; pairs, and hence, there is no enforcement that a particular name must always have a value of a particular type.
      <br/>
      For example, in a hypothetical printer, the "speed" attribute, representing how many pages-per-minute the printer can print, should be enforced as an integer to ensure a user does not set it to something else, such as "about 10 ppm" or "8 to 10." The same kind of problem exists if the values can be objects of any type.
      <br/>
      In that case, a user can set the attribute to an integer object instead of a string object but still cannot prevent another user from incorrectly storing a string object in an attribute that should only be set to integers.
    </p>
    <p num="37">
      Furthermore, previous systems have no enforcement of relationships between different attributes (e.g., that one attribute should exist if and only if another attribute also exists).
      <br/>
      For example, given three exemplary attributes for a printer: resolution (dots per inch), speed (pages per minute), and color (vs. black and white), in reality, many printers can perform different combinations of these attributes.
      <br/>
      For example, a typical color printer might be described as:
    </p>
    <p num="38">
      5 pages per minute at 600 dots per inch in black and white;
      <br/>
      7 pages per minute at 300 dots per inch in black and white;
      <br/>
      1 page per minute at 300 dots per inch in color.
    </p>
    <p num="39">
      Whereas a given attribute can have multiple values, some conventional systems allow attributes to have multiple values, and these systems might represent the given attributes in the following manner:
      <br/>
      speed=+1, 5, 7}
      <br/>
      resolution=+300, 600}
      <br/>
      color=+true, false}
    </p>
    <p num="40">
      but this does not express the interrelationships between the pairs of attributes.
      <br/>
      Expressly, there is no representation and enforcement of the three interrelationships:
      <br/>
      +speed: 1, resolution: 300, color: true};
      <br/>
      +speed: 7, resolution: 300, color: false};
      <br/>
      +speed: 5, resolution: 600, color: false}.
    </p>
    <p num="41">
      Accordingly, it is desirable to provide a database system allowing for polymorphic entry, entry matching and manipulation including sets of entries, to thereby allow more efficient searching and to allow simplified software implementation where many different types exist.
      <br/>
      It would further be desirable to provide a system where entries may define their own behavior according to type.
      <br/>
      Additionally, it would be desirable to have type-safe attribute matching in a database system and have enforcement of relationship between attributes.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="42">
      The problems outlined above are solved by a method and system for storing and searching entries in a database consistent with the present invention.
      <br/>
      In one embodiment, a computer system implements a database system wherein one or more entry databases store a plurality of entries.
      <br/>
      Each entry is of a given type that defines the fields of the entry.
      <br/>
      Each of the fields contains or identifies an object with associated attributes or data.
      <br/>
      The type of each entry may further define behavior in the form of methods the entry is configured to implement.
      <br/>
      An entry type which is a subtype of another inherits all of the fields and behavior of its supertype, and contains additional fields and/or defines new or modified behavior.
      <br/>
      Entries may be expressed in a Java (tm)  class of the Java (tm)  programming language.
      <br/>
      Similarly, in one implementation, each field is expressed in a defined class.
    </p>
    <p num="43">
      The database system may further employ a search engine which allows queries to be made upon entries in the database.
      <br/>
      In one implementation, the queries include a read operation, a take operation, and a notify operation.
      <br/>
      Each query request includes a command indicating the type of operation and a template which is an entry object having some or all of its fields set to specified values that must be matched exactly.
      <br/>
      Other fields of the template entry may be specified as wildcards, whose values do not matter.
      <br/>
      The polymorphic entry and entry matching technique advantageously allows a query to be made which might result in a match of an entry which is the same type as the template entry or which is a subtype of the template entry.
      <br/>
      This allows for efficient searching and for simplified implementation of the search engine.
      <br/>
      Furthermore, the search engine need not be aware of all possible subtypes which might exist.
      <br/>
      Finally, since each entry has an associated class, an entry may define its own behavior by supporting one or more methods.
      <br/>
      A method of a particular entry may be invoked by a program to implement various functionality, such as equivalence checking.
    </p>
    <p num="44">
      The search engine may further be configured to create an index for entries having characteristics which are commonly specified by queries.
      <br/>
      That is, the search engine may detect a pattern of usage and create an index which points to entries having attributes which are commonly specified by received templates.
      <br/>
      In this manner, expedient entry searching can be accomplished.
    </p>
    <p num="45">
      Additionally, the search engine may further be configured to store sets of entries in a single record.
      <br/>
      These sets of entries are matched using sets of templates.
      <br/>
      In one implementation, operations similar to single entry implementation operations, such as read, take, write, and notify, may be performed on sets of entries.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="46">
      FIG. 1 is a diagram of a distributed computer system employing a database system consistent with the present invention;
      <br/>
      FIG. 2 is a diagram illustrating exemplary communication between a plurality of clients and a plurality of entry databases consistent with the present invention;
      <br/>
      FIG. 3 is a diagram illustrating several entries each including fields of particular types consistent with the present invention. FIG. 3 further illustrates an entry which is a subtype of another entry;
      <br/>
      FIG. 4 is a diagram illustrating various operations supported by a database system consistent with the present invention;
      <br/>
      FIG. 5 is a diagram illustrating an exemplary template entry consistent with the present invention;
      <br/>
      FIG. 6 is a flow diagram which depicts one implementation of a method for searching entries within a particular entry database in response to either a read request or a take request consistent with the present invention;
      <br/>
      FIG. 7 is a functional block diagram illustrating aspects of a database system consistent with the present invention;
      <br/>
      FIG. 8 is a flow diagram which illustrates an implementation of a search methodology to process a notify request consistent with the present invention;
      <br/>
      FIGS. 9A and 9B depict an implementation of an indexing methodology consistent with the present invention;
      <br/>
      FIG. 10 is a diagram illustrating several multi-entries, each multi-entry including fields containing entries;
      <br/>
      FIG. 11 is a diagram illustrating various multi-entry operations supported by a database system consistent with the present invention;
      <br/>
      FIG. 12 is a diagram illustrating an exemplary multi-template consistent with the present invention;
      <br/>
      FIG. 13 is a flowchart depicting a method of searching a database for multi-entries consistent with the present invention;
      <br/>
      FIG. 14 is a functional diagram illustrating aspects of a database system in relation to an example of a multi-entry search consistent with the present invention;
      <br/>
      FIG. 15 is a flowchart which illustrates an implementation consistent with the present invention of a search methodology to process a notify request for multi-entries;
      <br/>
      FIG. 16 is a diagram illustrating various operations to modify entries and multi-entries in place in the database consistent with the present invention;
      <br/>
      FIG. 17 is a flowchart illustrating steps of a single entry modify operation consistent with the present invention;
      <br/>
      FIG. 18 is a flowchart illustrating steps of a multi-entry add operation consistent with the present invention;
      <br/>
      FIG. 19 is a flowchart illustrating steps of a multi-entry modify/delete operation consistent with the present invention; and
      <br/>
      FIG. 20 is a flowchart illustrating steps of a notification operation for use with in-place modification operations consistent with the present invention.
    </p>
    <p num="47">
      While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail.
      <br/>
      It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="48">
      Methods and systems consistent with the present invention store and search entries in a database.
      <br/>
      Each entry is of a given type which defines the fields of the type, and each field contains or identifies an object of a given type.
      <br/>
      These entries may be expressed in a Java (tm)  class of the Java (tm)  programming language.
      <br/>
      Additionally, methods and systems consistent with the present invention may also store and search sets of entries in a database.
      <br/>
      Generally, these searches are performed using sets of templates.
    </p>
    <p num="49">Distributed System</p>
    <p num="50">
      Turning now to the drawings, FIG. 1 is a diagram illustrating a distributed system 100 in which polymorphic entry, entry matching and entry manipulation in consistent with the present invention may be employed.
      <br/>
      FIG. 1 shows a plurality of computer systems 101-103 interconnected by a network 105.
      <br/>
      Network 105 is illustrative of, for example, a local area network (LAN), a wide area network (WAN), or the Internet, among a variety of other possible communication channels.
      <br/>
      Each computer system includes a memory and a microprocessor such as the exemplary memory 120 and CPU 122 of computer system 101.
      <br/>
      Memory 120 is representative of various types of possible memory, such as hard disk storage, floppy storage, and dynamic random access memory (DRAM).
      <br/>
      Installation media 126, which is illustrative of one or more CD ROMs or floppy disks (or other storage media), is further shown in association with computer system 101.
      <br/>
      Generally speaking, installation media 126 may store code and/or data which implements portions of the search engine and other aspects of the database system described below and may be utilized to install the code and/or data within a particular computer system.
      <br/>
      It is noted that in other embodiments, a database system in accordance with the invention may be implemented within a single, non-networked computer system.
    </p>
    <p num="51">
      As will be described in further detail below, computer system 100 implements a database system wherein object oriented techniques are utilized to store entries of possible types or subtypes.
      <br/>
      This database may also store sets of entries, called multi-entries, as described after the single entry implementation.
      <br/>
      Entries of the database may be stored solely within memory 122 of computer system 101 or may be distributed across the memories of several different systems, such as memory 122 and similar memories of computer systems 102 and 103.
      <br/>
      Each entry is of a given type that defines the fields of the entry.
      <br/>
      Each of the fields contains or identifies an object with associated attributes or data.
      <br/>
      The type of each entry may further define behavior in the form of methods the entry is configured to implement.
      <br/>
      An entry type which is a subtype of another inherits all of the fields and behavior of its supertype and contains additional fields and/or defines new/modified behavior.
    </p>
    <p num="52">
      The database system further employs a search engine, which may be implemented in software, which allows queries to be made upon entries (or multi-entries, described later) in the database.
      <br/>
      In one implementation, each query includes a template that specifies the values (or attributes) of the key fields of a given entry which must match corresponding fields of the template to result in a successful match.
      <br/>
      Other fields of the template entry may be specified as wildcards, whose values do not matter.
      <br/>
      The polymorphic entry and entry matching technique employed by computer system 100 advantageously allows a query to be made which might result in a match of an entry which is the same type as the template entry or which is a subtype of the template entry.
      <br/>
      Additional details regarding aspects of the polymorphic entry and entry matching technique are provided further below in conjunction with FIGS. 2-9.
    </p>
    <p num="53">
      FIG. 2 is a diagram illustrating exemplary communication flow between a pair of clients (or users) 202 and 204 and a plurality of entry databases 206-208.
      <br/>
      Each of the entry databases 206-208 may be distributed across one or more memory subsystems of distributed system 100.
      <br/>
      Each client 202 and 204 is configured to generate queries which may be provided to one or more of the entry databases 206-208.
      <br/>
      Clients 202 and 204 may further be configured to store (write) entries within entry databases 206-208, as discussed further below.
      <br/>
      FIG. 2 finally illustrates an event catcher 210, the functionality of which will also be described further below.
    </p>
    <p num="54">Entry Matching and Operation</p>
    <p num="55">
      FIG. 3 is a diagram illustrating a plurality of exemplary entries which may be stored in any of entry databases 206-208.
      <br/>
      In one implementation, each entry is a typed group of objects expressed in a Java (tm)  class of the Java (tm)  programming language.
      <br/>
      The Java (tm)  programming language is described in Ken Arnold, James Gosling, The Java (tm)  Programming Language, Addison-Wesley, 1996, which is hereby incorporated by reference.
      <br/>
      Java (tm)  is a registered trademark of Sun Microsystems, Inc.
      <br/>
      In the United States and other countries.
      <br/>
      It is understood, however, that in other embodiments, entries may be defined in classes of other programming languages.
    </p>
    <p num="56">
      Entry 1 of FIG. 3 illustratively includes a set of four fields (field A, field B, field C and field D) which are defined by the class type of entry 1.
      <br/>
      Entry 2 includes a set of five fields (field A, field B, field C, field D and field E) which are defined by the class type of entry 2.
      <br/>
      It is noted that entry 2 is a subtype of the type of entry 1, since entry 2 contains the same field types as entry 1, in addition to others.
    </p>
    <p num="57">
      Entry 3 includes a set of four fields (field W, field X, field Y and field Z) defined by the class type of entry 3.
      <br/>
      It is noted that while entries 1 and 3 each contain four fields, they represent different types since their field types are not identical.
    </p>
    <p num="58">
      Numerous other types and subtypes may further be associated with the database system, as desired depending upon the requirements of a particular application or database.
      <br/>
      Additionally, it is noted that entries are possible which are subtypes of subtypes.
      <br/>
      For purposes of example only, the following code is illustrative of specific exemplary entries defined in the Java (tm)  programming language:
    </p>
    <p num="59">A "Request For Bid" Object for Book Buying</p>
    <p num="60">
      --
      <br/>
      -- public class RFB implements Entry +
      <br/>
      --    public Integer order number; .backslash..backslash.
      <br/>
      The buyer's tracking
      <br/>
      --  number for
      <br/>
      --                                     this order.
      <br/>
      --    public String title;        .backslash..backslash.
      <br/>
      The title of the
      <br/>
      --  book.
      <br/>
      --    public Integer count;        .backslash..backslash.
      <br/>
      The number of copies
      <br/>
      --  desired.
      <br/>
      -- }
    </p>
    <p num="61">A "Full" request for bids, that is, one that includes the ISBN:</p>
    <p num="62">
      --
      <br/>
      --      public class FullRFB extends a RFB +
      <br/>
      --         public String    isbn; .backslash..backslash.     The ISBN field.
      <br/>
      --      }
    </p>
    <p num="63">
      Referring again to FIG. 3, each of the fields of the entries are configured to store values which point to or identify typed objects.
      <br/>
      Each of these typed objects may similarly be expressed in a Java (tm)  class.
      <br/>
      For example, field A of entry 1 contains a value identifying objects 310, and field B of entry 1 identifies an object 312.
      <br/>
      Similarly, field A of entry 2 identifies an object 314, and field B identifies an object 316, and so on.
      <br/>
      It is noted that for the exemplary entries of FIG. 3, since entry 2 is a subtype of entry 1, the object 310 associated with field A of entry 1 is expressed by the same class type as that of the object 314 associated with field A of entry 2.
      <br/>
      The attributes or data associated with each of the objects 310 and 314, however, may differ.
      <br/>
      It is further noted that the objects identified by the fields of the various entries may contain integer data, boolean data, string data, or other data types, as desired, depending upon the defined type.
      <br/>
      Still further, it is noted that since each field is associated with a typed object, methods may be supported and selectively invoked via external stimuli to perform operations upon the data, as desired.
      <br/>
      Similarly, each entry type may support one or more methods, as described further below.
    </p>
    <p num="64">
      Referring back to FIG. 2, as described previously, each of the entry databases 206, 207 and 208 may store numerous entries of various types of subtypes.
      <br/>
      An entry may be stored within a given entry database 206-208 through a write operation invoked by a client.
      <br/>
      Entries may additionally be provided to an entry database via an installation media (e.g., installation media 126 of FIG. 1).
    </p>
    <p num="65">
      Several additional operations are further supported by the system, as illustrated by FIG. 4.
      <br/>
      Specifically in addition to write operations, a client or user may initiate "read" operations, "take" operations, and "notify" operations.
    </p>
    <p num="66">
      Read, take, and notify operations are each used to query a particular entry database to determine whether an entry with certain specified characteristics has been written into an entry database and, if so, to cause a specific action.
      <br/>
      In one particular implementation, these queries are made through the use of templates included as part of the operation requests which define the type of entries which are of interest with respect to the operation.
      <br/>
      A read operation may be initiated to read an entry in an entry database which matches an associated template.
      <br/>
      A take operation is similar to a read; however, a take operation will remove an entry matching the template from the entry database.
      <br/>
      Finally, a notify operation registers interest in future incoming entries of a specified entry database that match the associated template.
      <br/>
      When matching entries arrive, the client or a specified event catcher is notified.
      <br/>
      Further details regarding each of these operations will be provided further below.
    </p>
    <p num="67">
      FIG. 5 depicts an exemplary template.
      <br/>
      Generally speaking, a template specifies a particular entry type whose fields can either have values (reference to objects) or "wildcards." When considering a particular entry in an entry database as a potential match against a template, the attributes of specified fields (i.e., those which do not correspond to wildcarded fields of the template) of the entry must exactly match the attributes (or fall within a range of possible attributes) specified by the corresponding field of the template.
      <br/>
      Fields of an entry which correspond to "wildcard" fields of the template may have any attributes and do not affect the matching outcome (i.e., wildcards in the template match any value in the same field of an entry).
      <br/>
      In one implementation, a wildcard is specified with a null reference value.
      <br/>
      As will be described further below, the type of an entry which matches a template may be a subtype of the type of the template.
      <br/>
      Thus, all fields of a particular entry which are defined by the subtype are considered to be wildcards.
      <br/>
      This enables a template to match entries of any subtype.
      <br/>
      It is noted that an entry having no wildcards may further be a valid template.
    </p>
    <p num="68">
      FIG. 6 is a flowchart which depicts one implementation of a method for searching entries within a particular entry database in response to either a read request or a take request consistent with the present invention.
      <br/>
      As stated previously, a read request may be initiated by a client (or user) to read an entry that matches a given template.
      <br/>
      A take request may be initiated to remove an entry matching the given template from an entry database.
    </p>
    <p num="69">(1) Method for Entry Matching</p>
    <p num="70">
      The steps illustrated in FIG. 6 will be described in conjunction with FIG. 7, which depicts functional aspects of a database system employing the search methodology of FIG. 6.
      <br/>
      The functional components of FIG. 7 may be implemented through a combination of software and hardware associated with one or more of the computer systems 101-103 of FIG. 1.
      <br/>
      During step 602, a read or take request is provided from a user 702 to a database manager 704.
      <br/>
      A given request will include a specified template, an exemplary one of which is shown as template 706 in FIG. 7.
      <br/>
      A search engine 708 of database manager 704 subsequently searches entry database 710 during step 604 to determine if any matching types or subtypes of the template reside within entry database 710.
      <br/>
      If no entries within entry databases 710 are of the same type or a subtype of the template (step 606), database manager 704 returns a null value to user 702 during step 608.
    </p>
    <p num="71">
      If the search engine 708 determines that there are one or more entries within entry database 710 that are matching types or subtypes of the template, it compares the fields of a selected entry (of the same type or a subtype) with the corresponding fields of template 706 which are not designated as wildcards (step 610).
      <br/>
      The search engine 708 disregards any fields of the selected entry which correspond to a wildcard field of the template (step 612).
      <br/>
      In one specific implementation, the search engine 708 determines whether the attributes or data associated with each non-wildcarded field of an entry exactly matches the attributes or data of the corresponding template entries.
      <br/>
      If the attributes of any field which is not a wildcard field do not exactly match those of the template, it is determined that a match with respect to that entry has not occurred.
      <br/>
      It is noted that in other embodiments, a field of the template may specify a range of values (rather than requiring an exact match) in which the data of a corresponding field must fall to result in a match.
    </p>
    <p num="72">(2) Example</p>
    <p num="73">
      In the example illustrated by FIG. 7, field C of template 706 is specified as a wildcard.
      <br/>
      Thus, when the search engine 708 searches entry database 710 for a matching entry, the search engine 708 first determines whether any entries reside within the entry database 710 which are types or subtypes of the template 706.
      <br/>
      As shown, both entry 1 and entry 2 meet this qualification.
      <br/>
      The search engine 708 then selects one of these entries (such as entry 2, as depicted) and compares the fields of the entry to the fields of the template which are not specified as wildcards.
      <br/>
      The search engine 708 determines whether an exact match for each of the non-wildcard fields of the template occurs with respect to the attributes of each of the corresponding fields of the entry.
      <br/>
      It is noted that since field C of the template 706 of FIG. 7 is designated as a wildcard field, the attributes of field C of entry 2 are disregarded and do not affect the comparison operation.
      <br/>
      Similarly, those fields of any entry defined by a subtype of the template type are disregarded (i.e., a match may still occur even though the attributes of the wildcard fields do not match).
      <br/>
      If a matching entry is found (all non-wildcarded fields match), the search engine 708 either reads the matching entry from the entry database 710 and provides it to the user, or removes the entry from entry database 710, depending upon whether the request was a read request or a take request.
      <br/>
      The search engine 708 searches entry database 710 until either a match is found or until all of the entries have been checked.
      <br/>
      If no matching entries are found after a search of all entries in the database, database manager 704 returns a null value (step 616) to user 702.
    </p>
    <p num="74">(3) Notify</p>
    <p num="75">
      Turning next to FIG. 8, a flow diagram is shown which illustrates one implementation of a methodology implemented by the search engine 708 to process a notify request received from a user consistent with the present invention.
      <br/>
      As stated previously, a notify request may be issued by the user to register interest in future incoming entries which match a template.
      <br/>
      When matching entries arrive, the database manager either notifies the user or an event catcher (FIG. 2), as desired.
      <br/>
      When a user invokes a notify request, a lease time is specified which indicates how long the database manager 704 will register the notification.
      <br/>
      After the specified time has elapsed, the notify registration is canceled.
    </p>
    <p num="76">
      Thus, as depicted in FIG. 8, when database manager 704 receives a new notify request (step 802), incoming entries are monitored until the registration time expires (steps 804 and 806).
      <br/>
      If an entry is written into entry database 710 which is a type or a subtype of the template (step 808), the fields of the entry are compared to determine whether their attributes match the attributes associated with the non-wildcard fields of the template (step 810).
      <br/>
      Similar to the previous discussion, fields of an incoming entry which are wildcarded or which are defined by a subtype of the template entry are disregarded (step 812).
      <br/>
      If a match occurs, the user or an event catcher is notified (steps 814 and 816).
      <br/>
      Additional incoming entries continue to be monitored as long as the registration time has not expired.
    </p>
    <p num="77">(4) Indexing</p>
    <p num="78">
      Turning back to FIG. 7, the search engine 708 may further be configured to create an index for entries having characteristics which are commonly specified by queries received by database manager 704.
      <br/>
      That is, the search engine 708 may detect a pattern of usage and create an index 720 which points to entries having attributes which are commonly specified by received templates.
      <br/>
      As an example, consider a situation in which database manager 704 receives several query requests each using templates which are of the same type or a subtype of the template 706 illustrated in FIG. 7.
      <br/>
      In this situation, the search engine 708 may detect that the same attribute value for field A (such as an integer value 1,000), is specified in each of the templates of the numerous requests.
      <br/>
      In one implementation, database manager 704 is configured to detect such a common template usage specified by many queries and to responsively create an index 720 which points to all entries within entry database 710 which are the same type or a subtype of the commonly received template and which all have the common attribute specified for field A. Consequently, when a new query with a similar template is received (that is, a template which again specifies the value 1,000 for field A), the search engine 708 may use index 720 to quickly locate the subset of entries which might match the template, without searching through the entire set of entries in the database.
    </p>
    <p num="79">
      An implementation of the indexing methodology is illustrated in FIGS. 9A and 9B. As illustrated in FIG. 9A, an index to entries corresponding to a particular template category may be created by tracking request templates (step 910) and determining if there is a pattern associated with the templates (e.g., templates in which a particular non-wildcarded field (or fields) is specified with the same attribute or value (step 912).
      <br/>
      This determination may be made, for example, based on receiving a predetermined number of queries within a particular time which have similar templates, or based upon receiving a certain percentage of queries which have similar templates.
      <br/>
      When the search engine 708 detects common template usage pattern, it creates an index to the entries which are of the particular template category (step 914).
      <br/>
      Thus, considering the above example, the search engine 708 may create an index to all entries of the same type or subtype as template 706 with field A value of 1,000.
    </p>
    <p num="80">
      As depicted in FIG. 9B, if a new request is received during step 920, a normal search is performed if an index does not exist for that particular template category (steps 922 and 924).
      <br/>
      If an index category exists for the template of the new request, the index is used to find the subset of potentially matching entries and compares only those entries.
      <br/>
      In this manner, expedient entry searching may be accommodated.
      <br/>
      It is noted that the search engine 708 may subsequently delete certain indexes if the common usage is no longer detected, as desired.
    </p>
    <p num="81">
      As stated previously, an entry type may further define a method which may be invoked by external stimuli (e.g., a software program associated with the database system that processes the entries) to cause a specific action to occur.
      <br/>
      Such specific actions might affect data residing in the entry.
      <br/>
      In addition, a method may be utilized to allow efficient equivalence checking to determine if a particular entry is equivalent to another (or equivalent to a template), even though the form of the data may be different.
      <br/>
      For example, an entry that stores decompressed video data might be considered an equivalent to another entry storing a compressed form of the video data.
      <br/>
      A method may be provided to determine such entry equivalence, even though the actual stored data is different (e.g., a method may be invoked to determine whether the objects refer to the same underlying pathname in the file system associated with the image).
    </p>
    <p num="82">
      It is further noted that entries may be stored in an implementation-specific representation that includes a serialized form of an entry's class and each of the entry's fields.
      <br/>
      Serialized forms of a template may then be compared against the serialized forms of the entries.
      <br/>
      It is finally noted that an entry may be specified by the field of another entry.
    </p>
    <p num="83">Multi-Entry and Multi-Template Matching</p>
    <p num="84">
      An alternative embodiment implements operations and matching of items in the database, each item defining a set of entries.
      <br/>
      An "item" is referred to herein as a "multi-entry"; "multi-template" (or "item template") is the term used to refer to a set of templates, which are used to match items in the database.
      <br/>
      This section will further describe the matching of multi-entries to multi-templates and operations involving multi-entries and multi-templates.
      <br/>
      Much of the behavior of multi-entries and multi-templates is similar to single entry and template behavior as discussed previously.
    </p>
    <p num="85">
      FIG. 10 is a diagram illustrating a plurality of exemplary multi-entries which may be stored in any of the entry databases 206-208.
      <br/>
      In methods and systems consistent with the present invention, each multi-entry is a group of entries, each entry being a typed group of objects expressed, for example, in a Java (tm)  class of the Java (tm)  programming language.
      <br/>
      In other words, a multi-entry is set of entries and has no type of its own.
    </p>
    <p num="86">
      Referring to FIG. 10, multi-entry 1 illustratively includes a set of four elements (element A, element B, element C and element D).
      <br/>
      Whereas multi-entries may be of varying length, the exemplary multi-entry 2 includes a set of five elements (element E, element F, element G, element H and element I), and the exemplary multi-entry 3 includes a set of three elements (element J, element K, and element L).
      <br/>
      Each of the elements of the multi-entries is configured to store typed entries.
      <br/>
      As stated, each of these typed entries may be expressed in a Java (tm)  class, and the fields of the entries store values which identify typed objects.
      <br/>
      For example, element A of multi-entry 1 contains a value identifying entry 1010, and element B of multi-entry 1 identifies an entry 1012.
      <br/>
      Similarly, element E of multi-entry 2 identifies an entry 1014, and element F identifies an entry 1016, and so on.
      <br/>
      It is noted that for the exemplary multi-entries of FIG. 10, while any entries may be of the same type, the attributes or data associated with the fields of the entries, however, may differ.
      <br/>
      It is further noted that although the entries identified by the elements of various multi-entries have a specified type, the multi-entries are simply sets of entries and themselves have no specific type.
    </p>
    <p num="87">
      Since multi-entries and multi-templates are just sets, they can be represented using any suitable representation of a set.
      <br/>
      For purposes of example only, a suitable representation in many programming languages, including the Java programming language, is an array, where the size of the array is given by the number of entries in the multi-entry or the number of templates in the multi-template, and each element of the array is an entry (in the case of multi-entries) or a template (in the case of multi-templates).
    </p>
    <p num="88">
      Referring back to FIG. 2, as described previously, each of the entry databases 206, 207 and 208 may store numerous multi-entries.
      <br/>
      A multi-entry may be stored within a given entry database 206-208 through a write operation invoked by a client.
      <br/>
      Multi-entries may additionally be provided to an entry database via an installation media (e.g., installation media 126 of FIG. 1).
      <br/>
      Several additional operations, similar to single entry operations, are further supported by the system, as illustrated by FIG. 11. Specifically in addition to write operations, a client or user may initiate "read" operations, "take" operations, and "notify" operations.
    </p>
    <p num="89">
      Read, take, and notify operations operate on multi-entries in the same manner as they operate on single entries.
      <br/>
      In one particular implementation, these queries are made through the use of multi-templates included as part of the operation requests which define which multi-entries are of interest with respect to the operation.
      <br/>
      As in the single entry implementation, the read operation reads multi-entries in the database that match the given multi-template.
      <br/>
      Once again, the take operation performs the same function as the read operation but also removes any multi-entry read from the database.
      <br/>
      Used to register interest in future multi-entries, the notify operation notifies the client or an event catcher when matching multi-entries arrive in the database.
    </p>
    <p num="90">
      FIG. 12 depicts an exemplary multi-template.
      <br/>
      Generally speaking, a multi-template specifies a particular multi-entry whose elements contain templates as previously defined.
      <br/>
      The multi-template 1200 shown in FIG. 12 has four elements, W, X, Y and Z, although it should be noted that multi-templates can have any number of elements, but, in an exemplary embodiment of the present invention, each element in a multi-template 1200 includes one template 1202.
    </p>
    <p num="91">(1) Method for Multi-Entry and Multi-Template Matching</p>
    <p num="92">
      Generally, a multi-template will match a multi-entry if each template in the multi-template has a matching entry in the multi-entry.
      <br/>
      Each entry in the multi-entry can be used to match more than one template in the multi-template.
      <br/>
      For example, a single entry in the multi-entry could match all the templates in the multi-template, thus creating a match between the multi-entry and the multi-template.
      <br/>
      In the process of determining whether a multi-entry matches a multi-template, it is necessary to compare the individual entries of the multi-entry with the individual templates in the multi-template.
      <br/>
      This matching of individual templates in a multi-template to individual entries in a multi-entry is performed in the same manner as the matching of single entries to single templates as previously defined.
    </p>
    <p num="93">
      FIG. 13 is a flowchart which depicts one implementation of a method for searching multi-entries within a particular entry database in response to either a read request or a take request.
      <br/>
      The steps illustrated in FIG. 13 will be described in conjunction with FIG. 14, which depicts functional aspects of a database system employing the search methodology of FIG. 13. The functional components of FIG. 14 may be implemented through a combination of software and hardware associated with one or more of the computer systems 101-103 of FIG. 1.
      <br/>
      During step 1302, a read or take request is provided from a user 702 to a database manager 704.
      <br/>
      A given request will include a specified multi-template, an exemplary one of which is shown as multi-template 1200 in FIG. 14. A search engine 708 of database manager 704 subsequently searches entry database 710 to determine if any matching multi-entries of the multi-template reside within entry database 710.
    </p>
    <p num="94">
      To search the entry database 710, the search engine 708 selects a multi-entry in the entry database 710 to compare to the given multi-template (step 1304).
      <br/>
      Then, to determine if the multi-entry matches the specified multi-template, the search engine 708 compares each template in the multi-template to the entries of the multi-entry (step 1306).
      <br/>
      If there is a matching entry for each and every template in the multi-template, the multi-entry matches the multi-template (step 1308).
      <br/>
      Each entry in the multi-entry can be used to match more than one template in the multi-template.
      <br/>
      If it is determined that every template in the multi-template has a matching entry in the multi-entry (step 1310), the multi-template matches the multi-entry, and the multi-entry is returned (step 1312).
      <br/>
      This process continues until all entries in the database have been examined.
    </p>
    <p num="95">
      If a match is not made between the selected multi-entry and the multi-template supplied by the operation, the search engine 708 searches other multi-entries in the entry database 710 (step 1314).
      <br/>
      If no multi-entries are found in the database to match the multi-template, a null value is returned (step 1316).
      <br/>
      If more than one is found, in one implementation, one multi-entry is returned, and in another implementation, a requested number of matching multi-entries are returned.
      <br/>
      If the original request from the client arrived in the form of a take request, the matching multi-entry is removed from the database.
      <br/>
      However, if the original request arrived as a read request, the matching multi-entry is not removed from the database.
    </p>
    <p num="96">(2) Example</p>
    <p num="97">
      In the example illustrated by FIG. 14, the search engine 708 selects one of the multi-entries (such as multi-entry 2, as depicted) and compares the entries of the multi-entry to the templates of the multi-template.
      <br/>
      In this example, the search engine 708 receives a request including the multi-template 1200.
    </p>
    <p num="98">
      The search engine 708 determines whether the templates in the multi-template 1200 match the entries of the selected multi-entry in the entry database 710.
      <br/>
      The search engine 708 compares the template in element W of the multi-template 1200 to the entries in elements E, F, G and H and I of the multi-entry 2 in the entry database 710 to determine whether any of these entries match the template.
      <br/>
      If the search engine 708 finds a match for the template in element W of multi-template 1200, it can then attempt to find a match for the template in element X of multi-template 1200.
      <br/>
      It will compare the template in element X of the multi-template 1200, once again, to each of the entries in the multi-entry 2 until it finds a match.
      <br/>
      It should be noted that even though each of these entries in elements E, F, G, H and I may have been compared to other templates in the multi-template (i.e., the template in element W), they can be compared again to this template.
      <br/>
      If a match is found for the template in element X, the search engine 708 checks the rest of the templates in the multi-template 1200 (the templates in elements Y and Z) in the same manner.
      <br/>
      Since each entry can be compared to more than one template, the entry in element E of multi-entry 2 could, for example, match all of the templates in the elements W, X, Y and Z of the multi-template 1200.
      <br/>
      If each template in the multi-template 1200 has a matching entry in multi-entry 2, the multi-entry 2 matches the multi-template 1200.
    </p>
    <p num="99">
      As with single entry operations, if a matching multi-entry is found, the search engine 708 either reads or removes the matching multi-entry from the entry database 710 and provides it to the user, depending upon whether the request was a read request or a take request.
      <br/>
      The search engine 708 continues searching the entry database 710 until either a match is found or all of the multi-entries have been checked.
      <br/>
      If no matching multi-entries are found after a search of all multi-entries in the entry database 710, the database manager 704 returns a null value to user 702.
    </p>
    <p num="100">(3) Notification</p>
    <p num="101">
      Turning next to FIG. 15, a flowchart is shown which illustrates one implementation of a methodology implemented by search engine 708 to process a notify request received from a user.
      <br/>
      The notification operation works similarly to the notification for single entries, and as stated previously, a notify request may be issued by the user to register interest in future incoming multi-entries which match a multi-template.
      <br/>
      When matching multi-entries arrive, the database manager 704 either notifies the user or an event catcher (FIG. 2), as desired.
      <br/>
      When a user invokes a notify request, a lease time is specified which indicates how long the database manager 704 will register the notification.
      <br/>
      After the specified time has elapsed, the notify registration is canceled.
    </p>
    <p num="102">
      Thus, as depicted in FIG. 15, when database manager 704 receives a new notify request (step 1502), incoming multi-entries are monitored until the registration time expires (steps 1504 and 1506).
      <br/>
      If a multi-entry is written into entry database 710, the search engine 708 determines whether the multi-entry matches the multi-template.
      <br/>
      Similar to the previous discussion, if each template of the multi-template has a matching entry in the multi-entry (steps 1508 and 1510), a match occurs and the user or the event catcher is notified (step 1512).
      <br/>
      Additional incoming multi-entries continue to be monitored as long as the registration time has not expired (step 1504).
    </p>
    <p num="103">In-Place Entry Modifications</p>
    <p num="104">
      An alternative embodiment additionally implements modifications of entries and multi-entries in place in the database.
      <br/>
      Consistent with the present invention, this implementation is an extension to the entry/template and multi-entry/multi-template scenario in which the fields of entries can be modified in place in the database, and in the multi-entry case, entries within a multi-entry can be added, modified or deleted.
      <br/>
      The term "in-place" means that the modification occurs in the database without removing the entries or multi-entries from the database.
    </p>
    <p num="105">
      In-place modification operations consistent with this implementation of the present invention include a "single entry modify," a "multi-entry add," a "multi-entry modified/delete," and a "notify." FIG. 16 illustrates these in-place modifications and the information supplied by a user to request a modification.
      <br/>
      The single entry modify operation changes the values in the individual fields of a entries in the database.
      <br/>
      The multi-entry add operation adds entries to multi-entries existing in the database, and the multi-entry modified/delete changes or deletes entries in multi-entries in the database.
      <br/>
      The notify operation, with respect to in-place modifications, notifies of a match occurring due to a change in an entry or multi-entry in the database.
      <br/>
      Generally, the first parameter of an operation request, as shown in FIG. 16, specifies which entries or multi-entries in the database are to be modified, and the second parameter specifies the modifications to be made.
    </p>
    <p num="106">(1) Single Entry Modify</p>
    <p num="107">
      FIG. 17 depicts a flowchart illustrating an implementation of a single entry modify operation consistent with the present invention.
      <br/>
      Further reference will also be made back to FIG. 7 for structural aspects.
      <br/>
      To invoke a single entry modify operation to change the values of individual fields in an entry, a user 702 makes a request including two templates (step 1700, see also FIG. 16).
      <br/>
      The first template 1602 is used to identify the entries in the database to be modified while the second template 1604 is used to modify the entries and identifies the modifications to be made.
      <br/>
      Since these two templates operate on the same entry by identifying it and modifying it, the second template 1604 is the same type as, or a supertype of, the first template 1602.
      <br/>
      In certain implementations, the single entry modify procedure may include a type checking of the templates.
    </p>
    <p num="108">
      First, the search engine 708 searches for entries in the entry database 710 matching the first template 1602 received in the request from the user 702 (step 1702).
      <br/>
      When comparing the entries in the database to the first template, the matching is done according to the single entry and template matching as discussed above.
      <br/>
      If there are no entries in the entry database 710 matching the first template 1602 (step 1704), the search engine 708 returns a zero to the user 702 representing the number of entries changed due to this operation (step 1712).
    </p>
    <p num="109">
      If a matching entry is found, the second template 1604 is used to modify the entry in place in the database, i.e., the entry is not removed from the database for modification.
      <br/>
      Because the second template 1604 is the same type as, or a supertype of, the first template 1602 and the first template 1602 is the same type as, or a supertype of, the entry being modified, therefore the second template 1604 is also the same type as, or a supertype of, the entry being modified, and so the second template 1604 has the same, or a subset of, fields of the entry being modified.
      <br/>
      To modify the matching entry, the values in the non-null fields of the second template 1604 are used to replace the values in the corresponding fields of the entry (step 1708).
      <br/>
      The value of the fields of the entry corresponding to the null or wildcard fields of the second template 1604 remain unchanged.
      <br/>
      After the modification of an entry in the database, the search engine 708 continues searching for more entries to be modified.
      <br/>
      If there are any more entries in database matching the first template 1602 (step 1710), those entries are modified in the same manner (step 1708).
      <br/>
      Upon completion, the search engine 708 returns a number representing the number of entries modified by the operation (step 1712).
    </p>
    <p num="110">(2) Multi-Entry Add</p>
    <p num="111">
      FIG. 18 is a flowchart illustrating steps of a multi-entry add operation consistent with the present invention.
      <br/>
      Generally, the multi-entry add operation adds entries to specified multi-entries in the database.
      <br/>
      A user 702 requesting this operation supplies two parameters to the search engine 708, a multi-template 1606 and a multi-entry 1608 (see FIG. 16).
      <br/>
      The first parameter, the multi-template 1606, is used to identify multi-entries in the entry database to be changed; the second parameter, the multi-entry 1608, is a set of entries to be added to the identified multi-entries database.
      <br/>
      Using multi-entry/multi-template matching as previously discussed, the search engine 708 searches for multi-entries in the database that match the multi-template 1606 given by the user 702 (step 1802).
      <br/>
      If no matching multi-entry is found (step 1804), the search engine 708 returns a zero to the user 702 representing the number of multi-entries to which entries were added (step 1812).
    </p>
    <p num="112">
      If a matching multi-entry is found (step 1804), the entries of the specified multi-entry 1608 supplied by the user 702 are added to the matching multi-entry found in the entry database 710 without the removal of the matching multi-entry from the entry database 710 (step 1808).
      <br/>
      After adding to a multi-entry in the database, the search engine 708 continues searching for more multi-entries to change.
      <br/>
      If there are more multi-entries in the entry database 710 that match the multi-template 1606 given as the first parameter in the operation request (step 1810), the entries of the multi-entry 1608 in the operation request are added to these multi-entries in the same manner (step 1808).
      <br/>
      Finally, the search engine 708 returns a number representing the number of multi-entries to which entries were added (step 1812).
    </p>
    <p num="113">(3) Multi-Entry Modify/Delete</p>
    <p num="114">
      FIG. 19 is a flowchart illustrating a method of implementing a multi-entry modify/delete operation consistent with the present invention.
      <br/>
      The multi-entry modify/delete operation either modifies entries in multi-entries in the database or deletes entries from multi-entries from the database, depending on the entries in the multi-entry in the request.
      <br/>
      When the search engine 708 receives a multi-entry modify/delete request, the request includes two multi-templates, a multi-template 1610 and a multi-template 1612, as its two parameters (step 1900, see also FIG. 16).
      <br/>
      The multi-template 1610 is used to identify the multi-entries in the entry database 710 that are to be modified or have entries deleted, while the multi-template 1612 supplied by the user 702 specifies the modification and deletions to be made to the entries in a matching multi-entry.
    </p>
    <p num="115">
      The multi-template 1612, given in the request, contains the same number of templates as the multi-template 1610.
      <br/>
      Furthermore, each individual template in the multi-template 1612 is the same type, or a supertype of, as the corresponding template in the multi-template 1610 (i.e. every template (i) in multi-template 1612 is the same type as, or a supertype of, template (i) in multi-template 1610).
      <br/>
      For instance, the first template in the multi-template 1612 is the same type as, or a supertype of, the first template in the multi-template 1610, the second template is the same type as, or a supertype of, the corresponding second template and so on.
      <br/>
      Differing from a common multi-template, the templates in the multi-template 1612 of the request parameter may also be null values, and these templates will be used to designate deletions from a multi-entry as described below.
    </p>
    <p num="116">
      The search engine 708 first searches for multi-entries matching the multi-template given as the first parameter in the operation request (step 1902).
      <br/>
      If no match is found, a zero is returned representing the number of multi-entries that were modified (step 1914).
    </p>
    <p num="117">
      If a matching multi-entry is found in the entry database 710, it is modified using the multi-template 1612 from the operation request.
      <br/>
      To accomplish this modification, for each non-null template in the multi-template 1612, the corresponding entry in the matching multi-entry in the entry database 710 is changed according to the non-null template in multi-template 1612 (step 1908).
      <br/>
      This change is performed by using single entry modification as discussed above, and the modification occurs in place in the entry database 710 without removing the matching multi-entry.
      <br/>
      For example, if template (i) in the multi-template 1612 is non-null, the entry (i) in the multi-entry being altered is modified according to template (i) in multi-template 1612 using single entry modification (step 1708 of FIG. 17, where template (i) in multi-template 1612 is used as template 2).
      <br/>
      The values of the non-null fields of the template (i) are used to replace the values in the corresponding fields of the existing entry being modified.
    </p>
    <p num="118">
      For every null template in the given multi-template 1612, the corresponding entry in the matching multi-entry is deleted (i.e., for every template (i) in the multi-template 1612 that is null, entry (i) in the multi-entry to be modified is deleted) (step 1910).
      <br/>
      If there are more multi-entries in the database that match the multi-template 1610, these steps are repeated to modify the remaining matching multi-entries in the entry database 710 (step 1912).
      <br/>
      When the search engine 708 completes the modifications, it returns a number representing the number of multi-entries that were modified (step 1914).
    </p>
    <p num="119">
      An exception case arises, however, when dealing with the multi-entry modify/delete operation.
      <br/>
      In multi-entry/multi-template matching, because an entry in a multi-entry may be used to match more than one template in a multi-template, a multi-entry may match a multi-template and have less entries than the multi-template has templates.
      <br/>
      If such a multi-entry matches the multi-template 1610 and is to be modified by the modify/delete operation consistent with the present invention, more than one template in the multi-template 1612 will be used to modify or delete a single entry in the multi-entry to be modified.
      <br/>
      In this case, if any such template in the multi-template 1612 (i.e., templates corresponding to templates of the multi-template 1610 that match the entry of the multi-entry to be modified) indicates a delete operation (i.e., is null), then the entry in the multi-entry to be modified is deleted.
      <br/>
      Otherwise, if all such templates in the multi-template 1612 indicate modify operations, then all of the templates are used for modification, but the decision on the order in which to apply the modifications will be implementation specific and does not have any significant bearing on the modify/delete operation as a whole.
    </p>
    <p num="120">(4) Modification Notification</p>
    <p num="121">
      Regarding in-place modifications, in another implementation consistent with the present invention, a user can register interest in entries or multi-entries in the database and receive notification back to the user or an event catcher as before.
      <br/>
      In this implementation, when a user registers interest in entries or multi-entries in a database by supplying a template or multi-template, the search engine 708 does not monitor incoming entries or multi-entries as previously done.
      <br/>
      When implementing notification of in-place modifications, it monitors entries or multi-entries that have been changed or modified in the database.
      <br/>
      The monitoring of modified entries or multi-entries in the database as opposed to incoming entries to the database is the main difference between the previous notification operation and the present notification operation relating to in-place modification.
      <br/>
      However, many of the basic aspects of the notification remain the same.
    </p>
    <p num="122">
      Generally, a template 1614 or multi-template 1616 is used to register interest in changing entries and multi-entries.
      <br/>
      Upon the changing of a multi-entry or entry during an in-place modification, the search engine 708 checks to determine if the changed entry or multi-entry now matches the registered template or multi-template, or if the changed multi-entry or entry transitioned from matching the template or multi-template to not matching the template or multi-template.
      <br/>
      Hence, the notification operation searches for transitions in matching status, either from matching to not matching or not matching to matching.
    </p>
    <p num="123">
      Turning next to FIG. 20, a flowchart is shown which illustrates one implementation of a methodology implemented by search engine 708 to process a notify request received from a user to monitor changes in modified entries or multi-entries.
      <br/>
      In this case, the notify request may be issued by the user to register interest in specified entries or multi-entries to determine whether they change matching status in relation to the supplied template 1614 or multi-template 1616.
      <br/>
      When an entry or multi-entry is modified, its matching status can transition by changing from matching the template 1614 or multi-template 1616 to not matching it, or by changing from not matching to matching.
      <br/>
      When an entry or multi-entry changes its matching status with regard to a template 1614 or multi-template 1616 in a notification operation request, the database manager 704 notifies either the user or an event catcher (see FIG. 2), as desired.
      <br/>
      When a user invokes a notify request, a lease time is specified which indicates how long the database manager 704 will register the notification.
      <br/>
      After the specified time has elapsed, the notify registration is canceled.
    </p>
    <p num="124">
      Thus, as depicted in FIG. 20, when database manager 704 receives a new notify request (step 2002), entries or multi-entries are monitored when they are modified until the registration time expires (steps 2004 and 2006).
      <br/>
      If an entry or multi-entry is modified in the entry database 710, the search engine 708 determines whether the entry or multi-entry changed its matching status with regard to the template 1614 or multi-template 1616 received in the notification request (step 2008 and 2010).
      <br/>
      The search engine 708 determines whether the modified entry or multi-entry went from matching the template or multi-template in the request to not matching it or vice versa.
      <br/>
      If a transition of the matching status occurs, the user or the event catcher is notified (step 2012).
      <br/>
      Additional entries or multi-entries that have been modified in place continue to be monitored as long as the registration time has not expired (step 2004).
    </p>
    <p num="125">Type-Safe Attribute Matching</p>
    <p num="126">
      Another implementation consistent with the present invention involves attributes that represent various values of database entries represented as objects.
      <br/>
      In this implementation, by associating attributes to the fields of entries and using entries, multi-entries and their operations, type-safe attribute matching can be achieved.
      <br/>
      Type-safe attribute matching involves the searching of different types of attributes in a database and allows attributes to be strongly typed.
      <br/>
      It further allows the enforcing of relationships between attributes and allows efficient referencing and manipulation of attributes by type.
    </p>
    <p num="127">
      Using type-safe attribute matching, attributes and names are strictly associated with each other (i.e., a pages per minute attribute is associated only with a printer) as well as attributes and their values (i.e., pages per minute is associated only with an integer).
      <br/>
      Type-safe attribute matching also allows enforcement of relationships between pairs of attributes and their values.
      <br/>
      It also enables efficient searching for objects by type while allowing objects of many different types to be stored in a single database.
      <br/>
      Additionally, it permits modifications that affect only a specified type of object in the database, although the database may store many different types of objects.
    </p>
    <p num="128">
      Consistent with the present invention, type-safe attribute matching is achieved by associating attributes with the fields of an entry.
      <br/>
      The value stored in the field of the entry is the value of the associated attribute.
      <br/>
      Since a set of attributes, an entry in this case, can be an instance of a Java (tm)  class, the class provides strong typing of both the set and the individual attributes.
      <br/>
      For instance, the following example illustrates an entry representing a typical printer with fields representing the attributes of the printer (i.e. pages per minute, resolution, etc.), as well as entries representing more generic information such as names, product data, and physical location:
    </p>
    <p num="129">
      --
      <br/>
      --    public class Printer implement Entry +
      <br/>
      --      Integer ppm;     //   pages per minute
      <br/>
      --      Integer dpi;     //   resolution in dots per inch
      <br/>
      --      Boolean duplex;  //   supports two-sided printing
      <br/>
      --      Boolean color;   //   color or black-only
      <br/>
      -- }
      <br/>
      --    public class Name implements Entry +
      <br/>
      --      String name;     //   the user-friendly name of the service
      <br/>
      --      String description; //   tree-form description of the service
      <br/>
      --      String language; //   language (e.g., English, French) used
      <br/>
      --                            in the above
      <br/>
      -- }
      <br/>
      --    public class Type implements Entry +
      <br/>
      --      String type;     //   the general type of service
      <br/>
      --      String vendor;   //   vendor of product that implements the
      <br/>
      --                            service
      <br/>
      --      String model;    //   model number/name of product
      <br/>
      --      String version;  //   version number of product
      <br/>
      -- }
      <br/>
      --    public class Location implements Entry +
      <br/>
      --      Integer floor;   //   what floor the service is on
      <br/>
      --      String building; //   what building it's in
      <br/>
      --      String room;     //   what room it's in
      <br/>
      -- }
    </p>
    <p num="130">
      As shown, there is strict typing of fields as well as the entries, and these fields and their types will always be associated with these entries and their types.
      <br/>
      For example, "ppm" or "pages per minute" is of type "Integer".
    </p>
    <p num="131">
      Further description of an item may be achieved using a multi-entry.
      <br/>
      Using a multi-entry, a typical printer may also be described as a set of sets of attributes.
      <br/>
      When describing a typical printer in this manner, additional aspects may be included such as a location, name or machine type, each aspect represented by another entry in the multi-entry.
      <br/>
      The set of entries in the example above form an exemplary multi-entry representing the attributes of a typical printer.
    </p>
    <p num="132">
      The entry and multi-entry operations may be used to search and manipulate these type-safe sets of attributes.
      <br/>
      These operations include take, write, notify, read, entry modify, multi-entry add, multi-entry modify/delete, and modification notification.
      <br/>
      It should be noted that other known database operations may be performed in the database systems consistent with the present invention.
    </p>
    <p num="133">
      For exemplary purposes, assume the existence of two different printers described by the following multi-entries stored in a database.
      <br/>
      Each printer may have certain properties described by the attributes associated with the fields of the entries in the multi-entry.
      <br/>
      In this hypothetical example, the first printer has an English name "quick" and a German name "schnell," both with associated descriptions.
      <br/>
      As shown in the example, it is located on floor 1 of building ABC in room 1202 and also has associated printing characteristics (e.g. ppm=10, dpi=600, etc.) Such a printer may be represented by the following multi-entry:
    </p>
    <p num="134">
      --
      <br/>
      --      Multi-Entry 1 =
      <br/>
      --                +Name �name  = "quick",
      <br/>
      --                          description = "yada1",
      <br/>
      --                          language    = "English"�,
      <br/>
      --                Name      �name  = "schnell",
      <br/>
      --                          description = "yahda1",
      <br/>
      --                          language    = "German"�,
      <br/>
      --                Location  �floor = 1,
      <br/>
      --                          building    = "ABC",
      <br/>
      --                          room        = "1202"�,
      <br/>
      --                Printer   �ppm   = 10,
      <br/>
      --                          dpi         = 600,
      <br/>
      --                          duplex      = true,
      <br/>
      --                          color       = false�}
    </p>
    <p num="135">
      A second printer, having an English name "slow" and located on floor 2 of building XYZ in room 101, also has associated printing characteristics (e.g. ppm=3, dpi=300, etc.).
      <br/>
      The second printer may be represented by a multi-entry as follows:
    </p>
    <p num="136">
      --
      <br/>
      -- Multi-Entry 2 = +Name  �name  = "slow",
      <br/>
      --                            description = "yada2",
      <br/>
      --                            language    = "English"�,
      <br/>
      --                Location    �floor = 2,
      <br/>
      --                            building    = "XYZ",
      <br/>
      --                            room        = "101"�,
      <br/>
      --                Printer     �ppm   = 3,
      <br/>
      --                            dpi         = 300,
      <br/>
      --                            duplex      = false,
      <br/>
      --                            color       = true�}
    </p>
    <p num="137">
      Now, suppose a search is required that returns all printers with certain attributes represented by the fields of entries.
      <br/>
      For example, if a user sought a printer represented in the database that was located in building "XYZ" and was a color printer, the multi-template in the search might be represented as follows:
    </p>
    <p num="138">
      --
      <br/>
      --      Multi-Template 1 = +Location �floor = null,
      <br/>
      --                                   building = "XYZ",
      <br/>
      --                                   room    = null�,
      <br/>
      --                       Printer     �ppm = null,
      <br/>
      --                                   dpi     = null,
      <br/>
      --                                   duplex  = null,
      <br/>
      --                                   color   = true�}
    </p>
    <p num="139">
      A user might call a read operation supplying Multi-Template 1 as the parameter.
      <br/>
      If applied to the database containing Multi-Entries 1 and 2, the Multi-Entry 2 representing the second printer from the previous example would be returned because the Multi-Template 1, shown here, matches Multi-Entry 2.
      <br/>
      The search engine 708 searches the database, bypassing items of incorrect types, and compares the values stored in the fields of the entries to the values in the templates in the request.
      <br/>
      As a result, it returns only those with the correct attribute values.
      <br/>
      This type-safe matching allows objects of different types to be stored in the same database and searched efficiently.
    </p>
    <p num="140">
      In regard to operations performed in a database employing type-safe attribute matching, suppose a type-safe modification is requested on all items represented in the database possessing certain characteristics.
      <br/>
      In such a case, the entry/multi-entry modification operations can be used to modify the items in the database.
      <br/>
      Suppose, for example, a request is formulated to change all of the black and white (color=false) printers at any location to a specific resolution (i.e. dpi 100) and remove their location attributes.
      <br/>
      Recalling that the multi-entry modify/delete operation takes two parameters, a multi-template to determine which multi-entries in the database will be modified and a multi-entry to dictate the changes to be made, these two parameters can be supplied to represent these changes.
      <br/>
      Referring back to the previous examples, the first of the parameters of the multi-entry modify/delete operation might be represented in a multi-template as follows:
    </p>
    <p num="141">
      --
      <br/>
      --      Multi-template 2 = + Location    �floor = null,
      <br/>
      --                                     building = null,
      <br/>
      --                                     room    = null�,
      <br/>
      --                         Printer     �ppm = null,
      <br/>
      --                                     dpi     = null,
      <br/>
      --                                     duplex  = null,
      <br/>
      --                                     color   = false�}
    </p>
    <p num="142">
      This multi-template seeks all black and white printers regardless of location.
      <br/>
      Finally, to modify all multi-entries with this property to have a resolution of 100 dpi and remove their location attributes, the modify/delete operation is initiated using the following request:
    </p>
    <p num="143">
      --
      <br/>
      --      Multi-entry modify/delete
      <br/>
      --      (Multi-template 2,
      <br/>
      --                              +null,
      <br/>
      --                              Printer �ppm = null,
      <br/>
      --                                      dpi     = 100,
      <br/>
      --                                      duplex  = null,
      <br/>
      --                                      color   = null�})
    </p>
    <p num="144">
      The search engine 708 locates all multi-entries in the database matching Multi-template 2 and modifies them according to the second parameter in the operation, as discussed in the multi-entry modify/delete operation method.
      <br/>
      Multi-Entry 1 from the previous example matches the Multi-Template 2 used in the operation parameter, and therefore, Multi-Entry 1 is changed according to the second parameter of the operation.
      <br/>
      This operation deletes the location attributes, replaces the dpi attribute with a value of 100 and yields a modified Multi-entry 1:
    </p>
    <p num="145">
      --
      <br/>
      --      Multi-Entry 1 =
      <br/>
      --                +Name �name  = "quick",
      <br/>
      --                          description = "yada1",
      <br/>
      --                          language    = "English"�,
      <br/>
      --                Name      �name  = "schnell",
      <br/>
      --                          description = "yahda1",
      <br/>
      --                          language    = "German"�,
      <br/>
      --                Printer   �ppm   = 10,
      <br/>
      --                          dpi         = 100,
      <br/>
      --                          duplex      = true,
      <br/>
      --                          color       = false�}
    </p>
    <p num="146">
      Hence the search engine sought all items in the database possessing attributes of a requested type and modified them in a type-safe manner, thus implementing type-safe attribute matching.
      <br/>
      It should be noted that the examples shown are for purposes of illustration only.
    </p>
    <p num="147">
      Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated.
      <br/>
      It is intended that the following claims be interpreted to embrace all such variations and modifications.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for searching items in a database, the database storing a plurality of items, each item comprising a plurality of entries, the method comprising:</claim-text>
      <claim-text>receiving a request including a multi-template comprised of a plurality of templates; comparing the multi-template to an item in the database to determine whether the item matches the multi-template, the item comprising a plurality of entries;</claim-text>
      <claim-text>and returning the item based upon a result of the comparison.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1, wherein the comparing step comprises the step of: comparing each template in the multi-template with the entries in the item to determine if each template has a matching entry, each entry being allowed to match more than one template.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1, further including the step of: repeating the comparing step until a match is found or all items in the database are compared.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 3, wherein the returning step includes the step of: returning a null value if no matches are found.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1, wherein the receiving step includes the step of: receiving a request for more than one item.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 5, wherein the returning step includes the step of: returning more than one item.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A method for notification of the arrival of a specified item in a database comprising the steps of: receiving a request to monitor the database for the arrival of a specified item comprising a plurality of entries, the request including a multi-template comprising a plurality of templates; determining, upon the arrival of an item, whether the item matches the multi-template in the request;</claim-text>
      <claim-text>and returning notification based on the determination.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 7, wherein the receiving step includes the step of: receiving a request including a lease time indicating the length of time the database is to monitor incoming items.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A method for searching items in a database, the database storing a plurality of items, each item comprising a plurality of entries, the method comprising: providing a request including a multi-template comprised of a plurality of templates;</claim-text>
      <claim-text>and receiving an item matching the multi-template based on a comparison of the multi-template to items in the database, the received item comprising a plurality of entries.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 9, wherein the request includes a take or read operation.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 9, wherein the receiving step includes the step of: receiving a null value if the database contains no items matching the multi-template.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A method for searching items in a database, the database storing a plurality of items, each item comprising a plurality of entries, the method comprising: providing a request including a take or read operation and a multi-template comprised of a plurality of templates; selecting an item in the database to compare to the multi-template, the item comprising a plurality of entries; comparing the multi-template to one of the items in the database by comparing each template in the multi-template with the entries in the one of the items to determine if each template has a matching entry, each entry being allowed to match more than one template; returning the one of the items or a null value based on a result of the comparison.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 12, further comprising: repeating the selecting and comparing steps until a match is found or all items in the database have been compared.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A data processing system for searching for items in a database, the system comprising: a CPU; a memory coupled to the CPU, the memory storing a database comprising a plurality of items, each item comprising a plurality of entries; wherein the memory stores a search program which is executable by the CPU to receive a request including a multi-template comprised of a plurality of templates, compare the multi-template to an item in the database to determine whether the item matches the multi-template, and return the item based upon a result of the comparison.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A data processing apparatus having a database storing a plurality of items comprising a plurality of entries, the apparatus comprising: a receiving component configured to receive a request including a multi-template comprised of a plurality of templates; a comparing component configured to compare the multi-template to an item in the database to determine whether the item matches the multi-template, the item comprising a plurality of entries;</claim-text>
      <claim-text>and a returning component configured to return the item based upon a result of the comparison.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The apparatus of claim 15, wherein the comparing component comprises: a comparing component configured to compare each template in the multi-template with the entries in the item to determine if each template has a matching entry, each entry being allowed to match more than one template.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The apparatus of claim 15, further including: a repeating component configured to repeat the comparing step until a match is found or all items in the database are compared.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. A data processing apparatus having a database storing a plurality of items comprising a plurality of entries, the apparatus comprising: a providing component configured to provide a request including a multi-template comprised of a plurality of templates;</claim-text>
      <claim-text>and a receiving component configured to receive an item matching the multi-template based on a comparison of the multi-template to items in the database, the received item comprising a plurality of entries.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. A computer program product comprising a computer readable medium having computer readable code embodied therein for processing data in a database by: receiving a request including a multi-template comprised of a plurality of templates; comparing the multi-template to an item in the database to determine whether the item matches the multi-template, the item comprising a plurality of entries;</claim-text>
      <claim-text>and returning the item based upon a result of the comparison.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The product of claim 19, wherein the comparing further comprises: comparing each template in the multi-template with the entries in the item to determine if each template has a matching entry, each entry being allowed to match more than one template.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The product of claim 19, further comprising: repeating the comparing step until a match is found or all items in the database are compared.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A computer program product comprising a computer readable medium having computer readable code embodied therein for processing data in a database by: providing a request including a multi-template comprised of a plurality of templates;</claim-text>
      <claim-text>and receiving an item matching the multi-template based on a comparison of the multi-template to items in the database, the received item comprising a plurality of entries.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. A computer program product comprising a computer readable medium having computer readable code embodied therein for processing data in a database, the computer readable medium comprising: means for receiving a request including a multi-template comprised of a plurality of templates; means for comparing the multi-template to an item in the database to determine whether the item matches the multi-template, the item comprising a plurality of entries;</claim-text>
      <claim-text>and means for returning the item based upon a result of the comparison.</claim-text>
    </claim>
  </claims>
</questel-patent-document>