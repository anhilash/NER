<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182223B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182223</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182223</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22250542" extended-family-id="42109079">
      <document-id>
        <country>US</country>
        <doc-number>09095185</doc-number>
        <kind>A</kind>
        <date>19980610</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09095185</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165735</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>9518598</doc-number>
        <kind>A</kind>
        <date>19980610</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09095185</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   1/24        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>1</main-group>
        <subgroup>24</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   1/26        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>1</main-group>
        <subgroup>26</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F  21/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>726022000</text>
        <class>726</class>
        <subclass>022000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>713165000</text>
        <class>713</class>
        <subclass>165000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>726026000</text>
        <class>726</class>
        <subclass>026000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-021/87</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>87</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-001/24</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>1</main-group>
        <subgroup>24</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G06F-001/26B</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>001</main-group>
        <subgroup>26B</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-021/87</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>87</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-001/24</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>1</main-group>
        <subgroup>24</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-001/263</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>1</main-group>
        <subgroup>263</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>26</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>5</number-of-figures>
      <image-key data-format="questel">US6182223</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for preventing unauthorized access to computer-stored information</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>BITZINGER RUDOLF, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4914572</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4914572</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>GRIDER STEPHEN N, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5515540</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5515540</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KAYASHIMA MAKOTO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5919258</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5919258</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>MCCLUNG CHARLES R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4951249</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4951249</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>TAJALLI HOMAYOON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5361359</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5361359</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>SMAHA STEPHEN E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5557742</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5557742</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>PERHOLTZ RONALD J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5566339</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5566339</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Rawson, Andrew R.</name>
            <address>
              <address-1>Cedar Park, TX, US</address-1>
              <city>Cedar Park</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Henkler, Richard A.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Kraft, Paul</name>
          </addressbook>
        </agent>
        <agent sequence="3" rep-type="agent">
          <addressbook lang="en">
            <name>VanLeeuwen, Leslie A.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Beausoliel, Jr., Robert W.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method and apparatus of a computer based security system to prevent unauthorized access to computer-stored information comprising several components.
      <br/>
      These comprise of an intrusion detection mechanism, a ROM-based firmware program, an internal battery sized to provide several minutes of operation of the computer system and all its internal devices, and a mechanism to reset the central processing unit of the computer and switch to battery power responsive to the intrusion detection mechanism.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>TECHNICAL FIELD</heading>
    <p num="1">
      The present invention involves the use of various anti-theft and anti-invasive techniques to prevent intrusion into confidential data stored in portable, desktop and deskside computers.
      <br/>
      Such computers are highly vulnerable to unauthorized access.
      <br/>
      This is because they are relatively easy to gain access and also physically remove from the owner's premises.
      <br/>
      Once removed, data contained therein can be intruded upon at the invader's leisure.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      The number of computers in business and private applications is growing at an enormous rate and many firms have thousands of computers throughout their organizations.
      <br/>
      In contrast to the high security traditionally afforded computer equipment in the past, the portable, desktop and deskside are not generally located in high security areas or, as in the past, operated by a few highly trained and highly trusted personnel.
      <br/>
      Currently, personal computers are often left on desks where anyone with an operating system boot diskette can access any data stored within the computer with the potential for theft and/or tampering of proprietary information.
      <br/>
      Additionally, the location of such computers in unsecured areas and their relatively small physical size leads to the theft of the equipment itself.
      <br/>
      When a computer system is stolen so is the valuable information contained within it.
    </p>
    <p num="3">
      Thus, the data stored in either a portable, desktop or deskside computer is highly vulnerable to unauthorized access merely because these computers are relatively easy to remove from the owner's premises.
      <br/>
      This data is contained in system memory and nonvolatile secondary storage such as floppy disks, hard disks, tape, magneto-optical writable media, etc.
      <br/>
      And while information contained in the volatile system memory of AC-powered desktop or deskside computers will very likely be lost as a direct result of physically removing the computer, a portable battery operated computer can hold the contents of memory for several hours.
      <br/>
      In addition, if the computer is equipped with rapid resume capabilities, system software has the ability to copy the contents of volatile system memory onto nonvolatile secondary storage making the record of the information previously contained in system memory permanent.
      <br/>
      Thus, once the system unit, along with its internal storage devices and media are removed from the owner's premises, the data intrusion expert has unlimited time and tools available to mine the sensitive information contained within.
    </p>
    <p num="4">
      The traditional prior art approach to protecting the data contained in a computer system is to wrap the storage device in a steel case and provide lockable doors to prevent the removal of removable media such as floppy disks.
      <br/>
      The unit is then affixed to something considered to be immovable such as a column, desk or large table.
      <br/>
      Often the means of affixing the system unit is a steel cable.
      <br/>
      Obviously, none of these crude measures are effective against a determined and clever thief.
    </p>
    <p num="5">
      As an example, assume that a computer system is provided with a lockable cover and the covers and locking mechanism are designed so as to make any attempt at unauthorized entry evident.
      <br/>
      Even if the cover and lock arrangement works and produces clear evidence that the covers have been tampered with, once the computer system is removed from the owner's premises, the evidence is removed as well.
    </p>
    <p num="6">
      Another security feature often provided is the entry and verification of a password before allowing access to any data contained in the computer.
      <br/>
      This is only effective as long as the storage devices remain secured within a locked and intact enclosure.
      <br/>
      Once the physical defenses of the system unit are breached, the thief is free to attach the storage device to another computer which he can use as a tool to access the data contained therein.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="7">
      The present invention consists of a computer based security system to prevent unauthorized access to computer-stored information comprising several components.
      <br/>
      These are comprised of an intrusion detection mechanism, a ROM-based firmware program, an internal auxiliary power source, such as a battery sized to provide several minutes of operation of the computer system and all its internal devices, and a mechanism to reset the central processing unit of the computer and switch to a self contained power supply (i.e. battery power) responsive to the intrusion detection mechanism.
    </p>
    <p num="8">
      Thus, the present invention is superior to that of the prior art in that all the owner sensitive data is erased before the thief knows that an intrusion has been detected, thus eliminating the possibility of subsequent examination and decryption of the stolen information.
      <br/>
      A further advantage of the instant invention is that security of the data is not dependent on the physical security of the computer itself.
      <br/>
      Additionally, it protects data contained in all integrated volatile and nonvolatile storage devices and media, not just some selected device.
    </p>
    <p num="9">
      The intrusion detection mechanism can take numerous forms.
      <br/>
      One effective mechanism is a spring-loaded switch within the unit which is held in an electrically open position by the weight of the computer; the movement of which causes a switch to close, triggering an intrusion detection mechanism.
      <br/>
      Another detects the unauthorized removal of the computer cover triggering an intrusion detection mechanism and yet another mechanism involves a magnetic coupling of the continued proximity of the floor or table upon which the unit rests.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="10">
      FIGS. 1A/1B is a procedural flowchart that provides an overview of the preferred embodiment of the instant invention;
      <br/>
      FIGS. 2A/2B is a flowchart of the Security Program Subprocess represented by subprocess block 180 of FIG. 1A, labeled: "invoke security program on alternate processor". This subprocess also appears in subprocess block 280 of FIG. 1B; and
      <br/>
      FIG. 3 specifies the Security Priority Data Format. It represents the data structure which specifies the system files and other data objects which are to be overwritten on secondary storage and/or deleted from the file system of the computer during the execution of the security program.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="11">
      The following represents a detailed description of the instant invention.
      <br/>
      FIGS. 1A/1B is a procedural flowchart which illustrates the preferred embodiment of this invention.
      <br/>
      This flowchart details a process which comprises an intrusion detection mechanism, a program executed on the central processing unit (CPU) and a program executing on an optional alternate processor specifically included in the system for security purposes.
      <br/>
      The following paragraphs describe the preferred embodiment in full detail.
    </p>
    <p num="12">
      Assumed is an intrusion detection mechanism which is capable of asserting a hardware reset to the CPU and, once triggered by the detected intrusion event, maintains this state information in a processor readable latch.
      <br/>
      The current state of this latch is denoted by the variable intrusion_event.
      <br/>
      The variable intrusion_event is FALSE until an intrusion event is detected.
      <br/>
      It then changes to TRUE when such an event occurs and remains in the TRUE state until reset to FALSE by an unspecified service repair action.
    </p>
    <p num="13">
      The main CPU of the computer system is the primary execution vehicle for the illustrated program.
      <br/>
      However, an optional processor may be provided within the computer system to take over the execution of an equivalent process in the event the main CPU is inoperable.
    </p>
    <p num="14">
      The process of this embodiment starts at block 100FIG. 1A, and is initiated by a hardware reset directed to the main CPU.
      <br/>
      However, alternate mechanisms for invocation of this process are also possible.
      <br/>
      Since this is the normal entry point for the ROM-based initialization and configuration (boot) code, the process flow enters the process block 120 which represents the initial sequence of the computer's normal self test.
      <br/>
      This set of tests is the minimum required to ensure that the CPU and necessary I/O components are functional.
      <br/>
      This process block leads directly to the decision block 130.
    </p>
    <p num="15">
      Decision block 130 diverts the procedural flow to execute on the optional alternate processor if the results of the self test indicate some fatal error.
      <br/>
      This is the leg which leads to decision block 140.
      <br/>
      If the optional processor is not available, the procedural flow ends at terminal block 150.
      <br/>
      In this case there is nothing more which can be done to protect the data objects contained in the computer since the primary hardware is no longer operational.
    </p>
    <p num="16">
      However, if an alternate processor is available, the procedural flow continues to decision block 170.
      <br/>
      Here the intrusion mechanism is interrogated to determine if an intrusion event occurred.
      <br/>
      If the variable intrusion_event is TRUE, the security program is invoked utilizing the alternate processor.
      <br/>
      This is designated in this flow as the subprocess block 180.
      <br/>
      This subprocess is the same subprocess which the main CPU executes in the subprocess block 280 and is described in detail below.
      <br/>
      On return from the security program subprocess, the procedural flow terminates in the stop block 190.
    </p>
    <p num="17">
      If the variable intrusion_event is FALSE, the procedural flow terminates at block 150.
      <br/>
      In this case, since no intrusion event has occurred, there is nothing more to do.
      <br/>
      The system is not under attack, it merely needs to be serviced.
    </p>
    <p num="18">
      Returning to the flow at decision block 130, we now trace the "No" decision leg.
      <br/>
      Here the computer system has been determined to be functional and the procedure continues to decision block 160.
      <br/>
      Decision block 160 interrogates the intrusion detection mechanism.
      <br/>
      If the variable intrusion_event is not TRUE, then no intrusion has been detected and the boot process continues normally.
      <br/>
      This is represented by block 200.
      <br/>
      The remainder of this process is beyond the scope of this invention.
    </p>
    <p num="19">
      However, if the state of the variable intrusion_event tested in decision block 160 is TRUE, the procedure continues to block 210.
      <br/>
      Here a hardware timer is started.
      <br/>
      This is used to mark the elapsed time since the CPU has reached a point in its execution.
      <br/>
      The flow continues to process block 220.
      <br/>
      A brief audible tone is generated via a mechanism which is normally available in a computer system.
      <br/>
      This is to alert a user that a problem requiring attention has occurred.
    </p>
    <p num="20">
      The next process block 230 specifies that a prompt should be written to an available display device requiring an override code.
      <br/>
      The override code has been previously setup by the owner/user and has been retained in a nonvolatile storage device in the system.
    </p>
    <p num="21">
      Decision block 240, FIG. 1B, polls the keyboard device input and decision block 260 keeps track of the elapsed time by reading the current value in the timer which was cleared and started in the process block 210.
      <br/>
      The terminal elapsed time value of five seconds is illustrative and can be adjusted based on requirements.
    </p>
    <p num="22">
      If keyboard input is detected in decision block 240 (a line of data terminated by the ENTER key is assumed), flow goes to process block 250 where this input is read from the keyboard device.
      <br/>
      The process then flows to decision block 270 where the keyboard input string is compared to the override_code string stored in the nonvolatile memory.
      <br/>
      If the input matches the stored string, then the security process is diverted and the flow returns to the normal boot process in block 200.
    </p>
    <p num="23">
      If either the designated elapse time expires or the entered code does not match the stored code, then the security program is invoked on the main CPU in the subprocess block 280.
      <br/>
      Upon return from the subprocess block, flow goes directly to block 290 in which the main CPU turns off all power to the computer system.
      <br/>
      This overview procedural flow then terminates at block 300.
    </p>
    <p num="24">
      For the following discussion refer to FIGS. 2A/2B. The purpose of this subprocess is to execute the specified protection actions against the sensitive data objects contained in the security Priority List data structure specified in FIG. 3.
      <br/>
      This data structure has been set up by the user or security administrator utilizing a software tool designed for this purpose.
      <br/>
      This data structure is either stored in the file system in an invisible file or alternately could be written to nonvolatile memory.
    </p>
    <p num="25">
      Start block 500, FIG. 2A, represents the start of this subprocess which is to be invoked on either the main CPU or in an optional processor available within the computer system.
      <br/>
      This subprocess begins in the process block 510 with the clearing of all system memory.
      <br/>
      It is assumed that the ROM-based security program has the functional code necessary to read and write all secondary storage devices in the computer system which may contain sensitive data objects, although this is not essential.
      <br/>
      If not, trusted code may be loaded from the filesystem to aid in the process.
    </p>
    <p num="26">
      Process block 520 represents the reading of the security Priority List from the filesystem or nonvolatile memory and placing it in a working area of system memory.
      <br/>
      The format of this data structure, which is a simple linked list, is detailed in FIG. 3.
    </p>
    <p num="27">
      To understand the processing of this data structure, some of the detail needs to be explained.
      <br/>
      The first record of this data structure denoted head 700 in FIG. 3 contains two fields.
      <br/>
      The first contains certain header information and the second called link contains a pointer to the first of a list of records 710 providing information about the data objects to be operated upon and the specific actions to be taken to secure the data.
    </p>
    <p num="28">
      Each record 710 is composed of four fields.
      <br/>
      The first, filename, gives the filesystem path to the object.
      <br/>
      The second, media_type, specifies the type of storage media which holds the object data.
      <br/>
      The third, prot_type, specifies the type of action to take against the object and the last field, link, provides a pointer to the next record in the list.
      <br/>
      The list can be composed of any number of records 710 and is terminated when a NULL pointer 720 is found in the link field.
    </p>
    <p num="29">
      Values for the media_type variables are "magnetic" and "opti" and specify how the data object should be overwritten.
      <br/>
      Values for prot_type are "overwrite" and "delete". "Overwrite" means that the low level sectors on the storage media should be overwritten. "Delete" means that only the entries in the filesystem directory structure should be modified.
      <br/>
      This is much faster than overwriting but provides only limited protection.
      <br/>
      Delete should be reserved for data objects of limited sensitivity.
    </p>
    <p num="30">
      Returning to the Security Program Subprocess flow chart of FIG. 2A, we continue the process block 530.
      <br/>
      Here variable obj_ptr is loaded with a pointer to the head record.
      <br/>
      This initializes obj_ptr prior to entering the loop structure which threads the list and operates on the data objects.
      <br/>
      This loop is represented by blocks, FIG. 2A, at 540, 550, FIG. 2B, at 570, 580, 590, 600, 610, 620, and 630.
    </p>
    <p num="31">
      The first block in the loop is the process block, FIG. 2A, at 540.
      <br/>
      Here the variable obj_ptr takes on the value stored in the link field of the record pointed to by the old value of the obj_ptr.
      <br/>
      On the first iteration through the loop, this points to the first record 710 describing the first data object to be operated upon.
      <br/>
      Flow goes to decision block, FIG. 2A, at 550.
      <br/>
      Here the list termination condition is queried.
      <br/>
      Given that the list has at least one record 710, the process flow will follow the "No" leg to a series of decision blocks whose purpose is to decode the types of objects and actions to be taken upon them as determined by the Security Priority List.
    </p>
    <p num="32">
      Consider first the decision block, FIG. 2B, at 570.
      <br/>
      Here the values in the media_type and prot_type fields are tested.
      <br/>
      If the media_type is "magnetic" and the prot_type is "overwrite", then the flow follows the "yes" leg to the process block 580 where the specified action on the file specified by filename is performed.
      <br/>
      Since magnetic media (floppies, hardfiles and tape) can just as easily be overwritten as zeros or ones, this process determines rather arbitrarily to set all the bits to zeros.
      <br/>
      If either of these conditions is not true, flow continues to the next decision block 590.
      <br/>
      Here the conditions media_type="opti" and prot_type="overwrite" are tested.
      <br/>
      If both are TRUE, flow moves to process block 600 where the specified operation is carried out.
      <br/>
      Here, due to the media type, the only overwrite operation which is possible is to write all ones.
    </p>
    <p num="33">
      If either condition tested in decision block 590 is FALSE, then procedural flow continues to decision block 610.
      <br/>
      In block 610, regardless of the media_type, if prot_type "delete", then an operation equivalent to deleting the file from the directory structure is performed.
      <br/>
      This is shown in process block 620.
      <br/>
      Note that following process blocks 580 and 600, flow enters block 620 as well to ensure that after an object has been overwritten, it is also removed from the filesystem directory structure.
      <br/>
      Flow from block 620 goes back to the top of the loop at process block 540.
    </p>
    <p num="34">
      If the "No" leg of decision block 610 is taken, the value of media_type and/or prot_type do not match one of the known values.
      <br/>
      In general, this would happen only in an error situation.
      <br/>
      Process block 630 attempts to perform the delete operation on the data object before returning to the top of the loop to process the next object.
    </p>
    <p num="35">
      The loop terminates when the last record in the list has been processed and the NULL link 720 in the final record is loaded into obj_ptr in process block 540.
      <br/>
      The decision block 550 tests the value of the pointer and finds it equal to NULL.
      <br/>
      Procedural flow moves to block 560 where the processor "cleans up after itself" by overwriting all of the working system memory space utilized by the Security Program itself.
      <br/>
      After this, the subprocess terminates in block 650.
      <br/>
      At this point, flow returns to the point of invocation in FIG. 1A.
    </p>
    <p num="36">As noted above, if the main CPU is executing the process, flow proceeds to process block 290FIG. 1B, where power is shut off and the overall process terminates in block 300.</p>
    <p num="37">
      Another embodiment of this invention includes an intrusion detection mechanism which is a spring-loaded switch within the computer system maintained in the electrically open position by the shear weight of said computer system.
      <br/>
      When the computer is moved or relocated, this switch closes, triggering the intrusion detection mechanism.
    </p>
    <p num="38">
      Still a further embodiment of this invention involves the detection of the unauthorized removal of the covers of the computer system.
      <br/>
      This would trigger the intrusion detection mechanism.
    </p>
    <p num="39">
      Yet another embodiment of this invention involves an intrusion detection mechanism which is a magnetic coupling of the continued proximity of the floor or table upon which the computer system rests.
      <br/>
      The movement or breaking of this coupling would trigger the intrusion detection mechanism.
    </p>
    <p num="40">Although certain preferred embodiments have been shown and described, it will be understood that many changes and modifications may be made therein without departing from the scope and intent of the appended claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A computer based security system to prevent unauthorized access to computer-stored information, comprising:</claim-text>
      <claim-text>a mechanism for detecting an intrusion into said computer; a self contained power supply to provide sufficient operation time for said computer system to execute specific protective actions; a switch to said self contained power supply, responsive to said intrusion detection mechanism; a mechanism to reset the central processing unit of said computer responsive to said intrusion detection mechanism; a ROM-based firmware program containing a procedure, in said firmware program, to specify the data, files and objects in secondary storage, that are to be overwritten or deleted from said computer file system upon said intrusion, and upon said intrusion, said system immediately executes specific protection actions against sensitive data objects contained in a security priority list of data structures.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The system of claim 1, wherein said power supply is a battery, sized to provide several minutes of operation of said computer system and all its integrated secondary storage devices.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The system of claim 1, wherein said intrusion detection mechanism is a spring-loaded switch within said computer system which is maintained in the electrically open position by the shear weight of said computer system, and when said computer is moved or relocated, said switch closes, triggering said intrusion detection mechanism.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The system of claim 3 wherein the detection of the unauthorized removal of the covers of said computer system, triggers said intrusion detection mechanism.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The system of claim 1, wherein said intrusion detection mechanism is a magnetic coupling of the continued proximity of the floor or table upon which said computer system rests.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The system of claim 1, wherein an optional processor may be provided within said computer system to take over the execution of an equivalent process in the event the central processing unit is inoperable.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The system of claim 1, wherein once said intrusion mechanism is triggered, it causes said system to be powered by the self contained power supply causing said computer to reset;</claim-text>
      <claim-text>and said ROM-based firmware program to take control and determine that an intrusion event occurred, thus erasing all data in said system and secondary storage.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A computer based security system to prevent unauthorized access to computer-stored information, comprising: a mechanism for detecting an intrusion into said computer; a self contained power supply to provide sufficient operation time for said computer system to execute specific protective actions; a switch to said self contained power supply responsive to said intrusion detection mechanism; a mechanism to reset the central processing unit of said computer responsive to said intrusion detection mechanism; a ROM-based firmware program; a intrusion detection mechanism which when triggered, causes said computer system to be powered by the self contained power supply, causing said computer system to reset;</claim-text>
      <claim-text>said ROM-based firmware program then takes control and determines that an intrusion event occurred, thus erasing, on a prioritized manner, all data in said system and secondary storage;</claim-text>
      <claim-text>and said firmware which is personalized by means of tables stored in non-private RAM, erases various user critical data first to assure their destruction.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The system of claim 8, wherein said system employs a procedure in said firmware program, to specify the data, files and objects in secondary storage, that are to be overwritten or deleted from said computer file system upon said intrusion.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The system of claim 8 wherein said power supply is a battery, sized to provide several minutes of operation of said computer system and all its integrated secondary storage devices.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The system of claim 8, wherein said intrusion detection mechanism is a spring-loaded switch within said computer system which is maintained in the electrically open position by the shear weight of said computer system, and when said computer is moved or relocated, said switch closes, triggering said intrusion detection mechanism.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The system of claim 11 wherein the detection of the unauthorized removal of the covers of said computer system, triggers said intrusion detection mechanism.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The system of claim 8 wherein said intrusion detection mechanism is a magnetic coupling of the continued proximity of the floor or table upon which said computer system rests.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The system of claim 8 wherein an optional processor may be provided within said computer system to take over the execution of an equivalent process in the event the central processing unit is inoperable.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The system of claim 8 wherein once said intrusion mechanism is triggered, it causes said system to be powered by the self contained power supply causing said computer to reset;</claim-text>
      <claim-text>and said ROM-based firmware program to take control and determine that an intrusion event occurred, thus erasing all data in said system and secondary storage.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A computer based security method to prevent unauthorized access to computer-stored information, comprising the steps of: providing a mechanism for detecting an intrusion into said computer; employing a self contained power supply to provide sufficient operation time for said computer to execute specific protective actions; resetting said central processing unit of said computer, responsive to said intrusion detection;</claim-text>
      <claim-text>and switching to said self contained power supply responsive to said intrusion detection mechanism;</claim-text>
      <claim-text>and resetting said central processing unit of said computer responsive to said intrusion detection mechanism; providing a ROM-based firmware program containing a procedure in said firmware program, to specify the data, files and objects in secondary storage, that are to be overwritten or deleted from said computer file system upon said intrusion, and upon said intrusion, said system immediately executes specific protection actions against sensitive data objects contained in a security priority list of data structures.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The system of claim 16 further including the steps of: detecting unauthorized removal of the covers of said computer system, triggers said intrusion detection mechanism.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 17, further including the steps of: providing said intrusion detection mechanism as a spring-loaded switch, within said computer system, which is maintained in the electrically open position by the shear weight of said computer system and when said computer is moved or relocated, said switch closes, triggering said intrusion detection mechanism.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 18 further including the steps of: detecting the unauthorized removal of the covers of said computer system, triggers said intrusion detection mechanism.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of 16, further including the steps of: providing said power supply in the form of a battery, sized to provide several minutes of operation of the computer system and all its integrated secondary storage devices.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The method of claim 16, further including the steps of: providing said intrusion detection mechanism as a magnetic coupling of the continued proximity of the floor or table upon which said computer system rests.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The method of claim 16, further including the steps of: providing an optional processor within said computer system, to take over the execution of an equivalent process in the event the central processing unit is inoperable.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The method of claim 16, further including the steps of: triggering said intrusion mechanism, causes said system to be powered by the self contained power supply causing said computer to reset;</claim-text>
      <claim-text>and said ROM-based firmware program to take control and determine that an intrusion event occurred, thus erasing all data in said system and secondary storage.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The method of claim 16, further including the steps of: personalizing said firmware, by means of tables stored in non-private RAM, to erase various user critical data first to assure their destruction.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. A computer based security method to prevent unauthorized access to computer-stored information, comprising the steps of: detecting an intrusion into said computer or of the unauthorized removal of the covers of said computer system, triggers an intrusion detection mechanism; providing a self contained power supply to provide sufficient operation time for said computer to execute specific protective actions; resetting the central processing unit of said computer, responsive to said intrusion detection; switching to said self contained power supply responsive to said intrusion detection mechanism; resetting said central processing unit of said computer responsive to said intrusion detection mechanism; providing a ROM-based firmware program containing a procedure in said firmware program, to specify the data, files and objects in secondary storage, that are to be overwritten or deleted from said computer file system upon said intrusion, and upon said intrusion, said system immediately executes specific protection actions against sensitive data objects contained in a security priority list of data structures; providing a processor within said computer system to take over the execution of an equivalent process in the event the central processing unit is inoperable;</claim-text>
      <claim-text>and triggering said intrusion mechanism,which causes said system to be powered by the self contained power supply causing said computer to reset;</claim-text>
      <claim-text>and said ROM-based firmware program takes control and determine that an intrusion event occurred, thus erasing all data in said system and secondary storage;</claim-text>
      <claim-text>and erasing various user critical data first, to assure their destruction by means of said firmware which is personalized by means of tables stored in non-private RAM.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The method of claim 25, further including the steps of: employing a spring loaded switch within said computer system which is maintained in the electrically open position by the shear weight of said computer system and when the computer is moved, said switch closes, triggering said intrusion detection system.</claim-text>
    </claim>
  </claims>
</questel-patent-document>