<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182028B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182028</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182028</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="25510355" extended-family-id="2286183">
      <document-id>
        <country>US</country>
        <doc-number>08965696</doc-number>
        <kind>A</kind>
        <date>19971107</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08965696</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>2382785</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>96569697</doc-number>
        <kind>A</kind>
        <date>19971107</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08965696</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G10L  15/18        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>15</main-group>
        <subgroup>18</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>704009000</text>
        <class>704</class>
        <subclass>009000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>704010000</text>
        <class>704</class>
        <subclass>010000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>704E15018</text>
        <class>704</class>
        <subclass>E15018</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G10L-015/18</text>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>15</main-group>
        <subgroup>18</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G10L-015/18</classification-symbol>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>15</main-group>
        <subgroup>18</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G10L-015/183</classification-symbol>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>15</main-group>
        <subgroup>183</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G10L-025/30</classification-symbol>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>25</main-group>
        <subgroup>30</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S10L-015/183</classification-symbol>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S10L-025/30</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>11</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>8</number-of-drawing-sheets>
      <number-of-figures>8</number-of-figures>
      <image-key data-format="questel">US6182028</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method, device and system for part-of-speech disambiguation</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>KAJI HIROYUKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4916614</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4916614</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>SU KEH-YIH, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5418717</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5418717</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>RICHARDSON STEPHEN DARROW, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5752052</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5752052</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SCHABES YVES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5799269</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5799269</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>CHURCH KENNETH W</text>
          <document-id>
            <country>US</country>
            <doc-number>5146405</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5146405</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>ZERNIK URI</text>
          <document-id>
            <country>US</country>
            <doc-number>5383120</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5383120</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>Bennello, Julian, Andrew W. Mackie, and James A. Anderson. 1989. Syntatic category disambiguation with neural networks. Computer Speech and Language 3: 203-217.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>DeRose, Steven J. 1988. Grammatical category disambiguation by statistical optimization. Computional Linguistics 14 (1): 31-39.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Schmid, Helmut. 1994. Part-of Speech tagging with neural networks. In Proceedings, Fifteenth International Conference on Computational Linguistics, 172-176.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Kempe, Andre. 1994. Probabilistic tagging with feature structures. In Proceedings, Fifteenth International Conference on Computional Linguistics.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Motorola, Inc.</orgname>
            <address>
              <address-1>Schaumburg, IL, US</address-1>
              <city>Schaumburg</city>
              <state>IL</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>MOTOROLA</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Karaali, Orhan</name>
            <address>
              <address-1>Rolling Meadows, IL, US</address-1>
              <city>Rolling Meadows</city>
              <state>IL</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Mackie, Andrew William</name>
            <address>
              <address-1>Schaumburg, IL, US</address-1>
              <city>Schaumburg</city>
              <state>IL</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Stockley, Darleen J.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Hudspeth, David R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method (300), device (408), and system (400) provide part-of-speech disambiguation for words based on hybrid neural-network and stochastic processing.
      <br/>
      The method disambiguates the part-of-speech tags of text tokens by obtaining a set of probabilistically annotated tags for each text token, determining a locally predicted tag for each text token based on the local context of the text token, determining an alternative tag for each text token based on the expanded context of the text token, and choosing between the locally predicted tag and the alternative tag when the locally predicted tag and the alternative tag are different.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The present invention relates to part-of-speech disambiguation, and more particularly to combining neural-network and stochastic processors into a hybrid system to accomplish such disambiguation.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      Part-of-speech disambiguation is the process of assigning the correct part of speech to each word in a sentence, based on the word's usage in the sentence.
      <br/>
      For example, the part of speech of the English word "record" may be either noun or verb, depending on the context in which the word is used; in the sentence "John wants to record a record", the first occurrence of "record" is used as a verb and the second is used as a noun.
      <br/>
      The accurate recognition of this distinction is particularly important in a text-to-speech system, because "record" is pronounced differently depending on whether it is a noun or verb.
    </p>
    <p num="3">
      As shown in FIG. 1, numeral 100, to disambiguate the parts-of- speech of words in a text, part-of-speech disambiguation systems typically use the following three-step process.
      <br/>
      Step 1 is the tokenization step, in which a text stream (101) is tokenized into a sequence of text tokens (104) by a text tokenizer (102) as specified by a tokenization knowledge database (103).
      <br/>
      The tokenization knowledge database typically contains predetermined rules that are used to identify textual elements, which are classifiable by part of speech.
      <br/>
      Examples of such textual elements are words, punctuation marks, and special symbols such as "%" and "$".
      <br/>
      Step 2 is the lexicon access step, in which each text token is looked up in a lexicon (106) by a lexicon accessor (105).
      <br/>
      The lexicon consists of a static lexicon (107) that contains a plurality of textual elements and corresponding part-of-speech tags, and a dynamic lexicon (108) that can generate part-of-speech tags for the textual elements that are not stored in the static lexicon.
      <br/>
      Because some textual elements (e.g., the word "record") have more than one part of speech, the lexicon access step will result in at least one part-of-speech tag being assigned to each text token; the output of the lexicon access step is therefore a sequence of ambiguously tagged text tokens (109).
      <br/>
      Step 3 is the disambiguation step, in which all part-of-speech ambiguities in the sequence of ambiguously tagged text tokens are resolved by the disambiguator (110) as specified by the disambiguation knowledge database (111), thus resulting in a sequence of unambiguously tagged text tokens (112).
    </p>
    <p num="4">
      An example of the application of the above process is presented in FIG. 2, numeral 200.
      <br/>
      A text stream (201) is input into the tokenization step, which yields a sequence of untagged text tokens (202) as its output.
      <br/>
      The sequence of untagged text tokens is input into the lexicon access step, which yields a sequence of ambiguously tagged text tokens as its output.
      <br/>
      As may be seen in FIG. 2, several text tokens have more than one tag associated with them; for example, "wants" is an ambiguously tagged text token (204), because it may be used as either a plural noun (tag "NNS") or a third-person, present tense verb (tag "VBZ").
      <br/>
      The set of all possible tag sequences based on the sequence of ambiguously tagged text tokens is represented by a directed acyclic graph of tag sequences (203).
      <br/>
      The sequence of ambiguously tagged text tokens is input into the disambiguation step, which determines a best path (205) through the directed acyclic graph of tag sequences, thus yielding a sequence of unambiguously tagged text tokens (206).
    </p>
    <p num="5">
      It is known in the art that local context is a strong indicator of a word's part of speech; hence stochastic systems based on the statistical modeling of word and tag collocations have proven successful.
      <br/>
      However, these systems fail predictably for syntactic structures that involve non-local dependencies.
      <br/>
      Because non-local dependencies are beyond the limits of stochastic systems, such effects must be accounted for by systems that can process expanded context.
      <br/>
      Two problems to be considered in developing such systems are: identifying and placing appropriate limits on the amount of expanded context to be processed, and balancing the contribution of the evidence provided by local and expanded context processing.
    </p>
    <p num="6">Hence, there is a need for a method, device and system for part-of-speech disambiguation that advantageously combines the processing of both local and expanded context.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="7">
      FIG. 1 is a schematic representation of a part-of-speech disambiguation system for disambiguating the parts-of-speech of text tokens as is known in the art.
      <br/>
      FIG. 2 is a schematic representation of the processing of an input text by the system of FIG. as is known in the art.
      <br/>
      FIG. 3 is a flow chart of one embodiment of steps in accordance with the present invention, which performs part-of-speech disambiguation by evaluation of local and expanded context.
      <br/>
      FIG. 4 is a schematic representation of one embodiment of a hybrid part-of-speech disambiguator that evaluates local and expanded context in accordance with the present invention.
      <br/>
      FIG. 5 is a schematic representation of one embodiment of a stochastic part-of-speech disambiguator that evaluates local context in accordance with the present invention.
      <br/>
      FIG. 6 is a schematic representation of one embodiment of a neural network part-of-speech disambiguator that evaluates expanded context in accordance with the present invention.
      <br/>
      FIG. 7 is a schematic representation of one embodiment of the construction of probabilistically weighted tag feature vectors in accordance with the present invention.
      <br/>
      FIG. 8 is a schematic representation of one embodiment of a rule-based tag discriminator in accordance with the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT</heading>
    <p num="8">
      The present invention provides a method, device and system for disambiguating the parts of speech of words in a text by considering information from both local and expanded context.
      <br/>
      Consideration of expanded context provides improvement of the accuracy of methods relying on local context alone.
      <br/>
      The accurate disambiguation of the parts of speech of words is useful in a variety of text-processing and speech-synthesis applications.
    </p>
    <p num="9">
      As shown in the steps set forth in FIG. 3, numeral 300, the method of the present invention provides, in response to text input, efficient generation of unambiguous part-of-speech tags for that text.
      <br/>
      The method includes the steps of: A) obtaining (301) a set of probabilistically annotated tags for a text token; B) determining (302) a locally predicted tag for the text token based on the local context of the text token and determining an alternative for the text token based on an expanded context of the text token; and C) choosing (303), using a discriminator, between the locally predicted tag and the alternative tag when the locally predicted tag and the alternative tag are different.
    </p>
    <p num="10">
      In step C, a choice of a lexically predicted tag may further be included.
      <br/>
      The lexically predicted tag is defined as the most probable tag for the text token.
    </p>
    <p num="11">The locally predicted tag is typically determined by using one of: A) a stochastic algorithm for part-of-speech disambiguation based on local context; B) a system of rules for part-of-speech disambiguation based on local context; C) a neural network trained to disambiguate parts-of-speech based on local context; D) a decision tree for part-of-speech disambiguation based on local context; E) a genetic algorithm for part-of-speech disambiguation based on local context; and F) a combination of at least two of A-E.</p>
    <p num="12">The alternative tag is generally determined by using one of: A) a system of rules for disambiguating parts-of-speech based on expanded context; B) a neural network trained to disambiguate parts-of-speech based on expanded context; C) a decision tree for part-of-speech disambiguation based on expanded context; D) a genetic algorithm for part-of-speech disambiguation based on expanded context; and E) a combination of at least two of A-D.</p>
    <p num="13">
      FIG. 4, numeral 400, is a schematic representation of one embodiment of a device/system in accordance with the present invention, which disambiguates ambiguously tagged text tokens.
      <br/>
      The device/system (408) is typically an article of manufacture, an application specific integrated circuit (ASIC), a microprocessor, a computer program, a computer, a speech synthesizer or the like.
      <br/>
      The device/system (408) receives as input a sequence of probabilistically tagged text tokens (401) and produces as output a corresponding sequence of unambiguously tagged text tokens (409).
      <br/>
      The device/system typically consists of a local-context tagger (402), an expanded-context tagger (403), and a discriminator (407).
    </p>
    <p num="14">
      The local-context tagger (402) receives as input the sequence of probabilistically tagged text tokens and produces as output a sequence of lexically predicted tags (405) and a sequence of text tokens with locally predicted tags (404).
      <br/>
      Each probabilistically tagged text token has at least one tag; in the case that the probabilistically tagged text token has a tag set consisting of a plurality of tags, the local-context tagger performs two disambiguation operations on the tag set, as follows.
      <br/>
      First, a lexically predicted tag is chosen from the tag set based on lexical probability.
      <br/>
      Second, a locally predicted tag is chosen from the tag set based on local context.
      <br/>
      Both of these operations are examined further in the discussion of FIG. 5 below.
    </p>
    <p num="15">
      The expanded-context tagger (403) receives as input the sequence of probabilistically tagged text tokens and produces as output a sequence of alternative tags (406).
      <br/>
      Each probabilistically tagged text token has at least one tag; in the case that the probabilistically tagged text token has a tag set consisting of a plurality of tags, the expanded-context tagger chooses the alternative tag based on an evaluation of the expanded context of the text token.
      <br/>
      This operation is examined further in the discussion of FIG. 6 below.
    </p>
    <p num="16">The discriminator (407) receives as input the sequence of probabilistically tagged text tokens and the sequence of lexically predicted tags from the local-context tagger and the sequence of alternative tags from the expanded-context tagger and outputs a sequence of unambiguously tagged text tokens based on an evaluation of differences between the input tags as presented in the discussion of FIG. 8 below.</p>
    <p num="17">
      Probabilistically tagged text tokens 401 is the input stream that is processed by both the local-context tagger 402 and the expanded-context tagger 403.
      <br/>
      A probabilistically annotated text token is constructed by annotating each token in the input stream with the probabilistically annotated tags stored in the probabilistically annotated lexicon 701, a sample record of which is shown in FIG. 7 as element 703.
    </p>
    <p num="18">
      Lexically predicted tags 405 is an output of the local-context tagger and is an input to the discriminator 407.
      <br/>
      Lexically predicted tags 405 is generated by examining the probabilistic annotations of the probabilistically tagged text tokens and choosing, for each text token, the most probable tag.
      <br/>
      Given and input stream of n text tokens, the corresponding stream of lexically predicted tags is n elements in length, with the Ith element of the tag stream corresponding to the Ith element of the stream of text tokens.
    </p>
    <p num="19">
      Text tokens with locally predicted tags 404 is an output of the local-context tagger and is one of the three input streams to the discriminator.
      <br/>
      Each of the input streams to the discriminator contains a sequence of tags, wherein for each input stream the sequence of tags is chosen by a tag disambiguation algorithm operating on the same sequence of probabilistically tagged text tokens.
      <br/>
      In addition, each tag in the stream of tags in text tokens with locally predicted tags 404 is associated with its corresponding text token.
    </p>
    <p num="20">
      Alternative tags 406 is the output of the expanded context tagger and is input to the discriminator.
      <br/>
      Alternative tags 406 is the same format as element 404 (i.e., as a stream of tags, each one of which corresponds to a text token in the input stream).
      <br/>
      Unambiguously tagged text tokens 409 is the output of the device/system 408 of the present invention, and corresponds to element 807 in FIG. 8 below.
      <br/>
      This is the sequence of input tokens, each of which is annotated by exactly one tag.
    </p>
    <p num="21">
      FIG. 5, numeral 500, is a schematic representation of one embodiment of a device/system in accordance with the local-context tagger (510) of the present invention, which disambiguates probabilistically tagged text tokens according to the tokens' local context.
      <br/>
      The local-context tagger receives as input a sequence of probabilistically tagged text tokens (501) and produces as output a sequence of lexically predicted tags (505) and a sequence of text tokens with locally predicted tags (509).
    </p>
    <p num="22">
      A local-context processor (502) processes the probabilistically tagged text tokens and produces three output streams as follows.
      <br/>
      The first stream is a sequence of lexically predicted tags (505), which is generated by examining the probabilistic annotations of the probabilistically tagged text tokens and choosing, for each text token, the most probable tag.
      <br/>
      In the case of equally probable tags, a deterministic algorithm (e.g., sort order of tag codes) is employed to generate a single tag; this is to ensure that the discriminator can rely on deterministic input in this stream.
      <br/>
      The second stream is an annotated sequence of probabilistically tagged text tokens (504).
      <br/>
      The annotations add information of use to the specific local-context tagger algorithm used for disambiguation; e.g., capitalization facts, etc.
      <br/>
      Finally, the third stream is a set of tags in local context (503) for each text token.
      <br/>
      In the case of bigram-based stochastic disambiguation, these sets would consist of tag pairs corresponding to all possible collocations between the tags of two contiguous text tokens; e.g., if the first text token had n possible tags and the second text token had m possible tags, the cardinality of the set of tags in context would be mn.
    </p>
    <p num="23">
      The tag-context disambiguator (508) disambiguates the tag sets in the sequence of probabilistically tagged text tokens by using a predetermined local-context disambiguation algorithm, based on the tag-context probabilities (507) provided by the tag-context knowledge database (506).
      <br/>
      For example, if the local-context disambiguation algorithm was bigram-based stochastic disambiguation, these probabilities would be the conditional probabilities of each tag in the tag set of the current text token when preceded by a tag in the tag set of the previous text token, as determined by corpus analysis.
      <br/>
      A Viterbi search is typically used to ensure that the calculation of the optimal path through the lattice of tag sets proceeds in linear time relative to the length of the path.
      <br/>
      The output of this process is a sequence of text tokens with locally predicted tags (509).
    </p>
    <p num="24">
      The neural network produces an output hypothesis vector based on its input vectors, Stream 2, Stream 3, and Stream 4 and the internal transfer functions used by the processing elements (PE's).
      <br/>
      The coefficients used in the transfer functions are varied during the training process to vary the output vector.
      <br/>
      The coefficients of the transfer functions are collectively referred to as the weights of the neural network, and the weights are varied in the training process to vary the output vector produced by given input vectors.
      <br/>
      The weights are set to small random values initially in the range of -0.01 and 0.01. The context description serves as an input vector and is applied to the inputs of the neural network.
      <br/>
      The context description is processed according to the neural network weight values to produce an output vector, i.e., the associated alternate tag representation.
      <br/>
      At the beginning of the training session, the associated alternate tag representation is not meaningful since the neural network weights are random values.
      <br/>
      An error signal vector is generated in proportion to the distance between the associated alternate tag representation and the assigned target alternate tag representation, Stream 1.
    </p>
    <p num="25">The error signal is calculated to be the raw distance between the associated alternate tag representation and the target alternate tag representation by, for example, using a Euclidean distance measure, shown in Equation 1.</p>
    <p num="26">Equation 1</p>
    <p num="27">(Equation image '1' not included in text)</p>
    <p num="28">In Equation 1, "E" represents the error signal, and "d" and "o" are both k-dimensional vectors (i.e., each have k elements); "d" represents the "assigned target alternate tag representation" and "o" represents the "associated alternate tag representation" described above.</p>
    <p num="29">
      After computation of the error signal, the weight values are then adjusted in a direction to reduce the error signal.
      <br/>
      This process is repeated a number of times for the associated pairs of input context descriptions and assigned target alternate tag representations.
      <br/>
      This process of adjusting the weights to bring the associated alternate tag representation closer to the assigned target alternate tag representation is the training of the neural network.
      <br/>
      This training uses the standard back propagation of errors method.
      <br/>
      Once the neural network is trained, the weight values possess the information necessary to convert the context description to an output vector similar in value to the assigned target alternate tag representation.
      <br/>
      The preferred neural network implementation requires up to ten million presentations of the context description to its inputs and the following weight adjustments before the neural network is considered fully trained.
    </p>
    <p num="30">
      The neural network contains blocks with two kinds of activation functions, sigmoid and softmax, as are known in the art.
      <br/>
      The softmax activation function is shown in Equation 2 (where I is the input to the transfer function, which is the sum of all of the weighted inputs to the PE) and the sigmoid activation function is shown in Equation 3.
    </p>
    <p num="31">Equation 2</p>
    <p num="32">(Equation image '2' not included in text)</p>
    <p num="33">Equation 3</p>
    <p num="34">(Equation image '3' not included in text)</p>
    <p num="35">In Equation 2 (softmax activation function) and Equation 3 (sigmoid activation function), "I" represents the input to the activation function and represents the sum of all of the weighted inputs to the PE ("processing element"). "I" is well known in the art.</p>
    <p num="36">
      FIG. 6, numeral 600, illustrates the neural network architecture utilized by the present invention in a preferred embodiment.
      <br/>
      Stream 2 (601), the tags are fed into the input block 1 (604).
      <br/>
      The input block 1 (604) then extracts the expanded context, which, in the present embodiment, is defined as the four previous, the current, and four future tags.
      <br/>
      The input block 1 (604) passes the four previous and four future tags into neural network block 4 (607).
      <br/>
      There are 46 possible tags, which are coded with 1-of-n coding.
      <br/>
      The four previous tags produce 184 outputs (4*46).
      <br/>
      The four future tags produce another 184 outputs (4*46).
      <br/>
      The neural network block 4 (607), uses sigmoid transfer functions and has 20 Processing Elements (PEs).
      <br/>
      The neural network block 4 (607) passes its output to the neural network block 7 (610).
      <br/>
      The input block 1 (604) passes the current tag to the neural network block 8 (611).
    </p>
    <p num="37">
      Stream 3 (602), the features are fed into the input block 2 (605).
      <br/>
      The input block 2 (605) then extracts the four previous, the current, and four future features.
      <br/>
      The input block 2 (605) passes the four previous and four future features into neural network block 5 (608).
      <br/>
      There are 24 possible features and they are coded with m-of-n coding.
      <br/>
      The four previous features produce 96 outputs (4*24).
      <br/>
      The four future features produce another 96 outputs (4*24).
      <br/>
      The neural network block 5 (608), uses sigmoid transfer functions and has 20 Processing Elements (PEs).
      <br/>
      The neural network block 5 (608) passes its output to the neural network block 7 (610).
      <br/>
      The input block 2 (605) passes the current tag to the neural network block 8 (611).
    </p>
    <p num="38">
      Stream 4 (603), the boundaries are fed into the input block 3 (606).
      <br/>
      The input block 3 (606) then passes the boundaries into neural network block 6 (609).
      <br/>
      The neural network block 6 (609), uses sigmoid transfer functions and has 10 Processing Elements (PEs).
      <br/>
      The neural network block 6 (609) passes its output to the neural network block 7 (610).
    </p>
    <p num="39">
      The neural network block 7 (610), uses sigmoid transfer functions and has 20 Processing Elements (PEs).
      <br/>
      The neural network block 7 (610) passes its output to the neural network block 8 (611).
    </p>
    <p num="40">
      The neural network block 8 (611), uses softmax transfer functions and has 46 Processing Elements (PEs).
      <br/>
      The neural network block 8 (611) calculates and passes the most likely alternate tag to the output block 9 (612).
      <br/>
      The output block 9 (612), outputs the alternate tag to the stream 1 (613).
    </p>
    <p num="41">
      During the training phase of the expanded-context tagger (614), the stream 1 (613), the numeric encoding of the target alternate tags is fed into output block 9 (612).
      <br/>
      The output block 9 (612) calculates the error signal and backpropagates the error signal to the neural network block 8 (611).
      <br/>
      This error signal is then backpropagated into the neural network blocks 7 (610), 6 (609), 5 (608), and 4 (607).
    </p>
    <p num="42">During the backpropagation of error signal the weights of the neural network blocks are modified so that the error signal is reduced.</p>
    <p num="43">
      FIG. 7, numeral 700, is a schematic representation of one embodiment of the construction of probabilistically weighted tag feature vectors in accordance with the present invention.
      <br/>
      The probabilistically annotated lexicon (701) contains records (703) for each word in which are stored the tags that may be associated with the word, each of which is labeled with a probability of occurrence based on corpus analysis.
      <br/>
      In the example, the word "round" has been determined to occur 5% of the time in a reference corpus as an adjective (tag "JJ"), 85% of the time as a noun (tag "NN"), 7% of the time as a base form verb(tag "VB"), and 3% of the time as a present-tense, non-third person singular verb(tag "VBP").
    </p>
    <p num="44">
      The list of tag feature vectors (702) contains a tag feature vector for each of the 45 part-of-speech tags in the present embodiment.
      <br/>
      Each tag feature vector contains an N-element Boolean vector (N=23 in the present embodiment), each element of which is a single bit which indicates the presence (signified by "1") or absence (signified by "0") of a specific feature.
      <br/>
      For example, in the present embodiment, the first bit of the tag feature vector indicates whether or not the corresponding tag belongs to an open class; the second bit indicates whether or not the corresponding tag identifies a specifier; the third bit indicates whether or not the corresponding tag identifies a modifier; etc.
      <br/>
      Provided below are Tables 1 and 2 which provide a listing of tag feature vector for each of the 46 part-of-speech tags and 23 tag feature definitions of each of the N-elements in the Boolean vector.
    </p>
    <p num="45">
      In the present example, to construct the probabilistically weighted feature vector for the word "round", a probabilistically weighted feature vector is constructed for each of the tags of "round" based on the tag probabilities associated with "round" as derived from the reference corpus.
      <br/>
      Thus, in the example, the adjective tag ("JJ"), with a 5% probability of occurrence, results in a feature vector containing 0.05 in its first, third, and fifth positions (corresponding to the adjective tag's featural decomposition of �+open, +modifier, +static�).
    </p>
    <p num="46">
      The above process is applied to the four tags of "round", resulting in four probabilistically weighted feature vectors (705), which are then summed to yield the probabilistically weighted feature vector for the word "round" (706).
      <br/>
      The probabilistically weighted feature vector indicates the probabilities of occurrence of particular features of "round"; e.g., there is a 100% probability that (in the current example) the word "round" occurs as an open-class usage, and a 95% probability that "round" is a head (as opposed to a modifier (5%) or specifier (0%)).
      <br/>
      Similarly, there is a 90% probability that "round" is used statically (i.e., in a nominal construction) and 10% that "round" is used dynamically (i.e., in a verbal construction).
      <br/>
      The probabilistically weighted feature vector is presented to the neural network so that the network can train on a richer representation of the syntactic functionality of words than can be provided by tags alone.
    </p>
    <p num="47">
      FIG. 8 , numeral 800, is a schematic representation of one embodiment of a device/system in accordance with the discriminator (806) of the present invention, which discriminates between the tags applied to a given text token by different disambiguation algorithms, based on the observed characteristics of the algorithms.
      <br/>
      The tag stream controller (804) of the discriminator receives as input a plurality of input streams, each of which contains a sequence of tags, wherein for each input stream the sequence of tags is chosen by a tag disambiguation algorithm operating on the same sequence of probabilistically tagged text tokens.
      <br/>
      In the present embodiment, the following three streams are used: the sequence of text tokens with locally predicted tags (801), the sequence of lexically predicted tags (802), and the sequence of alternative tags (803).
      <br/>
      In the case that a tag in at least one of the three streams fails to agree with the others for a given text token, an output tag is determined by discriminating among the plurality of tags, by reference to procedures stored in the tag discrimination knowledge database (805).
      <br/>
      In the present embodiment, the discrimination knowledge database contains a set of rules characterizing the accuracy of the different tagging algorithms relative to predetermined input.
      <br/>
      Alternatively, this information could be provided by a neural network trained on the observed behavior of the tagging algorithms.
      <br/>
      The output of the discriminator is a sequence of unambiguously tagged text tokens (807).
    </p>
    <p num="48">
      The method may be implemented by computer readable program code on a computer usable medium.
      <br/>
      Software implementing the method may be embedded in a microprocessor or a digital signal processor.
      <br/>
      The system may be embodied in a tangible medium having computer program code.
      <br/>
      Alternatively, an application specific integrated circuit (ASIC) may implement the method, or a combination of any of these implementations may be used.
      <br/>
      For example, the method may be implemented by a computer or a speech synthesizer.
    </p>
    <p num="49">
      Thus, the present invention may be embodied in an article of manufacture such as an application specific integrated circuit, a microprocessor, a computer program, a computer or a speech synthesizer which is used for disambiguating the parts-of-speech of text tokens.
      <br/>
      Where the article of manufacture includes a device for implementing a computer usable medium, the computer usable medium typically includes a computer readable program code thereon for implementing the following software routines.
      <br/>
      Alternatively, the article of manufacture may include hardware circuitry to implement the software routines.
      <br/>
      The hardware circuitry of the article of manufacture includes a local-context tagger (402), an expanded-context tagger (403) and a discriminator (407).
    </p>
    <p num="50">
      The local-context tagger (402) is coupled to receive a sequence of probabilistically tagged text tokens and is for determining a locally predicted tag for a text token based on a local context of the text token, as described more specifically above.
      <br/>
      The expanded-context tagger (403) is coupled to receive the sequence of probabilistically tagged text tokens and is used for determining an alternative tag for the text token based on an expanded context of the text token.
      <br/>
      The discriminator (407) is coupled to the local-context tagger and the expanded-context tagger, for choosing between a locally predicted tag and an alternative tag for the text token, where the locally predicted tag and the alternative tag are different.
    </p>
    <p num="51">The local-context tagger generally includes: a local-context processor (502), coupled to receive a sequence of probabilistically tagged text tokens, for determining the local context of the text token; a tag-context knowledge database (506), coupled to receive a sequence of tags in context, for determining tag-context probabilities; and a tag-context disambiguator (508), coupled to the local-context processor and the tag-context knowledge database, for determining the locally predicted tag for the text token based on the local context of the text token.</p>
    <p num="52">The discriminator generally includes: a tag-stream controller (804), coupled to receive a plurality of tag streams, for producing a sequence of unambiguously tagged text tokens; and a tag-discrimination knowledge database (805), coupled to the tag-stream controller, having a plurality of systems/computer readable codes/circuits for discriminating between tags provided by the plurality of tag streams.</p>
    <p num="53">Where the article of manufacture includes a computer program, a computer, or a speech synthesizer for disambiguating the parts-of-speech of text tokens, the article of manufacture has a computer usable medium with a computer readable program code thereon wherein the computer readable program code implements the steps of: A) determining a locally predicted tag for a text token based on a local context of the text token; B) determining an alternative tag for the text token based on an expanded context of the text token; and C) choosing, using a discriminator routine, between a locally predicted tag and an alternative tag for the text token, where the locally predicted tag and the alternative tag are different.</p>
    <p num="54">Determining a locally predicted tag generally includes: A) using a local-context routine, coupled to receive a sequence of probabilistically tagged text tokens, for determining the local context of the text token; B) using a tag-context knowledge database, coupled to receive a sequence of tags in context, for determining tag-context probabilities; and C) using a tag-context disambiguator, coupled to the local-context routine and the tag-context knowledge database, for determining the locally predicted tag for the text token based on the local context of the text token.</p>
    <p num="55">Choosing between a locally predicted tag and an alternative tag for the text token generally includes: A) using a tag-stream controller routine, coupled to receive a plurality of tag streams, for producing a sequence of unambiguously tagged text tokens; and B) using a tag-discrimination knowledge database, coupled to the tag-stream controller routine, having a plurality of systems/computer readable codes/circuits for discriminating between tags provided by the plurality of tag streams.</p>
    <p num="56">
      -- TABLE 1
      <br/>
      -- Tag Feature Vectors: LDC Tagset
      <br/>
      -- Tag:    Feature Vector:         Description:
      <br/>
      -- -   00100011100000000000000 Pound sign
      <br/>
      -- $       00100001100000000000000 Dollar sign
      <br/>
      -- " 00000010100100000000000 Open quotes
      <br/>
      -- " 00000010010100000000000 Neutral quotes
      <br/>
      -- " 00000010001100000000000 Close quotes
      <br/>
      -- (       00000010100010000000000 Left parenthesis
      <br/>
      -- )       00000010001010000000000 Right parenthesis
      <br/>
      -- ,       00000010010000000000000 Comma
      <br/>
      -- .       00000010001000000000000 Period
      <br/>
      -- :       00000010011000000000000 Colon
      <br/>
      -- CC      00000000010000000000000 Coordinating conjunction
      <br/>
      -- CD      00101000000001100000000 Cardinal number
      <br/>
      -- DT      01000000000000000000000 Determiner
      <br/>
      -- EX      00011000000000000000000 Existential there
      <br/>
      -- FW      10000000000000000000000 Foreign word
      <br/>
      -- IN      00001000100000000000000 Preposition or subordinating
      <br/>
      --                                 conjunction
      <br/>
      -- JJ      10101000000000000000000 Adjective
      <br/>
      -- JJR     10101000000000000000010 Comparative adjective
      <br/>
      -- JJS     10101000000000000000001 Superlative adjective
      <br/>
      -- LS      00000001100000000000000 List item
      <br/>
      -- MD      00100100100000000000000 Modal auxiliary
      <br/>
      -- NN      10011000000001000000000 Singular or mass noun
      <br/>
      -- NNP     10011000000001000000100 Singular proper noun
      <br/>
      -- NNPS    10011000000000100000100 Plural proper noun
      <br/>
      -- NNS     10011000000000100000000 Plural noun
      <br/>
      -- PDT     01000000100000000000000 Predeterminer
      <br/>
      -- POS     00001000001000000001000 Possessive marker
      <br/>
      -- PRP     00011000000001100000000 Personal pronoun
      <br/>
      -- PRP$    01001000100000000001000 Possessive personal pronoun
      <br/>
      -- RB      10100100000000000000000 Adverb
      <br/>
      -- RBR     10100100000000000000010 Comparative adverb
      <br/>
      -- RBS     10100100000000000000001 Superlative adverb
      <br/>
      -- RP      00000100001000000000000 Adverb or particle
      <br/>
      -- SYM     00000001000000000000000 Symbol
      <br/>
      -- TO      00000000100000000000000 Prepositional or infinitival to
      <br/>
      -- UH      00010000000000000000000 Interjection
      <br/>
      -- VB      10010100000000000000000 Base-form verb
      <br/>
      -- VBD     10010100000001110000000 Past-tense verb
      <br/>
      -- VBG     10010100000000001100000 Gerund or present participle
      <br/>
      -- VBN     10010100000000010100000 Past participle
      <br/>
      -- VBP     10010100000000101000000 Present-tense, non-3rd singular
      <br/>
      --                                 verb
      <br/>
      -- VBZ     10010100000001001000000 Present-tense, 3rd singular verb
      <br/>
      -- WDT     01000000000000000010000 Wh-determiner
      <br/>
      -- WP      00011000000001100010000 Wh-pronoun
      <br/>
      -- WP$     01001000100000000011000 Possessive wh-pronoun
      <br/>
      -- WRB     00100100000000000010000 Wh-adverb
    </p>
    <p num="57">
      -- TABLE 2
      <br/>
      -- Tag Feature Definitions: LDC Tagset
      <br/>
      -- 1    �+open� Open-class words (i.e., nouns, verbs, adjectives, and
      <br/>
      --                    adverbs); assigned to all tags of the form NNx, JJx,
      <br/>
      --                    RBx, and VBx (where "x" stands for optional
      <br/>
      --                    additional characters), as well as the "foreign word"
      <br/>
      --                    (FW) tag.
      <br/>
      -- 2    �+specifier� Specifiers (i.e., determiners, predeterminers, and
      <br/>
      --                    possessive pronouns); assigned to the DT, PDT,
      <br/>
      --                    PRP$, WDT, and WP$ tags.
      <br/>
      -- 3    �+modifier� Modifiers (e.g., adjectives and adverbs); assigned to
      <br/>
      --                    all tags of the form JJx and RBx, as well as to the
      <br/>
      --                    pound-sign, dollar-sign, CD, MD, and WRB tags.
      <br/>
      -- 4    �+head� Phrasal heads (e.g., nouns and verbs); assigned to all
      <br/>
      --                    tags of the form NNx and VBx, as well as to the
      <br/>
      --                    EX, PRP, UH, and WP tags.
      <br/>
      -- 5    �+static� Static usage (e.g., nouns and adjectives); assigned to
      <br/>
      --                    all tags of the form JJx and NNx, as well as to the
      <br/>
      --                    CD, EX, IN, POS, PRP, WP, and WP$ tags.
      <br/>
      -- 6    �+dynamic� Dynamic usage (e.g., verbs and adverbs); assigned
      <br/>
      --                    to all tags of the form RBx and VBx, as well as to
      <br/>
      --                    the MD, RP, and WRB tags.
      <br/>
      -- 7    �+punctuation� Punctuation usage; assigned to the nine punctuation
      <br/>
      --                    tags (i.e., pound sign, the three "quotes" tags, the
      <br/>
      --                    two parenthesis tags, comma, period, and colon).
      <br/>
      -- 8    �+symbol� Symbolic usage; assigned to the LS and SYM tags,
      <br/>
      --                    as well as to the pound-sign and dollar-sign tags.
      <br/>
      -- 9    �+beginning� Indicates that the tag tends to occur at the beginning
      <br/>
      --                    of a constituent; assigned to the IN, LS, MD, PDT,
      <br/>
      --                    PRP$, TO, and WP$ tags, as well as to the pound-
      <br/>
      --                    sign, dollar-sign, left-parenthesis, and open-quotes
      <br/>
      --                    tags.
      <br/>
      -- 10   �+middle� Indicates that the tag tends to occur in the middle of
      <br/>
      --                    a constituent; assigned to the comma, colon, and CC
      <br/>
      --                    tags.
      <br/>
      -- 11   �+end� Indicates that the tag tends to occur at the end of a
      <br/>
      --                    constituent; assigned to the POS and RP tags, as
      <br/>
      --                    well as to the period, colon, close quotes, and right
      <br/>
      --                    parenthesis tags.
      <br/>
      -- 12   �+quote� Differentiates quotation marks from other
      <br/>
      --                    punctuation marks; assigned to the three "quotes"
      <br/>
      --                    tags.
      <br/>
      -- 13   �+parenthesis� Differentiates parentheses from other punctuation
      <br/>
      --                    marks; assigned to the two parenthesis tags.
      <br/>
      -- 14   �+singular� Singular agreement (of noun and verb forms).
      <br/>
      Note
      <br/>
      --                    that if a tag is marked both �+singular� and �+plural�
      <br/>
      --                    it will agree with either a singular or plural form; if
      <br/>
      --                    it is marked both �-singular� and �-plural�, it does
      <br/>
      --                    not require agreement at all.
      <br/>
      Assigned to the CD,
      <br/>
      --                    NN, NNP, PRP, VBD, VBZ, and WP tags.
      <br/>
      -- 15   �+plural� Plural agreement (of noun and verb forms).
      <br/>
      --                    Assigned to the CD, NNPS, NNS, PRP, VBD, VBP,
      <br/>
      --                    and WP tags.
      <br/>
      -- 16   �+past� Past tense (of verb forms only).
      <br/>
      Assigned to the
      <br/>
      --                    VBD and VBN tags.
      <br/>
      -- 17   �+present� Present tense (of verb forms only).
      <br/>
      Assigned to the
      <br/>
      --                    VBG, VBP, and VBZ tags.
      <br/>
      -- 18   �+participle� Participial usage (of verb forms only).
      <br/>
      Assigned to
      <br/>
      --                    the VBG and VBN tags.
      <br/>
      -- 19   �+wh-word� Signifies usage as a "wh-word" (e.g., the
      <br/>
      --                    interrogative pronouns "who" and "whom", etc.)
      <br/>
      --                    Assigned to all tags of the form Wx.
      <br/>
      -- 20   �+possessive� Possessive usage.
      <br/>
      Assigned to the POS, PRP$, and
      <br/>
      --                    WP$ tags.
      <br/>
      -- 21   �+proper� Differentiates proper nouns from all other nouns.
      <br/>
      --                    Assigned to the NNP and NNPS tags.
      <br/>
      -- 22   �+comparative� Comparative usage (of adjectives and adverbs).
      <br/>
      --                    Assigned to the JJR and RBR tags.
      <br/>
      -- 23   �+superlative� Superlative usage (of adjectives and adverbs).
      <br/>
      --                    Assigned to JJS and RBS tags.
    </p>
    <p num="58">
      The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics.
      <br/>
      The described embodiments are to be considered in all respects only as illustrative and not restrictive.
      <br/>
      The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description.
      <br/>
      All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for providing unambiguous part-of-speech tags to text tokens in an input text, comprising the steps of:</claim-text>
      <claim-text>A) obtaining a set of probabilistically annotated tags for a text token; B) determining a locally predicted tag for the text token based on a local context of at least one tag of another text token adjacent to the text token and determining an alternative tag for the text token based on an expanded context of the text token consisting of tags, features and boundaries;</claim-text>
      <claim-text>and C) choosing, utilizing a discriminator, between the locally predicted tag and the alternative tag when the locally predicted tag and the alternative tag are different.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 further including a choice of a lexically predicted tag in Step C, wherein the lexically predicted tag is the most probable tag for the text token.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1 wherein the locally predicted tag is determined by using one of: A) a stochastic algorithm for part-of-speech disambiguation based on local context; B) a system of rules for part-of-speech disambiguation based on local context; C) a neural network trained to disambiguate parts-of-speech based on local context; D) a decision tree for part-of-speech disambiguation based on local context; E) a genetic algorithm for part-of-speech disambiguation based on local context;</claim-text>
      <claim-text>and F) a combination of at least two of A-E.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1 wherein the alternative tag is determined by using one of: A) a system of rules for disambiguating parts-of-speech based on expanded context; B) a neural network trained to disambiguate parts-of-speech based on expanded context; C) a decision tree for part-of-speech disambiguation based on expanded context; D) a genetic algorithm for part-of-speech disambiguation based on expanded context;</claim-text>
      <claim-text>and E) a combination of at least two of A-D.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1 wherein the choice between the locally determined tag and the alternative tag is determined by using one of: A) a system of rules to discriminate between tags based on observed characteristics of a local-context tagger and an expanded-context tagger; B) a neural network trained to discriminate between tags based on observed characteristics of the local-context tagger and the expanded-context tagger; C) a decision tree trained to discriminate between tags based on observed characteristics of the local-context tagger and the expanded-context tagger; D) a genetic algorithm trained to discriminate between tags based on observed characteristics of the local-context tagger and the expanded-context tagger;</claim-text>
      <claim-text>and E) a combination of at least two of A-D.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. An article of manufacture/computer program/computer/speech synthesizer for disambiguating the parts-of-speech of text tokens, having a computer usable medium with a computer readable program code thereon wherein the computer readable program code implements the steps of: A) determining a locally predicted tag for a text token based on a local context of at least one tag of another text token adjacent to the text token; B) determining an alternative tag for the text token based on an expanded context of the text token consisting of tags, features and boundaries;</claim-text>
      <claim-text>and C) choosing, using a discriminator routine, between the locally predicted tag and the alternative tag for the text token, when A locally predicted tag and the alternative tag are different.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The article of manufacture/computer program/computer/speech synthesizer of claim 6 wherein determining a locally predicted tag includes: A) using a local-context routine, coupled to receive a sequence of probabilistically tagged text tokens, for determining the local context of the text token; B) using a tag-context knowledge database, coupled to receive a sequence of tags in context, for determining tag-context probabilities;</claim-text>
      <claim-text>and C) using a tag-context disambiguator, coupled to the local-context routine and the tag-context knowledge database, for determining the locally predicted tag for the text token based on the local context of the text token.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The article of manufacture/computer program/computer/speech synthesizer of claim 6 wherein choosing between a locally predicted tag and an alternative tag for the text token includes: A) using a tag-stream controller routine, coupled to receive a plurality of tag streams, for producing a sequence of unambiguously tagged text tokens;</claim-text>
      <claim-text>and B) using a tag-discrimination knowledge database, coupled to the tag-stream controller routine, having a plurality of systems/computer readable codes/circuits for discriminating between tags provided by the plurality of tag streams.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. An article of manufacture/application specific integrated circuit/microprocessor for disambiguating the parts-of-speech of text tokens, comprising: A) a local-context tagger, coupled to receive a sequence of probabilistically tagged text tokens, for determining a locally predicted tag for a text token based on a local context of at least one tag of another text token adjacent to the text token; B) an expanded-context tagger, coupled to receive the sequence of probabilistically tagged text tokens, for determining an alternative tag for the text token based on an expanded context of the text token consisting of tags, features and boundaries;</claim-text>
      <claim-text>and C) a discriminator, coupled to the local-context tagger and the expanded-context tagger, for choosing between the locally predicted tag and the alternative tag for the text token, when the locally predicted tag and the alternative tag are different.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The article of manufacture/application specific integrated circuit/microprocessor of claim 9 wherein the local-context tagger comprises: A) a local-context processor, coupled to receive a sequence of probabilistically tagged text tokens, for determining the local context of the text token; B) a tag-context knowledge database, coupled to receive a sequence of tags in context, for determining tag-context probabilities;</claim-text>
      <claim-text>and C) a tag-context disambiguator, coupled to the local-context processor and the tag-context knowledge database, for determining the locally predicted tag for the text token based on the local context of the text token.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The article of manufacture/application specific integrated circuit/microprocessor of claim 9 wherein the discriminator comprises: A) a tag-stream controller, coupled to receive a plurality of tag streams, for producing a sequence of unambiguously tagged text tokens;</claim-text>
      <claim-text>and B) a tag-discrimination knowledge database, coupled to the tag-stream controller, having a plurality of systems/computer readable codes/circuits for discriminating between tags provided by the plurality of tag streams.</claim-text>
    </claim>
  </claims>
</questel-patent-document>