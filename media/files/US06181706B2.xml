<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181706B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181706</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181706</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25471793" extended-family-id="42108341">
      <document-id>
        <country>US</country>
        <doc-number>08938680</doc-number>
        <kind>A</kind>
        <date>19970926</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08938680</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43164768</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>93868097</doc-number>
        <kind>A</kind>
        <date>19970926</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08938680</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L  12/64        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>64</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L  29/06        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>370412000</text>
        <class>370</class>
        <subclass>412000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>370474000</text>
        <class>370</class>
        <subclass>474000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-065/607</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>65</main-group>
        <subgroup>607</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131019</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-029/06027</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06027</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131019</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-2012/6483</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>2012</main-group>
        <subgroup>6483</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131005</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-2012/6489</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>2012</main-group>
        <subgroup>6489</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131005</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/4305</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>4305</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131005</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/4341</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>4341</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131005</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/4345</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>4345</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131005</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/43853</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>43853</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131005</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/44004</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>44004</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131005</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>8</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>7</number-of-drawing-sheets>
      <number-of-figures>7</number-of-figures>
      <image-key data-format="questel">US6181706</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Common buffer for multiple streams and control registers in an MPEG-2 compliant transport register</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HARDER JOHN W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5629140</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5629140</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>BLATTER HAROLD, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5844478</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5844478</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>SIRACUSA ROBERT J</text>
          <document-id>
            <country>US</country>
            <doc-number>5365272</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5365272</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>DEISS MICHAEL S</text>
          <document-id>
            <country>US</country>
            <doc-number>5381181</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5381181</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>WOO ARTHUR S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5425101</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5425101</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>MEYER EDWIN R</text>
          <document-id>
            <country>US</country>
            <doc-number>5502493</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5502493</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>SHELDRICK WAYNE S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5506904</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5506904</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>HOOGENBOOM CHRIS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5517250</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5517250</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>FUJINAMI YASUSHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5521922</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5521922</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>MATURI GREG, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5559999</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5559999</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>HOOGENBOOM CHRIS</text>
          <document-id>
            <country>US</country>
            <doc-number>5566089</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5566089</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>O'CALLAGHAN DANIEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5594492</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5594492</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>SUNG CHIH-TA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5594660</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5594660</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>SAEIJS RONALD W J J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5596581</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5596581</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>HUIZER CORNELIS M</text>
          <document-id>
            <country>US</country>
            <doc-number>5612981</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5612981</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>TAMER GREGORY G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5619501</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5619501</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>IBM TDB vol. 39, No. 04, Apr. 1996 "Design Architecture for MPEG2 Transport Demultiplexor Assist" by Abdulhafiz et al.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>"Digital Video: An Introduction to MPEG-2" by Haskell et al. Copyright 1997 by Chapman &amp; Hall.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>"MPEG Video Compression Standard" edited by Mitchell, et al. Copyright 1997 by Chapman &amp; Hall.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>"Digital Consumer Electronics Handbook" by Jurgen Copyright 1997 McGraw-Hill.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>IS/IEC 13818-1 "Information Technology-Generic Coding of Moving Pictures and Associated Audio: Systems" N0801 Nov. 13, 1994.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Anderson, Richard Eugene</name>
            <address>
              <address-1>Jericho, VT, US</address-1>
              <city>Jericho</city>
              <state>VT</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Foster, Eric Michael</name>
            <address>
              <address-1>Owego, NY, US</address-1>
              <city>Owego</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Rohrbaugh, George Wilson</name>
            <address>
              <address-1>Williston, VT, US</address-1>
              <city>Williston</city>
              <state>VT</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Steinberg, Esq., William H.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <orgname>Heslin &amp; Rothenberg, P.C.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Hsu, Alpus H.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method of decoding a multiplexed, system layer bitstream.
      <br/>
      The bitstream is made up of packets of audio, video, and system data.
      <br/>
      Each packet has a packet header, and data packets.
      <br/>
      The first step in the process is demultiplexing the bitstream into separate audio and video bitstreams for decompression while maintaining synchronization of the video and audio.
      <br/>
      The system data and the audio and video packets are next loaded into buffers, from which they are unloaded for subsequent decoding.
      <br/>
      The decoding is in accordance with the system data entries.
      <br/>
      The method is characterized by storing the system data and the audio and video packets in a single buffer.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">
      This invention relates to digital delivery systems, especially for digital video and digital audio data.
      <br/>
      More particularly, the invention relates to multiplexors, networks, distribution systems, demultiplexors, and multiplexed bitstreams, and especially to bitstreams carrying a system or transport layer, and one or more data layers of compressed digital video and digital audio data.
      <br/>
      More particularly, the invention relates to
    </p>
    <p num="2">
      the provision of a common memory, for example, a single logical memory array, as a transport buffer or packet buffer, to store all of the incoming packets, whether system packets, audio packets, or video packets, as well as many of the registers needed to operate the transport demultiplexor.
      <br/>
      The common buffer is filled by a loader after front end processing of the header data, and is emptied by three unloaders, one for audio data, one for video data, and one for systems data.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="3">
      Within the past decade, the advent of world-wide electronic communications systems has enhanced the way in which people can send and receive information.
      <br/>
      Moreover, the capabilities of real-time video and audio systems have greatly improved in recent years.
      <br/>
      Real-time video and audio systems require a large bandwidth.
      <br/>
      In order to provide services such as video-on-demand and videoconferencing to subscribers, an enormous amount of network bandwidth is required.
      <br/>
      In fact, network bandwidth is often the main inhibitor to the effectiveness of such systems.
    </p>
    <p num="4">
      In order to minimize the effects of the constraints imposed by the limited bandwidths of telecommunications networks, compression systems and standards have evolved.
      <br/>
      These standards prescribe the compression of video and audio data and the delivery of several programs and control data in a single bit stream transmitted in a bandwidth that would heretofore only accomodate one analog program.
    </p>
    <p num="5">
      One video and audio compression standard is the Moving Picture Experts Group ("MPEG") standard.
      <br/>
      Within the MPEG-2 standard, video compression is defined both within a given picture, i.e., spatial compression, and between pictures, i.e., temporal compression.
      <br/>
      Video compression within a picture is accomplished by conversion of the digital image from the time domain to the frequency domain by a discrete cosine transform, quantization, variable length coding, and Huffman coding.
      <br/>
      Video compression between pictures is accomplished via a process referred to as motion compensation, in which a motion vector is used to describe the translation of a set of picture elements (pels) from one picture to another.
      <br/>
      Audio compression is as defined in the standard.
    </p>
    <p num="6">
      The procedure for transporting the compressed bitstream from the transmitting end to the receiving end of the system, and for thereafter decompressing the bitstream at the receiving end, so that one of the many picture sequences is decompressed and may be displayed in real-time is specified in ISO 13818-1.
      <br/>
      ISO 13818-1 is the systems or transport layer portion of the MPEG-2 standard.
      <br/>
      This portion of the standard specifies packetization of audio and video elementary bitstreams into packetized elementary streams (PES), and the combinations of one or more audio and video packetized elementary streams into a single time division or packet multiplexed bitstream for transmission and the subsequent demultiplexing of the single bitstream into multiple bitstreams for decompression and display.
      <br/>
      The single time division or packet multiplexed bit stream is as shown from various architectural and logical perspectives in the FIGURES, especially FIGS. 1 to 5, where many packets make up a single bitstream.
    </p>
    <p num="7">
      The concept of packetization and the mechanism of packet multiplexing are shown in FIG. 1, denominated "Prior Art", where elementary streams are formed in an audio encoder, a video encoder, a source of other data, and a source of systems data.
      <br/>
      These elementary streams are packetized into packetized elementary streams, as described hereinbelow.
      <br/>
      The packetized elementary streams of audio data, and video data, and the packets of other data and systems data are packet multiplexed by the multiplexor into a system stream.
    </p>
    <p num="8">
      The time division or packet multiplexed bitstream is shown, for example, in FIGS. 2 and 5, both denominated "Prior Art", which gives an overview showing the time division or packet multiplexed bitstream.
      <br/>
      The bitstream is comprised of packets, as shown in FIG. 5.
      <br/>
      Each packet, as shown in FIG. 2, is, in turn, made up of a packet header, an optional adaptation field, and packet data bytes, i.e., payload.
    </p>
    <p num="9">
      The MPEG-2 System Layer has the basic task of facilitating the multiplexing of one or more programs made up of related audio and video bitstreams into a single bitstream for transmission through a transmission medium, and thereafter to facilitate the demultiplexing of the single bitstream into separate audio and video program bitstreams for decompression while maintaining synchronization.
      <br/>
      By a "Program" is meant a set of audio and video bitstreams having a common time base and intended to be presented simultaneously.
      <br/>
      To accomplish this, the System Layer defines the data stream syntax that provides for timing control and the synchronization and interleaving of the video and audio bitstreams.
      <br/>
      The system layer provides capability for (1) video and audio synchronization, (2) stream multiplex, (3) packet and stream identification, (4) error detection, (5) buffer management, (6) random access and program insertion, (7) private data, (8) conditional access, and (9) interoperability with other us networks, such as those using asynchronous transfer mode (ATM).
    </p>
    <p num="10">
      An MPEG-2 bitstream is made up of a system layer and compression layers.
      <br/>
      Under the MPEG-2 Standard (ISO/IEC 13818-1) a time division or packet multiplexed bit-stream consists of two layers, (1) a compression layer, also referred to as an inner layer, a payload layer, or a data layer, and (2) a system layer, also referred to as an outer layer or a control layer.
      <br/>
      The compression layer or inner layer contains the data fed to the video and audio decoders, and defines the coded video and audio data streams, while the system layer or outer layer provides the controls for demultiplexing the interleaved compression layers, and in doing so defines the functions necessary for combining the compressed data streams.
      <br/>
      This is shown in FIG. 3, denominated "Prior Art." As there shown a bitstream of, for example, a system layer and compression layer, is the input to a system decoder.
      <br/>
      In the system decoder the system layer data is demultiplexed into the compressed audio layer, the compressed video layer, and control data.
      <br/>
      The control data is shown in FIG. 3, denominated Prior Art, as the PCR (Program Clock Recovery) data, enable data, and start up values.
      <br/>
      The compressed data is sent to the respective audio and video data buffers, and through decoder control to the respective audio and video decoders.
    </p>
    <p num="11">
      The system layer supports a plurality of basic functions, (1) time division or packet multiplexing and demultiplexing of the time division or packet multiplexed multiple bit-streams, (2) synchronous display of the multiple coded bit streams, (3) buffer management and control, and (4) time recovery and identification.
      <br/>
      The system layer also supports (5) random access, (6) program insertion, (7) conditional access, and (8) error tracking.
    </p>
    <p num="12">
      For MPEG-2, the standard specifies two types of layer coding, a program stream (PS), for relatively lossless environments, such as CD-ROMS, DVDs, and other storage media, and transport stream (TS), for lossy media, as cable television, satellite television, and the like.
      <br/>
      The transport stream (TS), shown in FIG. 2 and denominated Prior Art, consists of a stream of transport stream packets, each of which consists of 188 bytes, divided into 4 bytes of packet header, an optional adaptation field, and up to 184 bytes of the associated packet data, that is, payload.
      <br/>
      The relationship of the layering of the access units, the PES packets, and the Transport Stream (TS) packets is shown in FIG. 5, denominated Prior Art.
    </p>
    <p num="13">
      The transport stream (TS) is used to combine programs made up of PES-coded data with one or more independent time bases into a single stream.
      <br/>
      Note that under the MPEG-2 standard, an individual program does not have to have a unique time base, but that if it does, the time base is the same for all of the elements of the individual program.
    </p>
    <p num="14">
      The packetized elementary stream (PES) layer is an inner layer portion of the MPEG-2 time division or packet multiplexed stream upon which the transport or program streams are logically constructed.
      <br/>
      It provides stream specific operations, and supports the following functions: (1) a common base of conversion between program and transport streams, (2) time stamps for video and audio synchronization and associated timing, especially for associated audio and video packets making up a television channel, presentation, or program, and having a common time base, (3) stream identification for stream multiplexing and demultiplexing, and (4) such services as scrambling, VCR functions, and private data.
    </p>
    <p num="15">
      As shown in FIG. 5, denominated Prior Art, video and audio elementary streams (ES) must be PES-packetized before inserting into a transport stream (TS).
      <br/>
      Elementary streams (ES) are continuous.
      <br/>
      PES packets containing an elementary stream (ES) are generally of fixed lengths.
      <br/>
      Typically, video PES packets are on the order of tens of thousands of bytes, and audio PES packets are on the order of thousands of bytes.
      <br/>
      However, video PES packets can also be specified as of undefined length.
    </p>
    <p num="16">
      The MPEG-2 packetized elementary stream (PES) packet structure is shown in FIG. 4.
      <br/>
      To be noted is that all of the fields after the PES packet length are optional.
      <br/>
      The PES (packetized elementary stream) packet has a PES header, an optional header, and payload.
      <br/>
      The PES header has bit start code, a packet length field, a 2 bit "10" field, a scramble control field, a priority field, a data alignment field, a copy field, a PTS/DTS (Presentation Time Stamp/Decoding Time Stamp) field, a field for other flags, and a header length field.
    </p>
    <p num="17">The "Optional Header" field includes a Presentation Time Stamp field, a Decoding Time Stamp field, an elementary stream clock reference field, a elementary stream rate field, a trick mode field, a copy info field, a Prior Packetized Elementary Stream Clock Recovery field, an extension, and stuffing.</p>
    <p num="18">
      The packet start code provides packet synchronization.
      <br/>
      The stream ID field provides packet identification.
      <br/>
      Payload identification is also provided by the stream ID.
      <br/>
      The PTS/DTS flag fields and the PTS/DTS fields provide presentation synchronization.
      <br/>
      Data transfer is provided through the packet/header length, payload, and stuffing fields.
      <br/>
      The scramble control field facilitates payload descrambling, the extension/private flag fields and the private data fields provide private information transfer.
    </p>
    <p num="19">
      A transport stream (TS) may contain one or more independent, individual programs, such as individual television channels or television programs, where each individual program can have its own time base, and each stream making up an individual program has its own PID.
      <br/>
      Each separate individual program has one or more elementary streams (ES) generally having a common time base.
      <br/>
      To be noted, is that while not illustrated in the FIGURES, different transport streams can be combined into a single system transport stream.
      <br/>
      Elementary stream (ES) data, that is, access units (AU), are first encapsulated into packetized elementary stream (PES) packets, which are, in turn, inserted into transport stream (TS) packets, as shown in FIG. 5, denominated Prior Art.
    </p>
    <p num="20">The architecture of the transport stream (TS) packets under the MPEG-2 specifications is such that the following operations are enabled: (1) demultiplexing and retrieving elementary stream (ES) data from one program within the transport stream, (2) remultiplexing the transport stream with one or more programs into a transport stream (TS) with a single program, (3) extracting transport stream (TS) packets from different transport streams to produce another transport stream (TS) as output, (4) demultiplexing a transport stream (TS) packet into one program and converting it into a program stream (PS) containing the same program, and (5) converting a program stream (PS) into a transport stream (TS) to carry it over a lossy medium to thereafter recover a valid program stream (PS).</p>
    <p num="21">
      At the transport layer, the transport sync byte provides packet synchronization.
      <br/>
      The Packet Identification (PID) field data provides packet identification, demultiplexing, and sequence integrity data.
      <br/>
      The PID field is used to collect the packets of a stream and reconstruct the stream.
      <br/>
      The continuity counters and error indicators provide packet sequence integrity and error detection.
      <br/>
      The Payload Unit start indicator and Adaptation Control are used for payload synchronization, while the Discontinuity Indicator and Program Clock Reference (PCR) fields are used for playback synchronization.
      <br/>
      The transport scramble control field facilitates payload descrambling.
      <br/>
      Private data transfer is accomplished through the Private Data Flag and Private Data Bytes.
      <br/>
      The Data Bytes are used for private payload data transfer, and the Stuffing Bytes are used to round out a packet.
    </p>
    <p num="22">
      A transport stream is a collection of transport stream packets, linked by standard tables.
      <br/>
      These tables carry Program Specific Information (PSI) and are built when a transport stream is created at the multiplexor.
      <br/>
      These tables completely define the content of the stream.
      <br/>
      Two of the tables of the transport stream are the Program Association Table (PAT) and the Program Map Table (PMT).
    </p>
    <p num="23">
      The Program Association Table is a table of contents of the transport stream.
      <br/>
      It contains an ID that uniquely identifies the stream, a version number to allow dynamic changes of the table and the transport stream, and an association table of pairs of values.
      <br/>
      The pairs of values, PN, and PMT-PID, are the Program Number (PN) and the PID of the tables containing the program.
    </p>
    <p num="24">
      The Program Map Table is a complete description of all of the streams contained in a program.
      <br/>
      Each entry in the Program Map Table is related to one and only one program.
      <br/>
      The role of the Program Map Table is to provide a mapping between packets and programs.
      <br/>
      The program map table contains a program number that identifies the program within the stream, a descriptor that can be used to carry private information about the program, the PID of the packets that contain the synchronization information, a number of pairs of values (ST, Data-PID) which, for each stream, specify the stream type (ST) and the PID of the packets containing the data of that stream or program (Data-PID).
    </p>
    <p num="25">There is also a Network Information Table used to provide a mapping between the transport streams and the network, and a Conditional Access Table that is used to specify scrambling/descrambling control and access.</p>
    <p num="26">
      In use, the tables are used to select and reconstruct a particular program.
      <br/>
      At any point in time, each program has a unique PID in the Program Map Table.
      <br/>
      The Program Map Table provides the PIDs for the selected program s audio, video, and control streams.
      <br/>
      The streams with the selected PIDs are extracted and delivered to the appropriate buffers and decoders for reconstruction and decoding.
    </p>
    <p num="27">
      Achieving and maintaining clock recovery and synchronization is a problem, especially with audio and video bitstreams.
      <br/>
      The MPEG-2 model assumes an end-to-end constant delay timing model in which all digital image and audio data take exactly the same amount of time to pass through the system from encoder to decoder.
      <br/>
      The system layer contains timing information that requires constant delay.
      <br/>
      The clock references are Program clock reference (PCR) and the time stamps are the Presentation Time Stamp/Decoding Time Stamp(PTS/DTS).
    </p>
    <p num="28">
      The decoder employs a local system clock having approximately the same 27 Megahertz frequency as the encoder.
      <br/>
      However, the decoder clock cannot be allowed to free run.
      <br/>
      This is because it is highly unlikely that frequency of the decoder clock would be exactly the same as the frequency of the encoder clock.
    </p>
    <p num="29">
      Synchronization of the two clocks is accomplished by the Program Clock Reference (PCR) data field in the Transport Stream adaptation field.
      <br/>
      The Program Clock Reference values can be used to correct the decoder clock.
      <br/>
      Program Clock Reference, or PCR, is a 42 bit field.
      <br/>
      It is coded in two parts, a PCR Base having a 33-bit value in units of 90 kHz, and a PCR extension having a 9-bit extension in units of 27 MHz, where 27 MHz is the system clock frequency.
    </p>
    <p num="30">
      As a general rule, the first 33 bits of the first PCR received by the decoder initialize the counter in a clock generation, and subsequent PCR values are compared to clock values for fine adjustment.
      <br/>
      The difference between the PCR and the local clock can be used to drive a voltage controlled oscillator, or a similar device or function, for example, to speed up or slow down the local clock.
    </p>
    <p num="31">
      Audio and video synchronization is typically accomplished through the Presentation Time Stamp (PTS) inserted in the Packet Elementary Stream (PES) header.
      <br/>
      The Presentation Time Stamp is a 33-bit value in units of 90 kHz, where 90 kHz is the 27 MHZ system clock divided by 300.
      <br/>
      The PTS value indicates the time that the presentation unit should be presented to the user.
    </p>
    <p num="32">
      In digital video systems, such as MPEG-2 compliant digital video systems and HDTV compliant digital video systems, the transport layer is used to carry audio data, video data, and system data streams, in packets, to the individual decoders and system memory.
      <br/>
      The individual streams are multiplexed together with a set of buffer assumptions as defined in the MPEG-2 System Layer specification.
    </p>
    <p num="33">
      However, the MPEG-2 specification for transport does not define the physical implementation of the buffers, and typically separate buffers have heretofore been used for video data, for audio data, and for systems data.
      <br/>
      These independent buffers have been treated as data FIFO's, with no means of tracking or tagging special conditions associated with the data.
    </p>
    <p num="34">
      In addition, as noted above, there is a very large amount of control and status information associated with the various parsing and processing functions of an MPEG-2 compliant Transport Demultiplexor.
      <br/>
      These functions have heretofore been implemented as discrete registers or have required storage in external memory.
    </p>
    <p num="35">
      The provision of separate buffers, each sized for the worst case stream conditions, and a large number of registers, results in an excessive amount of storage.
      <br/>
      Moreover, the inability to track or tag special conditions forecloses the ability to flag information that must be associated with the specific data to the decoders.
    </p>
    <p num="36">
      Thus, a need exists for the ability to track and tag special conditions associated with the incoming systems, video, and audio data, for example, through the use of a control or information word.
      <br/>
      There is also a need to store all of the incoming packets, be they system packets, video packets, or audio packets, as well as the many registers needed for decoding, in a single logical memory array.
    </p>
    <heading>OBJECTS OF THE INVENTION</heading>
    <p num="37">It is a primary object of the invention to receive private, system, video, and audio data packets in a single logical memory.</p>
    <p num="38">It is a further object of the invention to use the same bank of memory for efficient storage of control and status information.</p>
    <p num="39">It is a further object of the invention to store such private, system, video, and audio packets in a packet basis in the single logical memory.</p>
    <p num="40">It is a further object of the invention to track and tag systems data packets, video data packets, and audio data packets with an information or control word.</p>
    <p num="41">It is a still further object of the invention to tag and track information, including control/status and descrambling control words, with a control word or information word within a single logical memory.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="42">
      These and other objects are achieved by the method and apparatus of our invention.
      <br/>
      According to our invention, it is now possible to track and tag special conditions associated with the incoming systems, video, and audio data, for example, through the use of a control or info word.
      <br/>
      This is accomplished while storing all of the incoming packets, be they system packets, video packets, or audio packets, as well as the many registers needed for decoding, in a packet basis in a single logical memory array.
    </p>
    <p num="43">
      This is all accomplished through our method of decoding a multiplexed, system layer bitstream.
      <br/>
      The bitstream is made up of packets of audio, video, and system data.
      <br/>
      Each packet has a packet header and packet data bytes.
      <br/>
      The first step in the process is demultiplexing the bitstream into separate audio and video bitstreams for subsequent decompression while maintaining at synchronization of the video and audio.
      <br/>
      The system data and the audio and video packets are next loaded into a buffer, from which they are unloaded for subsequent decoding.
      <br/>
      The decoding is in accordance with the system data entries.
      <br/>
      The method is characterized by storing the system data and the audio and video packets in a single logical buffer.
    </p>
    <p num="44">
      Thus, according to our invention, both system data and the video and audio data are stored in the single buffer.
      <br/>
      The data is removed from the single logical buffer through separate systems, audio, and video unloaders.
      <br/>
      By this expedient the systems, audio, and video data packets and the control words associated with each packet are transferred from the single logical buffer through separate systems, audio, and video unloaders.
      <br/>
      By the method and apparatus of our invention, the same buffer is used to efficiently store control and status information.
    </p>
    <heading>THE FIGURES</heading>
    <p num="45">
      The invention may be understood by reference to the Figures.
      <br/>
      FIG. 1 denominated Prior Art, shows the packet multiplexing of the transport stream.
      <br/>
      FIG. 2 denominated "Prior Art", shows a schematic view of the transport packet stream with a 188 byte packet, a 4 byte header, an optional adaptation field, and payload, the payload being present if the adaptation field is less then 184 bytes.
      <br/>
      FIG. 3, denominated "Prior Art", is a schematic view of the MPEG-2 system structure, showing the system decoder, i.e., a demultiplexor, demultiplexing the incoming bitstream into an audio compression layer for an audio buffer and decoder, a video compression layer for a video buffer and decoder, and PCR data for clock control.
      <br/>
      FIG. 4, denominated "Prior Art", is a schematic view of the PES (packetized elementary stream) structure according to the MPEG-2 Standard, showing the PES header. The FIGURE shows the PES header broken into its separate fields, with a further breakdown of the Optional Header field, and a still further breakdown of the Extension field within the Optional Header field.
      <br/>
      FIG. 5, denominated Prior Art shows the relationship of the layering of the access units, the PES packets, and the Transport Stream (TS) packets, with the encapsulation of elementary stream data into transport stream packets.
      <br/>
      FIG. 6 shows the dataflow of the transport demultiplexor of the invention.
      <br/>
      FIG. 7 shows the Memory queue memory allocation according to our invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="46">
      The MPEG-2 transport bitstream is a set of time division or packet multiplexed bitstreams.
      <br/>
      Each such time division or packet multiplexed bitstream may contain a plurality of programs, that is, television channels, digital communications, or the like.
      <br/>
      Each bitstream contains a systems stream which provides systems layer functions for one or more audio and video elementary streams in the time division or packet multiplexed single stream.
      <br/>
      The single stream is as shown in FIGS. 1 to 5, denominated "Prior Art", where many packets make up the single bitstream.
      <br/>
      The single bitstream is a system layer.
      <br/>
      As shown generally in FIGS. 1 to 5, and with specificity in FIG. 2, the first level of granularity is a transport layer, made up of a 4 byte header, an optional adaptation field, and a payload (the payload is up to to 184 bytes if the adaptation field is less then 184 bytes).
      <br/>
      In turn, at the next level of granularity, each packet is made up of a packet header, and packet payload data bytes, which may be PES packets, table sections, or private data.
      <br/>
      The single bitstream is a system layer.
    </p>
    <p num="47">
      FIG. 6 represents the dataflow of transport stream data through the transport demultiplexor of the invention.
      <br/>
      The SYNC block determines the start of the transport packet.
      <br/>
      The PACKET PARSER extracts data from the transport packet header and adaptation field.
      <br/>
      The PID is one of these fields.
      <br/>
      The PID is compared to active PIDs in the PID filter.
      <br/>
      If the matches one of the predefined values, the remaining fields are extracted and the packet is forwarded to the descrambler interface which will send filtered but scrambled data to a descrambler, if present.
      <br/>
      The descrambler, if present, descrambles and reconstructs the packets as configured by the application.
      <br/>
      The resulting stream is optionally forwarded to an auxiliary port which provides means for other devices to obtain access to the data.
    </p>
    <p num="48">Concurrently, the packet parser sends PCRs from matching PCR packets to the clock recovery unit for reconstructing the System Time Clock (STC).</p>
    <p num="49">
      Status indicators representing parsed information are sent along with the complete transport packet to the packet loader to be stored in the packet buffer.
      <br/>
      The packet buffer holds a plurality, for example up to ten or more, transport packets while they are moved to the decoders and the DRAM or other memory.
      <br/>
      The packet buffer efficiently absorbs any latency of these data targets.
    </p>
    <p num="50">
      The transport core contains three unloaders, an audio unloader, a video unloader, and a data unloader.
      <br/>
      The audio unloader and the video unloader send data to the respective decoders as the data is requested.
      <br/>
      The data unloader sends data to a controller for subsequent transfer to system memory.
      <br/>
      The memory unloader can also be set up to filter table sections and perform crc checking of section data.
    </p>
    <p num="51">
      According to the invention the transport demultiplexor accepts either parallel or serial data, detects the synchronization character in the datastream, and establishes transport packet boundaries therefrom.
      <br/>
      In the case of serial input, where only a bit clock is provided, the transport demultiplexor of the invention establishes byte alignment.
    </p>
    <p num="52">If the transport loses synchronization and the packet buffer doesn't contain any packets for the audio and video decoders, an error is signalled to the appropriate decoder so that it can mask the error appropriately.</p>
    <p num="53">The status of the Sync block is reported with the InSync bit of the Status Register.</p>
    <p num="54">
      The Packet Parser extracts Transport Error Indicator information from each packet, as well as the packet boundary information, and sends it to other units to assist in their processing.
      <br/>
      Some of the parsed information is stored in the packet buffer along with the packet for use by the unloaders.
    </p>
    <p num="55">
      If the packet parser detects the Transport Error Indicator is set, or that the sync byte is missing and the sync drop is greater then 0, or that the TS Error Signal is active, the packet is discarded.
      <br/>
      The Transport Packet Header, shown in FIG. 2 has a plurality of fields.
      <br/>
      One of the fields is a one bit Transport Error Indicator.
      <br/>
      Any packet with the Transport Error Indicator set to 1 is discarded.
      <br/>
      If the error occurred in a packet which would have matched a PID Filter entry, the continuity count check will mark the error in the next valid packet of the PID so that it can be masked by the decoders or managed by the Memory unloader.
      <br/>
      Thus, errors in packets which do not match entries in the PID Filter do not generate unnecessary events for the system to handle.
    </p>
    <p num="56">The value of the Payload Unit Start Indicator bit is forwarded to the unloaders through the packet buffer for use during packet unload to send the packetized elementary streams.</p>
    <p num="57">
      The Packet Parser incorporates a PID filter, such a 32 entry PID filter.
      <br/>
      The 13 bit PID value is sent to the PID filter to determine if a match occurs.
      <br/>
      Packets that match a PID filter entry are forwarded, while all other packets, including null packets, are discarded.
    </p>
    <p num="58">
      The transport demultiplexor of the invention further provides PID filtering.
      <br/>
      The PID filter registers and a corresponding PID enable register are used to control which packets are forwarded through the transport demultiplexor.
      <br/>
      A PID value should only appear once in the PID filter.
      <br/>
      There are up to 32 programmable PID values that are used to filter the transport stream.
      <br/>
      The PID filter associates a PID index, for example, a 5 bit PID index, with each of the 32 PID entries.
      <br/>
      One PID index is reserved for the video PID, and one for the audio PID.
      <br/>
      The other PID entries are defined by the application.
    </p>
    <p num="59">
      The front-end PID filtering logic filters incoming transport packets before they are placed in the packet buffer.
      <br/>
      Data from the PIDs, for example, data from up to about 32 different PIDs can be captured by the transport core or transport demultiplexor of the invention for delivery to the output ports.
      <br/>
      All other packets, including null packets, may be discarded.
    </p>
    <p num="60">
      A plurality of registers, for example, thirty two registers, are used to assign a PID index to each of the filtered packets to be delivered downstream, for example, to a descrambler and/or a decoder and/or a Packet Buffer.
      <br/>
      A PCR PID register holds the PCR PID value which can be the same or different from any of the general PID filter indices.
      <br/>
      If the PCR PID is not the same as one of the PID filter entries, then the PCR PID entries are not forwarded.
      <br/>
      Moreover, since the PCR PID filter is separate from the general PID filters, the STC can be started before the transport begins delivering data to the decoders.
    </p>
    <p num="61">When the datastream is scrambled, as would be the case for a scrambled European Telecommunications Standards Institute Digital Video Broadcasting (ETSI DVB) compliant stream, the two bit Transport Scrambling Control bits are extracted and sent to the descrambler, if present.</p>
    <p num="62">
      The two bit Adaptation Field Control Field is used to determine if an adaptation field and/or a payload is present.
      <br/>
      If an adaptation field is present, the adaptation field parsing described hereinbelow is performed.
      <br/>
      Packets with an adaptation field control value of "00" are discarded.
      <br/>
      A value of "01" indicates that there is no adaptation field, only payload.
      <br/>
      A value of "10" indicates that there is an adaptation field only, and no payload, while a value of "11" indicates that there is an adaptation field followed by payload.
    </p>
    <p num="63">
      The 4-bit Continuity Counter field is maintained for each enabled PID index to detect any missing data in the payload stream.
      <br/>
      The Continuity Counter is incremented on each incoming packet with a payload.
      <br/>
      This 4-bit counter wraps around to 0x0 after it reaches 0xF.
      <br/>
      The value of the continuity counter maintained by the hardware is compared to the incoming packets.
      <br/>
      If the values do not match, a PID stream error is signaled.
    </p>
    <p num="64">
      However, there are two situations where a PID stream error is not signaled.
      <br/>
      First, an error is not signaled if the discontinuity indicator in the adaptation field is set.
      <br/>
      In this case, the break in continuity is expected.
      <br/>
      Second, if two consecutive packets in the transport stream with the same PID have the same continuity counter value, an error is not signaled.
      <br/>
      This is because in this case one packet is a duplicate of the other.
      <br/>
      If there is no error in the first packet, the second packet is discarded.
      <br/>
      If, however, there is an error in the first packet, it is discarded and the second packet is loaded into the packet buffer.
    </p>
    <p num="65">
      A continuity count error is handled as a PID stream error and is forwarded to the unloaders by setting the error bit in the packet flags field stored with the packet in the packet buffer.
      <br/>
      The error can also signal an interrupt to the application processor.
    </p>
    <p num="66">
      The continuity field count in non-payload packets is not checked as defined by the MPEG standard.
      <br/>
      This is because the continuity count is used to insure integrity of the payload data.
    </p>
    <p num="67">
      The syntax of the Adaptation Field is shown in FIG. 2.
      <br/>
      Certain fields in the Adaptation Field are of special interest.
      <br/>
      For example, the Adaptation Field Length field indicates the number of byte in the adaptation field following this field.
      <br/>
      If the Adaptation Field Length Field is greater than 00, then the Adaptation Field Flags are defined.
      <br/>
      The adaptation field length is used by the unloaders to determine the start of the payload, and to deliver the Adaptation Field to the Memory queues as configured by the application processor.
    </p>
    <p num="68">
      The first field in the Adaptation Fields is the 1-bit Discontinuity Indicator.
      <br/>
      This flag indicates two different types of discontinuity, continuity counter and system time base.
      <br/>
      The discontinuity indicator in the PCR PID indicates a discontinuity in the system time base.
      <br/>
      The PCR, if present, is loaded into the STC.
      <br/>
      A system time base discontinuity is also signalled to the decoders on the first video or audio packet following the discontinuity.
      <br/>
      The application or host processor can be interrupted upon the arrival of a discontinuity indicator.
    </p>
    <p num="69">
      The next field in the Adaptation Fields is the 1-bit random access indicator.
      <br/>
      The audio and video PIDs can be configured to interrupt the host processor or assist processor upon the arrival of the random access indicator.
    </p>
    <p num="70">The PCR fields are forwarded to the Clock Recovery Unit.</p>
    <p num="71">The Splicing Point Flag is parsed and the host can be interrupted upon the arrival of a splicing point.</p>
    <p num="72">
      The Transport Private Data Flag can interrupt the host processor upon the arrival of private field data.
      <br/>
      Moreover, the Memory queues can be configured to forward the adaptation private data to system memory.
    </p>
    <p num="73">
      The transport demultiplexor can include an ETSI DVB, or other descrambler.
      <br/>
      The descrambler implements the appropriate descrambling algorithm, for example ETSI DVB.
      <br/>
      The host application and/or the transport stream can configure several control fields to control descrambling for each PID index.
      <br/>
      The Descrambling Control Fields for each PID index include "Enable", which indicates that scrambled packets of PID index are to be descrambled, "KeyID", which indicates which Control Word pair to use for the particular PID index, and "PES/TS" which indicates PES or TS level descrambling for the particular PID index.
      <br/>
      To be noted is that both PES and TS level scrambling and descrambling can be enabled, although not simultaneously for the same PID.
    </p>
    <p num="74">
      The control word pairs, for example, eight control word pairs, can be shared among the PIDs, for example, among 32 PIDs.
      <br/>
      A keyID, for example, a 3 bit keyID in the case of a set of 8 control word pairs, can be associated with each PID to indicate which control word pair the descrambler will use for packets of that PID.
      <br/>
      Each control word pair contains an odd key and an even key.
    </p>
    <p num="75">
      The descrambler, when present, maintains a constant delay, so that the descrambled data can be delivered with constant delay to an output port.
      <br/>
      The scramble control bits are modified by the descrambler for packets which are descrambled.
      <br/>
      Packets which are not configured for descrambling are sent through an alternative data path and recombined after the descrambler.
    </p>
    <p num="76">
      The descrambler can share resources with the transport demultiplexor.
      <br/>
      These shared resources can include the application processor interface, the Interrupt Queue register for reporting error conditions, and a logical memory array.
    </p>
    <p num="77">The descrambler reports an error when a scrambled packet is received but descrambling for that PID index is disabled; or a transport packet contains a combination of PES header and adaptation field that is not permitted under the applicable descrambling standard, such as both a PES header and an adaptation field that is not permitted by the ETSI DVB Standard; the scramble control bits are not permitted by the applicable descrambling standard, such as "01" which is not permitted under the ETSI DVB Standard; or the transport packet scramble control bits are not "00" in a PID index configured for PES packet descrambling.</p>
    <p num="78">
      These errors are reported as an interrupt to the host application.
      <br/>
      The host application can determine which type of errors have occurred by reading the descrambler status register.
      <br/>
      In a preferred exemplification of our invention, the descrambler status bits are cleared by writing the register with 1's in the corresponding bit position to be cleared allowing bits to be separately cleared.
    </p>
    <p num="79">The objects of the invention are accomplished by our method of decoding a multiplexed, system layer bitstream.</p>
    <p num="80">
      Our invention is utilized after the transport demultiplexing step, as shown in FIG. 3 of demultiplexing the bitstream into separate audio and video bitstreams for decompression while maintaining synchronization of the video and audio.
      <br/>
      The system data and the audio and video packets are next loaded into buffers, from which they are unloaded for subsequent decoding.
      <br/>
      The decoding is in accordance with the system data entries.
      <br/>
      The method is characterized by storing the system data and the audio and video packets in a single buffer.
    </p>
    <p num="81">
      According to our invention, both system data and the video and audio header data are stored in memory in the single buffer.
      <br/>
      The data is removed from the single buffer through separate systems, audio, and video unloaders.
      <br/>
      By this expedient the systems, audio, and video data packets and the control words associated with each packet are transferred from the single buffer through separate systems, audio, and video unloaders.
    </p>
    <p num="82">
      The transport demultiplexor of the invention also supports both Transport Level and PES level descrambling.
      <br/>
      In this application the control word registers and other registers in the descrambler section of the transport demultiplexor are added to the address range of the application processor interface.
    </p>
    <p num="83">
      The transport demultiplexor of the invention provides a set of data processing functions.
      <br/>
      In a preferred embodiment these data processing functions do not require host processor support for handling individual packets.
    </p>
    <p num="84">The transport demultiplexor parses the individual fields in the transport header and the adaptation fields as part of the PID filtering, above, clock recovery, and error handling functions, so that PID values, error indicators, continuity counter exceptions, discontinuity indicators, and the like, can be quickly reported to the application processor.</p>
    <p num="85">
      The transport demultiplexor facilitates error handling, channel changes, and time base (STC) changes by using a compressed data connection to communicate directly with the decoders.
      <br/>
      The transport demultiplexor automatically detects and flags errors in the datastream.
      <br/>
      This allows the decoders to mask the error and recover without host system intervention.
      <br/>
      Similarly, channel changes are initiated in the transport demultiplexor with a minimum of setup, that is, changing the PID entry, and the stream changes are internally coordinated directly with each decoder, allowing fast and efficient channel switching.
      <br/>
      Changes in the time base, that is, the STC, either as part of a channel change or due to a time base discontinuity, are marked and flagged in the stream to allow the decoders to correctly synchronize updating the internal STC with respect to the data.
    </p>
    <p num="86">
      Data is received by the transport demultiplexor and converted to be addressable in tabular form.
      <br/>
      Entire table sections are written to DRAM or other memory including the Table ID through the last byte, where the last byte is as specified in the section length field.
      <br/>
      This capability provides the application or host processor full flexibility in interpreting the table.
    </p>
    <p num="87">
      One aspect of the table processing of the transport demultiplexor of the invention is table section filtering before DRAM or other memory storage of the tables.
      <br/>
      Table filtering before DRAM or other memory storage by the transport demultiplexor reduces the load on the application processor by filtering table sections before sending them to DRAM or other memory.
      <br/>
      Filtering reduces the application processor work load for parsing table sections and the required size of working areas in DRAM or other memory to manage table data.
    </p>
    <p num="88">
      The transport demultiplexor of the invention checks the CRC value of table sections against the value coded in the stream.
      <br/>
      Those sections that do not pass the CRC check are discarded, and the application optionally notified.
    </p>
    <p num="89">
      The transport demultiplexor of the invention transfers incoming packets, including portions thereof, to a system memory.
      <br/>
      This transfer is accomplished using independent queues, for example one independent queue for each PID index, that is, thirty two independent queues.
      <br/>
      Each queue can be customized, for example by the application, to adjust the size of a circular buffer and to set thresholds for interrupts and the application read pointer.
      <br/>
      For tables the application can be interrupted after a complete section has been successfully transferred into system memory.
    </p>
    <p num="90">
      The transport demultiplexor of our invention can support a plurality of queues in memory.
      <br/>
      According to a particularly preferred exemplification, which is MPEG-2 compatible, the transport core supports up to 32 queues in memory.
      <br/>
      Each of these queues is associated with a PID Index in the PID filter.
      <br/>
      For example, data from PID Index 5 can be stored in Memory queue 5.
      <br/>
      One Memory queue can be allocated to provide special functions.
    </p>
    <p num="91">
      The starting address of the Memory queue region is specified by the DRAMBase register.
      <br/>
      The DRAM region of memory is memory aligned.
      <br/>
      Each Memory queue is specified as a continuous memory region, typically allocated in 4096 byte blocks, although larger or smaller blocks may be utilized without departing from our invention, within the total Memory queue region.
      <br/>
      A single Memory queue can be configured to be as large as the entire Memory queue region.
    </p>
    <p num="92">
      The Memory queues can be configured to reset when a PID filter entry is written.
      <br/>
      This is accomplished by setting a corresponding bit in the DRAMRegisters register for that PID index.
      <br/>
      For example, when the DRAM Resets bit for the PID is "Not Set" and the PID filter entry is updated, any packets of this PID Index in the packet buffer are flushed.
      <br/>
      When the DRAM Resets bit for this PID is "Set" and the PID filter entry is updated, any packets of this PID Index in the packet buffer are flushed, the Memory queue is configured to be reset when the first packet of the new PID is processed, and any old interrupts in the interrupt fifo associated with this PID Index are flushed when the PID Filter entry is written.
    </p>
    <p num="93">
      Updates to the audio and video PID Filter registers behave the same way as updating any other entry.
      <br/>
      Performing the update as part of an audio and video channel change delays the actions described above until the Audio or Video Channel Change register is copied to the corresponding entry in the PID filter.
    </p>
    <p num="94">
      Moreover, the entire DRAM or other memory region does not need to be allocated solely for the Memory queues.
      <br/>
      The Memory queue or queues can be placed anywhere within the Memory queue region and the remainder of the Memory queue region can be used for other purposes.
    </p>
    <p num="95">
      Each of the Memory queues can be configured independently, with registers specifying the start and stop addresses of each Memory queue.
      <br/>
      Preferably queue regions are non-overlapping.
      <br/>
      Memory queue memory management also includes the use of pointers or registers to determine how much data has been written to each Memory queue.
      <br/>
      One pointer or register indicates the next address within the Memory queue where data will be written, indicating the start of the current table section which is being delivered.
    </p>
    <p num="96">
      In the case of system data, the Memory unloader provides automatic error handling for table sections.
      <br/>
      For all types of system data the transport demultiplexor notifies the processor through an interrupt if a PID stream error occurred on data delivered to the DRAM or other memory.
      <br/>
      The front-end units discard packets with errors before the error-containing packets are loaded into the packet buffer.
      <br/>
      This is because an error may make it impossible to correctly parse the packet.
      <br/>
      Additional checking is performed by the Memory unloader on table sections to ensure that the table section length matches the value in the table section header.
      <br/>
      If any type of error is found while unloading a table section, the current section is discarded and a Memory queue Write Pointer is moved back to the end of the previous valid section.
    </p>
    <p num="97">While packet buffer overflows are unlikely, should a packet buffer overflow occur, the transport demultiplexor of the invention handles the packet buffer overflow by identifying which PID streams were affected and handles the errors the same way a missing packet error is handled.</p>
    <p num="98">While the embodiments and exemplifications of our invention have been described and illustrated with respect to one particular standard, the MPEG-2 standard, it is, of course to be understood the methods and apparatus of our invention can be used with other time division multiplexed and packet multiplexed data streams, having packetized headers and data, including, by way of example, the European Teleocmmunications Standards Institute (ETSI) Digital Video Broadcasting (DVB) standard, the High Definition Television (HDTV) standard, and the Direct Satellite System (DSS) standard, among others.</p>
    <p num="99">While the invention has been described with respect to certain preferred embodiments and exemplifications, it is not intended to limited to scope the invention thereby, but solely by the claims appended hereto.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>In a transport demultiplexor, a method of decoding a time-division multiplexed bitstream containing packets of audio, video, and system data, where each packet has a packet header, and packet data bytes, said method comprising demultiplexing the bitstream into separate audio and video data bitstreams for decompression while maintaining synchronization, attaching an information word to at least some audio, video and system data packets, loading the demultiplexed system data and the demultiplexed audio and video data packets and their attached information words into a single logical buffer, wherein the system data, the audio data and the video data packets are stored intermixed in the single logical buffer of the transport demultiplexor, unloading the system data and the audio and video data packets from the single logical buffer using the attached information words, and decoding the audio and video data bitstreams in accordance with the system data using audio and video decoders.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 wherein said single logical buffer is implemented within a packet buffer, said packet buffer further comprising registers, and wherein said method further comprises storing control and status information in said registers of said packet buffer.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1 comprising removing data from the single logical buffer through separate system, audio and video unloaders.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1 comprising storing the system data, the audio data and the video data packets intermixed in said single logical buffer on a packet basis.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1 comprising transferring the system, audio, and video data packets and the control or information words associated with each packet from the single logical buffer through separate system, audio, and video unloaders.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. In a transport demultiplexor, a method of decoding a time division multiplexed bitstream containing packets of audio, video, and system data, where each packet has a packet header, and packet data bytes, comprising demultiplexing the bitstream into separate audio and video bitstreams for decompression while maintaining synchronization, loading the system data, the audio data and the video data packets into memory, unloading the system data, the audio data and the video data packets from the memory, and decoding the audio and video bitstreams in accordance with the system data, the improvement comprising:</claim-text>
      <claim-text>a) prior to said loading, attaching an information word to at least some audio, video and system data Packets; b) storing the system data, the audio data and the video data packets and their attached information words on a packet basis intermixed in a single logical buffer, including storing system data, and video and audio headers in registers in the single logical buffer;</claim-text>
      <claim-text>and c) wherein said unloading comprises using the attached information words in unloading and transferring the system, audio, and video data packets from the single logical buffer through separate system, audio, and video unloaders to decoders.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A transport demultiplexor comprising: front end logic for demultiplexing a multiplexed bitstream containing packets of audio, video, and system data and for attaching an information word to at least some audio, video and system data packets, said information words being distinct from packet header data received at said transport demultiplexor with said packets of audio, video and system data; back end logic for buffering said packets of audio, video, and system data and the attached information words intermixed in a single logical buffer;</claim-text>
      <claim-text>and said back end logic further comprising a system data unloader, an audio data unloader and a video data unloader, each unloader being coupled to said single logical buffer through a buffer controller for removing data from said single logical buffer using said attached information words.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The transport demultiplexor of claim 7, wherein said single logical buffer is implemented within a packet buffer, said packet buffer further comprising registers, said registers storing control and status information.</claim-text>
    </claim>
  </claims>
</questel-patent-document>