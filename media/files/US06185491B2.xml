<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185491B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185491</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185491</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="22424221" extended-family-id="14435913">
      <document-id>
        <country>US</country>
        <doc-number>09126328</doc-number>
        <kind>A</kind>
        <date>19980731</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09126328</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>14758054</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>12632898</doc-number>
        <kind>A</kind>
        <date>19980731</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09126328</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04Q   1/00        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>Q</subclass>
        <main-group>1</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  13/14        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>14</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>B60R  16/02        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>B</section>
        <class>60</class>
        <subclass>R</subclass>
        <main-group>16</main-group>
        <subgroup>02</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F   9/44        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>44</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>G06F   9/445       20060101A I20080531RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>445</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20080531</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>G06F   9/46        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>46</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="7">
        <text>H04L  12/28        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>28</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="8">
        <text>H04L  29/06        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>701036000</text>
        <class>701</class>
        <subclass>036000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>180287000</text>
        <class>180</class>
        <subclass>287000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>340004300</text>
        <class>340</class>
        <subclass>004300</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>340426280</text>
        <class>340</class>
        <subclass>426280</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>701029600</text>
        <class>701</class>
        <subclass>029600</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>701411000</text>
        <class>701</class>
        <subclass>411000</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>715201000</text>
        <class>715</class>
        <subclass>201000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-009/44A4A</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>44A4A</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/4413</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>4413</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>23</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>19</number-of-drawing-sheets>
      <number-of-figures>23</number-of-figures>
      <image-key data-format="questel">US6185491</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Networked vehicle controlling attached devices using JavaBeans™</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>LAKE CAROLE J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4617663</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4617663</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>DUC MICHEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4682294</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4682294</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>PERSON ANDREW P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5483692</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5483692</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>KUEHNER THILO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5521588</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5521588</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>LOIBL JOSEF</text>
          <document-id>
            <country>US</country>
            <doc-number>5588123</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5588123</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>KOENIG WINFRIED, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5781123</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5781123</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>DARBY CHRISTOPHER PAUL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5835873</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5835873</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>SUETSUGU MASAHIRO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5850618</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5850618</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>SILVER DAVID M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6003050</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6003050</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>SIMONOFF ADAM J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6005568</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6005568</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>BARTEL PETER, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6006143</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6006143</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>BECKERT RICHARD D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6009363</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6009363</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>FLICK KENNETH E</text>
          <document-id>
            <country>US</country>
            <doc-number>6011460</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6011460</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>HOPF THOMAS</text>
          <document-id>
            <country>US</country>
            <doc-number>6025655</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6025655</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>IIHOSHI AKIRA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6052632</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6052632</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="16">
          <text>FACKLER RUPERT</text>
          <document-id>
            <country>US</country>
            <doc-number>6104971</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6104971</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>"The Network Vehicle", Distributed Comdex 1997 (2 pages).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>"Tech Watch", Time, Dec. 1, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>"Car Multimedia", ST(R), brochure date unknown.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Sun Microsystems, Inc.</orgname>
            <address>
              <address-1>Palo Alto, CA, US</address-1>
              <city>Palo Alto</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>SUN MICROSYSTEMS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Gray, Jamison</name>
            <address>
              <address-1>Mountain View, CA, US</address-1>
              <city>Mountain View</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Chu, Eric</name>
            <address>
              <address-1>Los Altos, CA, US</address-1>
              <city>Los Altos</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>McDermott, Will &amp; Emery</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Cuchlinski, Jr., William A.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A vehicle control computer system uses JavaBeans(TM) to implement device interfaces.
      <br/>
      A vehicle control center, having a processor and memory, provides user access to devices operating within the vehicle.
      <br/>
      The manufacturer of such devices provides a JavaBean(TM) interface stored with the device.
      <br/>
      When a device is installed in the vehicle, the processor or other control element of the vehicle control center becomes aware of the installation and requests or otherwise receives the stored JavaBean(TM) interface from the device.
      <br/>
      The vehicle control center can then use the interface as received or replace it with a different interface already stored in memory.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">The invention relates to computer control of user devices and, more particularly, to the use of JavaBeans (tm)  for providing centralized control of attached devices in a vehicle network.</p>
    <p num="3">2. Description of Related Art</p>
    <p num="4">
      As computer controlled devices become more pervasive, it is not unexpected that such devices would spread to traditionally mechanical domains such as automotive vehicles.
      <br/>
      A network vehicle was demonstrated at the Comdex Trade Show in November of 1997.
      <br/>
      That vehicle had a central computer which was used to control several attached devices.
    </p>
    <p num="5">Various manufacturers have been developing and deploying bus architectures suitable for use in a vehicle.</p>
    <p num="6">
      Computer systems are known which permit "plug and play" operation.
      <br/>
      When a new device is attached to the computer bus, its presence is detected and it is automatically added to the list of devices known to the CPU to be on the bus.
    </p>
    <p num="7">Object oriented programming languages and object oriented development environments are known in the art.</p>
    <p num="8">
      JavaBeans (tm)  and the Java Development Kit (tm)  are well known products available from Sun Microsystems.
      <br/>
      JavaBeans (tm)  is an architecture and platform neutral application programming interface for creating and using dynamic Java components.
      <br/>
      Application developers can use a variety of development tools, such as a Java Development Kit (tm)  to assemble custom applications from fully portable JavaBeans.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">
      The invention is directed to methods, apparatus, systems and computer program apparatus using JavaBeans (tm)  for implementing device interfaces in an vehicular computer system.
      <br/>
      In such a system, a vehicle control center, having a processor and memory, provides access to devices operating within the vehicle.
      <br/>
      The manufacturer of such devices provides a JavaBean (tm)  interface stored with the device.
      <br/>
      When a device is installed in the vehicle, the processor or other control element of the vehicle control center becomes aware of the installation and requests or otherwise receives the stored JavaBean (tm)  interface from the device.
      <br/>
      The vehicle control center can then use the interface as received or replace it with a different interface already stored in memory.
    </p>
    <p num="10">The foregoing and other features, aspects and advantages of the present invention will become more apparent from the following detailed description of the present invention when taken in conjunction with the accompanying drawings.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="11">
      The present invention will be better understood from the following description in which:
      <br/>
      FIG. 1 is a view of an automobile showing an exemplary arrangement of components for a network vehicle in accordance with the invention.
      <br/>
      FIG. 2 is a block diagram of an exemplary vehicle network in accordance with the invention.
      <br/>
      FIG. 3 is a block diagram of an exemplary vehicle control center shown in FIG. 2 in accordance with the invention.
      <br/>
      FIG. 4 is a diagram illustrating an exemplary software architecture for the vehicle control center shown in FIG. 3 in accordance with the invention.
      <br/>
      FIG. 5 is a block diagram of a first exemplary device attached to a vehicle network in accordance with the invention.
      <br/>
      FIGS. 6A and 6B show an exemplary alternative device attached to a vehicle network and a corresponding software architecture for the alternative device, respectively, in accordance with the invention.
      <br/>
      FIG. 7 illustrates a preferred way in which information can be stored in ROM (FIG. 5) and in memory (FIG. 7) in an attached device in accordance with the invention.
      <br/>
      FIG. 8 illustrates a preferred process for developing and storing JavaBeans (tm)  in accordance with the invention.
      <br/>
      FIG. 9 is an illustration of an exemplary graphical user interface used in a network vehicle in accordance with the invention.
      <br/>
      FIGS. 10A-10D illustrate stages by which a vehicle control center can obtain a standard device interface from an attached device in accordance with the invention.
      <br/>
      FIGS. 11A and 11B are flow charts of processes used to carry out the process described in conjunction with FIGS. 10A-10D in accordance with the invention.
      <br/>
      FIG. 12 is a flow chart of a preferred process for handling one or more standard device interfaces received over a network or bus in accordance with the invention.
      <br/>
      FIG. 13 is a flow chart of a process used to select an interface from a plurality of interfaces in accordance with the invention.
      <br/>
      FIG. 14 is a flow chart of a process for removing a device from the network in accordance with one aspect of the invention.
      <br/>
      FIG. 15 is an illustration of a single data structure used for storing information about objects in conjunction with JavaBeans (tm) .
      <br/>
      FIG. 16 is an illustration of an expanded data structure preferred for use in carrying out the invention.
      <br/>
      FIG. 17 is a flow chart of a process for automatically removing devices from the network in accordance with the invention.
      <br/>
      FIG. 18 is a flow chart of a process for changing interfaces or components of an interface.
    </p>
    <heading>NOTATIONS AND NOMENCLATURE</heading>
    <p num="12">
      The detailed descriptions which follow may be presented in terms of program procedures executed on a computer or network of computers.
      <br/>
      These procedural descriptions and representations are the means used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art.
    </p>
    <p num="13">
      A procedure is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result.
      <br/>
      These steps are those requiring physical manipulations of physical quantities.
      <br/>
      Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated.
      <br/>
      It proves convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.
      <br/>
      It should be noted, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities.
    </p>
    <p num="14">
      Further, the manipulations performed are often referred to in terms, such as adding or comparing, which are commonly associated with mental operations performed by a human operator.
      <br/>
      No such capability of a human operator is necessary, or desirable in most cases, in any of the operations described herein which form part of the present invention; the operations are machine operations.
      <br/>
      Useful machines for performing the operation of the present invention include general purpose digital computers or similar devices.
    </p>
    <p num="15">
      The present invention also relates to apparatus for performing these operations.
      <br/>
      This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer as selectively activated or reconfigured by a computer program stored in the computer.
      <br/>
      The procedures presented herein are not inherently related to a particular computer or other apparatus.
      <br/>
      Various general purpose machines may be used with programs written in accordance with the teachings herein, or it may prove more convenient to construct more specialized apparatus to perform the required method steps.
      <br/>
      The required structure for a variety of these machines will appear from the description given.
    </p>
    <heading>DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="16">
      FIG. 1 is a view of an automobile showing an exemplary arrangement of components of a network vehicle in accordance with the invention.
      <br/>
      The vehicle 100 contains a vehicle control center 110 which serves as a master to a bus 120.
      <br/>
      A plurality of attached vehicle devices 130 are also connected to the bus to be controlled by the vehicle control center.
    </p>
    <p num="17">
      FIG. 2 is a block diagram of an exemplary vehicle network in accordance with the invention.
      <br/>
      The vehicle control center 110, as noted in conjunction with FIG. 1, controls bus 120.
      <br/>
      A plurality of devices 200, 210, 220, 230, 240 and 250 are illustrated as exemplary attached devices that might commonly be found in a network vehicle.
      <br/>
      Device 200 shows a cabin lighting interface by which the vehicle control center can be used to control the lights in the cabin of a vehicle.
      <br/>
      By way of entertainment, a CD player 220 is shown and an AM/FM radio and tape player 230.
      <br/>
      Each of these devices will use the services of amp/speaker unit 210.
      <br/>
      The amp/speaker component 210 will amplify and provide sound output from the CD player and from the AM/FM radio and tape player 230 to the passengers within the passenger cabin.
      <br/>
      A global positioning satellite system receiver 240 can be used to provide navigation information to the driver or other occupants of the vehicle.
      <br/>
      A heating/air conditioning unit 250 can be controlled using the vehicle control center to set the appropriate environmental conditions within the passenger cabin.
      <br/>
      Other attached devices can be used in the network vehicle.
      <br/>
      These include radar, air bag activation and status, video cameras, emergency rescue, alarms, anti-theft system, odometers, gyroscope, route guidance, access control, location transponder, video games, an internet connection, a digital multimedia broadcasting receiver, telephone receivers, digital video decoders and recorders, a digital audio broadcasting receiver, voice recognition systems, a cellular telephone handset either directly connected or linked via infrared, a digital cell phone module and a gateway to other buses.
      <br/>
      These are just exemplary of the many different kinds of attached devices which can be connected to the bus and controlled using the principles of this invention.
    </p>
    <p num="18">
      FIG. 3 is a block diagram of an exemplary vehicle control center 110 shown in FIG. 2 in accordance with the invention.
      <br/>
      A CPU 300 and memory 310 are connected to bus 120.
      <br/>
      A touch screen display 330 is connected to the bus over a display interface 320.
      <br/>
      The computer bus 120 may be optionally connected to one or more vehicle networks through interface 340 to attached devices.
      <br/>
      Alternatively, the attached devices may be directly connected to the computer bus.
      <br/>
      Other configurations are possible, but this configuration provides the basic functionality for a vehicle control center.
    </p>
    <p num="19">
      FIG. 4 is a diagram illustrating an exemplary software architecture for the vehicle control center shown in FIG. 3 in accordance with the invention.
      <br/>
      Personal Java (400) runs on top of an operating system 430 and implements a virtual machine in the usual Java manner.
      <br/>
      The plurality of JavaBeans (tm)  410 are stored and may be selectively activated for carrying out the control functions in accordance with the invention.
      <br/>
      One or more applications may also be run on the virtual machine.
    </p>
    <p num="20">
      FIG. 5 is a block diagram of a first exemplary device attached to a vehicle network.
      <br/>
      Devices attached to the network bus 120, such as attached vehicle device 130 are typically run by a device controller 500.
      <br/>
      A device controller can be implemented as a finite state machine or as simple logic responding to the bus state.
      <br/>
      In the simplest implementation, illustrated here, a memory device such as ROM 510 stores information about the device and in addition, in one embodiment, contains a plurality of JavaBeans (tm)  520 for uploading to the vehicle control center over bus 120.
    </p>
    <p num="21">
      FIGS. 6A and 6B show an exemplary alternative device attached to a vehicle network and a corresponding software architecture for the alternative device, respectively, in accordance with the invention.
      <br/>
      A more sophisticated attached device 600 contains its own CPU or controller and memory 620 connected to the bus 120.
      <br/>
      In this particular implementation, embedded Java 630 can be run using CPU 610.
      <br/>
      A standard application programming interface (API) for automotive applications can be defined to standardize the programming interfaces to automotive devices.
      <br/>
      One or more Java (tm)  objects conforming to the API, hereinafter called standard device interfaces 640 are stored as JavaBeans (tm)  in the memory space of the attached device.
    </p>
    <p num="22">
      The embedded Java platform is an implementation of the Java platform that is customized for embedded devices, which typically have no display and limited user input/output capabilities.
      <br/>
      Personal Java is a more extensive subset of Java for devices which include a display and better user I/O.
      <br/>
      The FIG. 5 device does not need a version of Java at all in the attached device.
    </p>
    <p num="23">
      FIG. 7 illustrates a preferred way in which information can be stored in ROM (FIG. 5) or stored in memory (FIG. 6) in accordance with the invention.
      <br/>
      Typically, a device ID 700 will be stored.
      <br/>
      The device ID may contain information such as an identification of the manufacturer 710, a model number 720, a serial number of the device 730 and other information.
      <br/>
      In one embodiment, one or more standard device interfaces 740, such as standard device interface 1 or standard device interface N may be stored.
      <br/>
      In a preferred embodiment, each standard device interface includes a control bean for the execution of functionality to be performed in the vehicle control center to control the device with which the control bean is associated as well as a GUI bean which implements a graphical user interface by which the control functionality of the control bean may be exercised.
    </p>
    <p num="24">
      As an alternative to storing a control bean 750 and a GUI bean 760 or other beans associated with the standard device interface 740, the memory device or ROM may store a network address such as a uniform resource locator (URL) from which the appropriate manufacturer's interface may be downloaded.
      <br/>
      This permits the manufacturer to update a user interface on a dynamic basis and ensure that the most recent version of the manufacturer device interface is downloaded when a device is installed.
      <br/>
      This also reduces the ROM space required for storing the manufacturer's interface information and reduces the cost of the attached end device.
    </p>
    <p num="25">
      One should note that there are a number of ways in which the standard device interfaces or custom interfaces can be installed in the vehicle control center.
      <br/>
      They can be pre-installed in the vehicle control center when it is installed in the vehicle.
      <br/>
      Additionally, they can be requested and downloaded from the attached devices as described more hereinafter.
      <br/>
      They can be loaded from a diskette, CDROM, EPROM or other memory medium into the vehicle control center.
      <br/>
      They can be received over a network link from a URL address which address is either downloaded from the attached device or entered manually, and they can be input over an I/O link, such as an infrared port to the vehicle control center.
    </p>
    <p num="26">
      FIG. 8 illustrates a preferred process for developing and storing JavaBeans (tm)  in accordance with the invention.
      <br/>
      A developer develops software to be implemented in a bean using, for example, the Java Development Kit (tm) . The state of the bean and the code associated with the bean can be serialized and stored, using a standard call provided with the Java Development KitT (tm) . It can of course be done equivalently using software developed by others for that purpose.
      <br/>
      The serialized bean is then stored (820) in memory for use as described in this specification.
    </p>
    <p num="27">
      FIG. 9 is an illustration of an exemplary graphical user interface used in a network vehicle in accordance with the invention.
      <br/>
      In a preferred embodiment, the vehicle control center uses a touch screen display 330.
      <br/>
      The touch screen display is configured in a plurality of different ways to form a reconfigurable dashboard.
      <br/>
      In the exemplary GUI implementation shown in this Figure, a number of interfaces are selectable by touching buttons associated with the bottom row.
      <br/>
      Activation of one of the buttons on the bottom row will select the particular interface to be displayed in the space above the bottom row.
      <br/>
      In the Example shown in FIG. 9, the interface for the sound system has been activated by touching button 910.
      <br/>
      The fact that button 910 has been activated is indicated by the enhanced border around the button.
      <br/>
      When other buttons are selected, they will be similarly enhanced and the border around the sound system button 910 will revert to a normal outline.
      <br/>
      Each of the buttons shown on touch screen 330 can be implemented as an individual Java bean.
      <br/>
      JavaBeans (tm)  can contain other JavaBeans (tm)  in a hierarchical fashion.
      <br/>
      Accordingly, the entire graphical interface display area of touch screen 330 can be implemented using JavaBeans (tm)  contained within one graphical user interface Java bean.
    </p>
    <p num="28">
      Along the left margin of the graphical interface display area are a plurality of buttons for selecting an appropriate sound function.
      <br/>
      In this case, the FM front end source has been selected as indicated by the enhanced boarder around button 920.
      <br/>
      Other selections include a CD player source, a tape player source and an AM radio front end.
      <br/>
      Volume control, adjustment of treble and bass, channel selection and scanning are also implemented.
      <br/>
      A display element 940 shows the particular source selected and window 930 shows the frequency of the station selected when in this mode.
      <br/>
      It is particularly instructive to note that many of the beans used to implement this graphical user interface may be reused in implementing the other interfaces for the CD, the tape, and the AM radio selections.
      <br/>
      Thus, the user of JavaBeans (tm)  is provided with a powerful way to construct a graphical user interface.
      <br/>
      One should also note that each of the control functions, such as volume and tuning, invokes underlying functionality which would typically be part of the control bean associated with the graphical user interface bean used to implement the graphical interface display area.
    </p>
    <p num="29">
      FIGS. 10A-10D illustrate stages by which a vehicle control center can obtain a standard device interface from an attached device in accordance with the invention.
      <br/>
      FIG. 10A illustrates the state in which two devices A and B have been attached to the bus 120.
      <br/>
      A Java bean 1000A represents an interface to device A and a Java bean 1000B represents an interface to device B. In FIG. 10B, a new device is shown added to the bus 120.
      <br/>
      It contains within it, as discussed previously, a standard device interface for the new device, such as one provided by a manufacture.
      <br/>
      However, that standard device interface, 1000C, has not been loaded into the vehicle central control 110.
      <br/>
      As discussed herein, the vehicle central control sends a request over the bus 120 to newly connected device C requesting download of its standard device interface.
      <br/>
      In response to this request, the standard device interface 1000C is uploaded from the attached device to the vehicle control center 110 where it is stored.
      <br/>
      FIG. 10D shows the final state in which the control beans 1000C are stored in the vehicle control center for use in controlling device C over the bus.
    </p>
    <p num="30">
      FIGS. 11A and 11B are flow charts of processes used to carry out the process described in conjunction with FIGS. 10A-10D in accordance with the invention.
      <br/>
      In FIG. 11A, the vehicle control center detects (1100) a new device.
      <br/>
      This can be done in any of the ways used in conjunction with normal plug and play detection.
      <br/>
      Typically this will occur upon boot-up.
      <br/>
      The vehicle control center then sends a request to the new device to download the standard device interface (110).
      <br/>
      The new device then sends one or more standard device interfaces to the vehicle control center (1120).
      <br/>
      The vehicle control center receives and stores (1130) the one or more standard device interfaces as discussed more in conjunction with FIG. 12. This particular form of the invention is preferred where hot adaptation of the bus configuration is not desired.
    </p>
    <p num="31">
      FIG. 11B shows a process which is preferred when hot reconfiguration of the bus is desired, that is, addition of devices to the bus without rebooting.
      <br/>
      This will be referred to as hot plug and play.
      <br/>
      When a device is connected to the bus during operation (1140), the device accesses the bus and sends its device ID (1150).
      <br/>
      The attached device then waits for a request from the vehicle control center and, if such a request is received, the vehicle device sends one or more standard device interfaces to the vehicle control center (1160).
    </p>
    <p num="32">
      It may be that the vehicle control center already contains a standard or custom interface for the particular device identified by the device ID.
      <br/>
      If that is the case, there will be no need to request the download of the interface from the attached device.
      <br/>
      If, however, the vehicle control center does not contain an interface for running the identified device, it can be requested and uploaded from the attached device to the vehicle control center.
    </p>
    <p num="33">
      FIG. 12 is a flow chart of a preferred process for handling one or more standard device interfaces received over the network or bus in accordance with the invention.
      <br/>
      When the vehicle control center receives one or more standard device interfaces (1200), preferably as one or more JavaBeans (tm) , it checks to see if a preferred interface already has been stored for the device (1210).
      <br/>
      If there has been (1210-Y), the preferred interface will be used and the uploaded interface optionally discarded (1220).
      <br/>
      If there is no preferred interface already stored for the device (1210-N), the vehicle control center will determine whether plural interfaces have been received (1230).
      <br/>
      If only a single interface has been received (1230-N), that interface will be used to control the attached device (1240).
      <br/>
      If a plurality of interfaces are received (1230-Y), one will activate the interface selection mechanism shown in FIG. 13 (1250) and then use the selected interface (1260).
    </p>
    <p num="34">
      This process allows for customized interfaces for a particular device to be used in preference to a standard device interface.
      <br/>
      For example, although a particular CD player may come with a standard interface package, when it is integrated into a vehicle, for example, into a Cadillac (tm)  by General Motors.RTM., the vehicle manufacturer may have certain standards for look and feel which it desires to have consistent across all attached devices.
      <br/>
      In this case, the manufacturer of the vehicle would install GUI beans into the vehicle control center which would be used in preference to the GUI bean provided by the attached device manufacturer.
      <br/>
      These GUI beans may use the control beans provided by the device to access the device's capabilities.
      <br/>
      Further, the manufacturer may wish to preinstall a plurality of standard device interfaces which can be selectively applied by a user of a vehicle depending on the users preferences.
    </p>
    <p num="35">
      FIG. 13 is a flow chart of a process used to select an interface from a plurality of interfaces.
      <br/>
      In order to do this, a list of each interface stored in the device is presented (1300) and a prompt given to a user to select one of the listed interfaces.
      <br/>
      In a preferred embodiment, each of the stored interfaces is listed in an expanded data structure as discussed more hereinafter in conjunction with FIG. 16. The user then selects (1310) the desired device interface to use and the process returns (1320).
    </p>
    <p num="36">
      FIG. 14 is a flow chart of a process for removing a device from the network.
      <br/>
      When a device is removed from its bus connection (1400), the vehicle control center detects that a device previously installed is no longer connected (1410).
      <br/>
      This can be done, preferably, using the process described in conjunction with FIG. 17 although there are several commonly known ways of detecting that a device has been removed.
      <br/>
      When a device is detected as having been removed, the device interface, previously received from the device is removed from memory (1420) and the data structure is updated to remove the device entries (1430).
    </p>
    <p num="37">
      FIG. 15 is an illustration of a simple data structure used in conjunction with JavaBeans (tm) . In this example, the data structure 1500 is a simple text list of key-value pairs.
      <br/>
      It contains a field 1510 which describes an object name (a key) and a field 1520 containing a value associated with the object name.
      <br/>
      In this case, the value can be a reference or a handle to the object named in column 1510.
      <br/>
      As discussed herein, this data structure can be used to detect removal of objects from the bus or to add objects received over the bus from attached devices.
      <br/>
      The use of the data structure in accordance with the invention includes the use of the data structure for scanning to see whether a device is still attached to the bus as well as adding names to the data structure when standard device interfaces are uploaded from the attached devices and stored in the vehicle control center.
    </p>
    <p num="38">
      FIG. 16 is an illustration of an expanded data structure preferred for use in carrying out the invention.
      <br/>
      The expanded data structure goes beyond a simple list of key-value pairs.
      <br/>
      In this implementation, there is a field 1610 in which a device type may be identified, a field 1620 in which a control bean reference may be included, a field 1630 in which a GUI bean reference may be listed and a field 1640 which indicates a preferred interface to be used when plural beans for a control and/or GUI purposes are present.
      <br/>
      While this data structure is illustrated in table form, the same information can be stored in other ways, such as a hierarchical tree.
      <br/>
      An interface is a particular object type defined in a Java source file.
      <br/>
      It defines labels for a set of method calls, but the instantiation or code which executes the method calls is separate.
      <br/>
      The instantiation code is preferably in the form of a Java bean.
      <br/>
      Thus, associated with a particular device type (1610) may be one or more interfaces, such as those shown in 1620 and those interfaces may be instantiated by one or more JavaBeans (tm)  listed in column 1630.
    </p>
    <p num="39">For example, a Java interface might have the following appearance:</p>
    <p num="40">interface CDPlayer +</p>
    <p num="41">
      - start ( );
      <br/>
      - stop ( );
      <br/>
      - play track (int n);
      <br/>
      - play disk (int n)
      <br/>
      }
    </p>
    <p num="42">
      The start function from the interface might be implemented as follows:
      <br/>
      Class my_CDPlayer implements CDPlayer +
      <br/>
      - start ( ) +
      <br/>
      - send_start_command_over_bus( );
      <br/>
      - }
      <br/>
      }
    </p>
    <p num="43">
      The visual component for implementing the CD player of this example might be implemented as follows:
      <br/>
      Class my_CDPlayer implements CDPlayer,
      <br/>
      Java.awt.Component +
      <br/>
      }
    </p>
    <p num="44">
      One should note that the interface contains no execution code but does define the calls or commands used with the interface.
      <br/>
      An actual JavaBean (tm)  object implements the interface.
      <br/>
      Thus, most of the API consists of interface definitions which are implemented by the actual code defined by the manufacturer of the attached device and provided as part of the control bean and GUI beans uploaded from the attached device.
    </p>
    <p num="45">
      FIG. 17 is a flow chart of a process for automatically removing devices from the network in accordance with the invention.
      <br/>
      Upon start-up, if normal plug and play is used and optionally (when hot plug and play is used) periodically thereafter (1700), for each object representing a device in the data structure (1710) a check will be made if the device is still attached (1740).
      <br/>
      If it is, the next object will be considered (1730).
      <br/>
      If it is not (1740-N), the object will be deleted from the data structure (1750).
    </p>
    <p num="46">
      FIG. 18 is a flow chart of a process for editing interfaces or components of an interface.
      <br/>
      When an interface function is selected (1800) a list of device types is presented from which a selection may be made.
      <br/>
      When the selection is made (1810), a list of JavaBeans (tm)  associated with the selected device type are displayed (1820).
      <br/>
      These can be obtained from the enhanced data structure shown in FIG. 16. The particular beans desired to instantiate the device interface are then selected (1830) and the enhanced data structure is modified to reflect the user selections (1840).
    </p>
    <p num="47">Thus, there have been disclosed herein techniques for using JavaBeans (tm)  to provide for plug and play and hot plug and play functionality and for allowing plug and play operation to occur even where the vehicle control center has no a priori knowledge of the type of device being attached to the bus.</p>
    <p num="48">Although the present invention has been described and illustrated in detail, it is clearly understood that the same is by way of illustration and example only and is not to be taken by way of limitation, the spirit and scope of the present invention being limited only by the terms of the appended claims and their equivalents.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A vehicle comprising:</claim-text>
      <claim-text>a. a communications medium; b. one or more devices connected to said communications medium, each device controllable over said medium; c. a vehicle control center, connected to said medium, said vehicle control center including a control element and memory, said memory including one or more beans for controlling said one or more devices;</claim-text>
      <claim-text>and wherein each of said one or more beans is a portable and re-usable, self-contained Java software component.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The vehicle of claim 1, in which at least a first device includes at least one bean usable by another device to control said first device.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The vehicle of claim 2 in which said control element is configured to request at least one bean from said at least a first device.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The vehicle of claim 2 in which said at least a first device is one of a cabin lighting interface, amp/speaker, CD player, AM/FM radio and tape player, GPS, heat/air conditioning, radar, air bag activation and status, video cameras, emergency rescue, alarms, anti-theft system, odometers, gyroscope, route guidance, access control, location transponder, video games, an internet connection, a digital multimedia broadcasting receiver, telephone receivers, digital video decoders and recorders, a digital audio broadcasting receiver, voice recognition systems, a cellular telephone handset either directly connected or linked via infrared, a digital cell phone module and a gateway to other buses.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The vehicle of claim 2 in which said vehicle control center includes a touch screen display and said bean includes a graphical user interface (GUI) for interacting with said touch screen display.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The vehicle of claim 5 in which said graphical user interface GUI is a bean.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The vehicle of claim 2 in which said bean includes a control bean for controlling said device.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The vehicle of claim 1 in which said vehicle control center includes a touch screen display.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The vehicle of claim 1 in which said control element is a processor running Personal Java (tm) .</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A method of installing a device to become part of an automotive computer system, comprising the steps of: a. connecting said device to said computer system; b. sending one or more beans from said device to a control element in said computer system;</claim-text>
      <claim-text>and wherein each of said one or more beans is a portable and re-usable, self-contained Java software component.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 10 in which said control element detects connection of said device to said computer system and, in response thereto, requests said one or more beans.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method of claim 11 in which said one or more beans consists of at least one of a control bean and a GUI bean.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 11 in which said one or more beans includes one or more respective standard device interfaces provided by the manufacturer of said device.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 10 in which said device, once connected to said computer system, automatically sends said one or more beans to said control element.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A method of installing a device to become part of a computer system, comprising the steps of: a. downloading one or more beans from said device to a control element of said computer system, and b. selecting from among said one or more beans and one or more previously stored beans to select an interface for controlling said device;</claim-text>
      <claim-text>and wherein each of said one or more beans and each of said one or more previously stored beans is a portable and re-usable, self-contained Java software component.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 15, in which said computer system is an automotive computer system.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 15 in which said device is one or more of a cabin lighting interface, amp/speaker, CD player, AM/FM radio and tape player, GPS, heat/air conditioning, radar, air bag activation and status, video cameras, emergency rescue, alarms, anti-theft system, odometers, gyroscope, route guidance, access control, location transponder, video games, an internet connection, a digital multimedia broadcasting receiver, telephone receivers, digital video decoders and recorders, a digital audio broadcasting receiver, voice recognition systems, a cellular telephone handset either directly connected or linked via infrared, a digital cell phone module and a gateway to other buses.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. A method of uninstalling a device from a computer system, comprising the steps of: a. disconnecting said device from said computer system, b. detecting that said device is no longer connected, and c. identifying a bean used for controlling said device as no longer needed;</claim-text>
      <claim-text>and wherein said bean is a portable and re-usable, self-contained Java software component.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 18, further comprising the step of deleting a bean which is no longer needed.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of claim 18, further comprising the step of removing a bean which is no longer needed.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. A product for controlling an automotive computer system, comprising: a. a memory medium;</claim-text>
      <claim-text>and b. a series of instruction, stored on said memory medium for sending one or more beans from a device attached to said automotive computer system to a control element in said computer system;</claim-text>
      <claim-text>and wherein each of said one or more beans is a portable and re-usable, self-contained Java software component.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A product for controlling an automotive computer system, comprising: a. a memory medium;</claim-text>
      <claim-text>and b. a series of instruction, stored on said memory medium for downloading one or more beans from said device to a control element of said computer system, and for selecting from among said one or more beans downloaded from said device and one or more previously stored beans to select an interface for controlling said device;</claim-text>
      <claim-text>and wherein each of said one or more beans is a portable and re-usable, self-contained Java software component.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. A product for controlling an automotive computer system, comprising: a. a memory medium;</claim-text>
      <claim-text>and b. a series of instruction, stored on said memory medium for disconnecting said device from said computer system, detecting that said device is no longer connected, and identifying a bean used for controlling said device as no longer needed;</claim-text>
      <claim-text>and wherein said bean is a portable and re-usable, self-contained Java software component.</claim-text>
    </claim>
  </claims>
</questel-patent-document>