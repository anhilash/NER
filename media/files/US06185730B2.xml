<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185730B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185730</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185730</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22390511" extended-family-id="42113861">
      <document-id>
        <country>US</country>
        <doc-number>09120471</doc-number>
        <kind>A</kind>
        <date>19980723</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09120471</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43172247</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>12047198</doc-number>
        <kind>A</kind>
        <date>19980723</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09120471</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   9/44        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>44</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   9/46        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>46</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>717108000</text>
        <class>717</class>
        <subclass>108000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>717118000</text>
        <class>717</class>
        <subclass>118000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-009/44F2</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>44F2</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-009/46M</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>46M</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/465</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>465</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20180210</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20180201</date>
        </classification-scheme>
        <classification-symbol>G06F-009/4488</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>4488</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20180203</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>23</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>3</number-of-drawing-sheets>
      <number-of-figures>8</number-of-figures>
      <image-key data-format="questel">US6185730</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for creating dippable beans in a java environment</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>WALDO JAMES H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5815709</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5815709</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>MCDONALD MARC B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5822587</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5822587</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>DEARTH GLENN A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5848236</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5848236</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>KRUSKAL VINCENT JOSEPH, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5918052</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5918052</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>ALCORN JOHN WILLIAM</text>
          <document-id>
            <country>US</country>
            <doc-number>5933144</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5933144</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>CONNER MIKE H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5418964</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5418964</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>CUTLER DAVID N, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5598562</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5598562</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>GARLOFF GARY W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5699310</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5699310</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>IBM, Bean Extender is rated JARS TOP 25%, http://www.alphaworks.ibm.com/tech/beanextender, Dec. 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Java Sun, Java: The First 800 Days, http://java.sun.com/events/jibe/timeline.html., Feb. 2000.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>IBM Bean Extender Guide to Features, The Dipping Framework, IBM Bean Extender Documentation Suite (http://www.alphaWorks.ibm.com/tech; file to download: extender2_0-doc.zip), Dec. 12, 1999.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="4">
          <text>Zukowski, Introduction to the JavaBeans API, http://developer.java.sun.com/developer/...raining/Beans/JBeansAP/shortcourse.html, Jun. 1998.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="5">
          <text>Otto Fox, BeanExtender's Dipping Technique, http://www7.software.ibm.com/vad.nsf/Dat...ment2013?OpenDocument&amp;p=1&amp;BCT=3&amp;Footer=1, Sep. 1999.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>Grady Booch; Object Oriented Design with Applications; pp. 95-96, 114-116.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>LeBlanc, Karalee Brown</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Yee, Duke W.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Mims, David A.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Hafiz, Tariq R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      The present invention provides a method and apparatus for creating objects in an object-oriented environment, such as Java.
      <br/>
      An interface is selected for and along with an implementation object.
      <br/>
      The interface and the implementation object are morphed to create a dippable object in a new class that includes the selected interface.
      <br/>
      The dippable object is able to accept new behaviors though dips.
      <br/>
      The dippable object calls an instance of the implementation object in response to calls made to the interface.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CROSS-REFERENCE TO RELATED APPLICATION</heading>
    <p num="1">The present invention is related to an application entitled "An Object Oriented Programming System With Objects For Dynamically Connecting Functioning Programming Objects With Objects For General Purpose Operation", LeBlanc et al., Ser. No. 08/953,345, filed Oct. 17, 1997, assigned to a common assignee, which is incorporated herein by reference.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      1.
      <br/>
      Technical Field
    </p>
    <p num="3">
      The present invention relates to an improved data processing system and in particular to object-oriented programming systems.
      <br/>
      Still more particularly, the present invention relates to a method and apparatus creating Java Beans.
    </p>
    <p num="4">2. Description of Related Art</p>
    <p num="5">
      A computer includes both a physical machine, namely the hardware, and the instructions which cause the physical machine to operate, namely the software.
      <br/>
      Software includes both application and operating system programs.
      <br/>
      If the program is simply to do tasks for a user, such as solving specific problems, it is referred to as application software.
      <br/>
      If a program controls the hardware of the computer and the execution of the application programs, it is called operating system software.
      <br/>
      System software further includes the operating system, the program that controls the actual computer or central processing unit (CPU), and device drivers that control the input and output devices (I/O) such as printers and terminals.
    </p>
    <p num="6">
      A number of application programs are usually present waiting to use the CPU.
      <br/>
      The operating system determines which program will run next, how much of the CPU time it will be allowed to use, and what other computer resources the application will be allowed to access and use.
      <br/>
      Further, each application program will require a special input or output device and the application program must transfer its data to the operating system, which controls the device drivers.
    </p>
    <p num="7">
      A network containing a number of computers may be formed by having these computers, also referred to as "nodes" or "network computers", communicate with each other over one or more communications links, which is an aggregation which is a computer network.
      <br/>
      Today, many computer workstations are connected to other workstations, file servers, or other resources in a network.
      <br/>
      Each computer on a network is connected to the network via an adapter card or other similar means, which provides an ability to establish a communications link to the network.
    </p>
    <p num="8">
      Programs are often sent to a computer from the server.
      <br/>
      Java programs are becoming increasingly more prevalent as the type of program sent between server and client computers.
      <br/>
      Java programs are common on the Internet and becoming more increasingly common in intranets and in other types of networks used in businesses.
    </p>
    <p num="9">
      Java is an object oriented programming language and environment focusing on defining data as objects and the methods that may be applied to those objects.
      <br/>
      Java supports only a single inheritance, meaning that each class can inherit from only one other class at any given time.
      <br/>
      While Java only allows a class to inherit from a single class, that class can implement multiple interfaces.
      <br/>
      Java also allows for the creation of totally abstract classes known as interfaces, which allow the defining of methods that may be shared with several classes without regard for how other classes are handling the methods.
    </p>
    <p num="10">
      Java object may be changed to create new classes and given new behavior in addition to the behavior obtained though inheritance.
      <br/>
      In some cases, creation of objects through inheritance does not provide the desired flexibility.
      <br/>
      For example, inheritance in some cases exposes too much of the original object's methods, which may pose a security issue.
    </p>
    <p num="11">Therefore, it would be advantageous to have an improved method and apparatus for creating objects with increased flexibility.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="12">
      The present invention provides a method and apparatus for creating objects in an object-oriented environment, such as Java.
      <br/>
      An interface is selected for and along with an implementation object.
      <br/>
      The interface and the implementation object are morphed to create a dippable object in a new class that includes the selected interface.
      <br/>
      The dippable object is able to accept new behaviors through dips.
      <br/>
      The dippable object calls an instance of the implementation object in response to calls made to the interface.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="13">
      The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:
      <br/>
      FIG. 1 is a block diagram of a data processing system in which the present invention may be implemented is illustrated;
      <br/>
      FIG. 2 is a diagram of a dipping framework in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 3A is a diagram of process for generating a dippable object using inheritance in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 3B is a diagram of process for generating a dippable object using aggregation in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 4 is a diagram of the message flow for a dippable object created through aggregation is depicted in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 5 is a diagram of a dipping process in accordance with a preferred embodiment of the present invention; and
      <br/>
      FIG. 6 is a flowchart of a process for creating dippable objects in accordance with a preferred embodiment of the present invention; and
      <br/>
      FIG. 7 is a high level flowchart of a process for creating a dippable object through aggregation in accordance with a preferred embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="14">
      With reference now to the figures and in particular with reference to FIG. 1, a block diagram of a data processing system 100 in which the present invention may be implemented is illustrated.
      <br/>
      Data processing system 100 may be used either as a server or a computer.
      <br/>
      Data processing system 100 employs a peripheral component interconnect (PCI) local bus architecture.
      <br/>
      Although the depicted example employs a PCI bus, other bus architectures such as Micro Channel and ISA may be used.
      <br/>
      Processor 102 and main memory 104 are connected to PCI local bus 106 through PCI bridge 108.
      <br/>
      PCI bridge 108 also may include an integrated memory controller and cache memory for processor 102.
      <br/>
      Additional connections to PCI local bus 106 may be made through direct component interconnection or through add-in boards.
      <br/>
      In the depicted example, local area network (LAN) adapter 110, SCSI host bus adapter 112, and expansion bus interface 114 are connected to PCI local bus 106 by direct component connection.
      <br/>
      In contrast, audio adapter 116, graphics adapter 118, and audio/video adapter (A/V) 119 are connected to PCI local bus 106 by add-in boards inserted into expansion slots.
      <br/>
      Expansion bus interface 114 provides a connection for a keyboard and mouse adapter 120, modem 122, and additional memory 124.
      <br/>
      SCSI host bus adapter 112 provides a connection for hard disk drive 126, tape drive 128, and CD-ROM 130 in the depicted example.
      <br/>
      Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.
    </p>
    <p num="15">
      An operating system runs on processor 102 and is used to coordinate and provide control of various components within data processing system 100 in FIG. 1.
      <br/>
      The operating system may be commercially available operating system such as OS/2, which is available from International Business Machines Corporation. "OS/2" is a trademark of from International Business Machines Corporation.
      <br/>
      An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system 100.
      <br/>
      Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive 126 and may be loaded into main memory 104 for execution by processor 102
    </p>
    <p num="16">
      Those of ordinary skill in the art will appreciate that the hardware in FIG. 1 may vary depending on the implementation.
      <br/>
      For example, other peripheral devices, such as optical disk drives and the like may be used in addition to or in place of the hardware depicted in FIG. 1.
      <br/>
      The depicted example is not meant to imply architectural limitations with respect to the present invention.
      <br/>
      For example, the processes of the present invention may be applied to multiprocessor data processing system.
    </p>
    <p num="17">
      The present invention provides a method, data processing system, and instructions for creating dippable Java Beans using either inheritance or aggregation, rather than just inheritance alone.
      <br/>
      A preferred embodiment of the present invention also provides processes used in a code generator to create a dippable Java Bean using an interface and a Java Bean
    </p>
    <p num="18">
      Turning now to FIG. 2, a diagram of a dipping framework is depicted in accordance with a preferred embodiment of the present invention.
      <br/>
      Dipping framework 200 is used by dippable class 202.
      <br/>
      A dippable class can be created two ways: either through inheritance or aggregation.
      <br/>
      Dipping framework 200 may be found in IBM BeanExtender technology available from International Business Machines Corporation.
      <br/>
      Dipping framework 200 takes an original class and employs a morphing process to create a new dippable class 202 where all methods a bound and constrained.
      <br/>
      The only classes that are allowed to bind or constrain the dippable class 202 through dips, which are classes that include an interface that allows interaction with dippable classes.
      <br/>
      This mechanism allows new behaviors or functions to be applied to a dippable class though dips.
      <br/>
      Any Java class may be made dippable.
      <br/>
      The depicted examples below are directed towards making dippable Java Beans. "Java Bean" is a trademark of Sun Microsystems, Inc.
      <br/>
      Dips in the depicted examples are beans that react to state changes in dippable beans to which the dips are attached.
      <br/>
      Dips modify the runtime behavior of beans to which they are attached, but do not provide new interfaces on beans to which they are attached.
    </p>
    <p num="19">
      With reference now to FIG. 3A, a diagram of process for generating a dippable object using inheritance is depicted in accordance with a preferred embodiment of the present invention.
      <br/>
      A morphing operation is applied to object 300 using code generator 302 to create a new dippable object 304 through inheritance.
      <br/>
      In the depicted example, object 300 is a Java Bean, which when morphed by code generator 302 results in a dippable Java Bean, dippable object 304.
      <br/>
      Morphing is the term used to describe the creation of a new dippable class from an existing class.
      <br/>
      This dippable object is basically object 300 with modifications in the form of an interface that allow it to accept additional behavior from a dip, which is an object with an interface that provides for interaction with interface in dippable object 304.
      <br/>
      In essence, dippable object 304 looks and behaves like object 300, but has the added ability to accept behavioral modification components.
      <br/>
      With inheritance, an existing class is morphed to create a new dippable class as a child of the original class.
      <br/>
      From this new class definition a dippable object may be instantiated.
    </p>
    <p num="20">
      Turning now to FIG. 3B, a diagram of process for generating a dippable object using aggregation is depicted in accordance with a preferred embodiment of the present invention.
      <br/>
      Code generator 302 generates dippable object 310 through aggregation.
      <br/>
      Object 306 and interface 308 are used by code generator 302 to create dippable object 310.
      <br/>
      With aggregation, an interface and a corresponding implementation of the class is used to create a new dippable class that implements the interface and using a selected object, also referred to as an "implementation object".
      <br/>
      This implementation object is an object that "implements" or has the interface selected for creating dippable object 310.
      <br/>
      This dippable object is not a child of the implementation object, object 306.
    </p>
    <p num="21">Both dippable classes created using inheritance and aggregation implement a dippable interface that allows addition of one or more dips.</p>
    <p num="22">
      Turning now to FIG. 4, a diagram of the message flow for a dippable object created through aggregation is depicted in accordance with a preferred embodiment of the present invention.
      <br/>
      Dipping is the ability to add behaviors to existing dippable classes through dips.
      <br/>
      Dippable object 400 implements an interface 402 used to interact with other objects.
      <br/>
      Another interface (not shown) is employed to allow for the addition of dips.
      <br/>
      Interface 402 is the interface used in creating dippable object 400.
      <br/>
      The method or methods within dippable object does not provide the functions described by interface 402.
      <br/>
      Instead, the method or methods within dippable object 400 make calls to implementation object 404, which is an instance of an object in the class of objects selected for use in creating dippable object 400.
      <br/>
      Implementation object 404 returns a response to dippable object 400, which may be returned to the caller.
    </p>
    <p num="23">
      For example, if the interface selected for aggregation is "Pets" with a method called "MakeNoise" and the implementation object is in the class of "Dogs", the resulting dippable object will be in a new class implementing the interface "Pets" and the method "MakeNoise" will send a call to an instance of an object in the class "Dogs".
      <br/>
      A call to the dippable object will result in a call made to the implementation object in the class "Dogs".
      <br/>
      If the result from "MakeNoise" returned to the dippable object is "Bark", this result may be returned by the dippable object to the calling object.
      <br/>
      The calling object does not know that the function was not performed within the dippable object.
      <br/>
      This dippable object may have behavior modifications through the addition of dips.
    </p>
    <p num="24">
      In essence, dippable object 400 delegates the responsibility for providing the function to implementation object 404.
      <br/>
      Such a delegation also provides for increased security because an examination of dippable object 400 does reveal the methods used by interface 402.
    </p>
    <p num="25">
      With reference now to FIG. 5, a diagram of a dipping process is depicted in accordance with a preferred embodiment of the present invention.
      <br/>
      After an object has been made dippable, behavior modifications may be made by calling the Add Dip method which is on every dippable object.
      <br/>
      Dippable object 502 takes dip 504 and adds dip 504 to its list of attached dips.
      <br/>
      Dip 504 encapsulates behavior that is to be added to dippable object 502.
      <br/>
      In addition, dip 504 controls dippable object 502 with respect to the added behavior.
    </p>
    <p num="26">
      Morphing and dipping are both used to modify a program to add or modify behavior of the object.
      <br/>
      In addition, added or modified behavior may be easily removed at a later time by removing the dip.
      <br/>
      Morphing is a means by which a new dippable class is created from an existing class, or an existing class plus an interface.
      <br/>
      In the new dippable class, all methods, events, and properties of the original class can have "before" and "after" notifications performed.
      <br/>
      In addition, any "before" notification can also veto the execution of the method, property, or event.
      <br/>
      This mechanism is handled by applying a dip to the dippable class created by the morphing process.
      <br/>
      The dip then uses the "before" and "after" notifications to modify the behavior of the dippable class.
      <br/>
      More information on morphing and dipping objects are found in assignee's co-pending U.S. Patent Application entitled "An Object Oriented Programming System With Objects For Dynamically Connecting Functioning Programming Objects With Objects For General Purpose Operation", LeBlanc et al., Ser. No. 08/953,345, filed Oct. 17, 1997. In this application "morphing" is described as a process for creating hooks in a connecting object which fires events to notify interested object.
      <br/>
      Morphing is the means by which an original general purpose Bean is extended using a connecting layer to hook the original Bean's property changes, event generation, and method calls and notify any interested context layer objects (dips) to produce a dippable general purpose Bean.
    </p>
    <p num="27">
      Turning now to FIG. 6, a flowchart of a process for creating dippable objects is depicted in accordance with a preferred embodiment of the present invention.
      <br/>
      This process is implemented by code generator, which is in a DippableGenerator class which is found in the dipping framework in the depicted examples.
      <br/>
      The process is shown with respect to a Java bean, but can be applied to any type of object in an object-oriented environment.
    </p>
    <p num="28">
      The process begins by determining whether the input indicates that inheritance or aggregation is to be used to create a dippable bean (step 600).
      <br/>
      In the depicted example, the input to the process may be a string containing the name of a bean or a string containing the name of an interface and a corresponding implementation bean.
      <br/>
      If the input is just the name of a bean, inheritance is to be used.
      <br/>
      An input including the name of an interface and a corresponding implementation bean indicates that aggregation is to be used in creating a dippable bean.
    </p>
    <p num="29">
      If the input indicates that aggregation is to be used, the name of the interface and the name of the corresponding implementation bean are received (step 602).
      <br/>
      Thereafter, a bean object is created using the inputs (step 604).
      <br/>
      The bean object created in step 604 implements the interface named in the string as well as a dippable bean interface.
      <br/>
      The bean includes a reference to the implementation bean named in the string.
      <br/>
      The dippable bean is not a subclass of the implementation bean.
      <br/>
      Instead the dippable bean implements the interface named in the input and uses the implementation object.
      <br/>
      The process terminates thereafter.
    </p>
    <p num="30">
      Returning to step 600, if the input indicates that inheritance is to be used in generating a dippable bean, the process then receives the name of the bean object in the input (step 606) and creates a bean object as a child of the original bean (step 608).
      <br/>
      In step 608, the process creates a class reference and, using introspection, produces a subclass of the bean object which implements the dippable interface.
      <br/>
      The process terminates thereafter.
    </p>
    <p num="31">
      With reference now to FIG. 7, a high level flowchart of a process for creating a dippable object through aggregation is depicted in accordance with a preferred embodiment of the present invention.
      <br/>
      The process begins by receiving a name of the interface and the object (step 700).
      <br/>
      A determination is made as to whether the object implements the named interface (step 702).
      <br/>
      If the object does not implement the interface, the process terminates.
      <br/>
      Otherwise, a new object is created with the named interface implemented by the object (step 704).
      <br/>
      Another interface is added to the new object to allow interaction with dips (step 706).
      <br/>
      This new object is part of the dippable class and is not a child of the object named in step 700.
    </p>
    <p num="32">
      Thus, the present invention provides a flexible mechanism to create objects through both inheritance and aggregation.
      <br/>
      In addition with aggregation, increased security is provided by exposing only the methods in the interface and not every method in the class.
      <br/>
      The processes provided a dippable object that can delegate functions to instances of objects used to create the dippable object though aggregation.
    </p>
    <p num="33">
      It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in a form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution.
      <br/>
      Examples of computer readable media include recordable-type media such a floppy disc, a hard disk drive, a RAM, and CD-ROMs and transmission-type media such as digital and analog communications links.
    </p>
    <p num="34">
      The description of the present invention has been presented for purposes of illustration and description, but is not limited to be exhaustive or limited to the invention in the form disclosed.
      <br/>
      Many modifications and variations will be apparent to those of ordinary skill in the art.
      <br/>
      For example, the present invention may be applied to object-oriented environments other than Java.
      <br/>
      The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method in a data processing system for creating a dippable object, the method comprising:</claim-text>
      <claim-text>receiving an interface; receiving an identification of an object, wherein the object implements the interface;</claim-text>
      <claim-text>and creating a dippable object, wherein the dippable object is unrelated to the object, wherein the dippable object incorporates the interface, and wherein calls made to the dippable object through the interface are routed to an instance of the object.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1, wherein a method is created for the dippable object in the creating step in which calls made to the interface invoke the method, which sends the call to the instance of the object and receives a response from the instance of the object.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1, wherein the object is a Java object.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 3, wherein the Java object is a Java bean.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A method for generating an object in a computer having an object oriented programming system, the method comprising the computer implemented steps of: identifying an first interface; identifying an object implementing the first interface;</claim-text>
      <claim-text>and creating a new object, wherein the new object includes the first interface and a second interface in which the second interface is employed by the new object to notify a second object of an occurrence of a selected condition and in which calls made to the first interface are sent to the object implementing the first interface.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 5, wherein the new object is a Java bean.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 5, wherein the second object is a dip.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 5, wherein the object oriented programming system is Java.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A code generator in a computer readable medium having a plurality of modes of operation including: a first mode of operation, responsive to identifying an object in which the code generator creates a first type of dippable object using inheritance;</claim-text>
      <claim-text>and a second mode of operation, responsive to identifying an interface and an implementation object, in which the code generator creates a second type of dippable object using aggregation.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The code generator of claim 9, wherein the object is identified in the second mode of operation by receiving a name of the object.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The code generator of claim 9, wherein the interface and the implementation object are identified in the second mode of operation by receiving a name of the interface and a name of the implementation object.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The code generator of claim 9, wherein the object is a Java bean.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A data processing system for creating a dippable object, the data processing system comprising: first reception means for receiving an identification of an interface; second reception means for receiving an identification of an object, wherein the object implements the interface;</claim-text>
      <claim-text>and creating a dippable object, wherein the dippable object is unrelated to the object and wherein the dippable object incorporates the interface and wherein calls made to the dippable object through the interface are routed an instance of the object.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The data processing system of claim 13, wherein a method is created for the dippable object in the creating step in which calls made to the interface invoke the method, which sends the call to the instance of the object and receives a response from the instance of the object.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The data processing system of claim 13, wherein the object is a Java bean.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A data processing system for generating an object in an object oriented programming system located in the data processing system, the data processing system comprising: first identification means for identifying an first interface; second identification means for identifying an object implementing the first interface;</claim-text>
      <claim-text>and creation means for creating a new object, wherein the new object includes the first interface and a second interface in which the second interface is employed by the new object to notify a second object of an occurrence of a selected condition and in which calls made to the first interface are sent to the object implementing the first interface.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The data processing system of claim 16, wherein the new object is a bean.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The data processing system of claim 16, wherein the second object is a dip.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The data processing system of claim 16, wherein the object oriented programming system is Java.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. A computer program product for creating an object in an object oriented programming system, the computer program product comprising: a computer readable medium; first instructions for identifying an first interface; second instructions for identifying an object implementing the first interface;</claim-text>
      <claim-text>and third instructions for creating a new object, wherein the new object includes the first interface and a second interface in which the second interface is employed by the new object to notify a second object of an occurrence of a selected condition and in which calls made to the first interface are sent to the object implementing the first interface, wherein the instructions are embodied within the computer readable medium.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The computer program product of claim 20, wherein the computer readable medium is a CD-ROM.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The computer program product of claim 20, wherein the computer readable medium is a communications link.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The computer program product of claim 20, wherein the computer readable medium is a random access memory.</claim-text>
    </claim>
  </claims>
</questel-patent-document>