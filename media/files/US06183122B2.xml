<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06183122B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06183122</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6183122</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="25448176" extended-family-id="1520006">
      <document-id>
        <country>US</country>
        <doc-number>08923132</doc-number>
        <kind>A</kind>
        <date>19970904</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08923132</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>1580933</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>92313297</doc-number>
        <kind>A</kind>
        <date>19970904</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08923132</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   7/52        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>7</main-group>
        <subgroup>52</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>708631000</text>
        <class>708</class>
        <subclass>631000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>708628000</text>
        <class>708</class>
        <subclass>628000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-007/533B</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>007</main-group>
        <subgroup>533B</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-007/5332</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>7</main-group>
        <subgroup>5332</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-007/49994</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>7</main-group>
        <subgroup>49994</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06F-007/499S</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>11</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>21</number-of-drawing-sheets>
      <number-of-figures>21</number-of-figures>
      <image-key data-format="questel">US6183122</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Multiplier sign extension</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>DELL HAROLD R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>3691359</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US3691359</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>KLOKER KEVIN L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4575812</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4575812</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>TANAKA SHIGERU</text>
          <document-id>
            <country>US</country>
            <doc-number>4791601</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4791601</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>TOKUMARU TAKEJI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4807175</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4807175</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>SIMMONDS STEPHEN M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5251167</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5251167</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Cirrus Logic, Inc.</orgname>
            <address>
              <address-1>Fremont, CA, US</address-1>
              <city>Fremont</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>CIRRUS LOGIC</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>De Angel, Edwin</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Lott, Robert D.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Violette, J. P.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Malzahn, David H.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A digital parallel multiplier having encoders for each segmented bit pair of the multiplier input data and which selects one of 4 coefficients, based on the sum of the bit pair, that are then applied to the multiplicand input data to form a plurality of factored multiplicands.
      <br/>
      The sum of the factored multiplicands is augmented by two additional bits for all but the last of the factored multiplicands and by a logic 1 bit.
      <br/>
      The two additional bits are a logic 1 followed by the inverse of the sign bit of the factored multiplicand and are placed in the next two significant bit positions after the sign bit of the factored multiplicand, and the logic 1 is in the position occupied by the sign bit of the factored multiplicands which has the least significant bit position of all of the sign bits of the factored multiplicands.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
    <p num="1">
      Reference is made to copending application entitled "MULTIPLIER POWER SAVING DESIGN," Ser.
      <br/>
      No. 08/923,133, filed Sep. 4, 1997, and copending application entitled "SMALL AREA MULTIPLIER," Ser.
      <br/>
      No. 08/923,693, filed Sep. 4, 1997 which are hereby incorporated by reference.
    </p>
    <heading>STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT</heading>
    <p num="2">Not Applicable</p>
    <heading>TECHNICAL FIELD OF THE INVENTION</heading>
    <p num="3">The present invention pertains to digital multipliers, and, more particularly, to sign extension circuitry in parallel digital multipliers.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="4">
      The modified-Booth algorithm (as described, for example, in A. D. Booth, "A Signed Binary Multiplication Technique," Quart. J. Mech. AppL Math, vol. 4, pt. 2, pp. 236-240, 1951; and in O. L. MarcSorley, "High-Speed Arithmetic in Binary Computers," IRE Proc, vol. 49, pp. 67-91, Jan. 1961) is widely used to implement multiplication in DSP systems and other applications.
      <br/>
      Although this type of multiplier is not the fastest multiplier design, it does reduce the number of product terms to be added by half when compared to an array multiplier, and also allows a regular layout.
    </p>
    <p num="5">Modified Booth Algorithm</p>
    <p num="6">
      The modified Booth algorithm works essentially as follows: Given two numbers A and B, the algorithm analyzes the multiplier data A (taking three bits at a time) to determine whether to add zero, B,-B, 2B, or -2B based on the entire three bits.
      <br/>
      Table I shows the operation to be realized according to the three bits being analyzed.
      <br/>
      Ri is the accumulated result up to the current iteration.
    </p>
    <p num="7">
      -- TABLE 1
      <br/>
      -- Modified Booth Algorithm
      <br/>
      -- A2i + 1  A2i  A2i - 1  Operation
      <br/>
      -- 0                0    0              Ri = Ri - 1 /4
      <br/>
      -- 0                0    1              Ri = (Ri - 1 + B)/4
      <br/>
      -- 0                1    0              Ri = (Ri - 1 + B)/4
      <br/>
      -- 0                1    1              Ri = (Ri - 1 + 2B)/4
      <br/>
      -- 1                0    0              Ri = (Ri - 1 + 2B)/4
      <br/>
      -- 1                0    1              Ri = (Ri - 1 - B)/4
      <br/>
      -- 1                1    0              Ri = (Ri - 1 - B)/4
      <br/>
      -- 1                1    1              Ri = Ri - Ri - 1 /4
    </p>
    <p num="8">
      Row 1 and Row 8 of table 1 will be called NOOP (NO OPERATION) since from the algorithm perspective no addition is performed, only a division by 4 (i.e, a shift).
      <br/>
      For the radix-4 modified Booth algorithm (i.e., analyzing 3 bits at a time with 1 bit of overlap) it can be observed that in comparison with an array multiplier the number of rows is reduced by half.
      <br/>
      A carry save array is used to add the partial products and a fast adder is used to add the final two words (i.e., carry and sum) producing the final product.
    </p>
    <p num="9">From table 1 it can be observed that the implementation of the modified Booth algorithm requires a 5:1 mux in order to add B, -B, 2B, -2B or zero to the partial product.</p>
    <p num="10">
      A significant improvement can be achieved to reduce the rows of the multiplier if a higher radix is used for the multiplier data (see, for example, H. Sam and A. Gupta, "A Generalized Multibit Recoding of Two's Complement Binary Numbers and Its Proof with Application in Multiplier Implementations," IEEE Transactions on Computers, vol. 39, pp. 1006-1015, 1990).
      <br/>
      The problem associated with this approach is that term 3B needs to be generated which is very difficult (i.e., time consuming). G. Bewick and M. J. Flynn ("Binary Multiplication Using Partially Redundant Multiples," Stanford University Technical Report, no. CSL-TR-92-528, 1992) propose the use of small adders to generate this term in a partially redundant form.
      <br/>
      Still this approach adds overhead to the multiplier and breaks the regular structure of the multiplier.
    </p>
    <p num="11">
      A. Y Kwentus, H. Hung, and A. N. Willson, Jr. ("An Architecture for High Performance/Small Area Multipliers for Use in Digital Filtering Applications," IEEE Journal of Solid-State Circuits, vol. 29, pp. 117-121, 1994) present the architecture of a multiplier where the terms 0, B, 2B, 3B are used.
      <br/>
      The main advantage of this multiplier is the reduction of the multiplexer from 5:1 (modified-Booth) to 4:1.
      <br/>
      The main disadvantage is that the 3B term needs to be pre-computed and stored in memory or generated with a fast adder.
    </p>
    <p num="12">
      -- TABLE 2
      <br/>
      -- Kwentus Encoding
      <br/>
      --         A2i + 1  A2i           Operation
      <br/>
      --         0       0                  Ri = (Ri - 1)/4
      <br/>
      --         0       1                  Ri = (Ri - 1 + B)/4
      <br/>
      --         1       0                  Ri = (Ri - 1 + 2B)/4
      <br/>
      --         1       1                  Ri = (Ri - 1 + 3B)/4
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="13">
      In accordance with the invention, a digital multiplier for multiplying multiplier data by multiplicand data to provide a product utilizes a multiplier data parsing circuit to parse the multiplier data on a group basis to form a first plurality of groups, and to select one of a second plurality of coefficients for factoring the multiplicand to form a first plurality of factored multiplicands.
      <br/>
      The product is the sum of the factored multiplicands plus two additional bits for a each of a third plurality of factored multiplicands plus a logic 1 added in the position of the sign bit of the factored multiplicand with the least significant bit position of all of the respective sign bits of the factored multiplicands.
      <br/>
      The two additional bits for each of the second plurality of factored multiplicands are a logic 1 followed by the inverse of the sign bit of the respective factored multiplicand, and are placed in the two next most significant sign positions of the respective factored multiplicand.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="14">
      The aforementioned and other features, characteristics, advantages, and the invention in general will be better understood from the following more detailed description taken in conjunction with the accompanying drawings, in which:
      <br/>
      FIG. 1 is a block diagram of a digital multiplier according to the present invention;
      <br/>
      FIG. 2A is a block diagram of the MULTIPLIER DATA ENCODER shown in FIG. 1;
      <br/>
      FIG. 2B is a logic diagram of the circuitry to provide the true and complement of the B Data used in FIG. 1;
      <br/>
      FIGS. 3A, 3B, 3C, 3D, and 3E are block and logic diagrams of the B DATA SELECTOR--row 1, 2, 3, 4, and 5, respectively, shown in FIG. 1;
      <br/>
      FIGS. 4A and 4B are block diagrams of the ADDER A, B, C, and D shown in FIG. 1;
      <br/>
      FIGS. 5A and 5B together are a block diagram of the CARRY PROPAGATE ADDER shown in FIG. 1;
      <br/>
      FIGS. 6A, 6B, 6C, and 6D are logic and circuit diagrams of the circuit blocks shown in FIGS. 2A, 3A, 3B, 3C, 3D, 4A, 4B, 5A, and 5B;
      <br/>
      FIG. 7 is a block diagram of a 24 bit  * 24 bit multiplier according to the present invention;
      <br/>
      FIG. 8A is a schematic diagram on an alternative adder circuit to the circuit shown in FIG. 6D;
      <br/>
      FIG. 8B is a partial block and partial schematic diagram of a circuit to provide power control to the adders of FIG. 8A;
      <br/>
      FIG. 8C is a logic diagram of the delay circuit shown in FIG. 8B; and
      <br/>
      FIG. 8D is partial logic and partial schematic diagram of the DELAY circuit of FIG. 8C.
      <br/>
      It will be appreciated that for purposes of clarity and where deemed appropriate, reference numerals have been repeated in the figures to indicate corresponding features.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="15">
      Referring to FIG. 1, digital multiplier 10 is shown according to the present invention that utilizes a small layout on an integrated circuit chip and offers fast multiplier operations with low power consumption.
      <br/>
      The A data, which is defined as the multiplier data, is input as an eight bit string shown as signal A_DATA_IN and is input to MULTIPLIER DATA ENCODER 12.
      <br/>
      The B data, which is the multiplicand data, is input as an eight bit string shown as signal B_DATA_IN and is input to decoder 14.
      <br/>
      The output of decoder 14 is connected to sixteen bit bus 15, labeled DEC_B_BUS, that transfer the true and complement of the eight B bits to B data selectors 16, 17, 18, and 19 with true data only to data selector 20.
      <br/>
      MULTIPLIER DATA ENCODER 12 is connected to B DATA selectors 16-19, through buses 22-25 respectively.
      <br/>
      Single bit bus 26 connects MULTIPLIER DATA ENCODER 12 to B DATA SELECTOR 20.
    </p>
    <p num="16">
      Output buses from B DATA SELECTORs 16, 17 are added together in ROW ADDER 28.
      <br/>
      Selected bits of the output of adder 28 are added with the bus output of B DATA SELECTOR 18 by ROW ADDER 29.
      <br/>
      Selected bits of the output of adder 29 are added with the bus output of B DATA SELECTOR 19 by ROW ADDER 30.
      <br/>
      Selected bits of the output of adder 30 are added with the bus output of B DATA SELECTOR 20 by ROW ADDER 31.
      <br/>
      The output of adder 31 and the non-selected output bits of adders 28-30 form one input to carry propagate adder 36, the other input bus of which are the X3 output signals from MULTIPLIER DATA ENCODER 12.
    </p>
    <p num="17">
      In operation the A data is encoded in MULTIPLIER DATA ENCODER 12 and the output signals from MULTIPLIER DATA ENCODER 12 control B DATA SELECTORS 16-20 to select B true data, B complementary data (on an individual bit basis in the preferred embodiment), 2B true data, or no B data (NOOP).
      <br/>
      This encoding follows the algorithm shown in Table 3 below.
      <br/>
      Each of the rows of selected B data is then summed together in adders 28-31.
      <br/>
      This sum is then added to selected output bits of MULTIPLIER DATA ENCODER 12 in carry propagate adder 36 to form the output product PRODUCT_DATA_OUT, a 16 bit string.
    </p>
    <p num="18">Although the eight bit A data is segmented into only four pairs of bits, a fifth encoder 44 and a fifth B DATA SELECTOR 20 is necessary for sign extension because of the carry operation in encoder 43.</p>
    <p num="19">
      FIG. 2A is a block diagram of the ENCODER 12.
      <br/>
      There are four full encoders 40-43, and a simplified fifth encoder 44 to handle the carryout signal from the encoder 43.
      <br/>
      Each of encoders 40-43 have five output signals: NOOP, X, X2, X3, and CARRYOUT.
      <br/>
      Four of these signals are included on each bus line 22-25 for each encoder 40-43 respectively.
      <br/>
      There are three input lines to each of the encoders 40-43, one for each of the A data bit pairs, and a carryin signal.
      <br/>
      Top encoder 40 receives the least significant bit pair of the A data, and its carryin input is grounded.
      <br/>
      In each of the four remaining encoders, the carryin input is the carryout signal from the previous less significant encoder.
      <br/>
      Encoder 44 has only a single A data input which is the most significant bit of the A data and the carryin input.
      <br/>
      Its output is line 26(X3&lt;4&gt; line).
    </p>
    <p num="20">A logic diagram, along with a orientation drawing, of the encoders 40-43 is shown in FIG. 6A. A logic diagram and orientation drawing of encoder 44 is shown in FIG. 6B.</p>
    <p num="21">FIG. 2B is a logic diagram of decoder 14 which provides the true and complementary bit signals of the B data on output bus DEC_B_BUS 15.</p>
    <p num="22">
      Each of B DATA SELECTION circuits 16-20 are shown in FIGS. 3A, 3B, 3C, and 3D as block diagrams of circuits 16-19, respectively, and in FIG. 3E as a logic diagram for circuit 20.
      <br/>
      FIG. 3A shows nine individual B data selection circuits 45-53.
      <br/>
      Each of these individual B data selection circuits 45-53 is controlled by the signals on the ENC_A&lt;0&gt;_BUS and selects one of three B data inputs or ignores the B data.
      <br/>
      The outputs from each of the circuits 45-52 is part of the data out of the B DATA SELECTOR--row 1.
      <br/>
      The output from circuit 53 is inverted and forms an additional signal on the data out of the B DATA SELECTOR--row 1.
      <br/>
      FIG. 6C is circuit diagram and an orientation diagram for each B data selection circuit 45-53.
      <br/>
      Note that the signals on the input terminals TERM_B, TERM_2B, TERM_3B and VDD are inverted when selected and placed on the output line PPI.
    </p>
    <p num="23">
      Similarly FIG. 3B is a block diagram of B DATA SELECTOR--row 2, and contains nine individual B data selection circuits 54-62.
      <br/>
      The circuit diagrams for these circuits are also shown in FIG. 6C. FIGS. 3C and 3D are respective block diagrams for B DATA SELECTOR--row 3 and B DATA SELECTOR -row 4, and each contain nine individual B data selection circuits numbered 63- 71 in FIG. 3C and numbered 72-80 in FIG. 3D. The circuit diagrams for these circuits 63-71 and 72-80 are shown in FIG. 6C. The output from circuits 61 and 62 in FIG. 3B, 70 and 71 in FIG. 3C, and 79 and 80 in FIG. 3D, are each inverted to form two additional data out signals.
    </p>
    <p num="24">
      FIG. 3E is a logic diagram of the selector circuit 20.
      <br/>
      Since there is only one control line into the data selector of FIG. 3E, the data selection is performed with multiplexers 81-87.
      <br/>
      When the X3&lt;4&gt; signal is low, each of multiplexers 81-87 selects the VDD input, inverts it and places it on the PP4&lt;0&lt;-PP4&lt;6&gt; lines, respectively.
      <br/>
      Conversely when the X3&lt;4&gt;signal is high, the B&lt;0&gt;-B&lt;6&gt; lines are selected and inverted and placed on the PP4&lt;0&gt;-PP4&lt;6&gt;lines, respectively.
    </p>
    <p num="25">
      FIGS. 4A and 4B are block diagrams of adder circuits 28-31.
      <br/>
      Adder circuits 96-111 are shown in detail in FIG.6D which also shows an orientation drawing of the circuit.
      <br/>
      The adders in FIGS. 4A and 4B receive the outputs from selector circuits 16-20 and provide an output to CARRY PROPAGATE ADDER 36 shown in FIGS.
      <br/>
      SA and SB.
    </p>
    <p num="26">
      In FIG. 4A adder circuit 96 has one of its inputs connected to VDD which provides the added logic 1 shown above the top row of Diagram 1: SIGN EXTENSION, shown below.
      <br/>
      The T bits of Diagram 1 are provided by the PPObar&lt;8&gt;signal input to adder 96, the PPlbar&lt;8&gt; signal input to adder 103, the PP2bar&lt;8&gt; signal input to adder 110, and the PP3bar&lt;8&gt; signal input to adder 117.
    </p>
    <p num="27">
      The added logic ones on the left end of each of the rows of Diagram 1 are provided in the following manner: The left most logic 1 for the first or top row of Diagram 1 is included in adder 29 by placing the inverse of PP1&lt;7&gt; onto an input of adder 102, and placing PP1&lt;7&gt; onto an input of adder 103.
      <br/>
      This arrangement increments PP1&lt;7&gt; by one.
      <br/>
      Similarly, the left logic 1 for the second row is realized in adder 30 using PP2bar&lt;7&gt; and PP2&lt;7&gt; as inputs to adders 109 and 110, respectively; and the left logic 1 for the third row is realized in adder 31 using PP3bar&lt;7&gt; and PP3&lt;7&gt; as inputs to adders 116 and 117, respectively.
      <br/>
      Although Diagram 1 shows a logic 1 on the left end of the fourth or bottom row for purposes of generality, this last logic 1 is not needed since the product of two signed numbers, each having 7 data bits plus one sign bit, is 15 data bits and one sign bit.
      <br/>
      Since the left logic 1 of row four is occupying bit position 16, it is not needed and not generated in the embodiment of FIG. 1.
    </p>
    <p num="28">
      CARRY PROPAGATE ADDER 36 shown in FIGS.
      <br/>
      SA and SB contain adder circuits 120-134 which are also the circuits shown in FIG. 6D, and Exclusive Or gate 136 that provides the sign bit of the product.
      <br/>
      CARRY PROPAGATE ADDER 36 adds the two least significant bits of adders 28, 30, and 32, to the output of adder 34.
    </p>
    <p num="29">
      In addition CARRY PROPAGATE ADDER 36 adds a one in the first, third, fifth, and/or seventh least significant bit positions depending on whether X3&lt;0&gt;, X3&lt;1&gt;, X3&lt;2&gt;, X4&lt;3&gt;, and/or X3&lt;4&gt; data lines, respectively, are selected.
      <br/>
      These additional ones correspond to the D's shown in Diagram 1: SIGN EXTENSION.
      <br/>
      When an X3 line is selected, a -B is to be placed in the respective B DATA SELECTOR register.
      <br/>
      However, since -B is two's complement of B and only each of the inverted B bits is placed in the RESPECTIVE B data SELECTOR registers, CARRY PROPAGATE ADDER 36, if necessary, adds a 1 to the bit corresponding to the least significant bit for each register.
    </p>
    <p num="30">
      FIG. 7 shows 24 bit X 24 bit multiplier 210 according to the present invention.
      <br/>
      This embodiment is an extension of 8 bit X 8 bit multiplier 10 of FIG. 1. 24 bit B_DATA_IN is decoded in decoder 212 to provide the true and complement of each data bit which is then connected to 13 B DATA SELECTOR circuits 214-226. 24 bit A_DATA_IN is encoded in MULTIPLIER DATA ENCODER 228 which produces outputs on 12 buses 230-241 plus an output on line 212.
      <br/>
      Outputs of selector circuits 214-226 are coupled into a series of 12 ROW ADDERS 244-255, the outputs of which passes into CARRY PROPAGATE ADDER 256 together with the X3 signal from buses 230-241 and line 242.
      <br/>
      The product of A and B, PRODUCT_DATA_OUT is at the output of adder 256.
    </p>
    <p num="31">Decoder 212 is an extension of decoder 14 of FIG. 2B with 24 input lines and 48 outputs.</p>
    <p num="32">
      Selector circuits 214-225 are an extension of selector circuits 16-19 shown in FIGS. 3A-3D. Selector circuits 214-225 each have 25 multiplexers of the type shown in FIG. 6C. In relation to FIG. 3A, for example, an additional 16 multiplexers can be thought of as inserted between multiplexers 51 and 52 and the associated signals (the numbers between the &lt;and&gt; symbols) for the additional multiplexers numbered incrementally.
      <br/>
      The associated signals for multiplexers 52 and 53 would increase by 16.
    </p>
    <p num="33">
      Selector circuit 226 is an extension of selector circuit 20 shown in FIG. 3E in that 16 additional 2 input multiplexers such as multiplexers 81-89 can be thought of as inserted between 2 input multiplexers 87 and 88 with input and output signals numbered incrementally.
      <br/>
      The signals associated with 2 input multiplexers 88 and 89 would be increased by 16, and signal X3&lt;4&gt; would become X3&lt;13&gt;.
    </p>
    <p num="34">
      MULTIPLIER DATA ENCODER 212 is an extension of MULTIPLIER DATA ENCODER 12 shown in FIG. 2A. Eight more encoder circuits of the type shown in FIG. 6A can be thought of as inserted between encoders 43 and 44 with input/output signals numbered incrementally.
      <br/>
      The signals associated with (the numbers between the &lt;and&gt; symbols) encoder 44 would be increased by 8.
    </p>
    <p num="35">
      ROW ADDERS 244-255 are an extension of the circuits shown in FIGS. 4A and 4B. Each of adders 244-255 have 16 additional adder circuits in addition to the nine adder circuits for each of the adders 28-31 shown in FIGS. 4A and 4B. Each of the 16 additional adder circuits are of a type shown in FIG. 6D and can be thought of as inserted between adder circuits 94 and 95 of adder 28, for example, with their associated signals numbered incrementally.
      <br/>
      The signals associated with adder circuits 95 and 96 would be increased by 16.
    </p>
    <p num="36">
      CARRY PROPAGATE ADDER 256 is an extension of CARRY PROPAGATE ADDER 36. 32 additional adder circuits of the type shown in FIG. 6D can be thought of as inserted between adder circuits 136 and 137 with their associated signals numbered incrementally.
      <br/>
      The signals associated with adder circuits 137 would be increased by 32.
    </p>
    <p num="37">Both 8 bit multiplier 10 and 24 bit multiplier 210 operate is the same manner as would be expected.</p>
    <p num="38">
      Multiplier 210 of FIG. 7 can be modified to advantageously save power in the multiplier.
      <br/>
      Adders 244-255 in the 24 * 24 bit multiplier 210 operate in a ripple manner in that a change in the input of the first adder 244 may cause a change in all of the following adders in a sequential manner.
      <br/>
      When a multiplication operation begins, adder 244 will have valid inputs to it when selector circuits 214 and 215 are stable, but adder 245 must wait for selector circuits 214-216 to be stable and for adder 244 to be stable before adder 245 can be stable.
      <br/>
      Since all of selector circuits 214-226 will usually be stable before adders 244-255 are stable, a power saving scheme is available by sequentially powering up adder circuits 244-255.
      <br/>
      Adder circuits 244-255 are therefore modified, as shown in FIG. 8A, to have their VDD inputs individually connected to a Powerdown signal.
    </p>
    <p num="39">
      FIG. 8B shows a combination block diagram and circuit diagram 258 for generating the respective Powerdown signals Powerdown&lt;0&gt;-Powerdown&lt;11&gt; for adders 244-255.
      <br/>
      Clock input clk on line 262 is connected to the input of delay chain 260, which provides an output delayin on line 264.
      <br/>
      Delayin is connected to the carryin ci input of serially connected adders 270-279.
      <br/>
      These adders have their A inputs grounded and their B inputs connected to the output of the previous adder with the B input of adder 270 connected to VDD.
      <br/>
      Each adder output connects to a series combination of inverter 284 and the gate of transistor 282.
      <br/>
      Adder 270 has two additional inverter-transistor combinations such that when the output of adder 270 goes high, adders 244, 245, and 246 are powered up, with adders 247-255 powered up sequentially thereafter.
      <br/>
      FIG. 8C is a logic diagram of delay chain 260, and FIG. 8D is a logic and schematic diagram of DELAY circuit 286 of FIG. 8C.
    </p>
    <p num="40">The multiplication procedure according to the preferred embodiment includes the following: Given two numbers A and B to be multiplied, where A is the multiplier data and B is the multiplicand data, A is encoded or parsed two bits at a time starting with the least significant bit.</p>
    <p num="41">
      If A is an odd number of bits in length, then before the pairing of the bits a 0 is added to the left of the A data if A is unsigned or positive, or a 1 is added if A is negative.
      <br/>
      If A is an even number of bits in length, then before the pairing of the bits a 00 bit pair is added to the left of the A data if A is unsigned or positive, or a 11 bit pair is added if A is negative.
    </p>
    <p num="42">
      Since 3B is difficult to generate, an encoding scheme similar to that used by MacSorley in the article referenced above can be used.
      <br/>
      An example of this is as follows:
      <br/>
      7=00111=01001
    </p>
    <p num="43">
      that is, 7 can be represented as 8-1.
      <br/>
      The main result of this is that 3B becomes -B with a+1 added to the next couple of bits encoded.
      <br/>
      Table 3 shows this encoding.
    </p>
    <p num="44">
      -- TABLE 3
      <br/>
      -- New Encoding
      <br/>
      -- Cin         A2i + 1  A2i  Operation             Cout
      <br/>
      -- 0           0       0       Ri = (Ri - 1)/4 + Cout 0
      <br/>
      -- 0           0       1       Ri = (Ri - 1 + B)/4 + Cout 0
      <br/>
      -- 0           1       0       Ri = (Ri - 1 + 2B)/4 + Cout 0
      <br/>
      -- 0           1       1       Ri = (Ri - 1 - B)/4 + Cout 1
      <br/>
      -- 1           0       0       Ri = (Ri - 1 + B)/4 + Cout 0
      <br/>
      -- 1           0       1       Ri = (Ri - 1 + 2B)/4 + Cout 0
      <br/>
      -- 1           1       0       Ri = (Ri - 1 - B)/4 + Cout 1
      <br/>
      -- 1           1       1       Ri = (Ri - 1)/4 + Cout 1
    </p>
    <p num="45">Note that the only changes from the Kwentus encoding of Table 2 with respect to the first four rows of Table 3 occur in the fourth row of table 3 where 3B is encoded as -B and C is a 1 added to the next couple of encoded bits.</p>
    <p num="46">Sign Extension The sign extension of the multiplier can be implemented using a sign extension scheme similar to single zero representation as shown by E. de Angel and Earl E. Swartzlander ("Low Power Parallel Multipliers," VLSI Signal Processing IX, pp. 199-210, 1996).</p>
    <p num="47">
      Shown below is a partial product diagram for an 8 * 8 multiplier with the correction required to generate the sign extension.
      <br/>
      T is the one's complement of the sign and D is the correction constant required to generate the negative partial products (i.e., D=1 if the row above it was encoded with a -B coefficient (also sometimes referred to as a scale factor), and D=0 if the row above it was formed using any other coefficient).
    </p>
    <p num="48">
      --
      <br/>
      -- Diagram 1: SIGN EXTENSION
      <br/>
      --   (Chemical Structure image '1' not included in text)
      <br/>
      -- FINAL PRODUCT
    </p>
    <p num="49">Example</p>
    <p num="50">
      Below are three examples showing the multiplication process.
      <br/>
      Bold numbers show the implementation of the sign extension.
      <br/>
      De Angel (referenced above) shows in detail how the sign extension is implemented. A. Inoue, R. Ohe, S. Kashiwakura, S. Mitarai, T. Tsuru, T. Izawa and G. Goto ("A 4. 1 ns Compact 54 * 54b Multiplier Utilizing Sign Select Booth Encoders," International Solid-State Circuits Conference, pp. 416-417, 1997) shows a reduction of the 5:1 multiplexer through merging adjacent multiplexers.
      <br/>
      This technique allows a ratio of 10 transistors per bit.
      <br/>
      In this architecture a plain implementation of the 4:1 multiplexer using pass transistor logic (as described in K. Yano, T. Yamanaka, T Nishida, M. Saito, K. Shimohigashi and A. Shimizu, "A 3.8 ns CMOS 16 * 16b Multiplier Using Complementary Pass-Transistor Logic," IEEE Journal of Solid-State Circuits, vol. 25, pp. 388-395, 1990) results in 7 transistors per bit.
    </p>
    <p num="51">Example 1</p>
    <p num="52">(Chemical Structure image '2' not included in text)</p>
    <p num="53">Example 2</p>
    <p num="54">(Chemical Structure image '3' not included in text)</p>
    <p num="55">
      In the second example the middle pair of the A bits produced -B+1, that is, -B for the present row and a 1 to carry to the next most significant pair of A bits.
      <br/>
      The most significant pair of A bits by themselves also would decode as -B for the present row and 1 to carry to the next pair of more significant A bits if there were any.
      <br/>
      Since there are not any more significant bits, this carry is discarded.
      <br/>
      However, the most significant pair of A bits (11) has a 1 bit carried in from the previous pair of A bits, and therefore decodes as (00) which is all zeros for the four data bits and two 1 bits for the sign bits.
    </p>
    <p num="56">Example 3</p>
    <p num="57">(Chemical Structure image '4' not included in text)</p>
    <p num="58">The third example is an 8 * 8 multiplication, and the carry operation in the Booth encoding occurs two times.</p>
    <p num="59">In comparison to the conventional prior art Booth multiplier discussed in the above BACKGROUND OF THE INVENTION, a multiplier using the present invention does not use 5:1 multiplexers, but 4:1 multiplexers, and with the consequential savings in chip area comes an improvement in speed of the multiplier.</p>
    <p num="60">
      Although the invention has been described in part by making detailed reference to a certain specific embodiment, such detail is intended to be, and will be understood to be, instructional rather than restrictive.
      <br/>
      It will be appreciated by those skilled in the art that many variations may be made on the structure and mode of operation without departing from the spirit and scope of the invention as disclosed in the teachings contained herein.
      <br/>
      For example the CARRY PROPAGATE ADDER 36, shown as standard ripple adder, could be replaced with a fast adder to improve the performance of the digital multiplier 10.
      <br/>
      Also, if the speed of the digital multiplier 10 is not critical, it would be possible to multiplex at least part of the B DATA SELECTORS 16-20, the adders 28-31 and 36, and/or the MULTIPLIER DATA ENCODER circuits 40-44 and thereby reduce the area required for the multiplier 10.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>In a digital multiplier for multiplying a multiplier by a multiplicand to provide a product wherein said multiplier is parsed on a group basis and each of said groups is decoded to generate a coefficient which is applied to each of a like plurality of copies of the multiplicand to form a first plurality of factored multiplicands, and said factored multiplicands are added together to produce the product, the improvement comprising:</claim-text>
      <claim-text>a) adding said factored multiplicands while including an additional two bits for at least a second plurality of said factored multiplicands such that the number of individual adder circuits, each having up to three input terminals and up to two output terminals, used for adding together two of said factored multiplicands does not exceed one less than the number of bits of said multiplicand, the first bit of said two bits being the inverse of the sign bit of the factored multiplicand, and the second bit of said two bits being a logic 1, wherein said first bit is placed in the next most significant bit position of the sign bit of the factored multiplicand, and said second bit is placed in the next most significant bit position of said first bit;</claim-text>
      <claim-text>and b) adding a logic 1 to the sum of said factored multiplicands, said additional logic 1 placed in the bit position corresponding to the least significant sign bit position of said plurality of factored multiplicands.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The improvement set forth in claim 1 wherein at the time a negative coefficient is used to factor a copy of the multiplicand, said copy of said multiplicand is not negated but rather each bit is replaced with its inverse, and during the adding process a logic 1 is added to said factored multiplicand.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The improvement set forth in claim 1 wherein said two additional bits are not included for all of said first plurality of factored multiplicands.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The improvement set forth in claim 1 wherein at least one of said second additional bits is added to said sum by including both the true and complement of one bit of at least one of said factored multiplicands when said factored multiplicands are added together.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. In a digital multiplier for multiplying a multiplier by a multiplicand to provide a product wherein said multiplier is parsed on a group basis and each of said groups is decoded to generate a coefficient which is applied to each of a like plurality of copies of the multiplicand to form a first plurality of factored multiplicands, and said factored multiplicands are added together to produce the product, the improvement comprising: a) adding sequentially said factored multiplicands wherein the number of adder circuits required for each of said adding sequences is one less than the number of bits of said multiplicand, and including an additional two bits for at least a second plurality of said factored multiplicands the first bit of said two bits being the inverse of the sign bit of the factored multiplicand, and the second bit of said two bits being a logic 1, wherein said first bit is placed in the next most significant bit position of the sign bit of the factored multiplicand, and said second bit is placed in the next most significant bit position of said first bit;</claim-text>
      <claim-text>and b) adding a logic 1 to the sum of said factored multiplicands, said additional logic 1 placed in the bit position corresponding to the least significant sign bit position of said plurality of factored multiplicands.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The improvement set forth in claim 5 wherein at the time a negative coefficient is used to factor a copy of the multiplicand, said copy of said multiplicand is not negated but rather each bit is replaced with its inverse, and during the adding process a logic 1 is added to said factored multiplicand.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The improvement set forth in claim 5 wherein said two additional bits are not included for all of said first plurality of factored multiplicands.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The improvement set forth in claim 6 wherein at least one of siad second additional bits is added to said sum by including both the true and complement of one bit of at least one of said factored multiplicands when said factored multiplicands are added together.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A multiplier for multiplying multiplicand data by signed multiplier data which includes a bit signifying the sign of said multiplier to provide quotient data, said multiplier comprising: a) an encoder comprised of a first plurality of selecting circuits coupled to said multiplier data and a like plurality of output terminals, each providing a coefficient; b) a second plurality of data selectors each coupled to said multiplicand data and to one of said coefficients and providing at a third plurality of output terminals a bit pattern corresponding to a combination of one of said coefficients and a copy of said multiplicand data; c) an adder array of discrete summing circuits having rows and columns wherein a first row of said adder array is coupled to a first and a second data selector, and each of the other rows of said adder array is coupled to a data selector and to a previous row of said adder array, and wherein the number of said discrete summing circuits in each row is one less than the number of bit positions of said multiplicand data;</claim-text>
      <claim-text>and d) a summer coupled to said adder array and providing said quotient.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The multiplier set forth in claim 9 wherein said combination corresponds to the product of one of said coefficients times a copy of said multiplicand data when said corresponding coefficient is positive, and to the one's complement of the product of the absolute value of one of said coefficients times a copy of said multiplicand data when said corresponding coefficient is negative.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The multiplier set forth in claim 9 wherein said adder array includes circuitry for adding both the true and complement of one bit of at least one of said bit patterns from said third plurality of output terminals.</claim-text>
    </claim>
  </claims>
</questel-patent-document>