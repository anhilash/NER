<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185518B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185518</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185518</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="21941800" extended-family-id="42113566">
      <document-id>
        <country>US</country>
        <doc-number>09046134</doc-number>
        <kind>A</kind>
        <date>19980323</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09046134</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43171831</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>4613498</doc-number>
        <kind>A</kind>
        <date>19980323</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09046134</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/50        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>50</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>703019000</text>
        <class>703</class>
        <subclass>019000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>716104000</text>
        <class>716</class>
        <subclass>104000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>716108000</text>
        <class>716</class>
        <subclass>108000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>716136000</text>
        <class>716</class>
        <subclass>136000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-017/50C3T</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>017</main-group>
        <subgroup>50C3T</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-017/50D</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>017</main-group>
        <subgroup>50D</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5045</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5045</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5031</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5031</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>27</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>3</number-of-drawing-sheets>
      <number-of-figures>4</number-of-figures>
      <image-key data-format="questel">US6185518</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and system for logic design constraint generation</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>ROTEM SHAI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5465216</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5465216</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>ROSTOKER MICHAEL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5541849</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5541849</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>ROSTOKER MICHAEL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5544067</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5544067</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>DEAN MARK E</text>
          <document-id>
            <country>US</country>
            <doc-number>5553276</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5553276</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>ROSTOKER MICHAEL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5572437</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5572437</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>ROSTOKER MICHAEL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5623418</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5623418</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>BEAUSANG JAMES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5696771</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5696771</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>DANGELO CARLOS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5870308</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5870308</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>DANGELO CARLOS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5880971</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5880971</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>J.A. Nestor et al., SALSA: A New Approach to Scheduling with Timing Constraints, IEEE Transactions on Computer-Aided Design of Integrtaed Circuits and Systems, vol. 12, No. 8, Aug. 1993, pp. 1107-1122.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Chin-Tung Chen et al., A Hybrid Numeric/Symbolic Program for Checking Functional and Timing Compatibility of Synthesized Designs, Proceedings of the Seventh Int'l Symposioum on High-Level Synthesis, 1994, pp. 112-117.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>Jie Liu et al., Software Timing Analysis Using HW/SW Cosimulation and Instruction Set Simulator, Proceedings of the Sixth Int'l Workshop on Hardware/Software Codesign, 1988, CODES/CASHE '98, pp. 65-69.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Sun Microsystems, Inc.</orgname>
            <address>
              <address-1>Palo Alto, CA, US</address-1>
              <city>Palo Alto</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>SUN MICROSYSTEMS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Chen, Liang T.</name>
            <address>
              <address-1>Saratoga, CA, US</address-1>
              <city>Saratoga</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Finnegan, Henderson, Farabow, Garrett &amp; Dunner, L.L.P.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Teska, Kevin J.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A system and method for generating design constraints for a logic synthesized block from timing analysis of the block.
      <br/>
      A timing analysis of logic described in software is performed for each of various operating modes of a circuit in which the logic is used.
      <br/>
      Timing data is extracted from the timing analysis and used as design constraints in the synthesis of the logic for the block.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">An embodiment of the present invention relates generally to the field of logic design and, more particularly, to the derivation of design constraints for synthesis of logic blocks.</p>
    <heading>BACKGROUND</heading>
    <p num="2">
      Traditionally, the long, and often tedious, process of digital logic design was carried out by hand.
      <br/>
      Using a variety of design techniques or heuristic methods, designers constructed logic circuits from available design components.
      <br/>
      Depending on the task at hand, these design components could be low level components such as transistors, flip-flops or logic gates (e.g., AND gates, OR gates, and NOT gates), higher level components such as counters, multiplexers, random access memories (RAMs), or even microprocessors, or a combination of high and low level components.
      <br/>
      The designer also had a choice between logic components that performed the same overall function, but that operated at different speeds or that consumed less energy.
    </p>
    <p num="3">
      Increasingly, however, designers of digital logic rely on computer aided design ("CAD") programs, such as "Design Compiler," by Synopsys, Inc. of Mountain View, Calif., to assist in the synthesis of logic circuits.
      <br/>
      Using CAD programs, designers can design digital logic circuits using a hardware description language instead of working with discrete logic components.
      <br/>
      Hardware description languages allow the designer to specify the operation of a logic circuit in software.
      <br/>
      More specifically, designers specify the flow of signals within the circuitry and the logic functions performed on those signals.
      <br/>
      Presently, this type of program is written at the so-called "data flow level." Once the designer has programmed the operation of the logic circuit, the CAD program analyzes the program and synthesizes the corresponding logic circuit.
      <br/>
      The CAD program determines the appropriate logic components and interconnections between components to realize a circuit that satisfies the data flow model.
      <br/>
      CAD programs are also frequently used to analyze and optimize the performance of gate-level designs.
      <br/>
      In that case, the input to the CAD program is a gate level design description, as opposed to a data flow level description.
      <br/>
      The CAD program analyzes the gate level design and synthesizes an improved gate level design.
    </p>
    <p num="4">
      The synthesized or analyzed logic blocks are often interconnected with other logic blocks to form larger digital logic circuits.
      <br/>
      However, an important consideration in interconnecting logic blocks is the timing constraints at the interface of the blocks.
      <br/>
      For example, assume that each of the logic blocks B1, B2, and B3 of FIG. 1 is a block of digital logic to be synthesized or an existing gate level design to be analyzed by a CAD program, and that the blocks are to be interconnected as shown.
      <br/>
      Block B2 receives signals from block B1, and sends signals to block B3.
      <br/>
      To choose the correct kind and type of components for the blocks, it is necessary to know how fast block B2 can expect to receive signals from block B1, and how long it will take block B2 to process those signals before passing them to block B3.
      <br/>
      In other words, it is necessary to determine the time constraints at the boundaries of the blocks.
    </p>
    <p num="5">
      Traditional CAD programs determine time constraints by performing a static timing analysis using a single simulation of the data flow or gate level description of the logic circuit.
      <br/>
      Static timing analysis finds all the possible timing paths in the circuit through an exhaustive search, and then calculates the timing values of signals on each path to determine if the signal of any path will cause a timing violation (i.e., circuit malfunction).
      <br/>
      Based on this simulation, the CAD program synthesizes or refines the logic blocks using logic components and interconnections appropriate to the time constraints.
    </p>
    <p num="6">
      This technique, however, does not always provide accurate timing data.
      <br/>
      The time it takes logic circuits to process signals depends on various factors, such as the path the signals take through the logic circuit, whether the digital signals are transitioning from high to low versus low to high, and what mode the circuit is operating in.
      <br/>
      If the circuit is operating in conjunction with a RAM, for example, signals will be processed at different speeds when the circuit is writing to the RAM or reading from the RAM.
      <br/>
      Moreover, during a static timing analysis, the CAD program does not know the actual circuit state.
      <br/>
      It therefore assumes the worst case scenario to calculate the timing delay values and the signal timing of each path.
      <br/>
      The worst case scenario, however, may include analyses of a number of false paths, paths that never occur in real circuit operation.
      <br/>
      Using a single simulation to obtain timing constraints, current CAD programs do not account for these possible timing variations.
      <br/>
      Thus, the corresponding synthesized logic circuit may not operate correctly under all operating conditions.
    </p>
    <p num="7">In light of the foregoing, there is a need for a method and system to determine timing constraints from timing data that accurately captures the different operating conditions of a digital logic circuit.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="8">
      Methods and systems consistent with the present invention for determining timing constraints between synthesized logic blocks result in a robust design of digital circuitry.
      <br/>
      In particular, these methods and systems take into account timing variations in the digital logic caused by various factors, such as different circuit operating modes, to synthesize circuitry for operation under the full range of possible operating conditions.
    </p>
    <p num="9">
      Additional features and advantages of the invention will be set forth in the description which follows, and in part will be apparent from the description, or may be learned by practice of the invention.
      <br/>
      The objectives and other advantages of the invention will be realized and attained by the system and method particularly pointed out in the written description and claims hereof as well as the appended drawings.
    </p>
    <p num="10">To achieve these and other advantages and in accordance with the purpose of the invention, as embodied and broadly described, a method for generating design constraints for synthesis of a logic block includes the steps of simulating operation of the logic block for a plurality of operating modes, storing timing data for the operating modes, and deriving design constraints from the stored timing data.</p>
    <p num="11">A system consistent with this invention includes a processor configured to simulate the operation of the logic block for a plurality of operating modes, and a memory configured to store timing data for the operating modes, wherein the processor is configured to derive design constraints from the stored timing data.</p>
    <p num="12">In another aspect, a method consistent with this invention includes the steps of simulating the operation of the logic block for a plurality of operating modes, for each operating mode, storing signal arrival times for at least one input boundary pin and signal departure times for at least one output boundary pin of the logic block, selecting the latest signal arrival time for the input boundary pins, and selecting the earliest signal departure time for the output boundary pins.</p>
    <p num="13">In another aspect, a computer-readable medium consistent with this invention contains instructions for controlling a system to perform a method including the steps of simulating operation of the logic block for a plurality of operating modes, storing timing data for the operating modes, and deriving design constraints from the stored timing data.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="14">
      The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate an embodiment of the invention and, together with the description, serve to explain the advantages and principles of the invention. In the drawings,
      <br/>
      FIG. 1 is a drawing of an interconnection of logic blocks;
      <br/>
      FIG. 2 is a drawing of a computer system consistent with the an embodiment of the invention;
      <br/>
      FIG. 3 is a drawing of a flowchart showing steps consistent with an embodiment of the present invention; and
      <br/>
      FIG. 4 is a table of timing data as can be used in an embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="15">
      Reference will now be made in detail to an embodiment of the present invention as illustrated in the accompanying drawings.
      <br/>
      Both the foregoing general description and the following detailed description are exemplary and explanatory and do not restrict the invention as claimed.
    </p>
    <p num="16">
      As described in more detail below, the embodiment generally involves the derivation of design constraints for the synthesis or analysis of digital logic.
      <br/>
      First, a digital logic block is represented as a software model, either at the data flow or gate level.
      <br/>
      A timing analysis of the software model is then performed for the different operating modes of the logic block.
      <br/>
      Finally, the most stringent timing data from the timing analyses is collected and used as a design constraint in the actual synthesis of the logic for the logic block.
      <br/>
      As used herein, the phrase "operating modes" refers broadly to any condition or set of conditions under which a logic block may function differently than it does under a different condition or set of conditions.
      <br/>
      Examples of operating modes are set forth in the description below.
      <br/>
      In addition, the term "synthesis," as used herein, refers to the process of operating on any representation or version of digital logic to combine, alter, generate, or refine the logic.
    </p>
    <p num="17">
      FIG. 2 shows a system for implementing the embodiment.
      <br/>
      The system includes a computer 20 having a display 22 and an input device, such as a keyboard 24.
      <br/>
      Any other input device, such as a mouse or touch-screen, could also be used in place of or in conjunction with keyboard 24.
      <br/>
      The system further includes a processor or processors 26, and a storage device 28, such as a RAM.
      <br/>
      Storage device 28 contains a CAD program 29 executed by a processor or processors 26.
      <br/>
      Although an exemplary embodiment of the present invention is described as being stored in storage device 28, one skilled in the art will appreciate that it may also be stored on other computer-readable media, such as secondary storage devices like hard disks, floppy disks, CD-ROM, or DVD-ROM read by drive 21; a carrier wave received over a connection 25 from a network 23, such as the Internet or a secure server; or other forms of RAM or ROM.
      <br/>
      Additionally, one skilled in the art will appreciate that computer 20 may contain additional or different components.
    </p>
    <p num="18">
      The embodiment will be described with respect to the configuration of logic blocks shown in FIG. 1.
      <br/>
      It should be noted, however, that the present invention is not limited by the number of logic blocks or interconnections.
      <br/>
      As shown, block B2 is connected to block B1 at pins in1 and in2, and to block B3 at pins out1 and out2.
      <br/>
      For purposes of this description, logic blocks B1, B2, and B3 are described in CAD program 29 at the data flow level, gate level, or in any other representation suitable for logic synthesis and analysis.
    </p>
    <p num="19">
      To synthesize the logic for block B2, it is necessary to determine the timing constraints at the interface of block B2 with other logic blocks.
      <br/>
      The constraints should take into account the most stringent timing data; that is, the latest arrival times that block B2 can expect to receive signals from block B1, and the earliest departure times that block B2 will propagate the signals to block B3.
      <br/>
      To derive these timing constraints, CAD program 29 follows the algorithm set forth in FIG. 3.
    </p>
    <p num="20">
      First, CAD program 29 runs a static timing analysis of the logic in a first mode (step 30).
      <br/>
      Program 29 then accumulates and stores the timing data at each boundary pin of the blocks being synthesized (step 32).
      <br/>
      Carrying forward the above example, program 29 accumulates and stores timing data for block B2.
      <br/>
      Examples of recorded timing data for connections in1, in2, out1, and out2 are shown in FIG. 4.
    </p>
    <p num="21">
      Program 29 then determines if there are other operating modes associated with the circuit (step 34).
      <br/>
      If so, program 29 selects the next operating mode (step 35) and repeats the timing analysis (step 30).
      <br/>
      This loop continues until timing data for all the circuit's operating modes have been stored.
      <br/>
      If the circuit included or was used in conjunction with a RAM, these modes could include, for example, a read mode and a write mode.
      <br/>
      As another example, if the circuit included or was used in conjunction with a microprocessor, the modes could include a normal operating mode, a test mode, a debug mode, and an idle mode.
      <br/>
      Assuming three modes of operation, the timing data recorded for the second and third modes is shown in FIG. 4.
    </p>
    <p num="22">
      At this point, program 29 has run a timing analysis of the circuit in each of its operating modes and has recorded timing data for each connection of block B2.
      <br/>
      Program 29 then derives the design constraints from the stored data (steps 36 and 38).
      <br/>
      Specifically, program 29 chooses the latest signal arrival time for the input connections (step 36), and the earliest signal departure times for the output connections (step 38).
      <br/>
      For pins in1 and in2, the latest arrival times are 3.1 ns and 1.5 ns, respectively.
      <br/>
      For pins out1 and out2, the earliest departure times are 5.4 ns and 3.2 ns, respectively.
      <br/>
      Using these timing values as design constraints, program 29 can then synthesize or refine logic for block B2 that more accurately and realistically reflects actual circuit operation (step 39).
    </p>
    <p num="23">
      In sum, the embodiment consistent with the present invention collects timing data from static timing analyses performed on a software model of digital logic block.
      <br/>
      The timing analyses are performed and data is collected for each of the logic block's operating modes.
      <br/>
      The most stringent timing data for each boundary pin of the logic block is then selected and used as a design constraint to synthesize the logic for the block.
    </p>
    <p num="24">
      It will be apparent to those skilled in the art that various modifications and variations can be made in the systems and methods consistent with the present invention without departing from its spirit or scope.
      <br/>
      The present invention covers the modifications and variations of this invention provided they come within the scope of the appended claims and their equivalents.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>I claim:</claim-text>
      <claim-text>1. A method for generating design constraints for synthesis of a logic block comprising the steps of:</claim-text>
      <claim-text>simulating operation of the logic block for a plurality of operating modes; storing timing data for the operating modes;</claim-text>
      <claim-text>and deriving design constraints from the stored timing data.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 wherein the simulating step includes the step of: analyzing the operation of the logic block in one or more of a read mode and a write mode.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1 including the additional step of: representing the logic block at the data flow level before simulating its operation.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1 including the additional step of: representing the logic block at the gate level before simulating its operation.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1 wherein the storing step includes the step of: storing timing data for at least one boundary pin of the logic block.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 5 wherein the storing step further includes the steps of: storing signal arrival times for at least one input boundary pin of the logic block;</claim-text>
      <claim-text>and storing signal departure times for at least one output boundary pin of the logic block.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 6 wherein the deriving step includes the steps of: selecting the latest signal arrival time for the input boundary pins;</claim-text>
      <claim-text>and selecting the earliest signal departure time for the output boundary pins.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 1 including the additional step of: generating logic for the logic block using the derived design constraints.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A system for generating design constraints for synthesis of a logic block comprising: a processor configured to simulate the operation of the logic block for a plurality of operating modes;</claim-text>
      <claim-text>and a memory configured to store timing data for the operating modes; wherein the processor is configured to derive design constraints from the stored timing data.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The system of claim 9 wherein the processor simulates the operation of the logic block in one or more of a read mode, a write mode, and/or an idle mode.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The system of claim 9 wherein the logic block is represented at the data flow level.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The system of claim 9 wherein the logic block is represented at the gate level.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The system of claim 9 wherein the memory stores timing data for at least one boundary pin of the logic block.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The system of claim 13 wherein the memory stores signal arrival times for at least one input boundary pin of the logic block and signal departure times for each output boundary pin of the logic block.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The system of claim 14 wherein the processor selects the latest signal arrival time for each input boundary pin and the earliest signal departure time for each output boundary pin.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A method for generating design constraints for synthesis of a logic block comprising the steps of: simulating the operation of the logic block for a plurality of operating modes; for each operating mode, storing signal arrival times for at least one input boundary pin and signal departure times for at least one output boundary pin of the logic block; selecting the latest signal arrival time for the input boundary pins;</claim-text>
      <claim-text>and selecting the earliest signal departure time for the output boundary pins.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 16 including the additional step of: representing the logic block at the data flow level before simulating its operation.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 16 including the additional step of: representing the logic block at the gate level before simulating its operation.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 16 including the additional step of: synthesizing logic for the logic block using the selected arrival and departure times.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. A computer-readable medium containing instructions for controlling a system to perform a method comprising the steps of: simulating operation of the logic block for a plurality of operating modes; storing timing data for the operating modes;</claim-text>
      <claim-text>and deriving design constraints from the stored timing data.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The computer-readable medium of claim 20 wherein the simulating step includes the step of: analyzing the operation of the logic block in one or more of a read mode and a write mode.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The computer-readable medium of claim 20 including the additional step of: representing the logic block at the data flow level before simulating its operation.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The computer-readable medium of claim 20 including the additional step of: representing the logic block at the gate level before simulating its operation.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The computer-readable medium of claim 20 wherein the storing step includes the step of: storing timing data for at least one boundary pin of the logic block.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The computer-readable medium of claim 24 wherein the storing step further includes the steps of: storing signal arrival times for at least one input boundary pin of the logic block;</claim-text>
      <claim-text>and storing signal departure times for at least one output boundary pin of the logic block.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The computer-readable medium of claim 25 wherein the deriving step includes the steps of: selecting the latest signal arrival time for the input boundary pins;</claim-text>
      <claim-text>and selecting the earliest signal departure time for the output boundary pins.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The computer-readable medium of claim 20 including the additional step of: generating logic for the logic block using the derived design constraints.</claim-text>
    </claim>
  </claims>
</questel-patent-document>