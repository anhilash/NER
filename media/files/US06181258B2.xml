<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181258B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181258</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181258</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="23213632" extended-family-id="1220204">
      <document-id>
        <country>US</country>
        <doc-number>09312928</doc-number>
        <kind>A</kind>
        <date>19990517</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1999US-09312928</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>1265721</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>31292899</doc-number>
        <kind>A</kind>
        <date>19990517</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1999US-09312928</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H03D   7/16        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>03</class>
        <subclass>D</subclass>
        <main-group>7</main-group>
        <subgroup>16</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04B   1/28        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>B</subclass>
        <main-group>1</main-group>
        <subgroup>28</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04L   7/04        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>7</main-group>
        <subgroup>04</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>340870280</text>
        <class>340</class>
        <subclass>870280</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>340870020</text>
        <class>340</class>
        <subclass>870020</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>340870180</text>
        <class>340</class>
        <subclass>870180</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>370210000</text>
        <class>370</class>
        <subclass>210000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>375327000</text>
        <class>375</class>
        <subclass>327000</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>455334000</text>
        <class>455</class>
        <subclass>334000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04B-001/00D2S</text>
        <section>H</section>
        <class>04</class>
        <subclass>B</subclass>
        <main-group>001</main-group>
        <subgroup>00D2S</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H03D-007/16B1</text>
        <section>H</section>
        <class>03</class>
        <subclass>D</subclass>
        <main-group>007</main-group>
        <subgroup>16B1</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04B-001/28</text>
        <section>H</section>
        <class>04</class>
        <subclass>B</subclass>
        <main-group>1</main-group>
        <subgroup>28</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04B-001/0025</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>B</subclass>
        <main-group>1</main-group>
        <subgroup>0025</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H03D-007/163</classification-symbol>
        <section>H</section>
        <class>03</class>
        <subclass>D</subclass>
        <main-group>7</main-group>
        <subgroup>163</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04B-001/28</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>B</subclass>
        <main-group>1</main-group>
        <subgroup>28</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-007/04</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>7</main-group>
        <subgroup>04</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04L-007/04</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>20</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>19</number-of-drawing-sheets>
      <number-of-figures>24</number-of-figures>
      <image-key data-format="questel">US6181258</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Receiver capable of parallel demodulation of messages</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>MARTINEZ LOUIS</text>
          <document-id>
            <country>US</country>
            <doc-number>4322842</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4322842</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>ALGRAIN MARCELO C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5710720</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5710720</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>BEALE TERRANCE RALPH, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5790615</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5790615</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>BOSE SANJAY K</text>
          <document-id>
            <country>US</country>
            <doc-number>4477809</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4477809</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>WILSON TIMOTHY J</text>
          <document-id>
            <country>US</country>
            <doc-number>4977612</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4977612</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>SAWYER JONATHAN</text>
          <document-id>
            <country>US</country>
            <doc-number>5179569</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5179569</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>JOHNSON DENNIS F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5553094</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5553094</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>FULTON FORREST F</text>
          <document-id>
            <country>US</country>
            <doc-number>5604768</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5604768</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>WONG THOMAS T Y</text>
          <document-id>
            <country>US</country>
            <doc-number>5768693</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5768693</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>"65 MSPS Digital Receive Signal Processor," Analog Devices, downloaded from www.analog.com/pdf/preview, Apr. 28, 1999, 1 pg.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Product Page:AD6600 Ad6620, downloaded from www.analog.com/products/descriptions, Apr. 28, 1999, 1 pg.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>"All-Digital Wireless Basestation," Analog Devices, downloaded from www.analog.c . . . s/whitepapers/products, Sep. 1, 1998, 3 pgs.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>"Universal Basestation/Wideband Receivers Background Information," Analog Devices, downloaded from www.analog.c . . . s/whitepapers/products/AD9042, Sep. 1, 1998, 3 pgs.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>Hosking et al., "Digital Receivers Bring DSP to Radion Frequencies," downloaded from www.eg3.com/vtc/pent/recvr.htm, Sep. 1, 1998, 13 pgs.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>Digital Communications, downloaded from www.pentek.com/tutorials/Digcom.CFM, Sep. 1, 1998, 3 pgs.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="7">
          <text>Digital Signal Processing, downloaded from www.tapr.org/dsp, Sep. 1, 1998, 5 pgs.DSP Card 4 User's Manual-Introduction, (Apr-95), downloaded from www.tapr.org/dsp4/introduction.html, Sep. 1, 1998, 8 pgs.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="8">
          <text>DSP Card 4 User's Manual-Hardware, (Apr-95), downloaded from www.tapr.org/dsp4/hardware.html, Sep. 1, 1998, 6 pgs.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="9">
          <text>DSP Card 4 User's Manual-Firmware, (Apr-95), downloaded from www.tapr.org/dsp4/firmware.html, Sep. 1, 1998, 10 pgs.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="10">
          <text>DSP Card User's Manual-Application Software, (Apr-95), downloaded from www.tapr.org/dsp4/application.html, Sep. 1, 1998, 8 pgs.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="11">
          <text>Brannon et al., "A Look atSoftware Radios: Are They Fact Or Fiction?" Electronic Design, Dec. 1, 1998, 117-122.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="12">
          <text>Brannon, "Ditial-radio-receiver design requires re-eveluation of parameters," EDN Nov. 5, 1998, 163-170.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="13">
          <text>Stevens, "DSPs in communications," IEEE Spectrum, Sep., 1998, 39-46.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="14">
          <text>Frerking, "Digital Signal Processing in Communication Systems," 182-184, 218-221, 249-252, 433-440.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="15">
          <text>DSP Card 4 User's Manual-Intrduction, (Apr-95), downloaded from www.tapr.org/dsp4/introduction.html, Sep. 1, 1998, 8 pgs.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>CellNet Data Systems, Inc.</orgname>
            <address>
              <address-1>San Carlos, CA, US</address-1>
              <city>San Carlos</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>CELLNET DATA SYSTEMS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Summers, Andrew Gordon</name>
            <address>
              <address-1>Cambridge, GB</address-1>
              <city>Cambridge</city>
              <country>GB</country>
            </address>
          </addressbook>
          <nationality>
            <country>GB</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Irving, Clive Russell</name>
            <address>
              <address-1>Cambridge, GB</address-1>
              <city>Cambridge</city>
              <country>GB</country>
            </address>
          </addressbook>
          <nationality>
            <country>GB</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Luxford, Gregory Vincent</name>
            <address>
              <address-1>Suffolk, GB</address-1>
              <city>Suffolk</city>
              <country>GB</country>
            </address>
          </addressbook>
          <nationality>
            <country>GB</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Fish &amp; Richardson P.C.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Horabik, Michael</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>GRANTED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A receiver which is capable of receiving in parallel data transmitted at arbitrary frequencies within a radio channel includes: a radio frequency (RF) front end to convert an RF signal to a digitized signal; a Fast Fourier Transform (FFT) generator coupled to the RF front-end to separate the digitized signal into a plurality of sub-channels; a bank of phase locked loops (PLLs) coupled to the FFT generator, each PLL operating on a sub-channel with a sub-channel center; and a flag detector coupled to the bank of PLLs to detect variations from the sub-channel center and to recover the usage data transmitted from the end-point.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">The present invention relates to a data transmission system, and more particularly to a data transmission system for utility metering.</p>
    <p num="2">
      The development and commercialization of various utility products, such as electricity, water, and gas have contributed to dramatic advances in living standards.
      <br/>
      In allocating usage bills, utility companies typically gauge consumption using meters and bill their customers accordingly.
      <br/>
      Traditionally, at the end of a reporting period, a utility employee physically inspects and records each customer's meter readout dials which reflect usage.
      <br/>
      The recorded data is eventually entered into an accounting system for billing purposes.
      <br/>
      This process is labor intensive and duplicative.
      <br/>
      Moreover, the meter reading process may be disrupted by unplanned nuisances such as dogs and inclement weather.
      <br/>
      Further, this process cannot provide time-of-day metering so that the utility company can charge for the utility product as a function of load factors.
    </p>
    <p num="3">
      To overcome these inefficiencies, remote meter reading systems have been developed which automatically capture consumption data from the field.
      <br/>
      In situations which cannot afford dedicated lines or connections to the plain old telephone service (POTS), wireless meter reading systems have been deployed.
      <br/>
      Typically, such a wireless meter reading system includes a base station which transmits on one frequency to a remote station, which in turn may relay the transmission to other remote stations.
      <br/>
      The base station also receives data from the remote stations on the same or related frequency.
      <br/>
      The wireless transmission of data between the base and remote stations is determined by the licensing rules of a government regulatory authority such as the Federal Communications Commission (FCC) in the United States or the Radio-Communications Authority (RA) in the United Kingdom (UK).
    </p>
    <p num="4">
      Generally, the authority grants licenses to operate radio transmitters that have to operate within a limited frequency spectrum.
      <br/>
      For instance, in the UK, a spectrum between 183.5 MHZ and 184.5 MHZ is reserved for metering applications.
      <br/>
      The band is in turn divided into eight 25 kHz channels and four 200 kHz channels.
      <br/>
      Similar frequency allocations are also enforced in various other countries which reserve a band of frequencies for various applications such as meter data collection.
    </p>
    <p num="5">
      Due to the limited frequency spectrum, data transmission needs to be within a narrow range such as within about 100 kHz of a predesignated transmission frequency.
      <br/>
      Since the wireless meter reading system deploys many more transmitters than receivers in forwarding usage statistics to a utility company's central location, each transmitter needs to be made as economically as possible.
      <br/>
      Typically, the most expensive component in the transmitter is a quartz crystal resonator which controls the transmission frequency.
    </p>
    <p num="6">
      The resonators use crystals made of quartz in the frequency generation process.
      <br/>
      Due to the cost of the crystal, it is desirable to use the least possible expensive grade of crystal.
      <br/>
      However, low grade crystals tend to be more sensitive to ambient and operating temperature variations.
      <br/>
      Further, over time, the frequency generated by low grade crystals tend to drift.
      <br/>
      As such, the use of low grade, inexpensive crystals tends to reduce the accuracy of the transmitter's operating frequency.
      <br/>
      Further, other components associated with the frequency generation process are also subject to aging.
      <br/>
      For instance, as capacitors age, variations in their capacitive values may cause a frequency variation in a  +- 10% range.
    </p>
    <p num="7">
      Thus, the use of inexpensive components may cause the transmission frequency to vary out of alignment during operation as the components heat up.
      <br/>
      Further, over time, the transmission frequency may drift out of alignment due to aging.
      <br/>
      If the frequency variations are significant, the components associated with the frequency generation process need to be replaced or aligned so that the base station and the remote stations can communicate with each other in the designated frequency range.
      <br/>
      Such replacement or alignment operations are cost prohibitive and for many applications, not practicable.
      <br/>
      Alternatively, higher grade, but more expensive crystals could be used.
    </p>
    <heading>SUMMARY</heading>
    <p num="8">A receiver which is capable of receiving in parallel data transmitted at arbitrary frequencies within a radio channel includes: a radio frequency (RF) front end to convert an RF signal to a digitized signal; a Fast Fourier Transform (FFT) generator coupled to the RF front-end to separate the digitized signal into a plurality of sub-channels; a bank of phase locked loops (PLLs) coupled to the FFT generator, each PLL operating on a sub-channel with a sub-channel center; and a flag detector coupled to the bank of PLLs to detect variations from the sub-channel center and to recover the usage data transmitted from the end-point.</p>
    <p num="9">
      Implementations of the invention include one or more of the following.
      <br/>
      The receiver has a second RF front end coupled to the FFT generator to convert a diversity RF signal to an intermediate frequency and to digitize the intermediate frequency.
      <br/>
      A multiplexer can be coupled to the RF front ends.
      <br/>
      A decimator can be coupled to the RF front-end and the FFT generator, and a mixer can be coupled to the decimator.
      <br/>
      The FFT generator can produce a stream of values representing a plurality of band pass filters.
      <br/>
      Data can be transferred at a bit rate and wherein each band pass filter has a center which is spaced by one half the bit rate.
      <br/>
      Each sub-channel can have a bin frequency, and wherein the flag detector determines a difference between the PLL frequency and the bin frequency.
      <br/>
      Where each bin spacing separates one bin from an adjacent bin, the flag detector can correlate the digitized signals of each sub-channel against a first flag sequence if the difference is less than the bin spacing.
      <br/>
      The flag detector can also correlate the digitized signals of each sub-channel against a second flag sequence if the difference is greater than the bin spacing.
    </p>
    <p num="10">
      In another aspect, a remote data collection system for collecting usage data from an end-point includes a monitoring module coupled to the end-point, the monitoring module having a wireless transmitter to transmit the usage data and a remote receiver coupled to the wireless transmitter.
      <br/>
      The receiver has a radio frequency (RF) front end to convert an RF signal to a digitized signal; a Fast Fourier Transform (FFT) generator coupled to the RF front-end to separate the digitized signal into a plurality of sub-channels; a bank of phase locked loops (PLLs) coupled to the FFT generator, each PLL operating on a sub-channel with a sub-channel center; and a flag detector coupled to the bank of PLLs to detect variations from the sub-channel center and to recover the usage data transmitted by the end-point.
    </p>
    <p num="11">
      Advantages of the invention include one or more of the following.
      <br/>
      The meter data transmission system is reliable in the field and free of transmission variations induced by aging and temperature variations.
      <br/>
      Repeatability is enhanced as the system does not depend on component tolerance.
      <br/>
      The system requires virtually no calibration or alignment with respect to its operating frequency.
      <br/>
      The system is robust to minor frequency variations and requires less time and effort to manufacture as well as to install in the field.
      <br/>
      The system has a low power consumption.
      <br/>
      Certain additional functionality may be programmed using the system's processor and memory without requiring additional circuitry.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="12">
      FIG. 1 is a schematic diagram illustrating a physical network configuration of a meter data transmission system in accordance with the present invention.
      <br/>
      FIG. 2 is a diagram illustrating a logical network configuration for the physical network of FIG. 1.
      <br/>
      FIG. 3 is a block diagram of a receiver in accordance with the present invention.
      <br/>
      FIG. 4 is a block diagram of the digital signal processors (DSPs) which execute software modules of the receiver of FIG. 3.
      <br/>
      FIG. 5 is a block diagram of operations performed by a first DSP of FIG. 4.
      <br/>
      FIG. 6 is a block diagram of operations performed by second and third DSPs of FIG. 4.
      <br/>
      FIG. 7 is a block diagram illustrating a binary phase adjustment operation in a PLL.
      <br/>
      FIG. 8 is a block diagram of a PLL loop filter.
      <br/>
      FIG. 9 is a block diagram of a numerically controlled oscillator in a PLL.
      <br/>
      FIG. 10 is a block diagram of a state machine for detecting and demodulating incoming signals.
      <br/>
      FIG. 11 is a block diagram of a demodulator.
      <br/>
      FIG. 12 is a block diagram of a message reconstructor.
      <br/>
      FIG. 13 is a Moore model of the state machine of FIG. 6.
      <br/>
      FIG. 14 is a data flow diagram showing communications between the second and third DSPs.
      <br/>
      FIGS. 15A-15C are charts illustrating various flag sequence representations.
      <br/>
      FIG. 16A is a block diagram of a flag sequence detector.
      <br/>
      FIG. 16B is a flow chart of a flag sequence detection process.
      <br/>
      FIG. 16C is a flow chart illustrating a flag detection process.
      <br/>
      FIG. 17 is a block diagram of a transmitter for a monitoring module in accordance with the present invention.
      <br/>
      FIG. 18 is an antenna for the transmitter of FIG. 18.
      <br/>
      FIG. 19 is a flow chart illustrating a process for monitoring loads on the processors of FIG. 4.
      <br/>
      FIG. 20 is a diagram illustrating internal processing blocks in each microcell controller of FIG. 1.
    </p>
    <heading>DESCRIPTION</heading>
    <p num="13">
      FIG. 1 shows a data transmission system for disseminating utility usage information from points of use to a central database for processing.
      <br/>
      The transmission system is a wireless data network designed to provide telemetry services.
      <br/>
      The network uses a distributed processing and database approach to manage a high volume of data and large number of monitoring endpoints.
      <br/>
      Monitoring and communications services are configured according to specific needs of the customer.
    </p>
    <p num="14">
      As shown in FIGS. 1 and 2, each utility usage node 100 such as an electricity, gas or water meter, is connected to wireless telemetry monitoring module 40.
      <br/>
      Each module 40 collects usage information from its associated meter or end-point and wirelessly forwards that information over a transmission network, which ultimately reaches database 16 located at, for example, a central monitoring station.
      <br/>
      Monitoring module 40 may have a transmit-only capability, or may have both transmit and receive capabilities compatible with the rest of the system.
      <br/>
      Such two-way communications may support, for example, capabilities for receiving usage information and/or diagnostic information.
      <br/>
      The usage or consumption data transmitted in each transmission may also include redundant data previously transmitted to improve reliability so that the module transmissions can be used for advanced monitoring functions as described below.
    </p>
    <p num="15">
      The transmission network is generally configured as a series of wireless local area networks (LANs) 38 with inter-network communications supported by wide area network (WAN) 26. WAN 26 may be wireless or may be wired using land-lines.
      <br/>
      Typically, wireless telemetry monitoring module 40 communicate with a nearby LAN host called microcell controller (MCC) 30, 32, 34 or 36.
      <br/>
      The combination of monitoring modules 40 and MCCs 30-36 define LAN elements of the network.
      <br/>
      Each of MCC 30-36 has a well-defined group of monitoring modules to which is provided local area network services.
      <br/>
      Each of MCCs 30-36 requires WAN services in order to connect with system controller 20, where telemetry data is ultimately processed.
    </p>
    <p num="16">
      Within a complete transmission network, thousands of MCCs 30-36 will be managing the data transmitted from hundreds of thousands of monitoring modules.
      <br/>
      These MCCs 30-36 operate independently of each other and the system controller as autonomous network elements.
      <br/>
      But each MCC's object database is accessible by system controller 20 using WAN 26, as discussed below.
      <br/>
      The WAN may consist of any communication method which provides transport services for transmissions originating from either the system controller or the MCC.
      <br/>
      As such, WAN 26 in the network is simply a routed radio transmission transport service and does not perform any processing or operations on the transmissions themselves.
    </p>
    <p num="17">
      The WAN radio system may have one or more cell masters 22-24, each providing the transmission transport and routing services as required by MCCs 30-36 within their coverage area.
      <br/>
      Each of MCCs 30-36 is connected via cell master 22 to system controller 20.
      <br/>
      Message transmissions originating at system controller 20 and addressed to MCC 30-36 are immediately passed transparently through this connection.
      <br/>
      Similarly, transmissions originating at MCC 30-36 are passed to the system controller.
    </p>
    <p num="18">
      Turning now to FIG. 3, receiver 100 for the MCC is shown.
      <br/>
      The receiver detects and demodulates the meter transmissions from meter modules 40 and then passes received messages to a processor in the MCC.
      <br/>
      Through an RF front-end, data is converted from a continuous analog signal to a digitally sampled version.
      <br/>
      The RF front-end can include one or more of the following: down converter 104, local oscillator 106, summer 112, shaped noise source 114 and under sampling circuit 116.
      <br/>
      For diversity purposes, a second RF front-end is used, and the second front-end can include one or more of the following: down converter 110, summer 122, shaped noise source 124, under sampling circuit 126, and multiplexer 118.
    </p>
    <p num="19">
      Data is received periodically at random and on a random frequency within an allocated 100 KHz bandwidth, for example.
      <br/>
      A protocol deals with message collisions in time and frequency from meters that are in the same cell as well as in adjacent cells.
      <br/>
      Receiver 100 can receive in parallel data transmitted at arbitrary frequencies within a radio channel.
    </p>
    <p num="20">
      Receiver 100 captures radio frequency signals on two single-conversion down-converters 104 and 110, each being connected to antennas 102 and 108, respectively.
      <br/>
      The deployment of two down-converters 104 and 110 allows receiver 100 to operate with diversity and to enhance the reception of transmissions.
      <br/>
      Each of the single conversion down converters 104 and 110 is driven by low side local oscillator 106.
      <br/>
      The output of single conversion down converter 104 is provided to summer 112.
      <br/>
      Dithered or shaped noise 114 is also provided to summer 112.
      <br/>
      The output of summer 112 is provided to an under-sampling circuit 116 whose sampling frequency is set to the receiver's bit rate multiplied by 64 times the under sampling circuit's decimation rate.
      <br/>
      The under sampling frequency may be about 19 MHZ.
    </p>
    <p num="21">
      Correspondingly, the output of single conversion down converter 110 is provided to summer 122.
      <br/>
      The other input to summer 122 is dithered or shaped noise 124.
      <br/>
      The output of summer 122 is provided to an under-sampling circuit 126 whose sampling frequency is determined in the above-discussed manner for under-sampling circuit 116.
      <br/>
      The output of under-sampling circuits 116 and 126 are multiplexed through multiplexer 118.
      <br/>
      The multiplexed data is then decimated, interleaved in blocks and processed using a Fast Fourier Transform (FFT), as discussed below.
    </p>
    <p num="22">
      The output of multiplexer 118 in turn is provided to signal processing module 128 which performs mixing, filtering and decimating operations.
      <br/>
      The module 128 can be an Analog Devices part number AD6620, among others.
      <br/>
      The sampling is done before the filtering and decimating function.
      <br/>
      The use of passband sampling implements a pseudo mixing process.
      <br/>
      In one implementation, module 128 provides a continuous stream of about 111 complex kilo-samples per second which corresponds to 64 times over-sampling of the incoming data.
    </p>
    <p num="23">
      By this time, data has been converted from a continuous analog signal to a digitally sampled version.
      <br/>
      The conversion is completed by multiplying the continuous analog signal with a unit impulse train.
      <br/>
      To accurately produce the input waveform, the input signal's bandwidth to less than half of the sampling frequency.
    </p>
    <p num="24">
      The initial task of receiver 100 is to detect the presence of a transmission from module 40.
      <br/>
      As discussed above, certain countries reserve a band of frequencies for metering applications.
      <br/>
      The band is in turn divided into various channels.
      <br/>
      In order to make use of the narrow bandwidth of the signal transmissions, the total number of channels is split into a number of sub-channels, thereby matching the noise bandwidth in each sub-channel to the signal bandwidth.
      <br/>
      The channel division is done with a Fast Fourier Transform (FFT) which in effect, implements a fixed bank of filters, each with the response of the FFT window function.
      <br/>
      The sampled waveform is transformed from a time domain to a frequency domain using the FFT.
      <br/>
      The FFT of an impulse sequence in the time domain is an impulse sequence in the frequency domain with spacing equal to that of the sampling frequency.
    </p>
    <p num="25">
      Thus, the output of module 128 is provided to windowed-FFT block 130.
      <br/>
      Windowed-FFT block 130 performs a 128-point FFT which is executed at a rate of four times the bit rate to implement a bank of filters.
      <br/>
      The sampling rate is reduced by performing the FFT transform on the arrival of every 16 new samples, for example.
      <br/>
      Thus, the output of FFT block 130 results in 128 channels or streams of values representing the desired bank of bandpass filters whose centers are spaced by one half the bit rate.
      <br/>
      The data in the 100 KHz channel is carried in 114 channels.
      <br/>
      The remaining 14 channels represent transition band fall back regions caused by the final stage of decimation and are discarded.
      <br/>
      Further processing is performed only on the 114 sub-channels.
    </p>
    <p num="26">
      The output of FFT block 130 is provided to a bank of phase-locked loops (PLLs) and controller state machine 132.
      <br/>
      Flag detector 131 is connected to FFT block 130 and controller state machine 132 to detect and compensate for variations in the sub-channel center frequency.
      <br/>
      In combination, blocks 130, 131 and 132 detect the presence of a transmission in a sub-channel and allow the transmission to be recovered.
    </p>
    <p num="27">
      Each sub-channel of receiver 100 operates a similar process to capture a packet sent by module 40.
      <br/>
      A data packet includes the following fields:
    </p>
    <p num="28">
      preamble, which includes zero-phase data;
      <br/>
      flag which includes flag-sequence data;
      <br/>
      pad which includes padding data;
      <br/>
      payload which is the data to be transmitted; and
      <br/>
      trailer which includes trailer data.
    </p>
    <p num="29">The preamble, flag, and pad data are used to synchronize with the start of the payload.</p>
    <p num="30">
      In order to recover a phase modulation of the transmitted signal, which in this case is modulated using a constant-amplitude scheme or other techniques such as coherent modulation scheme, the frequency offset within a sub-channel bandwidth is removed and a PLL is used to track the signal.
      <br/>
      A dedicated PLL is provided for each of the sub-channels defined by the FFT output.
      <br/>
      Each PLL has its own loop filter and feedback which vary dynamically according to the stage of message reception in that subchannel.
      <br/>
      Further, the message structure has a constant carrier portion in the preamble to allow for initial block acquisition.
      <br/>
      The flag sequence then is used to acquire timing information and further to adjust the PLL parameters.
      <br/>
      Hence, frequency, phase, and timing information may be recovered before the message content is demodulated.
      <br/>
      A demodulated message has a text content and additional words for check bits and demodulation information.
      <br/>
      The message includes an average received signal strength indication (RSSI) measurement field, a channel number field, and status information.
      <br/>
      The text content including information such as usage and maintenance data is then recovered and suitably processed by a processor in the MCC.
    </p>
    <p num="31">
      After decoding the message, receiver 100 forwards or uploads the data in the message to the system controller for additional processing.
      <br/>
      Although in one embodiment, receiver 100 only receives transmissions from module 40, receiver 100 may also provide two-way communication with module 40 through an optional transmitter which downloads a variety of information such as a remote connect command, a prepayment command, a diagnostic request or a home management related request to module 40.
      <br/>
      In this case, module 40 includes a module receiver for receiving commands from the optional transmitter and appropriate circuitry to respond to the commands.
    </p>
    <p num="32">
      FIG. 4 is a block diagram of digital signal processors (DSPs) 202, 204, 206 and 208 which execute various signal processing software modules of receiver 100.
      <br/>
      DSPs 202, 204, 206 and 208 communicate over an internal high speed bus 209.
      <br/>
      For diagnostics or testing purposes, DSPs 202, 204, 206 and 208 can also communicate with a personal computer or host computer using a suitable interface such as a bidirectional serial interface.
    </p>
    <p num="33">
      During operation, DSP 202 receives sample data streams from the decimator in module 128 (FIG. 3).
      <br/>
      The data may be a dual channel stream of complex data values.
      <br/>
      The samples arrive in single synchronous serial blocks with real and imaginary values for each communication channel.
      <br/>
      DSP 202 has a serial port direct-memory-access (DMA) channel which is configured to transfer the real and imaginary values into a holding area in memory before generating an interrupt signal to DSP 202.
      <br/>
      An interrupt service routine executed by DSP 202 converts the real and imaginary values into floating point values and stores them in memory.
      <br/>
      When sufficient samples are received, the real and imaginary data are multiplied using a window function and processed through a 128 point complex FFT.
      <br/>
      In addition, an RSSI signal is generated for about one quarter of the FFT outputs after each FFT process.
    </p>
    <p num="34">
      DSPs 204 and 206 implement phase lock loops and state machines for two of the channels received by DSP 202.
      <br/>
      The RSSI and complex FFT values are transferred to DSPs 204 and 206 from DSP 202 under DMA control.
      <br/>
      Under a master DMA mode, when the FFT operation on a first channel A has been completed, an I/O circuit in DSP 202 is configured to use three of its external DMA channels to write real, imaginary, and magnitude values to an external DMA buffers of DSP 204.
    </p>
    <p num="35">
      DSP 208 performs error correction on the received message packets.
      <br/>
      It also performs diversity arbitration.
    </p>
    <p num="36">
      Turning now to FIG. 5, the processing operation performed by DSP 202 is shown in more detail.
      <br/>
      DSP 202 receives data which has been decimated and mixed from an analog to digital converter in a receiver front-end circuit.
      <br/>
      The RF front end converts a diversity RF signal to an intermediate frequency and to digitize the intermediate frequency.
      <br/>
      This data is provided to a window function block 302 which applies an f-point window to the incoming data.
      <br/>
      The output of block 302 is provided to an FFT size f block 304 which performs an f-point FFT on the data.
      <br/>
      The output of block 304 is provided to a subchannel block 306 which selects a predetermined set of center or middle p points.
      <br/>
      A spectrum analysis is performed on the output of block 306.
      <br/>
      The analysis is done on each of the p data samples received from the receiver front-end circuit.
      <br/>
      The data is provided to magnitude calculator block 308.
      <br/>
      The output of magnitude calculator block 308 is provided to moving average block 310 which generates a mean RSSI value.
      <br/>
      The output of block 308 are p-point complex spectrum as well as a p-point root-mean-square RSSI measure.
      <br/>
      The p-point complex spectrum and RSSI measure are passed to DSPs 204 and 206 for subsequent processing.
    </p>
    <p num="37">
      In FIG. 6, one channel with p-points of complex spectrum is provided to phase angle determination block 142 which calculates the phase angle of the channel signal.
      <br/>
      The output of phase angle determination block 142 is provided to summer 144.
      <br/>
      The output of phase angle determination block 142 is also used for shadow-PLL purposes.
      <br/>
      Summer 144 also receives an input from numerically controlled oscillator (NCO) 146. The output of summer 144 is provided to phase adjustment block 158 which in turn drives an absolute phase angle determination block 160 as well as loop filter 148.
      <br/>
      The output of loop filter 148 is provided to NCO 146.
      <br/>
      The output of absolute phase angle determination block 160 is also provided to moving average determination block 162 for determining a mean phase error.
      <br/>
      The phase values provided to block 162 may also be replaced by shadow phase values.
      <br/>
      Similarly, integrative values of loop filter 148 may be replaced by a shadow loop filter integrative value, and the NCO phase of NCO block 146 may be replaced by a shadow NCO phase.
    </p>
    <p num="38">
      The output of moving average determination block 162 is provided to threshold comparison block 164 to perform a lock detect.
      <br/>
      The output of output threshold block 164 is provided to finite state machine 166 which in turn drives phase adjustment block 158, loop filter 148, and switch 150.
      <br/>
      The output of switch 150 is provided to data detect block 152 and data demodulate block 154.
      <br/>
      The output of data detect block 152 in turn is provided to NCO block 146.
      <br/>
      Further, the output of datdemodulate block 154 is provided to message reconstruction block 156.
      <br/>
      The output of message reconstruction block 156 is provided to state machine 166.
      <br/>
      Message reconstruction block 156 then generates one or more demodulated messages as outputs.
    </p>
    <p num="39">
      In the bank of PLLs and controller state machine of FIG. 6, the input signal of the circuit is in Cartesian form which can be described in polar form as Ae(J Q+W+N PI ), wherein A is the amplitude or the transmission signal strength, Q is the phase due to the carrier, W is the phase due to a particular FFT bin, and N is the symbol identification.
      <br/>
      For instance, BPSK has two symbols that are separated by  PI .
      <br/>
      The circuit of FIG. 6 relies mainly on phase information since most of the necessary information may be expressed in terms of phase.
      <br/>
      Magnitude information has no role in locking signals, detecting flags or making bit decisions.
      <br/>
      The advantage of this approach is that only one value is required to represent phase information, while magnitude information, when expressed as Cartesian coordinates, requires two values.
      <br/>
      Computational resource requirement is minimized since only one memory access is required, and operations such as mixing require only one add operation rather than four multiply operations and two add operations.
    </p>
    <p num="40">
      Referring now to FIG. 7, the binary phase adjustment operation performed by block 158 of FIG. 6 is shown.
      <br/>
      Two inputs, a phase adjustment select signal and a locked signal with a phase offset, are used.
      <br/>
      First, a value n is assigned to zero to indicate that the phase is set to zero in block 402.
      <br/>
      Correspondingly, in block 404, n is assigned to a value of -1 to indicate that the phase is - PI .
      <br/>
      The output of blocks 402 and 404 are provided to switch 406 which selects a phase adjustment according to the last demodulated symbol.
      <br/>
      The output of switch 406, -n PI , is provided to summer 408.
      <br/>
      Summer 408 also receives an output from switch 410 which receives as its input a locked signal with a phase offset due to the modulated symbol.
      <br/>
      Switch 410 in turn is controlled by a signal carrying the channel state.
      <br/>
      A second output of switch 410 is also provided to one input of switch 412.
      <br/>
      The second input of switch 412 is connected to the output of summer 408.
      <br/>
      Switches 410 and 412 are both controlled by the current channel state.
      <br/>
      Thus, if flag DMOD_GET_LENGTH or flag DMOD_USE_LENGTH has been set, then switches 410 and 412 are set to adjust the phase of the symbol.
      <br/>
      Otherwise, switches 410 and 412 are set to leave the phase of the symbol as is.
      <br/>
      The output of switch 412 is a locked signal where the symbol phase offset has been corrected.
    </p>
    <p num="41">
      FIG. 8 shows a block diagram of loop filter 148.
      <br/>
      Loop filter 148 receives an estimate of a signal phase error generated by phase adjustment block 158.
      <br/>
      The estimate is provided to an amplifier 422 whose output is provided to summer 430.
      <br/>
      The estimate of the phase error is also provided to second amplifier 424, whose output is provided to summer 426.
      <br/>
      Amplifiers 422 and 424 are set according to the channel state.
      <br/>
      For instance, to freeze the phase lock loop, alpha and beta are set to zero.
    </p>
    <p num="42">
      Summer 426 also receives the output of hard limiter 434.
      <br/>
      The output of summer 426 in turn drives phase store module 428.
      <br/>
      The output of phase store module 428 is provided to unit time delay module 432 whose output is supplied to the hard limiter 434.
      <br/>
      The output of phase store module 428 is also provided to summer 430, whose output signals indicates that a modification needs to be made to a VC phase store.
    </p>
    <p num="43">
      Referring now to FIG. 9, a block diagram illustrating in more detail NCO 146 of FIG. 6 is shown.
      <br/>
      The input to NCO 146 is a phase change signal and a phase correction signal from loop filter 148 and data detect module 152, respectively.
      <br/>
      These two signals are provided to summer 434.
      <br/>
      Additionally, summer 434 receives a fixed phase operation block 432.
      <br/>
      The output of summer 434 in turn is provided to second summer 436.
      <br/>
      Summer 436 drives phase store module 438, which stores the phase information.
      <br/>
      The output of phase store module 438 is provided to unit time delay module 440 which in turn drives summer 436.
      <br/>
      The output of phase store module 438 is a phase corrected output which is then provided to summer 144.
    </p>
    <p num="44">
      Referring now to FIG. 10, a block diagram illustrating detector 152 of FIG. 6 is shown.
      <br/>
      Detector 152 receives data samples of a locked signal with zero phase and frequency error.
      <br/>
      The data is stored in a buffer 452 which shuffles data if the current state is COLLECT_CL.
      <br/>
      The output of data buffer 452 is provided to switch 454 which is controlled by the subchannel state.
      <br/>
      Switch 454 performs correlation if the current state is CORRELATE.
      <br/>
      The output of switch 454 is provided to complex correlation block 456 which selects a filter flag sequence to use based on the frequency, as the phase characteristic of the flag is affected by the carrier position within the subchannel.
      <br/>
      The output of complex correlation block 456 is provided to switch 458.
      <br/>
      Switch 458 in turn is controlled by a command to locate -2 * the phase angle of a detected peak.
      <br/>
      The output of switch 458 in turn is provided to a -2 * correlator phase angle block 460 whose output is the post correlation phase correction to NCO block 146.
    </p>
    <p num="45">
      Store data buffer 452 also receives data from data pointer store 462.
      <br/>
      Data pointer store 462 is also connected to switch 464.
      <br/>
      The output of switch 464 is provided to reset data pointer block 466 and an increment data pointer block 468.
      <br/>
      The output of blocks 466 and 468 in turn are provided to switch 470.
      <br/>
      The output of switch 470 is provided to unit time delay block 472 which drives data pointer store 462.
      <br/>
      Switches 464 and 470 in turn are controlled by the channel state.
      <br/>
      Thus, if the channel state is equal to the ACQUIRE_LOCK state or COLLECT_OL state, the data pointer is reset.
    </p>
    <p num="46">
      Referring now to FIG. 11, a block diagram of a demodulator 154 is shown.
      <br/>
      The input to demodulator 154 is a locked signal having a zero phase and a zero frequency error from switch 150.
      <br/>
      The input is provided to switch 482 which is controlled by the current channel state.
      <br/>
      Switch 482 demodulates data if the data is on the symbol timing.
      <br/>
      The output of switch 482 is provided to decision boundary block 484.
      <br/>
      The output of block 484 is provided to a symbol determination block 486.
      <br/>
      Block 486 generates a feedback to the phase information used to encode a symbol so that the PLL can correct itself.
      <br/>
      The output of symbol determination block 486 is provided to symbol conversion block 488 which converts the symbol to data bit streams of zeros and ones.
      <br/>
      The output of block 488 is used to reconstruct the message from the demodulated bit stream which is provided to message reconstructor 156 (FIG. 6).
    </p>
    <p num="47">
      Message reconstructor 156 of FIG. 6 is shown in more detail FIG. 12. The input to message constructor 156 is a plurality of demodulated message bits.
      <br/>
      The message bits are provided to buffer 492.
      <br/>
      The output of buffer 492 is provided to switch 494, which sends the message forward if a message pointer in the channel state is equal to the message length.
      <br/>
      The output of switch 494 in turn is supplied to a message package construction block 496.
      <br/>
      The output of block 496 is a reconstructed message that may be sent to DSP 208 of FIG. 4.
      <br/>
      Buffer 492 also receives an output from message pointer store 498.
      <br/>
      If the message pointer is equal to a the message length, message pointer store 498 sets the channel state to DMOD2 and obtains the message length.
      <br/>
      Alternatively, if the message pointer equals message length then the channel state is set to ACQUIRE_LOCK.
      <br/>
      Message pointer store 498 in turn is provided to switch 500.
      <br/>
      The output of switch 500 is provided to message pointer reset block 504 and to message pointer increment block 502, respectively.
      <br/>
      The output of blocks 502 and 504 are provided to switch 506.
      <br/>
      The output of switch 506 in turn is provided to unit time delay module 510 whose output is provided to message pointer store 498.
      <br/>
      Switches 500 and 506 are controlled by the current channel state.
      <br/>
      Thus, the switches reset the data pointer on entry to the state DMOD.
      <br/>
      The output of message reconstructor 156 is provided to DSP 208 for performing various error checking before the content of the message is provided to the system controller.
    </p>
    <p num="48">
      Referring now to FIG. 13, a Moore model of state machine 166 is shown.
      <br/>
      State machine 166 has ACQUIRE_LOCK state 602, LOCKED state 604, COLLECT_CL state 606, COLLECT_OL state 608, CORRELATE state 610, FLUSH_PAD_DATA state 612, DMOD_GET_LENGTH state 614, and DMOD_USE_LENGTH state 616.
      <br/>
      In ACQUIRED_LOCK state 602, state machine 166 updates the phase lock loop, sets the data index and data points to zero and stores the new data in an array.
      <br/>
      State machine 166 remains in ACQUIRE_LOCK state 602 as long as a phase lock error flag is greater than or equal to LK_LVL.
      <br/>
      If that the PLL error is less than LK_LVL, ACQUIRE_LOCK state 602 transitions to LOCKED state 604.
    </p>
    <p num="49">
      In LOCKED state 604, the PLLs are updated and a LOCK index is incremented.
      <br/>
      State machine 166 remains in LOCKED state 604 as long as an error flag (PLL_err) is less than LK_LVL and that the lock index is less than LK_INDEX.
      <br/>
      When PLL_err is greater than or equal to LK_LVL, LOCKED state 604 transitions to ACQUIRE_LOCK state 602.
      <br/>
      Alternatively, if PLL_Err is less than LK_LVL and the lock index is equal to LK_INDEX, LOCKED state 604 transitions to COLLECT_CL state 606.
    </p>
    <p num="50">
      In state 606, state machine 166 updates the PLL, sets the data index to CL_INDEX minus 1, shuffles the data and stores the new data in an array.
      <br/>
      Finally, it sets a collection of index (COLLECT_OF_INDEX).
      <br/>
      State machine 166 remains in state 606 as long as the datum is less than CL_INDEX and PLL_Err is less than CL_LVL.
      <br/>
      Alternatively, when the current data index is greater than or equal to CL_INDEX, state machine 166 transitions from COLLECT_CL state 606 to ACQUIRE_LOCK state 602.
      <br/>
      Additionally, in the event that the data index is less than CL_INDEX and PLL_Err is greater than or equal to CL_LVL, state machine 166 transitions from COLLECT_CL state 606 to COLLECT_OL state 608.
    </p>
    <p num="51">
      In COLLECT_OL state 608, state machine 166 freezes the PLL, increments the data index and stores the new datum in the array.
      <br/>
      As long as the data index is less than COLLECT_OF_INDEX, state machine remains in COLLECT_OL state 608.
      <br/>
      Alternatively, when the data index is greater than or equal to COLLECT_OF_INDEX, state machine 166 transitions to CORRELATE state 610.
      <br/>
      In state 610, the PLL is frozen and the data index is incremented.
      <br/>
      Additionally, new data is stored in the array and a correlation peak is checked.
      <br/>
      In the event that the data index is greater than or equal to RE_ACQ_INDEX and a peak is not detected, the state machine 166 transitions from CORRELATE state 610 to ACQUIRE_LOCK state 602.
      <br/>
      If the data index is less than RE_ACQ_INDEX and no correlation peak is detected, state machine 166 remains in CORRELATE state 610.
      <br/>
      Alternatively, when there is a correlation peak, state machine 166 transitions from CORRELATE state 610 to FLUSHED_PAD_DATA state 612.
    </p>
    <p num="52">
      In state 612, the PLL is updated and the data index is incremented.
      <br/>
      Further, the message index is cleared.
      <br/>
      FLUSH_PAD_DATA state 612 also checks for stronger peak on adjacent channels, and flushes the pattern data.
      <br/>
      When the adjacent channel has a stronger peak, FLUSH_PAD_DATA state 612 transitions to ACQUIRE_LOCK state 602.
      <br/>
      State machine 166 remains in FLUSH_PAD_DATA state 612 as long as the adjacent channel does not have a stronger peak and the data index is less than DMOD_START_POSITION.
      <br/>
      Alternatively, when the adjacent channel has a stronger peak and the data index equals DMOD_START_POSITION, FLUSH_PAD_DATA state 612 transitions to DMOD_GET_LENGTH state 614.
    </p>
    <p num="53">
      In state 614, the symbols are decoded and stored.
      <br/>
      Further, the PLL is updated with phase adjustments for the symbol and the method index incremented.
      <br/>
      Additionally, a message length index is set.
      <br/>
      In the event that the message length index is less than MSG_LEN_INDEX, state machine 166 remains in state 614.
      <br/>
      Further, in the event that the message length status is invalid, state machine 166 transitions from DMOD_GET_LENGTH state 614 to ACQUIRE_LOCK state 602.
      <br/>
      Additionally, when the message index equals MSG_LEN_INDEX, DMOD_GET_LENGTH state 614 transitions to DMOD_USE_LENGTH state 616.
    </p>
    <p num="54">
      In state 616, symbols are decoded and stored, and the PLL is updated with the phase adjustment for the symbol.
      <br/>
      Additionally, the message index is incremented.
      <br/>
      State machine 166 remains in DMOD_USE_LENGTH state 616 as long as the message index is less than MSG_LEN_INDEX.
      <br/>
      When the message index equals MSG_LEN_INDEX, state machine 166 transitions from DMOD_USER_LENGTH state 616 to ACQUIRE_LOCK state 602.
    </p>
    <p num="55">
      FIG. 14 is a data flow diagram illustrating communications between DSP 202 and DSP 204.
      <br/>
      Each of DSPs 202 and 204 provide process 652 and process 654, respectively, for receiving demodulated messages.
      <br/>
      Data from buffer 652 is provided to a serial port 0 (SPORT0) receive process 660.
      <br/>
      Process 660 configures the DMA channel during start-up and reconfigures the DMA channel after a complete data block has been received.
      <br/>
      The output from SPORTO receive process 660 is provided to buffer A 662.
      <br/>
      In one implementation, buffer A 662 stores about 40 32-bit words of data.
    </p>
    <p num="56">
      The output of buffer A 662 is provided to an extract message process 664.
      <br/>
      The spectrum component of each message is then provided to store spectrum process 666 while the transmitted packet portion is provided to an error correct process 674.
      <br/>
      The store spectrum memory area contains the most recent spectra received from the DSPs handling the two channels.
      <br/>
      Store spectrum process writes values from the spectrum message and stores them directly in the relevant spectrum store, along with a channel identifier.
    </p>
    <p num="57">
      Turning now to process 654 operating on DSP 204, data is provided to a serial port 1 (SPORT 1) receive process 661.
      <br/>
      The output of process 661 is provided to buffer B 663.
      <br/>
      The output of buffer 663 is provided to an extract message process 665.
      <br/>
      A spectrum component of the message from the extract message process 665 is provided to store spectrum process 668 for storing a spectrum message, while a transmitted packet portion of the message extracted by process 665 is provided to an error correct process 676.
      <br/>
      The spectrum message contains information about the power in each of the used sub-channels.
      <br/>
      Store spectrum process 668 and error correct process 676 in turn provides a ready-to-send signal back to DSP 204.
      <br/>
      Similarly, store spectrum process 666 and error correct process 674 provide a ready-to-send signal to DSP 202.
    </p>
    <p num="58">
      The outputs of store spectrum processes 666 and 668 in turn are provided to spectrum store buffer 670.
      <br/>
      Correspondingly, corrected packets from error correct processes 674 and 676 are provided to channel message store buffer 678.
      <br/>
      Message store buffer 678 holds messages (already corrected) from DSPs in order to determine diversity arbitration.
    </p>
    <p num="59">
      The output from spectrum store buffer 670 and channel message store buffer 678 are provided to process 680 which arbitrates, adds message statistics, or provides the statistics and stores the message.
      <br/>
      Process 680 also receives noise floor information from process 672 as well as spectrum information from spectrum store buffer 670.
      <br/>
      They arbitrate, gather statistics and watchdog processes operate on the channel message store to ultimately generate messages to be sent to an I/O processor such as an 8051 microcontroller connected to the DSP 208.
    </p>
    <p num="60">
      Process 680 can be divided into a number of sub-processes: diversity arbitration, gather channel noise statistics, and watchdog to preceding DSPs.
      <br/>
      The diversity arbitration process attempts to pair messages on the following basis:
      <br/>
      Paired messages must occur within 1 sample period of each other.
    </p>
    <p num="61">
      Paired messages will almost always occur in the same sub-channel on the diverse and main paths, although it is possible for a signal exactly half way between two sub-channels to appear on adjacent sub-channels for the two receivers; or
      <br/>
      The algorithm will chose the received signal with fewer errors.
    </p>
    <p num="62">
      The demodulated messages reported to the I/O processor should contain a measure of the channel noise.
      <br/>
      In addition, DSP 208 reports channel statistics to the I/O processor on a regular basis, even if DSPs 204 and 206 do not deliver any demodulated messages.
      <br/>
      This mechanism provides two features:
      <br/>
      It enables the I/O processor to perform the watchdog function on DSP 208.
      <br/>
      The I/O processor should receive communications from DSP 208 on a regular basis.
    </p>
    <p num="63">It enables the I/O processor to determine whether any potential lack of received signals is due to the radio channel being jammed or perhaps due to the radio becoming deaf.</p>
    <p num="64">
      Since DSPs 204 and 206 report the RSSI across the used spectrum on a regular basis (regardless of the number of demodulated messages), DSP 208 may perform a watchdog function on the preceding devices.
      <br/>
      When spectra information is not reported by DSPs 204 and 206, DSP 208 may report the problem to the I/O processor so that the I/O processor can determine whether to instruct the DSP 208 to reset the whole cluster of DSPs.
    </p>
    <p num="65">
      The output from process 680 is provided to message layer buffer 682 which in turn is provided to data link process 684 for generating a new message.
      <br/>
      The new data link packet is in turn provided to a data link transmit and receive buffer 686 which may store in a single message.
      <br/>
      The output from data bank transmit/receive buffer 686 in turn is provided to data link process 688 which drives a serial port of DSP 690.
    </p>
    <p num="66">
      In receiver 100, the PLL is used for correlating and demodulating.
      <br/>
      Since the FFT window function specifies a fixed bank of filters, if the carrier is off to one side of a particular sub-channel, the correlation and demodulation processes are not centered on the carrier.
      <br/>
      This has two effects, both of which are accentuated by the over-filtering characteristic of the window function: 1) the signal is weaker than if centered in the channel; and 2) phase transitions 0 to 1 and 1 to 0 receive different amounts of attenuation.
    </p>
    <p num="67">
      These issues are resolved using flags and a flag detection process.
      <br/>
      The flag provides a known sequence of data which can be correlated against to obtain timing information about a packet.
    </p>
    <p num="68">
      FIGS. 15A-15C show three examples of the phase modulation at the filter output for a flag sequence input (the phase ramp due to frequency offset has been suppressed.) A first example is associated with waveform 710 (FIG. 15A), which is approximately at the center.
      <br/>
      A second example (FIG. 15B) is associated with waveform 716 which is about 1/4 bandwidth to the left of the center frequency.
      <br/>
      Finally, a third example (FIG. 15C) is associated with waveform 718 which is about 1/4 bandwidth to the right of the center.
    </p>
    <p num="69">
      As shown in FIGS. 15A-15C, for trajectories corresponding to 010 bit patterns, the phase does not reach 180 (degree) . Even for a 011 bit pattern, it is after two extra samples that the phase is at 180 (degree) . Where the carrier is at the lower frequency limit of the sub-channel, the rising phase edges are faster and the falling edges are slower compared to the center channel trace.
      <br/>
      This is because the rising edges correspond to an increase in the carrier frequency due to the modulation which moves the instantaneous carrier frequency into the center of the sub-channel where it receives reduced attenuation.
      <br/>
      Conversely, the falling edges correspond to reducing the carrier, causing increased attenuation.
      <br/>
      These artifacts can be attributed to the binning artifacts of the FFT operation, where it is possible to achieve almost 100 dB stop band attenuation.
      <br/>
      This occurs at the expense of flatness in the pass band and roll off.
    </p>
    <p num="70">
      As a result of the stop band attenuation, the pass band is heavily overfiltered, not at all matched to the approximately 1700 bps received signals.
      <br/>
      At the center of an FFT output, the response rolls off by a small amount.
      <br/>
      The roll-off becomes more significant at the center of the adjacent FFT output.
      <br/>
      As such, the FFT outputs have significant overlap.
      <br/>
      In order to prevent the PLL on adjacent FFT outputs locking to the signal, the PLL frequency has to be limited.
      <br/>
      Further, the sensitivity of the system is not uniform across a sub-channel--it is approximately 1 dB less if an incoming signal is at the edge of sub-channel compared to the center.
      <br/>
      Excessive filtering of the signal means that the carrier phase does not reach the destination constellation point within a bit period--there is thus inter-symbol interference.
      <br/>
      The effects of inter-symbol interference can be ameliorated.
      <br/>
      Finally, phase transitions receive differing amounts of attenuation depending upon their location within a sub-channel.
      <br/>
      To compensate for the over-filtering caused by the FFT block, a flag sequence detector may use more than one phase waveform representation, as discussed below.
    </p>
    <p num="71">
      A block diagram of data flow among software modules in receiver 110 for detecting flag sequences is shown in FIG. 16A. Data received by the receiver is processed by FFT block 780 (FFT block 130 of FIG. 3).
      <br/>
      The output of FFT block 780 is provided to bank of PLLs 782 (PLL bank 132 of FIG. 3) and flag reference block 786.
      <br/>
      The PLL acquires carrier lock on a series of alternate ones and zeros, so receiver 100 can then mix a packet signal to base-band and recover information.
    </p>
    <p num="72">
      Flag reference block 786 also receives an output from PLL banks 782.
      <br/>
      The output of PLL bank 782 is also provided to a demodulator 784.
      <br/>
      A flag detector 788 receives the outputs of both demodulator 784 and flag reference block 786, and generates a flag detector output to be used by state machine 132 (FIG. 3).
    </p>
    <p num="73">
      FIG. 16B shows a process 790 which generates a correlation response of the incoming signal against the appropriate flag sequence.
      <br/>
      First, the difference between the locked PLL frequency and the bin's frequency is computed (step 792).
      <br/>
      The difference is then tested to see if it is positive and greater than one-quarter of the bin frequency spacing (step 793).
      <br/>
      If the difference is greater than one-quarter of the bin frequency spacing, the inputs are correlated against the representation of the flag sequence of FIG. 15C (step 794).
    </p>
    <p num="74">
      Alternatively, if the difference is not positive and greater than one-quarter of the bin frequency spacing, the difference is then tested to see if it is negative and more than one-quarter of the bin frequency spacing (step 795).
      <br/>
      If the difference is negative and more than one-quarter of the bin frequency spacing, the inputs are correlated against the second representation of the flag sequence of FIG. 15B (step 796).
      <br/>
      Otherwise, the inputs are correlated against the third representation of the flag sequence of FIG. 15A (step 797).
      <br/>
      From steps 794, 796, or 797, the process 790 exits.
    </p>
    <p num="75">
      In this process, each field in a packet is provided to allow a receiver to obtain frequency and timing information for the packet, and to calculate the start position of a payload.
      <br/>
      The preamble provides a pure carrier (zero-phase modulation) for a receiver to lock to, and also helps to reduce false correlation peaks in the matched filter output.
      <br/>
      The pad provides a buffer-zone so that the receiver can identify a peak in the matched filter's output, and calculate, in advance, where the payload will start.
      <br/>
      It also helps to reduce false correlation peaks in the matched filter output.
      <br/>
      The trailer provides time for a transmitter to switch-off its power amplifier at the end of a packet without affecting any of the field containing information.
      <br/>
      The trailer contains dummy data, arbitrarily set to zeros.
    </p>
    <p num="76">
      A modified complex pseudo-random sequence is used for the flag, and its complex-conjugate is used for the matched filter coefficients.
      <br/>
      All pseudo-random sequences have an odd number of bits.
      <br/>
      The value of the bit is chosen so that the modified sequence will have an approximately equal number of ones and zeros.
    </p>
    <p num="77">
      False peaks are reduced without requiring the flag to be repeated.
      <br/>
      This is done by selecting a pseudo-random sequence for the flag such that: the front-end of the flag is similar to the post-flag data (i.e., the pad--all zeros) and the rear-end of the flag is similar to the pre-flag data (i.e., the preamble--all zeros).
      <br/>
      For instance, a flag of 0 * 3D64 satisfies these criteria, since 1) it is a modified pseudo-random bit sequence: a maximal length pattern, generated by a 4 stage LFSR, with a zero added to it; 2) the front end of the flag 00 is similar to the pad data of four zeros; and 3) the rear-end of the flag 00100 is similar to the preamble data of all zeros.
    </p>
    <p num="78">
      The synchronization procedure, considered for one packet arriving on a single sub-channel of the receiver, has the following stages:
      <br/>
      Acquire phase lock: the early part of the preamble allows a PLL to acquire carrier lock on a received signal (the time taken varies), so it can be mixed to base-band.
      <br/>
      Once lock is acquired, subsequent data samples are stored sequentially in a buffer.
    </p>
    <p num="79">Maintain phase lock: the next parts of the preamble are used to maintain and improve the lock of the PLL, which is then declared to be fully locked.</p>
    <p num="80">
      Correlate: the remainder of the preamble, all of the flag, and part of the pad data are correlated against each other, until a peak is identified.
      <br/>
      This requires matched filter output values to be calculated for data beyond the end of the flag.
      <br/>
      The position of the peak indicates the end of the flag sequence.
      <br/>
      By adding the length (in bits) of the pad data to this value, the position of the start of the payload can be calculated.
    </p>
    <p num="81">Flush pad data: the remainder of the pad data is discarded as it arrives at the receiver, while it waits for the payload to begin.</p>
    <p num="82">
      Referring now to FIG. 16C, a process 900 is shown for determining flag detection.
      <br/>
      First, the number of bins is determined (step 902).
      <br/>
      Next, the bin frequency is generated by locking the phase lock loop (step 904).
      <br/>
      In step 906, the frequencies associated with sub bins are determined.
      <br/>
      The sub bin frequencies are then used to select one or more reference patterns (step 908).
      <br/>
      Next, the correlation is performed between the reference pattern versus the incoming signal data to create a metric (step 910).
      <br/>
      The metric is then compared with a predetermined threshold (step 912).
      <br/>
      If the metric is above a predetermined threshold, then the flag sequence is confirmed.
      <br/>
      Otherwise, the process 900 skips the current cycle and waits for the next cycle to determine the flag sequence.
    </p>
    <p num="83">
      FIG. 17 shows a digital transmitter 800 located at the module 40 and which communicates with receiver 100.
      <br/>
      In transmitter 800, reference oscillator 802 provides an approximately square-wave signal to ramp generator/low-pass filter 804, which has an RC time constant about equal to the time duration of one data symbol.
      <br/>
      Low pass filter 804 reshapes the square-wave input to an approximately triangular-wave output which is applied to synthesizer 808.
      <br/>
      Synthesizer 808 also receives a signal from low-pass filter 806 which provides the over-sampled modulation signal.
      <br/>
      Synthesizer 808 contains reference divider, signal divider, and phase detector.
      <br/>
      The output of synthesizer 808 is provided to loop filter 810, which in turn controls sine-wave generator 812.
    </p>
    <p num="84">
      The modulation scheme used by transmitter 800 is phase modulation.
      <br/>
      This is generated by the reference divider within synthesizer 808 having a triggering threshold about equal to the mid-range value of the triangular-wave output of low-pass filter 804.
      <br/>
      The addition of the modulation signal from low-pass filter 806 with the triangular wave from filter 804 results in an up-or-down voltage shifting of the combined-triangular-wave-plus-modulation.
      <br/>
      This shifting causes a modulation of the time that the combined-triangular-wave-plus-modulation signal passes through the triggering threshold of the reference divider within synthesizer 808.
      <br/>
      The modulation of the time of the triggering-threshold crossing looks exactly the same to the synthesizer as phase modulation of reference oscillator 802.
    </p>
    <p num="85">
      In one embodiment, the modulation signal produces the equivalent of a +/-2.4 degree phase modulation of the reference oscillator, and the synthesizer controls oscillator 812 to a phase modulation of +/-180 degrees.
      <br/>
      The synthesizer loop response provides additional low-pass filtering of the modulation.
    </p>
    <p num="86">
      The output of generator 812 is provided to splitter 814.
      <br/>
      One output of splitter 814 is provided to synthesizer 808, while the other output of splitter 814 is provided to an amplifier 816.
      <br/>
      The output of amplifier 816 is provided second amplifier 818.
      <br/>
      The output of amplifier 816 is in turn provided to harmonic filter 820 through second amplifier 818.
      <br/>
      The output of harmonic filter 820 is then provided to an antenna 822.
    </p>
    <p num="87">
      Transmitter 800 generates data signals at a bit rate of approximately 1.75 kbit/sec using BPSK modulation.
      <br/>
      These signals occupy an effective bandwidth of about 3.5 kHz. Transmitter 800 transmits data at a random time and on a random frequency within the allocated 100 kHz bandwidth.
      <br/>
      A protocol deals with message collisions in time and frequency (from meters in the same and adjacent cells) such that a signal received at a base station might contain many messages which are unsynchronized in time and modulated on a range of random frequencies.
      <br/>
      When operating with the receiver discussed above, the system supports a plurality of simultaneous transmissions, assuming that the transmission start time is random and uniformly distributed.
      <br/>
      Further, the system is designed to allow the transmitter to operate over a 100 kHz band, without the requirement for accurate transmitter frequency tolerance.
      <br/>
      By finely sub-dividing the band at the receiver, a signal can be resolved at any point within the 100 kHz.
    </p>
    <p num="88">
      Allowance for transmitter frequency tolerance is made by factory configuration to set the transmit limits to a band centered in the receiver's passband.
      <br/>
      A margin allowed at each end of the passband gives provision for both temperature drift and ageing of the reference crystal.
      <br/>
      Since both temperature and ageing drift are randomly positive or negative, a population of meters will, over time and temperature, expand to cover the full passband.
    </p>
    <p num="89">
      Since the receiver has a continuous coverage in the frequency domain, greater flexibility is afforded in the choice of transmitter frequencies.
      <br/>
      Although the transmitter has a set of discrete channels on which it can transmit, these do not need to correspond with any set of frequencies at the receiver.
      <br/>
      This alleviates the need to align the transmitter reference crystal.
      <br/>
      A tight tolerance crystal is not required, since the +/-30 ppm variation in oscillator frequency can be compensated for at factory calibration by selecting a sub-set of the available channels which falls within the required band.
    </p>
    <p num="90">
      FIG. 18 shows the layout of antenna 822 of FIG. 17 in conjunction with the transmitter circuitry.
      <br/>
      Antenna 822 is implemented as a loop antenna 870 using copper traces around the perimeter of printed circuit board 848 and resonated with a capacitor.
      <br/>
      To provide a compact, integrated transmitter board, the transmit circuitry is placed at the center of loop antenna 870.
      <br/>
      This removes the need for a separate antenna and interconnect, and also makes use of the space within the antenna.
    </p>
    <p num="91">
      The copper trace of loop antenna 870 surrounds circuit traces 848 which support the components associated with the transmitter circuitry (FIG. 17).
      <br/>
      An impedance matching trace 860 is connected to circuit traces 840 and the trace of loop antenna 870.
      <br/>
      Impedance matching trace 860 matches the impedance of loop antenna 870 to the transmitter's output impedance and thus matches loop antenna 870 to the impedance of free space.
    </p>
    <p num="92">
      The implementation of loop antenna 870 is inexpensive in that it is provided directly on the printed circuit board, thus antenna 870 is easy to implement and has a low profile.
      <br/>
      Moreover, physical assembly is not required.
    </p>
    <p num="93">
      Referring back to receiver 100, it is digital and executes a number of complex, compute-intensive processes using one or more DSPs.
      <br/>
      The DSPs have to be managed, and the processes have to be prioritized to manage processing loads if processing resources become insufficient given the time remaining in a particular transmission cycle.
    </p>
    <p num="94">
      Turning now to FIG. 19, a process 930 is shown for managing loads on one of the signal processors.
      <br/>
      First, process 930 receives a block of FFT data (step 932).
      <br/>
      Next, the process initializes a timer with an interrupt interval and starts the counter of a load monitor on a countdown sequence (step 934).
      <br/>
      The process 930 then puts the load monitor to sleep (step 936).
    </p>
    <p num="95">
      The load monitor process uses successive interrupts.
      <br/>
      A timer is initially configured to cause an interrupt after a time corresponding to
      <br/>
      T1 =(Taverage -Tshutdown) * P1 -Toverhead
    </p>
    <p num="96">
      where Taverage is the average number of cycles available for each sub-channel, Tshutdown is the number of cycles to shut down the sub-channel if time runs out, Toverhead is the number of cycles reserved as overhead for running the load monitor and P1 is the total number of sub-channels processed.
      <br/>
      If the timer reaches zero before all P1 sub-channels are processed, an interrupt is generated.
      <br/>
      In the interrupt service routine, a calculation is performed to determine whether any usable cycles remain.
      <br/>
      Since a certain number of sub-channels have already been processed, no time needs to be allowed for shutting them down in the event of a load monitor cut-in.
      <br/>
      The timer is reconfigured with the following value:
      <br/>
      T2 =Tshutdown * P1 -Pprocessed -Toverhead
    </p>
    <p num="97">
      where Pprocessed is the number of channels processed since the last load monitor timer interrupt (or since the start of processing if this is the first interrupt).
      <br/>
      If this value T2 is greater than a predefined useful limit, the timer placed in a "sleep" mode and is "waked-up", or enabled by subsequent interrupts whose timing is set by the timer.
    </p>
    <p num="98">
      While the monitor is "sleeping", tasks are allowed to execute (step 940).
      <br/>
      Concurrently, process 930 determines whether the timer set in step 934 has reached zero (step 942).
      <br/>
      If not, process 930 loops back to step 942 to continue the countdown.
      <br/>
      Alternatively, once the timer reaches zero, process 930 wakes up the load monitor and determines the time remaining to the next FFT data block (step 944).
      <br/>
      Process 930 then estimates the time required to complete the outstanding tasks (step 946).
      <br/>
      If sufficient time remains, the process then computes the next interrupt interval (step 952) and loops back to step 934 to initialize the timer with the new countdown period and starts the countdown period once more.
      <br/>
      In step 948, if insufficient time remains to complete all tasks, process 930 then shuts down tasks pursuant to a priority scheme which is proportional to the remaining time until the next FFT data block arrival (step 950).
      <br/>
      From step 950, process 930 proceeds to step 952 to compute the next interrupt interval and loops back to step 934 to initialize the timer and to start the countdown process to the next interrupt.
    </p>
    <p num="99">
      In this manner, in the event that sufficient time exists to complete all tasks, these tasks execute to completion in step 940.
      <br/>
      Otherwise, tasks are removed based on their priority as well as based on the amount of time remaining until either all tasks have been executed or no more time remains.
      <br/>
      In this manner, process 930 ensures timely operation and optimal channel usage.
      <br/>
      Further, the process can cope with the mean peak loading such that the system as a whole has more than sufficient resources for a 100 kHz channel fully loaded with transmissions, provided that the start times of these transmissions are random with uniform distribution, as discussed below.
    </p>
    <p num="100">
      In one embodiment, the channel capacity is of the order of 20 simultaneous messages.
      <br/>
      The maximum number of messages which can simultaneously fit across a 100 kHz band is about 28 if they happen to have ideal 4 sub-channel spacing.
      <br/>
      The implementation has sufficient resources to be simultaneously processing up to 40 messages provided they do not fall into the same state at the same time.
      <br/>
      However, certain situations may exist where there is insufficient resources for all channels to be processed.
      <br/>
      The maximum number of successful exactly coincident message detections that can be performed at any one sample time is around five.
      <br/>
      Even in a heavily loaded channel, the probability of three sub-channels simultaneously correlating successfully is small.
      <br/>
      However, this and similar situations will occur and thus a graceful means of terminating execution without over-running the allocated time is defined.
    </p>
    <p num="101">
      This mechanism processes the sub-channels from the low frequency to the high frequency.
      <br/>
      As more sub-channels are processed, the time required to finish the remaining sub-channels is reduced.
      <br/>
      As processor resource is used, there may be insufficient cycles to do anything other than gracefully terminate the remaining sub-channels.
      <br/>
      Thus, all messages currently being received in these sub-channels are lost.
    </p>
    <p num="102">
      In heavy load situations, the situation will arise where only sufficient time remains to shut down all remaining sub-channels.
      <br/>
      In particular, if a strong signal arrives in a sub-channel where a weak signal is currently being demodulated, it is desirable that the strong signal should terminate the processing of the weak signal (it will be corrupted anyway) and that the strong signal should then be recovered successfully.
      <br/>
      This is accomplished by the use of a shadow Phase Lock Loop and State Machine (PLLSM) for each of the 114 sub-channels.
      <br/>
      The impact on processing requirement is not excessive since a shadow PLLSM is dormant, requiring zero processor cycles, when the corresponding main state machine is not demodulating a signal (i.e., is idle or is detecting a signal).
    </p>
    <p num="103">
      The interaction of the main state machine and the shadow state machine are closely interrelated.
      <br/>
      The shadow state machine has the ability to abort the processing of the main state machine if it detects a packet arriving with RSSI 10 dB greater than the original message.
      <br/>
      In such cases, the main state machine takes over processing of the new message and the shadow PLLSM reverts to attempting to find another strong signal.
    </p>
    <p num="104">
      The partially received first message is not immediately discarded.
      <br/>
      It is passed on for cyclic redundancy checking (CRC) and, if necessary, for error correction.
      <br/>
      It may be that only the end of the message was lost through the subsequent stronger message.
      <br/>
      Since the error correction bits are placed at the end of the packet and are not required for a successful CRC, there is a possibility that the data content will remain intact.
    </p>
    <p num="105">
      Another situation which is catered for is that where a message is arriving just as the main PLL state machine is completing reception of a previous message.
      <br/>
      On demodulation of the final bit of the first message, the shadow parameters are copied across to the main PLL state machine, along with any stored phase, lock detect and modulation depth data.
      <br/>
      This enables the main PLL state machine to detect a new message which was just underway in the shadow PLLSM but had not progressed through to successful detection.
    </p>
    <p num="106">
      The operation of the system in collecting usage statistics and diagnostic data is discussed in FIG. 20. The transmissions from monitoring modules are received by any MCC located within receiving distance, which varies from time to time.
      <br/>
      Generally, the likelihood of a successful transmission from a monitoring module to an MCC is correlated with the distance between that module and that MCC.
    </p>
    <p num="107">
      Since only one MCC is required to serve a monitoring module, and since redundant MCC service of the monitoring modules is inefficient, the MCC is coordinated by the system controller to eliminate any redundancy that may occur in the effective coverage areas.
      <br/>
      This coordination is as follows: the first time an MCC receives a transmission from a specific monitoring module, that Tracking MCC begins to process the signals from the module in order to measure the effective signal strength and estimate the radio link reliability for that monitoring module.
      <br/>
      This generally takes less than four hours.
      <br/>
      After doing so, that tracking MCC transmits a signal to system controller including information identifying the newly discovered monitoring module (the meter network address), the determined signal strength (the average received signal level), and the reliability of transmissions (the transmission statistics) received by that Tracking MCC from that monitoring module.
    </p>
    <p num="108">
      The tracking MCC then takes over the management and processing of the data transmitted from the monitoring module.
      <br/>
      The data contained within a monitoring module transmission may be processed in several different ways depending on the level of service that has been required by the customer.
      <br/>
      The processing of the data by the tracking MCC may be conducted by agent processes 56 (FIG. 20), which are computer program modules operating within the tracking MCC, defined for each specific endpoint module type.
      <br/>
      These processes may receive the monitoring module's transmissions and may decode them to extract the appropriate data.
      <br/>
      With the extracted data, the agent process may compute an update to be saved in the tracking MCC local object database 58 of FIG. 20, representation of each of its assigned monitoring modules 40.
      <br/>
      As each subsequent transmission is received, the object database representation of the monitoring module may be updated by the agent process.
    </p>
    <p num="109">
      Each agent process may be defined by algorithms specific to the services provided for a module type.
      <br/>
      Utility monitoring modules are typically processed according to one of several possible service definitions:
      <br/>
      1.
      <br/>
      Basic usage reading is typically defined to mean that at least one reading a day is provided where that reading generally represents the consumption data that is received just before midnight on a particular day.
      <br/>
      In this case, the usage module agent process will simply update the MCC object database with the most current total consumption value and status indicators each time a new transmission is received (typically over 100 transmissions per day).
      <br/>
      This agent process overwrites any earlier consumption data and at midnight captures and stores the most current values in a "snapshot buffer," which is subsequently retrieved by the system controller.
      <br/>
      2. Load Profile service is defined as the processing of consumption data in order to create a profile of consumption based on specific measurement intervals.
      <br/>
      In this service, the agent process extracts the interval consumption data contained within the monitoring module 40 transmissions and aggregates the module interval data into specific Load Profile intervals.
      <br/>
      For example, a typical monitoring module might transmit 2.5 minute consumption interval data which is aggregated into 15 minute Load Profile intervals by the agent process of the MCC.
      <br/>
      The Load Profile interval data is saved in the MCC object database for retrieval by the system controller.
    </p>
    <p num="110">
      For each monitoring module, there may be at least basic meter reading data within the tracking MCC's database.
      <br/>
      In addition to this basic service any of the other services may be provided by that MCC in which case the appropriate data as described above may be accumulated within the MCC's object database.
      <br/>
      Shortly after midnight each day, the system controller may read this database to recover the "snapshot buffer" which is then provided to the system controller load profile databases.
    </p>
    <p num="111">
      The services described above relate to the processing of usage data contained within the regular and periodic transmissions emanating from the monitoring modules every few minutes.
      <br/>
      In addition to these regular metering services, the network can also provide certain "event handling" services that detect and process transmissions that contain data representing events that occurred at the monitoring module.
      <br/>
      An event record is created in the MCC object database to keep track of the events.
      <br/>
      For example, a power outage event triggers the transmission of a Loss-of-Communication message by the monitoring module 40.
      <br/>
      The transmission containing this message is identified by a specific message type so that the tracking MCC that receives the transmission will process it as an event.
      <br/>
      In the case of the Loss-of-Communication event, the MCC may record the total number of such events received from its monitoring modules and then create an event summary in the MCC object database, which is subsequently sent to the system controller indicating that a Loss-of-Communication has occurred.
    </p>
    <p num="112">Both the routine meter data processing and the event handling functions make use of the MCC's object database services which contain the monitoring module data attributes in a "meter object." Some of the attributes of the meter object may be:</p>
    <p num="113">
      1.
      <br/>
      Monitoring network address
      <br/>
      2.
      <br/>
      Meter identifying number
      <br/>
      3.
      <br/>
      Total measured usage
      <br/>
      4.
      <br/>
      Total measured usage in TOU periods
      <br/>
      5.
      <br/>
      Peak demand for each TOU period
      <br/>
      6.
      <br/>
      Usage charge rate schedule (specifies TOU and demand algorithms)
      <br/>
      7.
      <br/>
      Average received signal level
      <br/>
      8.
      <br/>
      Transmission statistics
      <br/>
      9.
      <br/>
      Event status fields and counters
      <br/>
      10.
      <br/>
      Diagnostic and error status fields
    </p>
    <p num="114">
      Thus, data from a specific monitoring module 40 transmission is decoded by only one MCC which is designated as the tracking MCC.
      <br/>
      Depending on the class of service (or rate scheduled) specified for that monitoring module, the data within the transmission is processed and saved in the MCC object database.
    </p>
    <p num="115">
      Since a monitoring module transmission is processed by a single MCC, the network processing resources are conserved.
      <br/>
      Similarly, since only one MCC stores a meter object for a specific monitoring module, the network's distributed database memory resources are conserved.
    </p>
    <p num="116">
      A virtue of a transparent WAN solution lies in the flexibility to substitute alternative WAN services and technologies when appropriate.
      <br/>
      The system controller manages the metering operations of each MCC by reading from and writing to the MCC object database 58 (FIG. 20).
      <br/>
      Usage data processing may be specified by writing to the specific rate schedule attribute of the object in the tracking MCC, while the usage information may be read as usage attributes for a number of monitoring modules 40 from the MCC's object database.
      <br/>
      These exchanges may be performed from the system controller using the specific query language developed for the distributed object database.
      <br/>
      These queries may be initiated at the system controller (client process) and passed to the MCC object database query process 60 using the distributed messaging services of the WAN.
    </p>
    <p num="117">
      In the case of a daily usage reading operation, the system controller may initiate a query to each MCC database 58 requesting all of the "snapshot buffer" usage data described earlier.
      <br/>
      This query may be performed separately for each class of service (basic and load profile).
      <br/>
      The query process in each MCC then accumulates the object data responsive to the specific query and compresses the data for efficient transmission to the system controller.
      <br/>
      The data contained within these query responses may be stored in the system controller database to account for meter usage.
      <br/>
      Each query and response may be conducted using the Distributed Messaging System (DMS) services which specifies the methods and protocols for transmission of data over the WAN portion of the network.
    </p>
    <p num="118">
      Alternatively, in the case of event reports, each of MCCs 30-36 may generate an event record, such as an event summary, in the MCC object database 58 which may cause the tracking MCC process to transmit a signal to the system controller providing data necessary for the system controller to create an event record in its database.
      <br/>
      This communication with the System controller database may also be conducted using the DMS services of the WAN 26.
    </p>
    <p num="119">
      The system controller thus requests and receives specific information from the MCC.
      <br/>
      Because the MCC processes and stores consumption data extracted from a transmission in an object database, the transmissions from the MCC to the system controller are significantly different from the transmissions from the monitoring modules to the MCC.
      <br/>
      First, since the monitoring modules transmit every few minutes, from which only the essential data is extracted and stored, the volume of data transmitted between the MCC and the system controller is much smaller, increasing the efficiency in the use of the WAN.
      <br/>
      Second, the processed form of data conveyed from the MCC reduces the processing required at the system controller making it possible to efficiently handle the hundreds of thousands or millions of utility monitoring modules on the network.
      <br/>
      Finally, event processing may be performed at the tracking MCC level which results in the transaction of event data without waiting for system polling processes.
    </p>
    <p num="120">
      Each of the above described signal processing modules can be implemented in a high level procedural or object-oriented programming language to operate in conjunction with a computer system with DSPs.
      <br/>
      However, the programs can be implemented in assembly or machine language, if desired.
      <br/>
      In any case, the language may be a compiled or interpreted language.
    </p>
    <p num="121">
      Each such computer program can be stored on a storage medium or device (e.g., CD-ROM, hard disk or magnetic diskette) that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to perform the procedures described.
      <br/>
      The system also may be implemented as a computer-readable storage medium, configured with a computer program, where the storage medium so configured causes a computer to operate in a specific and predefined manner.
    </p>
    <p num="122">
      Although a wireless data transmission system has been disclosed for remote utility usage data collection, other suitable transmission techniques may be used as well, including optical or wireline transmission.
      <br/>
      Further, while the invention has been shown and described with reference to embodiments thereof, those skilled in the art will understand that the above and other changes in form and detail may be made without departing from the spirit and scope of the following claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A receiver to collect usage data from an end-point, the receiver capable of receiving in parallel data transmitted at arbitrary frequencies within a radio channel, comprising:</claim-text>
      <claim-text>a radio frequency (RF) front end to convert an RF signal to a digitized signal; a Fast Fourier Transform (FFT) generator coupled to the RF front-end to separate the digitized signal into a plurality of sub-channels; a bank of phase locked loops (PLLs) coupled to the FFT generator, each PLL operating on a sub-channel with a sub-channel center;</claim-text>
      <claim-text>and a flag detector coupled to the bank of PLLs to detect variations from the sub-channel center and to recover the usage data transmitted from the end-point.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The receiver of claim 1, further comprising a second RF front end coupled to the FFT generator to convert a diversity RF signal to an intermediate frequency and to digitize the intermediate frequency.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The receiver of claim 2, further comprising a multiplexer coupled to the RF front ends.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The receiver of claim 1, further comprising a decimator coupled to the RF front-end and the FFT generator.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The receiver of claim 4, further comprising a mixer coupled to the decimator.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The receiver of claim 1, wherein the FFT generator produces a stream of values representing a plurality of band pass filters.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The receiver of claim 6, wherein data is transferred at a bit rate and wherein each band pass filter has a center which is spaced by one half the bit rate.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The receiver of claim 1, wherein the PLL has a PLL frequency, wherein each sub-channel has a bin frequency, and wherein the flag detector determines a difference between the PLL frequency and the bin frequency.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The receiver of claim 8, wherein each bin spacing separates one bin from an adjacent bin and wherein the flag detector correlates the digitized signals of each sub-channel against a first flag sequence if the difference is less than the bin spacing.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The receiver of claim 8, wherein each bin spacing separates one bin from an adjacent bin and wherein the flag detector correlates the digitized signals of each sub-channel against a second flag sequence if the difference is greater than the bin spacing.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A remote data collection system to collect usage data from an end-point, comprising: a monitoring module coupled to the end-point, the monitoring module having a wireless transmitter to transmit the usage data; a remote receiver coupled to the wireless transmitter, including:</claim-text>
      <claim-text>- a radio frequency (RF) front end to convert an RF signal to a digitized signal; - a Fast Fourier Transform (FFT) generator coupled to the RF front-end to separate the digitized signal into a plurality of sub-channels; - a bank of phase locked loops (PLLs) coupled to the FFT generator, each PLL operating on a sub-channel with a sub-channel center;</claim-text>
      <claim-text>and - a flag detector coupled to the bank of PLLs to detect variations from the sub-channel center and to recover the usage data transmitted by the end-point.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The remote data collection system of claim 11, further comprising a second RF front end coupled to the FFT generator to convert a diversity RF signal to an intermediate frequency and to digitize the intermediate frequency.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The remote data collection system of claim 12, further comprising a multiplexer coupled to the first and second RF front ends.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The remote data collection system of claim 11, further comprising a decimator coupled to the RF front-end and the FFT generator.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The remote data collection system of claim 14, further comprising a mixer coupled to the decimator.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The remote data collection system of claim 11, wherein the FFT generator produces a stream of values representing a plurality of band pass filters.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The remote data collection system of claim 16, wherein data is transferred at a bit rate and wherein each band pass filter has a center which is spaced by one half the bit rate.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The remote data collection system of claim 11, wherein the PLL has a PLL frequency, wherein each sub-channel has a bin frequency, and wherein the flag detector determines a difference between the PLL frequency and the bin frequency.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The remote data collection system of claim 18, wherein each bin spacing separating one bin from an adjacent bin and wherein the flag detector correlates the digitized signals of each sub-channel against a first flag sequence if the difference is less than the bin spacing.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The receiver of claim 8, wherein each bin spacing separating one bin from an adjacent bin and wherein the flag detector correlates the digitized signals of each sub-channel against a second flag sequence if the difference is greater than the bin spacing.</claim-text>
    </claim>
  </claims>
</questel-patent-document>