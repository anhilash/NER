<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182203B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182203</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182203</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="21888834" extended-family-id="14416724">
      <document-id>
        <country>US</country>
        <doc-number>09012813</doc-number>
        <kind>A</kind>
        <date>19980123</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09012813</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>14736676</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>1281398</doc-number>
        <kind>A</kind>
        <date>19980123</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09012813</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>3648297</doc-number>
        <kind>P</kind>
        <date>19970124</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-60036482</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   9/38        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>38</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>B60G  17/015       20060101AFI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>B</section>
        <class>60</class>
        <subclass>G</subclass>
        <main-group>17</main-group>
        <subgroup>015</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>B60W  10/00        20060101ALI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>B</section>
        <class>60</class>
        <subclass>W</subclass>
        <main-group>10</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>B60W  10/04        20060101ALI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>B</section>
        <class>60</class>
        <subclass>W</subclass>
        <main-group>10</main-group>
        <subgroup>04</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>B60W  10/22        20060101ALI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>B</section>
        <class>60</class>
        <subclass>W</subclass>
        <main-group>10</main-group>
        <subgroup>22</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>G05B   7/02        20060101ALI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>05</class>
        <subclass>B</subclass>
        <main-group>7</main-group>
        <subgroup>02</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="7">
        <text>G06F   9/30        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="8">
        <text>G06F   9/355       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>355</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="9">
        <text>G06F  15/78        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>78</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="10">
        <text>H04M  11/00        20060101ALI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>M</subclass>
        <main-group>11</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>712022000</text>
        <class>712</class>
        <subclass>022000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>712013000</text>
        <class>712</class>
        <subclass>013000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>712E09025</text>
        <class>712</class>
        <subclass>E09025</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>712E09027</text>
        <class>712</class>
        <subclass>E09027</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>712E09028</text>
        <class>712</class>
        <subclass>E09028</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>712E09043</text>
        <class>712</class>
        <subclass>E09043</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>712E09046</text>
        <class>712</class>
        <subclass>E09046</subclass>
      </further-classification>
      <further-classification sequence="7">
        <text>712E09050</text>
        <class>712</class>
        <subclass>E09050</subclass>
      </further-classification>
      <further-classification sequence="8">
        <text>712E09054</text>
        <class>712</class>
        <subclass>E09054</subclass>
      </further-classification>
      <further-classification sequence="9">
        <text>712E09071</text>
        <class>712</class>
        <subclass>E09071</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-009/38T6C</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>38T6C</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-009/30A1P</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>30A1P</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G06F-009/30A5</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>30A5</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>G06F-009/30R4C</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>30R4C</subgroup>
      </classification-ecla>
      <classification-ecla sequence="5">
        <text>G06F-009/30R5</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>30R5</subgroup>
      </classification-ecla>
      <classification-ecla sequence="6">
        <text>G06F-009/30T</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>30T</subgroup>
      </classification-ecla>
      <classification-ecla sequence="7">
        <text>G06F-009/30T4T</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>30T4T</subgroup>
      </classification-ecla>
      <classification-ecla sequence="8">
        <text>G06F-009/355B</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>355B</subgroup>
      </classification-ecla>
      <classification-ecla sequence="9">
        <text>G06F-009/38D</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>38D</subgroup>
      </classification-ecla>
      <classification-ecla sequence="10">
        <text>G06F-009/38D1B</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>38D1B</subgroup>
      </classification-ecla>
      <classification-ecla sequence="11">
        <text>G06F-009/38E6</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>38E6</subgroup>
      </classification-ecla>
      <classification-ecla sequence="12">
        <text>G06F-009/38T</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>38T</subgroup>
      </classification-ecla>
      <classification-ecla sequence="13">
        <text>G06F-015/78P1N</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>015</main-group>
        <subgroup>78P1N</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/3891</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>3891</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/30036</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>30036</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/30072</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>30072</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/30112</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>30112</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/3012</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>3012</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/30145</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>30145</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/30167</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>30167</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/3552</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>3552</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/3824</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>3824</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="10">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/3828</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>3828</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="11">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/3853</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>3853</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="12">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/3885</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>3885</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="13">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-015/7857</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>7857</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>14</number-of-claims>
    <exemplary-claim>14</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>56</number-of-drawing-sheets>
      <number-of-figures>109</number-of-figures>
      <image-key data-format="questel">US6182203</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Microprocessor</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>FUKUDA MUNEHIRO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5222229</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5222229</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>FIJANY AMIR, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5361367</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5361367</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KECKLER STEPHEN W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5574939</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5574939</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SCHIFFLEGER ALAN J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5848286</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5848286</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>SMITH JAMES E</text>
          <document-id>
            <country>US</country>
            <doc-number>5895501</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5895501</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>GUPTA RAJIV, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5996083</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5996083</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>O'CONNOR DENNIS M</text>
          <document-id>
            <country>US</country>
            <doc-number>5848288</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5848288</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>Siamak Arya, et al., "An Architecture for High Instruction Level Parallelism," Proceedings of the 28th Annual Hawaii International Conference on System Sciences, pp. 153-162, 1995.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>"VLIW Architecture &amp; Trace Scheduling Compilation-Technology Review" by Equator Technologies, Inc.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Paul K. Rodman, "High Performance FFTs for a VLIW Architecture," pp. 1-15.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Gerrit A. Slavenburg, et al., "The Trimedia TM-1 PCI VLIW Media Processor," 1996 (Eighth Hot Chips Symposium.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>TriMedia TM1300 Preliminary Data Book, pp. 3-1-3-16.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/036,482</doc-number>
          <date>19970124</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/036482</doc-number>
          <date>19970124</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Texas Instruments Incorporated</orgname>
            <address>
              <address-1>Dallas, TX, US</address-1>
              <city>Dallas</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>TEXAS INSTRUMENTS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Simar, Jr., Laurence R.</name>
            <address>
              <address-1>Richmond, TX, US</address-1>
              <city>Richmond</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Scales, Richard H.</name>
            <address>
              <address-1>Houston, TX, US</address-1>
              <city>Houston</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Seshan, Natarajan</name>
            <address>
              <address-1>Houston, TX, US</address-1>
              <city>Houston</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Laws, Gerald E.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Brady, III, W. James</name>
          </addressbook>
        </agent>
        <agent sequence="3" rep-type="agent">
          <addressbook lang="en">
            <name>Telecky, Jr., Frederick J.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Coleman, Eric</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A microprocessor, comprising a first set of functional units capable of performing parallel data operations, a second set of functional units capable of performing parallel data operations, and a data interconnection path connecting the first and second functional units.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
    <p num="1">
      This application is related to coassigned Ser.
      <br/>
      No. 09/008,909 (TI-22106) now U.S. Pat. No. 5,958,044, Ser.
      <br/>
      No. 09/012,676 (TI-22109) now U.S. Pat. No. 6,055,628, Ser.
      <br/>
      No. 09/012,380 (TI-23604) now U.S. Pat. No. 6,078,940, Ser.
      <br/>
      No. 09/012,381 (TI-24333) now U.S. Pat. No. 6,003,125, Ser.
      <br/>
      No. 09/012,324 (TI-24334) now U.S. Pat. No. 6,061,780, Ser.
      <br/>
      No. 09/012,693 (TI-24335), Ser.
      <br/>
      No. 09/012,325 (TI-24942) now U.S. Pat. No. 6,112,291, Ser.
      <br/>
      No. 09/012,332 (TI-24956) now U.S. Pat. No. 6,058,474, Ser.
      <br/>
      No. 09/012,327 (TI-25248) now U.S. Pat. No. 6,128,725, Ser.
      <br/>
      No. 09/012,329 (TI-25309), and Ser.
      <br/>
      No. 09/012,326 (TI-25310); all filed contemporaneously herewith and incorporated herein by reference.
    </p>
    <heading>NOTICE</heading>
    <p num="2">
      (C) Copyright 1997 Texas Instruments Incorporated.
      <br/>
      A portion of the disclosure of this patent document contains material which is subject to copyright protection.
      <br/>
      The copyright owner has no objection to the facsimile reproduction by anyone of the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.
    </p>
    <p num="3">This application claims the benefit of U.S. Provisional Application No. 60/036,482, filed Jan. 24, 1997.</p>
    <p num="4">This invention relates to data processing devices, electronic processing and control systems and methods of their manufacture and operation.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="5">
      A microprocessor device is a central processing unit or CPU for a digital processor which is usually contained in a single semiconductor integrated circuit or "chip" fabricated by MOS/LSI technology, as shown in U.S. Pat. No. 3,757,306, issued to Gary W. Boone and assigned to Texas Instruments Incorporated.
      <br/>
      The Boone patent shows a single-chip 8-bit CPU including a parallel ALU, registers for data and addresses, an instruction register and a control decoder, all interconnected using the von Neumann architecture and employing a bidirectional parallel bus for data, address and instructions. U.S. Pat. No. 4,074,351, issued to Gary W. Boone and Michael J. Cochran, assigned to Texas Instruments Incorporated, shows a single-chip "microcomputer" type device which contains a 4-bit parallel ALU and its control circuitry, with on-chip ROM for program storage and on-chip RAM for data storage, constructed in the Harvard architecture.
      <br/>
      The term microprocessor usually refers to a device employing external memory for program and data storage, while the term microcomputer refers to a device with on-chip ROM and RAM for program and data storage.
      <br/>
      In describing the instant invention, the term "microcomputer" will be used to include both types of devices, and the term "microprocessor" will be primarily used to refer to microcomputers without on-chip ROM.
      <br/>
      Since the terms are often used interchangeably in the art, however, it should be understood that the use of one of the other of these terms in this description should not be considered as restrictive as to the features of this invention.
    </p>
    <p num="6">
      Modem microcomputers can be grouped into two general classes, namely general-purpose microprocessors and special-purpose micro-computers/microprocessors.
      <br/>
      General-purpose microprocessors, such as the M68020 manufactured by Motorola, Inc. are designed to be programmable by the user to perform any of a wide range of tasks, and are therefore often used as the central processing unit in equipment such as personal computers.
      <br/>
      Such general-purpose microprocessors, while having good performance for a wide range of arithmetic and logical functions, are of course not specifically designed for or adapted to any particular one of such functions.
      <br/>
      In contrast, special-purpose microcomputers are designed to provide performance improvement for specific predetermined arithmetic and logical functions for which the user intends to use the microcomputer.
      <br/>
      By knowing the primary function of the microcomputer, the designer can structure the microcomputer in such a manner that the performance of the specific function by the special-purpose microcomputer greatly exceeds the performance of the same function by the general-purpose microprocessor regardless of the program created by the user.
    </p>
    <p num="7">
      One such function which can be performed by a special-purpose microcomputer at a greatly improved rate is digital signal processing, specifically the computations required for the implementation of digital filters and for performing Fast Fourier Transforms.
      <br/>
      Because such computations consist to a large degree of repetitive operations such as integer multiply, multiple-bit shift, and multiply-and-add, a special -purpose microcomputer can be constructed specifically adapted to these repetitive functions.
      <br/>
      Such a special-purpose microcomputer is described in U.S. Pat. No. 4,577,282, assigned to Texas Instruments Incorporated and incorporated herein by reference.
      <br/>
      The specific design of a microcomputer for these computations has resulted in sufficient performance improvement over general purpose microprocessors to allow the use of such special-purpose microcomputers in real-time applications, such as speech and image processing.
    </p>
    <p num="8">
      Digital signal processing applications, because of their computation intensive nature, also are rather intensive in memory access operations.
      <br/>
      Accordingly, the overall performance of the microcomputer in performing a digital signal processing function is not only determined by the number of specific computations performed per unit time, but also by the speed at which the microcomputer can retrieve data from, and store data to, system memory.
      <br/>
      Prior special-purpose microcomputers, such as the one described in said U.S. Pat. No. 4,577,282, have utilized modified versions of a Harvard architecture, so that the access to data memory may be made independent from, and simultaneous with, the access of program memory.
      <br/>
      Such architecture has, of course provided for additional performance improvement.
    </p>
    <p num="9">The increasing demands of technology and the marketplace make desirable even further structural and process improvements in processing devices, application systems and methods of operation and manufacture.</p>
    <p num="10">Among the objects of the present invention are to provide improved data processing devices, systems and methods that reduce competition for processor resources between data acquisition, or output, functions and intensive computation operations; to provide improved data processing devices, systems and methods that reduce housekeeping overhead in a processor in high sample rate digital signal processing applications; to provide improved data processing devices, systems and methods for streamlining interrupt handling and subroutine calls and returns; and to provide improved data processing devices, systems and methods that increase processor bandwidth in telecommunications, control systems and other applications.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="11">In general, one form of the invention is an improved data processing device that includes an improved very long instruction word (VLIW) electronic processor.</p>
    <p num="12">
      Generally, another form of the invention is a system of signal processing apparatus including an analog-to-digital converter for producing a digital signal corresponding to an analog input by a conversion process and for producing an interrupt signal when a conversion is complete.
      <br/>
      Digital processing circuitry having a memory and a processor connected to the analog-to-digital converter is responsive to the interrupt signal to enter the digital signal into memory.
      <br/>
      The processor includes registers sets, at least one multiplier and at least one arithmetic logic unit.
    </p>
    <p num="13">
      A microprocessor, comprising a first set of functional units capable of performing parallel data operations, a second set of functional units capable of performing parallel data operations, and a data interconnection path connecting the first and second functional units.
      <br/>
      A data processing system, comprising fetch circuitry for fetching a first plurality of instructions simultaneously, and circuitry capable of executing a second plurality of instructions simultaneously, wherein the second plurality of instructions is less than or equal to the first plurality of instructions.
      <br/>
      A data processing system, comprising fetch circuitry for fetching a first plurality of instructions simultaneously, and circuitry capable of conditionally executing a second plurality of instructions simultaneously, wherein the second plurality of instructions is less than or equal to the first plurality of instructions.
    </p>
    <p num="14">
      Other device, system and method forms of the invention are also disclosed and claimed herein.
      <br/>
      Other objects of the invention are disclosed and still other objects will be apparent from the disclosure herein.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="15">
      The novel features believed characteristic of the invention are set forth in the appended claims. The preferred embodiments of the invention as well as other features and advantages thereof will be best understood by reference to the detailed description which follows, read in conjunction with the accompanying drawings, wherein:
      <br/>
      FIG. 1 shows a block diagram for a digital signal processor;
      <br/>
      FIG. 2 shows the CPU data paths;
      <br/>
      FIG. 3 shows the addressing mode register (AMR);
      <br/>
      FIG. 4 shows the control status register (CSR) which contains control and status bits;
      <br/>
      FIG. 5 depicts a general-purpose input register (IN) which supports 32 general-purpose input signals;
      <br/>
      FIG. 6 depicts a general-purpose output register (OUT) which supports 32 general-purpose output signals;
      <br/>
      FIG. 7 illustrates the register storage scheme for 40-bit data.
      <br/>
      FIGS. 8A, 8B, 8C, 8D, 8E, 8F, 8G, 8H, 8I and 8J, together, show the DSP's opcode map;
      <br/>
      FIG. 9 shows the basic format of a fetch packet;
      <br/>
      FIG. 10A depicts a fully serial p-bit;
      <br/>
      FIG. 10B depicts a fully parallel p-bit;
      <br/>
      FIG. 10C depicts a partially serial p-bit;
      <br/>
      FIG. 11 shows the phases of the pipeline;
      <br/>
      FIG. 12 shows the branch instruction phases;
      <br/>
      FIG. 13 shows the operation of the pipeline based on clock cycles and fetch packets;
      <br/>
      FIG. 14 depicts fetch packet n, which contains three execute packets, shown followed by six fetch packets (n+1 through n+6), each with one execution packet (containing 8 parallel instructions);
      <br/>
      FIG. 15 show the interrupt enable register (IER);
      <br/>
      FIG. 16 shows the interrupt flag register (IFR) which contains the status of INT4-INT15 and NMI;
      <br/>
      FIG. 17 shows the interrupt set register (ISR), which allows to setting or clearing interrupts manually in the IFR;
      <br/>
      FIG. 18 shows the interrupt clear register (ICR), which allows to setting or clearing interrupts manually in the IFR;
      <br/>
      FIG. 19 shows the relationship of the ISTB to the table location;
      <br/>
      FIG. 20 shows the interrupt return pointer (IRP);
      <br/>
      FIG. 21 shows the NMI return pointer (NRP);
      <br/>
      FIG. 22 shows the processing of an interrupt m (INTm).
      <br/>
      FIG. 23 depicts a high level functional diagram of processor 11;
      <br/>
      FIG. 24 shows that execute packets can vary in size as shown by alternating shading;
      <br/>
      FIG. 25 shows the Memory Map of the DSP;
      <br/>
      FIG. 26 shows the addressing example;
      <br/>
      FIGS. 27 and 28 show the data is byte addressable by the CPU with address increasing across the blocks from left to right;
      <br/>
      FIG. 29 shows the device configuration pins;
      <br/>
      FIG. 30 depicts the value of 000b of DC(13-11) pins during RESET;
      <br/>
      FIG. 31 depicts the value of 001b of DC(31-11) pins during RESET;
      <br/>
      FIG. 32 depicts the relationships of the interrupt service table with interrupt service fetch packets;
      <br/>
      FIG. 33 shows the clock mode is controlled by two CLKMODE pins;
      <br/>
      FIG. 34 depicts significant power savings realized without losing data or operational context by preventing some or all of chip's logic from switching;
      <br/>
      FIG. 35 depicts CLKIN timings;
      <br/>
      FIG. 36 depicts CLKOUT1 timings;
      <br/>
      FIG. 37 depicts CLKOUT2 timings;
      <br/>
      FIG. 38 depicts the EMIF signals;
      <br/>
      FIG. 39 depicts asynchronous memory read cycle timings;
      <br/>
      FIG. 40 depicts asynchronous memory write cycle timings;
      <br/>
      FIG. 41 depicts external controller read cycle timings;
      <br/>
      FIG. 42 depicts external controller write cycle timings;
      <br/>
      FIG. 43 depicts SBSRAM Read Cycle Timing;
      <br/>
      FIG. 44 depicts SBSRAM Write Cycle Timing;
      <br/>
      FIG. 45 depicts SDRAM Read Cycle Timing;
      <br/>
      FIG. 46 depicts SDRAM Write Cycle Timing;
      <br/>
      FIG. 47 depicts SDRAM Initialization Cycle Timing;
      <br/>
      FIG. 48 depicts SDRAM Refresh Cycle Timing;
      <br/>
      FIG. 49 shows the interrupt service fetch packets start execution;
      <br/>
      FIG. 50 shows the tr-stated signals driven again by the DSP within 1 clock cycle;
      <br/>
      FIG. 51 shows HOLD/HOLDA cycles tri-state all output signals on the EMIF (except HOLDA) and the HPI;
      <br/>
      FIGS. 52 and 53 show read and write cycles via the 16-bit Host Port;
      <br/>
      FIG. 54 shows the 16-bit Host Port used in FIGS. 52 and 53;
      <br/>
      FIG. 55 shows the DSP data memory system;
      <br/>
      FIG. 56 shows the different combinations of conflicting accesses;
      <br/>
      FIG. 57 shows the control status register (CSR) for the CPU;
      <br/>
      FIG. 58 depicts an external memory interface (EMIF) block diagram;
      <br/>
      FIGS. 59 and 60 show the effect of address and endianness on BE and external data (ED);
      <br/>
      FIG. 61 shows the EMIF attached to an asynchronous device;
      <br/>
      FIG. 62 shows the signal setup, hold and strobe width times;
      <br/>
      FIG. 63 shows the bus timing of an asynchronous writes;
      <br/>
      FIG. 64 shows three consecutive reads;
      <br/>
      FIG. 65 shows read access for 8-bit wide memory;
      <br/>
      FIG. 66 shows read access to 16-bit wide memory;
      <br/>
      FIG. 67 shows the EMIF connected to SBSRAM;
      <br/>
      FIG. 68 shows the EMIF connected to SDRAM;
      <br/>
      FIG. 69 shows the fields in the SDRAM Control Register;
      <br/>
      FIG. 70 shows fields in the EMIF SDRAM refresh period register;
      <br/>
      FIG. 71 shows a block diagram of the external control interface;
      <br/>
      FIG. 72 shows the usage of fields in the EMIF control register;
      <br/>
      FIG. 73 shows the interface of the Host Port to a host and to the internal data memory;
      <br/>
      FIG. 74 shows the handshake operation for a host to gain access to the host port;
      <br/>
      FIG. 75 shows the host port signal diagram for read and write operation;
      <br/>
      FIG. 76 shows a DMA operation consisting of a 32-bit word transfer to or from any of the three DSP modules;
      <br/>
      FIG. 77 shows the bitfields in that register;
      <br/>
      FIG. 78 depicts in sets the number of data transfers for the DMA channel to complete;
      <br/>
      FIG. 79 shows the DMA Channel Source Address Register;
      <br/>
      FIG. 80 shows the Destination Address Register;
      <br/>
      FIG. 81 depicts initiating the three power down modes and using the three lower bits of the PWRD field in the Control Status Register (CSR);
      <br/>
      FIG. 82 is a block diagram of an improved industrial process and protective control system;
      <br/>
      FIG. 83 is a partially pictorial, partially block electrical diagram of an improved automotive vehicle system;
      <br/>
      FIG. 84 is an electrical block diagram of an improved motor control system;
      <br/>
      FIG. 85 is an electrical block diagram of another improved motor control system;
      <br/>
      FIG. 86 is an electrical block diagram of yet another improved motor control system;
      <br/>
      FIG. 87 is an electrical block diagram of an improved robotic control system;
      <br/>
      FIG. 88 is an electrical block diagram of an improved satellite telecommunications system;
      <br/>
      FIG. 89 is an electrical block diagram of an improved echo canceling system for the system of FIG. 88;
      <br/>
      FIG. 90 is an electrical block diagram of an improved modem transmitter;
      <br/>
      FIG. 91 is an electrical block diagram equally representative of hardware blocks or process blocks for the improved modem transmitter of FIG. 90;
      <br/>
      FIG. 92 is an electrical block diagram equally representative of hardware blocks or process blocks for an improved modem receiver;
      <br/>
      FIG. 93 is an electrical block diagram of an improved system including a host computer and a digital signal processor connected for PCM (pulse code modulation) communications;
      <br/>
      FIG. 94 is an electrical block diagram of an improved video imaging system with multidimensional array processing;
      <br/>
      FIG. 95 is an electrical block diagram equally representative of hardware blocks or process blocks for improved graphics, image and video processing;
      <br/>
      FIG. 96 is an electrical block diagram of a system for improved graphics, image and video processing;
      <br/>
      FIG. 97 is an electrical block diagram of an improved automatic speech recognition system; and
      <br/>
      FIG. 98 is an electrical block diagram of an improved vocoder-modem system with encryption.
    </p>
    <p num="16">Corresponding numerals and other symbols refer to corresponding parts in the various figures of drawing except where the context indicates otherwise.</p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="17">Referring now to FIG. 1, there may be seen a high level functional block diagram of a presently preferred microprocessor 11.</p>
    <p num="18">
      FIG. 1 shows a block diagram for a digital signal processor (DSP).
      <br/>
      The DSP is based on a CPU 1, shown in the right center portion of FIG. 1.
      <br/>
      The DSP devices 11 come with program memory 2 which may be used as a program cache.
      <br/>
      The devices 11 may also have varying sizes and/or types of data memory 3.
      <br/>
      Peripherals 4 such as a direct memory access (DMA) controller 4a, power-down logic 5, an external memory interface (EMIF) 46 preferably come with the CPU, and peripherals 6 such as serial ports 6b and host ports 6a are optionally available.
    </p>
    <p num="19">
      The DSP has a 32-bit, byte addressable address space.
      <br/>
      Internal (on-chip) memory is organized in separate data 3 and program spaces 2.
      <br/>
      When off-chip memory is used, preferably these two spaces are unified into a single memory space via the external memory interface (EMIF) 46.
    </p>
    <p num="20">
      The DSP has two internal ports 3a,3b to access data memory 3, each with 32 bits of data and a 32-bit byte address reach.
      <br/>
      The DSP has a single port 2a to access program memory 2, with an instruction-fetch width of 256 bits and a 30-bit word (four bytes) address, equivalent to a 32-bit byte address.
    </p>
    <p num="21">The following peripheral modules may be supplied on the DSP: serial ports; timers; external memory interface (EMIF) that supports synchronous and asynchronous SRAM and synchronous DRAM; 2-channel auto-bootloading direct memory access (DMA) controller; host port; and power-down logic that can halt CPU activity, peripheral activity, and PLL activity to reduce power consumption.</p>
    <p num="22">
      Continuing to refer to FIG. 1, the CPU contains: a program fetch unit 7a; an instruction dispatch unit 7b; an instruction decode unit 7c; two data paths 8a,8b, each with four functional units .L1, .S1, .M1 and .D1 or .L2, .S2, .M2 and .D2); 32 32-bit registers 9; control registers 10a; control logic 10b; and test 10c, emulation 10d, and interrupt 10e logic The program fetch 7a, instruction dispatch 7b, and instruction decode 7c units can deliver up to eight 32-bit instructions from the program memory 2 to the functional units every cycle.
      <br/>
      Processing occurs in each of the two data paths (8a and 8b).
      <br/>
      Each data path 8 has four functional units (.L, .S, .M, and .D) and a register file 9a or 9b containing 16 32-bit registers.
      <br/>
      Each functional unit is controlled by a 32-bit instruction.
      <br/>
      The data paths are covered in more detail later herein.
      <br/>
      A control register file 10a provides the means to configure and control various processor operations.
      <br/>
      How instructions are fetched, dispatched, decoded, and executed in the data path are described later herein with reference to pipeline operations.
    </p>
    <p num="23">FIG. 2 shows the CPU 1 data paths, which consists of: two general purpose register files (9a and 9b); eight functional units (.L1, .L2, .S1, .S2, .M1, .M2, .D1, and .D2, ); two load-from-memory paths (LD1 and LD2); two store-to-memory paths (ST1 and ST2); and two register file cross paths (1X and 2X).</p>
    <p num="24">
      There are two general purpose register files (9a and 9b) in the data paths.
      <br/>
      Each of these files contains 16 32-bit registers (labeled A0-A15 for file A and B0-B15 for file B).
      <br/>
      The general purpose registers can be used for data, data address pointers, or as condition registers.
    </p>
    <p num="25">
      The eight functional units in the data paths can be divided into two groups of 4 (12a1-12a4 and 12b1-12b4), each of which is virtually identical for each register file.
      <br/>
      The functional units are described in Table 1 below.
    </p>
    <p num="26">
      -- TABLE 1
      <br/>
      -- Functional Units and Descriptions
      <br/>
      -- Functional Unit  Description
      <br/>
      -- .L Unit (.L1,.L2) 32/40-bit arithmetic and compare operations
      <br/>
      --                  Left most 1, 0, bit counting for 32 bits
      <br/>
      --                  Normalization count for 32 and 40 bits
      <br/>
      --                  32 bit logical operations
      <br/>
      -- .S Unit (.S1, .S2) 32-bit arithmetic operations
      <br/>
      --                  32/40 bit shifts and 32-bit bit-field operations
      <br/>
      --                  32 bit logical operations,
      <br/>
      --                  Branching
      <br/>
      --                  Constant generation
      <br/>
      --                  Register transfers to/from the control register file
      <br/>
      -- .M Unit (.M1, .M2) 16  *  16 bit multiplies
      <br/>
      -- .D Unit (.D1, .D2) 32-bit add, subtract, linear and circular address
      <br/>
      --                  calculation
    </p>
    <p num="27">
      Most data lines in the CPU 1 support 32-bit operands, and some support long (40-bit) operands.
      <br/>
      Each functional unit has its own 32-bit write port into a general-purpose register file.
      <br/>
      All units ending in 1 (for example, .L1) write to register file A and all units ending in 2 write to register file B. As depicted in FIG. 2, each functional unit has two 32-bit read ports for source operands src1 and src2.
      <br/>
      Four units (.L1, .L2, .S1, .S2) have an extra 8-bit wide port for 40-bit long writes as well as an 8-bit input for 40-bit long reads.
      <br/>
      Because each unit has its own 32-bit write port, all eight units can be used in parallel every cycle.
    </p>
    <p num="28">
      As depicted in FIG. 2, each general-purpose register file is connected to the opposite register file's functional units by the 1X and 2X paths.
      <br/>
      These paths allow the .S, .M, and, .L units from each side to access operands from either file.
    </p>
    <p num="29">
      Four units (.M1, .M2, .S1, .S2), have one 32-bit input mux selectable with either the same side register file (A for units ending in a 1 and B for units ending in a 2), or the opposite file via the cross paths (1X and 2X).
      <br/>
      The 32-bit inputs on the .L1 and .L2 units are both multiplexer ("mux") selectable via the cross paths.
    </p>
    <p num="30">
      There are two 32-bit paths for loading data from memory to the register file: one (LD1) for register file A, and one (LD2) for register file B. There are also two 32-bit paths, ST1 and ST2, for storing register values to memory from each register file.
      <br/>
      The store paths are shared with the .L and .S long read paths.
    </p>
    <p num="31">As depicted in FIG. 2, the data address paths (DA1 and DA2) coming out of the .D units allow data addresses generated from one register file to support loads and stores to memory from the other register file.</p>
    <p num="32">
      As depicted in FIG. 2, one unit (.S2) can read from and write to the control register file.
      <br/>
      Table 2 lists the control registers contained in the control register file, and briefly describes each.
      <br/>
      The control registers are described more fully later herein.
      <br/>
      Each control register is accessed by the MVC instruction; see the MVC instruction description later herein.
    </p>
    <p num="33">
      -- TABLE 2
      <br/>
      -- Control Registers
      <br/>
      -- Abbreviation Name                 Description
      <br/>
      --  Page No.
      <br/>
      -- AMR         Addressing mode      Specifies whether to use linear or
      <br/>
      --  circular 2-9
      <br/>
      --             register             addressing for one of eight registers;
      <br/>
      --  also contains
      <br/>
      --                                  sizes for circular addressing
      <br/>
      -- CSR         Control status register Contains the global interrupt enable
      <br/>
      --  bit, cache 2-11
      <br/>
      --                                  control bits, and other miscellaneous
      <br/>
      --  control and
      <br/>
      --                                  status bits
      <br/>
      -- IFR         Interrupt flag register Displays status of interrupts
      <br/>
      --  5-7
      <br/>
      -- ISR         Interrupt set register Allows you to set pending interrupts
      <br/>
      --  manually 5-8
      <br/>
      -- ICR         Interrupt clear register Allows you to clear pending interrupts
      <br/>
      --  manually 5-8
      <br/>
      -- IER         Interrupt enable register Allows enabling/disabling of
      <br/>
      --  individual interrupts 5-6
      <br/>
      -- ISTP        Interrupt service table Points to the beginning of the
      <br/>
      --  interrupt service 5-10
      <br/>
      --             pointer              table
      <br/>
      -- IRP         Interrupt return pointer Contains the address to be used to
      <br/>
      --  return from a 5-12
      <br/>
      --                                  maskable interrupt
      <br/>
      -- NRP         Nonmaskable interrupt Contains the address to be used to return
      <br/>
      --  from a 5-12
      <br/>
      --             return pointer       nonmaskable interrupt
      <br/>
      -- IN          General-purpose input Contains 32 input signals
      <br/>
      --  2-12
      <br/>
      --             register
      <br/>
      -- OUT         General-purpose output Contains 32 output signals
      <br/>
      --  2-12
      <br/>
      --             register
      <br/>
      -- PCE1        Program counter      Contains the address of the fetch packet
      <br/>
      --  that
      <br/>
      --                                  contains the execute packet in the E1
      <br/>
      --  pipeline stage
      <br/>
      -- PDATA_O     Program data out     Contains 12 output signals; used by the
      <br/>
      --  STP
      <br/>
      --                                  instruction to write to program space
    </p>
    <p num="34">
      FIG. 3 shows the addressing mode register, (AMR).
      <br/>
      Eight registers (A4-A7, B4-B7) can perform circular addressing.
      <br/>
      For each of these registers, the AMR specifies the addressing mode.
      <br/>
      A 2-bit field for each register is used to select the address modification mode: linear (the default) or circular mode.
      <br/>
      With circular addressing, the field also specifies which BK (block size) field to use for a circular buffer.
      <br/>
      In addition, the buffer must be aligned on a byte boundary equal to the block size.
      <br/>
      The mode select field encoding is shown in Table 3.
    </p>
    <p num="35">
      -- TABLE 3
      <br/>
      -- Addressing Mode Field Encoding
      <br/>
      --         Mode        Description
      <br/>
      --         00          Linear modification (default at reset)
      <br/>
      --         01          Circular addressing using the BK0 field
      <br/>
      --         10          Circular addressing using the BK1 field
      <br/>
      --         11          Reserved
    </p>
    <p num="36">
      The block size fields, BK0 and BK1, specify block sizes for circular addressing.
      <br/>
      The five bits in BK0 and BK1 specify the width.
      <br/>
      The formula for calculating the block size width is:
      <br/>
      Block size (in bytes)=2(N+1)
    </p>
    <p num="37">where N is the value in BK1 or BK0</p>
    <p num="38">Table 4 shows block size calculations for all 32 possibilities.</p>
    <p num="39">
      -- TABLE 4
      <br/>
      -- Block Size Calculations
      <br/>
      -- N                Block Size N              Block Size
      <br/>
      -- 00000            2         10000          131?072
      <br/>
      -- 00001            4         10001          262?144
      <br/>
      -- 00010            8         10010          524?288
      <br/>
      -- 00011            16        10011          1?048?576
      <br/>
      -- 00100            32        10100          2?097?152
      <br/>
      -- 00101            64        10101          4?194?304
      <br/>
      -- 00110            128       10110          8?388?608
      <br/>
      -- 00111            256       10111          16?777?216
      <br/>
      -- 01000            512       11000          33?554?432
      <br/>
      -- 01001            1?024 11001          67?108?864
      <br/>
      -- 01010            2?048 11010          134?217?728
      <br/>
      -- 01011            4?096 11011          268?435?456
      <br/>
      -- 01100            8?192 11100          536?870?912
      <br/>
      -- 01101            16?384 11101          1?073?741?824
      <br/>
      -- 01110            32?768 11110          2?147?483?648
      <br/>
      -- 01111            65?536 11111          4?294?967?296
    </p>
    <p num="40">
      The control status register (CSR), shown in FIG. 4, contains control and status bits.
      <br/>
      The function of the bit fields in the CSR are shown in Table 5.
    </p>
    <p num="41">
      -- TABLE 5
      <br/>
      -- Control Status Register: Bit Fields,
      <br/>
      -- Read/Write Status and Function
      <br/>
      -- Bit             Bit Field
      <br/>
      -- Position Width   Name      Function
      <br/>
      -- 31-24   8       CPU ID    CPU ID.
      <br/>
      Defines which CPU.
      <br/>
      -- 23-16   8       Rev ID    Revision ID.
      <br/>
      Defines silicon revision of the CPU.
      <br/>
      -- 15-10   6       PWRD      Control power down modes.
      <br/>
      The values will always
      <br/>
      --  be read as zero.
      <br/>
      -- 9       1       SAT       The saturate bit, set when any unit performs a
      <br/>
      --  saturate, can be cleared only
      <br/>
      --                           by the MVC instruction and can be set only by a
      <br/>
      --  functional unit.
      <br/>
      The set by
      <br/>
      --                           a functional unit has priority over a clear (by
      <br/>
      --  the MVC instruction) if they
      <br/>
      --                           occur on the same cycle.
      <br/>
      The saturate bit gets
      <br/>
      --  set one full cycle (1 delay slot)
      <br/>
      --                           after a saturate occurs.
      <br/>
      -- 8       1       EN        Endian bit: 1 = little endian, 0 = big endian.
      <br/>
      -- 7-5     3       PCC       Program cache control mode
      <br/>
      -- 4-2     3       DCC       Data cache control mode
      <br/>
      -- 1       1       PGIE      Previous GIE (global interrupt enable).
      <br/>
      Saves CIE
      <br/>
      --  when an interrupt is
      <br/>
      --                           taken.
      <br/>
      -- 0       1       GIE       Global interrupt enable.
      <br/>
      Enables (1) or disables
      <br/>
      --  (0) all interrupts except the
      <br/>
      --                           reset interrupt and NMI (nonmaskable interrupt).
    </p>
    <p num="42">
      A general-purpose input register (IN) depicted in FIG. 5 supports 32 general-purpose input signals, while a general-purpose output register (OUT) depicted in FIG. 6 supports 32 general-purpose output signals.
      <br/>
      The function of these signals is described later herein.
    </p>
    <p num="43">Table 6 below explains various symbols used herein.</p>
    <p num="44">
      -- TABLE 6
      <br/>
      -- Instruction Operation and Execution Notations
      <br/>
      -- Symbol    Meaning
      <br/>
      -- int       32-bit register value
      <br/>
      -- long      40-bit register value
      <br/>
      -- creg      3-bit field specifying a conditional register
      <br/>
      -- cstn      n-bit constant
      <br/>
      -- LSBn      n least significant bits
      <br/>
      -- MSBn      n most significant bits
      <br/>
      -- .RTM.     Assignment
      <br/>
      -- +    Addition
      <br/>
      -- -   Subtraction
      <br/>
      --  *    Multiplication
      <br/>
      -- +a   Perform twos-complement addition using the addressing mode
      <br/>
      --           defined by the AMR
      <br/>
      -- -a  Perform twos-complement subtraction using the addressing
      <br/>
      --           mode defined by the AMR
      <br/>
      -- and       Bitwise AND
      <br/>
      -- or        Bitwise OR
      <br/>
      -- xor       Bitwise exclusive OR
      <br/>
      -- not       Bitwise logical complement
      <br/>
      -- byy..z  Selection of bits y through z of bit string b
      <br/>
      -- &lt;&lt;  Shift left
      <br/>
      -- &gt;&gt;s Shift right with sign extension
      <br/>
      -- &gt;&gt;z Shift right with a zero fill
      <br/>
      -- x clear b,e Clear a field in x, specified by b (beginning bit) and e
      <br/>
      --  (ending
      <br/>
      --           bit)
      <br/>
      -- x exts l,r Extract and sign-extend a field in x, specified by l (shift left
      <br/>
      --           value) and r (shift right value)
      <br/>
      -- x extu l,r Extract an unsigned field in x, specified by l (shift left
      <br/>
      --  value)
      <br/>
      --           and r (shift right value)
      <br/>
      -- +s   Perform twos-complement addition and saturate the result to
      <br/>
      --           the result size, if an overflow or underflow occurs
      <br/>
      -- -s  Perform twos-complement subtraction and saturate the result
      <br/>
      --           to the result size, if an overflow or underflow occurs
      <br/>
      -- x set b,e Set field in x, to all 1s specified by b (beginning bit) and e
      <br/>
      --           (ending bit)
      <br/>
      -- abs(x)    Absolute value of x
      <br/>
      -- lmb0(x)   Leftmost 0 bit search of x
      <br/>
      -- lmb1(x)   Leftmost 1 bit search of x
      <br/>
      -- norm(x)   Leftmost nonredundant sign bit of x
      <br/>
      -- R         Any general purpose register
      <br/>
      -- cond      Check for either creg equal to zero or creg not equal to zero
      <br/>
      -- nop       No operation
    </p>
    <p num="45">Table 7 and Table 8 define the mapping between instructions and functional units.</p>
    <p num="46">
      -- TABLE 7
      <br/>
      -- Instruction to Functional Unit Mapping
      <br/>
      --      .L Unit     .M Unit   .S Unit   .D Unit
      <br/>
      --      ABS         MPY       ADD       ADD
      <br/>
      --      ADD         SMPY      ADDK      ADDA
      <br/>
      --      AND                   ADD2      LD mem
      <br/>
      --      CMPEQ                 AND       LD mem (15-bit offset)
      <br/>
      --      CMPGT                 B disp    MV
      <br/>
      --      CMPGTU                B IRP     NEG
      <br/>
      --      CMPLT                 B NRP     ST mem
      <br/>
      --      CMPLTU                B reg     ST mem (15-bit offset)
      <br/>
      --      LMBD                  CLR       SUB
      <br/>
      --      MV                    EXT       SUBA
      <br/>
      --      NEG                   EXTU      ZERO
      <br/>
      --      NORM                  MVC
      <br/>
      --      NOT                   MV
      <br/>
      --      OR                    MVK
      <br/>
      --      SADD                  MVKH
      <br/>
      --      SAT                   NEG
      <br/>
      --      SSUB                  NOT
      <br/>
      --      SUB                   OR
      <br/>
      --      SUBC                  SET
      <br/>
      --      XOR                   SHL
      <br/>
      --      ZERO                  SHR
      <br/>
      --                            SHRU
      <br/>
      --                            SSHL
      <br/>
      --                            STP?
      <br/>
      --                            SUB
      <br/>
      --                            SUB2
      <br/>
      --                            XOR
      <br/>
      --                            ZERO
    </p>
    <p num="47">
      -- TABLE 8
      <br/>
      -- Functional Unit to Instruction Mapping
      <br/>
      --                      C62xx Functional Units
      <br/>
      -- Instruction          .L Unit   .M Unit   .S Unit   .D Unit
      <br/>
      -- ABS                  n
      <br/>
      -- ADD                  n                   n         n
      <br/>
      -- ADDA                                               n
      <br/>
      -- ADDK                                     n
      <br/>
      -- ADD2                                     n
      <br/>
      -- AND                  n                   n
      <br/>
      -- B                              n
      <br/>
      -- B IRP                                     n?
      <br/>
      -- B NRP                                     n?
      <br/>
      -- B reg                                     n?
      <br/>
      -- CLR                                      n
      <br/>
      -- CMPEQ                n
      <br/>
      -- CMPGT                n
      <br/>
      -- CMPGTU               n
      <br/>
      -- CMPLT                n
      <br/>
      -- CMPLTU               n
      <br/>
      -- EXT                                      n
      <br/>
      -- EXTU                                     n
      <br/>
      -- IDLE
      <br/>
      -- LD mem                                             n
      <br/>
      -- LD mem (15-bit offset)                               n
      <br/>
      -- LMBD                 n
      <br/>
      -- MPY                            n
      <br/>
      -- MVC                                      n
      <br/>
      -- MV                   n                   n         n
      <br/>
      -- MVK                                      n
      <br/>
      -- MVKH                                     n
      <br/>
      -- NEG                  n                   n         n
      <br/>
      -- NOP
      <br/>
      -- NORM                 n
      <br/>
      -- NOT                  n                   n
      <br/>
      -- OR                   n                   n
      <br/>
      -- SADD                 n
      <br/>
      -- SAT                  n
      <br/>
      -- SET                                      n
      <br/>
      -- SHL                                      n
      <br/>
      -- SHR                                      n
      <br/>
      -- SHRU                                     n
      <br/>
      -- SMPY                           n
      <br/>
      -- SSHL                                     n
      <br/>
      -- SSUB                 n
      <br/>
      -- ST mem                                             n
      <br/>
      -- ST mem (15-bit offset)                               n
      <br/>
      -- STP                                      n
      <br/>
      -- SUB                  n                   n         n
      <br/>
      -- SUBA                                               n
      <br/>
      -- SUBC                 n
      <br/>
      -- SUB2                                     n
      <br/>
      -- SWI
      <br/>
      -- XOR                  n                   n
      <br/>
      -- ZERO                 n                   n         n
    </p>
    <p num="48">
      The general-purpose register file supports 32- and 40-bit data. 32-bit data is contained in single registers. 40-bit data is contained across two registers; the 32 LSBs of the data are stored in an even register and the 8 MSBs are stored in the 8 LSBs of the next register (which is always an odd register).
      <br/>
      There are 16 valid register pairs for 40-bit data as shown in Table 9.
      <br/>
      In assembly language syntax, the register pairs are denoted by a colon in between the register names.
      <br/>
      The odd register is specified first.
    </p>
    <p num="49">
      -- TABLE 9
      <br/>
      -- Long Register Pairs
      <br/>
      --               Register File
      <br/>
      --               A         B
      <br/>
      --               A1:A0     B1:B0
      <br/>
      --               A3:A2     B3:B2
      <br/>
      --               A5:A4     B5:B4
      <br/>
      --               A7:A6     B7:B6
      <br/>
      --               A9:A8     B9:B8
      <br/>
      --               A11:A10   B11:B10
      <br/>
      --               A13:A12   B13:B12
      <br/>
      --               A15:A14   B15:B14
    </p>
    <p num="50">
      FIG. 7 illustrates the register storage scheme for 40-bit data.
      <br/>
      Operations requiring a long input ignore the 24 MSBs of the odd register.
      <br/>
      Operations producing a long result zero-fill the 24 MSBs of the odd register.
      <br/>
      The even register is encoded in the opcode.
    </p>
    <p num="51">
      The DSP's opcode map is shown in FIGS. 8A through 8J.
      <br/>
      Refer to Table 6 and the instruction descriptions later herein for explanations of the field syntaxes and values.
    </p>
    <p num="52">
      All instructions can be conditional.
      <br/>
      The condition is controlled by a 3-bit (creg) field specifying the register tested, and a 1-bit field (z) specifying a test for zero or nonzero.
      <br/>
      The four MSBs of every opcode are creg and z. The register is tested at the beginning of the E1 pipeline stage for all instructions.
      <br/>
      The pipeline is described later herein.
      <br/>
      If z=1, the test is for equality with zero.
      <br/>
      If z=0, the test is for nonzero.
      <br/>
      The case of condition register field (creg)=0 and z=0 is treated as always true to allow instructions to be executed unconditionally.
      <br/>
      The creg register field is encoded as shown in Table 10.
    </p>
    <p num="53">
      -- TABLE 10
      <br/>
      -- Registers That Can Be Tested by Conditional Operations
      <br/>
      -- creg                         z
      <br/>
      -- 31            30   29            28   Register Tested
      <br/>
      -- 0             0    0             0    Unconditional.
      <br/>
      -- 0             0    0             1    Reserved.
      <br/>
      -- 0             0    1             z    B0
      <br/>
      -- 0             1    0             z    B1
      <br/>
      -- 0             1    1             z    B2
      <br/>
      -- 1             0    0             z    A1
      <br/>
      -- 1             0    1             z    A2
      <br/>
      -- 1             1    x             x    Reserved
      <br/>
      -- Note: x is don't care for reserved cases.
    </p>
    <p num="54">
      Conditional instructions are represented by "� �" surrounding the condition register.
      <br/>
      The following execute packet contains two ADD instructions in parallel.
      <br/>
      The first ADD is conditional on B0 being non-zero.
      <br/>
      The second ADD is conditional on B0 being zero. `�` indicates the `not` of the condition.
    </p>
    <p num="55">
      --
      <br/>
      --                 �B0�  ADD .L1       A1,A2,A3
      <br/>
      --         .parallel.   ��B0� ADD .L2       B1,B2,B3
    </p>
    <p num="56">
      The above instructions are mutually exclusive.
      <br/>
      This means that only one will execute.
    </p>
    <p num="57">If they are scheduled in parallel, mutually exclusive instructions must still follow all resource constraints mentioned later herein.</p>
    <p num="58">If mutually exclusive instructions share any resources as described later herein, they cannot be scheduled in parallel (put in the same execute packet), even though only one will end up executing.</p>
    <p num="59">
      The execution of instructions can be defined in terms of delay slots.
      <br/>
      Table 11 shows the types of instructions, how many delay slots each type instruction has, and the execute phases it uses.
      <br/>
      Delay slots are the number of extra cycles it takes before a result is available to be read after the source operands are read.
      <br/>
      For a single-cycle type instruction (such as ADD), if source operands are read in cycle i, the result can be read in cycle i+1.
      <br/>
      For a multiply instruction (MPY), if source operands are read in cycle i, the result can be read in cycle I+2.
    </p>
    <p num="60">
      -- TABLE 11
      <br/>
      -- Delay Slot Summary
      <br/>
      -- Instruction Type            Delay Slots Execute Phases Used
      <br/>
      -- Branch (The cycle when the target 5           E1- branch target E1
      <br/>
      -- enters E1)
      <br/>
      -- Load (LD) (Incoming Data)   4           E1-E5
      <br/>
      -- Load (LD) (Address Modification) 0           E1
      <br/>
      -- Multiply                    1           E1-E2
      <br/>
      -- Single-cycle                0           E1
      <br/>
      -- Store (ST) (Address modification) 0           E1
      <br/>
      -- NOP (no execution pipeline  --     --
      <br/>
      -- operation)
      <br/>
      -- STP (no CPU internal results --     --
      <br/>
      -- written)
    </p>
    <p num="61">
      Instructions are always fetched eight at a time.
      <br/>
      This constitutes a fetch packet.
      <br/>
      The basic format of a fetch packet is shown in FIG. 9.
      <br/>
      The execution grouping of the fetch packet is specified by the p-bit, bit zero, of each instruction.
      <br/>
      Fetch packets are 8-word aligned.
    </p>
    <p num="62">
      The p bit controls the parallel execution of instructions.
      <br/>
      The p bits are scanned from left to right (lower to higher address).
      <br/>
      If the p bit of instruction i is 1, then instruction i+1 is to be executed in parallel with (in the same cycle as) instruction i. If the p-bit of instruction i is 0, then instruction i+1 is executed in the cycle after instruction i. All instructions executing in parallel constitute an execute packet.
      <br/>
      An execute packet can contain up to eight instructions.
      <br/>
      All instructions in an execute packet must use a unique functional unit.
    </p>
    <p num="63">
      An execute packet cannot cross an 8-word boundary.
      <br/>
      Therefore, the last p bit in a fetch packet is always set to 0, and each fetch packet starts a new execute packet.
      <br/>
      The following examples illustrate the conversion of a p-bit sequence into a cycle-by-cycle execution stream of instructions.
      <br/>
      There are three types of p-bit patterns for fetch packets.
      <br/>
      These three p-bit patterns result in the following execution sequences for the eight instructions: fully serial; fully parallel; or partially serial.
      <br/>
      These three sequences of execution are explained more fully below.
    </p>
    <p num="64">This fully serial p-bit pattern depicted in FIG. 10A results in this execution sequence:</p>
    <p num="65">
      --
      <br/>
      --               Cycle  Instructions
      <br/>
      --               1      A
      <br/>
      --               2      B
      <br/>
      --               3      C
      <br/>
      --               4      D
      <br/>
      --               5      E
      <br/>
      --               6      F
      <br/>
      --               7      G
      <br/>
      --               8      H
    </p>
    <p num="66">The eight instructions are executed sequentially.</p>
    <p num="67">3.7.2</p>
    <p num="68">This fully parallel p-bit pattern depicted in FIG. 10B results in this execution sequence:</p>
    <p num="69">
      --
      <br/>
      -- Cycle       Instructions
      <br/>
      -- 1           A    B       C    D       E    F       G    H
    </p>
    <p num="70">All eight instructions are executed in parallel.</p>
    <p num="71">This partially serial p-bit pattern depicted in FIG. 10C results in this execution sequence:</p>
    <p num="72">
      --
      <br/>
      --           Cycle  Instructions
      <br/>
      --           1      A
      <br/>
      --           2      B
      <br/>
      --           3      C                  D    E
      <br/>
      --           4      F                  G    H
    </p>
    <p num="73">
      Note that the instructions C, D, and E do not use any of the same functional units, cross paths, or other data path resources.
      <br/>
      This is also true for instructions F, G, and H.
    </p>
    <p num="74">
      The .vertline..vertline. characters signify that an instruction is to execute in parallel with the previous instruction.
      <br/>
      In the previous partially serial example, the code would be represented as this:
    </p>
    <p num="75">
      --
      <br/>
      --                         instruction A
      <br/>
      --                         instruction B
      <br/>
      --                         instruction C
      <br/>
      -- .parallel.                   instruction D
      <br/>
      -- .parallel.                   instruction E
      <br/>
      --                         instruction F
      <br/>
      -- .parallel.                   instruction G
      <br/>
      -- .parallel.                   instruction H
    </p>
    <p num="76">
      If a branch into the middle of an execution packet occurs, all instructions at lower addresses are ignored.
      <br/>
      In the partially serial example, if a branch to the address containing instruction D occurs, then only D and E will execute.
      <br/>
      Even though instruction C is in the same execute packet, it is ignored.
      <br/>
      Instructions A and B are also ignored because they are in earlier execute packets.
    </p>
    <p num="77">
      No two instructions within the same execute packet can use the same resources.
      <br/>
      Also, no two instructions can write to the same register during the same cycle.
      <br/>
      The following describes each of the resources an instruction can use.
    </p>
    <p num="78">Two instructions using the same functional unit cannot be issued in the same execute packet.</p>
    <p num="79">
      The following execute packet is invalid:
      <br/>
      ADD .S1 A0, A1, A2;.backslash..S1 is used for
      <br/>
      .vertline..vertline.
      <br/>
      SHR .S1 A3, 15, A4; /both instructions
    </p>
    <p num="80">
      The following execute packet is valid:
      <br/>
      ADD .L1 A0, A1, A2;.backslash.Two different functional
      <br/>
      .vertline..vertline.
      <br/>
      SHR .S1 A3, 15, A4; /units are used
    </p>
    <p num="81">
      Cross Paths (1X and 2X): one unit (either a .S, .L, or .M) per data path, per execute packet, can read a source operand from its opposite register file via the cross paths (1X and 2X).
      <br/>
      For example, .S1 can read both operands from the A register file, or one operand from the B register file using the 1X cross path.
      <br/>
      This is denoted by an X following the unit name.
    </p>
    <p num="82">Two instructions using the same X cross path between register files -cannot be issued in the same execute packet since there is only one path from A to B and one path from B to A.</p>
    <p num="83">
      The following execute packet is invalid:
      <br/>
      ADD .L1X A0,B1,A1; .backslash.1X cross path is used
      <br/>
      .vertline..vertline.
      <br/>
      MPY .M1X A4,B4,A5; /for both instructions
    </p>
    <p num="84">
      The following execute packet is valid:
      <br/>
      ADD .L1X A0,B1,A1; .backslash.Instructions use the 1X and
      <br/>
      .vertline..vertline.
      <br/>
      MPY .M2X A4,B4,B2; /2X cross paths
    </p>
    <p num="85">The operand will come from a register file opposite of the destination if the x bit in the instruction field is set (as shown in the opcode map).</p>
    <p num="86">
      Loads and stores can use an address pointer from one register file while loading to or storing from the other register file.
      <br/>
      Two loads and/or stores using an address pointer from the same register file cannot be issued in the same execute packet.
    </p>
    <p num="87">
      The following execute packet is invalid:
      <br/>
      LDW .D1 *A0,A1; .backslash.Address registers from the same
      <br/>
      .vertline..vertline.
      <br/>
      LDW .D1 *A2,B2; /register file
    </p>
    <p num="88">
      The following execute packet is valid:
      <br/>
      LDW .D1 *A0,A1; .backslash.Address registers from different
      <br/>
      .vertline..vertline.
      <br/>
      LDW .D2 *B0,B2; /register files
    </p>
    <p num="89">Two loads and/or stores loading to and/or storing from the same register file cannot be issued in the same execute packet.</p>
    <p num="90">
      The following execute packet is invalid:
      <br/>
      LDW .D1 *A4,A5; .backslash.Loading to and storing from the
      <br/>
      .vertline..vertline.
      <br/>
      STW .D2 A6,*B4; /same register file
    </p>
    <p num="91">
      The following execute packet is valid:
      <br/>
      LDW .D1 *A4,B5; .backslash.Loading to, and storing from
      <br/>
      .vertline..vertline.
      <br/>
      STW .D2 A6,*B4; /different register files
    </p>
    <p num="92">
      Only one long result may be written per cycle on each side of the register file.
      <br/>
      Because the .S and .L units share a read register port for long source operands and a write register port for long results, only one may be issued per side in an execute packet.
    </p>
    <p num="93">
      The following execute packet is invalid:
      <br/>
      ADD .L1 A5:A4,A1,A3:A2; .backslash.Two long writes
      <br/>
      .vertline..vertline.
      <br/>
      SHL .S1 A8,A9,A7:A6; /on A register file
    </p>
    <p num="94">
      The following execute packet is valid:
      <br/>
      ADD .L1 A5:A4,A1,A3:A2; .backslash.One long write for
      <br/>
      .vertline..vertline.
      <br/>
      SHL .S2 B8,B9,B7:B6; /each register file
    </p>
    <p num="95">Because the .L and .S units share their long read port with the store port, operations that read a long value cannot be issued on the .L and/or .S units in the same execute packet as a store.</p>
    <p num="96">
      The following execute packet is invalid:
      <br/>
      ADD .L1 A5:A4,A1,A3:A2; .backslash.Long read operation and a
      <br/>
      .vertline..vertline.
      <br/>
      STW .D1 A8,*A9; /store
    </p>
    <p num="97">
      The following execute packet is valid:
      <br/>
      ADD .L1 A4, A1, A3:A2; .backslash.No long read with
      <br/>
      .vertline..vertline.
      <br/>
      STW .D1 A8,*A9; /with the store
    </p>
    <p num="98">
      More than four reads of the same register cannot occur on the same cycle.
      <br/>
      Conditional registers are not included in this count.
    </p>
    <p num="99">The following code sequence is invalid:</p>
    <p num="100">
      MPY .M1 A1,A1,A4; five reads of register A1
      <br/>
      .vertline..vertline.
      <br/>
      ADD .L1 A1,A1,A5
      <br/>
      .vertline..vertline.
      <br/>
      SUB .D1 A1,A2,A3
    </p>
    <p num="101">whereas this code sequence is valid:</p>
    <p num="102">
      MPY .M1 A1,A1,A4; only four reads of A1
      <br/>
      .vertline..vertline. �A1� ADD .L1 A0,A1,A5
      <br/>
      .vertline..vertline.
      <br/>
      SUB .D1 A1,A2,A3
    </p>
    <p num="103">
      Multiple writes to the same register on the same cycle can occur if instructions with different latencies writing to the same register are issued on different cycles.
      <br/>
      For example, an MPY issued on cycle i followed by an ADD on cycle i+1 cannot write to the same register since both instructions will write a result on cycle i+1.
      <br/>
      Therefore, the following code sequence is invalid:
      <br/>
      MPY .M1 A0,A1,A2
      <br/>
      ADD .L1 A4,A5,A2
    </p>
    <p num="104">
      Table 12 shows different multiple write conflicts.
      <br/>
      For example, the ADD and SUB in execute packet L1 write to the same register.
      <br/>
      This conflict is easily detectable.
    </p>
    <p num="105">
      The MPY in packet L2 and the ADD in packet L3 might both write to B2 simultaneously; however, if a branch instruction causes the execute packet after L2 to be something other than L3, this would not be a conflict.
      <br/>
      Thus, the potential conflict in L2 and L3 might not be detected by the assembler.
      <br/>
      The instructions in L4 do not constitute a write conflict because they are mutually exclusive.
      <br/>
      In contrast, because it is not obvious that the instructions in L5 are mutually exclusive, the assembler cannot determine a conflict.
      <br/>
      If the pipeline does receive commands to perform multiple writes to the same register, the result is undefined.
    </p>
    <p num="106">
      -- TABLE 12
      <br/>
      -- Examples of the Detectability of
      <br/>
      -- Write Conflicts by the Assembler
      <br/>
      -- L1:         ADD    .L2    B5,    B6,    B7;    detectable, conflict
      <br/>
      -- .vertline. .vertline.        SUB    .52    B8,    B9,    B7
      <br/>
      -- L2:         MPY    .M2    B0,    B1,    B2     ; .backslash. not detectable
      <br/>
      -- L3:         ADD    .L2    B3,    B4,    B2     ;/
      <br/>
      -- L4:  ��B0� ADD    .L2    B5,    B6,    B7     ; detectable, no conflict
      <br/>
      -- .vertline. .vertline. �B0� SUB    .S2    B8,    B9,    B7
      <br/>
      -- L5:  ��B1� ADD    .L2    B5,    B6,    B7     ; .backslash. not detectable
      <br/>
      -- .vertline. .vertline. �B0� SUB    .S2    B8,    B9;    B7     ;/
    </p>
    <p num="107">
      The addressing modes are linear, circular using BK0, and circular using BK1.
      <br/>
      The mode is specified by the addressing mode register (AMR).
    </p>
    <p num="108">
      Eight registers can perform circular addressing.
      <br/>
      A4-A7 are used by the .D1 unit and B4-B7 are used by the .D2 unit.
      <br/>
      No other units can perform circular addressing modes.
      <br/>
      For each of these registers, the AMR specifies the addressing mode.
    </p>
    <p num="109">
      LD(B)(H)(W), ST(B)(H)(W), ADDA(B)(H)(W), and SUBA(B)(H)(W) instructions all use the AMR to determine what type of address calculations are performed for these registers.
      <br/>
      All registers can perform linear mode addressing.
    </p>
    <p num="110">LD/ST Instructions: linear mode simply shifts the offsetR/cst operand to the left by 2, 1, or 0 for word, half-word, or byte access respectively and then performs an add or subtract to baseR, (depending on the operation specified).</p>
    <p num="111">ADDA/SUBA Instructions: linear mode simply shifts src1/cst operand to the left by 2, 1, or 0 for word, halfword, or byte access respectively and then performs an add or subtract, (depending on the operation specified).</p>
    <p num="112">The BK0 and BK1 fields in the AMR specify block sizes for circular addressing.</p>
    <p num="113">
      LD/ST Instructions: after shifting offsetR/cst to the left by 2, 1, or 0 for LDW, LDH, or LDB respectively, an add or subtract is performed with the carry/borrow inhibited between bits N and N+1.
      <br/>
      Bits N+1 to 31 of baseR remain unchanged.
      <br/>
      All other carries/borrows propagate as usual.
      <br/>
      Thus, if an offsetR/cst is greater than the circular buffer size, 2(N+1), is specified, the address will be outside of the circular buffer.
      <br/>
      The circular buffer size in the AMR is not scaled; for example: a size of 4 is 4 bytes, not 4 * size of (type).
      <br/>
      So, to perform circular addressing on an array of 8 words, a size of 32 should be specified, or N=4.
      <br/>
      Table 13 shows an LDW performed with register A4 in circular mode, with BK0=4, so the buffer size is 32 bytes, 16 halfwords, or 8 words.
      <br/>
      The value put in the AMR for this example is 0004 0001h.
    </p>
    <p num="114">
      -- TABLE 13
      <br/>
      -- LDW in Circular Mode
      <br/>
      --   (Chemical Structure image '1' not included in text)
      <br/>
      -- Note:
      <br/>
      -- 9h words is 24h bytes. 24h bytes is 4 bytes beyond the 32 (20h) byte
      <br/>
      --  boundary 100h-11Fh, thus it is wrapped around to 104h.
    </p>
    <p num="115">
      ADDA/SUBA Instructions: after shifting src1/cst to the left by 2, 1, or 0 for ADDAW, ADDAH, or ADDAB respectively, an add or subtract is performed with the carry/borrow inhibited between bits N and N+1.
      <br/>
      Bits N+1 to 31, inclusive, of src2 remain unchanged.
      <br/>
      All other carries/borrows propagate as usual.
      <br/>
      Thus, if src1 is greater than the circular buffer size, 2(N+1), is specified, the address will be outside of the circular buffer.
      <br/>
      The circular buffer size in the AMR is not scaled, for example: a size of 4 is 4 bytes, not 4 * size of (type).
      <br/>
      So, to perform circular addressing on an array of 8 words, a size of 32 should be specified, or N=4.
      <br/>
      Table 14 shows an ADDAH performed with register A4 in circular mode, with BK0=4, so the buffer size is 32 bytes, 16 halfwords, or 8 words.
      <br/>
      The value put in the AMR for this example is 0004 0001 h.
    </p>
    <p num="116">
      -- TABLE 14
      <br/>
      -- ADDAH in Circular Mode
      <br/>
      --   (Chemical Structure image '2' not included in text)
      <br/>
      -- Note:
      <br/>
      -- 13h halfwords is 26h bytes. 26h bytes is 6 bytes beyond the 32 (20h) byte
      <br/>
      --  boundary 100h-11Fh, thus it is wrapped around to 106h.
    </p>
    <p num="117">
      This following provides detailed information on the instruction set for the DSP 11.
      <br/>
      Each instruction presents the following information:
      <br/>
      Assembler syntax
      <br/>
      Functional units
      <br/>
      Operands
      <br/>
      Opcode
      <br/>
      Description
      <br/>
      Execution
      <br/>
      Instruction type
      <br/>
      Delay slots
      <br/>
      Examples
    </p>
    <p num="118">Syntax EXAMPLE (.unit) src,</p>
    <p num="119">
      This is what the syntax looks like for the ADD instruction:
      <br/>
      ADD (.unit) src1, src2, dst
      <br/>
      OR
      <br/>
      ADDU (.unit) src1, src2, dst
      <br/>
      OR
      <br/>
      ADD (.unit) src2, src1, dst
      <br/>
      unit=.L1, .L2, .S1, .S2, .D1, .D2
    </p>
    <p num="120">
      src and dst indicate source and destination respectively.
      <br/>
      The (.unit) dictates which functional unit the instruction is mapped to (.L1, .L2, .S1, .S2, .M1, .M2, .D1, or .D2).
    </p>
    <p num="121">A table is provided for each instruction that gives the opcode map fields, units the instruction is mapped to, operands, and the opcode.</p>
    <p num="122">The opcode map breaks down the various bit fields that make up each instruction.</p>
    <p num="123">
      There are certain instructions that can be executed on more than one functional unit.
      <br/>
      Table 100 shows how this is documented for the ADD instruction.
      <br/>
      This instruction has three opcode map fields: src1, src2, and dst.
      <br/>
      In the seventh row, the operands have the types cst5, long, and long for src1, src2, and dst, respectively.
      <br/>
      The ordering of these fields implies: cst5+long3 long, where `+` represents the operation being performed by the ADD.
      <br/>
      This operation can be done on the .L1 or .L2 (since .L1 and .L2 are specified in the unit column).
      <br/>
      The `s` in front of each operand signifies that src1 (scst5), src2 (slong), and dst (slong) are all signed values.
    </p>
    <p num="124">
      In the third row, src1, src2, and dst are int, int, and long respectively.
      <br/>
      The `u` in front of each operand signifies that all operands are unsigned.
      <br/>
      Any operand that begins with `x` can be read from a register file which is different from the destination register file.
      <br/>
      The operand will come from the register file opposite of the destination if the x bit in the instruction field is set (shown in the opcode map).
    </p>
    <p num="125">
      The DSP pipeline has several key features which improve performance, decrease cost, and simplify programming.
      <br/>
      They are: increased pipelining eliminates traditional architectural bottlenecks in program fetch, data access, and multiply operations; control of the pipeline is simplified by eliminating pipeline interlocks; the pipeline can dispatch eight parallel instructions every cycle; parallel instructions proceed simultaneously through the same pipeline phases; sequential instructions proceed with the same relative pipeline phase difference; and load and store addresses appear on the CPU boundary during the same pipeline phase, eliminating read-after-write memory conflicts.
    </p>
    <p num="126">
      A multi-stage memory pipeline is present for both data accesses and program fetches.
      <br/>
      This allows use of high-speed synchronous memories both on-chip and off-chip, and allows infinitely nestable zero-overhead looping with branches in parallel with other instructions.
    </p>
    <p num="127">
      There are no internal interlocks in the execution cycles of the pipeline, so a new execute packet enters execution every CPU cycle.
      <br/>
      Therefore, the number of CPU cycles for a particular algorithm with particular input data is fixed.
      <br/>
      If during program execution, there are no memory stalls, the number of CPU cycles equals the number of clock cycles for a program to execute.
    </p>
    <p num="128">
      Performance can be inhibited only by stalls from the memory subsystems or interrupts.
      <br/>
      The reasons for memory stalls are determined by the memory architecture.
      <br/>
      To fully understand how to optimize a program for speed, the sequence of program fetch, data store, and data load requests the program makes, and how they might stall the CPU should be understood.
    </p>
    <p num="129">
      The pipeline operation, from a functional point of view, is based on CPU cycles.
      <br/>
      A CPU cycle is the period during which a particular execute packet is in a particular pipeline stage.
      <br/>
      CPU cycle boundaries always occur at clock cycle boundaries; however, memory stalls can cause CPU cycles to extend over multiple clock cycles.
      <br/>
      To understand the machine state at CPU cycle boundaries, one must be concerned only with the execution phases (E1-E5) of the pipeline.
      <br/>
      The phases of the pipeline are shown in FIG. 11 and described in Table 15.
    </p>
    <p num="130">
      -- TABLE 15
      <br/>
      -- Pipeline Phase Description
      <br/>
      --
      <br/>
      --  Instruction
      <br/>
      --
      <br/>
      --  Types
      <br/>
      -- Pipeline  Pipeline Phase Symbol  During This Phase
      <br/>
      --  Completed
      <br/>
      -- Program   Program Address PG      Address of the fetch packet is
      <br/>
      --  determined.
      <br/>
      -- Fetch     Generate
      <br/>
      --           Program Address PS      Address of fetch packet is sent to
      <br/>
      --  memory.
      <br/>
      --           Send
      <br/>
      --           Program Wait   PW      Program memory access is performed.
      <br/>
      --           Program Data   PR      Fetch packet is executed at CPU boundary.
      <br/>
      --           Receive
      <br/>
      -- Program   Dispatch       DP      Next execute packet in fetch packet
      <br/>
      --  determined
      <br/>
      -- Decode                           and sent to the appropriate functional
      <br/>
      --  unite to
      <br/>
      --                                  be decoded.
      <br/>
      --           Decode         DC      Instructions are decoded at functional
      <br/>
      --  units.
      <br/>
      -- Execute   Execute 1      E1      For all instruction types, conditions for
      <br/>
      --  Single-cycle
      <br/>
      --                                  instructions are evaluated and operands
      <br/>
      --  read.
      <br/>
      --                                  Load and store instructions: Address
      <br/>
      --  generation
      <br/>
      --                                  is computed and address modifications
      <br/>
      --  written
      <br/>
      --                                  to register file?
      <br/>
      --                                  Branch instructions: affects branch fetch
      <br/>
      --  packet
      <br/>
      --                                  in PG phase?
      <br/>
      --                                  Single-cycle instructions: results are
      <br/>
      --  written to
      <br/>
      --                                  a register file?
      <br/>
      --           Execute 2      E2      Load instructions: address is sent to
      <br/>
      --  memory?  Stores
      <br/>
      --                                  Store instructions and STP: address and
      <br/>
      --  data STP
      <br/>
      --                                  are sent to memory?
      <br/>
      --                                  Single-cycle instructions that saturate
      <br/>
      --  results Multiplies
      <br/>
      --                                  set the SAT bit in the Control Status
      <br/>
      --  Register
      <br/>
      --                                  (CSR) if saturation occurs.?
      <br/>
      --                                  Multiply instructions: results are written
      <br/>
      --  to a
      <br/>
      --                                  register file?
      <br/>
      --           Execute 3      E3      Data memory accesses are performed.
      <br/>
      Any
      <br/>
      --                                  multiply instruction that saturates
      <br/>
      --  results sets
      <br/>
      --                                  the SAT bit in the Control Status Register
      <br/>
      --  (CSR)
      <br/>
      --                                  if saturation occurs.?
      <br/>
      --           Execute 4      E4      Load instructions: data is brought to CPU
      <br/>
      --                                  boundary?
      <br/>
      --           Execute 5      E5      Load instructions: data is loaded into
      <br/>
      --  register?  Loads
      <br/>
      -- This assumes that the conditions for the instructions are evaluated as
      <br/>
      --  true.
      <br/>
      If the condition is evaluated as false, the instruction will not
      <br/>
      --  write any results or have any pipeline operation after E1.
    </p>
    <p num="131">
      The pipeline operation of the instructions can be categorized into seven types shown in Table 16.
      <br/>
      The delay slots for each instruction type are listed in the second column.
    </p>
    <p num="132">
      -- TABLE 16
      <br/>
      -- Delay Slot Summary
      <br/>
      -- Instruction Type            Delay Slots Execute Stages Used
      <br/>
      -- Branch (The cycle when the target 5           E1 - branch target E1
      <br/>
      -- enters E1)
      <br/>
      -- Load (LD) (Incoming Data)   4           E1-E5
      <br/>
      -- Load (LD) (Address Modification) 0           E1
      <br/>
      -- Multiply                    1           E1-E2
      <br/>
      -- Single-cycle                0           E1
      <br/>
      -- Store                       0           E1
      <br/>
      -- NOP (no execution pipeline  --     --
      <br/>
      -- operation)
      <br/>
      -- STP (no CPU internal results --     --
      <br/>
      -- written)
    </p>
    <p num="133">
      The execution of instructions can be defined in terms of delay slots (Table 16).
      <br/>
      A delay slot is a CPU cycle that occurs after the first execution phase (E1) of an instruction in which results from the instruction are not available.
      <br/>
      For example, a multiply instruction has 1 delay slot, this means that there is 1 CPU cycle before another instruction can use the results from the multiply instruction.
    </p>
    <p num="134">
      Single cycle instructions execute during the E1 phase of the pipeline.
      <br/>
      The operand is read, operation is performed and the results are written to a register all during E1.
      <br/>
      These instructions have no delay slots.
    </p>
    <p num="135">
      Multiply instructions complete their operations during the E2 phase of the pipeline.
      <br/>
      In the E1 phase, the operand is read and the multiply begins.
      <br/>
      In the E2 phase, the multiply finishes, and the result is written to the destination (dst) register.
      <br/>
      Multiply instructions have 1 delay slot.
    </p>
    <p num="136">Load instructions have two results: data loaded from memory and address pointer modification.</p>
    <p num="137">
      Data loads complete their operations during the E5 phase of the pipeline.
      <br/>
      In the E1 phase, the address of the data is computed.
      <br/>
      In the E2 phase, the data address is sent to data memory.
      <br/>
      In the E3 phase, a memory read is performed.
      <br/>
      In the E4 stage, the data is received at the CPU core boundary.
      <br/>
      Finally, in the E5 phase, the data is loaded into a register.
      <br/>
      Because data is not written to the register until E5, these instructions have 4 delay slots.
      <br/>
      Because pointer results are written to the register in E1, there are no delay slots associated with the address modification.
    </p>
    <p num="138">
      Store instructions complete their operations during the E3 phase of the pipeline.
      <br/>
      In the E1 phase, the address of the data is computed.
      <br/>
      In the E2 phase, the data address is sent to data memory.
      <br/>
      In the E3 phase, a memory write is performed.
      <br/>
      The address modification is performed in the E1 stage of the pipeline.
      <br/>
      Even though stores finish their execution in the E3 phase of the pipeline, they have no delay slots and follow the following rules (i=cycle):
      <br/>
      When a load is executed before a store, the old value is loaded and the new value is stored.
      <br/>
      i LDW
      <br/>
      i+1 STW
      <br/>
      When a store is executed before a load, the new value is stored and the new value is loaded.
      <br/>
      i STW
      <br/>
      i+1 LDW
      <br/>
      When the instructions are in are in parallel, the old value is loaded and the new value is stored.
      <br/>
      i STW
      <br/>
      i+1 .vertline..vertline.
      <br/>
      LDW
    </p>
    <p num="139">
      Branch instructions execute during the E1 phase of the pipeline five delay slots/CPU cycles after the branch instruction enters an initial E1 phase of the pipeline.
      <br/>
      FIG. 12 shows the branch instruction phases.
      <br/>
      FIG. 13 shows the operation of the pipeline based on clock cycles and fetch packets.
      <br/>
      In FIG. 13, if a branch is in fetch packet n, then the E1 phase of the branch is the PG phase of n+6.
      <br/>
      In cycle 7 n is in the E1 phase and n+6 is in the PG phase.
      <br/>
      Because the branch target is in PG on cycle 7, it will not reach E1 until cycle 13.
      <br/>
      Thus, it appears as if the branch takes six cycles to execute, or has five delay slots.
    </p>
    <p num="140">
      In FIG. 14, fetch packet n, which contains three execute packets, is shown followed by six fetch packets (n+1 through n+6), each with one execution packet (containing 8 parallel instructions).
      <br/>
      The first fetch packet (n) goes through the program fetch phases during cycles 1-4.
      <br/>
      During these cycles a program fetch phase is started for each of the following fetch packets.
    </p>
    <p num="141">
      In cycle 5, the program dispatch (DP) phase, the CPU scans the p bits and detects that there are three execute packets (k through k+2) in fetch packet n. This forces the pipeline to stall, which allows the DP phase to start execute packets k+1 and k+2 in cycles 6 and 7.
      <br/>
      Once execute packet k+2 is ready to move on to the DC phase (cycle 8) the pipeline stall is released.
    </p>
    <p num="142">
      The fetch packets n+1 through n+4 were all stalled so the CPU would have time to perform the DP phase for each of the three execute packets (k through k+2) in fetch packet n. Fetch packet n+5 was also stalled in cycles 6 and 7; it was not allowed to enter the PG phase until after the pipeline stall was released in cycle 8.
      <br/>
      The pipeline will continue as shown with fetch packets n+5 and n+6 until another fetch packet containing multiple execution
    </p>
    <p num="143">
      The CPU has 14 interrupts available.
      <br/>
      These are reset, the non-maskable interrupt (NMI), and interrupts 4-15.
      <br/>
      These interrupts correspond to the RESET, NMI, and INT4-INT15 signals on the CPU boundary.
      <br/>
      For some embodiments, these signals may be tied directly to pins on the device, may be connected to on-chip peripherals, or may be disabled by being permanently tied inactive on chip.
      <br/>
      Generally, RESET and NMI are directly connected to pins on the device.
    </p>
    <p num="144">
      The priorities of these interrupts are listed in Table 17.
      <br/>
      A low-to-high transition on an interrupt pin sets the pending status of the interrupt within the interrupt flag register (IFR).
      <br/>
      If the interrupt is properly enabled, the CPU begins processing the interrupt and redirecting program flow to the interrupt service routine.
    </p>
    <p num="145">
      -- TABLE 17
      <br/>
      -- Interrupt Priorities
      <br/>
      --             Priority              Interrupt Name
      <br/>
      --             Highest               RESET
      <br/>
      --                                   NMI
      <br/>
      --                                   INT4
      <br/>
      --                                   INT5
      <br/>
      --                                   INT6
      <br/>
      --                                   INT7
      <br/>
      --                                   INT8
      <br/>
      --                                   INT9
      <br/>
      --                                   INT10
      <br/>
      --                                   INT11
      <br/>
      --                                   INT12
      <br/>
      --                                   INT13
      <br/>
      --                                   INT14
      <br/>
      --             Lowest Priority       INT15
    </p>
    <p num="146">
      The CPU cannot be prevented from processing a reset.
      <br/>
      A reset begins to be processed when RESET experiences a low-to-high transition.
      <br/>
      Unlike the other interrupts, the RESET signal is labeled active-low.
      <br/>
      A low value on RESET has the effect of stopping all CPU processing and returning all registers to their reset values.
    </p>
    <p num="147">
      The non-maskable interrupt (NMI) is the interrupt of second-highest priority.
      <br/>
      Two conditions prevent NMI from causing interrupt processing: the CPU is in the delay slots of a branch, whether the branch is taken or not; and the NMI-enable bit (NMIE) in the interrupt enable register (IER) is 0.
      <br/>
      NMIE is cleared upon reset to prevent interruption of processor initialization and upon NMI processing to prevent reinterruption of an NMI by another NMI.
      <br/>
      NMI is reenabled by setting NMIE or by completing the execution of a B NRP instruction.
    </p>
    <p num="148">
      If NMIE is 0, INT4-INT15 are disabled.
      <br/>
      During NMI processing the return pointer, which continues previous program execution, is stored in the NMI return pointer register (NRP).
      <br/>
      Thus, the B NRP instruction returns to the previous program flow after servicing the NMI.
      <br/>
      Table 18 shows how to return from an NMI.
    </p>
    <p num="149">
      -- TABLE 18
      <br/>
      -- Return from NMI
      <br/>
      --   (Chemical Structure image '3' not included in text)
    </p>
    <p num="150">The following conditions can prevent INT4-INT15 from causing interrupt processing: the CPU is processing code which resides in the delay slots of a branch and this includes conditional branches that do not complete execution due to a false condition; the NMIE bit in the interrupt enable register (IER) is 0; the corresponding interrupt enable (IE) bit in the IER is 0; or the global interrupt enable bit (GIE) bit in the control status register (CSR) is 0.</p>
    <p num="151">
      During interrupt processing the return pointer, which continues previous program execution, is stored in the interrupt return pointer register (IRP).
      <br/>
      Thus, the B IRP instruction returns to the program flow after servicing the interrupt.
      <br/>
      Table 19 shows how to return from a maskable interrupt.
    </p>
    <p num="152">
      -- TABLE 19
      <br/>
      -- Return from a Maskable Interrupt
      <br/>
      --   (Chemical Structure image '4' not included in text)
    </p>
    <p num="153">
      The IACK and INUM signals alert hardware, external to the device 11, when interupts have taken place.
      <br/>
      The IACK signals indicates that the CPU has begun processing an interrupt.
      <br/>
      The INUMx signals (INUM0-INUM3) indicate the number if the interrupt (bit position in th IFR) that is being processed.
    </p>
    <p num="154">
      -- TABLE 20
      <br/>
      -- Interrupt Control Registers
      <br/>
      --
      <br/>
      --  Register
      <br/>
      -- Abbreviations Name                 Description
      <br/>
      --  Address
      <br/>
      -- IFR           Interrupt flag register Status of interrupts
      <br/>
      --  00010
      <br/>
      -- ISR           Interrupt set register Allows you to set flags in the IFR
      <br/>
      --  manually. 00010
      <br/>
      -- ICR           Interrupt clear register Allows you to clear flags in the IFR
      <br/>
      --  manually. 00011
      <br/>
      -- IER           Interrupt enable register Allows you to enable interrupts.
      <br/>
      --    00100
      <br/>
      -- ISTP          Interrupt service table Pointer to the beginning of the
      <br/>
      --  interrupt service 00101
      <br/>
      --               pointer              table.
      <br/>
      -- IRP           Interrupt return pointer Contains the return address used on
      <br/>
      --  return from a 00110
      <br/>
      --                                    maskable interrupt.
      <br/>
      This return is
      <br/>
      --  accomplished
      <br/>
      --                                    via the B IRP instruction.
      <br/>
      -- NRP           Nonmaskable interrupt Contains the return address used on
      <br/>
      --  return from a 00111
      <br/>
      --               return pointer       nonmaskable interrupt.
      <br/>
      This return is
      <br/>
      --                                    accomplished via the B NRP instruction.
    </p>
    <p num="155">
      The IFR and the ISR share a register address.
      <br/>
      The IFR can be read from, and the ISR can be written to.
      <br/>
      The other registers have unique addresses.
    </p>
    <p num="156">
      The global interrupt enable (GIE) allows enabling or disabling maskable interrupts by controlling the value of a bit.
      <br/>
      GIE is bit 0 of the control status register (CSR).
    </p>
    <p num="157">GIE=1 enables the maskable interrupts so that they are processed.</p>
    <p num="158">GIE=0 disables the maskable interrupts so that they are not processed.</p>
    <p num="159">
      Bit 1 of the CSR is PGIE, the previous GIE.
      <br/>
      During processing of a maskable interrupt, PGIE is loaded with the GIE and GIE is cleared.
      <br/>
      The GIE bit is cleared during a maskable interrupt to keep another maskable interrupt from occurring before the device state has been saved.
      <br/>
      Upon return from an interrupt, by way of the B IRP instruction, the PGIE value is copied back to the GIE (in the CSR) and remains unchanged.
      <br/>
      The purpose of the PGIE is to allow proper clearing of the GIE while an interrupt has already been detected for processing.
    </p>
    <p num="160">
      Suppose the CPU begins processing an interrupt.
      <br/>
      Just as the interrupt is beginning to be processed, the GIE is being cleared by writing a 0 to bit 0 of the CSR with the MVC instruction.
      <br/>
      The GIE is cleared by the MVC instruction prior to being copied to the PGIE.
      <br/>
      Upon returning from the interrupt the PGIE is copied back to the GIE, resulting in the GIE being cleared as directed by the code.
    </p>
    <p num="161">Table 21 shows how to disable interrupts and Table 22 shows how to enable interrupts.</p>
    <p num="162">
      -- TABLE 21
      <br/>
      -- Code Sequence to Disable Interrupts
      <br/>
      --   (Chemical Structure image '5' not included in text)
    </p>
    <p num="163">
      -- TABLE 22
      <br/>
      -- Code Sequence to Enable Interrupts
      <br/>
      --   (Chemical Structure image '6' not included in text)
    </p>
    <p num="164">
      An interrupt can trigger interrupt processing only if the corresponding bit in the Interrupt Enable Register (IER) is set.
      <br/>
      Bit 0, corresponding to reset, is not writable and is always read as 1.
      <br/>
      The RESET interrupt is always enabled.
      <br/>
      RESET cannot be disabled.
      <br/>
      Bits IE4-IE15 may be written as 1 or 0, enabling or disabling the associated interrupt, respectively.
      <br/>
      The IER is shown in FIG. 15.
    </p>
    <p num="165">
      The NMIE, if clear, disables all nonreset interrupts, preventing interruption of NMI.
      <br/>
      The NMI enable (NMIE) is unaffected by a write of 0 but is set by a write of 1.
      <br/>
      NMIE is initialized to 0 upon reset to prevent any interruption of processor initialization until enabled by you.
      <br/>
      After reset, you must set NMIE to enable NMI and to allow INT15-INT4 to be enabled by GIE and the appropriate IE bit.
      <br/>
      You cannot manually clear the NMIE.
      <br/>
      The NMIE is cleared by the occurrence of an NMI.
      <br/>
      If cleared, NMIE is set only by completing a B NRP instruction or by a write of 1 to NMIE.
    </p>
    <p num="166">
      The interrupt flag register (IFR) (see FIG. 16) contains the status of INT4-INT15 and NMI.
      <br/>
      Table 23 lists the interrupt flags and the interrupts they correspond to.
      <br/>
      If you want to check the status of interrupts, use the MVC instruction to read the IFR.
    </p>
    <p num="167">
      -- TABLE 23
      <br/>
      -- Interrupt Flag Bits
      <br/>
      --      Interrupt Description
      <br/>
      --      NMIF      Set by NMI
      <br/>
      --      IF15-IF4  Set by the respective interrupt (INT15-INT4)
    </p>
    <p num="168">
      The interrupt set register (ISR) and the interrupt clear register (ICR) (see FIG. 17 and FIG. 18) allow you to set or clear interrupts manually in the IFR.
      <br/>
      Writing a 1 to IS4-IS15 of the ISR causes the corresponding interrupt flag to be set.
      <br/>
      Similarly, writing a 1 to a bit of the ICR causes the corresponding interrupt flag to be cleared.
      <br/>
      Writing a 0 to any bit of either the ISR or the ICR has no effect.
      <br/>
      Incoming interrupts have priority and override any write to the ICR.
      <br/>
      You cannot set or clear reset or NMI.
      <br/>
      Any write to the ISR or ICR (by the MVC instruction) effectively has one delay slot because the results cannot be read (by the MVC instruction) in the IFR until 2 cycles after the write to the ISR or ICR.
    </p>
    <p num="169">
      An interrupt service fetch package (ISFP) is a fetch packet used to service interrupts.
      <br/>
      If the eight instructions in the ISFP are insufficient, the program must branch out of this block for additional interrupt service.
      <br/>
      If the delay slots of the branch do not reside within the ISFP, execution continues from execute packets in the next fetch packet.
    </p>
    <p num="170">
      The interrupt service table (IST) is 16 contiguous ISFPs, most corresponding to an interrupt in the IFR.
      <br/>
      The IST must be aligned on a 256-word boundary (32 fetch packets * 8 words/fetch packet).
      <br/>
      Although only 16 interrupts are defined, space in the IST is reserved for 32 for possible future expansion.
      <br/>
      The IST resides in memory accessible by the program fetch.
    </p>
    <p num="171">
      The contents and addresses of the IST are shown in Table 24.
      <br/>
      Because each fetch packet contains eight 32 bit instruction words (or 32 bytes) you will notice that each address in the table below is incremented by 32 bytes from the one below it.
    </p>
    <p num="172">
      -- TABLE 24
      <br/>
      -- Interrupt Service Table
      <br/>
      --             Interrupt             ISFP Address
      <br/>
      --             RESET                 0x000
      <br/>
      --             NMI                   ISTB + 0x020
      <br/>
      --             Reserved              ISTB + 0x040
      <br/>
      --             Reserved              ISTB + 0x060
      <br/>
      --             INT4                  ISTB + 0x080
      <br/>
      --             INT5                  ISTB + 0x0A0
      <br/>
      --             INT6                  ISTB + 0x0C0
      <br/>
      --             INT7                  ISTB + 0x0E0
      <br/>
      --             INT8                  ISTB + 0x100
      <br/>
      --             INT9                  ISTB + 0x120
      <br/>
      --             INT10                 ISTB + 0x140
      <br/>
      --             INT11                 ISTB + 0x160
      <br/>
      --             INT12                 ISTB + 0x180
      <br/>
      --             INT13                 ISTB + 0x1A0
      <br/>
      --             INT14                 ISTB + 0x1C0
      <br/>
      --             INT15                 ISTB + 0x1E0
    </p>
    <p num="173">
      The RESET fetch packet must be located at address zero but the rest of the Interrupt Service Table can be at any program memory location as long as it begins on a 256 word boundary.
      <br/>
      The location of the Interrupt Service Table is determined by the Interrupt Service Table Base (ISTB).
      <br/>
      FIG. 19 shows the relationship of the ISTB to the table location.
      <br/>
      The ISTB is contained in the upper bit field of the Interrupt Service Table Pointer (ISTP) register.
      <br/>
      This register is not only used to point to the Interrupt Service Table but it can be used to determine the highest priority pending interrupt that is enabled in the Interrupt Enable Register.
    </p>
    <p num="174">
      FIG. 19 shows the bit fields of the ISTP.
      <br/>
      Table 25 describes the bit fields of the ISTP and how they are used.
      <br/>
      Table 24 is an interrupt service table showing the address of each ISFP in the IST.
      <br/>
      The ISTP is used as the branch target for interrupt processing.
      <br/>
      It can also be used when interrupts are disabled to point to the location of the ISFP of the highest priority interrupt whose interrupt flag is set and IE bit is set.
    </p>
    <p num="175">
      -- TABLE 25
      <br/>
      -- ISTP Bit Fields
      <br/>
      -- Bits    Name      Description
      <br/>
      -- 0-4               Set to 0 because fetch packets must be aligned on 8-word
      <br/>
      --  (32-byte) boundaries
      <br/>
      -- 5-9     HPEINT    Highest priority IE-enabled interrupt.
      <br/>
      The number
      <br/>
      --  (related bit-position in the IFR) of
      <br/>
      --                   the highest priority interrupt (as defined in Table 5-1)
      <br/>
      --  that is enabled by its bit in the
      <br/>
      --                   IER.
      <br/>
      Thus, the ISTP can be used for manual branches to
      <br/>
      --  the highest priority enabled
      <br/>
      --                   interrupt.
      <br/>
      If no interrupt is pending and enabled, the
      <br/>
      --  HPEINT contains the value 0000b.
      <br/>
      --                   The corresponding interrupt does not have to be enabled
      <br/>
      --  by NMIE (unless it is NMI) or by
      <br/>
      --                   GIE.
      <br/>
      --                   If the IFR contained 0xABC0 (1010 1011 1100 0000b), and
      <br/>
      --  the IER contained 0x1230
      <br/>
      --                   (0001 0010 0011 0001b), the value of HPEINT would be
      <br/>
      --  01001 representing bit 9.
      <br/>
      Thus,
      <br/>
      --                   the ISTP would contain ISTB + 01001 00000b or ISTB +
      <br/>
      --  0x120
      <br/>
      -- 10-31   ISTB      Interrupt service table base.
      <br/>
      The location of the ISFP in
      <br/>
      --  the IST.
      <br/>
      This value is set to 0 on
      <br/>
      --                   reset.
      <br/>
      Thus, upon startup the IST must reside at address
      <br/>
      --  0.
      <br/>
      After reset, you can relocate
      <br/>
      --                   the IST by writing a new value to ISTB.
      <br/>
      If relocated, the
      <br/>
      --  first ISFP (corresponding to
      <br/>
      --                   RESET) is never executed via interrupt processing,
      <br/>
      --  because reset sets the ISTB to 0.
    </p>
    <p num="176">The IFR and IER may be polled to manually detect interrupts and then branch to the value held in the ISTP as shown below in Table 26.</p>
    <p num="177">
      -- TABLE 26
      <br/>
      -- Manual Interrupt Processing
      <br/>
      --   (Chemical Structure image '7' not included in text)
    </p>
    <p num="178">
      After completion of interrupt service, a branch to the IRP or NRP registers (using the B IRP or B NRP instructions, respectively) continues the previous program flow.
      <br/>
      The IRP contains the 32-bit address of the first execute packet in the program flow that was not executed because of a maskable interrupt.
      <br/>
      The NRP contains this packet for an NMI.
      <br/>
      Although a value may be written to this register, any subsequent interrupt processing may overwrite that value.
      <br/>
      An NRP distinct from IRP is necessary because an NMI may interrupt a maskable interrupt.
      <br/>
      FIG. 20 shows the IRP and FIG. 21 shows the NRP.
    </p>
    <p num="179">
      FIG. 22 shows the processing of interrupt m (INTm).
      <br/>
      The following describes this figure and the processing of INTm.
    </p>
    <p num="180">
      The flag for INTm (IFm) is set in the IFR by the low-to-high transition of the INTm signal on the CPU boundary.
      <br/>
      These transitions are detected on a clock-cycle-by-clock-cycle basis and are not affected by memory stalls that might extend a CPU cycle.
      <br/>
      In FIG. 22, IFm is set during CPU cycle 5.
      <br/>
      One could attempt to clear bit IFm by using an MVC instruction to write a 1 to bit m of the ICR in execute packet n+3 (during CPU cycle 3).
      <br/>
      However, in this case, the automated write by the interrupt detection logic takes precedence and IFm remains set.
    </p>
    <p num="181">
      FIG. 22 assumes INTm is the highest priority pending interrupt and is enabled by GIE and NMIE as necessary.
      <br/>
      If it is not, IFm remains set until you either clear it by writing a 1 to bit m of the ICR, or when the processing of INTM occurs.
    </p>
    <p num="182">
      In CPU cycle 4 of FIG. 22, an interrupt in need of processing is detected.
      <br/>
      For this interrupt to be processed, the following conditions must be valid on the same clock cycle and are evaluated every clock cycle:
    </p>
    <p num="183">IFm is set during CPU cycle 5. (This determination is made in CPU cycle 4 by the interrupt logic.)</p>
    <p num="184">The corresponding bit in the IER is set (IEm=1).</p>
    <p num="185">For all maskable interrupts, GIE=1.</p>
    <p num="186">For all nonreset interrupts, NMIE =1</p>
    <p num="187">For all nonreset interrupts, the five previous execute packets (n through n+4) do not contain a branch (even if the branch is not taken).</p>
    <p num="188">
      Interrupts can be detected, but not taken, during the delay slots of a branch.
      <br/>
      Any pending interrupt will be taken as soon as pending branches are completed.
    </p>
    <p num="189">During CPU cycles 5-11 of FIG. 22, the following interrupt processing occurs:</p>
    <p num="190">Interrupt processing of subsequent nonreset interrupts is disabled.</p>
    <p num="191">
      The next execute packets (from n+5 on) are annulled.
      <br/>
      If an execute packet is annulled during a particular pipeline stage, it does not modify any CPU state.
      <br/>
      Annulling also forces an instruction to be annulled in future pipeline stages.
    </p>
    <p num="192">The address of the first annulled execute packet (n+5) is loaded in to the NRP in the case of NMI or into IRP for all other interrupts.</p>
    <p num="193">A branch to the address held in ISTP (a pointer to the ISFP for INTm) is forced into the E1 phase of the pipeline during cycle 6.</p>
    <p num="194">During cycle 6, IACK is asserted and the proper INUM signals are asserted to indicate which interrupt has occurred.</p>
    <p num="195">IFm is cleared during cycle 7.</p>
    <p num="196">For all interrupts except NMI, PGIE is set to the value of GIE and then GIE is cleared.</p>
    <p num="197">For NMI, NMIE is cleared.</p>
    <p num="198">
      For reset, CPU registers are returned to their reset values.
      <br/>
      This forces the ISTB in the ISTP to 0 and thus execution starts at address 0.
    </p>
    <p num="199">The following operations do not affect interrupt processing:</p>
    <p num="200">Branches: branches and interrupt processing do not occur simultaneously, because interrupts are disabled during the delay slots of a branch, even if the branch is not taken.</p>
    <p num="201">Code Parallelism: because the serial or parallel encoding of fetch packets does not affect the DC through E5 stages of the pipeline, no conflicts with interrupts exist.</p>
    <p num="202">The following operations do affect interrupt processing:</p>
    <p num="203">
      Multicycle NOPs: multi-cycle NOPs (including IDLE) operate the same as other instructions when interrupted except for when an interrupt causes any but the first cycle of a multi-cycle NOP to be annulled.
      <br/>
      Then, the address of the next execute packet in the pipeline is saved in the NRP or the IRP.
      <br/>
      This prevents returning to an IDLE instruction or a multi-cycle NOP which was interrupted.
    </p>
    <p num="204">Memory stalls: memory stalls delay interrupt processing by extending the CPU cycles, which would be extended during a memory stall regardless of whether interrupt processing was occurring or not.</p>
    <p num="205">Performance in processing interrupts:</p>
    <p num="206">
      Overhead: overhead for all CPU interrupts is 7 cycles.
      <br/>
      This may be seen from in FIG. 22, where no new instructions are entering the E1 pipeline phase during CPU cycles 5 through 11.
    </p>
    <p num="207">
      Latency: interrupt latency is 11 cycles.
      <br/>
      In FIG. 22, although the interrupt is active in cycle 1, execution of service code does not begin until cycle 12.
    </p>
    <p num="208">
      Frequency: the logic clears the interrupt on cycle 7, with any incoming interrupt having priority.
      <br/>
      Thus, an interrupt can be recognized every other cycle.
      <br/>
      Also, because a low-to-high transition is necessary, an interrupt can occur only every other cycle.
      <br/>
      However, the frequency of interrupt processing depends on the time required for interrupt service and whether you re-enable interrupts during processing, thereby allowing nested interrupts.
    </p>
    <p num="209">
      Table 27 and Table 28 show the single assignment programming method.
      <br/>
      When single assignment is used, no registers that have pending results are read.
      <br/>
      If, in Table 27, the ADD had been in parallel with the LDW (and an extra NOP cycle in the delay slots), the code would obey single assignment because the write from the LDW would not yet be pending.
    </p>
    <p num="210">
      To avoid unpredictable operation, one must employ single assignment in code that can be interrupted.
      <br/>
      If an interrupt occurs, all instructions entering E1 prior to the beginning of interrupt processing are allowed to complete execution (through E5.) All other instructions are annulled and refetched upon return from interrupt.
      <br/>
      The instructions encountered from the return from the interrupt do not experience any delay slots from the instructions prior to processing the interrupt.
      <br/>
      Thus, instructions with delay slots can appear to have fewer delay slots than they actually have.
      <br/>
      For example, if an interrupt occurred between the LDW and ADD in Table 27, the ADD would read the new value of A1 loaded by the LDW.
    </p>
    <p num="211">
      -- TABLE 27
      <br/>
      -- Not Using Single Assignment
      <br/>
      --   (Chemical Structure image '8' not included in text)
    </p>
    <p num="212">
      -- TABLE 28
      <br/>
      -- Using Single Assignment
      <br/>
      --   (Chemical Structure image '9' not included in text)
    </p>
    <p num="213">
      A trap behaves like an interrupt except it is entered under software control.
      <br/>
      Upon entry interrupts are disabled.
      <br/>
      Table 29 and Table 30 show a trap call and return code sequence, respectively.
      <br/>
      This method will allow multiple nested interrupts.
      <br/>
      The trap condition (TC) can be any one of the condition registers A1-A2 or B0-B2.
    </p>
    <p num="214">
      The trap handler must save the values of BO because, in this code example, it holds the previous GIE and B1 because it contains the return address.
      <br/>
      Note that the sequence could be shortened to 6 cycles rather than 8 if the TRAP handler were within the 21-bit offset for a branch using a displacement.
    </p>
    <p num="215">
      -- TABLE 29
      <br/>
      -- Code Sequence to Invoke a Trap Call
      <br/>
      --   (Chemical Structure image '10' not included in text)
      <br/>
      -- Note:
      <br/>
      -- A1 represents the trap condition.
    </p>
    <p num="216">
      -- TABLE 30
      <br/>
      -- Code Sequence for Trap Return
      <br/>
      --   (Chemical Structure image '11' not included in text)
    </p>
    <p num="217">
      In general when an interrupt service routine is entered interrupts are disabled.
      <br/>
      The exception is the nonmaskable interrupt since it allows a second level of interrupt.
      <br/>
      If the interrupt that occurs is an NMI it is not interrupted by another NMI until after processing of the first one is complete.
      <br/>
      However, an NMI can interrupt any of the other interrupts.
    </p>
    <p num="218">
      There may be times when one wants to allow an Interrupt Service Routine to be interrupted by another (particularly higher priority) interrupt.
      <br/>
      Even though the processor by default does not allow interrupt service routines to be interrupted unless the source is an NMI, it is possible to allow the nesting of interrupts under software control.
      <br/>
      The process would involve saving the original IRP (or NRP) and IER to memory or a register (either not used or saved if used by subsequent interrupts) and setting up a new set of interrupt enables if desired once the ISR is entered as well as saving the CSR.
      <br/>
      Then the GIE bit could be set which would re-enable interrupts inside the interrupt service routine.
    </p>
    <p num="219">
      The presently preferred microprocessor 11 of the present invention is a 32-bit fixed-point digital signal processor (DSP) 11 that is based on a VLIW CPU core.
      <br/>
      The CPU core has eight functional units that operate in parallel using two register files; each of the two register files contain sixteen 32-bit registers.
      <br/>
      Device 11 executes up to eight instructions every clock cycle to achieve 1,600 Mips performance at a 200 mhz clock rate.
      <br/>
      Program parallelism is defined at compile time by a compiler, since there is no data dependency checking done in hardware during run time.
      <br/>
      A one Megabit on-chip RAM is split between data and program memory.
      <br/>
      A 256-bit wide portion of the program memory may be configured as cache memory and when so configured, it fetches eight 32-bit instructions every single cycle.
      <br/>
      The external memory interface (EMIF) supports a variety of synchronous and asynchronous memories, including SBSRAM and SDRAM.
      <br/>
      The EMIF can release the external bus under host control using a hold/hold acknowledge protocol.
      <br/>
      In addition, a host processor has direct access to the processor's data memory via a separate 16-bit host port interface.
      <br/>
      Following power-up the DSP can be booted from an 8-, 16- or 32-bit external ROM using one of the two DMA channels available on the chip.
      <br/>
      FIG. 23 depicts a high level functional diagram of processor 11.
    </p>
    <p num="220">
      The Very Long Instruction Word (VLIW) CPU of the present invention uses a 256-bit wide instruction to feed up to eight 32-bit instructions to the eight functional units during every clock cycle.
      <br/>
      The VLIW architecture features controls by which all eight units do not have to be supplied with instructions if they are not ready to execute.
      <br/>
      The first bit of every 32-bit instruction determines if the next instruction belongs to the same execute packet as previous instruction, or whether it should be executed in the following clock as a part of the next execute packet.
      <br/>
      While fetch packets are always 256-bit wide, the execute packets can vary in size as shown by alternating shading on FIG. 24. The variable length execute packets are a key memory saving feature distinguishing the CPU from other VLIW architectures.
    </p>
    <p num="221">
      The CPU features two sets of functional units.
      <br/>
      Each functional unit contains four units and a register file.
      <br/>
      The two register files each contain sixteen 32-bit registers each for the total of 32 general purpose registers.
      <br/>
      As shown in FIG. 24, the two sets of functional units, along with two register files, comprise sides A and B of the CPU.
      <br/>
      The four functional units on each side of the CPU can freely share the sixteen registers belonging to that side.
      <br/>
      Additionally, each side features a single data bus connected to all registers on the other side, by which the two sets of functional units can cross-exchange data from the register files on opposite sides.
      <br/>
      Register access by functional units on the same side of the CPU as the register file is serviced for all the units in a single clock cycle; register access using the register file across the CPU is only for one read and one write per cycle.
    </p>
    <p num="222">
      Another key feature of the CPU is the load/store architecture, where all instructions operate on registers (as opposed to data in memory).
      <br/>
      Two sets of data addressing units (.D1 and .D2) are exclusively responsible for all data transfers between the register files and the memory.
      <br/>
      The data address driven by the .D units allow data addresses generated from one register file to be used in data loads and stores affecting the other register file.
      <br/>
      The CPU supports a variety of indirect addressing modes using either linear or circular addressing modes with 5- or 15-bit offsets.
      <br/>
      All instructions are conditional, and most can access any one of the 32 registers.
      <br/>
      Some registers, however, are singled out to support specific addressing or to hold the condition for conditional instructions (if the condition is not automatically "true").
      <br/>
      The two .M functional units are dedicated to multiplies.
      <br/>
      The two .S and .L functional units perform general set of arithmetic, logical and branch functions with results available at the rate of every clock cycle; however, the latency can vary between 1 and 5 cycles due to the multi-stage execution pipeline.
    </p>
    <p num="223">
      The VLIW processing flow begins when a 256-bit wide instruction fetch packet (IFP's) is fetched from the internal program memory (that can also be configured as cache).
      <br/>
      The 32-bit instructions destined for the individual functional units are "linked" together by the first bit in the least significant bit position of each instruction in an instruction fetch packet.
      <br/>
      The instructions that are "chained" together for simultaneous execution (up to eight in total) comprise an "execute packet".
      <br/>
      A 0 in the LSB of an instruction breaks the chain, effectively placing the instructions that follow it in the next execute packet.
      <br/>
      If an execute packet crosses the fetch packet boundary (256 bits wide), the compiler will place it in the next fetch packet, while the remainder of the current fetch packet is padded with NOP instructions.
      <br/>
      The number of execute packets within a fetch packet can vary from one to eight.
      <br/>
      Execute packets are dispatched to their respective functional units at the rate of one per clock cycle (see FIG. �24????�) and the next 256-bit fetch packet will not be fetched until all the execute packets from the current fetch packet have been dispatched.
      <br/>
      After decoding, the instructions simultaneously drive all active functional units for a maximum execution rate of eight instructions every clock cycle.
      <br/>
      While most results are stored in 32-bit registers, they can be stored in memory as bytes or half-words as well, effectively making all stores and loads byte addressable for considerable savings in memory requirements.
    </p>
    <p num="224">The pin functions of signals in FIG. 23 are as follows:  (Chemical Structure image '12' not included in text)</p>
    <p num="225">
      The CPU has a register based load/store architecture featuring two general purpose register files A and B. All data manipulation instructions operate on data residing in registers.
      <br/>
      The data is moved between the registers and memory using separate load and store instructions.
      <br/>
      The general purpose register files are 32 bits wide, each containing 16 registers.
      <br/>
      Side A registers have multiple paths to the four side A functional units, while side B registers have multiple data paths to side B functional units.
      <br/>
      There is a single cross-path between the opposite register files/functional units that allows sharing of data, but for optimum data throughput, side A functional units should mostly operate on data located in side A registers and side B units on side B data.
      <br/>
      All general purpose registers may be used with instructions that operate on 40-bit data by grouping the registers in pairs.
      <br/>
      While most registers can be used with most instructions, some also have specific uses as shown below.
    </p>
    <p num="226">In addition to general purpose register files A and B, the CPU also features a set of control registers used for controlling interrupts, Program Cache operation, power-down modes, data saturation, setting linear/circular and endian addressing modes, accessing Program Counter, performing general purpose I/O and writing to Program Memory.  (Chemical Structure image '13' not included in text)   (Chemical Structure image '14' not included in text)</p>
    <p num="227">Instruction Set Summary</p>
    <p num="228">
      --
      <br/>
      -- Functional Units
      <br/>
      -- .L unit          M unit  .S unit                   .D unit
      <br/>
      -- ABS       NOR     MPY     ADD       EXT       SET     ADD
      <br/>
      -- ADD       M       SMPY    ADDK      EXTU      SHL     ADDA
      <br/>
      -- AND       NOT             ADD2      MVC .dagger.
      <br/>
      SHR     LD mem
      <br/>
      -- CMPEQ     OR              AND       MV        SHRU    LD mem (15-bit
      <br/>
      --  offset) .dagger-dbl.
      <br/>
      -- CMPGT     SADD            B disp    MVK       SSHL    MV
      <br/>
      -- CMPGTU    SAT             B IRP .dagger.
      <br/>
      MVKH      STP .dagger.
      <br/>
      NEG
      <br/>
      -- CMPLT     SSUB            B NRP .dagger.
      <br/>
      NEG NOT   SUB     ST mem
      <br/>
      -- CMPLTU    SUB             B reg     OR        SUB2    ST mem (15-bit
      <br/>
      --  offset) .dagger-dbl.
      <br/>
      -- LMBD      SUBC            CLR                 XOR     SUB
      <br/>
      -- MV        XOR                                 ZERO    SUBA
      <br/>
      -- NEG       ZERO                                        ZERO
      <br/>
      -- .dagger. .S2 only
      <br/>
      -- .dagger-dbl. .D2 only
    </p>
    <p num="229">Instruction Execute Phases</p>
    <p num="230">
      --
      <br/>
      --                              number of
      <br/>
      -- instruction type             delay slots execute stages used
      <br/>
      -- Branch (from E1 to E1)       5         E1, , , , , E1
      <br/>
      -- Load (incoming data)         4         E1, E2, E3, E4, E5
      <br/>
      -- Multiply                     1         E1, E2
      <br/>
      -- Load (address modification)  0         E1
      <br/>
      -- Single-cycle (ADD, for example) 0         E1
      <br/>
      -- Store                        0         E1
      <br/>
      -- STP                          0         E1
      <br/>
      -- NOP (no execution)           --   --
    </p>
    <p num="231">Pipeline Description</p>
    <p num="232">
      --
      <br/>
      -- Pipeline
      <br/>
      -- phase         pipeline stage        symbol  during this phase:
      <br/>
      -- Program Fetch Program Address Generate PG      Address of the Fetch Packet
      <br/>
      --  is determined
      <br/>
      --               Program Address Send  PS      Address of the Fetch Packet is
      <br/>
      --  sent to memory
      <br/>
      --               Program Wait          PW      Program memory read is
      <br/>
      --  performed
      <br/>
      --               Program Data Receive  PR      Fetch packet is expected at CPU
      <br/>
      --  boundary
      <br/>
      -- Program       Execute Packet Dispatch DP      Next Execute Packet sent to
      <br/>
      --  Functional Units
      <br/>
      -- Decode        Decode                DC      Instructions are decoded in
      <br/>
      --  Functional Units
      <br/>
      -- Execute       Execute 1             E1      Instruction conditions
      <br/>
      --  evaluated, operands
      <br/>
      --                                             read
      <br/>
      --                                             Load/Store addresses
      <br/>
      --  computed/modified
      <br/>
      --                                             Branches affect Fetch Packet in
      <br/>
      --  PG stage
      <br/>
      --                                             Single-cycle results written to
      <br/>
      --  register file
      <br/>
      --               Execute 2             E2      Load address is sent to memory
      <br/>
      --                                             Store/STP address and data are
      <br/>
      --  sent to
      <br/>
      --                                             memory
      <br/>
      --                                             Single-cycle instructions may
      <br/>
      --  set the SAT bit
      <br/>
      --               Execute 3             ES      Multiply results written to the
      <br/>
      --  register file
      <br/>
      --                                             Load memory reads are
      <br/>
      --  continuing
      <br/>
      --               Execute 4             E4      Multi-cycle instruction may set
      <br/>
      --  the SAT bit
      <br/>
      --               Execute 5             E5      Load data arrives at the CPU
      <br/>
      --  boundary
      <br/>
      --                                             Load data is placed in the
      <br/>
      --  register
    </p>
    <p num="233">CPU Instruction Opcode Map  (Chemical Structure image '15' not included in text)</p>
    <p num="234">
      FIG. 25 shows the Memory Map of the DSP.
      <br/>
      The memory is byte addressable and it's total address range is 4G bytes (corresponding to 32-bit internal address).The Memory Map is divided between the Internal Program Memory, Internal Data Memory and 3 External Memory Spaces and Internal Peripheral Space.
      <br/>
      A section of Internal memory can be accessed by the Host Port Interface (HPI).
    </p>
    <p num="235">
      The Internal Memory consists of 512K bits of on-chip Program/Cache Memory and 512K bits of on-chip data memory.
      <br/>
      The Program Memory, configurable as Cache or Program, is organized in 2K of 256-bit Fetch Packets.
      <br/>
      The DSP fetches all instructions one Fetch Packet at a time.
      <br/>
      The packets are processed at the maximum rate of eight 32-bit instructions per CPU cycle or at a minimum of one instruction per cycle.
      <br/>
      The Internal Data Memory is byte addressable by the CPU (for reads as well as writes) and supports byte, half-word and full word transfers.
    </p>
    <p num="236">
      All external data accesses by the CPU or DMA pass through the External Memory Interface (EMIF).
      <br/>
      The External Memory is divided into 3 Spaces--CE0, CE1 and CE2.
      <br/>
      Each has a dedicated chip enable signal that is asserted during data access to or from the corresponding space.
      <br/>
      Each External Space has assigned a separate internal peripheral bus register that determines the shape of the read/write cycle when accessing Asynchronous Memory.
    </p>
    <p num="237">
      In addition to Asynchronous Memory, CE0 and CE2 Spaces can also interface to other types of memory.
      <br/>
      SBSRAM or SDRAM Memory can be assigned to those two spaces by controlling signal levels on signal groups CE0_TYPE and CE2_TYPE (pins DC2-DC5) during Reset.
    </p>
    <p num="238">
      External Memory Space CE1 can only interface to asynchronous memory.
      <br/>
      However, while spaces CE0 and CE2 are always 32-bit wide, the CE1 Memory Space can also be configured to the width of 8 or 16 bits by controlling signal levels on signal group CE1_WIDTH (pins DC6-DC7).
      <br/>
      The EMIF automatically packs bytes and half-words into words during read cycles--feature typically used when booting from an 8- or 16-bit EPROM.
      <br/>
      The CE1 Memory Space can be used for ROM interfacing because ROM cycles are similar to Asynchronous SRAM read cycles.
    </p>
    <p num="239">
      Note, that while the CE1 space is the only External Memory Space that allows read cycles from 8- or 16-bit wide memory, read cycles from any External Memory Space can access byte or half-word sized data from 32-bit wide External Memory.
      <br/>
      The EMIF data write cycles can transfer bytes, half-words or words to external memory as well, using BE_control signals for byte selects.
      <br/>
      Data read cycles always latch all 4 bytes (all 4 BE_'s active) and the CPU then extracts the appropriate bytes internally if the data size is less then 32 bits.
      <br/>
      Note, that EMIF writes requested by the Program Memory Controller or the DMA, are always 32-bits wide (as opposed to 8-, 16-, or 32-bit transfers originated by the Data Memory Controller).
    </p>
    <p num="240">
      State of pin DC1 (MAP_BOOT signal group) during Reset determines whether the Internal Program RAM is placed in the Memory Map before or after the External Memory Spaces CE0 and CE1.
      <br/>
      The type of Memory Map mode chosen would typically depend on the startup procedure used following the device power-up (see the "Startup following Reset" section of the Data Sheet).
    </p>
    <p num="241">
      The LENDIAN configuration pin determines the order in which the individual byte addresses increase within the word (the low byte within a word can represent bits 0-7 or bits 24-31 of the 32-bit word).
      <br/>
      In the analogous way, the LENDIAN pin also determines the order of half-words within the word.
      <br/>
      The LENDIAN pin affects the Internal Data Memory as well as External Memory accesses.
    </p>
    <p num="242">
      The peripherals on the DSP are accessed and controlled via memory mapped control registers.
      <br/>
      One embodiment includes 2 peripherals--External Memory Interface (EMIF) and the two-channel Direct Memory Access controller (DMA).
      <br/>
      One of the DMA channels, DMAO, is used by the processor during the Bootload Startup procedure to initialize the Internal Program Memory after Reset.
    </p>
    <p num="243">Internal Peripheral Space  (Chemical Structure image '16' not included in text)</p>
    <p num="244">Memory Mapped Registers--EMIF  (Chemical Structure image '17' not included in text)</p>
    <p num="245">Memory Mapped Registers--DMA  (Chemical Structure image '18' not included in text)</p>
    <p num="246">
      The 512K bits of Internal Data Memory can be accessed both from the CPU and through the Host Port Interface (HPI).
      <br/>
      The CPU sees the Internal Data Memory as 64K bytes organized in eight columns, each 1 byte wide and 16K rows tall.
      <br/>
      The HPI addresses the same memory across four columns, each 1 half-word wide and 16K rows tall (32K half-words total).
      <br/>
      Unlike the 15 CPU, the HPI only has the capability to address the Internal Data in a Little Endian mode where the address of individual half-words grows in the same direction as the addresses of the full words.
      <br/>
      See FIG. 26 for the addressing example.
    </p>
    <p num="247">
      To visualize maximum memory access performance, the Internal Data Memory of the DSP can be organized in 4 blocks, each 2 bytes wide and 16K rows tall.
      <br/>
      As shown in FIG. 27 and 28, the data is byte addressable by the CPU with address increasing across the blocks from left to right (This example uses Little Endian addressing mode).
      <br/>
      In order for both sides of the CPU to access data simultaneously during the same CPU cycle, none of the bytes of side A data can reside in the same memory block as any of the side B data bytes.
      <br/>
      As shown in FIG. 27, a word of data is loaded to a side A register at the same time as another word is stored from a side B register.
      <br/>
      The two accesses in FIG. 28 (both 8 bits wide), however, take two cycles because both bytes reside in the same block of the Internal Data Memory.
    </p>
    <p num="248">
      Device reset begins immediately following the falling signal edge at the RESET_pin.
      <br/>
      During Reset all functional blocks of the processor are initialized to a known state as are all CPU and Internal Peripheral Bus registers.
      <br/>
      The External Memory Interface output signals (except HOLDA) and all Host Port Interface output signals are tri-stated immediately following the falling edge of RESET_. They remain tri-stated until the RESET_0 signal returns to high level.
    </p>
    <p num="249">
      Most of the HPIF address pins have a special function during device Reset.
      <br/>
      They become Device Configuration pins as shown on FIG. 29. The lowest bit HPIF address pin becomes Memory Map select pin (it will also select Boot DMA transfer source address in the future revisions).
      <br/>
      The selection of low or high state for that pin typically depends on the processor startup mode after Reset (pins DC 13 to 11).
    </p>
    <p num="250">
      There are two methods by which the DSP can start operating following the deassertion of the RESET_signal.
      <br/>
      The state of signal DC11 (during Reset) determines if the device starts direct program execution from external address 0h or whether it first uses an Internal DMA channel 0 to boot-load the Internal Program Memory from an external EPROM before commencing program execution from internal address 0h.
    </p>
    <p num="251">
      As depicted in FIG. 30, the value of 000b of DC(13-11) pins during RESET causes the DSP to start program execution directly from memory starting at address 0h (location of Reset Service Fetch Packet).
      <br/>
      Depending on the MAP_BOOT mode used, address 0h will fall inside or external to the chip.
      <br/>
      Typically MAP_BOOT mode 0 (pin DC1 low during Reset) is used to start execution from 32-bit external EPROM or SRAM that has been properly initialized by the Host during Reset.
      <br/>
      Memory Map 1 mode would most likely not be used with some DSPs for direct execution startup, because there is no mechanism to initialize the Internal Program Memory other then by the DSP itself (Some embodiments may include an enhanced Host Port Interface with the capability to access Internal Program Memory via one of the DMA channels).
    </p>
    <p num="252">
      As depicted in FIG. 31, the value of 001b of DC(13-11) pins during Reset causes the DSP DMA channel 0 to transfer a block of data from the External Memory Space CE1 to Internal Program Memory starting at 0h.
      <br/>
      The size of the boot block is determined by the state of pins DC(10-8) during Reset (see FIG. 29).
      <br/>
      Internal Program Memory location at address 0h of the Memory Map corresponds to the MAP_BOOT mode 1 (pin DC1 high during Reset).The DSP may not support MAP_BOOT mode 0 for the bootload startup.
      <br/>
      Upon the completion of the DMA transfer, the processor starts executing the Reset Service Fetch Packet from Internal Program Memory address 0h.
      <br/>
      Typically the Reset Packet includes a branch instruction to jump over the other Interrupt Service Fetch Packets (ISFP's) to the application bootloader program.
      <br/>
      The bootloader will then most likely load the internal Data Memory with application initialized data and possibly load another program block to some location in the External Memory Space CE0 or CE2 before branching to the main program loop.
    </p>
    <p num="253">
      Before an interrupt can be processed automatically, it's corresponding bit has to be set in the Interrupt Enable Register (IER) and the Global Interrupt Enable bit (GIE) has to be set as well in the Control Status Register (CSR).
      <br/>
      During interrupt processing, the processor stops current program execution and saves the address of the next instruction scheduled for execution in the Interrupt Return Pointer (IRP).
      <br/>
      In case of the non-maskable interrupt (NMI), the return address is saved in the NRP register.
      <br/>
      Program execution is then redirected to one of 16 pre-assigned contiguous locations in the Interrupt Service Table (the IST base is assigned to address 0h following Reset, but can be relocated anywhere on a 1K byte address boundary by changing the ISTB field of the ISTP register).
      <br/>
      The ISFPs consist of 8 instructions of which one has to be a branch to the IRP address (to return from interrupt) or a branch to additional code if the Interrupt Service Routine (ISR) is larger then the ISFP (see FIG. 32.).
      <br/>
      The branch has to be executed at least 5 cycles before the end of the ISFP in order to prevent intrusion into ISFPs belonging to other interrupts.
      <br/>
      This can be accomplished either by placing the branch 5 non-parallel instructions before the end of the ISFP or by following the branch with a NOP 5 instruction.
    </p>
    <p num="254">
      With the GIE bit disabled, the highest priority active interrupt can still be identified in software by polling the ISTP register containing the address pointing to the ISFP of the next interrupt in line for processing if the GIE were enabled.
      <br/>
      All active interrupts can also be identified by polling the Interrupt Flag Register (IFR).
      <br/>
      Interrupt Set and Clear Registers (ISR and ICR) can be used to manually set/clear interrupts in software.
    </p>
    <p num="255">
      During automatic interrupt processing, the IFR bit is cleared, and the active interrupt is encoded on the four INUM pins, at the beginning of the IACK pulse (see the timing section of the Data Sheet).
      <br/>
      At the same time, the GIE bit is copied to PGIE field of CSR, and GIE bit is cleared for all interrupts except NMI.
      <br/>
      The GIE bit is enabled again upon return from interrupt via the B IRP or B NRP instructions (at the end of the E1 phase).
    </p>
    <p num="256">
      The DSP uses an external oscillator to drive the on-chip PLL (Phase-Locked Loop) circuit that generates all internal and external clocks.
      <br/>
      The PLL typically multiplies the external oscillator frequency by 4 or by 2 and feeds the resulting clock to CLKOUT1 output pin.
      <br/>
      The internal version of CLKOUT1 is used by the processor as an instruction cycle clock.
      <br/>
      Most timing parameters of this device are defined relative to the CLKOUT1 clock and specifically to it's rising edge.
      <br/>
      CLKOUT2 is another output clock derived from CLKOUT1 at half of it's frequency.
      <br/>
      It is primarily used to clock some synchronous memories such as the SDRAM.
    </p>
    <p num="257">
      In addition to x2 and x4 mode, the clock circuit can operate in multiply by 1 mode, where the input clock frequency is the same as the CLKOUT1 output clock frequency.
      <br/>
      The factors to consider in choosing the multiply factor include board level noise and clock jitter.
      <br/>
      The x4 mode will minimize the board noise, while the x2 mode will reduce the jitter.
      <br/>
      The clock mode is controlled by two CLKMODE pins as shown in FIG. 33.
    </p>
    <p num="258">
      The amount of time that the PLL needs to synchronize to the output frequency depends on the CLKIN and CLKOUT1 frequencies and is typically in the range of tens of microseconds.
      <br/>
      See the PLL Component Selection table for the exact time.
      <br/>
      The synchronization time affects the duration of the Reset signal in that the Reset has to be asserted long enough for the PLL to synchronize to the proper output frequency.
    </p>
    <p num="259">
      Three PLLFREQ pins identify the range of CLKOUT1 frequencies that the PLL is expected to synchronize to.
      <br/>
      The PLL also requires 2 bypass capacitors (between PLLV and PLLG), external low-pass filter components (R1, C1,C2) and an EMI filter (see FIG. 33).
      <br/>
      The values for R1, C1, C2 and the filter depend on the CLKIN and CLKOUT1 frequencies.
      <br/>
      Refer to the PLL Component Selection Table 31 to chose correct values for the PLL external components and the EMI filter.
    </p>
    <p num="260">
      -- TABLE 31
      <br/>
      -- PLL Component Selection
      <br/>
      -- CYCLE                                                        EMI
      <br/>
      --  LOCK
      <br/>
      -- TIME                CLKIN   CLKOUT1     R1     C1     C2     FILTER
      <br/>
      --  TIME (US)
      <br/>
      -- (NS)    CLKMODE     (MHZ)   (MHZ)       ( OMEGA ) (UF)   (PF)   PART NO.
      <br/>
      --  .dagger.
      <br/>
      -- 5       X4          50      200         16.9   .15    2700   TDK -153 59
      <br/>
      -- 5       X2          100     200         16.9   .068   1500   TDK -153 28
      <br/>
      -- 5.5     X4          45.5    181.8       13.7   .18    3900   TDK -153 49
      <br/>
      -- 5.5     X2          90.9    181.8       13.7   .082   1800   TDK -153 23
      <br/>
      -- 6       X4          41.6    166.7       17.4   .15    3300   TDK -153 68
      <br/>
      -- 6       X2          83.3    166.7       17.4   .082   1500   TDK -153 36
      <br/>
      -- 6.5     X4          38.5    153.8       16.2   .18    3900   TDK -153 70
      <br/>
      -- 6.5     X2          76.9    153.8       16.2   .082   1800   TDK -153 33
      <br/>
      -- 7       X4          35.7    142.9       15     .22    3900   TDK -153 72
      <br/>
      -- 7       X2          71.4    142.9       15     .1     2200   TDK -153 34
      <br/>
      -- 7.5     X4          33.3    133.3       16.2   .22    3900   TDK -153 84
      <br/>
      -- 7.5     X2          66.7    133.3       16.2   .1     2200   TDK -153 40
      <br/>
      -- 8       X4          31.3    125         14     .27    4700   TDK -153 77
      <br/>
      -- 8       X2          62.5    125         14     .12    2700   TDK -153 36
      <br/>
      -- 8.5     X4          29.4    117.7       11.8   .33    6800   TDK -153 67
      <br/>
      -- 8.5     X2          58.8    117.7       11.8   .15    3300   TDK -153 32
      <br/>
      -- 9       X4          27.7    111.1       11     .39    6800   TDK -153 68
      <br/>
      -- 9       X2          55.6    111.1       11     .18    3900   TDK -153 33
      <br/>
      -- 9.5     X4          26.3    105.3       10.5   .39    8200   TDK -153 65
      <br/>
      -- 9.5     X2          52.6    105.3       10.5   .22    3900   TDK -153 35
      <br/>
      -- 10      X4          25      100         10     .47    8200   TDK -153 68
      <br/>
      -- 10      X2          50      100         10     .22    4700   TDK -153 33
      <br/>
      -- .dagger-dbl. Note: For CLKMODE = x1, the PLL is bypassed and the choice of
      <br/>
      --  the external component values is irrelevant and the PLLV, PLLF and PLLG
      <br/>
      --  inputs can be unconnected.
      <br/>
      The PLLFREQ inputs should be driven at all
      <br/>
      --  times (for CLKMODE = x1 they can be connected to GND).
      <br/>
      -- .dagger.
      <br/>
      Note: Under some operating conditions, the maximum PLL lock time
      <br/>
      --  may vary as much as 150% from the specified typical value.
      <br/>
      For example if
      <br/>
      --  the typical lock time is specified as 100 us, its maximum value may be as
      <br/>
      --  long as 250 us.
    </p>
    <p num="261">
      Most of the operating power of CMOS logic is dissipated during circuit switching from one logic state to another.
      <br/>
      By preventing some or all of chip's logic from switching, significant power savings can be realized without losing any data or operational context as depicted in FIG. 34. Power-down modes idle1 and idle2 block the internal clock inputs at the boundary of the selected blocks of logic, effectively preventing them from switching.
      <br/>
      Idle1 shuts down the CPU and idle2 mode shuts down both the CPU and the on-chip peripherals.
      <br/>
      Additional power savings are accomplished in power-down mode idle3, where the entire on-chip clock tree (including multiple buffers) is "disconnected" at the clock source that is the clock PLL (see FIG. 34).  (Chemical Structure image '19' not included in text)
    </p>
    <p num="262">
      The power-down modes are triggered by setting bits 0-2 in the PWRD field of the Control Status Register (CSR).
      <br/>
      Idle3 mode can only be aborted by device Reset, while idlel and idle2 modes can also be terminated by an enabled interrupt, or any interrupt (enabled or not), as directed by bits 3 and 4 of the PWRD field.
      <br/>
      When writing to CSR, all bits of the PWRD field should be set at the same time.
      <br/>
      When more then one logic 1's are written to the PRWD field bits 0-2, the highest order enable bit determines the power-down mode.
    </p>
    <p num="263">
      --
      <br/>
      -- POWER-DOWN                          WAKE-UP        EFFECT ON CHIPS
      <br/>
      -- MODE           TRIGGER ACTION       METHOD .dagger.
      <br/>
      OPERATION
      <br/>
      -- idle1          write a logic 1 into bit 0 internal interrupt, CPU halted
      <br/>
      --                of PWRD field of CSR, external interrupt (except for the
      <br/>
      --  interrupt logic)
      <br/>
      --                register             or Reset
    </p>
    <p num="264">
      -- idle2          write a logic 1 into bit 1 external interrupt peripherals
      <br/>
      --  halted and CPU halted
      <br/>
      --                of PWRD field of CSR or Reset       (except for the
      <br/>
      --  interrupt logic)
      <br/>
      --                register
      <br/>
      -- idle3          write a logic 1 into bit 2 Reset only     PLL operation is
      <br/>
      --  halted stopping the
      <br/>
      --                of PWRD field of CSR                clock tree from
      <br/>
      --  switching and
      <br/>
      --                register                            resulting in the entire
      <br/>
      --  chip being
      <br/>
      --                                                    halted
      <br/>
      -- .dagger.
      <br/>
      The wake-up from idle2 or idle3 can be triggered by either an
      <br/>
      --  enabled interrupt, or any interrupt (enabled or not).
      <br/>
      The first case is
      <br/>
      --  selected by writing a logic 1 into bit 3 of the Control Status Register
      <br/>
      --  PWRD field, and the second case is selected by writing a logic 1 into bit
      <br/>
      --  4 of the same field.
      <br/>
      When both bits 3 and 4 are set to 1 any interrupt
      <br/>
      --  (enabled or not) will wake the processor from idle1 or idle2.
      <br/>
      If
      <br/>
      --  power-down mode is terminated by a non-enabled interrupt, the program
      <br/>
      -- - execution simply returns to the instruction following the one that caused
      <br/>
      --  the power-down by setting the idle bits in the CSR.
      <br/>
      Wake-up by an enabled
      <br/>
      --  interrupt executes the corresponding Interrupt Service Routine first,
      <br/>
      --  prior to returning to the code aborted by the power-down.
    </p>
    <p num="265">CLKIN Timing Parameters</p>
    <p num="266">
      --
      <br/>
      --                                       clkmode = X4 clkmode = X2 clkmode =
      <br/>
      --  X1
      <br/>
      -- NO                                      min    max     min    max     min
      <br/>
      --   max     unit
      <br/>
      -- 1      tC (CLKIN) Period of CLKIN       20     20      10     10
      <br/>
      --  5              ns
      <br/>
      -- 2      tW (CLKIN) Pulse duration of CLKIN 9.2            4.6
      <br/>
      --   1.9            ns
      <br/>
      --                    high
      <br/>
      -- 3      tW (CLKIN) Pulse duration of CLKIN 6.0            3.0
      <br/>
      --   1.9            ns
      <br/>
      --                    low
      <br/>
      -- 4      tT (CLKIN) Transition time of CLKIN        2.4            1.2
      <br/>
      --           0.6     ns
    </p>
    <p num="267">FIG. 35 depicts CLKIN timings described above.</p>
    <p num="268">CLKOUT1 Timing Parameters</p>
    <p num="269">
      --
      <br/>
      -- NO                                             min       max    unit
      <br/>
      -- 1      tC CKO1) Period of CLKOUT1           5                ns
      <br/>
      -- 2      tW (CKO1) Pulse duration of CLKOUT1 high 1.9              ns
      <br/>
      -- 3      tW (CKO1) Pulse duration of CLKOUT1 low 1.9              ns
      <br/>
      -- 4      tT (CKO1) Transition time of CLKOUT1            0.6    ns
    </p>
    <p num="270">FIG. 36 depicts CLKOUT1 timings described above.</p>
    <p num="271">CLKOUT2 Timing Parameters</p>
    <p num="272">
      --
      <br/>
      -- NO                                             min       max    unit
      <br/>
      -- 1      tC CKO2) Period of CLKOUT2           10               ns
      <br/>
      -- 2      tW (CKO2) Pulse duration of CLKOUT2 high 3.8              ns
      <br/>
      -- 3      tW (CKO2) Pulse duration of CLKOUT2 low 3.8              ns
      <br/>
      -- 4      tT (CKO2) Transition time of CLKOUT2            0.6    ns
    </p>
    <p num="273">FIG. 37 depicts CLKOUT2 timings described above.</p>
    <p num="274">
      The External Memory Interface (EMIF) is responsible for accessing data that is external to the chip.
      <br/>
      As shown in FIG. 23., EMIF can receive requests for external data access from one of 3 functional blocks--Data Memory Controller, Program/Cache Controller or DMA Controller.
      <br/>
      The EMIF operation is configurable via memory mapped control registers accessed by the internal peripheral bus.
      <br/>
      Every EMIF program or data access uses common 23-bit address bus and 32-bit data bus.
    </p>
    <p num="275">
      There are 3 spaces in the Memory Map, each of which is represented by one of 3 chip enables--CE2_, CE1_ and CE0_. One of the chip enables has to be asserted when the processors reads or writes to any of the 3 Memory Map External spaces 2,1 or 0.
      <br/>
      Byte enable control signals, BE3_--BE0_, select the individual bytes, half-words or words during EMIF write cycles requested by the Data Memory Controller.
      <br/>
      All Program and DMA requested cycles, as well as Data Memory Controller read cycles, are 32-bit wide--resulting in all 4 BE_signals being active.
      <br/>
      Data Memory Controller write cycles access byte or half-word data using individual BE_controls to select the active bytes.
      <br/>
      The addressing of bytes within each word is set by the LENDIAN pin to be in the direction of high bits or low bits.
    </p>
    <p num="276">
      While CE_spaces 0 and 2 can be programmed to support different types of memory, CE_space 1 is restricted to Asynchronous Memory cycles only, including ROM typically used to boot the system at power-up.
      <br/>
      While the ROM read cycles are identical to CE0_ and CE2_ Asynchronous Memory cycles from the control signal perspective, the CE-- 1 cycles have the flexibility to pack bytes into words if the ROM is 8- or 16-bits wide.
      <br/>
      The External ROM size is expected to be encoded via pins DC 7-6 during Reset.
    </p>
    <p num="277">
      The type of memory assigned to CE_spaces 0 and 2 are also encoded via the DC pins during Reset.
      <br/>
      Pins DC 3-2 specify the type of memory for the CE0_space, while pins 5-4 specify the type of memory for space CE2_. The supported memory types include Asynchronous Memory, Synchronous Burst SRAM (SBSRAM) and Synchronous DRAM (SDRAM).
      <br/>
      External Control cycles can be used to drive CE_spaces 0 and 2 by setting appropriate bits in the EMIF Global Control Register.
      <br/>
      External Control cycles are different from memory cycles in that they use Request/Ready handshaking to stretch individual bus cycles to accommodate longer response times inherent in slower I/O devices.
      <br/>
      The EMIF provides a separate set of control signals for each one of the memory cycles listed above (see FIG. 23).
    </p>
    <p num="278">
      EMIF HOLD and HOLDA signals are used to arbitrate the ownership of the EMIF bus between the host and the DSP.
      <br/>
      FIG. 38 depicts the EMIF signals.
    </p>
    <p num="279">
      Asynchronous memory read cycles use the AXOE_control signal to enable the memory device to place the data on the data bus.
      <br/>
      EMIF control registers define the shape of the read cycle and the amount of time that each address is valid.
      <br/>
      The shape of the read cycle in FIG. 39 reflects the fastest possible asynchronous read corresponding to 1 cycle setup, 1 cycle strobe width and 1 cycle hold fields in the EMIF CE External Space Timing Register (one of 3 registers defining external spaces CE0, CE1 and CE3).
    </p>
    <p num="280">
      Asynchronous memory write cycles use the AXWE_control signal to latch the data in the memory device.
      <br/>
      The AXWE_signal shape is programmed by setting fields in the EMIF External Timing Register.
      <br/>
      The cycles in FIG. 40. Correspond to 1 cycle setup, 1 cycle strobe width and 1 cycle hold time (fastest write possible).
      <br/>
      Asynchronous Memory AXOE_ and AXWE_control signals are also used during External Control cycles.
    </p>
    <p num="281">Timing Parameters for Asynchronous Memory Cycles</p>
    <p num="282">
      --
      <br/>
      -- NO                                                    min    max    unit
      <br/>
      -- 1      td (CKH-CE) Delay time, CLKOUT1 high to CE_ valid        1.9
      <br/>
      --  ns
      <br/>
      -- 2      td (CKH-BE) Delay time, CLKOUT1 high to BE_ valid        2.2
      <br/>
      --  ns
      <br/>
      -- 3      td (CKH-A) Delay time, CLKOUT1 high to A valid 0      1.7    ns
      <br/>
      -- 4      td (CKH-D) Delay time, CLKOUT1 high to D valid 0      2.0    ns
      <br/>
      -- 5      tsu (D-CKH) Setup time, read D before CLKOUT1 high 0.5
      <br/>
      --   ns
      <br/>
      -- 6      th (CKH-D) Hold time, read D valid after CLKOUT1 high 0
      <br/>
      --      ns
      <br/>
      -- 7      td (CKH-OE) Delay time, CLKOUT1 high to ASOE_ valid        1.9
      <br/>
      --    ns
      <br/>
      -- 8      td (CKH-WE) Delay time, CLKOUT1 high to ASWE_ valid        2.0
      <br/>
      --    ns
    </p>
    <p num="283">FIG. 39 depicts asynchronous memory read cycle timings described above and FIG. 40 depicts asynchronous memory write cycle timings.</p>
    <p num="284">
      The CE Space Timing Register contains 3 fields that determine the shape and duration of the AXWE_ and AXOE_control signals.
      <br/>
      The examples shown in FIGS. 39 and 40 correspond to value of 1 programmed in Setup, Strobe and Hold fields of the CE Space Timing Register (the smallest value permitted).
      <br/>
      Each read and write also contains a 1 cycle internal address latch time which is not programmable.
      <br/>
      Even as the AXOE_signal doesn't come up in between the successive read cycles, the combined effect of Setup, Strobe and Hold values determine the total length of each read.  (Chemical Structure image '20' not included in text)
    </p>
    <p num="285">
      Any External Memory access in CE_space 0 and 2 can be converted to an External Controller cycle by setting appropriate bits in the EMIF Global Control Register.
      <br/>
      All External Controller cycles use AXOE_ and AXWE_control signals to specify the direction of data transfer.
      <br/>
      For both reads and writes, the DSP drives the XREQ_control signal low to announce the start of a read or write cycle.
      <br/>
      If the External Device is ready for the data transfer, it immediately drives the AXRDY signal high.
      <br/>
      AXRDY remains high as long as the External Device is ready to transfer data.
      <br/>
      When the External Device is not ready for transfer, it should immediately bring the AXRDY line low to stall the current bus cycle until it is once again ready.
      <br/>
      See FIGS. 6 and 7 for External Controller timing waveforms.
    </p>
    <p num="286">Parameters for External Controller Cycles</p>
    <p num="287">
      --
      <br/>
      -- NO                                                             min    max
      <br/>
      --   unit
      <br/>
      -- 1      td (CKH-CE) Delay time, CLKOUT1 high to CE_ valid
      <br/>
      --  1.9    ns
      <br/>
      -- 2      td (CKH-BE) Delay time, CLKOUT1 high to BE_ valid
      <br/>
      --  2.2    ns
      <br/>
      -- 3      td (CKH-A) Delay time, CLKOUT1 high to A valid       0      1.7
      <br/>
      --     ns
      <br/>
      -- 4      td (CKH-D) Delay time, CLKOUT1 high to D valid       0      2.0
      <br/>
      --     ns
      <br/>
      -- 5      tsu (D-CKH) Setup time, read D before CLKOUT1 high    1.0
      <br/>
      --      ns
      <br/>
      -- 6      th (CKH-D) Hold time, read D valid after CLKOUT1 high 2.0
      <br/>
      --      ns
      <br/>
      -- 7      td (CKH-OE) Delay time, CLKOUT1 high to ASOE_ valid
      <br/>
      --  1.9    ns
      <br/>
      -- 8      td (CKH-WE) Delay time, CLKOUT1 high to ASWE_ valid
      <br/>
      --  2.0    ns
      <br/>
      -- 9      td (CKH-XREQ) Delay time, CLKOUT1 high to XREQ_ valid
      <br/>
      --  1.3    ns
      <br/>
      -- 10  tsu (XRDY-CKH) Setup time, read XRDY valid before CLKOUT1 high 0.5
      <br/>
      --            ns
      <br/>
      -- 11  th (CKH-XRDY) Hold time, read XRDY valid after CLKOUT1 high 2.8
      <br/>
      --         ns
    </p>
    <p num="288">FIG. 41 depicts external controller read cycle timings and FIG. 42 depicts external controller write cycle timings.</p>
    <p num="289">
      FIGS. 43 and 44 show read and write cycles transferring data between the DSP and SBSRAM.
      <br/>
      The SBSRAM interface consists of 4 dedicted SBSRAM control signals.
      <br/>
      The address strobe, SSADS_, is used to latch the first address of the burst transfer into the SBSRAM device.
      <br/>
      For write cycle it is asserted continuously as long as data is being transferred.
      <br/>
      Forv read cycles the SSADS_signal is only asserted for the first word of the burst transfer and for each time when the address breaks the sequence.
      <br/>
      The burst size (1 to 4 reads) is determined by the two lowest order bits of the
    </p>
    <p num="290">Tuning Parameters for Synchronous Burst SRAM (SBSRAM) Cycles</p>
    <p num="291">
      --
      <br/>
      -- NO                                                       min    max    unit
      <br/>
      -- 1      td (CKH-CE) Delay time, CLKOUT1 high to CE_ valid        1.9
      <br/>
      --  ns
      <br/>
      -- 2      td (CKH-BE) Delay time, CLKOUT1 high to BE_ valid        2.2
      <br/>
      --  ns
      <br/>
      -- 3      td (CKH-A) Delay time, CLKOUT1 high to A valid 0      1.7    ns
      <br/>
      -- 4      td (CKH-D) Delay time, CLKOUT1 high to D valid 0      2.0    ns
      <br/>
      -- 5      tsu (D-CKH) Setup time, read D before CLKOUT1 high 0.5
      <br/>
      --   ns
      <br/>
      -- 6      th (CKH-D) Hold time, read D valid after CLKOUT1 high 2.0
      <br/>
      --      ns
      <br/>
      -- 7      td (CKH-ADS) Delay time, CLKOUT1 high to SSADS_ valid
      <br/>
      --  1.5    ns
      <br/>
      -- 8      td (CKH-ADV) Delay time, CLKOUT1 high to SSADV_ valid
      <br/>
      --  1.8    ns
      <br/>
      -- 9      td (CKH-SSOE) Delay time, CLKOUT1 high to SSOE_ valid
      <br/>
      --  2.1    ns
      <br/>
      -- 10  td (CKH-SSWE) Delay time, CLKOUT1 high to SSWE_ valid        2.0
      <br/>
      --   ns
      <br/>
      -- The SSADS_ signal is pulsed each time the address crosses the modulo 4
      <br/>
      --  boundary (EA0 and EA1 are 0) and during the first access at the beginning
      <br/>
      --  of a burst (see FIG. 8).
    </p>
    <p num="292">FIG. 43 depicts SBSRAM Read Cycle Timing and FIG. 44 depicts SBSRAM Write Cycle Timing.</p>
    <p num="293">
      For the DSP, the SDRAM cycles are limited to non-burst operation.
      <br/>
      Both read and write cycles consist of 3 commands sent sequentially to the SDRAM device (see FIGS. 45 and 46).
      <br/>
      Each of the commands is encoded by a different mix of signal levels on CE_, SDA10, SDRAS_, SDCAS_ and SDWE_control lines.
      <br/>
      First the ACTV command activates one of two SDRAM internal banks.
      <br/>
      The READ or WRITE commands transfer data between the DSP and the SDRAM memory.
      <br/>
      Finally, the DCAB command deactivates both banks of the SDRAM (banks A and B).
      <br/>
      The SDRAM uses CLKOUT2 clock to transfer data and to latch commands.
      <br/>
      In case of the read cycle, the data is driven on the bus by the SDRAM exactly 2 CLKOUT2 cycles following the rising edge of SDCAS_. This read LATENCY has been programmed into the SDRAM by the DSP at the time of SDRAM initialization.
    </p>
    <p num="294">
      The BE_control signals behave differently during SDRAM cycles then they do for other types of memory.
      <br/>
      Each BE_signal should be connected to the corresponding SDRAM DQM input.
      <br/>
      For reads, the SDQM controls become Output Enables and for the writes they assume the function of Write Masking. (associated with burst operation of SDRAM).
    </p>
    <p num="295">
      FIG. 47 shows the initialization commands sent to the SDRAM following Reset.
      <br/>
      First, both banks of the SDRAM are deactivated with the DCAB command.
      <br/>
      Next, 8 refresh cycled are issued, followed by the MRS (Mode Register Set) command that initializes control registers inside the SDRAM in accordance with the values stored in the appropriate EMIF registers.
      <br/>
      During the MRS command the SDRAM initialization data is actually output on the Address Bus instead of Data Bus.
    </p>
    <p num="296">
      The SDRAM device must be periodically refreshed.
      <br/>
      Since one of the pins, EA10, is involved in refresh operation, it has been duplicated exclusive use of the SDRAM interface as SDA10 in order not to interfere with other Memory Cycles that may be active during refresh.
      <br/>
      FIG. 48 shows a SDRAM refresh cycle in the middle of Asynchronous Memory read sequence.
      <br/>
      Two commands are issued to the SDRAM during a single refresh cycle.
      <br/>
      The first one deactivates both SDRAM banks (DCAB), and the second one performs a CAS before RAS refresh.
      <br/>
      It is evident in the figure that despite the use of Address pin EA10 by the DCAB command, the Asynchronous Memory read cycles are progressing uninterrupted via the duplicate pin SDA10.
    </p>
    <p num="297">Parameters for Synchronous DRAM (SDRAM) Cycles</p>
    <p num="298">
      --
      <br/>
      -- NO                                                       min    max    unit
      <br/>
      -- 1      td (CKH-CE) Delay time, CLKOUT1 high to CE_ valid        1.9
      <br/>
      --  ns
      <br/>
      -- 3      td (CKH-A) Delay time, CLKOUT1 high to A valid 0      1.7    ns
      <br/>
      -- 4      td (CKH-D) Delay time, CLKOUT1 high to D valid 0      2.0    ns
      <br/>
      -- 5      tsu (D-CKH) Setup time, read D before CLKOUT1 high 0.5
      <br/>
      --   ns
      <br/>
      -- 6      th (CKH-D) Hold time, read D valid after CLKOUT1 high 2.0
      <br/>
      --      ns
      <br/>
      -- 7      td (CKH-SDA10) Delay time, CLKOUT1 high to SDA10_ valid
      <br/>
      --  1.5    ns
      <br/>
      -- 8      td (CKH-SDRAS) Delay time, CLKOUT1 high to SDRAS_ valid
      <br/>
      --  1.1    ns
      <br/>
      -- 9      td (CKH-SDCAS) Delay time, CLKOUT1 high to SDCAS_ valid
      <br/>
      --  1.3    ns
      <br/>
      -- 10  td (CKH-SDWE) Delay time, CLKOUT1 high to SDWE_ valid        1.1
      <br/>
      --   ns
      <br/>
      -- 11  td (CKH-SDCKE) Delay time, CLKOUT1 high to SDCKE          1.3
      <br/>
      --  ns
    </p>
    <p num="299">FIG. 45 depicts SDRAM Read Cycle Timing; FIG. 46 depicts SDRAM Write Cycle Timing; FIG. 47 depicts SDRAM Initialization Cycle Timing; and FIG. 48 depicts SDRAM Refresh Cycle Timing.</p>
    <p num="300">
      An external interrupt event is triggered by a high pulse on the INTx signal.
      <br/>
      If on one rising edge of the CLKOUT1 the INTx is recognized as low, and on the next CLKOUT1 rising edge the INTx is recognized as high, the external interrupt is detected.
      <br/>
      As early as three cycles later, the IACK signal may pulse for one cycle with the number of the active interrupt encoded on the 4 INUM lines.
      <br/>
      The IACK and INUM signals indicate the start of any interrupt processing, not just for external interrupts.
      <br/>
      The INUM identification number reflects the relative bit position of the processed interrupt within the IFR (Interrupt Flag Register).
      <br/>
      Also, one cycle prior to the IACK pulse, all instructions (except branch delay slots) that have not reached the execution stage are annulled and the address of the annulled instruction closest to execution stage is saved in the appropriate Interrupt Return Pointer (IRP or NRP).
      <br/>
      The instructions that already have begun executing, will complete the remaining execution stages while the Interrupt Service Fetch Packet is being fetched and decoded.
      <br/>
      During the 7 fetch/decode cycles the processor will not start processing any new instructions (hence the 7 cycle interrupt overhead).
      <br/>
      The Interrupt Service Fetch Packet starts executing on the 7th cycle following IACK (see FIG. 49).
    </p>
    <p num="301">Timing Parameters for the Interrupt Response Cycle</p>
    <p num="302">
      --
      <br/>
      -- NO                                                           min    max
      <br/>
      --  unit
      <br/>
      -- 1      tr (IACK) Response time, IACK high after INTx_ high 3
      <br/>
      --    cycles
      <br/>
      -- 2      tw (IDEAD) Width of the interrupt overhead (no instructions 7
      <br/>
      --     7      cycles
      <br/>
      --                       executed)
      <br/>
      -- 3      tr (ISFP) Response time, Interrupt Service Fetch Packet 9
      <br/>
      --        cycles
      <br/>
      --                       execution after INTX_ high
      <br/>
      -- 4      tw (INTR) Width of the interrupt pulse            1
      <br/>
      --  cycles
      <br/>
      -- 5      tw (ILOW) Width of the low state preceding the interrupt pulse
      <br/>
      --  1             cycles
      <br/>
      -- 6      tsu (IHIGH-CKH) Setup time, INTx_ low before CLKOUT1 high 0.3
      <br/>
      --          ns
      <br/>
      -- 7      th (CKH-ILOW) Hold time, INTx_ low after CLKOUT1 high 3.0
      <br/>
      --      ns
      <br/>
      -- 8      td (CKH-IACK) Delay time, CLKOUT1 high to IACK valid         1
      <br/>
      --      ns
      <br/>
      -- 9      td (CKH-INUM) Delay time, CLKOUT1 high to INUM valid         1
      <br/>
      --      ns
    </p>
    <p num="303">
      The RESET_signal is sampled on every rising edge of CLKOUT1.
      <br/>
      If it is detected active (low), all EMIF output signals except HOLDA , as well as all Host Port Interface output signals are tri-stated on the following CLKOUT1 rising edge.
      <br/>
      After the Reset is deasserted, the tri-stated signals will be driven again by the DSP within 1 clock cycle (see FIG. 50).
    </p>
    <p num="304">
      Typically, the PLL will lock-up to the specified output frequency within seconds following device power-up.
      <br/>
      The actual time will depend on the perating mode chosen and the CLKIN/CLKOUT1 frequency range.
    </p>
    <p num="305">Note, that HOLD/HOLDA logic is not affected by the state of the RESET signal.</p>
    <p num="306">Timing Parameters for the Reset Cycle</p>
    <p num="307">
      --
      <br/>
      -- NO                                                              min    max
      <br/>
      --    unit
      <br/>
      --  1 tsu (CKH-RESET) Setup time, RESET before CLKOUT1 high      1
      <br/>
      --  ns
      <br/>
      --  2 t2 (RESET)  Width of the RESET pulse (PLL stable)
      <br/>
      --  10.dagger-dbl.        cycles
      <br/>
      --  3 tv (CLKOUT) Valid time, CLKOUT1/2 after RESET_ low (after
      <br/>
      --  10.dagger-dbl.        cycles
      <br/>
      --                         power-up)
      <br/>
      --  5 td (CKH-CE) Delay time, CLKOUT1 high to CE_ tri-stated/driven
      <br/>
      --   5      ns
      <br/>
      --  6 td (CKH-BE) Delay time, CLKOUT1 high to BE_ tri-stated/driven
      <br/>
      --   5      ns
      <br/>
      --  7 td (CKH-A)  Delay time, CLKOUT1 high to A tri-stated/driven  0 5
      <br/>
      --    ns
      <br/>
      --  8 td (CKH-D)  Delay time, CLKOUT1 high to D tri-stated/driven  0 5.1
      <br/>
      --    ns
      <br/>
      --  9 td (CKH-XREQ) Delay time, CLKOUT1 high to XREQ_ tri-           5
      <br/>
      --    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 10     td (CKH-OE) Delay time, CLKOUT1 high to ASOE_ tri-           5
      <br/>
      --      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 11     td (CKH-WE) Delay time, CLKOUT1 high to ASWE_ tri-           5
      <br/>
      --      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 12     td (CKH-ADS) Delay time, CLKOUT1 high to SSADS_ tri-          5
      <br/>
      --       ns
      <br/>
      --                         stated/driven
      <br/>
      -- 13     td (CKH-ADV) Delay time, CLKOUT1 high to SSADV_ tri-          5
      <br/>
      --       ns
      <br/>
      --                         stated/driven
      <br/>
      -- 14     td (CKH-SSOE) Deiay time, CLKOUT1 high to SSOE_ tri-
      <br/>
      --  5      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 15     td (CKH-SSWE) Delay time, CLKOUT1 high to SSWE_ tri-
      <br/>
      --  5      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 16     td (CKH-SDA10) Delay time, CLKOUT1 high to SDA10 tri-
      <br/>
      --  5      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 17     td (CKH-SDRAS) Delay time, CLKOUT1 high to SDRAS_ tri-
      <br/>
      --  5      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 18     td (CKH-SDCAS) Delay time, CLKOUT1 high to SDCAS_ tri-
      <br/>
      --  5      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 19     td (CKH-SDWE) Delay time, CLKOUT1 high to SDWE_ tri-
      <br/>
      --  5      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 20     td (CKH-SDCKE) Delay time, CLKOUT1 high to SDA10 tri-
      <br/>
      --  5      ns
      <br/>
      --                         stated/driven
      <br/>
      -- 21     td (CKH-SHD) Delay time, CLKOUT1 high to HD tri-stated/driven
      <br/>
      --  0 5      ns
      <br/>
      -- 22     td (CKH-HACK) Delay time, CLKOUT1 high to HACK low/driven
      <br/>
      --   5      ns
      <br/>
      -- 23     td (RESET-TRI) Delay time, RESET low to signals tri-stated (or
      <br/>
      --        2      cycles
      <br/>
      --                         driven low - HACK)
      <br/>
      -- 24     td (RESET-DRV) Delay time, RESET high to signals driven  2
      <br/>
      --         cycles
      <br/>
      -- + The RESET_ signal is not internally connected to the clock PLL circuit.
      <br/>
      --  The PLL, however, may need up to 250 us to stabilize following device
      <br/>
      --  power-up or after PLL configuration has been changed.
      <br/>
      During that time
      <br/>
      --  RESET_ has to be asserted to assure proper device operation.
      <br/>
      See the PLL
      <br/>
      --  section of the Data Sheet for PLL lock times.
    </p>
    <p num="308">
      HOLD/HOLDA cycles are used by the host to electrically disconnect the DSP from the system in order for the host processor to directly access system resources.
      <br/>
      As shown on FIG. 51., HOLD/HOLDA cycles tri-state all output signals on the EMIF (except HOLDA) and the HPI.
      <br/>
      To request the bus, the host processor drives the HOLD signal high.
      <br/>
      When the DSP is ready, it will respond by tri-stating the EMIF and HPI busses and asserting the HOLDA signal to announce to the Host that the buses are no longer driven.
      <br/>
      The host has the permission to use the buses as long as both HOLD and HOLDA control signals are high.
      <br/>
      Once the HOLD signal is de-asserted, the DSP responds by bringing the HOLDA signal low at which point it resumes driving the EMIF and HPI outputs.
    </p>
    <p num="309">Note, that HOLD/HOLDA logic is not affected by the state of the RESET_signal.</p>
    <p num="310">Parameters for the Hold/Hold Acknowledge Cycle</p>
    <p num="311">
      --
      <br/>
      -- NO                                                              min    max
      <br/>
      --    unit
      <br/>
      --  1 tsu (CKH-HOLD) Setup time, HOLD valid before CLKOUT1 high 1.5
      <br/>
      --      ns
      <br/>
      --  2 tr (HOLDA)  Response time, HOLD high to HOLDA high    3
      <br/>
      --  cycles
      <br/>
      --  3 td (BUS)    Delay time, HOLDA low to EMIF bus driven         1.5
      <br/>
      --  cycles
      <br/>
      --  4 td (HOLDA)  Delay time, CLKOUT1 high to HOLDA valid          3.1
      <br/>
      --  ns
      <br/>
      --  5 td (CKH-CE) Delay time, CLKOUT1 high to CE_ tri-stated/driven
      <br/>
      --   3.1    ns
      <br/>
      --  6 td (CKH-BE) Delay time, CLKOUT1 high to BE_ tri-stated/driven
      <br/>
      --   3.1    ns
      <br/>
      --  7 td (CKH-A)  Delay time, CLKOUT1 high to A tri-stated/driven 0
      <br/>
      --  3.1    ns
      <br/>
      --  8 td (CKH-D)  Delay time, CLKOUT1 high to D tri-stated/driven 0
      <br/>
      --  4.5    ns
      <br/>
      --  9 td (CKH-XREQ) Delay time, CLKOUT1 high to XREQ_ tri-           3.1
      <br/>
      --    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 10     td (CKH-OE) Delay time, CLKOUT1 high to ASOE_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 11     td (CKH-WE) Delay time, CLKOUT1 high to ASWE_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 12     td (CKH-ADS) Delay time, CLKOUT1 high to SSADS_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 13     td (CKH-ADV) Delay time, CLKOUT1 high to SSADV_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 14     td (CKH-SSOE) Delay time, CLKOUT1 high to SSOE_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 15     td (CKH-SSWE) Delay time, CLKOUT1 high to SSWE_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 16     td (CKH-SDA10) Delay time, CLKOUT1 high to SDA10 tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 17     td (CKH-SDRAS) Delay time, CLKOUT1 high to SDRAS_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 18     td (CKH-SDCAS) Delay time, CLKOUT1 high to SDCAS_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 19     td (CKH-SDWE) Delay time, CLKOUT1 high to SDWE_ tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
      <br/>
      -- 20     td (CKH-SDCKE) Delay time, CLKOUT1 high to SDA10 tri-
      <br/>
      --  3.1    ns
      <br/>
      --                         stated/driven
    </p>
    <p num="312">
      FIGS. 52 and 53 show read and write cycles via the 16-bit Host Port depicted in FIG. 54. The DSP rev A HPI provides host access to the internal Data Memory.
      <br/>
      Before the data transfer can proceed, the host has to obtain permission from the Data Memory Controller which may take some time to respond, depending on the similar requests for access from the CPU or the DMA.
      <br/>
      In order to request access to Data Memory, the host asserts the HREQ control signal.
      <br/>
      When the DMC is ready to grant access to the host, it drives the HACK signal high.
      <br/>
      At that point the host has ownership of the DSP internal Data Memory.
      <br/>
      When data transfer has completed, the host deasserts the HREQ signal.
      <br/>
      After the DSP senses change in the state of the HREQ signal, it returns the HACK signal to the low state and regains control of the internal Data Memory.
      <br/>
      Note that, while the timing of the handshaking signals HREQ and HACK is specified relative to the rising edge of CLKOUT1, the rest of the Host Port timing parameters are specified in CLKOUT1 clock cycles.
    </p>
    <p num="313">Parameters for the Host Port Cycles</p>
    <p num="314">
      --
      <br/>
      -- NO                                                              min    max
      <br/>
      --    unit
      <br/>
      --  1 tsu (HREQ-CKH) Setup time, HREQ valid before CLKOUT1 high 1
      <br/>
      --      ns
      <br/>
      --  2 td (CKH-HACK) Delay time, CLKOUT1 high to HACK valid           1
      <br/>
      --    ns
      <br/>
      --  3 tr (HACK)   Response time, HREQ high to HACK high     7
      <br/>
      --  cycles
      <br/>
      --  4 tsu (HA-HRW) Setup time, HA valid before HR/HW low     2
      <br/>
      --   cycles
      <br/>
      --  5 th (HA-HRW) Hold time, HA valid after HR/HW high      0
      <br/>
      --  cycles
      <br/>
      --  6 tw (HRW)    Width of HR and HW pulse                  8
      <br/>
      --  cycles
      <br/>
      --  7 tsu (HDHIZ-HR) Setup time, HD high impedance (not driven by C6X) 0
      <br/>
      --             cycles
      <br/>
      --                         before HR low
      <br/>
      --  8 td (HR-HDHIZ) Delay time, HD high impedance after HR high 1      2
      <br/>
      --      cycles
      <br/>
      --  9 td (HRL-HD) Delay time, HR low to HD valid                   6
      <br/>
      --  cycles
      <br/>
      -- 10     tv (HRH-HD) Valid time, HD after HR high              1      2
      <br/>
      --      cycles
      <br/>
      -- 11     tsu (HD-HW) Setup time, HD valid before HW low        2
      <br/>
      --      cycles
      <br/>
      -- 12     th (HD-HW)  Hold time, HD valid after HW high         0
      <br/>
      --      cycles
      <br/>
      -- 13     tn (HRW)    Period between Consecutive Read and Write Cycles 12
      <br/>
      --          cycles
    </p>
    <p num="315">
      The data memory system is shown in FIG. 55. The data memory system includes a 64K byte memory, split up into four banks, and a data memory controller.
      <br/>
      The CPU can access data memory in 8-bit byte, 16-bit halfword, and 32-bit word-lengths.
      <br/>
      The data memory system supports two memory accesses in a cycle.
      <br/>
      These accesses can be any combination of loads and stores from the CPU's LD1 or LD2 and ST1 or ST2 data paths.
      <br/>
      Similarly, a simultaneous internal and external memory access is supported by the data memory system.
      <br/>
      The data memory system also supports DMA and external host accesses.
      <br/>
      The operation of the DMA and host port are described in other chapters in this book.
    </p>
    <p num="316">
      The data memory is organized into four banks of 16-bit wide memory.
      <br/>
      This interleaved memory organization provides a method for two simultaneous memory accesses.
      <br/>
      Occurring in one cycle, two simultaneous accesses to two different internal memory banks will provide the fastest access speed.
      <br/>
      Two simultaneous accesses to the same internal memory bank will stall the CPU for one cycle, providing two accesses in two cycles.
      <br/>
      For a simultaneous load and store to the same internal memory bank, the load will be serviced before the store.
    </p>
    <p num="317">
      A memory bank conflict will occur when two simultaneous accesses are made to the same memory bank.
      <br/>
      The data memory controller must stall the CPU, serialize the accesses, and perform each access separately when a bank conflict occurs.
      <br/>
      Whether two simultaneous accesses will conflict depends on the size of each of the accesses, and the address of each access.
      <br/>
      FIG. 56 shows the different combinations of conflicting accesses if both CPU data paths (LD1/ST1 and LD2/ST2) attempt to access internal data memory in the same cycle.
      <br/>
      If only one data path makes an access, then no bank conflict will occur.
      <br/>
      If two simultaneous accesses occur, one to internal data memory and one to external memory a bank conflict will not occur, but the data memory controller will stall the CPU until the external access has completed.
    </p>
    <p num="318">Data Endianness</p>
    <p num="319">Two standards for data ordering in byte-addressable microprocessors exist:</p>
    <p num="320">Little Endian</p>
    <p num="321">Big Endian</p>
    <p num="322">Byte ordering within word and half-word data resident in memory is identical for little endian and big endian data.</p>
    <p num="323">Little Endian</p>
    <p num="324">Little endian byte order puts the byte whose address is "xxxx xx00" at the least significant position in the word (the little end).</p>
    <p num="325">Little endian data is addressed by the byte address of the least significant byte.</p>
    <p num="326">Big Endian</p>
    <p num="327">Big endian byte order puts the byte whose address is "xxxx xx00" at the most significant position in the word (the big end).</p>
    <p num="328">Big endian data is addressed by the byte address of the most significant byte.</p>
    <p num="329">
      The DSP can access either big endian or little endian data to have compatible shared data spaces with other processors.
      <br/>
      The EN bit in the Control Status Register (CSR) determines the data endianness of the DSP.
      <br/>
      The EN bit in the Control Status Register latches the value on the signal which sets the data endianness at CPU reset.
      <br/>
      The EN bit is read only and only affects data which is loaded or stored external to the CPU.
      <br/>
      The CPU places data on the appropriate data lines, and activates the proper byte strobe signals for either big endian or little endian data accesses external to the CPU as specified by the EN bit.
    </p>
    <p num="330">
      Table 32 shows which bits of a data word in memory are loaded into which bits of a destination register for all possible data loads from big or little endian data.
      <br/>
      The data in memory is assumed to be the same data that is in the register results from the LDW instruction in the first row.
    </p>
    <p num="331">
      -- TABLE 32
      <br/>
      -- Register Contents After
      <br/>
      -- Little Endian or Big Endian Data Loads
      <br/>
      --           Address Bits   Big Endian Register Little Endian
      <br/>
      -- Instruction (1:0)          Register Result  Register Result
      <br/>
      -- LDW       00             BA987654h        BA987654h
      <br/>
      -- LDH       00             FFFFBA98h        00007654h
      <br/>
      -- LDHU      00             0600BA98h        00007654h
      <br/>
      -- LDH       10             00007654h        FFFFBA98h
      <br/>
      -- LDHU      10             00007654h        0000BA98h
      <br/>
      -- LDB       00             FFFFFFBAh        00000054h
      <br/>
      -- LDBU      00             000000BAh        00000054h
      <br/>
      -- LDB       01             FFFFFF98h        00000076h
      <br/>
      -- LDBU      01             00000098h        00000076h
      <br/>
      -- LDB       10             00000076h        FFFFFF98h
      <br/>
      -- LDBU      10             00000076h        00000098h
      <br/>
      -- LDB       11             00000054h        FFFFFFBAh
      <br/>
      -- LDBU      11             00000054h        000000BAh
      <br/>
      -- Note: The contents of the word in data memory at location "xxxx xx00" is
      <br/>
      --  BA987654h.
    </p>
    <p num="332">
      Table 33 shows which bits of a register are stored in which bits of a destination memory word for all possible data stores from big and little endian data.
      <br/>
      The data in the source register is assumed to be the same data that is in the memory results from the STW instruction in the first row.
    </p>
    <p num="333">
      -- TABLE 33
      <br/>
      -- Memory Contents After
      <br/>
      -- Little Endian or Big Endian Data Stores
      <br/>
      --           Address     Big Endian Memory Little Endian Memory
      <br/>
      -- Instruction Bits (1:0)  Result           Result
      <br/>
      -- STW       00          BA987654h        BA987654h
      <br/>
      -- STH       00          76541970h        01127654h
      <br/>
      -- STH       10          01127654h        76541970h
      <br/>
      -- STB       00          54121970h        01121954h
      <br/>
      -- STB       01          01541970h        01125470h
      <br/>
      -- STB       10          01125470h        01541970h
      <br/>
      -- STB       11          01121954h        54121970h
      <br/>
      -- Note: The contents of the word in data memory at location "xxxx xx00"
      <br/>
      --  before the ST instruction executes is 01121970h.
      <br/>
      The contents of the
      <br/>
      --  source register is BA987654h.
    </p>
    <p num="334">Peripheral Bus</p>
    <p num="335">
      The DSP also controls a peripheral bus which transfers data to and from the memory-mapped peripherals on the device.
      <br/>
      These peripherals include the DMA, external memory interface, and host port.
      <br/>
      The addresses accessed through the peripheral bus are used to configure these peripherals.
      <br/>
      Peripheral bus accesses can only be word wide and must be executed on Data Path B of the CPU.
    </p>
    <p num="336">
      The DSP program memory system includes 64K bytes of memory and a memory/cache controller.
      <br/>
      The program memory can operate as either a 64K byte internal program memory or as a direct mapped program cache.
      <br/>
      There are four modes under which the program memory system operates: program memory mode; cache enable mode; cache freeze mode; and cache bypass mode.
    </p>
    <p num="337">
      FIG. 57 shows the control status register (CSR) for the CPU.
      <br/>
      The mode under which the program memory operates is determined by the program cache control (PCC) field (bits 5-7) in the CSR.
    </p>
    <p num="338">Table 34 shows which PCC values are supported by the TMS320C6201 program memory system.</p>
    <p num="339">
      -- TABLE 34
      <br/>
      -- Program Memory System Control Encoding
      <br/>
      -- PCC Value   Program Mode   Description
      <br/>
      -- 000         Program Memory Memory is mapped as program memory space.
      <br/>
      Cache
      <br/>
      --  modes disabled.
      <br/>
      --                            (value at reset)
      <br/>
      -- 001         Reserved       Not supported on TM5320C6201.
      <br/>
      -- 010         Cache Enable   Cache accessed and updated on reads.
      <br/>
      -- 011         Cache Freeze   Cache accessed but not updated on reads.
      <br/>
      -- 100         Cache Bypass   Cache not accessed or updated on reads.
      <br/>
      -- 101         Reserved       Not supported on TMS320C6201.
      <br/>
      -- 110         Reserved       Not supported on TMS320C6201.
      <br/>
      -- 111         Reserved       Not supported on TMS320C6201.
    </p>
    <p num="340">
      When the PCC field of the CSR contains the value 000b, the program memory is mapped as valid program memory space.
      <br/>
      The addresses that make up the program memory map depend on the value on the MAP_BOOT pin on the device.
      <br/>
      Table 35 shows the memory address space for the on-chip program memory in program memory mode according to the map mode value.
    </p>
    <p num="341">
      -- TABLE 35
      <br/>
      -- Program Memory Address Map
      <br/>
      --        MAP_BOOT Value   Program RAM Byte Addresses
      <br/>
      --        0                1400000h-140FFFFh
      <br/>
      --        1                0000000h-000FFFFh
      <br/>
      -- Note: Only a MAP_BOOT value of 1 can be used for bootloading.
    </p>
    <p num="342">
      The DMA can write data into an addressed space of program memory.
      <br/>
      The DMA cannot read from the internal program memory in program memory mode.
    </p>
    <p num="343">
      At reset, the program memory system is in program memory mode.
      <br/>
      This allows the DMA to bootload code into the internal program memory.
      <br/>
      See the DMA chapter for more information on bootloading code.
    </p>
    <p num="344">A program store, accomplished by executing a STP instruction, in program memory mode will store the appropriate value to the addressed memory location.</p>
    <p num="345">
      When the PCC field of the CSR contains a cache mode value, the program memory is used to cache external program data.
      <br/>
      The memory is no longer in valid memory space and cannot be directly addressed, therefore the DMA cannot write or read the internal program memory in any cache mode.
      <br/>
      The caching scheme implemented in the TMS320C6201 program cache is a direct mapping of external program memory addresses to cache memory addresses.
      <br/>
      This means that any external address will map to only one cache location, and addresses which are 64K bytes apart will map to the same cache location.
      <br/>
      The program cache is organized into 256-bit frames.
      <br/>
      Thus, each frame holds one fetch packet.
      <br/>
      The cache stores 2048 fetch packets.
    </p>
    <p num="346">
      A program store to external memory in any cache mode will first flush the data in the cache frame that is direct mapped to the target address.
      <br/>
      This is done to ensure data coherency in the cache.
      <br/>
      The data is then written to the external memory at the addressed location.
      <br/>
      When that address is again accessed a cache miss occurs causing the stored data to be loaded from external memory.
    </p>
    <p num="347">
      When the PCC field of the CSR contains the value 010b, the program memory is enabled as a cache.
      <br/>
      On the change from program memory mode to cache enabled mode, the program cache is flushed.
      <br/>
      The only method supported by the DSP for flushing the cache is a change from program memory mode to cache enabled mode.
      <br/>
      In cache enabled mode, any initial program fetch of an address will cause a cache miss to occur.
      <br/>
      In a cache miss, data is loaded from external program memory, stored in the internal cache memory, and then executed by the CPU.
      <br/>
      Any subsequent read from a cached address will cause a cache hit and that data will be loaded from the internal cache memory.
    </p>
    <p num="348">
      When the PCC field of the CSR contains the value 011b, the program cache is frozen.
      <br/>
      During a cache freeze, the cache retains it's current state.
      <br/>
      A program read to a frozen cache is identical to a read to an enabled cache with the exception that on a cache miss the data read from the external memory interface is not stored in the cache.
      <br/>
      A subsequent read of the same address will also cause a cache miss and the data will again be fetched from external memory.
      <br/>
      Cache freeze mode is useful to ensure that critical program data is not overwritten in the cache, but can cause less than optimal code performance.
    </p>
    <p num="349">
      When the PCC field of the CSR contains the value 101b, the program cache is bypassed.
      <br/>
      When the cache is bypassed, any program read will fetch data from external memory.
      <br/>
      The data is not stored in the cache memory.
      <br/>
      Like cache freeze, in cache bypass the cache retains it's state.
      <br/>
      This mode is useful to ensure that external program data is being fetched.
      <br/>
      Performance will be sub-optimal as all program fetches will occur from external memory, regardless of whether they cause a cache hit.
    </p>
    <p num="350">The external memory interface (EMIF) makes it possible to interface the DSP to multiple types of external memory: synchronous devices--this interface is programmable to adapt to a variety of setup, hold, and strobe widths; synchronous burst SRAM (SBSRAM)--SBSRAM supports zero-wait state external access once bursts have begun; synchronous DRAM (SDRAM); and 8-bit and 16-bit wide memory read capability to support low-cost boot ROM memories (FLASH, EEPROM, EPROM, and PROM).</p>
    <p num="351">Additional features of the EMIF include: bus request feature for shared control of external memory; and an externally controlled I/O timing for I/O devices and external memory controllers.</p>
    <p num="352">
      In all of these types of access, the EMIF supports 8-bit, 16-bit, and 32-bit addressability for writes.
      <br/>
      All reads are performed as 32-bit transfers.
    </p>
    <p num="353">
      The EMIF can receive three types of requests for access.
      <br/>
      The three types are prioritized for in the order below.
    </p>
    <p num="354">1) CPU Data Accesses</p>
    <p num="355">2) CPU Program Fetches</p>
    <p num="356">3) DMA Data Accesses</p>
    <p num="357">
      When available to service another access, the EMIF services the request type of highest priority.
      <br/>
      For example, DMA requests will not be serviced until the CPU ceases requesting external data and program fetches.
    </p>
    <p num="358">
      FIG. 58 shows a diagram of the external memory signals that are common to all interfaces.
      <br/>
      Table 37 describes each of the depicted signals.
      <br/>
      Table 36 shows the interfaces supported by each of the three external memory spaces (0-2).
      <br/>
      Spaces 0 and 2 are intended for a variety of interfaces.
      <br/>
      Space 1 is intended for asynchronous memories including low-cost ROM storage.
    </p>
    <p num="359">FIG. 58 depicts an external memory interface (EMIF) block diagram.</p>
    <p num="360">
      -- TABLE 36
      <br/>
      -- Interfaces Supported by the External Spaces
      <br/>
      --               Data Bus
      <br/>
      --               Width
      <br/>
      --               Supported   Memory Types                       Size
      <br/>
      --    Type
      <br/>
      --        Enable  32-  16-  8-   and Interface Features Supported
      <br/>
      --  Configuration    Configuration
      <br/>
      -- Space  Signal  bit  bit  bit  Async.  SBSRAM    SDRAM     I/O  Hold
      <br/>
      --  Signals          Signals
      <br/>
      -- 0      CE0     4?            4       4         4         4    4
      <br/>
      --  none             CE0_TYPE�1:0�
      <br/>
      -- 1      CE1     4    4    4    4                                4
      <br/>
      --  CE1_WIDTH��1:0� none
      <br/>
      -- 2      CE2     4              4       4         4         4    4      none
      <br/>
      --             CE2_TYPE�1:0�
      <br/>
      -- 4 indicates supported.
    </p>
    <p num="361">
      -- TABLE 37
      <br/>
      -- External Memory Interface Signal
      <br/>
      -- Signal Name   Bits   I/O/Z?  Description
      <br/>
      -- ED�31:0� 32  I/O/Z   External data.
      <br/>
      Receives data from and transmits data
      <br/>
      --  to EMIF.
      <br/>
      -- EA�22:0� 23  O/Z     External word address.
      <br/>
      Selects location for read or
      <br/>
      --  write
      <br/>
      -- BE�3:0� 4      O/Z     External interface byte enables for write access.
      <br/>
      --  Read accesses are always 32-
      <br/>
      --                              bit wide.
      <br/>
      Active-low.
      <br/>
      -- CE0/1/2       1      O/Z     External space 0/1/2 chip enable.
      <br/>
      Asserted
      <br/>
      --  when memory access address is in
      <br/>
      --                              Space 0/1/2, respectively.
      <br/>
      Active-low.
      <br/>
      -- HOLD          1      I       External hold bus request.
      <br/>
      Asserted by
      <br/>
      --  external device to allow control of the
      <br/>
      --                              other devices connected to the EMIF.
      <br/>
      --  Requesting device must wait for an
      <br/>
      --                              asserted HOLDA before it assumes control.
      <br/>
      --  Active-high.
      <br/>
      -- HOLDA         1      0       External hold acknowledge.
      <br/>
      Signals external
      <br/>
      --  device asserting HOLD that
      <br/>
      --                              EMIF signals are no longer driven by DSP.
      <br/>
      --  Active-high
      <br/>
      -- CE0_TYPE      2      I       External memory space 0/2 type configuration.
      <br/>
      --  Selects type of memory used
      <br/>
      -- CE2_TYPE                     by accesses to addresses in Space 0/2.
      <br/>
      --                              00 - Asynchronous memory.
      <br/>
      --                              01 - SBSRAM.
      <br/>
      --                              10 - Reserved.
      <br/>
      --                              11 - SDRAM.
      <br/>
      -- CE1_WIDTH     2      I       External space 1 width configuration.
      <br/>
      Selects
      <br/>
      --  width of devices in Space 1.
      <br/>
      --                              Read accesses to this space are assembled from
      <br/>
      --  multiple accesses if dictated
      <br/>
      --                              by the width.
      <br/>
      External Space 1 is always
      <br/>
      --  configured to access asynchronous
      <br/>
      --                              memory (including ROM).
      <br/>
      --                              00 - 8-bit wide.
      <br/>
      Valid data only on ED�7:0�
      <br/>
      --                              01 - 16 bit wide.
      <br/>
      Valid data only on ED�15:0�
      <br/>
      --                              10 - 32-bit wide.
      <br/>
      Valid data only on ED�31:0�
      <br/>
      --                              11 - reserved.
      <br/>
      -- MAP_BOOT      1      I       Memory map configuration and boot DMA source
      <br/>
      --  address.
      <br/>
      Note address 0 is
      <br/>
      --                              the starting point of program execution at
      <br/>
      --  reset.
      <br/>
      --                              MAP=0 configures external memory at address 0
      <br/>
      --  and boot DMA source
      <br/>
      --                              address at 100000h.
      <br/>
      --                              MAP=1 configures internal program memory at
      <br/>
      --  address 0 and boot DMA
      <br/>
      --                              source address at 1400000h.
      <br/>
      -- LENDIAN       1      I       Endianness bit for external memory interface
      <br/>
      --  and internal data memory.
      <br/>
      --                              LENDIAN=1 selects little-endian.
      <br/>
      LENDIAN=0
      <br/>
      --  selects big-endian.
      <br/>
      -- I = input
      <br/>
      -- O = output
      <br/>
      -- Z = high-impedence state
    </p>
    <p num="362">
      The DSP is a bi-endian machine.
      <br/>
      The LENDIAN input pin selects little-endian if high and big endian if low.
      <br/>
      LENDIAN effects both the endianness of the internal data memory and external interface.
      <br/>
      Internal program memory accesses are always greater than 32-bits in width, so the endianness has no effect.
      <br/>
      Also, all external read accesses are 32-bit accesses, so the endianness does not affect read accesses.
      <br/>
      Instead, the CPU or DMA simply selects the portion of the 32-bits it needs depending on the address, access type, and the endianness.
      <br/>
      In contrast, for writes, the endianness does effect which BE signals are active-low and what values in which bit positions of external data (ED).
      <br/>
      FIG. 59 and FIG. 60 show the effect of address and endianness on BE and external data (ED).
    </p>
    <p num="363">
      Table 38 lists the external memory interface (EMIF) control registers.
      <br/>
      These registers are 32-bits wide and are expected to be accessed by 32-bit accesses from the CPU.
    </p>
    <p num="364">
      -- TABLE 38
      <br/>
      -- EMIF Control Registers
      <br/>
      -- Control Registers (32-bit wide, 4 8-bit addresses)
      <br/>
      -- EMIF Global Control Register
      <br/>
      -- EMIF Space CE1 Control Register
      <br/>
      -- EMIF Space CE0 Control Register
      <br/>
      -- EMIF Space CE2 Control Register
      <br/>
      -- EMIF SDRAM Control Register
      <br/>
      -- EMIF SDRAM Refresh Period Register
    </p>
    <p num="365">
      FIG. 61 shows the EMIF attached to an asynchronous device such as a SRAM (asynchronous) or a flash EEPROM.
      <br/>
      Table 39 describes EMIF signals specific to the asynchronous interface.
      <br/>
      Other ROM interfaces work similarly except that there is no connection for the AXWE signal.
      <br/>
      The interface is shown as connected to space CE1 which only operates with asynchronous memory types.
      <br/>
      If either space 0 or 2 were used, the CE0_TYPE and CE2_TYPE signals would be set to 00b indicating asynchronous memory.
      <br/>
      CE1_WIDTH=10b at reset, indicating a 32-bit wide device.
    </p>
    <p num="366">
      -- TABLE 39
      <br/>
      -- Asynchronous Interface Signal Description
      <br/>
      -- Signal Name Bits    O/Z     Description
      <br/>
      -- AXWE        1       O/Z     Asynchronous device write enable.
      <br/>
      --                             Active-low.
      <br/>
      -- AXOE        1       O/Z     Asynchronous device output enable.
      <br/>
      --                             Active-low.
      <br/>
      -- O = output
      <br/>
      -- Z = high-impedence state
    </p>
    <p num="367">
      Each memory space register sets configuration parameters specific to each of the external memory spaces.
      <br/>
      Specifically the bitfields in this register as shown in Table 40 and FIG. 62 set the signal setup, hold, and strobe width times for each of the various external rages.
    </p>
    <p num="368">
      The reset value for space 0 and 2 control registers is 00 for no hold time.
      <br/>
      Asynchronous SRAMS do not generally have any setup time.
      <br/>
      The reset value is 11 for space 1 Control register to provide maximum hold times for ROM memories. space 1 is used by the DMA to automatically load bootload code from.
    </p>
    <p num="369">
      -- TABLE 40
      <br/>
      -- Space Register Bitfield
      <br/>
      -- Bitfield  Description
      <br/>
      -- SETUP     SETUP+1 is the framing signal setup time in CLKOUT1
      <br/>
      --           clocks before the falling edge of the active strobe
      <br/>
      -- STROBE    STROBE+1 is the active strobe width in CLKOUT1 clocks.
      <br/>
      --           Also, applies to the width of valid address on consecutive
      <br/>
      --           reads.
      <br/>
      -- HOLD      HOLD+1 is the framing signal hold time in CLKOUT1 clocks
      <br/>
      --           after the rising edge of the active strobe.
    </p>
    <p num="370">
      The setup and hold times apply to framing signals which are:
      <br/>
      Valid ED for a write.
    </p>
    <p num="371">High impedance ED for a read.</p>
    <heading>EA</heading>
    <p num="372">
      CE0/1/2
      <br/>
      BE�3:0�
    </p>
    <p num="373">
      The inactive strobe.
      <br/>
      The inactive strobe is AXWE for a read and AXOE for a write.
    </p>
    <p num="374">
      The strobe time applies to the active strobe and the address width on consecutive read cycles.
      <br/>
      The active strobe is AXOE for a read and AXWE for a write.
    </p>
    <p num="375">
      FIG. 63 shows the bus timing of an asynchronous writes.
      <br/>
      Table 41 describes the depicted parameters.
      <br/>
      The SETUP, STROBE, and HOLD fields are assumed to be 0011b, 010b, and 01b, respectively.
      <br/>
      These values lead to setup, strobe, and hold widths of 4, 3, and 2 CLKOUT1 cycles, respectively.
      <br/>
      FIG. 63 is shown for a single write.
      <br/>
      Multiple writes would appear as repeated versions of the diagram with a hold time followed by a setup time between consecutive strobe periods.
    </p>
    <p num="376">
      -- TABLE 41
      <br/>
      -- Asynchronous Interface Signal Parameters
      <br/>
      -- Parameter Value?  Description
      <br/>
      -- tsu(AS)   c x (SETUP+1) Setup time for framing signals before the falling
      <br/>
      --  edge of the active
      <br/>
      --                         strobe.
      <br/>
      -- th(AS)    c x (HOLD+1) Hold time for framing signals after the rising edge
      <br/>
      --  of the active strobe.
      <br/>
      -- tw(AS)    c x           Width of the active strobe.
      <br/>
      Also width XADDR on
      <br/>
      --  consecutive read
      <br/>
      --           (STROBE+1) accesses.
      <br/>
      -- tsuz(AS)  c x (SETUP+1) ED out high impedance before the falling edge of
      <br/>
      --  AXOE for a read.
      <br/>
      -- tdz(AS)   c x (HOLD+1) ED in high impedance after the rising edge of AXOE
      <br/>
      --  on a read.
      <br/>
      -- c = the clock cycle time.
      <br/>
      The times given are rough in terms of clock
      <br/>
      --  cycles.
    </p>
    <p num="377">
      FIG. 64 shows three consecutive reads.
      <br/>
      Table 41 describes the depicted parameters.
      <br/>
      Again, the SETUP, STROBE, and HOLD fields are assumed to be 0011b, 010b, and 01b, respectively.
      <br/>
      In contrast to writes, consecutive asynchronous reads to the same space do not lead to periods of inactive strobe.
      <br/>
      These values lead to setup, strobe, and hold widths of 4, 3, and 2 CLKOUT1 cycles, respectively.
      <br/>
      This timing allows faster consecutive read access.
      <br/>
      However, if accesses transition across space boundaries, an intervening hold and setup time occurs between the consecutive reads, just as in consecutive write cycle.
    </p>
    <p num="378">
      When using space 1, the width of the external interface is configurable for read access.
      <br/>
      This feature allows use of inexpensive 8-bit wide memories for permanent storage of static values such as code to be boot loaded to on-chip program memory.
      <br/>
      Write-accesses are unaffected by this feature and the top 24-bits will not get written to 8-bit wide memories.
      <br/>
      Nor will any left shifting of EA occur.
    </p>
    <p num="379">
      FIG. 65 shows read access for 8-bit wide memory.
      <br/>
      Normally, EA�22:0� contains the 32-bit address.
      <br/>
      For 8-bit wide memory the logical address is left-shifted by 2 and driven on the EA.
      <br/>
      Four consecutive read accesses are completed with EA�1:0� incrementing from 00b to 01b to 10b to 11b.
      <br/>
      The data is then assembled to form a 32-bit value before being presented to the CPU or DMA for further use.
    </p>
    <p num="380">
      When using space 1, the width of the external interface is configurable for read access.
      <br/>
      This feature allows use of inexpensive 16-bit wide memories for permanent storage of static values such as code to be boot loaded to on-chip program memory.
      <br/>
      Write-accesses are unaffected by this feature and the top 16-bits will not get written to 16-bit wide memories.
      <br/>
      Neither will any left shifting of EA occur.
    </p>
    <p num="381">
      FIG. 66 shows read access to 16-bit wide memory.
      <br/>
      The logical address is left-shifted by 1 and driven on EA.
      <br/>
      Two consecutive accesses are completed with EA�0� incrementing from 0 to 1.
      <br/>
      The data is assembled to form a 32-bit word before being presented to the CPU or DMA for further use.
    </p>
    <p num="382">
      FIG. 67 shows the EMIF connected to SBSRAM.
      <br/>
      Table 42 describes the EMIF signals specific to the SBSRAM interface.
      <br/>
      The SBSRAM is shown interfaced to space 0.
      <br/>
      Thus, TYPE0=10b at reset.
      <br/>
      The SBSRAM interface is designed to work with SBSRAMs produced by Micron (MT58LC32K32) and NEC ( MU PD431232L).
      <br/>
      Other manufacturer's devices may work with this interface as well.
      <br/>
      Data sheets from these manufactures will provide additional timing information.
    </p>
    <p num="383">
      After an initial startup time, accesses to SBSRAM will be single-cycle, zero wait state.
      <br/>
      For the first access, for encountering an address discontinuity, or for switching between memory read and write cycles the initial startup penalty will produce wait-states for the CPU in the case of a CPU access.
    </p>
    <p num="384">
      -- TABLE 42
      <br/>
      -- SBSRAM Interface Signal
      <br/>
      -- Signal
      <br/>
      -- Name        Bits   O/Z?  Description
      <br/>
      -- CLKOUT1     1      O      Clock output at CPU clock frequency.
      <br/>
      Rising
      <br/>
      --                           edge used to clock SBSRAM.
      <br/>
      -- SSOE        1      O/Z    SBSRAM burst output enable.
      <br/>
      Enables
      <br/>
      --                           SBSRAM read cycles.
      <br/>
      Active-low.
      <br/>
      -- SSWE        1      O/Z    SBSRAM burst write enable.
      <br/>
      Enables
      <br/>
      --                           SBSRAM write cycles.
      <br/>
      Active-low.
      <br/>
      -- SSADV       1      O/Z    SBSRAM address burst advance.
      <br/>
      Signals
      <br/>
      --                           SBSRAM to increment internal address.
      <br/>
      --                           Active-low.
      <br/>
      -- SSADS       1      O/Z    SBSRAM address strobe.
      <br/>
      Signals SBSRAM
      <br/>
      --                           to latch a new address.
      <br/>
      Active-low.
      <br/>
      -- ? O = output
      <br/>
      -- Z = high-impedence state
    </p>
    <p num="385">
      FIG. 68 shows the EMIF connected to SDRAM.
      <br/>
      Table 43 describes the EMIF signals specific to the SDRAM interface.
      <br/>
      The SDRAM is shown as being interfaced to space 2.
      <br/>
      Thus, TYPE2=11b.
      <br/>
      This interface is designed to work with TI SDRAMs including the TMS626xxx, TMSC627xxx, and TMS664xxx (Data Sheet Numbers SMOS182C, SMOS688, and SMOS685).
      <br/>
      This interface may be enhanced to incorporate the burst and other features of the SDRAM.
      <br/>
      In its current form, the SDRAM interface has a 16-cycle CPU stall for each CPU access.
    </p>
    <p num="386">
      -- TABLE 43
      <br/>
      -- SDRAM Interface Signal
      <br/>
      -- Signal
      <br/>
      -- Name        Bits   O/Z?  Description
      <br/>
      -- SDCAS       1      O/Z    SDRAM column address strobe.
      <br/>
      Active-low.
      <br/>
      -- SDRAS       1      O/Z    SDRAM row address strobe.
      <br/>
      Active-low.
      <br/>
      -- SDWE        1      O/Z    SDRAM write enable.
      <br/>
      Active-low.
      <br/>
      -- SDCKE       1      O/Z    SDRAM clock enable.
      <br/>
      Active-low.
      <br/>
      -- SDA10       1      O/Z    SDRAM address 10.
      <br/>
      This signal is distinct
      <br/>
      --                           from EA10 because it is needed during
      <br/>
      --                           refresh when EA10 may be involved in an
      <br/>
      --                           access to another type of memory.
      <br/>
      -- CLKOUT2     1      O      Clock output at 1/2 CPU clock frequency.
      <br/>
      --                           Rising edge used by SDRAM to latch inputs.
      <br/>
      -- ? O = output
      <br/>
      -- Z = high-impedence state
    </p>
    <p num="387">
      Two EMIF control registers affect SDRAM interfacing:
      <br/>
      The EMIF SDRAM Control Register
      <br/>
      The EMIF SDRAM Refresh Period Register
    </p>
    <p num="388">
      FIG. 69 shows and Table 44 describes the fields in the SDRAM Control Register.
      <br/>
      Bits 11:0 correspond to the equivalent bits in the mode register internal to the SDRAM device.
      <br/>
      Bits 19:12 set timing parameters that relate CLKOUT2 the speed of the SDRAM.
      <br/>
      Note the reserved named fields and values will provide additional functionality in future revisions of this interface.
    </p>
    <p num="389">
      -- TABLE 44
      <br/>
      -- EMIF Register Bitfield Definitions
      <br/>
      -- Bitfield                Description                 Value   Effect
      <br/>
      -- BURST LENGTH            Sets the SDRAM Burst Length 000     Burst length of
      <br/>
      --  1
      <br/>
      --                                                     Other   Reserved
      <br/>
      -- BURST TYPE              Reserved
      <br/>
      -- READ LATENCY            Sets the SDRAM Read Latency 001     Read Latency of
      <br/>
      --  1
      <br/>
      --                                                     010     Read Latency of
      <br/>
      --  2
      <br/>
      --                                                     011     Read Latency of
      <br/>
      --  3
      <br/>
      --                                                     other   Reserved
      <br/>
      -- WRITE BURST LENGTH      Reserved
      <br/>
      -- TRC                     Value of tRC SDRAM parameter in terms of
      <br/>
      --  CLKOUT2 cycles.
      <br/>
      -- TRP                     Value of tRP SDRAM parameter in terms of
      <br/>
      --  CLKOUT2 cycles.
      <br/>
      -- TRCD                    Value of tRCD SDRAM parameter in terms of
      <br/>
      --  CLKOUT2 cycles.
      <br/>
      -- INIT                    Initialize SDRAM.
      <br/>
      Writes bits 10:0 of SDRAM Control
      <br/>
      --  Register to
      <br/>
      --                         SDRAM's internal mode register.
      <br/>
      Always read as 0.
    </p>
    <p num="390">
      The fields in the EMIF SDRAM refresh period register, shown in FIG. 70, drive a two-stage 12-bit refresh counter.
      <br/>
      Upon writing to the SDRAM Period Register, the SDRAM Refresh Counter gets loaded with the values written to PERIOD 1 and 0.
      <br/>
      The counter begins decrementing at a rate of CLKOUT2.
      <br/>
      When the 4-LSBs of the counter reach zero the counter decrements the value in the 8 MSBs.
      <br/>
      The low counter is simultaneously reloaded with PERIOD 0.
      <br/>
      Once the 8-MSBs of the refresh counter reach 0, they are reloaded with PERIOD 1.
      <br/>
      If the SDRAM interface has been initialized, when the counter gets reloaded indicates when the refresh cycles should occur.
      <br/>
      Whether or not initialization has occurred, the reloading of the MSBs generates the XSDINT signal to the CPU (which is mapped to INT10).
      <br/>
      Thus, this counter is reusable as a general purpose timer with period of (PERIOD1+1) * (PERIOD0+1) CLKOUT2 cycles.
    </p>
    <p num="391">
      FIG. 71 shows a block diagram of the external control interface.
      <br/>
      Table 45 describes the signals specific to that interface.
      <br/>
      Check your data sheet for the external control read and write timing diagrams.
    </p>
    <p num="392">
      -- TABLE 45
      <br/>
      -- External Control Interface Signal Description
      <br/>
      -- Signal Name Bits   O/Z?  Description
      <br/>
      -- XREQ        1      O/Z    External request for access.
      <br/>
      Signals external
      <br/>
      --                           logic of access request from DSP.
      <br/>
      --                           Active-low.
      <br/>
      -- AXRDY       1      I      External request ready input.
      <br/>
      Signal from
      <br/>
      --                           external logic that external request is
      <br/>
      --                           complete.
      <br/>
      Active-high.
      <br/>
      -- ? O = output
      <br/>
      -- Z = high-impedence state
    </p>
    <p num="393">External Memory Interface (EMIF) Global Control Register</p>
    <p num="394">
      FIG. 72 shows and Table 46 describes the usage of fields in the EMIF control register.
      <br/>
      This external I/O interface is used for spaces 0 and 2, when the XCE0 an XCE2 fields in the EMIF Global Control Register are set, respectively.
    </p>
    <p num="395">
      -- TABLE 46
      <br/>
      -- EMIF Global Control Register Bitfield Definitions
      <br/>
      -- Bitfield              Description
      <br/>
      -- RESET                 Initialize EMIF.
      <br/>
      Returns EMIF to its reset
      <br/>
      --                       state when written with a 1.
      <br/>
      A write of 0 has
      <br/>
      --                       no effect.
      <br/>
      Always read as 0.
      <br/>
      -- XCE0                  Use XCE0 Interface timing.
      <br/>
      When set these
      <br/>
      -- XCE2                  bits force external Space 0 and 2 respectively
      <br/>
      --                       to use the XCE2 timing rather than the
      <br/>
      --                       memory type for which they were initially
      <br/>
      --                       configured.
      <br/>
      -- SDRAM INIT            Indicates that the SDRAM interface is
      <br/>
      --                       initializing.
      <br/>
      -- DMA/DATA/PROG ACK     Indicates that the DMA, CPU Data Memory
      <br/>
      --                       Controller, or CPU Program Memory
      <br/>
      --                       Controller is the access being serviced
      <br/>
      --                       by the EMIF.
      <br/>
      -- DMA/DATA/PROG SEL     Indicates that the DMA, CPU Data Memory
      <br/>
      --                       Controller, or the CPU Program Memory
      <br/>
      --                       Controller is selected as the highest priority
      <br/>
      --                       pending access.
      <br/>
      -- HOLDA                 Inverted value of HOLDA output.
      <br/>
      --                       Active-high.
      <br/>
      -- HOLD                  Inverted value of HOLD input.
      <br/>
      Active-high.
      <br/>
      -- AXRDY                 Value of AXRDY input.
      <br/>
      Active-high.
    </p>
    <p num="396">Hold Operation</p>
    <p num="397">
      The HOLD and HOLDA signals provide a handshake for an external device to drive values on the EMIF signals.
      <br/>
      After the external device asserts HOLD active-high it must wait for the DSP to assert the HOLDA signal active high.
      <br/>
      This signal indicates that all the EMIF signals with the exception of CLKOUT1 and CLKOUT2 have been tri-stated.
      <br/>
      The EMIF must provide the remaining signals on the EMIF (or these signals must be pulled-up) to prevent floating control inputs to other devices interfaced to the bus.
      <br/>
      Once the external devices relinquishes its request be de-asserting HOLD inactive-low, it must wait for the DSP to de-assert HOLDA inactive-low before.
    </p>
    <p num="398">
      The host port is a 16-bit wide access port through which a host (external) processor can read from, and write to, the internal data memory.
      <br/>
      The host port operates as an asynchronous interface and uses handshaking signals to synchronize data transfers.
    </p>
    <p num="399">
      FIG. 73 shows the interface of the Host Port to a host and to the internal data memory.
      <br/>
      Table 47 describes the external signals for the host port.
    </p>
    <p num="400">
      -- TABLE 47
      <br/>
      -- Host Port External Signal Description
      <br/>
      --               Size in
      <br/>
      -- Name          Bits    I/O/Z?  Description
      <br/>
      -- HREQ          1       I       Host internal data memory request.
      <br/>
      --                               Host asserts active high to gain
      <br/>
      --                               control of the internal data memory.
      <br/>
      --                               Active-high.
      <br/>
      -- HACK          1       O       Host internal data memory request
      <br/>
      --                               acknowledge.
      <br/>
      Host Port asserts
      <br/>
      --                               active-high to indicate GPU is halted
      <br/>
      --                               and that host has control of internal
      <br/>
      --                               memory.
      <br/>
      Active-high.
      <br/>
      -- HDATA �15:0� 16      I/O/Z   Host data.
      <br/>
      -- HADDR �16:1� 16      I       Host address (or device configuration
      <br/>
      --                               during RESET low.)
      <br/>
      -- HWRITE        1       I       Host write strobe.
      <br/>
      Active-low.
      <br/>
      -- HREAD         1       I       Host read strobe.
      <br/>
      Active-low.
      <br/>
      -- ? I = input
      <br/>
      -- O = output
      <br/>
      -- Z = high-impedence state
    </p>
    <p num="401">Host Access to Internal Data Memory</p>
    <p num="402">
      A host processor's access to the internal data memory through the Host Port consists of two operations.
      <br/>
      1) The host must gain control over the Host Port by performing the request/acknowledge handshake through the HREQ/HACK signals.
      <br/>
      2) Once access has been granted, the host may perform read and write operations to the internal data memory.
    </p>
    <p num="403">The mapping of host port address to the internal memory address is described earlier herein.</p>
    <p num="404">Host Request/Acknowledge Handshake</p>
    <p num="405">
      FIG. 74 shows the handshake operation for a host to gain access to the host port.
      <br/>
      Table 48 shows the related timing parameters
    </p>
    <p num="406">
      -- TABLE 48
      <br/>
      -- Host Request/Acknowledge Signal Parameters
      <br/>
      -- Parameter          Type        Min    Max    Description
      <br/>
      -- td (HREQH-HACKH) DSP Value   7 c           Delay from HREQ
      <br/>
      --                                              high to HACK high.
      <br/>
      -- td (HREQL-HACKL) DSP Value   7 c    8 c    Delay from HREQ
      <br/>
      --                                              low to HACK low.
      <br/>
      -- taccess                                 Allowable period
      <br/>
      --                                              for host data access.
      <br/>
      -- Note: c = 1 CLKOUT1 period. 'C6xx value refers to values produced by the
      <br/>
      --  DSP.
      <br/>
      Values given are approximate figures when measurable in terms of
      <br/>
      --  clock cycles.
    </p>
    <p num="407">
      Cycles 3 to 10--Host Asserting Request: The host requests access by asserting the HREQ (host request) input.
      <br/>
      The request will be recognized by the host port controller on cycle 4 or 5.
    </p>
    <p num="408">
      Host Receive Acknowledge: Assuming that the neither the DMA nor the CPU is performing any accesses to internal data memory, the host port controller will signal that the host has access to the host port by asserting the HACK signal 7 cycles later (td (REQH-HACKH)).
      <br/>
      If either the CPU or DMA is accessing the internal memory, then the HACK will be delayed until all pending accesses are complete and no new accesses are arriving.
      <br/>
      Because of the pipelined interface to internal memory, this means that neither the DMA or CPU may perform any accesses for three consecutive CPU cycles.
    </p>
    <p num="409">
      Cycles 11 to i+2--Host Access: From the time it receives acknowledge to the time it relinquishes its request, the host may perform read and write cycles to the internal data RAM (taccess).
      <br/>
      There is no upper limit on this period of time.
      <br/>
      Also, during this time the operation of the CPU is frozen.
      <br/>
      The DMA will also be frozen if it begins trying to access internal data memory.
    </p>
    <p num="410">
      Cycles i+3 to i+9--Host Relinquishes Request: During cycle i+2 the host relinquishes its request by deasserting HREQ.
      <br/>
      The host port controller recognizes the event on cycle i+3 or i+4.
    </p>
    <p num="411">Host Received Deasserted Acknowledge: Seven cycles later (td (HREQL-HACKL)), the acknowledge is deasserted by the host port controller.</p>
    <p num="412">Because of the delays from changes in HREQ to changes in HACK, the minimum period between consecutive requests (asserted HREQ) is 7 cycles.</p>
    <p num="413">Host Data Access</p>
    <p num="414">
      FIG. 75 shows the host port signal diagram for read and write operation.
      <br/>
      The figure depicts a host port read followed by a host port write.
      <br/>
      The following constraints exists for both read and write operation:
    </p>
    <p num="415">The HREAD and HWRITE strobes must be active-low for a minimum of 8 clock cycles.</p>
    <p num="416">There must be at least 4 clock cycles between HREAD or HWRITE strobe rising to the subsequent HREAD or HWRITE falling.</p>
    <p num="417">HADDR must frame the HREAD and HWRITE strobes by 2 clock cycles for read and write access respectively.</p>
    <p num="418">
      There must be at least 12 clock cycles between the start of two consecutive HWRITE or HWRITE strobes falling.
      <br/>
      Thus, the maximum rate of accesses is one every 12 clock cycles.
    </p>
    <p num="419">
      The Host Port returns the bus to a high impedance no more than two cycles after the rising edge of HREAD.
      <br/>
      The host must setup the value to be written on HDATA 2 cycles prior to HWRITE falling.
    </p>
    <p num="420">The host begins a write by asserting HWRITE active-low.</p>
    <p num="421">The host must hold the value on HDATA until HWRITE rises.</p>
    <p num="422">Reset Considerations</p>
    <p num="423">
      Once a reset occurs the host port controller is reset.
      <br/>
      Thus, after reset the request/acknowledge handshake must re-occur before any transfers can begin.
    </p>
    <p num="424">DMA Overview</p>
    <p num="425">
      The two channels of the on-chip Direct Memory Access (DMA) controller can read from or write to any location in the memory map without interfering with the operation of the CPU.
      <br/>
      This allows interfacing to slow external memories and peripherals without reducing the throughput to the CPU.
      <br/>
      The DMA controller contains its own address generators, source and destination registers, and transfer counter.
      <br/>
      The DMA has its own bus for addresses and data.
      <br/>
      This keeps the data transfers between memory and peripherals from conflicting with the CPU.
      <br/>
      A DMA operation consists of a 32-bit word transfer to or from any of the three DSP modules (see FIG. 76):
    </p>
    <p num="426">Internal Data Memory.</p>
    <p num="427">Internal Program Memory that is not configured as cache as a destination of a transfer (only writes to program memory are supported).</p>
    <p num="428">EMIF.</p>
    <p num="429">
      This revision of the DMA Controller can access all internal program memory, all internal data memory, and all devices mapped to the EMIF.
      <br/>
      An exception is the DMA cannot use the program memory as the source of a transfer.
      <br/>
      Also, it cannot access memories configured as cache or memory-mapped on-chip peripheral registers.
    </p>
    <p num="430">The DMA controller has the following features:</p>
    <p num="431">Two independent channels.</p>
    <p num="432">
      Source and destination addresses may be within the same or different modules.
      <br/>
      These addresses are independently programmable, and may either remain constant, increment, or decrement on each transfer.
    </p>
    <p num="433">
      The transfer count is programmable.
      <br/>
      Once the transfer count has completed, the DMA may be enabled to send an interrupt to the CPU.
    </p>
    <p num="434">Operation of the DMA</p>
    <p num="435">
      The DMA has lowest priority to all modules it accesses.
      <br/>
      To internal data memory and internal program memory it must wait until no transfers are being initiated to the memory it intends to access.
      <br/>
      DMA accesses to internal memory perform cycle stealing.
      <br/>
      Thus, no subsequent CPU accesses of internal memory are hampered by a DMA access.
      <br/>
      However, if the CPU accesses the EMIF while a multi-cycle DMA access is in progress, it will wait until that access completes.
    </p>
    <p num="436">
      The DMA Control Registers should be properly programmed to control the operation of the DMA.
      <br/>
      Each DMA channel has a independent set of registers as shown in Table 49.
    </p>
    <p num="437">
      These registers are 2-bits wide and are expected to be accessed via 32-bit accesses from the CPU.
      <br/>
      If using C, this implies that pointers to these registers must be cast to type int.
      <br/>
      For software compatibility with future revisions of this DMA you must write reset values when writing to the reserved fields.
    </p>
    <p num="438">
      -- TABLE 49
      <br/>
      -- DMA Memory Mapped Control Registers
      <br/>
      -- Control Registers (word wide, 4 byte addresses)
      <br/>
      -- DMA Channel 0 Control
      <br/>
      -- DMA Channel 0 Source Address
      <br/>
      -- DMA Channel 0 Destination Address
      <br/>
      -- DMA Channel 0 Transfer Counter
      <br/>
      -- DMA Channel 1 Control
      <br/>
      -- DMA Channel 1 Source Address
      <br/>
      -- DMA Channel 1 Destination Address
      <br/>
      -- DMA Channel 1 Transfer Counter
    </p>
    <p num="439">Stopping, Programming, and Starting the DMA</p>
    <p num="440">
      The DMA Channel Control Register configures the DMA operation for the associated channel.
      <br/>
      FIG. 77 shows and Table 50 describes the bitfields in that register.
      <br/>
      To configure the DMA, the DMA channel must be stopped.
      <br/>
      One can force this condition by setting START=00b.
      <br/>
      Alternatively, this condition may be ascertained by waiting for STAT=00b.
      <br/>
      Once stopped, one programs the DMA Channel Source Address, Destination Address, and Transfer Counter to their desired values.
      <br/>
      Then, one writes the DMA Channel Control Register with the appropriate values including START=11b to start operation.
    </p>
    <p num="441">Transferring Data With the DMA Channels</p>
    <p num="442">
      The DMA only performs word transfers.
      <br/>
      Any non-zero bits written to the two LSBs of the DMA Source and Destination Registers are automatically set to 0.
      <br/>
      Also, as only 32-bit transfers are enabled, the DMA is unaffected by the endianness as set by the LENDIAN input signal.
    </p>
    <p num="443">
      The DMA Channel Transfer Counter depicted in FIG. 78 sets the number of data transfers for the DMA channel to complete.
      <br/>
      Upon the completion of the write portion of each transfer the counter is automatically decremented.
    </p>
    <p num="444">
      -- TABLE 50
      <br/>
      -- DMA Control Register Bitfield Definitions
      <br/>
      -- Bitfield         Description
      <br/>
      -- START            Controls DMA Operation:
      <br/>
      --                  START = 00b, Stop, Abort.
      <br/>
      Stops DMA after any
      <br/>
      --                  read or write operation in progress.
      <br/>
      All DMA
      <br/>
      --                  Channel control registers associated with that
      <br/>
      --                  channel are reloaded with their reset values after a
      <br/>
      --                  write of 00b occurs.
      <br/>
      However, registers may be
      <br/>
      --                  re-written afterwards.
      <br/>
      --                  START = 01b, reserved
      <br/>
      --                  START = 10b, Pause.
      <br/>
      Stops after DMA after both
      <br/>
      --                  read and write of any operation in progress
      <br/>
      --                  complete.
      <br/>
      DMA may be restarted after paused.
      <br/>
      --                  START = 11b, Start.
      <br/>
      Allows DMA operation to
      <br/>
      --                  begin or restart after pause.
      <br/>
      Although set to 0 at
      <br/>
      --                  reset, after bootload operation field will contain 11.
      <br/>
      -- STATUS           Status of DMA Operation:
      <br/>
      --                  STAT = 00b, DMA Channel stopped.
      <br/>
      --                  STAT = 01b, reserved.
      <br/>
      --                  STAT = 10b, reserved.
      <br/>
      --                  STAT = 11b, DMA Channel started.
      <br/>
      -- SRC DIR DST DIR  Source/Destination Address Direction.
      <br/>
      DMA
      <br/>
      --                  Source/Destination Address is incremented or
      <br/>
      --                  decremented as indicated after the read/write portion
      <br/>
      --                  of the transfer completes
      <br/>
      --                  SRC/DST DIR = 00b, do NOT increment or
      <br/>
      --                  decrement.
      <br/>
      --                  SRC/DST DIR = 01b, increment.
      <br/>
      --                  SRC/DST DIR = 10b, decrement.
      <br/>
      --                  SRC/DST DIR = 11b, reserved.
      <br/>
      -- RSYNC            Synchronization of Read or Write Transfer.
      <br/>
      The
      <br/>
      -- WSYNC            read/write portion of the each transfer for the DMA
      <br/>
      --                  Channel does not begin until the appropriate
      <br/>
      --                  synchronization signal is received.
      <br/>
      --                  Synchronization occurs on the rising edge of the
      <br/>
      --                  synchronization signal.
      <br/>
      --                  R/WSYNC = 00000b, no synchronization, complete
      <br/>
      --                  read/write as soon as possible.
      <br/>
      --                  R/WSYNC = 00100b, synchronize on INT4 input
      <br/>
      --                  pin.
      <br/>
      --                  R/WSYNC = 00101b, synchronize on INT5 input
      <br/>
      --                  pin.
      <br/>
      --                  R/WSYNC = 00110b, synchronize on INT6 input
      <br/>
      --                  pin.
      <br/>
      --                  R/WSYNC = 00111b, synchronize on INT7 input
      <br/>
      --                  pin.
      <br/>
      --                  R/WSYNC = other, reserved.
      <br/>
      -- TCINT            Generates interrupt on DMA Interrupt when transfer
      <br/>
      --                  count reaches 0.
    </p>
    <p num="445">Setting the Source and Destination from Which the DMA Reads and Writes Data</p>
    <p num="446">
      The DMA Channel Source Address Register (FIG. 79) and Destination Address Register (FIG. 80) determine the source from which the DMA reads data and the destination to which the DMA writes data, respectively.
      <br/>
      One must program these registers to their desired values before starting the DMA.
      <br/>
      You may select whether these addresses increment, decrement, or be maintained by setting the SRC DIR and DST DIR fields in the DMA Channel Control Register.
    </p>
    <p num="447">Notice the following about the registers:</p>
    <p num="448">The bits 1:0 are 0, implying word-aligned data.</p>
    <p num="449">Bits 30:26 are 0, to cover a 26-bit EMIF byte address space as well as internal program memory.</p>
    <p num="450">
      Bit 31 can be set to 1 to select internal data memory or set to 0 to select external memory or on-chip program memory.
      <br/>
      Note that if bits 25:2 increment or decrement past a 26-bit boundary no carry will ripple to bit 31.
    </p>
    <p num="451">For software compatibility with future revisions of the DMA, you must only write 0 to reserved fields as well as assure the address does not increment or decrement past a 26-bit boundary.</p>
    <p num="452">DMA Interrupts</p>
    <p num="453">
      If the TCINT bit in the DMA Channel Control Register is enabled, an interrupt is generated to the CPU when the counter reaches zero after the write portion of the last transfer has completed.
      <br/>
      The DMA interrupts DMAINT0 and DMINT1 for channels 0 and 1 are mapped to CPU interrupts INT8 and INT9, respectively.
    </p>
    <p num="454">Bootload Operation</p>
    <p num="455">
      The DMA boot operation allows the internal program memory to be loaded with program stored in 8-, 16-, or 32-bit memory mapped in space 1.
      <br/>
      The CPU is internally held in reset while the transfer occurs.
      <br/>
      After the transfer completes, the CPU is released and begins running at address 0.
    </p>
    <p num="456">
      By setting the MAP_BOOT, BOOT_SRC, and BOOT_CNT input pins to the appropriate values at reset, you may enable the DMA to automatically bootload the internal program memory.
      <br/>
      The CE1_WIDTH pins select the width of the memory mapped at space 1.
      <br/>
      These pins are shared with the HA pins of the host port.
      <br/>
      You must be drive these pins to the appropriate values during reset.
    </p>
    <p num="457">Configuring the DMA to Bootload the Internal Memory</p>
    <p num="458">You may configure the DMA to bootload the internal program memory through DMA Channel 0 by:</p>
    <p num="459">
      Setting the input pin MAP_BOOT=1, mapping internal program memory to address 0.
      <br/>
      See the data sheet for your specific device for a full explanation of DSP memory maps.
    </p>
    <p num="460">
      Setting the input pin BOOT_SRC�2:0�=001b as shown in Table 51.
      <br/>
      Enables DMA bootload operation.
      <br/>
      If BOOT_SRC�2:0�=000b the DMA is disabled from bootloading, and the CPU begins running from address 0.
      <br/>
      All other values of BOOT_SRC�2:0� are invalid.
    </p>
    <p num="461">
      -- TABLE 51
      <br/>
      -- BOOT_SRC and Enabling of Bootload
      <br/>
      -- BOOT_CNT                Words Transferred
      <br/>
      -- 000b                    No DMA Boot
      <br/>
      -- 001b                    DMA Boot from External Space 1
      <br/>
      -- other                   Reserved
    </p>
    <p num="462">Selecting the Number of Words to Bootload</p>
    <p num="463">
      The number of words to bootload is set by the boot transfer count (BOOT_CNT�2:0�) input pins.
      <br/>
      The number of words to bootload is:
    </p>
    <p num="464">2(BOOT_CNT+8) as shown in Table 52.</p>
    <p num="465">
      -- TABLE 52
      <br/>
      -- BOOT_CNT and Word Transfer Count
      <br/>
      --           BOOT_CNT      Words Transferred
      <br/>
      --           000b           256
      <br/>
      --           001b           512
      <br/>
      --           010b          1024
      <br/>
      --           011b          2048
      <br/>
      --           100b          4096
      <br/>
      --           101b          8192
      <br/>
      --           110b          16384
      <br/>
      --           111b          32768
    </p>
    <p num="466">Selecting the Asynchronous Memory Width</p>
    <p num="467">
      The source of boot memory is always configured to be in external CE1 space.
      <br/>
      CE1 space is expected to contain asynchronous memory of 8-, 16, or 32-bits in width.
      <br/>
      The width is selected via the CE1_WIDTH�1:0� input pins (Table 53).
    </p>
    <p num="468">
      -- TABLE 53
      <br/>
      -- CE1_WIDTH and Boot Memory Width
      <br/>
      -- CE1_WIDTH�1:0�    Width of Memory in Space 1
      <br/>
      -- 00b                          8-bits
      <br/>
      -- 01b                         16-bits
      <br/>
      -- 10b                         32-bits
      <br/>
      -- 11b                         reserved
    </p>
    <p num="469">Power-Down Control</p>
    <p num="470">
      The DSP supports three power-down modes: Idle1; Idle2; and Idle3.
      <br/>
      To initiate the three power down modes, use the three lower bits of the PWRD field in the Control Status Register (CSR), as depicted in FIG. 81. Setting one of these bits initiates the power down mode that the bit corresponds to.
      <br/>
      If more than one of these PWRD bits are set, the power-down mode selected by the most significant bit is enabled.
    </p>
    <p num="471">
      When in a power-down mode, the DSP can be reactivated by a RESET, an enabled interrupt, or any interrupt.
      <br/>
      Bits three and four of the PWRD field in the Control Status Register set the wake up condition.
      <br/>
      If bits three and four are set, the device can be awakened from a power-down state by an enabled interrupt.
    </p>
    <p num="472">The power-down mode bit (zero, one, or two) and wake-up bit (three or four) must be set by the same MVC instruction to ensure proper power-own operation.</p>
    <p num="473">Power-Down Modes</p>
    <p num="474">
      For any of the three power-down modes, the contents of the CPU are maintained.
      <br/>
      This allows operation to continue when the power-down mode is terminated.
      <br/>
      If the power-down state is terminated by an enable interrupt, the DSP will enter the interrupt service routine on wake-up and then return to the instruction after the power-down instruction.
      <br/>
      If the power-down state is terminated by a disabled interrupt, the DSP will begin operation (upon wake-up) at the instruction after the power-down instruction.
    </p>
    <p num="475">Idle1 Mode</p>
    <p num="476">
      Writing a one to bit zero of the PWRD field in the CSR places the DSP in the Idlel mode.
      <br/>
      In this mode, all CPU activity is halted.
      <br/>
      The system clock and peripherals continue to operate and the CLKOUT pin remains active.
      <br/>
      Thus, peripherals can take the CPU out of its power-down state by generating an interrupt.
    </p>
    <p num="477">Idle2 Mode</p>
    <p num="478">
      Writing a one to bit one of the PWRD field in the CSR places the DSP in the Idle2 mode.
      <br/>
      In Idle2 mode, the CPU and on-chip peripherals are halted.
      <br/>
      Because the on-chip peripherals are stopped, you cannot use the peripherals to generate the interrupt to wake up the DSP.
      <br/>
      Only an external interrupt or RESET can take the DSP out of Idle2 mode.
    </p>
    <p num="479">Idle3 Mode</p>
    <p num="480">
      Writing a one to bit two of the PWRD field in the CSR places the DSP in the Idle3 mode.
      <br/>
      In Idle3 mode, the CPU, on-chip peripherals, and PLL are inactive.
      <br/>
      Idle3 is used for complete shutdown of the DSP.
      <br/>
      To come out of the Idle3 mode, you must reset the device.
    </p>
    <p num="481">
      Table 54 lists some typical applications for the DSPs of the present invention.
      <br/>
      These DSPs offer adaptable approaches to traditional signal-processing problems.
      <br/>
      They also support complex applications that often require multiple operations to be performed simultaneously.
    </p>
    <p num="482">
      -- TABLE 54
      <br/>
      -- Typical Applications for DSPs
      <br/>
      -- Automotive                  Consumer                    Control
      <br/>
      -- Adaptive ride control       Digital radios/TVs          Disk drive control
      <br/>
      -- Antiskid brakes             Educational toys            Engine control
      <br/>
      -- Cellular telephones         Music synthesizers          Laser printer
      <br/>
      --  control
      <br/>
      -- Digital radios              Pagers                      Motor control
      <br/>
      -- Engine control              Power tools                 Robotics control
      <br/>
      -- Global positioning          Radar detectors             Servo control
      <br/>
      -- Navigation                  Solid-state answering machines
      <br/>
      -- Vibration analysis
      <br/>
      -- Voice commands
      <br/>
      -- General Purpose             Graphics/Imaging            Industrial
      <br/>
      -- Adaptive filtering          3-D rotation                Numeric control
      <br/>
      -- Convolution                 Animation/digital maps      Power-line
      <br/>
      --  monitoring
      <br/>
      -- Correlation                 Homomorphic processing      Robotics
      <br/>
      -- Digital filtering           Image compression/transmission Security access
      <br/>
      -- Fast Fourier transforms     Image enhancement
      <br/>
      -- Hilbert transforms          Pattern recognition
      <br/>
      -- Waveform generation         Robot vision
      <br/>
      -- Windowing                   Workstations
      <br/>
      -- Instrumentation             Medical                     Military
      <br/>
      -- Digital filtering           Diagnostic equipment        Image processing
      <br/>
      -- Function generation         Fetal monitoring            Missile guidance
      <br/>
      -- Pattern matching            Hearing aids                Navigation
      <br/>
      -- Phase-locked loops          Patient monitoring          Radar processing
      <br/>
      -- Seismic processing          Prosthetics                 Radio frequency
      <br/>
      --  modems
      <br/>
      -- Spectrum analysis           Ultrasound equipment        Secure
      <br/>
      --  communications
      <br/>
      -- Transient analysis                                      Sonar processing
      <br/>
      -- Telecommunications                                    Voice/Speech
      <br/>
      -- 1200- to 56?600-bps modems Faxing                      Speaker verification
      <br/>
      -- Adaptive equalizers         Future terminals            Speech enhancement
      <br/>
      -- ADPCM transcoders           Line repeaters              Speech recognition
      <br/>
      -- Base stations               Personal communications     Speech synthesis
      <br/>
      -- Cellular telephones         systems (PCS)               Speech vocoding
      <br/>
      -- Channel multiplexing        Personal digital assistants (PDA)
      <br/>
      --  Text-to-speech
      <br/>
      -- Data encryption             Speaker phones              Voice mail
      <br/>
      -- Digital PBXs                Spread spectrum communications
      <br/>
      -- Digital speech interpolation (DSI) Digital subscriber loop (xDSL)
      <br/>
      -- DTMF encoding/decoding      Video conferencing
      <br/>
      -- Echo cancellation           X.25 packet switching
    </p>
    <p num="483">
      With a performance of up to 1600 million instructions per second (MIPS) and an ultra-efficient C compiler, the digital signal processors (DSPs) of the present invention give system architects unlimited possibilities to differentiate their products.
      <br/>
      High performance, ease-of-use, and affordable pricing make the DSP the optimum solution for multichannel, multifunction applications:
      <br/>
      Pooled modems
      <br/>
      Wireless base stations
      <br/>
      Remote access servers (RAS)
      <br/>
      Digital subscriber loop (DSL) systems
      <br/>
      Cable modems
      <br/>
      Multichannel telephony systems
      <br/>
      The is also the optimum solution for exciting new applications like:
    </p>
    <p num="484">
      - Personalized home security with face and hand/fingerprint recognition
      <br/>
      - Ultimate cruise control with GPS navigation and accident avoidance
      <br/>
      - Remote medical diagnostics
    </p>
    <p num="485">
      The devices are fixed-point DSPs.
      <br/>
      These devices feature the first DSPs in the industry to adopt an advanced VLIW architecture.
      <br/>
      The architecture makes it the first off-the-shelf DSP to use advanced VLIW to achieve high performance through increased instruction-level parallelism.
      <br/>
      A traditional VLIW architecture consists of multiple execution units running in parallel, performing multiple instructions during a single clock cycle.
      <br/>
      Parallelism is the key to extremely high performance, taking these next-generation DSPs well beyond the performance capabilities of traditional superscalar designs.
      <br/>
      This DSP is a highly deterministic architecture, having few restrictions on how or when instructions are fetched, executed, or stored.
      <br/>
      It is this architectural flexibility that is key to the breakthrough efficiency levels of the its compiler.
      <br/>
      Advanced features include:
      <br/>
      Instruction packing
      <br/>
      Conditional branching
      <br/>
      Variable-width instructions
      <br/>
      Prefetched branching
    </p>
    <p num="486">All of these features eliminate the problems traditionally associated with historical implementations of VLIW machines.</p>
    <p num="487">
      At 200 MHz, the devices operate at a 5-ns cycle time, executing up to eight 32-bit instructions every cycle.
      <br/>
      The device's core CPU consists of 32 general purpose registers of 32-bit word length and eight functional units:
      <br/>
      Two multipliers
      <br/>
      Six ALUs
      <br/>
      Features of the DSP include:
      <br/>
      - Advanced VLIW CPU with eight functional units including two multipliers and six arithmetic units
      <br/>
      - Executes up to eight instructions per cycle for up to ten times the performance of typical DSPs
      <br/>
      - Allows designers to develop highly effective RISC-like code for fast development time
      <br/>
      Instruction packing
      <br/>
      Gives code size equivalence for eight instructions executed serially or in parallel
      <br/>
      Reduces code size, program fetches, and power consumption.
      <br/>
      100% conditional instructions
      <br/>
      Reduce costly branching
      <br/>
      Increase parallelism for higher sustained performance
      <br/>
      Code executes as programmed on highly independent functional units
      <br/>
      Industry's most efficient C compiler on DSP benchmark suite
      <br/>
      Industry's first assembly optimizer for fast development time
    </p>
    <p num="488">
      8/16/32-bit data support, providing efficient memory support for a variety of applications
      <br/>
      40-bit arithmetic options add extra precision for vocoders and other computationally intensive applications
      <br/>
      Saturation and normalization provide support for key arithmetic operations
      <br/>
      Bit-field manipulation and instruction extract, set, clear, and bit counting support common operation found in control and data manipulation applications
      <br/>
      A variety of memory and peripheral options are available:
      <br/>
      - Large on-chip RAM for fast algorithm execution
      <br/>
      - 32-bit external memory interface supports SDRAM, SBSRAM, SRAM for a broad range of external memory requirements and maximum system performance
      <br/>
      - 16-bit host port for host-to-access on-chip memory
      <br/>
      - Two direct memory access (DMA) channels with bootloading capability for efficient access to external memory/peripherals with minimized CPU interrupts
      <br/>
      - Two enhanced buffered serial ports (EBSPs) for simplified interface to telecommunications trunks and/or efficient interprocessor communication
      <br/>
      - Two 32-bit timers that allow easy algorithm implementation
      <br/>
      - Inventive systems including processing arrangements and component circuitry made possible by improvements to the processor 11 are discussed next.
      <br/>
      For general purpose digital signal processing applications, these systems advantageously perform convolution, correlation, Hilbert transforms, Fast Fourier Transforms, adaptive filtering, windowing, and waveform generation.
      <br/>
      Further applications involving in some cases the general algorithms just listed are voice mail, speech vocoding, speech recognition, speaker verification, speech enhancement, speech synthesis and text-to-speech systems.
    </p>
    <p num="489">Instrumentation according to the invention provides improved spectrum analyzers, function generators, pattern matching systems, seismic processing systems, transient analysis systems, digital filters and phase lock loops for applications in which the invention is suitably utilized.</p>
    <p num="490">Automotive controls and systems according to the invention suitably provide engine control, vibration analysis, anti-skid braking control, adaptive ride control, voice commands, and automotive transmission control.</p>
    <p num="491">In the naval, aviation and military field, inventive systems are provided and improved according to the invention to provide global positioning systems, processor supported navigation systems, radar tracking systems, platform stabilizing systems, missile guidance systems, secure communications systems, radar processing and other processing systems.</p>
    <p num="492">
      Further systems according to the invention include computer disk drive motor controllers, printers, plotters, optical disk controllers, servomechanical control systems, robot control systems, laser printer controls and motor controls generally.
      <br/>
      Some of these control systems are applicable in the industrial environment as robotics controllers, auto assembly apparatus and inspection equipment, industrial drives, numeric controllers, computerized power tools, security access systems and power line monitors.
    </p>
    <p num="493">Telecommunications inventions contemplated according to the teachings and principles herein disclosed include echo cancellers, ADPCM transcoders, digital PBXs, line repeaters, channel multiplexers, modems, adaptive equalizers, DTMF encoders and DTMF decoders, data encryption apparatus, digital radio, cellular telephones, cellular telephone base stations, fax machines, loudspeaker telephones, digital speech interpolation (DSI) systems, packet switching systems, video conferencing systems and spread-spectrum communication systems.</p>
    <p num="494">In the graphic imaging area, further inventions based on the principles and devices and systems disclosed herein include optical character recognition apparatus, 3-D rotation apparatus, robot vision systems, image transmission and compression apparatus, pattern recognition systems, image enhancement equipment, homomorphic processing systems, workstations and animation systems and digital mapping systems.</p>
    <p num="495">
      Medical inventions further contemplated according to the present invention include hearing aids, patient monitoring apparatus, ultrasound equipment, diagnostic tools, automated prosthetics and fetal monitors, for example.
      <br/>
      Consumer products according to the invention include high definition television systems such as high definition television receivers and transmission equipment used at studios and television stations.
      <br/>
      Further consumer inventions include music synthesizers, solid state answering machines, radar detectors, power tools and toys and games.
    </p>
    <p num="496">It is emphasized that the system aspects of the invention contemplated herein provide advantages of improved system architecture, system performance, system reliability and economy.</p>
    <p num="497">
      For example, in FIG. 82, an inventive industrial process and protective control system 300 according to the invention includes industrial sensors 301 and 303 for sensing physical variables pertinent to a particular industrial environment.
      <br/>
      Signals from the sensors 301 and 303 are provided to a signal processor device 11 of FIG. 1.
      <br/>
      An interface 305 includes register locations A, B, C, D, E, F, G and H and drivers (not shown).
      <br/>
      The register locations are connected via the drivers and respective lines 307 to an industrial process device driven by a motor 311, relay operated apparatus controlled by relays 313 and various valves including a solenoid valve 315.
    </p>
    <p num="498">
      In the industrial process and protective control environment, various engineering and economic considerations operate at cross purposes.
      <br/>
      If the speed or throughput of the industrial process is to be high, heavy burdens are placed on the processing capacity of device 11 to interpret the significance of relatively rapid changes occurring in real time as sensed by sensors 301 and 303.
      <br/>
      On the other hand, the control functions required to respond to the real-world conditions sensed by sensors 301 and 303 must also be accomplished swiftly.
      <br/>
      Advantageously, the addition of multiple functional units resolves conflicting demands on device 11, with negligible additional costs when device 11 is fabricated as a single semiconductor chip.
      <br/>
      In this way, the industrial processing rate, the swiftness of protective control and the precision of control are considerably enhanced.
    </p>
    <p num="499">
      In FIG. 83, an inventive automotive vehicle 321 includes a chassis 323 on which is mounted wheels and axles, an engine 325, suspension 327, and brakes 329.
      <br/>
      An automotive body 331 defines a passenger compartment which is advantageously provided with suspension relative to chassis 323.
    </p>
    <p num="500">
      An active suspension 335 augments spring and absorber suspension technique and is. controlled via an interface 341 having locations for bits A, B, C, D, E, F, G, H, I, J, K, L, M and N. A processor 343 utilizes computation units of the type disclosed in FIG. 1 and includes at least one ALU connected to data bus 351D and program data bus 361D.
      <br/>
      Numerous sensors include sensors 371, 373 and 375 which monitor the function of suspension 335, engine operation, and anti-skid braking respectively.
    </p>
    <p num="501">
      An engine control system 381 is connected to several of the locations of interface 341.
      <br/>
      Also an anti-skid braking control system 383 is connected to further bits of interface 341.
      <br/>
      Numerous considerations of automotive reliability, safety, passenger comfort, and economy place heavy demands on prior automotive vehicle systems.
    </p>
    <p num="502">In the invention of FIG. 83, automotive vehicle 321 is improved in any or all of these areas by virtue of the extremely flexible parallelism and control advantages of the invention.</p>
    <p num="503">The devices such as device 11 which are utilized in the systems of FIGS. 2 and 3 and further systems described herein not only address issues of increased device performance, but also solve industrial system problems which determine the user's overall system performance and cost.</p>
    <p num="504">
      A preferred embodiment device 11 executes an instruction in 5 nanoseconds and further improvements in semiconductor manufacture make possible even higher instruction rates.
      <br/>
      The on-chip program memory is RAM based and facilitates boot loading of a program from inexpensive external memory.
      <br/>
      Other versions are suitably ROM based for further cost reduction.
    </p>
    <p num="505">
      An inventive digitally controlled motor system 400 of FIG. 84 includes a digital controller 401 having a device 11 of FIG. 1.
      <br/>
      Digital controller 401 supplies an output u(n) to a zero order hold circuit ZOH 403.
      <br/>
      ZOH 403 supplies control output u(t) to a DC servomotor 405 in industrial machinery, home appliances, military equipment or other application systems environment.
      <br/>
      Connection of motor 405 to a disk drive 406 is shown in FIG. 84.
    </p>
    <p num="506">
      The operational response of servomotor 405 to the input u(t) is designated y(t).
      <br/>
      A sensor 407 is a transducer for the motor output y(t) and feeds a sampler 409 which in its turn supplies a sampled digitized output y(n) to a subtracter 411.
      <br/>
      Sampler 409 also signals digital controller 401 via an interrupt line INT-. A reference input r(n) from human or automated supervisory control is externally supplied as a further input to the close the loop.
      <br/>
      Device 11 endows controller 401 with high loop bandwidth and multiple functionality for processing and control of other elements besides servomotors as in FIG. 82.
    </p>
    <p num="507">
      In FIG. 85, a multi-variable state controller 421 executes advanced algorithms utilizing the device 11 processor.
      <br/>
      State controller 421 receives a reference input r(n) and supplies an output u(n) to a motor 423.
      <br/>
      Multiple electrical variables (position x1, speed x2, current x3 and torque x4) are fed back to the state controller 421.
      <br/>
      Any one or more of the four variables x1-x4 (in linear combination for example) are suitably controlled for various operational purposes.
      <br/>
      The system can operate controlled velocity or controlled torque applications, and run stepper motors and reversible motors.
    </p>
    <p num="508">
      In FIG. 86, a motor 431 has its operation sensed and sampled by a sampler 433.
      <br/>
      A processor 435 including device 11 is interrupt driven by sampler 433.
      <br/>
      Velocity information determined by unit 433 is fed back to processor 435 improved as described in connection with FIG. 1.
      <br/>
      Software in the program memory of FIG. 1 is executed as estimation algorithm process 437.
      <br/>
      Process 437 provides velocity, position and current information to state controller process 439 of processor 435.
      <br/>
      A digital output u(n) is supplied as output from state controller 439 to a zero order hold circuit 441 that in turn drives motor 431.
    </p>
    <p num="509">
      The motor is suitably a brushless DC motor with solid state electronic switches associated with core, coils and rotor in block 431.
      <br/>
      The systems of FIGS. 84-86 accommodate shaft encoders, optical and Hall effect rotor position sensing and back emf (counter electromotive force) sensing of position from windings.
    </p>
    <p num="510">
      In FIG. 87, robot control system 451 has a motor-driven grasping mechanism 453 at the end of a robot arm 455.
      <br/>
      Robot arm 455 has a structure with axes of rotation 457.1, 457.2, 457.3 and 457.4. Sensors and high response accurately controllable motors are located on arm 455 at articulation points 459.1, 459.2, 459.3 and 459.4.
    </p>
    <p num="511">
      Numerous such motors and sensors are desirably provided for accurate positioning and utilization of robot arm mechanism 455.
      <br/>
      However, the numerous.sensors and motors place conflicting demands on the system as a whole and on a controller 461.
      <br/>
      Controller 461 resolves these system demands by inclusion of device 11 of FIG. 1 and interrupt-driven architecture of system 451.
      <br/>
      Controller 461 intercommunicates with an I/O interface 463 which provides analog-to-digital and digital-to-analog conversion as well as bit manipulation by parallel logic unit 41 for the robot arm 455.
      <br/>
      The interface 463 receives position and pressure responses from the navigation motors 467 and sensors associated with robot arm 455 and grasping mechanism 453.
      <br/>
      Interfacer 463 also supplies control commands through servo amplifiers 465 to the respective motors 467 of robot arm 455.
    </p>
    <p num="512">Controller 461 has associated memory 467 with static RAM (SRAM) and programmable read only memory (PROM).</p>
    <p num="513">
      Slower peripherals 469 are associated with controller 471 and they are efficiently accommodated by the page boundary sensitive wait state features of controller 461.
      <br/>
      The controller 461 is also responsive to higher level commands supplied to it by a system manager CPU 473 which is responsive to safety control apparatus 475.
      <br/>
      System manager 473 communicates with controller 461 via I/O and RS 232 drivers 475.
    </p>
    <p num="514">
      The digital control systems according to the invention make possible performance advantages of precision, speed and economy of control not previously available.
      <br/>
      For another example, disk drives include information storage disks spun at high speed by spindle motor units.
      <br/>
      Additional controls called actuators align read and write head elements relative to the information storage disks.
    </p>
    <p num="515">
      The preferred embodiment can even provide a single chip solution for both actuator control and spindle motor control as well as system processing and diagnostic operations.
      <br/>
      Sophisticated functions are accommodated without excessively burdening controller 461.
      <br/>
      A digital notch filter can be implemented in controller 461 to cancel mechanical resonances.
      <br/>
      A state estimator can estimate velocity and current.
      <br/>
      A Kalman filter reduces sensor noise.
      <br/>
      Adaptive control compensates for temperature variations and mechanical variations.
      <br/>
      Device 11 also provides on-chip PWM pulse width modulation outputs for spindle motor speed control.
      <br/>
      Analogous functions in tape drives, printers, plotters and optical disk systems are readily accommodated.
      <br/>
      The inventive digital controls provide higher speed, more precise speed control, and faster data access generally in I/O technology at comparable costs, thus advancing the state of the art.
    </p>
    <p num="516">
      In missile guidance systems, the enhanced operational capabilities of the invention provide more accurate guidance of missile systems, thereby reducing the number of expensive missiles required to achieve operational objectives.
      <br/>
      Furthermore, equivalent performance can be attained with fewer processor chips, thus reducing weight and allowing augmented features and payload enhancements.
    </p>
    <p num="517">
      In FIG. 88, a satellite telecommunication system according to the invention has first stations 501 and 503 communicating by a satellite transmission path having a delay of 250 milliseconds.
      <br/>
      A far end telephone 505 and a near end telephone 507 are respectively connected to earth stations 501 and 503 by hybrids 509 and 511.
      <br/>
      Hybrids 509 and 511 are delayed eight milliseconds relative to the respective earth stations 501 and 503.
      <br/>
      Accordingly, echo cancellation is necessary to provide satisfactory telecommunications between far end telephone 505 and near end telephone 507.
      <br/>
      Moreover, the capability to service numerous telephone conversation circuits at once is necessary.
      <br/>
      This places an extreme processing burden on telecommunications equipment.
    </p>
    <p num="518">
      In FIG. 89, a preferred embodiment echo canceller 515 is associated with each hybrid such as 511 to improve the transmission of the communications circuit.
      <br/>
      Not only does device 11 execute echo canceling algorithms at high speed, but it also economically services more satellite communications circuits per chip.
    </p>
    <p num="519">
      Another system embodiment is an improved modem.
      <br/>
      In FIG. 90, a process diagram of operations in device 11 programmed as a modem transmitter includes a scrambling step 525 followed by an encoding step 527 which provides quadrature digital signals I�nTb � and Q�nTb � to interpolation procedures 529 and 531 respectively.
      <br/>
      Digital modulator computations 533 and 535 multiply the interpolated quadrature signals with proctored constants from memory that provide trigonometric cosine and sine values respectively.
      <br/>
      The modulated signals are then summed in a summing step 537.
      <br/>
      A D/A converter connected to device 11 converts the modulated signals from digital to analog form in a step 539.
      <br/>
      Gain control by a factor G1 is then performed in modem transmission and sent to a DAA.
    </p>
    <p num="520">
      In FIG. 91, a modem receiver using another device 11 receives analog communications signals from the DAA.
      <br/>
      An analog-to-digital converter A/D 521 digitizes the information for a digital signal processor employing device 11.
      <br/>
      High rates of digital conversion place heavy burdens on input processing of prior processors.
      <br/>
      Advantageously, DSP 11 provides for extremely efficient servicing of interrupts from digitizing elements such as A/D 521 and at the same time has powerful digital signal processing computational facility for executing modem algorithms.
      <br/>
      The output of device 11 is supplied to a universal synchronous asynchronous receiver transmitter (USART) 523 which supplies an output D�nT�.
    </p>
    <p num="521">
      In FIG. 92, a process diagram of modem reception by the system of FIG. 91 involves automatic gain control by factor G2 upon reception from the DAA supplying a signal s(t) for analog-to-digital conversion at a sampling frequency fs.
      <br/>
      The digitized signal is s�nTs� and is supplied for digital processing involving first and second bandpass filters implemented by digital filtering steps BPF1 and BPF2 followed by individualized automatic gain control.
      <br/>
      A demodulation algorithm produces two demodulated signals I'�nTs� and Q'�nTs�. These two signals I' and Q' used for carrier recovery fed back to the demodulation algorithm.
      <br/>
      Also I' and Q' are supplied to a decision algorithm and operated in response to clock recovery.
      <br/>
      A decoding process 551 follows the decision algorithm.
      <br/>
      Decoding 551 is followed by a descrambling algorithm 555 that involves intensive bit manipulation by PLU 41 to recover the input signal d�nt�.
    </p>
    <p num="522">As shown in FIG. 92, the numerous steps of the modem reception algorithm are advantageously accomplished by a single digital signal processor device 11 by virtue of the intensive numerical computation capabilities.</p>
    <p num="523">
      In FIG. 93, computing apparatus 561 incorporating device 11 cooperates with a host computer 563 via an interface 565.
      <br/>
      High capacity outboard memory 567 is interfaced to computer 561 by interface 569.
      <br/>
      The computer 561 advantageously supports two-way pulse code modulated (PCM) communication via peripheral latches 571 and 573.
      <br/>
      Latch 571 is coupled to a serial to parallel converter 575 for reception of PCM communications from external apparatus 577.
      <br/>
      Computer 561 communicates via latch 573 and a parallel to serial unit 579 to supply a serial PCM data stream to the external apparatus 577.
    </p>
    <p num="524">
      In FIG. 94, a video imaging system 601 includes device 11 supported by ROM 603 and RAM 605.
      <br/>
      Data gathering sensors 607.1 through 607.n feed inputs to converter 609 which then supplies voluminous digital data to device 11.
      <br/>
      FIG. 94 highlights an ALU, a register accumulator, multiplier array, a register and has an addressing unit.
      <br/>
      A control element 615 generally represents a decoder and pipeline controller of FIG. 1.
      <br/>
      On-chip I/O peripherals (not shown) communicate with a bus 617 supplying extraordinarily high quality output to a video display unit 619.
      <br/>
      Supervisory input and output I/O 621 is also provided to device 11.
    </p>
    <p num="525">
      Owing to the advanced addressing capabilities in device 11, control 615 is operable on command for transferring the product from a register directly to the addressing circuit and bypassing any memory locations during the transfer.
      <br/>
      Because of the memory mapping, any pair of the computational core-registers of FIG. 1 are advantageously accessed to accomplish memory-bypass transfers therebetween via data bus, regardless of arrow directions to registers on those figures.
      <br/>
      Because the multiplication capabilities of device 11 are utilized in the addressing function, the circuitry establishes an array in the electronic memory 605 wherein the array has entries accessible in the memory with a dimensionality of at least three.
      <br/>
      The video display 619 displays the output resulting from multi-dimensional array processing by device 11.
      <br/>
      It is to be understood, of course, that the memory 605 is not in and of itself necessarily multi-dimensional, but that the addressing is rapidly performed by device 11 so that information is accessible on demand as if it were directly accessible by variables respectively representing multiple array dimensions.
      <br/>
      For example, a three dimensional cubic array having address dimensions A1, A2 and A3 can suitably be addressed according to the equation N2 * A3+N * A2+A1.
      <br/>
      In a two dimensional array, simple repeated addition according to an index count from a register of FIG. 1 is sufficient for addressing purposes.
      <br/>
      However, to accommodate the third and higher dimensions, the process is considerably expedited by introducing the product capabilities of a multiplier.
    </p>
    <p num="526">
      FIGS. 95 and 96 respectively show function-oriented and hardware block-oriented diagrams of video processing systems according to the invention.
      <br/>
      Applications for these inventive systems provide new workstations, computer interfaces, television products and high definition television (HDTV) products.
    </p>
    <p num="527">
      In FIG. 95, a host computer 631 provides data input to numeric processing by device 11.
      <br/>
      Video pixel processing operations 633 are followed by memory control operations 635.
      <br/>
      CRT control functions 637 for the video display are coordinated with the numeric processing 639, pixel processing 633 and memory control 635.
      <br/>
      The output from memory control 635 operations supplies frame buffer memory 641 and then a shift register 643.
      <br/>
      Frame buffer memory and shift register 641 and 643 are suitably implemented by a Texas Instruments device TMS 4161.
      <br/>
      A further shift register 645 supplies video information from shift register 643 to a color palette 647.
      <br/>
      Color palette 647 drives a display 649 which is controlled by CRT control 637.
      <br/>
      The color palette 647 is suitably a TMS 34070.
    </p>
    <p num="528">
      In FIG. 96, the host 631 supplies signals to a first device 11 operating as a DSP microprocessor 653.
      <br/>
      DSP 653 is supported by memory 651 including PROM, EPROM and SRAM static memory.
      <br/>
      Control, address and data information are supplied by two-way communication paths between DSP 653 and a second device 11 operating as a GSP (graphics signal processor) 655.
      <br/>
      GSP 655 drives both color palette 647 and display interface 657.
      <br/>
      Interface 657 is further driven by color palette 647.
      <br/>
      Display CRT 659 is driven by display interface 657.
      <br/>
      It is to be understood that the devices 11 and the system of FIG. 96 in general is operated at an appropriate clock rate suitable to the functions required.
      <br/>
      Device 11 is fabricated in sub-micron embodiments to support processing speeds needed for particular applications.
      <br/>
      It is contemplated that the demands of high definition television apparatus for increased processing power be met not only by use of higher clock rates but also by the structural improvements of the circuitry-disclosed herein.
    </p>
    <p num="529">
      In FIG. 97, an automatic speech recognition system according to the invention has a microphone 701, the output of which is sampled by a sample-and-hold (S/H) circuit 703 and then digitally converted by A/D circuit 705.
      <br/>
      An interrupt-driven fast Fourier transform processor 707 utilizes device 11 and converts the sampled time domain input from microphone 701 into a digital output representative of a frequency spectrum of the sound.
      <br/>
      This processor 707 is very efficient partly due to the zero-overhead interrupt context switching feature, conditional instructions and auxiliary address registers mapped into memory address space as discussed earlier.
    </p>
    <p num="530">
      Processor 707 provides each spectrum to a speech recognition DSP 709 incorporating a further device 11.
      <br/>
      Recognition DSP 709 executes any appropriately now known or later developed speech recognition algorithm.
      <br/>
      For example, in a template matching algorithm, numerous computations involving multiplications, additions and maximum or minimum determinations are executed.
      <br/>
      The device 11 is ideally suited to rapid execution of such algorithms by virtue of its parallel function architecture.
      <br/>
      Recognition DSP 709 supplies an output to a system bus 711.
      <br/>
      ROM 713 and RAM 715 support the system efficiently because of the software wait states on page boundaries provided by recognition DSP 709.
      <br/>
      Output from a speech synthesizer 717 that is responsive to speech recognition DSP 709 is supplied to a loudspeaker or other appropriate transducer 71g.
    </p>
    <p num="531">
      System I/O 721 downloads to document production devices 723 such as printers, tapes, hard disks and the like.
      <br/>
      A video cathode ray tube (CRT) display 725 is fed from bus 711 as described in connection with FIGS. 95 and 96. A keyboard 727 provides occasional human supervisory input to bus 711.
      <br/>
      In industrial and other process control applications of speech recognition, a control interface 729 with a further device 11 is connected to bus 711 and in turn supplies outputs for motors, valves and other servomechanical elements 731 in accordance with bit manipulation and the principles and description of FIGS. 82-87, hereinabove.
    </p>
    <p num="532">
      In speech recognition-based digital filter hearing aids, transformed speech from recognition DSP 709 is converted from digital to analog form by a D/A converter 735 and output through a loudspeaker 737.
      <br/>
      The same chain of blocks 701, 703, 705, 707, 709, 735, 737 is also applicable in telecommunications for speech recognition-based equalization, filtering and bandwidth compression.
    </p>
    <p num="533">In advanced speech processing systems, a lexical access processor 739 performs symbolic manipulations on phonetic element representations derived from the output of speech recognition DSP 709 and formulates syllables, words and sentences according to any suitable lexical access algorithm.</p>
    <p num="534">
      A top-down processor 741 performs a top-down processing algorithm based on the principle that a resolution of ambiguities in speech transcends the information contained in the acoustic input in some cases.
      <br/>
      Accordingly, non-acoustic sensors, such as an optical sensor 743 and a pressure sensor 745 are fed to an input system 747 which then interrupt-drives pattern recognition processor 749.
      <br/>
      Processor 749 directly feeds system bus 711 and also accesses top-down processor 741 for enhanced speech recognition, pattern recognition, and artificial intelligence applications.
    </p>
    <p num="535">Device 11 substantially enhances the capabilities of processing at every level of the speech recognition apparatus of FIG. 97, e.g., blocks 707, 709, 717, 721, 725, 729, 739, 741, 747 and 749.</p>
    <p num="536">
      FIG. 98 shows a vocoder-modem system with encryption for secure communications.
      <br/>
      A telephone 771 communicates in secure mode over a telephone line 773.
      <br/>
      A DSP microcomputer 773 is connected to telephone 771 for providing serial data to a block 775.
      <br/>
      Block 775 performs digitizing vocoder functions in a section 777, and encryption processing in block 781.
      <br/>
      Modem algorithm processing in blocks 779 and 783 is described hereinabove in connection with FIGS. 80 and 82. Block 783 supplies and receives serial data to and from A/D, D/A unit 785.
      <br/>
      Unit 785 provides analog communication to DAA 787.
      <br/>
      The substantially enhanced processing features of device 11 of FIG. 1 makes possible a reduction in the number of chips required in block 775 so a cost reduction is made possible in apparatus according to FIG. 98. In some embodiments, more advanced encryption procedures are readily executed by the remarkable processing power of device 11.
      <br/>
      Accordingly, in FIG. 98, device 11 is used either to enhance the functionality of each of the functional blocks or to provide comparable functionality with fewer chips and thus less overall product cost.
    </p>
    <p num="537">
      Three Texas Instruments DSPs are described in the TMS 320C1x User's Guide and TMS 320C2x User's Guide and Third Generation TMS 320 User's Guide, all of which are incorporated herein by reference.
      <br/>
      Also, coassigned U.S. Pat. Nos. 4,577,282 and 4,713,748 are incorporated herein by reference.
    </p>
    <p num="538">
      While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense.
      <br/>
      Various modifications of the illustrative embodiments, as well as other embodiments of the invention, will be apparent to persons skilled in the art upon reference to this description.
      <br/>
      It is therefore contemplated that the appended claims will cover any such modifications or embodiments as fall within the true scope of the invention.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14.</claim-text>
      <claim-text>A method of operating a digital system having a microprocessor, the method comprising the steps of: fetching a sequence of execution packets for execution by the microprocessor, wherein each execution packet contains up to N instructions that are executed in parallel by the microprocessor; dispatching all instructions of a first execution packet for parallel execution on plural sets of functional units in the microprocessor, wherein the plural sets of finctional units are virtually identical, wherein each instruction of each execution packet is selectively dispatched to either a first set of functional units or to a second set of functional units in response to a bit in each instruction; executing all instructions of the first execution packet in parallel on the plural sets of functional units;</claim-text>
      <claim-text>and repeating the steps of dispatching and executing for each execution packet of the sequence of execution packets, such that for each execution packet instructions of the same type can be dispatched to any and all of the plural sets of functional units, such that a first instruction of a first type from a given first execution packet is executed on the first set of the plural sets of finctional units while a second instruction of the first type from the given execution packet is executed in parallel on the second set of the plural sets of functional units.</claim-text>
      <claim-text>1. A microprocessor comprising:</claim-text>
      <claim-text>fetch circuitry for fetching a sequence of execution packets, wherein each execution packet comprises up to a first number of instructions; a first set of functional units connected to receive instructions from the fetch circuitry, the first set of functional units operable to execute a first plurality of instruction types; a second set of functional units connected to receive instructions from the fetch circuitry;</claim-text>
      <claim-text>wherein the second set of functional units is operable to execute the first plurality of instruction types; dispatch circuitry connected between the fetch circuitry and the first set of functional units and the second set of functional units, the dispatch circuitry operable to dispatch each instruction of each execution packet to both the first set of functional units and to the second set of functional units, such that all instructions of a given execution packet are executed in parallel;</claim-text>
      <claim-text>and wherein the dispatch circuitry selectively dispatches each instruction of each execution packet to either the first set of functional units or to the second set of functional units in response to a bit in each instruction.</claim-text>
      <claim-text>2. The microprocessor of claim 1, wherein each of said sets of functional units includes a multiplier.</claim-text>
      <claim-text>3. The microprocessor of claim 1, wherein each of said sets of functional units includes a logic unit capable of selected logic and arithmetic operations.</claim-text>
      <claim-text>4. The microprocessor of claim 1, wherein each of said sets of functional units includes a logic unit capable of selected logic, arithmetic and shift operations.</claim-text>
      <claim-text>5. The microprocessor of claim 1, wherein each of said sets of functional units includes a logic unit capable of selected arithmetic and data operations.</claim-text>
      <claim-text>6. The microprocessor of claim 1, wherein the dispatch circuitry is further operable to simultaneously dispatch a first instruction of a first type to the first set of functional units, and a second instruction of the first type to the second set of functional units.</claim-text>
      <claim-text>7. The microprocessor of claim 6, wherein the first set of functional units comprises a first register file and the second set of functional units comprises a second register file.</claim-text>
      <claim-text>8. The microprocessor of claim 7, wherein the first set of functional units is interconnected to access the second register file and the second set of functional units is interconnected to access the first register file.</claim-text>
      <claim-text>9. A digital system comprising a microprocessor, wherein the microprocessor comprises: fetch circuitry for fetching a sequence of execution packets, wherein each execution packet comprises up to a first number of instructions; a first set of fimctional units connected to receive instructions from the fetch circuitry, the first set of functional units operable to execute a first plurality of instruction types; a second set of functional units connected to receive instructions from the fetch circuitry;</claim-text>
      <claim-text>wherein the second set of functional units is operable to execute the first plurality of instruction types; dispatch circuitry connected between the fetch circuitry and the first set of functional units and the second set of functional units, the dispatch circuitry operable to dispatch each instruction of each execution packet to both the first set of functional units and to the second set of functional units, such that all instructions of a given execution packet are executed in parallel, and wherein the dispatch circuitry selectively dispatches each instruction of each execution packet to either the first set of functional units or to the second set of functional units in response to a bit in each instruction.</claim-text>
      <claim-text>10. The system of claim 9, wherein the dispatch circuitry is further operable to simultaneously dispatch a first instruction of a first type to the first set of functional units, and a second instruction of the first type to the second set of functional units.</claim-text>
      <claim-text>11. The system of claim 10 being a modem, further comprising an analog-to-digital or digital-to-analog converter interfaced to the microprocessor for connection to a telephone line.</claim-text>
      <claim-text>12. The system of claim 10 being an electronic automotive control system responsive to instructions defined by electrical bits, said electronic automotive control system further comprising an interface coupled to said microprocessor for supplying selected bits to cause a change in at least one of a braking system, a suspension system, or an engine of an automobile.</claim-text>
      <claim-text>13. The system of claim 10 being a process control system, further comprising: sensors connected to said microprocessor responsive to a state of a process, process control elements responsive to electronic directions operable to change at least one parameter of said process, and an interface connected to said microprocessor for supplying selected electronic directions to said process control elements.</claim-text>
    </claim>
  </claims>
</questel-patent-document>