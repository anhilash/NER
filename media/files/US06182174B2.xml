<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182174B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182174</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182174</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22021578" extended-family-id="21281315">
      <document-id>
        <country>US</country>
        <doc-number>09059221</doc-number>
        <kind>A</kind>
        <date>19980413</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09059221</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>21825310</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>5922198</doc-number>
        <kind>A</kind>
        <date>19980413</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09059221</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  12/14        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>14</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  13/16        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>16</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>710105000</text>
        <class>710</class>
        <subclass>105000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>711115000</text>
        <class>711</class>
        <subclass>115000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>711164000</text>
        <class>711</class>
        <subclass>164000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>711E12094</text>
        <class>711</class>
        <subclass>E12094</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-012/14D1</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>012</main-group>
        <subgroup>14D1</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/1466</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>1466</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>2</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>2</number-of-drawing-sheets>
      <number-of-figures>2</number-of-figures>
      <image-key data-format="questel">US6182174</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Memory card interface method using multiplexed storage protect key to indicate command acceptance</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>CLARK CARL E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5163096</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5163096</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>AMINI NADER, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5499346</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5499346</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>CHANG PAUL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5634015</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5634015</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>ISFELD MARK S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5828835</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5828835</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>BIRNEY RICHARD EUGENE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4038645</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4038645</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>HELLER ANDREW R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4366537</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4366537</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>HELLER ANDREW R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4500952</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4500952</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Ekanadham et al, "Multisequencing A Single Instruction Stream-Storage Protect Key Register," IBM Tech. Disc. Bull., vol. 36, No. 6A, Jun. 1993, pp. 269-271.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Kark, Kevin W.</name>
            <address>
              <address-1>Poughkeepsie, NY, US</address-1>
              <city>Poughkeepsie</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Shen, William Wu</name>
            <address>
              <address-1>Poughkeepsie, NY, US</address-1>
              <city>Poughkeepsie</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Lavallee, Russell W.</name>
            <address>
              <address-1>LaGrangeville, NY, US</address-1>
              <city>LaGrangeville</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Wille, Udo</name>
            <address>
              <address-1>Holzgerlingen, DE</address-1>
              <city>Holzgerlingen</city>
              <country>DE</country>
            </address>
          </addressbook>
          <nationality>
            <country>DE</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Ulland, Hartmut</name>
            <address>
              <address-1>Altdorf, DE</address-1>
              <city>Altdorf</city>
              <country>DE</country>
            </address>
          </addressbook>
          <nationality>
            <country>DE</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="6">
          <addressbook lang="en">
            <name>Lipponer, Walter</name>
            <address>
              <address-1>Ammerbuch, DE</address-1>
              <city>Ammerbuch</city>
              <country>DE</country>
            </address>
          </addressbook>
          <nationality>
            <country>DE</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Augspurger, Lynn L.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Gossage, Glenn</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A memory interface between the storage controller and memory card of an S/390 system uses the S/390 Storage Protect (SP) Key as an indication or protocol of storage command acceptance by the memory card.
      <br/>
      When the SP key is returned, then the command is deemed to be accepted by the memory card and the key will be used by the processor for its storage validation in accordance with the S/390 architecture.
      <br/>
      In the event that the memory card detected an error associated with the command, it will then return an error response code via a memory status bus.
      <br/>
      The memory status bus is multiplexed to service the existing architected requirement as well as an indicator of handshaking between the memory controller and the memory card.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">This invention is related to computers and computer system memories and in particular to the interfaces between a memory controller and memory card of an S/390 system computer system memory.</p>
    <heading>BACKGROUND</heading>
    <p num="2">
      Any mainframe such as a S/390 compatible system, which uses a storage protection (SP) key and uses a command response (handshake) type bus between the processor and memory, provides an interface to memory or main store.
      <br/>
      Processor to memory (or Main Store MS) interfaces have always existed in the computer industry.
      <br/>
      There are many ways to define the communication protocol or handshake between the sender and receiver on both sides of the bus for memory accesses.
      <br/>
      A typical example of processor to memory protocol includes Command Accept, Fetch Data Alert, Store Complete with additional protocols for bus management if the data bus is a bi-directional bus.
    </p>
    <p num="3">
      These protocols may require separated hardware signals or the protocol may be embedded with an existing bus and time shared control signals are passed with other existing signals like data bus or command bus signals.
      <br/>
      These other solutions require extra hardware signal lines and/or restrict the performance in order to mix with control signals on an existing bus which can handle the interface handshake.
      <br/>
      Separated hardware signals means more hardware lines and more input/output (IO) from chips and modules.
      <br/>
      Timing sharing with other signals also presents a restriction and limits functional usage.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="4">
      This invention provides a way for the S/390 memory card to return its SP key data as an indication the command was "accepted" by the memory card while the SP key is returned to the requestor for storage validation.
      <br/>
      Had the memory card detected an error, it would have indicated an error status response using the same bus.
      <br/>
      Therefore, we multiplex the Key Return, Command Acceptance, Error Reporting, and Data Return onto one Memory Status Bus without having separate signal lines for all these conditions.
    </p>
    <p num="5">By using an existing architected function, the SP key communication protocol and the memory command response protocol are merged together, providing support for each function without exposure to any control restriction or performance limitation.</p>
    <p num="6">
      These and other improvements are set forth in the following detailed description.
      <br/>
      For a better understanding of the invention with advantages and features, refer to the description and to the drawings.
    </p>
    <heading>DESCRIPTION OF THE DRAWINGS</heading>
    <p num="7">
      FIG. 1 shows an S/390 computer.
      <br/>
      FIG. 2 is a flowchart of a process or method for interfacing a memory card and memory controller in the system of FIG. 1 according to a preferred embodiment of the invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="8">
      In the current IBM Enterprise System Architecture (ESA/390 architecture) used for the System/309 (S/390 is the registered trademark of IBM for computer systems, used in connection with large servers and using a S/390 architecture), the Storage Protect Key (SP key) is the Storage Key as defined by the S/390 Architecture and which includes the following: A 4-bit SP key, A Reference Bit, A Change Bit and a Fetch Protection Bit.
      <br/>
      These 7 bits of the SP key field protect a single page (4Kbyte) of storage data.
      <br/>
      The SP key needs to be accessed, compared and modified for every memory operation related to operation system usage.
    </p>
    <p num="9">
      Since the SP key access is necessary for every memory operation and the SP key needs to be fetched from a memory card, we have used this aspect of the ESA/390 architected S/390 system and use the SP key bus to share controls with the essential memory status as part of our bus command response protocol (handshake) method in our preferred embodiment.
      <br/>
      In the embodiment illustrated by FIG. 1 showing the relationship of the S/390 processor's memory controller and the memory card utilized in the present process or method of interfacing the card to the memory controller, the bi-directional data bus transfers memory commands via the memory command bus and delay transfer signals via the delay transfer bus to the memory card, and the memory card returns memory data and memory status via the related portion of the bi-directional bus.
    </p>
    <p num="10">Memory Status Bus Definition</p>
    <p num="11">The status bus is used for both the return of the SP key and he status of the operation the memory card is executing.</p>
    <p num="12">
      It is an 8-bit bus (bit 0 through bit 7).
      <br/>
      If bit 7 is ON, then the bus is returning a SP key which is a 7-bit facility, occupying bit 0 through 6 of the Memory Status Bus.
      <br/>
      On the other hand, if Bit 7 of the Memory Status Bus is OFF, then it signifies encoded responses from the memory cards such as Fetch Alert, Store Completion, Error etc.
      <br/>
      Please refer to Table 1 to 4 for further detail.
    </p>
    <p num="13">
      Since the Memory Status Bus is used for SP key return as well as other memory responses such as Fetch Alert, Store Completion and Encoded Error Response, the following priority is applied: Fetch Alert status has highest right to use the bus, followed by returning of the storage protect (SP) key, which also acts as the command accept handshake, then follows the store completion status.
      <br/>
      Please refer to FIG. 2 for detail.
    </p>
    <p num="14">
      -- TABLE 1
      <br/>
      -- Memory Status Bus Definition when Bit 7 is ON
      <br/>
      -- Memory        Memory    Memory      Memory      Memory
      <br/>
      -- Status Bus    Status Bus Status Bus  Status Bus  Status Bus
      <br/>
      -- Bit 0 to 3    Bit 4     Bit 5       Bit 6       Bit 7 is ON
      <br/>
      -- Store         Fetch Pro- Reference   Change Bit  Yes
      <br/>
      -- Protect Key   tection Bit Bit
    </p>
    <p num="15">
      -- TABLE 2
      <br/>
      -- Memory Status Bus Definition when Bit 7 is OFF
      <br/>
      --                                              Memory Status
      <br/>
      -- Memory Status  Memory Status  Memory Status  Bus Bit 7 is
      <br/>
      -- Bus Bit 0      Bus Bit 1 to 2 Bus Bit 3 to 6 Off
      <br/>
      -- Reserve        Memory Bank    Action Code    Yes
      <br/>
      --                ID (see separation (see separate
      <br/>
      --                table for detail) table for detail)
    </p>
    <p num="16">
      -- TABLE 3
      <br/>
      -- Action Code Definition
      <br/>
      -- Action Code                 Meaning
      <br/>
      -- `0000                 Idle
      <br/>
      -- `0001                 Fetch Alert Indicator
      <br/>
      -- `0010                 Store Completion Indicator
      <br/>
      -- `1100                 SP Key Array Error Check
      <br/>
      -- `1111                 Command Parity Check
    </p>
    <p num="17">
      -- TABLE 4
      <br/>
      -- Memory Bank ID Definition
      <br/>
      -- Memory Bank ID                   Meaning
      <br/>
      -- `00                        Memory Bank 0
      <br/>
      -- `01                        Memory Bank 1
      <br/>
      -- 10                               Memory Bank 2
      <br/>
      -- 11                               Memory Bank 3
    </p>
    <p num="18">Remark</p>
    <p num="19">
      Action code "0001", is `fetch alert` to inform the processor that the requested fetch data are coming.
      <br/>
      Action code "0010" is `store complete` which indicates the memory card has completed a requested store operation.
    </p>
    <p num="20">
      When "1111" action code happens and there is no clock stop condition, the processor can assume that the array on the memory card has not been altered so that a retry action can take place.
      <br/>
      For a fetch command action code of "1111", the memory card will send back a Fetch Alert accompanying an 8 cycle window of dummy data.
      <br/>
      The Fetch Alert is used by the processor to indicate that the memory card is free, so that a retry of the current fetch request can begin.
    </p>
    <p num="21">MS-Processor Card Interface and Handshakes</p>
    <p num="22">
      A processor sends commands on its command bus.
      <br/>
      The fastest repetition rate from one command to the second command is determined to be 8 cycles minimum (i.e. from first command cycle to next command cycle, and at a minimum there must be a 7 cycle gap).
      <br/>
      This is a requirement since there is a minimum of an 8 cycle window of data on the bi-directional data bus per command requested.
      <br/>
      The data bus is the limiting factor before the next command can be sent to the memory card.
      <br/>
      There is no maximum cycle limit.
    </p>
    <p num="23">Command Accept Handshake</p>
    <p num="24">
      For any command that is issued, there is a corresponding handshake window on the status bus 9 cycles later.
      <br/>
      We call this window a key response cycle, because unless there is other status information which has higher priority, this is the cycle the SP key is returned as an indication of Command Accept.
      <br/>
      In the case that there are priority conflicts and another status information gets placed on the bus, the key response will just be delayed to the next cycle.
      <br/>
      A Fetch Alert is the only kind of status which has a higher priority than a SP key return, because it has to be on the status bus with a fixed relationship to the data on the data bi-directional bus.
      <br/>
      FIG. 2 shows the flow diagram of the process wherein the memory controller of the processor determines whether or not the memory card is returning a Fetch Alert indicator.
      <br/>
      The other steps used in the interface are generally set out in FIG. 2, and described more particularly herein.
    </p>
    <p num="25">If a command has been received and the SP key contents at a requested address has a SP key error, a key error status will be returned as a response to the processor at the response cycle.</p>
    <p num="26">If there is neither a SP key nor any key error status at the handshake window, and there is no other status which has a higher priority, this will mean that a portion of the memory card is malfunctioning and a machine check should be issued.</p>
    <p num="27">
      The SP key return is valid even for the commands that do not relate to key functions.
      <br/>
      There will be a dummy SP key at the key response cycle in order to complete the handshake.
    </p>
    <p num="28">Memory Status Bus used as a Key Return/Command Accept Indicator</p>
    <p num="29">
      The processor will use the SP key for storage validation.
      <br/>
      In the event the command has an error, the status bus would return an error response code which would describe the type of error being detected.
      <br/>
      See the timing relationships between Memory Command Bus and Memory Status Bus where the status returns a S/390 Store Protect Key which is used as an indication for the command being accepted by the memory card as shown in the next timing diagram for detail.
    </p>
    <p num="30">
      --
      <br/>
      -- System Cycle
      <br/>
      --                                   1111111111    2222222222
      <br/>
      --                       123456789   0123456789    0123456789
      <br/>
      -- Memory Command Bus    CCC......   ..........    ..........
      <br/>
      --                       CCC......   ..........    ..........
      <br/>
      --                       .........   ..........    ..........
      <br/>
      -- Memory Status Bus     .........   S.........    ..........
      <br/>
      -- Legend:
      <br/>
      -- C = Active Memory Command Bus for 3 cycles
      <br/>
      -- S = Active Memory Status
      <br/>
      -- .... = No Activity
    </p>
    <p num="31">Data Fetch Command</p>
    <p num="32">
      Data fetch commands are issued through the command bus.
      <br/>
      When the data is ready to be sent back to the memory controller, there is a Fetch Alert status sent to prepare the processor's receiving register and buffer.
    </p>
    <p num="33">Fetch Alert Status</p>
    <p num="34">
      This status is sent at the 5th cycle in advance of the fetch data being returned on the bi-directional data bus (which may be referred to as "bidi data bus" or simply "bidi bus" for short.
      <br/>
      The fetch alert status also contains a requestor identification (ID) which can be used to identify the ownership of the returned data.
    </p>
    <p num="35">
      The Fetch Alert Status is important when there is a need to switch the bidi data bus's direction.
      <br/>
      If a Fetch Alert Status is detected, It signifies the memory card's intention to use the bi-directional data bus for the entire duration of the corresponding data transfer.
      <br/>
      Our memory controller should not schedule any new store command to the memory card.
      <br/>
      See timing Diagram below for detail.
    </p>
    <p num="36">Memory Status Bus used as a Fetch Alert Indicator</p>
    <p num="37">The following diagram shows the detail of the timing relationship between the Memory Command Bus and Memory Status Bus where the status returns a Fetch Alert Indication that fetch data are returning from Memory in 5 cycles based upon current technology and implementation.</p>
    <p num="38">System Cycle</p>
    <p num="39">
      --
      <br/>
      -- System Cycle
      <br/>
      --                                  1111111111  2222222222     3333333333
      <br/>
      --                      123456789   0123456789  0123456789     0123456789
      <br/>
      -- Memory Command Bus   CCC......   ........... ..........     ..........
      <br/>
      --                      CCC......   ........... ..........     ..........
      <br/>
      --                      .........   ........... ..........     ..........
      <br/>
      -- Memory Status Bus    .........   .........S. ..........     ..........
      <br/>
      -- Memory Data Bus      .........   ........... ...DDDDDDD     DDDDDDDDD.
      <br/>
      -- Legend:
      <br/>
      -- C = Active Memory Command Bus for 3 cycles
      <br/>
      -- S =Active Memory Status Bus used as a Fetch Alert Indicator
      <br/>
      -- D =Active Data from Memory
      <br/>
      -- .... = No Activity
    </p>
    <p num="40">Data Store Command</p>
    <p num="41">
      Data store commands are issued through the command bus.
      <br/>
      The first cycle of data on the data bus is lined up with the store command.
      <br/>
      The memory card will store the first cycle of data from the bidi bus in the quadword (QW) address specified by the quadword's QW ID delivered in the store command.
      <br/>
      All following quadwords are stored in ascending QW addresses.
      <br/>
      There is a wrap-around at the top of the 128 byte line, except a command to store 64 bytes.
    </p>
    <p num="42">Delay Transfer and Bidi Management for Store Command</p>
    <p num="43">
      The data bus between the memory controller and memory card is bi-directional.
      <br/>
      When the memory controller is scheduled to send a store command to the memory card, it needs to raise the Delay Transfer signal and wait for a minimum of 2 cycles from the memory card interface, if there is no Fetch Alert and the data bidi is not transferring data for a previous alert, then at the 4th cycle the processor will own the bidi bus.
      <br/>
      If there is a Fetch Alert or there is fetched data already in transition, then Delay Transfer signal will be kept active until the data transfer from the memory card has completed and at that time the processor will own the bidi bus.
    </p>
    <p num="44">
      When the processor owns the bidi bus, the first data cycle is a quiet data cycle by sending all `0` (a low signal level) on the bidi bus to kill the signal reflections.
      <br/>
      A processor driver will also send an all "0" cycle when the processor finishes the data transfer and changes the bidi bus ownership back to the memory card.
    </p>
    <p num="45">
      Once the processor sends store data with a store command, the processor drops the Delay Transfer signal after the first cycle of store data.
      <br/>
      If there is more than one store operation, the processor keeps the Delay Transfer signal active until the first cycle of the last group of data is transferred.
    </p>
    <p num="46">
      The memory card needs to set the Delay Transfer and bidi bus switch precisely in synchronization with the processor.
      <br/>
      Otherwise data will collide on bidi bus.
      <br/>
      It is also true that a Delay Transfer signal suppresses the subsequent fetch alert until all store data transfers are complete.
      <br/>
      See the next timing diagram for detail.
    </p>
    <p num="47">Timing relationship between the Memory Command Bus and Delay Transfer</p>
    <p num="48">The following diagram shows the detail of the timing relationship between the Memory Command Bus and Delay Transfer based upon current technology and implementation.</p>
    <p num="49">
      --
      <br/>
      -- System Cycle
      <br/>
      --                                  1111111111    2222222222
      <br/>
      --                      123456789   0123456789    0123456789
      <br/>
      -- Memory Command Bus   ......CCC   ..........    ..........
      <br/>
      --                      ......CCC   ..........    ..........
      <br/>
      --                      .........   ..........    ..........
      <br/>
      -- Delay Transfer       TTTTTTT..   ..........    ..........
      <br/>
      -- Memory Data Bus      ......DDD   DDDDDDDDDD    DDD.......
      <br/>
      -- Legend:
      <br/>
      -- C = Active Memory Command Bus for 3 cycles
      <br/>
      -- D = Active Data from Memory
      <br/>
      -- T = Active Delay Transfer signal to memory card
      <br/>
      -- .... = No Activity
    </p>
    <p num="50">Store complete Status</p>
    <p num="51">
      When the store data is put away and the memory card is ready for the next command, a store completion status will be sent back to the memory controller.
      <br/>
      The cycle of store completion has been timed to provide the earliest cycle that a command at an immediate cycle can be provided against the same bank.
      <br/>
      See next timing diagram for detail.
    </p>
    <p num="52">Memory Status Bus used as a Store Completion Indicator</p>
    <p num="53">Timing relationship between the Memory Command Bus and Memory Status Bus where the status returns a Store Completion Indication based upon the current technology and implementation.</p>
    <p num="54">
      --
      <br/>
      -- System Cycle
      <br/>
      --                                  1111111111    2222222222
      <br/>
      --                      123456789   0123456789    0123456789
      <br/>
      -- Memory Command       CCC......   ..........    ..........
      <br/>
      -- Bus                  CCC......   ..........    ..........
      <br/>
      --                      .........   ..........    ..........
      <br/>
      -- Memory Status Bus    .........   ....S.....    ..........
      <br/>
      -- Memory Data Bus      DDDDDDDDD   DDDDDDD...    ..........
      <br/>
      -- Legend:
      <br/>
      -- C = Active Memory Command Bus for 3 cycles
      <br/>
      -- S = Active Memory Status Bus used as a Store Completion Indicator
      <br/>
      -- D = Active Data from Memory
      <br/>
      -- .... = No Activity
    </p>
    <p num="55">
      While we have described our preferred embodiments of our invention, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims which follow.
      <br/>
      These claims should be construed to maintain the proper protection for the invention disclosed with respect to FIGS. 1 and 2.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for interfacing a memory controller and a memory card of an S/390 architected system, comprising the steps of:</claim-text>
      <claim-text>multiplexing signals on a memory status bus between the memory controller and the memory card to service data exchanges as well as provide an indicator of handshaking between the memory controller and the memory card, and using an S/390 Storage Protect Key to indicate storage command acceptance by the memory card whereby if the Storage Protect key is returned, then the command is deemed to be valid and accepted by the memory card even for commands that do not relate to key functions and the Storage Protect key will be used by a processor in the S/390 architecture system for storage validation in accordance with the S/390 architecture and a dummy key at the key response cycle will complete the handshake in the event the command does not relate to key functions.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A method according to claim 1 wherein in the event that said memory card detected an error associated with the storage command, it will then return an error response code via the memory status bus.</claim-text>
    </claim>
  </claims>
</questel-patent-document>