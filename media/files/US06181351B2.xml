<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181351B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181351</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181351</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22024543" extended-family-id="42107779">
      <document-id>
        <country>US</country>
        <doc-number>09059681</doc-number>
        <kind>A</kind>
        <date>19980413</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09059681</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43164077</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>5968198</doc-number>
        <kind>A</kind>
        <date>19980413</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09059681</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06T  15/70        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>15</main-group>
        <subgroup>70</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>345473000</text>
        <class>345</class>
        <subclass>473000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>704276000</text>
        <class>704</class>
        <subclass>276000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G10L-015/26A</text>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>015</main-group>
        <subgroup>26A</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G10L-021/06</text>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>21</main-group>
        <subgroup>06</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G10L-021/06</classification-symbol>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>21</main-group>
        <subgroup>06</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20150114</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G10L-015/26</classification-symbol>
        <section>G</section>
        <class>10</class>
        <subclass>L</subclass>
        <main-group>15</main-group>
        <subgroup>26</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20150109</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>30</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>9</number-of-drawing-sheets>
      <number-of-figures>11</number-of-figures>
      <image-key data-format="questel">US6181351</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Synchronizing the moveable mouths of animated characters with recorded speech</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>LITWINOWICZ PETER C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5680531</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5680531</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>GUINAN MARY BETH</text>
          <document-id>
            <country>US</country>
            <doc-number>6022222</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6022222</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>ODA MASAOMI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6088040</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6088040</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>GASPER ELON</text>
          <document-id>
            <country>US</country>
            <doc-number>4884972</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4884972</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>GASPER ELON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5111409</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5111409</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>RAO BHASKARA M L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5277997</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5277997</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>GASPER ELON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5278943</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5278943</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>WILLIAMS KENNETH A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5287446</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5287446</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>WILLIAMS KENNETH A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5425139</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5425139</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>WILLIAMS KENNETH A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5430835</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5430835</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>GASPER ELON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5613056</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5613056</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>GASPER ELON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5630017</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5630017</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>Syrdal, A. et al., Applied Speech Technology, Speech: Articulatory, Linguistic, Acoustic, and Perceptual Descriptions, Chapter 1, Section 5, pp. 15-22 (1995), Wellesley, Massachusetts.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Parke &amp; Waters, Computer Facial Animation, Speech Synchronized Animation, Chapter 8, pp. 259-285 (1996), Boca Raton, Florida.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Microsoft Corporation</orgname>
            <address>
              <address-1>Redmond, WA, US</address-1>
              <city>Redmond</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>MICROSOFT</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Merrill, John Wickens Lamb</name>
            <address>
              <address-1>Redmond, WA, US</address-1>
              <city>Redmond</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Trower, II, Tandy W.</name>
            <address>
              <address-1>Woodinville, WA, US</address-1>
              <city>Woodinville</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Weinberg, Mark Jeffrey</name>
            <address>
              <address-1>Carnation, WA, US</address-1>
              <city>Carnation</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Klarquist Sparkman Campbell Leigh &amp; Whinston, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Nguyen, Phu K.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      The animation of a speaking character is synchronized with recorded speech by creating and playing a linguistically enhanced sound file.
      <br/>
      A sound editing tool employs a speech recognition engine to create the linguistically enhanced sound file from recorded speech and a text of the speech.
      <br/>
      The speech recognition engine provides timing information related to word breaks and phonemes that is used by the sound editing tool to annotate the speech sound data when creating the linguistically enhanced sound file.
      <br/>
      When the linguistically enhanced sound file is played to produce sound output, the timing information is retrieved to control the animated character's mouth movement and word pacing in the character's word balloon.
      <br/>
      The sound editing tool additionally provides editing functions for manipulating the timing information.
      <br/>
      A text to speech engine can use the same programming interface as the linguistically enhanced sound file player to send notifications to the animation, providing prototyping without recorded speech.
      <br/>
      Since both use the same interface, recorded speech can be incorporated at a later time with minimal modifications.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The invention generally relates to computer-generated animation, and more specifically to synchronizing animation with recorded speech.</p>
    <heading>BACKGROUND AND SUMMARY OF THE INVENTION</heading>
    <p num="2">
      Computer animation has come into widespread use for a variety of applications.
      <br/>
      One such application is character animation.
      <br/>
      For example, a game program may present an animated character for entertainment, or an educational program may include an animated teacher character.
      <br/>
      In addition, animated characters are a useful part of social interfaces that present an interactive interface with human qualities.
      <br/>
      For instance, an animated character may appear on a computer display to help a user having difficulty completing a function or to answer questions.
      <br/>
      The character's creators may give it certain human traits reflected in gestures and other behavior, and the character may be programmed to react to actions by the user.
    </p>
    <p num="3">
      A challenge facing computer animators is presenting a convincing animation.
      <br/>
      One element of this challenge involves presenting a speaking character.
      <br/>
      Sound output for the character can be sent to a sound device such as a computer speaker.
      <br/>
      In the character animation, some activity is performed, such as having the character's mouth move or displaying the text of the spoken words in an accompanying word balloon, such as that shown in a newspaper comic strip.
      <br/>
      The appearance of words in the balloon can be paced to provide a closed-captioning effect.
      <br/>
      In this way, the user is presented with the illusion that the character on the display is actually speaking the words sounded from the computer speaker.
    </p>
    <p num="4">
      However, to create a compelling simulation of a speaking character, the character's mouth should be synchronized with the audio output.
      <br/>
      Part of the human communication experience includes receiving visual cues from whoever is speaking.
      <br/>
      If a character's mouth movement does not match the spoken words, the user will not experience a realistic presentation of the character.
      <br/>
      Instead, the animation is much like a foreign film in which the spoken translation is dubbed over the original sound track.
      <br/>
      In addition, if the appearance of the words in the character's word balloon is not properly paced with the character's speech, the resulting presentation can be confusing.
      <br/>
      Poor quality animation reduces the effectiveness of the character presentation.
      <br/>
      This can be especially troublesome if the character is being used as part of a social interface that is based on presenting a convincing simulation of an interactive speaking character.
      <br/>
      A social interface can be a useful tool for placing the computer user at ease and for assisting the user with unfamiliar tasks.
      <br/>
      However, a confusing character presentation defeats the purpose of a social interface.
    </p>
    <p num="5">
      When animation is done without a computer, synchronization is accomplished by an animator who draws each frame of the animated character to reflect an appropriate mouth shape.
      <br/>
      Inappropriate frames in an animation are usually perceptible by the viewer and result in an inferior animation.
      <br/>
      Therefore, the animator is typically a highly skilled professional who is highly compensated for high quality work.
      <br/>
      In addition, the process can be time consuming, as the animator often reviews the animation a small portion at a time to craft appropriate mouth shapes in each animation frame.
    </p>
    <p num="6">
      With the advent of computer animation systems, various tools have become available to professional animators to assist in the animation process.
      <br/>
      However, even with the aid of a computer, the professional animator still reviews and edits the animation a small portion at a time to ensure an appropriate mouth shape reflects what is being spoken in the recorded speech.
      <br/>
      Although the computer can provide some useful features, a great deal of work is still required by the animator, adding considerably to development costs.
      <br/>
      Further, computer software typically undergoes multiple revisions during its life cycle.
      <br/>
      Repeatedly involving the professional animator in each revision can become prohibitively expensive.
    </p>
    <p num="7">
      To avoid the expenses related to the labor-intensive task of the animator, some software developers have addressed the problem of mouth synchronization by using the amplitude of the accompanying recorded speech to control mouth movement.
      <br/>
      Throughout the animation, the size of the character's mouth opening is adjusted to match the amplitude of the speech sounded from the computer's speaker.
      <br/>
      However, this approach has the drawback of inaccurately depicting the character's mouth in many instances.
      <br/>
      For example, the amplitude of an aspirated sound such as the "h" in "hello" is typically very low.
      <br/>
      Accordingly, based on amplitude, a closed mouth might be displayed when the "h" sound is voiced.
      <br/>
      However, the human mouth must be open in order to pronounce the "h" sound.
      <br/>
      Similar problems exist for other sounds.
      <br/>
      As a result, this approach has not led to high quality presentations of animated characters.
    </p>
    <p num="8">
      Another approach to solving the synchronization problem is to use a synthetic voice generated by a text to speech ("TTS") software engine to generate the speech sound for the character animation.
      <br/>
      A text to speech engine can output a synthetic voice based on a text string.
      <br/>
      For instance, if supplied with the text "hello," the TTS engine will produce a voice speaking the word "hello." As the TTS engine generates output, a system can select appropriate mouth shapes for use in the animation.
      <br/>
      The result is animation in which the character's mouth movement is synchronized with the synthetic voice.
      <br/>
      However, due to various limitations associated with synthetic voices, the sound output does not result in a voice that is of the quality available from human professional vocal talent.
      <br/>
      Thus, the TTS approach does not result in high quality animated speaking characters.
      <br/>
      In addition, one of the features of a social interface is to put the user at ease by presenting human characteristics in the animated character.
      <br/>
      Typically, the user perceives that a synthetic voice is that of a machine lacking familiar human characteristics.
      <br/>
      As a result, the TTS approach fails to offer the convincing presentation needed for a social interface.
    </p>
    <p num="9">
      The invention provides a method and system for synchronizing computer output or processing with recorded speech.
      <br/>
      The invention is particularly suited to synchronizing the animation of a character with recorded speech while avoiding the problems described above.
      <br/>
      Although the synchronization can be performed without a professional animator, the resulting animation is of the high quality necessary for a compelling presentation of a speaking character.
      <br/>
      The invention can also be used to synchronize other computer output with recorded speech.
      <br/>
      For example, a background color or background scene can be changed based on an event in the recorded speech.
    </p>
    <p num="10">
      In one implementation, a system synchronizes the animation of a character with recorded speech in the form of speech sound data.
      <br/>
      The system includes a sound file tool, a speech recognition engine, and a file player.
      <br/>
      The sound file tool acquires the speech sound data and a text of the speech sound data.
      <br/>
      The speech recognition engine analyzes the speech sound data and the text to determine linguistic event values and time values.
      <br/>
      A linguistic event value indicates a linguistic event in the speech sound data, such as a spoken phoneme, a spoken word, or some other event.
      <br/>
      A time value indicates when the linguistic event occurs within the speech sound data.
      <br/>
      The sound file tool annotates the speech sound data with these values to create a linguistically enhanced sound file.
    </p>
    <p num="11">
      When the character is animated, the file player plays the linguistically enhanced sound file to produce sound output and send information to the animation.
      <br/>
      The information includes events specifying that the animation perform some action to indicate the linguistic event at a time indicated by the time value.
      <br/>
      For example, a particular mouth shape associated with a spoken phoneme could be presented in a frame of the character animation or the text of a spoken word could be presented in the character's word balloon.
      <br/>
      The result is a synchronized animation of a quality superior to that produced by amplitude-based mouth shape selection.
    </p>
    <p num="12">
      In addition, since a human voice is used, the quality of the sound output is superior to that produced by a TTS-based synthetic voice, and the invention provides a compelling illusion of a speaking character.
      <br/>
      Since the process of acquiring linguistic information such as phoneme and word break data is automated, the process can be performed by a user who is unfamiliar with the art of animation.
    </p>
    <p num="13">
      Another aspect of the invention is a system for editing the linguistic event values and time values.
      <br/>
      This system is implemented in a sound editing tool that provides a user interface displaying a graphical representation of a sound wave representing recorded speech.
      <br/>
      The tool enables the user to edit the timing information to improve performance.
      <br/>
      Thus, the invention might also be useful to a professional animator.
      <br/>
      In a further aspect of the invention, the linguistic information and sound data can be combined into a single enhanced sound file, providing ease of distribution and use.
      <br/>
      In addition, the file can be constructed so that it can be played with a player capable of playing the original sound data, providing compatibility.
    </p>
    <p num="14">
      In another aspect of the invention, programming interfaces in the system are arranged to reduce the costs of prototyping.
      <br/>
      The enhanced sound file player is arranged so that it has an interface to the animation controller that is compatible with the interface of a TTS-based animation system.
      <br/>
      In this way, the character's actions and speech can be prototyped using the inexpensive TTS option, supplying plain text instead of a recorded human voice.
      <br/>
      The TTS engine generates a synthetic voice and provides data for synchronizing the character's mouth.
      <br/>
      The synthetic voice is often acceptable for prototyping purposes.
      <br/>
      When the development is in the final phases, an enhanced sound file can be generated with professional vocal talent.
      <br/>
      The enhanced sound file can be easily integrated into the character because the TTS engine and the enhanced sound file player use compatible interfaces.
      <br/>
      In this way, professional vocal talent need not be employed throughout the entire development process, reducing development costs.
    </p>
    <p num="15">Further features and advantages of the invention will become apparent with reference to the following detailed description of illustrated embodiments that proceeds with reference to the accompanying drawings.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="16">
      FIG. 1 is a block diagram of a computer system that may be used as an operating environment for the invention.
      <br/>
      FIG. 2 is a block diagram of a system for creating and playing a linguistically enhanced sound file, including a sound file tool and a linguistically enhanced sound file player that execute on a computer system such as shown in FIG. 1.
      <br/>
      FIG. 3 is a flowchart of a method performed by the system of FIG. 2.
      <br/>
      FIG. 4 is a block diagram of a linguistic information and sound editing tool that executes on a computer system shown in FIG. 1 and creates a linguistically enhanced sound file.
      <br/>
      FIG. 5 is a flowchart of a method carried out by the editing tool of FIG. 4 for creating a linguistically enhanced sound file.
      <br/>
      FIG. 6 is a view of a user interface window presented by the linguistic information and sound editing tool of FIG. 4.
      <br/>
      FIG. 7 is a block diagram showing a linguistically enhanced sound file player that executes on a computer system such as shown in FIG. 1.
      <br/>
      FIG. 8A is a flowchart of a method for playing a linguistically enhanced sound file carried out by the animation server, linguistically enhanced sound file player, and audio player of FIG. 7.
      <br/>
      FIG. 8B is a flowchart of a method for processing next word notifications carried out by the animation server of FIG. 7.
      <br/>
      FIG. 8C is a flowchart of a method for processing phoneme notifications carried out by the animation server of FIG. 7.
      <br/>
      FIG. 9 is a block diagram showing a linguistically enhanced sound file player and a text to speech engine using compatible interfaces to an animation server and an audio player.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="17">
      The invention is directed to methods and systems for synchronizing the animation of a speaking character with recorded speech.
      <br/>
      In the illustrated embodiments, the invention is illustrated as implemented in a software suite entitled "Microsoft Agent," marketed by Microsoft Corporation of Redmond, Washington.
      <br/>
      Microsoft Agent provides a wide variety of features for manipulating animated characters, including an animation server.
      <br/>
      Microsoft Agent uses various components of Microsoft Command and Control speech recognition engine, also marketed by Microsoft Corporation.
      <br/>
      Microsoft Command and Control speech engine includes a general-purpose speech recognition engine.
      <br/>
      A software utility available from Microsoft Corporation entitled "Microsoft Linguistic Information Sound Editing Tool" provides features for manipulating sound files and linguistic data for use with Microsoft Agent or another animation server.
    </p>
    <p num="18">Exemplary Operating Environment</p>
    <p num="19">
      FIG. 1 and the following discussion are intended to provide a brief, general description of a suitable computing environment in which the invention may be implemented.
      <br/>
      The invention is implemented in a variety of program modules.
      <br/>
      Generally, program modules include routines, programs, components, data structures, etc. that perform particular tasks or implement particular abstract data types.
      <br/>
      The invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.
      <br/>
      The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.
      <br/>
      In a distributed computing environment, program modules may be located in both local and remote memory storage devices.
    </p>
    <p num="20">
      With reference to FIG. 1, an exemplary system for implementing the invention includes a conventional personal computer 20, including a processing unit 21, a system memory 22, and a system bus 23 that couples various system components including the system memory to the processing unit 21.
      <br/>
      The system bus may be any of several types of bus structure including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of conventional bus architectures such as PCI, VESA, Microchannel, ISA and EISA, to name a few.
      <br/>
      The system memory includes read only memory (ROM) 24 and random access memory (RAM) 25. A basic input/output system 26 (BIOS), containing the basic routines that help to transfer information between elements within the personal computer 20, such as during start-up, is stored in ROM 24.
      <br/>
      The personal computer 20 further includes a hard disk drive 27, a magnetic disk drive 28, e.g., to read from or write to a removable disk 29, and an optical disk drive 30, e.g., for reading a CD-ROM disk 31 or to read from or write to other optical media.
      <br/>
      The hard disk drive 27, magnetic disk drive 28, and optical disk drive 30 are connected to the system bus 23 by a hard disk drive interface 32, a magnetic disk drive interface 33, and an optical drive interface 34, respectively.
      <br/>
      The drives and their associated computer-readable media provide nonvolatile storage of data, data structures, computer-executable instructions, etc. for the personal computer 20.
      <br/>
      Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD, other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.
    </p>
    <p num="21">
      A number of program modules may be stored in the drives and RAM 25, including an operating system 35, one or more application programs 36, other program modules 37, and program data 38.
      <br/>
      A microphone 62 is connected to the system bus 23 by an interface such as a sound interface 60 for sound input.
      <br/>
      Sound input can be acquired from other sound-producing devices, such as a cassette tape player, an audio CD, or some transducer.
      <br/>
      The sound interface 60 may be implemented in any number of ways such as an interface card, part of a chipset associated with the processing unit 21, or some software driver for receiving sound from the microphone 62.
      <br/>
      A user may enter commands and information into the personal computer 20 through a keyboard 40 and pointing device, such as a mouse 42.
      <br/>
      Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like.
      <br/>
      These and other input devices are often connected to the processing unit 21 through a serial port interface 46 that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB).
      <br/>
      A monitor 47 or other type of display device is also connected to the system bus 23 via an interface, such as a video adapter 48.
      <br/>
      A speaker 58 is connected to the system bus 23 via an interface such as a sound interface 56 for sound output.
      <br/>
      Sound output can be generated by some other sound generating device such as headphones or some transducer.
      <br/>
      The sound interface 56 may be implemented in any number of ways such as an interface card, part of a chipset associated with the processing unit 21, or a software driver for controlling the speaker 58.
      <br/>
      Alternatively, the sound interface 56 and the sound interface 60 may be combined into a single interface.
      <br/>
      In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as printers and telephone controllers.
    </p>
    <p num="22">
      The personal computer 20 may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer 49.
      <br/>
      The remote computer 49 may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the personal computer 20, although only a memory storage device 50 has been illustrated in FIG. 1.
      <br/>
      The logical connections depicted in FIG. 1 include a local area network (LAN) 51 and a wide area network (WAN) 52. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.
    </p>
    <p num="23">
      When used in a LAN networking environment, the personal computer 20 is connected to the local network 51 through a network interface or adapter 53.
      <br/>
      When used in a WAN networking environment, the personal computer 20 typically includes a modem 54 or other means for establishing communications over the wide area network 52, such as the Internet.
      <br/>
      The modem 54, which may be internal or external, is connected to the system bus 23 via the serial port interface 46.
      <br/>
      In a networked environment, program modules depicted relative to the personal computer 20, or portions thereof, may be stored in the remote memory storage device.
      <br/>
      The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.
    </p>
    <p num="24">Overview of an Illustrated Embodiment</p>
    <p num="25">
      FIGS. 2 and 3 provide an overview of a system for creating and using a linguistically enhanced sound file to synchronize computer output with recorded speech.
      <br/>
      This system includes two primary components: 1) a sound file tool and 2) an enhanced sound file player.
      <br/>
      The linguistically enhanced sound file is particularly suited for synchronizing recorded speech with animation but may have other applications such as synchronizing a slide show presentation with an accompanying narrative.
      <br/>
      FIG. 3 is a flowchart showing the operation of the system shown in the block diagram of FIG. 2.
    </p>
    <p num="26">
      In FIGS. 2 and 3, a character animation is synchronized with speech sound data.
      <br/>
      In general terms, a sound file tool 108 acquires a text string 104 and a speech sound data stream 106 to create a linguistically enhanced sound file 114.
      <br/>
      A linguistically enhanced sound file player 116 then plays the sound file 114 to present a speech sound data stream 106 through a sound output device 120 and synchronize a character animation 118 accordingly.
    </p>
    <p num="27">
      The sound file tool 108 acquires the text string 104 and the speech sound data stream 106 at step 152 (FIG. 3).
      <br/>
      The text string 104 is a textual version of what is spoken in the speech sound data stream 106.
      <br/>
      For example, the text string 104 might be an ASCII text string and the speech sound data stream 106 might be a sound file produced by digitally sampling (e.g., with a microphone) a person speaking the words of the text string 104.
    </p>
    <p num="28">
      The sound file tool 108 provides the text string 104 and the speech sound data stream 106 to a speech recognition engine 110 at step 154 (FIG. 3) to produce the linguistic event information data structure 112.
      <br/>
      The sound file tool 108 may offer other features as described below.
      <br/>
      The speech recognition engine 110 is software that can recognize spoken items in a sound data source.
      <br/>
      In the illustrated embodiment, the text string 104 is provided to the speech recognition engine 110 in the form of a grammar, described in more detail below.
      <br/>
      The linguistic information data structure 112 provided by the speech recognition engine 110 is information concerning the speech sound data stream 106, such as what phonemes, words, or other sounds are in the speech sound data stream 106 and when they occur in the speech sound data stream 106.
      <br/>
      For example, the linguistic information data structure 112 could contain a phoneme list, each element in the list indicating a phoneme value and when the phoneme occurs within the speech sound data stream 106 (e.g., using number of bytes or milliseconds to measure time).
    </p>
    <p num="29">
      At step 156 (FIG. 3), the sound file tool 108 annotates the speech sound data stream 106 with the linguistic information data structure 112 to create the linguistically enhanced sound file 114 comprising a synchronization data chunk 115.
      <br/>
      Alternatively, the synchronization data chunk 115 could be scattered throughout the sound file 114.
      <br/>
      At step 158, the linguistically enhanced sound file player 116 plays the sound file 114 to present sound output to the sound output device 120 and uses the synchronization data chunk 115 in the sound file 114 to synchronize the character animation 118 with the sound output device 120.
      <br/>
      Typically, the synchronization data chunk 115 includes a phoneme type (or a word) and a timing reference used to synchronize playback of the phoneme (or word) with the animation.
      <br/>
      The various components and steps are described in greater detail below.
    </p>
    <p num="30">
      The arrangement shown in FIGS. 2 and 3 could take other forms.
      <br/>
      For example, linguistically enhanced sound data could be created and played without placing it in a file.
      <br/>
      Also, FIG. 2 should not be interpreted to require the sound file tool 108 and the linguistically enhanced sound file player 116 to reside on the same computer, although this is a possible arrangement.
      <br/>
      A common arrangement is to create the linguistically enhanced sound file on a development computer, test the file using a player, and then distribute the file to computers with access to a player.
      <br/>
      Still other alternatives are possible as explained in the more detailed description below.
    </p>
    <p num="31">Creating and Playing a Linguistically Enhanced Sound File</p>
    <p num="32">
      In the following detailed description of implementations of the invention, a linguistically enhanced sound file is created from text and recorded speech to synchronize the animation of a character with the recorded speech.
      <br/>
      The detailed description describes a system using mouth animation and word balloon animation together, but each could be used separately.
      <br/>
      During the file creation process, a speech recognition engine detects the presence of phonemes (or words) within the recorded speech and provides its results through a programming interface.
      <br/>
      Once created, the file can be played to produce sound output and to send data to an animation server to synchronize the character animation with the sound output.
      <br/>
      Various details concerning phonemes, speech recognition engines, and programming interfaces are provided in the following description.
    </p>
    <p num="33">Using Phonemes in a Character Mouth Animation</p>
    <p num="34">
      Phonemes are the fundamental sounds that make up speech.
      <br/>
      For example, the word "that," when spoken, could be divided into a phoneme for "th," a phoneme for "a," and a phoneme for "t." Each phoneme is associated with a small number of mouth positions.
      <br/>
      Thus, one can produce a compelling illusion of a mouth moving to generate the sounds heard by synchronizing audio playback of a phoneme with display of a mouth shape corresponding to the phoneme.
      <br/>
      In large, high-quality animations, interpolation between different positions may be necessary to produce an accurate appearance of mouth shape, but for many animations, a small number of mouth shapes is sufficient.
      <br/>
      Those of skill in the art of linguistics are familiar with the international phonetic alphabet ("IPA"), a language-independent set of phonemes, each of which has a single articulatory posture.
      <br/>
      For example, in the IPA, the word "that" would be represented as "/+character pullout}.ae butted.t/." Incorporating the IPA with the invention provides the benefits of a single alphabet for multiple languages and a single mouth shape for each phoneme.
    </p>
    <p num="35">
      In addition, it is not necessary to present a different mouth shape for each phoneme.
      <br/>
      The illustrated embodiments use a limited set of mouth shapes, employing a mapping function to associate a set of phonemes with a single mouth shape.
      <br/>
      Information about the mouth shape and when to present it is sent to the animation while simultaneously presenting speech sound output.
      <br/>
      The result is synchronized mouth animation.
    </p>
    <p num="36">Speech Application Programming Interface</p>
    <p num="37">
      In the illustrated embodiments of the invention, the system uses programming objects that support the Speech Application Programming Interface (SAPI) specification developed by Microsoft Corporation.
      <br/>
      SAPI is a publicly available standard for input and output components of speech-related applications.
    </p>
    <p num="38">
      In object-oriented programming languages, programming objects are used to represent various items associated with the software.
      <br/>
      Programming objects typically have associated member functions (i.e., software routines or methods) and properties (i.e., attribute values or state data).
      <br/>
      Rather than expose their properties directly, programming objects typically exhibit a characteristic called encapsulation, whereby the programming object allows manipulation of its properties only through a set of member functions called a programming interface.
      <br/>
      Interfaces can be arranged in a standard fashion so that the programming object can be used by a variety of software without regard to internal implementation details.
      <br/>
      When shown on a drawing, the programming interface is typically depicted as a plug-in jack to the object (e.g., see the programming interface 522 of FIG. 9).
    </p>
    <p num="39">
      A number of companies have created implementations of the SAPI interface.
      <br/>
      The purpose of SAPI is to provide speech services that application developers can incorporate into their programs by invoking functions in SAPI.
      <br/>
      Software that complies with the SAPI standard is said to be "SAPI-compliant." Although the illustrated embodiments use several SAPI-compliant components, the invention could be carried out using some other programming interface or without using an object-oriented programming environment.
    </p>
    <p num="40">Speech Recognition Engines</p>
    <p num="41">
      A speech recognition engine is a collection of software routines for analyzing speech sound data (commonly called an "utterance") to determine what words are spoken in the sound data.
      <br/>
      Speech recognition engines are based on a phonological decomposition of the words in the speech sound data.
      <br/>
      In other words, the engine breaks the speech sound data into smaller parts associated with particular sounds.
      <br/>
      Although some other method could be used, speech recognition engines typically divide the data into phonemes.
      <br/>
      For example, a speech recognition engine presented with speech sound data containing the spoken word "that" might divide the sound data into components for sounds related to phonemes for "th" "a," and "t."
    </p>
    <p num="42">
      The engine analyzes the resulting phonemes in conjunction with a grammar that is provided to the speech recognition engine in advance.
      <br/>
      The grammar specifies the set of possibilities available to the speech recognition engine.
      <br/>
      In simplest terms, the grammar tells the speech recognition engine what to look for.
      <br/>
      Typically, only items specified in the grammar are valid speech recognition engine responses.
      <br/>
      For example, a grammar may be defined as "Send mail to (Laura or Robert)." On a basic level, the speech recognition engine decomposes the speech sound data into discrete phonemes and tries to match the phonemes against the phonemes in "Send mail to Laura" or "Send mail to Robert." In practice, the problem of speech recognition involves many mathematical calculations, and different approaches have been used with varying degrees of success.
      <br/>
      Various commercial implementations of speech recognition engines are available, some of which support the SAPI standard.
    </p>
    <p num="43">
      The illustrated embodiments use for their speech recognition engine an implementation of Microsoft Command and Control speech recognition engine, available from Microsoft Corporation, but other engines complying with the Microsoft Speech Application Programming Interface (SAPI) could be substituted.
      <br/>
      Finally, the invention could be carried out with any engine that provides information for determining word break, phoneme, or other linguistic information associated with the speech sound data submitted to it.
    </p>
    <p num="44">Creating a Linguistically Enhanced Sound File</p>
    <p num="45">
      A system and method for creating a linguistically enhanced sound file are shown at FIGS. 4 and 5.
      <br/>
      On a basic level, a linguistic information and sound editing tool 208 creates a linguistically enhanced sound file 232 by annotating the speech sound data 206 with the results of an analysis performed by the speech recognition engine 212.
      <br/>
      At some later time, a player can play the linguistically enhanced sound file 232 to present the speech sound data 206 and also to send information about the speech sound data 206 to an animation.
      <br/>
      The result is an animation that is synchronized with the speech sound data 206.
    </p>
    <p num="46">
      The linguistic information and sound editing tool 208 acquires the speech sound data at step 252 (FIG. 5).
      <br/>
      In the illustrated embodiment, the speech sound data 206 is of the familiar WAV sound format (also known as RIFF format).
      <br/>
      The data 206 is acquired by opening a saved file or by sampling an input device such as the microphone 62 (FIG. 1) or some other sound input device.
      <br/>
      For example, the speech sound data 206 might be a sound file in WAV format representing a person speaking a sentence.
      <br/>
      Alternatively, the speech sound data 206 could be of the  MU -law, AIFF, or some other format.
    </p>
    <p num="47">
      At step 254, the linguistic information and sound editing tool 208 acquires text 204.
      <br/>
      Text 204 is a textual representation of the speech sound data 206.
      <br/>
      In the illustrated embodiment, this is a character string in the familiar ASCII format, and a user types the string using the keyboard 40 (FIG. 1) or some other input device.
      <br/>
      Alternatively, text 204 could be of any number of formats, such as a Unicode string, or some other representation of text.
      <br/>
      In addition, text 204 could be stored in a file instead of typed by the user.
    </p>
    <p num="48">
      Next, the linguistic information and sound editing tool 208 provides to the speech recognition engine 212 a data structure containing a list of possibilities called a grammar.
      <br/>
      In basic terms, a grammar tells a speech recognition engine what to look for in sound data.
      <br/>
      A grammar typically conforms to some syntax for specifying alternatives, but in the illustrated embodiment, the grammar contains a single entry: a representation of text 204 in a form acceptable to the speech recognition engine 212.
    </p>
    <p num="49">
      At step 256, the linguistic information and sound editing tool 208 creates a grammar object 210 and adds to it an entry associated with text 204.
      <br/>
      In this way, the speech recognition engine 212 is instructed to look in the speech sound data 206 for phonemes and words associated with text 204.
      <br/>
      The entry is added using the SAPI interface ISRGramCFG 209 of the grammar object 210.
      <br/>
      Alternatively, the grammar could be in the form of an array, a linked list, or some other data structure, and information related to text 204 (e.g., text 204 itself) could be added to the data structure using some method other than the ISRGramCFG interface 209, such as by a call to a subroutine.
      <br/>
      Another possible alternative would be to use a different implementation of the grammar object 210.
      <br/>
      For example, instead of submitting text 204 to the speech recognition engine 212, an alternative implementation could depend on the speech recognition engine 212 to infer the text spoken from the speech sound data 206 alone, without need of text 204 in the first place.
      <br/>
      Such an implementation could forego the use of the ISRGramCFG interface 209, and use some other grammar interface or function without a grammar interface or a separate grammar object.
    </p>
    <p num="50">
      At step 260, the linguistic information and sound editing tool 208 submits the speech sound data 206 to the speech recognition engine 212, which performs its analysis and returns results to the linguistic information and sound editing tool 208.
      <br/>
      In the illustrated embodiment, the speech recognition engine 212 calls a software routine specified by the linguistic information and sound editing tool 208 when it completes its analysis.
      <br/>
      The tool 208 specifies the software routine by using a pointer and the ISRNotifySink programming interface.
      <br/>
      However, some other arrangement could be used to indicate that the analysis is completed, or the speech recognition engine 212 could be directly integrated into the linguistic information and sound editing tool 208.
    </p>
    <p num="51">
      At step 262, the speech recognition engine 212 generates the results object 214 by analyzing the speech sound data 206 and the grammar object 210.
      <br/>
      In FIG. 4, the results object 214 is a speech recognition results object that can be accessed using a programming interface 220 as described below.
      <br/>
      In addition to containing other information described below, the results object 214 specifies whether the speech recognition engine successfully performed its analysis.
      <br/>
      In some instances, repeated attempts may be necessary, especially if there is background noise in the speech sound data 206.
    </p>
    <p num="52">
      The linguistic information and sound editing tool 208 uses the timing information in the results provided by the speech recognition engine 212 to generate word break information 216 and phoneme information 218 at step 264.
      <br/>
      In FIG. 4, the results object 214 includes a data structure called a results graph that provides detailed information about what words and phonemes were spoken, when they were spoken, how loud they were, what their alternatives were (if any), and so on.
      <br/>
      If alternatives were specified in the grammar, the results graph indicates which of the alternatives were likely spoken by using a scoring method.
      <br/>
      In the grammar object 210 of FIG. 4, only one alternative was specified, so the results graph may specify only one alternative.
      <br/>
      Instead of using a results graph, the results object 214 could indicate the results in the form of an array or some other data structure.
    </p>
    <p num="53">
      The results graph specifies values indicating how many bytes from the beginning of the speech sound data 206 a phoneme or word begins and ends.
      <br/>
      These values can be used to determine when within the speech sound data 206 the phoneme type occurs.
      <br/>
      The linguistic information and sound editing tool 208 uses the ISRResGraph programming interface 220 to view the recognition results graph.
      <br/>
      The specification for the ISRResGraph interface 220 is as follows:
    </p>
    <p num="54">
      --
      <br/>
      -- ISRResGraph
      <br/>
      -- Member function    Description
      <br/>
      -- BestPathPhoneme    Gets the specified phoneme path from the list
      <br/>
      --                    of most likely phoneme paths provided by the
      <br/>
      --                    speech-recognition engine for a recognition.
      <br/>
      -- BestPathWord       Gets the specified word path from the list of
      <br/>
      --                    most likely phoneme paths provided by the
      <br/>
      --                    speech-recognition engine for a recognition.
      <br/>
      -- GetPhonemeNode     Gets information about the phoneme for a
      <br/>
      --                    given node in a recognition results graph.
      <br/>
      -- GetWordNode        Gets information about the word for a given
      <br/>
      --                    node in a recognition results graph.
      <br/>
      -- PathScorePhoneme   Determines the score for a particular phoneme
      <br/>
      --                    path.
      <br/>
      -- PathScoreWord      Determines the score for a particular word path.
    </p>
    <p num="55">
      When a phoneme-based speech recognition engine successfully matches speech sound data with a potential text, it generates a hypothetical phonetic alignment between the phonemes that the original speaker probably spoke and the sounds in the speech sound data.
      <br/>
      In the art of speech recognition, the speech sound data to be recognized is commonly called an utterance.
      <br/>
      The phonetic alignment typically divides the utterance into mutually disjoint intervals, where each interval identifies the portion of the utterance in which the speaker is producing each of the phonemes in the utterance in turn.
      <br/>
      For example, if the speaker said "that", then the engine would divide the utterance into three disjoint pieces, a "/+character pullout}/-piece", an "/.ae butted./-piece" and a "/t/-piece", in that order, so that a practiced listener in the language would hear each of those sounds in turn if the pieces were sounded in turn.
    </p>
    <p num="56">
      In the process of generating this alignment, the engine also generates an alignment between the utterance and the words in its text.
      <br/>
      Thus, if the speaker uttered the words "that cat", the engine would generate a pair of disjoint intervals, the first of which would coincide with the portion of the utterance during which the speaker was saying "that" and the second of which would correspond to that portion of the utterance during which the speaker was saying "cat".
    </p>
    <p num="57">
      In the illustrated embodiment, the recognition hypothesis is stored in the results object 214.
      <br/>
      The ISRResGraph interface 220 captures the phoneme and word alignments from the results object 214 through the BestPathPhoneme and BestPathWord interfaces, respectively.
      <br/>
      As a side effect of the way typical recognition engines work, however, the engine frequently produces more than one hypothetical recognition during its analysis.
      <br/>
      As a result, these interfaces typically return a list of nodes for both phonemes and words corresponding to each recognition hypothesis.
      <br/>
      An application can iterate through the nodes in a recognition hypothesis using the GetPhonemeNode and GetWordNode methods on each node in a path in turn to generate the alignments for both words and phonemes.
    </p>
    <p num="58">
      Thus, appropriate member functions of the ISRResGraph programming interface 220 are employed to generate the word break information 216 and the phoneme information 218 from the speech recognition results object 214.
      <br/>
      The word break information 216 is a list of words and time values indicating when they occur within the speech sound data 206.
      <br/>
      The phoneme information 218 is a list of phoneme codes associated with the International Phonetic Alphabet and time values indicating when the phonemes occur in the speech sound data 206.
      <br/>
      The time values are represented by a start and stop offset indicating a number of bytes from the start of the speech sound data 206.
    </p>
    <p num="59">
      For example, the word break information 216 might contain a list of 10 words, the first of which being "Ha." The start and stop offsets would indicate the number of bytes from the beginning of the speech sound data 206 the word "Ha" started and stopped.
      <br/>
      Similarly, the phoneme information 218 might contain a list of 50 phonemes, the first of which is a code indicating the "hh" member of the International Phonetic Alphabet.
      <br/>
      Alternatively, the information could be stored in other ways, or this step might be unnecessary if the speech recognition engine 212 provides the results of its analysis in a preformatted fashion.
    </p>
    <p num="60">
      In the illustrated embodiment, a byte of the speech sound data represents a particular amount of time.
      <br/>
      Therefore, an offset indicating a number of bytes from the start of the speech sound data 206 corresponds to a particular amount of time that has elapsed from the beginning of the sound.
      <br/>
      In some other implementation (e.g., one using a compressed format), the time values may be implemented as a unit of time (e.g., milliseconds) or as a pointer to a particular location in the speech sound data 206.
    </p>
    <p num="61">
      The linguistic information and sound editing tool 208 obtains word break and phoneme information from the speech recognition engine 212.
      <br/>
      However, information about other linguistic events could be obtained in alternative embodiments, such as a change in volume, a change in pitch, singing, or nonverbal events such as coughing or sneezing.
      <br/>
      These linguistic events are used to synchronize some action in the animation.
      <br/>
      For example, if a rise in pitch at the end of a sentence is detected, the animation performs some action indicating that a question was asked (e.g., displaying a question mark or performing some gesture in the animation).
      <br/>
      If a cough is detected, the animation presents an animated character that coughs at the appropriate time.
    </p>
    <p num="62">
      At step 266, the speech sound data 206 is annotated with the word break information 216 and the phoneme information 218 to create a linguistically enhanced sound file 232.
      <br/>
      In the illustrated embodiment, the linguistic information and sound editing tool 208 combines the speech sound data 206, the word break information 216, and the phoneme information 218 into a single file 232 containing an audio chunk 234, a word marking list 236, and a phoneme marking list 238.
      <br/>
      The audio chunk is a part of the file 232 (e.g., a set of bytes) containing audio data.
      <br/>
      Typically, the audio chunk 234 is of the same format (e.g., WAV) as the speech sound data 206, but can be of some other format.
      <br/>
      The word marking list 236 is implemented as a header, followed by a list of time-stamped strings.
      <br/>
      The strings contain a start offset, a stop offset, and ASCII text.
      <br/>
      The start and stop offsets are byte offsets from the start of the speech sound data, written as 8-byte unsigned integers.
      <br/>
      The ASCII text consists of the word itself (e.g., "Ha").
      <br/>
      The phoneme marking list 238 is implemented as a header, followed by a list of time-stamped strings.
      <br/>
      The strings contain a start offset, a stop offset, and ASCII text.
      <br/>
      The start and stop offsets are byte offsets from the start of the speech sound data, written as 8-byte unsigned integers.
      <br/>
      The ASCII text consists of a string of hex codes corresponding to individual IPA phonemes in the form of 0xhhhh, where each "h" denotes a single hex digit.
      <br/>
      For example, a string might be "0x00f0," which represents the English phoneme /+character pullout}/ (which is pronounced as the "th" in "they").
      <br/>
      The lists could be implemented in other ways.
      <br/>
      For example, the file could be divided into frames, and the phoneme and word break data scattered throughout the file in the frames.
    </p>
    <p num="63">
      One benefit of implementing the audio chunk 234 in the same format as the speech sound data 206 is that the audio chunk 234 in the linguistically enhanced sound file 232 can be played with a sound player that can play the speech sound data 206.
      <br/>
      However, in some cases, it might be advantageous to use a different format.
    </p>
    <p num="64">Linguistic Information and Sound Editing Tool Features</p>
    <p num="65">
      FIG. 6 shows a view of the user interface presented by the linguistic information and sound information tool 208 shown in FIG. 4.
      <br/>
      The interface appears in a window 350 on a computer display, such as the monitor 47 (FIG. 1).
      <br/>
      The window 350 includes a title bar 352, a menu bar 354, a tool bar 356, and scrolling controls 396.
      <br/>
      The user interface presents various other features to enable the user to edit and preview linguistic and sound information.
    </p>
    <p num="66">
      As described in the above section on creating a linguistically enhanced sound file, the linguistic information and sound editing tool acquires text and speech sound data.
      <br/>
      The text is shown in a text representation pane 374, and the speech sound data is represented in an audio representation pane 380.
      <br/>
      A mouth animation can appear in a mouth animation preview pane 362 as explained below.
    </p>
    <p num="67">
      A word marker 384 and a phoneme marker 390 represent the linguistic information on the user interface.
      <br/>
      The markers indicate where a particular linguistic event (e.g. a word or phoneme) begins and ends with respect to the speech sound data 382 by their size and position.
      <br/>
      Within the marker appears a textual representation of the word or phoneme it represents.
      <br/>
      A "&lt;SIL&gt;" marker is used to represent silence, and other information about markers can be displayed, such as a hexadecimal code.
      <br/>
      In addition to the pictured markers, others could be used, such as a next slide marker indicating when the next slide of a slide show is to be shown.
    </p>
    <p num="68">
      The mouth animation can be previewed in the mouth animation preview pane 362 by selecting (e.g. clicking with some pointing device such as a mouse) on a graphical button 358 or an item (e.g., a command in a pull down menu) from the graphical menu bar 354.
      <br/>
      As a result, the system plays the sound data associated with the graphical representation 382 to a sound output device such as a speaker.
      <br/>
      Simultaneously, the system uses the linguistic information represented by the phoneme markers (e.g., the phoneme marker 390) with reference to the phoneme mapping table 222 (FIG. 4) to control presentation of the mouth shape in the mouth preview pane 362 during playback.
      <br/>
      Instead of playing the entire sequence of speech sound data, the user can select (e.g., highlight) a portion of the graphical representation 382 for preview.
    </p>
    <p num="69">
      In the exemplary implementation, the phoneme mapping table 222 (FIG. 4) contains IPA phoneme-desired mouth shape association pairs, stored internally as a height-balanced binary tree.
      <br/>
      The phoneme /+character pullout}/, which represents the /th/ sound in "that" or "they", for instance, is stored in the table 222 as the pair (0x0f0, MOUTHOPENWIDE2), which corresponds to an association between the Unicode character with hex index f0 (i.e., 240 decimal, representing the character "+character pullout}") and MOUTHOPENWIDE2, which represents a mouth shape which is approximately half-open.
      <br/>
      Similarly, the phoneme /u/, which represents to /oo/ in "hoot" or the /u/ sound in "rude" is represented by the pair (0x075, MOUTHOPENNARROW), which corresponds to an association between the phoneme 0x75 (i.e., 117 decimal, representing the character "u") and MOUTHOPENNARROW, which represents a fully rounded mouth, open only a little both vertically and horizontally.
    </p>
    <p num="70">
      The user can employ the interface to manipulate the linguistic information via the markers 384 and 390.
      <br/>
      For example, the user can change the size and position of a marker by dragging (i.e., manipulating with a pointing device such as a mouse) a marker edge 386 or 388.
      <br/>
      The change in the size and position of the marker is reflected in the linguistic information stored in the tool and is used during subsequent previews in the mouth animation pane 362.
      <br/>
      The user can select a save option to generate a linguistically enhanced sound file based on the graphical representation of sound data 382 and the phoneme and word break information represented by the markers.
    </p>
    <p num="71">Playing the Linguistically Enhanced Sound File</p>
    <p num="72">
      A system and method for playing a linguistically enhanced sound file 404 such as that described above is shown at FIGS. 7, 8A, 8B, and 8C.
      <br/>
      In the following example, the file 404 is played to generate sound output and synchronize the mouth and word balloon animation of a character with the sound output.
      <br/>
      As a result, it appears as if the character is speaking the words sounded from the computer speaker.
    </p>
    <p num="73">
      At step 450 (FIG. 8A), the animation server 422 and the linguistically enhanced sound file player 414 prepare to play linguistically enhanced sound files.
      <br/>
      As part of the preparation, the animation server 422 initializes an appropriate audio player 424 for output to the sound output device 420.
      <br/>
      In the illustrated embodiment, the audio player 424 is a software driver for presenting sound through a computer speaker such as the speaker 58 (FIG. 1).
      <br/>
      As described above in the discussion of the exemplary operating environment, alternatives for sound output may be used.
    </p>
    <p num="74">
      The animation server 422 then passes control over the audio player 424 to the linguistically enhanced sound file player 414, which sets up a callback mechanism between the linguistically enhanced sound file player 414 and the audio player 424.
      <br/>
      In addition, the animation server 422 sets up a call mechanism between itself and the linguistically enhanced sound file player 414.
      <br/>
      For each utterance, the animation server sends the linguistically enhanced sound file player 414 certain information, including a text string and a way to locate the linguistically enhanced sound file 404.
    </p>
    <p num="75">
      At step 452, the linguistically enhanced sound file player 414 retrieves an audio chunk 406 from the linguistically enhanced sound file 404.
      <br/>
      In the illustrated embodiment, the audio chunk 406 is a set of bytes in WAV format representing sampled human speech.
      <br/>
      Alternatively, the audio chunk 406 could be of any number of formats, such as the  MU -law, AIFF, or some other format.
      <br/>
      In addition, instead of actually retrieving the audio chunk 406 itself, an alternative implementation might store a pointer to the audio chunk 406.
    </p>
    <p num="76">
      At step 454, the linguistically enhanced sound file player 414 retrieves the word marking list 408 and the phoneme marking list 410 from the linguistically enhanced sound file 404.
      <br/>
      These lists are of the format described above for the word marking list 236 and the phoneme marking list 238 (FIG. 4) or some alternative format indicating a linguistic event and when within the audio chunk 406 the linguistic event occurs.
      <br/>
      In addition, instead of actually retrieving the lists, a pointer to a list might be stored.
    </p>
    <p num="77">
      Using the information in the word marking list 408 and the phoneme marking list 410, the linguistically enhanced sound file player 414 divides the audio chunk 406 into audio segments.
      <br/>
      The audio segments are bounded by phoneme and word boundaries as determined in the linguistically enhanced sound file creation process as described above and shown in FIGS. 4-6. In the illustrated embodiment, a segment is not split by any word or phoneme boundary.
      <br/>
      At step 456, the linguistically enhanced sound file player 414 decompresses the audio segment and sends it to the audio player 424 as part of an audio stream.
      <br/>
      In addition, the sound file player 414 sends the audio player 424 a bookmark indicating a phoneme or word boundary and how to process the boundary.
      <br/>
      The bookmark is sent as part of the audio stream to the audio player 424.
      <br/>
      Typically, a bookmark is sent between each segment, and more than one bookmark may be sent between two segments.
    </p>
    <p num="78">
      At step 458, the audio player 424 plays the audio segments in the audio stream to send a decompressed audio data stream to the sound output device 420.
      <br/>
      When it encounters a bookmark in the audio stream, the audio player 424 sends a notification back to the sound file player 414 using the callback mechanism set up during step 450.
      <br/>
      The notification includes information in the bookmark indicating how to process the notification.
    </p>
    <p num="79">
      At step 460, the sound file player 414, having received a notification from the audio player 424, sends a notification to an appropriate interface of the animation server, as determined by information from the bookmark (e.g., a next word interface or a phoneme interface).
      <br/>
      Under ideal circumstances, the audio player 424 sends each bookmark to sound file player 414 one at a time and in turn.
      <br/>
      However, due to hardware limitations of some computer systems, sometimes the audio player 424 does not immediately send a notification to the sound file player 414.
      <br/>
      As a result, the notifications are buffered.
      <br/>
      If buffered notifications have accumulated, the accumulated notifications and the current notification are sent to the animation server 422.
      <br/>
      In some cases, it may be desirable for the animation server 422 to skip a notification to maintain synchronicity with the sound output from the sound output device 420.
    </p>
    <p num="80">
      As the linguistically enhanced sound file player traverses the audio chunk 406, it reiterates steps 456-460 until it reaches the end of the audio chunk 406.
      <br/>
      At such time, other linguistically enhanced sound files 404 can be provided for additional utterances.
    </p>
    <p num="81">When the interface of the animation server 422 for next word notifications receives a notification from the sound file player 414, it proceeds as shown in FIG. 8B. At step 472, the animation server 422 displays the next word in the utterance in the word balloon animation module 434.</p>
    <p num="82">
      When the interface of the animation server 422 for phoneme notifications receives a notification from the sound file player 414, it proceeds as shown in FIG. 8C. As part of the notification, a phoneme code is provided.
      <br/>
      At step 482, the animation server 422 maps the phoneme code to one of seven mouth shapes using the phoneme mapping table 416.
      <br/>
      An alternative implementation could be constructed without the phoneme mapping table 416, if, for example, the phoneme marking list 410 contained mouth shape values instead of phoneme values.
      <br/>
      Such an arrangement could be accomplished by performing the mapping while creating the linguistically enhanced sound file 404.
      <br/>
      Alternatively, the linguistically enhanced sound file player 414 could compute mouth shape values internally and send the mouth shape values to the animation server 422, rather than sending phoneme values.
      <br/>
      The animation server 422 then displays the mouth shape in the mouth animation module 432 at step 484.
    </p>
    <p num="83">
      In the illustrated embodiment, the notifications are processed immediately by the animation server.
      <br/>
      In an alternative embodiment, time information could be included in the notification, and the animation server 422 could use the time information to determine when to process the notifications.
      <br/>
      Yet another embodiment could send a list of notifications, each element of the list containing a start and stop time value and either a word or a phoneme value.
      <br/>
      In addition, start and stop time values might not be necessary in every instance.
      <br/>
      Instead, a single time (e.g., a start time) value might suffice.
    </p>
    <p num="84">
      An example implementation of the animation server 422 is Microsoft Agent, available from Microsoft Corporation.
      <br/>
      For more information about implementing an animation server, see copending patent application Ser.
      <br/>
      No. 08/858,648 entitled "Client Server Animation System for Managing Interactive User Interface Characters" by Tandy W. Trower, Mark Jeffry Weinberg, and John Wickens Lamb Merrill, filed on May 19, 1997, which is hereby incorporated by reference.
    </p>
    <p num="85">
      In the exemplary implementation, the animation server 422 accesses a phoneme mapping table 416 of the same structure as that described for the phoneme mapping table 222 (FIG. 4).
      <br/>
      Although the linguistic information and sound editing tool 208 (FIG. 4) and the animation server 422 could share a table, separate tables with the same contents are used in the illustrated embodiment.
    </p>
    <p num="86">
      The mouth animation module 432 typically provides a choice of seven different mouth shapes that can be displayed for a character.
      <br/>
      Typically, the mouth shapes are loaded from a mouth data file containing a set of bitmap images that can be customized for the particular character being presented.
      <br/>
      In addition, other sets of mouth shapes can be provided to reflect changes in the character's size, perspective, posture, or position on the display.
      <br/>
      To create the illusion of speech, the mouth animation module 432 draws a bitmap representing the mouth on top of the constructed animation frame representing the character at the (x, y) coordinates of the character's mouth location.
    </p>
    <p num="87">
      The word balloon animation module 434 places the word balloon in an appropriate position with respect to the animated character and displays an indicated word in the balloon upon being sent a message or notification.
      <br/>
      The module also manages the size and shape of the balloon and places words in the balloon.
      <br/>
      A feature allows the word balloon to be disabled, enabled with all the words appearing at once, or enabled with words appearing as they are spoken.
    </p>
    <p num="88">
      As a result of executing the steps indicated above, the animation elements generated by the word balloon and mouth animation modules 434 and 432 are synchronized with the audio chunk 406 as presented by the sound output device 420, presenting the illusion that an animated character is speaking.
      <br/>
      However, the features in the above description could be used for other purposes, such as controlling animation color or triggering some event in a computer presentation.
      <br/>
      For example, a window could be colored red upon detecting a word (e.g., "angry") or a slide show presentation could advanced to the next slide upon detecting a word (e.g., "next").
    </p>
    <p num="89">Programming Interfaces of the Animation System</p>
    <p num="90">
      In FIG. 9, an illustrated embodiment of an animation system 500 shows a linguistically enhanced sound file player 532 in conjunction with a text to speech (TTS) engine 534.
      <br/>
      This arrangement is presented for reducing the costs associated with prototyping an application 502.
      <br/>
      The application 502 can be inexpensively prototyped with the text to speech engine 534 because changes can easily be implemented by simply changing the text string 510 without recording human speech.
      <br/>
      Subsequently, an appropriate linguistically enhanced sound file 512 can be generated using professional vocal talent.
      <br/>
      A linguistically enhanced sound file player 532 and the sound file 512 can be swapped in for the text to speech engine 534 with very little change to the application 502.
      <br/>
      In this way, the final version of the application 502 presents a professional quality animation superior to that available with the synthetic voice generated by the text to speech engine 534.
      <br/>
      Since the text to speech engine 534 and the linguistically enhanced sound file player 532 interact with the animation server 504 and the audio player 572 in a compatible way, the linguistically enhanced sound file 512 can be added to the animation system 500 during the final stages of development with a minimum of changes to the application 502.
      <br/>
      Accordingly, an application can be developed without expending resources on generating and regenerating the linguistically enhanced sound file (e.g., employing vocal talent and sampling a human voice) until the final stages.
    </p>
    <p num="91">
      In the illustrated embodiment, the text to speech engine 534 is the Lernout and Hauspie Truvoice text to speech engine.
      <br/>
      However, some other engine could be used such as the AT&amp;T FlexTalk engine.
    </p>
    <p num="92">
      When the system 500 is initialized, various callback mechanisms are put into place to facilitate communication between the components.
      <br/>
      Typically, the system 500 is set up in one of two alternative ways: as a synthetic speech generator, using the text to speech engine 534, or as a human speech player, using the linguistically enhanced sound file player 532.
      <br/>
      However, the system 500 could be set up as both simultaneously (e.g., for prototyping purposes).
      <br/>
      Under either arrangement, the interfaces 520 and 522 to the animation server 504 are used to provide the animation server 504 with notifications relating to word breaks and phonemes, respectively.
      <br/>
      Also, under either arrangement, the audio player 572 presents an interface 544, through which the linguistically enhanced sound file player 532 and the text to speech engine 534 can provide callbacks to their interfaces 540a and 540b.
      <br/>
      The interface 544 is also used to send audio segments and bookmarks to the audio player 572 under either arrangement.
    </p>
    <p num="93">
      For example, when the system 500 is initialized as a synthetic speech generator, the animation server 504 provides a callback to the phoneme interface 522 through an interface 524b to the text to speech engine 534.
      <br/>
      A callback to the notification interface 540b of the text to speech engine 534 is provided to the audio player 572 through the interface 544.
    </p>
    <p num="94">
      To specify an utterance under the synthetic speech generator arrangement, the application 502 specifies a text string 510 in a speak command (e.g., `speak "This is a test."`).
      <br/>
      Using the interface 524b, the animation server 504 passes the string 510 (e.g., "This is a test.") to the text to speech engine 534 and a callback to its word break interface 520.
      <br/>
      The text to speech engine 534 generates appropriate synthetic speech output and bookmarks to interface 544 of the audio player 572, which plays the speech output to an output device.
      <br/>
      When the audio player 572 encounters a bookmark, the player 572 sends a notification back up the chain to the text to speech engine 534, which relays a notification to the animation server 504.
      <br/>
      Word break notifications are sent to the word break interface 520; phoneme notifications are sent to the phoneme interface 522.
      <br/>
      In this way, the character animation is synchronized with synthetic speech.
    </p>
    <p num="95">
      To specify an utterance under the human speech player arrangement, the application 502 specifies a text string 510 and a reference to a linguistically enhanced sound file 512 in a speak command (e.g., `speak "This is a test.", test.lwv`).
      <br/>
      The reference could alternatively be something other than a file name (e.g., a uniform resource locator for specifying a file on the world wide web).
      <br/>
      The animation server 504 passes the string 510 (e.g., "This is a test."), the reference to the linguistically enhanced sound file 512, and a callback to its word break interface 520 to the linguistically enhanced sound file player 532 through interface 524a.
      <br/>
      In the illustrated embodiment, the text string 510 is used by the linguistically enhanced sound file player 532 to aid in determining word break notifications, but alternatively, the sound file player 532 could extract this information from the sound file 512.
      <br/>
      The linguistically enhanced sound file player 532 retrieves appropriate audio segments from the sound file 512 and generates bookmarks for the audio player 572.
      <br/>
      The audio segments and bookmarks are sent to the interface 544 of the audio player 572, which plays the audio to a sound output device.
      <br/>
      When the audio player 572 encounters a bookmark, it sends a notification back up the chain to the linguistically enhanced sound file player 532, which relays a notification to the animation server 504.
      <br/>
      Word break notifications are sent to the word break interface 520; phoneme notifications are sent to the phoneme interface 522.
    </p>
    <p num="96">
      The animation server 504 controls a character animation 508 and fields requests for animation services from an application 502.
      <br/>
      When a speak command is issued by the application 502, the animation server 504 handles the command as described above and subsequently receives notifications.
      <br/>
      The speak command can also specify whether a word balloon is used and whether words appear all at once or arc automatically paced to appear in the balloon as the character speaks them.
      <br/>
      Upon receiving notifications from the interfaces 520 and 522, the animation server performs appropriate actions in the character animation 508 (e.g., displaying a mouth shape in the animation 508 or displaying the next word in the word balloon of the animation 508.)
    </p>
    <p num="97">
      In the illustrated embodiment, the word break programming interface 520 is the ITTSBufNotifySink interface, and the phoneme programming interface 522 is the ITTSNotifySink Interface.
      <br/>
      In another embodiment, these two animation server interfaces 520 and 522 could be combined into one.
      <br/>
      The ITTSNotifySink interface contains a method "Visual" through which the identity of the current phoneme being spoken is transmitted to the animation server 504.
      <br/>
      The ITTSBufNotifySink contains a method "Bookmark" through which a next word notification is sent.
      <br/>
      Both the player 532 and the engine 534 use the Visual method of the ITTSNotifySink interface to report the currently active phoneme, and both use the Bookmark method to send next word notifications.
      <br/>
      In this way, the animation server 504 uses the word break and mouth shape information provided by the linguistically enhanced sound file player 532 or the text to speech engine 534 to synchronize the mouth movement presented in the character animation 508 with the synthetic or played speech.
      <br/>
      An additional interface 526 provides a means by which the linguistically enhanced sound file player 532 can be informed of the identity or contents of the linguistically enhanced sound file 512.
      <br/>
      In the embodiment of FIG. 9, the interface 526 consists of a single method which sets the name of the sound file to play; alternative implementations could provide either a pointer to memory or some other representation of the sound file 512, or some other method for accessing the file, such as a uniform resource locator (URL) specifying a document on the World Wide Web.
    </p>
    <p num="98">
      An advantage to the arrangement shown in FIG. 9 is that the notification interfaces 540a and 540b presented to the audio player 572 are the same or compatible.
      <br/>
      In addition, both the player 532 and the engine 534 can use the same interface 544 presented by the audio player 572.
      <br/>
      Thus, the same audio player 572, or a software copy, can be used with the linguistically enhanced sound file player 532 and the text to speech engine 534.
      <br/>
      In the illustrated embodiment, the player 532 and the engine 534 each have a copy of the software for the audio player 572, but the audio player 572 sends its output the same hardware device (e.g., a sound card).
    </p>
    <p num="99">
      Another advantage to the illustrated arrangement is that notifications are sent to the interfaces 520 and 522 of the animation server 504 by the sound file player 532 and the text to speech engine 534 in the same way.
      <br/>
      In addition, the programming interfaces 524a and 524b are the same or compatible.
      <br/>
      Under such an arrangement, the steps for playing an enhanced sound file 512 instead of generating synthetic speech are kept to a minimum: substituting the enhanced sound file player 532 for the text to speech engine 534 and specifying a reference to the sound file 512.
    </p>
    <p num="100">
      Further, from the perspective of the application 502, both the engine 534 and the player 532 operate in the same way.
      <br/>
      Thus, an application 502 can be prototyped using a synthetic voice generated by the text to speech engine 534, and the linguistically enhanced sound file player 532 is not required.
      <br/>
      Accordingly, the costs of employing professional vocal talent and the time required to sample a human voice are avoided during the prototyping process as revisions are made to the application 502.
    </p>
    <p num="101">
      In the final stages of development, a linguistically enhanced sound file 512 can be created by recording a human voice (e.g., professional vocal talent) and incorporated into the character animation 508 with a minimum of changes to the programming code in the application 502.
      <br/>
      In this way, the resulting application presents high quality animation while avoiding some of the development costs associated with using a human voice.
      <br/>
      In both cases, the character animation 508 presents an animation in which the character's mouth (and optionally, a word balloon) are synchronized with the speech sound output.
      <br/>
      However, the linguistically enhanced sound file 512 provides a superior animation with more realistic speech sound output.
    </p>
    <p num="102">
      In view of the many possible embodiments to which the principles of our invention may be applied, it should be recognized that the illustrated embodiments are only an example of the invention and should not be taken as a limitation on the scope of the invention.
      <br/>
      Rather, the scope of the invention is defined by the following claims.
      <br/>
      We therefore claim as our invention all that comes within the scope and spirit of these claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A computer-implemented method for creating annotated sound data, the method comprising:</claim-text>
      <claim-text>acquiring speech sound data comprising an utterance and a textual representation of the utterance of the speech sound data; supplying a data structure specifying the contents of the textual representation of the utterance of the speech sound data to a speech recognition engine; with the speech recognition engine, analyzing the speech sound data comprising the utterance and the data structure specifying the contents of the textual representation of the utterance of the speech sound data to determine linguistic event values indicative of linguistic events in the speech sound data comprising the utterance and time values indicative of when within the speech sound data comprising the utterance the linguistic events occur;</claim-text>
      <claim-text>and annotating the speech sound data comprising the utterance with the linguistic event values and the time values to create annotated sound data for synchronizing speech output with other computer output or processing.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A computer-readable medium having computer-executable instructions for creating annotated sound data by performing the following: acquiring speech sound data comprising an utterance and a textual representation of the utterance of the speech sound data; supplying a data structure specifying the contents of the textual representation of the utterance of the speech sound data to a speech recognition engine; with the speech recognition engine, analyzing the speech sound data comprising the utterance and the data structure specifying the contents of the textual representation of the utterance of the speech sound data to determine linguistic event values indicative of linguistic events in the speech sound data comprising the utterance and time values indicative of when within the speech sound data comprising the utterance the linguistic events occur, and annotating the speech sound data comprising the utterance with the linguistic event values and the time values to create annotated sound data for synchronizing speech output with other computer output or processing.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1, wherein a linguistic event value is indicative of a spoken phoneme.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1, wherein a linguistic event value is indicative of a human mouth position.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1, wherein the linguistic event value is indicative of a spoken word boundary.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 1, wherein a first linguistic event value is indicative of a spoken word boundary and a second linguistic event value is indicative of a spoken phoneme.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 1 further comprising: combining the speech sound data, the linguistic event values, and the time values to create a linguistically enhanced sound file.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 1 wherein the sound file is created in a format that is the same as or compatible with the speech sound data, whereby the sound file can be played on a sound player that plays the speech sound data or compatible files.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method of claim 1, further comprising: playing the speech sound data from the annotated sound data to present sound output; retrieving from the annotated sound data a linguistic event value and a time value;</claim-text>
      <claim-text>and performing an action in an animation indicative of the linguistic event at a time indicated by the time value, whereby the animation is synchronized with the linguistic event.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 9, wherein the linguistic event value is indicative of a spoken phoneme and the action in the animation is the presentation of a mouth shape associated with the spoken phoneme.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 9, wherein the linguistic event value is indicative of a spoken word and the action in the animation is a text presentation of the spoken word in a word balloon.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A computer-implemented method for synchronizing a word balloon animation of an animated character with speech sound data via linguistic enhancement data specifying spoken word boundaries, the method comprising: playing the speech sound data to present sound output for the animated character; retrieving from the linguistic enhancement data a linguistic event value indicative of a spoken word boundary, and a time value indicative of when within the speech sound data the spoken word boundary occurs;</claim-text>
      <claim-text>and in the word balloon animation of the animated character, presenting an additional word at the time indicated by the time value whereby the word balloon animation is synchronized with the spoken word boundary.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A computer-readable medium having computer-executable instructions for synchronizing a word balloon animation of an animated character with speech sound data via linguistic enhancement data specifying spoken word boundaries by performing the following: playing the speech sound data to present sound output for the animated character; retrieving from the linguistic enhancement data a linguistic event value indicative of a spoken word boundary and a time value indicative of when within the speech sound data the spoken word boundary occurs;</claim-text>
      <claim-text>and in the word balloon animation of the animated character, presenting an additional word at the time indicated by the time value whereby the word balloon animation is synchronized with the spoken word boundary.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A computer-implemented method for synchronizing mouth animation of a character with speech sound data comprising an utterance by employing a speech recognition engine to determine when phonemes occur within the utterance of the speech sound data, the method comprising: providing a grammar based on a textual representation of the utterance of the speech sound data and the speech sound data to the speech recognition engine to produce an event list indicating when phonemes occur within the speech sound data, the event list comprising at least one phoneme event, the phoneme event comprising a phoneme type value indicative of a phoneme and a phoneme time value indicative of when within the utterance the phoneme occurs; annotating the speech sound data with the event list to produce a linguistically enhanced sound file; playing sound data from the linguistically enhanced sound file to produce sound output; reading the event list from the linguistically enhanced sound file; selecting a phoneme event in the list;</claim-text>
      <claim-text>and while playing the sound data, displaying a mouth shape associated with the phoneme indicated by the phoneme type value of the selected phoneme event at a time indicated by the phoneme time value of the selected phoneme event.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A computer-implemented method for synchronizing an animation of a character with speech sound data, the method comprising: building a grammar from a text of the speech sound data; providing the grammar and the speech sound data to a speech recognition engine to determine a phoneme value indicative of a member of the International Phonetic Alphabet occurring in the speech sound data, a phoneme time value indicative of when within the speech sound data the member occurs, and a word break time value indicative of when within the speech sound data a recognized word occurs; annotating the speech sound data with the phoneme value, the phoneme time value, and the word break time value to create a linguistically enhanced sound file; retrieving from the linguistically enhanced sound file the phoneme value, the phoneme time value, and the word break time value; dividing the speech sound data from the linguistically enhanced sound file into a plurality of segments according to the phoneme time value and the word break time value; sending the segments of the speech sound data from the linguistically enhanced sound file in an audio stream to an audio player to present sound output; sending between two segments in the audio stream to the audio player a notification item indicative of a phoneme value notification; sending between two segments in the audio stream to the audio player a notification item indicative of a word break; presenting in the character animation a mouth shape associated with the phoneme value when the audio player encounters the phoneme value notification item in the audio stream, whereby the character animation is synchronized with the sound output;</claim-text>
      <claim-text>and presenting in the character animation a text presentation of a word in a word balloon of the character when the audio player encounters the word break notification item in the audio stream, whereby the character animation is synchronized with the sound output.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A computer-readable medium having computer-executable instructions for for synchronizing an animation of a character with speech sound data by perforrming the following: building a grammar from a text of thc speech sound data; providing the grammar and the speech sound data to a speech recognition engine to determine a phoneme value indicative of a member of the International Phonetic Alphabet occurring in the speech sound data, a phoneme time value indicative of when within the speech sound data the member occurs, and a word break time value indicative of when within the speech sound data a recognized word occurs; annotating the speech sound data with the phoneme value, the phoneme time value, and the word break time value to create a linguistically enhanced sound file; retrieving from the linguistically enhanced sound file the phoneme value, the phoneme time value, and the word break time value; dividing the speech sound data from the linguistically enhanced sound file into a plurality of segments according to the phoneme time value and the word break time value; sending the segments of the speech sound data from the linguistically enhanced sound file in an audio stream to an audio player to present sound output; sending between two segments in the audio stream to the audio player a notification item indicative of a phoneme value notification; sending between two segments in the audio stream to the audio player a notification item indicative of a word break; presenting in the character animation a mouth shape associated with the phoneme value when the audio player encounters the phoneme value notification item in the audio stream, whereby the character animation is synchronized with the sound output;</claim-text>
      <claim-text>and presenting in the character animation a text presentation of a word in a word balloon of the character when the audio player encounters the word break notification item in the audio stream. whereby the character animation is synchronized with the sound output.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. A computer-implemented system for synchronizing a character animation with speech sound data comprising an utterance, the system comprising: a speech recognition engine operable for receiving the speech sound data comprising the utterance and a list of one or more possibilities of the contents of the utterance of the speech sound data to provide a phoneme type value indicative of a phoneme occurring in the speech sound data and a phoneme time value indicative of when within the speech sound data the phoneme occurs; a linguistic information and sound editing tool operable for acquiring the speech sound data comprising the utterance and a textual representation of the contents of the utterance of the speech sound data, the linguistic information and sound editing tool operable for providing the sound data comprising the utterance to the speech recognition engine and the textual representation of the contents of the utterance of the speech sound data to the speech recognition engine as the list of one or more possibilities of the contents of the utterance of the speech sound data and further operable for annotating the speech sound data with the phoneme type value provided by the speech recognition engine and the phoneme time value provided by the speech recognition engine to create a linguistically enhanced sound file; a linguistically enhanced sound file player for playing the linguistically enhanced sound file to produce sound output from the sound data and operable to output the phoneme type value at a time indicated by the phoneme time value;</claim-text>
      <claim-text>and an animation server responsive to the phoneme type value output by the linguistically enhanced sound file player and operable to present in the character animation a mouth shape associated with the phoneme type value, whereby the character animation is synchronized with the sound output.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The system of claim 17 wherein, the linguistic information and sound editing tool presents the speech sound data as a graphical representation of sound waves; the phoneme time value is represented by the location of a graphical marker on the graphical representation of sound waves;</claim-text>
      <claim-text>and the linguistic information and sound editing tool is operable for modifying the phoneme time value when an edge of the graphical marker is manipulated.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The system of claim 17 further comprising: a text to speech engine operable to output synthetic speech and a phoneme type value at a time when a phoneme associated with the phoneme type value occurs in the synthetic speech; wherein the animation server is responsive to the phoneme type value output by the text to speech engine to present a mouth shape associated with the phoneme type value;</claim-text>
      <claim-text>and wherein a programming interface presented by the animation server to the linguistically enhanced sound file player for receiving a phoneme type value and a programming interface presented by the animation server to the text to speech engine for receiving a phoneme type value are the same or compatible.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The system of claim 17 further comprising: a text to speech engine operable to output synthetic speech and a phoneme type value at a time when a phoneme associated with the phoneme type value occurs in the synthetic speech; wherein the animation server is responsive to the phoneme type value output by the text to speech engine to present a mouth shape associated with the phoneme type value;</claim-text>
      <claim-text>and wherein the linguistically enhanced sound file player and the text to speech engine send a phoneme type value to the animation server in the same way.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The system of claim 17 wherein, the speech recognition engine is further operable to provide a word break time value indicative of when within the speech sound data a next word in the text of the speech sound data occurs; the linguistic information and sound editing tool is further operable to annotate the speech sound data with the word break time value provided by the speech recognition engine; the linguistically enhanced sound file player is further operable to output a next word notification at a time indicated by the word break time value from the linguistically enhanced sound file;</claim-text>
      <claim-text>and the animation server is further responsive to the next word notification output by the linguistically enhanced sound file player to present in the animation a next word in the text of the speech sound data, whereby the animation is synchronized with the sound output.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The system of claim 21 wherein, the linguistic information and sound editing tool presents the speech sound data as a graphical representation of sound waves; the word break time value is represented by the location of a graphical marker on the graphical representation of sound waves;</claim-text>
      <claim-text>and the linguistic information and sound editing tool is operable for modifying the word break time value when an edge of the graphical marker is manipulated.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. A computer-readable medium having stored thereon a data structure for synchronizing speech sound data with a character animation, the data structure comprising at least two non-overlapping sections: a first section comprising continuous speech sound data comprising digitized recorded speech for use with an animated character, wherein the first section is positioned to be played by a sound player following a format not having linguistic enhancement data;</claim-text>
      <claim-text>and a second section not overlapping the first section comprising continuous speech sound data, the second section comprising a phoneme marking list comprising a list of phoneme events, wherein a phoneme event is indicative of a phoneme type and indicative of a time when within the speech sound data the phoneme type occurs, whereby the phoneme event can be used by a player to synchronize mouth movement of the animated character with the speech sound data.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The computer-readable medium of claim 23 wherein the data structure further comprises: a word marking list comprising a list of word events, wherein a word event is indicative of a word and indicative of a time when within the speech sound data the word occurs, whereby the word event can be used by a player to synchronize the appearance of words in a word balloon of the character with the speech sound data.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. A computer-implemented system for synchronizing a character mouth animation with speech sound data comprising an utterance, the system comprising: a speech recognition means operable for receiving the speech sound data comprising the utterance and a grammar of the utterance of the speech sound data to provide a phoneme type value indicative of a phoneme occurring in the speech sound data and a phoneme time value indicative of when within the speech sound data the phoneme occurs; a linguistic information and sound editing means for acquiring the speech sound data and a textual representation of the utterance of the speech sound data, the linguistic information and sound editing means operable for providing the speech sound data to the speech recognition means and a grammar based on the textual representation of the utterance of the speech sound data to the speech recognition means as the grammar of the utterance and further operable for annotating the speech sound data with the phoneme type value provided by the speech recognition means and the phoneme time value provided by the speech recognition means to create a linguistically enhanced sound file; a linguistically enhanced sound file playing means for playing the linguistically enhanced sound file to produce sound output from the speech sound data and operable to output a phoneme type value at a time indicated by the phoneme time value;</claim-text>
      <claim-text>and an animation means responsive to the phoneme type value output by the linguistically enhanced sound file playing means and operable to present in a character animation a mouth shape associated with the phoneme type value, whereby the character mouth animation is synchronized with the sound output.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. A computer-implemented method for creating an annotated file for synchronizing the mouth animation of an animated character with sound data comprising a recorded spoken utterance via a speech recognition engine, wherein the speech recognition engine is operable to accept a data structure specifying what to look for in the recorded spoken utterance, the method comprising: acquiring from a user a textual representation of the recorded spoken utterance; based on the textual representation of the recorded spoken utterance, constructing a data structure instructing the speech recognition engine to look in the recorded spoken utterance for phonemes corresponding to the textual representation; submitting to the speech recognition engine the sound data comprising the recorded spoken utterance and the data structure instructing the speech recognition engine to look in the recorded spoken utterance for phonemes corresponding to the textual representation; activating the speech recognition engine to identify times at which phonemes occur within the recorded spoken utterance;</claim-text>
      <claim-text>and creating a file comprising the sound data and annotations indicating the times at which phonemes occur within the recorded spoken utterance.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The method of claim 26 wherein the activating comprises identifying, with the speech recognition engine, times at which word boundaries occur within the recorded spoken utterance;</claim-text>
      <claim-text>and the file comprises annotations indicating the times at which word boundaries occur within the recorded spoken utterance.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The method of claim 26 wherein the file comprising the sound data and annotations indicating the times at which phonemes occur within the recorded spoken utterance is of a format in which the sound data is separate from and not intermingled with the annotations indicating the times at which phonemes occur within the recorded spoken utterance.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The method of claim 26 wherein the sound data in the file is of the same format as the recorded spoken utterance.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The method of claim 26 wherein the activating instructs the speech recognition engine to recognize a single possibility: linguistic content corresponding to the textual representation of the recorded spoken utterance.</claim-text>
    </claim>
  </claims>
</questel-patent-document>