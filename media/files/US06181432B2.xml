<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181432B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181432</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181432</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="12752650" extended-family-id="21529702">
      <document-id>
        <country>US</country>
        <doc-number>09030867</doc-number>
        <kind>A</kind>
        <date>19980226</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09030867</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>22083157</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>JP</country>
        <doc-number>4663197</doc-number>
        <kind>A</kind>
        <date>19970228</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997JP-0046631</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>B41J  21/00        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>B</section>
        <class>41</class>
        <subclass>J</subclass>
        <main-group>21</main-group>
        <subgroup>00</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   3/12        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>12</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06K  15/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>15</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>H04N   1/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>1</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>358001110</text>
        <class>358</class>
        <subclass>001110</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>358001130</text>
        <class>358</class>
        <subclass>001130</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>358001150</text>
        <class>358</class>
        <subclass>001150</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>358001160</text>
        <class>358</class>
        <subclass>001160</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>358001170</text>
        <class>358</class>
        <subclass>001170</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>358486000</text>
        <class>358</class>
        <subclass>486000</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>358488000</text>
        <class>358</class>
        <subclass>488000</subclass>
      </further-classification>
      <further-classification sequence="7">
        <text>382170000</text>
        <class>382</class>
        <subclass>170000</subclass>
      </further-classification>
      <further-classification sequence="8">
        <text>382198000</text>
        <class>382</class>
        <subclass>198000</subclass>
      </further-classification>
      <further-classification sequence="9">
        <text>382289000</text>
        <class>382</class>
        <subclass>289000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06K-015/00</text>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>15</main-group>
        <subgroup>00</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04N-001/00C22</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>001</main-group>
        <subgroup>00C22</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04N-001/00W2</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>001</main-group>
        <subgroup>00W2</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06K-015/00</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>15</main-group>
        <subgroup>00</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06K-2215/0008</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>2215</main-group>
        <subgroup>0008</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06K-2215/0011</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>2215</main-group>
        <subgroup>0011</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-001/00278</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>1</main-group>
        <subgroup>00278</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-001/00326</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>1</main-group>
        <subgroup>00326</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-001/00968</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>1</main-group>
        <subgroup>00968</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06K-215/00B2B</classification-symbol>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06K-215/00B2D</classification-symbol>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04N-001/00C6</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>16</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>38</number-of-drawing-sheets>
      <number-of-figures>43</number-of-figures>
      <image-key data-format="questel">US6181432</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Printing system, printing apparatus and printing control method</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HIDESHIMA TAKAHIRO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5566277</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5566277</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>SPEED ROBIN C</text>
          <document-id>
            <country>US</country>
            <doc-number>5592593</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5592593</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KADOTA MASATOSHI</text>
          <document-id>
            <country>US</country>
            <doc-number>5604846</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5604846</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SUGAYA AKIO</text>
          <document-id>
            <country>US</country>
            <doc-number>5768486</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5768486</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>NODA HIDEO</text>
          <document-id>
            <country>US</country>
            <doc-number>5889931</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5889931</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Canon Kabushiki Kaisha</orgname>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>CANON</orgname>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Furuya, Yoji</name>
            <address>
              <address-1>Inagi, JP</address-1>
              <city>Inagi</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Fitzpatrick, Cella, Harper &amp; Scinto</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Coles, Edward L.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      When a host transfers only an image to a printing apparatus to make it print out the image, a heavy load is imposed on the host, and the data size to be transferred is large, resulting in a long processing time.
      <br/>
      To prevent this, when a document is to be printed, the driver on a host sends character codes of characters that occur for the first time in that document and corresponding character images to the printer in advance, and registers them.
      <br/>
      After this process, the driver transmits, to the printer, characters as character codes, ruled lines as coordinate data representing their corner points, and data other than characters and ruled lines as mapped images.
      <br/>
      The printer maps an image on a page memory, maps characters as images with reference to the registered character codes and images, and superposes the mapped character images on the image mapped on the page memory.
      <br/>
      Also, the printer maps ruled lines based on their vertex positions, and synthesizes them on the already mapped image.
      <br/>
      The printer prints the synthesized image.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">The present invention relates to a printing system, printing apparatus, and printing control method for printing out print data sent from, e.g., a host computer.</p>
    <p num="3">2. Related Background Art</p>
    <p num="4">Conventionally, a page printer dedicated to image output is known, and is called a host-based printer.</p>
    <p num="5">
      In case of the host-based printer, a host computer compresses mapped image data for one page and sends the compressed data to a controller unit of the printer.
      <br/>
      The controller unit expands the received compressed data, converts the expanded data into a video signal, and outputs the video signal to an engine unit in synchronism with the paper discharge timing of the engine unit.
      <br/>
      In this way, printing on a paper sheet for one page is done.
    </p>
    <p num="6">
      In such printer, conversion of compressed image data into a video signal and video signal output to the engine unit are done by a hardware circuit.
      <br/>
      Ultimately, the controller unit does not require any CPU, and a very low-cost page printer can be provided.
    </p>
    <p num="7">
      However, the host computer that uses the conventional host-based printer must perform character mapping, figure drawing, image pasting, and the like.
      <br/>
      That is, after the host computer maps all print data as image data, it compresses the mapped image data and transfers the compressed data to the printer.
      <br/>
      For this reason, the volume of data to be transferred from the host computer to the printer becomes large.
      <br/>
      Also, the host computer must temporarily process characters and elements other than characters, e.g., must perform table ruled line drawing, figure drawing, image pasting, and the like, map them as image data, compress the mapped image data, and transfer the compressed data to the printer.
      <br/>
      For this reason, the transfer data volume becomes large, and the long processing time on the host computer extends the total processing time.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="8">It is an object of the present invention to provide a printing apparatus, which is an image-dedicated printer with a simple mechanism similar to that of a host-based printer, but can minimize the character and ruled line mapping processing times in a host computer and the transfer data volume from the host computer by receiving a character portion as a character code and converting it into character image data and by receiving a ruled line portion as a ruled line code and mapping it as image data, and a printing system and printing control method.</p>
    <p num="9">It is another object of the present invention to provide a printing apparatus, which can minimize the required memory capacity, a printing system, and a printing control method.</p>
    <p num="10">It is still another object of the present invention to provide a printing apparatus which can print characters and ruled lines even when the number of characters to be mapped and the number of ruled lines to be mapped have exceeded their limits, a printing system, and a printing control method.</p>
    <p num="11">In order to achieve the above object, the present invention comprises the following arrangement.</p>
    <p num="12">That is, there is provided a printing system for printing out document data created by a host apparatus using a printing apparatus,</p>
    <p num="13">
      the host apparatus comprising:
      <br/>
      first transmission means for transmitting codes and character images in units of character types that occur in the document data to the printing apparatus; and
      <br/>
      second transmission means for transmitting characters that occur in the document data as character codes, ruled lines as ruled line data representing the shapes of the ruled lines, and a portion other than the characters and ruled lines as block image data to the printing apparatus, and
      <br/>
      the printing apparatus comprising:
      <br/>
      registration means for registering the character codes and character images transmitted from the first transmission means;
      <br/>
      image reconstruction means for mapping, as image data, the character codes transmitted from the second transmission means on the basis of the codes and character images registered by the registration means, mapping ruled lines on the basis of the shapes represented by the ruled line data, and synthesizing the mapped data with an image transmitted from the second transmission means; and
      <br/>
      means for printing out the image data obtained by the image reconstruction means.
    </p>
    <p num="14">
      Alternatively, there is provided a printing apparatus for print out print data received from a host apparatus, which transmits codes and character images in units of character types that occur in document data, and which sequentially transmits characters which occur in the document data as the character codes, ruled lines as ruled line data representing the shapes of the ruled lines, and a portion other than the characters and ruled lines as block image data, comprising:
      <br/>
      registration means for registering the character codes and character images received from the host apparatus;
      <br/>
      image reconstruction means for mapping, as image data, the character codes received from the host apparatus on the basis of the codes and character images registered by the registration means, mapping ruled lines on the basis of the shapes represented by the ruled line data, and synthesizing the mapped data with a block image received from the host apparatus; and
      <br/>
      means for printing out the image data obtained by the image reconstruction means.
    </p>
    <p num="15">
      Also, there is provided a printing control apparatus for making a printing apparatus print out created document data, comprising:
      <br/>
      first transmission means for transmitting codes and character images in units of character types that occur in the document data to the printing apparatus; and
      <br/>
      second transmission means for transmitting characters that occur in the document data as character codes, ruled lines as ruled line data representing shapes of the ruled lines, and a portion other than the characters and ruled lines as block image data to the printing apparatus.
    </p>
    <p num="16">
      Furthermore, there is provided a printing control method for printing out print data received from a host apparatus which transmits codes and character images in units of character types that occur in document data, and which subsequently transmits characters that occur in the document data as character codes, ruled lines as ruled line data representing shapes of the ruled lines, and a portion other than the characters and ruled lines as image data, comprising:
      <br/>
      the registration step of registering the character codes and character images received from the host apparatus;
      <br/>
      the image reconstruction step of mapping, as image data, the character codes received from the host apparatus on the basis of the codes and character images registered in the registration step, mapping the ruled lines on the basis of the shapes represented by the ruled line data, and synthesizing the mapped data with an image received from the host apparatus; and
      <br/>
      the step of printing out the image data obtained in the image reconstruction step.
    </p>
    <p num="17">
      Moreover, there is provided a control method of a printing apparatus for printing out created document data, comprising:
      <br/>
      the first transmission step of transmitting codes and character images in units of character types that occur in the document data to the printing apparatus; and
      <br/>
      the second transmission step of transmitting characters that occur in the document data as character codes, ruled lines as ruled line data representing shapes of the ruled lines, and a portion other than the characters and ruled lines as image data to the printing apparatus.
    </p>
    <p num="18">
      In addition, there is provided a computer readable storage medium which stores a program for making a computer print out, based on print data received from a host apparatus which transmits codes and character images in units of character types that occur in document data, and which subsequently transmits characters that occur in the document data as character codes, ruled lines as ruled line data representing shapes of the ruled lines, and a portion other than characters and ruled lines as image data, the program comprising:
      <br/>
      a code of the registration step of registering the character codes and character images received from the host apparatus;
      <br/>
      a code of the image reconstruction step of mapping, as image data, the character codes received from the host apparatus on the basis of the codes and character images registered in the registration step, mapping the ruled lines based on the shapes represented by the ruled line data, and synthesizing the mapped data with an image received from the host apparatus; and
      <br/>
      a code of the step of printing out the image data obtained in the image reconstruction step.
    </p>
    <p num="19">
      Lastly, there is provided a computer readable storage medium which stores a program for making a computer control a printing apparatus for printing out created document data, the program comprising:
      <br/>
      a code of the first transmission step of transmitting codes and character images in units of character types that occur in the document data to the printing apparatus; and
      <br/>
      a code of the second transmission step of transmitting characters that occur in the document data as character codes, ruled lines as ruled line data representing shapes of the ruled lines, and a portion other than the characters and ruled lines as image data to the printing apparatus.
    </p>
    <p num="20">Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings, in which like reference characters designate the same or similar parts throughout the figures thereof.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="21">
      The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention.
      <br/>
      FIG. 1 is a block diagram for explaining the overall system according to the first embodiment of the present invention;
      <br/>
      FIG. 2 is an explanatory view of the principle of synthesizing image data, character data, and ruled line data;
      <br/>
      FIG. 3 is an explanatory view of the command structure;
      <br/>
      FIG. 4 is an explanatory view of the structures of command sequences;
      <br/>
      FIG. 5 is an explanatory view of coordinate designation of a ruled line;
      <br/>
      FIG. 6 is a view for explaining programs installed in a ROM;
      <br/>
      FIGS. 7A and 7B are explanatory views of pointers of a reception buffer;
      <br/>
      FIG. 8 is an explanatory view of drawing of a horizontal ruled line;
      <br/>
      FIG. 9 is an explanatory view of drawing of a vertical ruled line;
      <br/>
      FIG. 10 is a flow chart for explaining the operation of a printer driver;
      <br/>
      FIG. 11 is a flow chart for explaining the operation of the printer driver;
      <br/>
      FIG. 12 is a flow chart for explaining ruled line processing in units of bands;
      <br/>
      FIG. 13 is a flow chart for explaining the operation of a reception management program;
      <br/>
      FIG. 14 is a flow chart for explaining the operation of the reception management program;
      <br/>
      FIG. 15 is a flow chart for explaining the operation of a reception unit;
      <br/>
      FIG. 16 is a flow chart for explaining the operation of the reception unit;
      <br/>
      FIG. 17 is a flow chart for explaining the operation of an interpreter program;
      <br/>
      FIG. 18 is a flow chart for explaining the operation of the interpreter program;
      <br/>
      FIG. 19 is a flow chart for explaining the operation of the interpreter program;
      <br/>
      FIG. 20 is a flow chart for explaining the operation of the interpreter program;
      <br/>
      FIG. 21 is a flow chart for explaining the operation of a registration program;
      <br/>
      FIG. 22 is a flow chart for explaining the operation of a printing program;
      <br/>
      FIG. 23 is a flow chart for explaining the operation of a ruled line mapping circuit;
      <br/>
      FIG. 24 is a flow chart for explaining the operation of the ruled line mapping circuit;
      <br/>
      FIG. 25 is an explanatory view of variables used upon video output of a band;
      <br/>
      FIG. 26 is a flow chart for explaining the operation of a video transfer circuit;
      <br/>
      FIG. 27 is a flow chart for explaining the operation of the video transfer circuit;
      <br/>
      FIG. 28 is a flow chart for explaining the operation of the video transfer circuit;
      <br/>
      FIGS. 29A and 29B are explanatory views of the principle of repetition of image bands according to the fourth embodiment;
      <br/>
      FIGS. 30A and 30B are explanatory views of an example of repetition of image bands;
      <br/>
      FIG. 31 is an explanatory view of the command structure;
      <br/>
      FIG. 32 is a flow chart for explaining the operation of a printer driver;
      <br/>
      FIG. 33 is a flow chart for explaining the operation of the printer driver;
      <br/>
      FIG. 34 is a flow chart for explaining the operation of an interpreter program;
      <br/>
      FIG. 35 is a flow chart for explaining the operation of the interpreter program;
      <br/>
      FIG. 36 is a flow chart for explaining the operation of the interpreter program;
      <br/>
      FIG. 37 is a flow chart for explaining the operation of the interpreter program;
      <br/>
      FIGS. 38A and 38B are views showing the principle of the procedure for outputting an image with a large data size; and
      <br/>
      FIG. 39 is a view showing the state of a printer upon outputting an image with a large data size.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="22">First Embodiment</p>
    <p num="23">A printing system which transmits data from a host computer to a printer to print the data according to the first embodiment of the present invention will be described below with reference to the accompanying drawings.</p>
    <p num="24">(a) System Arrangement</p>
    <p num="25">A printing apparatus in the printing system of the first embodiment alternately maps character data, ruled line data, and image data on two band memories on a RAM, and transports the mapped data as a video signal to an engine unit 4.</p>
    <p num="26">FIG. 1 is a block diagram for explaining the arrangement of the overall system.</p>
    <p num="27">
      A personal computer 1 serves as a host computer which generates character image data to be registered, a character code for instructing printing, data for instructing drawing of ruled lines, and compressed image data, and sends them to a printer 2.
      <br/>
      The printer body 2 comprises a controller unit 3 and the engine unit 4.
      <br/>
      The controller unit 3 receives character data, ruled line data, and image data sent from the host computer 1, maps the received data as image data in the raster format to generate a video signal, and sends the video signal to the engine unit 4.
      <br/>
      The engine unit 4 prints the video signal received from the controller unit 3 by transferring it onto a paper sheet, and discharges the paper sheet.
      <br/>
      Note that the printer 2 is a binary printer which expresses one pixel by one bit.
    </p>
    <p num="28">The controller unit 3 is constituted by a central processing unit (CPU) 5 for controlling the entire controller unit 3, a read-only memory (ROM) 8 which stores programs that describe the processing operations of the CPU 5, a random-access memory (RAM) 9, a reception unit 6 for receiving character data, ruled line data, and image data from the host 1, and setting the received data in a reception buffer 10 allocated in the RAM 9, a character expansion circuit 17 for expanding the received compressed character data and mapping the expanded data onto band memories 71 and 72, a ruled line mapping circuit 31 for mapping ruled lines onto the band memories 71 and 72 in accordance with an instruction of the received ruled line data, an image expansion circuit 16 for expanding the received compressed image data and mapping the expanded data onto the band memories 71 and 72, a video transfer circuit 7 for converting the images mapped on the band memories 71 and 72 into a video signal, and outputting the video signal to the engine unit 4, and the like.</p>
    <p num="29">
      Character data 18 indicate the already received character data, which are stored in the reception buffer 10 in units of bands in a page.
      <br/>
      Ruled line data 132 indicate the already received ruled line data which are stored in the reception buffer 10 in units of bands in a page.
      <br/>
      Image data 19 indicate the already received image data, which are stored in the reception buffer 10 in units of bands in a page.
    </p>
    <p num="30">
      The data received and stored in the reception buffer 10 are segmented in correspondence with 16 bands that define one page.
      <br/>
      In each band, character data, ruled line data, and image data included in that band are arranged.
      <br/>
      Of course, a driver on the host computer 1 outputs data in such arrangement to the printer 2.
    </p>
    <p num="31">In addition, the RAM 9 includes a work area 12 for programs, which includes a page management table 13 for managing the character data 18, ruled line data 132, and image data 19 in units of pages received in the reception buffer 10, a registered character data area 15 for storing compressed dot images in units of characters, a registered character management table 14 for managing registered character data, and the like.</p>
    <p num="32">
      Note that the contents of the received character data 18 include registered characters and character codes.
      <br/>
      For a character which appears first in the document to be printed on the host 1, compressed dot image data for one character, and the corresponding character code are sent as a registered character to the printer 2.
      <br/>
      Printing of subsequent registered characters as well as the printing instruction of the character which appears first in the document is instructed by character codes.
    </p>
    <p num="33">
      The registered character temporarily received in the reception buffer 10 is transferred to and saved in the registered character data area 15.
      <br/>
      When printing of the saved character is instructed by a character code, the registered character data corresponding to that character code is read out from the registered character data area 15, is expanded by the character expansion circuit 17, and is mapped on the band memories 71 and 72.
    </p>
    <p num="34">The ruled line data 132 is mapped on the band memories 71 and 72 by the ruled line mapping circuit 31, and the compressed image data 19 is expanded and mapped on the band memories 71 and 72 by the image expansion circuit 16.</p>
    <p num="35">
      Note that two band memories 71 and 72 are allocated on the RAM.
      <br/>
      While image data on the band memory (A) 71 is transferred as a video signal to the engine unit 4, character, ruled line, and image data are mapped on the band memory (B) 72. By contrast, while image data on the band memory (B) 72 is transferred as a video signal to the engine unit 4, character, ruled line, and image data are mapped on the band memory (A) 71. Such operations are alternately repeated to complete printing for one page.
      <br/>
      The height of image data stored in the band memories 71 and 72 is considered to be that of each of strip patterns obtained by equally laterally segmenting one page of a paper sheet at the portrait position into 16 portions.
    </p>
    <p num="36">
      The video transfer circuit 7 alternately converts image data in the band memories 71 and 72 into video signals, and transfers the video signals to the engine unit 4.
      <br/>
      As another function, when data for a certain band sent from the driver is that for a blank band including no data, the video transfer circuit 7 inhibits a video signal for that portion from being transferred to the engine unit 4.
      <br/>
      As still another function, when data for a certain band sent from the driver includes a single image block alone, the video transfer circuit 7 does not map that compressed image block data onto the band memory 71 or 72 but simultaneously expands it to image data and converts the image data into a video signal to be transferred to the engine unit 4.
      <br/>
      That is, the video transfer circuit 7 has three different functions.
      <br/>
      These functions are enabled in accordance with an instruction from the CPU 5.
    </p>
    <p num="37">Note that image data transferred from the host 1 to the printer 2 will be referred to as block image data to distinguish it from image data mapped by the printer.</p>
    <p num="38">The CPU 5 of the controller unit 3 can use an inexpensive product with not so high processing performance, since it need only perform memory management using the reception buffer 10, page management table 13, registered character management table 14, and the like in the RAM 9.</p>
    <p num="39">
      The engine unit 4 will be described below.
      <br/>
      The engine unit 4 comprises a CPU 21 and memory 22.
      <br/>
      The memory 22 includes a ROM 23 which stores control programs, and a RAM 24 used as a work area for the programs.
      <br/>
      A video reception unit 25 receives a video signal from the controller unit 3.
      <br/>
      A development/fixing unit 27 forms an image on the basis of the video signal, and transfers the formed image onto a paper sheet.
      <br/>
      A paper feed unit 26 functions to feed an unused blank paper sheet from a paper cassette or the like, the development/fixing unit 27 transfers and fixes an image onto a paper sheet, and a paper discharge unit 28 discharges the printed paper sheet.
    </p>
    <p num="40">
      Note that the bold arrows in FIG. 1 indicate the flows of the character data, ruled line data, image data, and video signal in the controller unit 3, and the flow of a paper sheet in the engine unit 4.
      <br/>
      The thin arrows indicate control exchange processes among the individual units.
      <br/>
      The CPU 5 of the controller unit 3 and the CPU 21 of the engine unit 4 exchange information with each other.
      <br/>
      The information to be exchanged is associated with control of print processing such as video transfer, paper feed, and the like.
    </p>
    <p num="41">Principle of Video Signal Output</p>
    <p num="42">FIG. 2 is an explanatory view of the principle of output of image data in units of bands, each of which is obtained by synthesizing image, character, and ruled line data, to the engine unit 4, in the controller unit 3 in the printer 2.</p>
    <p num="43">
      As has been partially described above with the aid of FIG. 1, the driver on the host 1 divides the document to be printed into a character portion, a ruled line portion, and a portion other than these portions.
      <br/>
      The portion other than the character and ruled line portions is mapped as an image on a frame buffer on the host 1.
      <br/>
      The character data portion, ruled line data portion, and image data portion are separately transferred to the printer 2 in units of bands obtained by segmenting one page into 16 bands.
      <br/>
      In this case, the character data portion is transferred in such a manner that data obtained by compressing character dot patterns are sent to and registered in the printer to be able to be identified by character codes, and a character code sequence including the character code and positions is then sent as print data.
      <br/>
      A character need only be registered once in each document (i.e., one print job).
      <br/>
      The registered characters are deleted upon completion of printing of one document.
    </p>
    <p num="44">
      The 16 divided bands have an equal height.
      <br/>
      That is, the bands are equally divided.
    </p>
    <p num="45">As for characters extending across two bands, their print codes are transferred from the driver to the printer 2 as they belong to these two bands.</p>
    <p num="46">As for a large character (a character with a large data size), the character is mapped as image data on the host 1, and the image data is transferred from the driver to the printer 2 as a part of block image data.</p>
    <p num="47">
      A single ruled line is defined by "an elongated rectangular area which is painted in black and extends in a predetermined direction".
      <br/>
      Being defined this way, the coordinates of a pair of opposing vertices of the rectangular area are transferred as single ruled line data.
      <br/>
      When a single ruled line extends across two or more bands, ruled line data of rectangles obtained by segmenting the original ruled line into corresponding bands are generated, and are transferred to the printer 2.
    </p>
    <p num="48">
      Image data for one page mapped on the frame buffer on the host 1 is divided into 16 bands.
      <br/>
      Furthermore, only a rectangular portion that actually includes an image in each band is extracted and compressed.
      <br/>
      A set of compressed image data is transferred as a single block image from the driver of the host 1 to the printer 2.
      <br/>
      In FIG. 2, only the portions bounded by dotted lines of image data are actually transferred as image blocks.
    </p>
    <p num="49">
      When a certain band includes all the block image data, character data, and ruled line data, the controller unit 3 of the printer 2 expands the received compressed image data 19 using the image expansion circuit 16 and maps the expanded data onto the band memory 71 or 72.
      <br/>
      Also, the controller unit 3 expands the registered compressed character image data of characters, printing of which is directed by the received character data 18, using the character expansion circuit 17, and maps them on the band memory 71 or 72.
      <br/>
      Furthermore, the controller unit 3 maps the received ruled line data 132 onto the band memory 71 or 72 using a ruled line mapping circuit 131.
    </p>
    <p num="50">When the generated character image data and ruled line image data are mapped on the band memory, the ORs of these data and those already written in the band memory are written.</p>
    <p num="51">
      Upon completion of mapping of character, ruled line, and image data onto the band memory 71, the CPU 5 directs the video transfer circuit 7 to transfer a video signal to the engine unit 4, and maps character, ruled line, and block image data onto the band memory 72 during output of the video signal by the circuit 7.
      <br/>
      Upon completion of mapping of image data onto the band memory 72, and completion of video output from the band memory 71 that has been directed previously, the CPU 5 directs the video transfer circuit 7 to output a video signal from the band memory 72.
      <br/>
      Then, the CPU 5 starts mapping of character, ruled line, and block image data onto the band memory 71.
    </p>
    <p num="52">By alternately repeating mapping of character, ruled line, and block image data and output of a video signal with respect to the two band memories, one page is printed.</p>
    <p num="53">The same applies to a band which includes character data, ruled line data, or block image data alone.</p>
    <p num="54">In case of a blank band which includes none of character, ruled line, and block image data, the CPU 5 directs the video transfer circuit 7 not to transfer any video signal to the engine unit 4 for a duration corresponding to the band height.</p>
    <p num="55">
      If a certain band includes only image block data alone, the CPU 5 directs the video transfer circuit 7 to expand the image block data and to output a video signal to the engine unit 4.
      <br/>
      That is, video transfer to the engine unit 4 is directly done without image mapping onto the band memories 71 and 72.
    </p>
    <p num="56">In this manner, there are four output routes of a video signal to the engine unit 4: 1 a route from the video transfer circuit 7 without any intervention of the band memories when a band includes an image alone; 2 a route from the band memory 71; 3 a route from the band memory 72; and 4 no video signal is transferred for a blank band.</p>
    <p num="57">
      FIG. 2 illustrates that the video signals are output via these four routes.
      <br/>
      Printing for one page is done by a combination of these routes.
    </p>
    <p num="58">FIG. 3 is an explanatory view of the command structure of character data, ruled line data, and image data to be sent from the host 1 to the printer 2.</p>
    <p num="59">
      The command structure includes, in turn, a job start command 31 at the beginning of the structure, page start commands 32 in units of pages, and band start commands 81 in units of bands in each page.
      <br/>
      Sixteen band start commands 81 repetitively appear per page.
      <br/>
      The band start command 81 is issued even for a band including none of character, ruled line, and image data.
    </p>
    <p num="60">
      Furthermore, the command structure includes, in units of bands, a position movement command 33 of a pointer indicating the print position, a type command 34, and a command sequence 35.
      <br/>
      The type command 34 identifies the type of command sequence 35 that follows.
      <br/>
      The command sequence 35 has several types: a type for making character registration, type for instructing character printing, type for instructing ruled line drawing, type for instructing block image printing, and the like.
      <br/>
      The types of command sequence 35 will be described in detail later with reference to FIG. 4.
      <br/>
      Groups of commands after the page start command 32 repetitively appear in correspondence with the number of pages of the document to be printed, and print commands for one document end in response to a job end command 36.
    </p>
    <p num="61">
      In FIG. 3, the position movement command 33 is always set before the type command 34, but is not always required.
      <br/>
      For example, when the type command 34 and command sequence 35 pertain to only registration of a character, the position movement command 33 is not necessary.
    </p>
    <p num="62">FIG. 4 is an explanatory view of the structures of command sequences 35 in units of values of the type command 34.</p>
    <p num="63">
      When the type command 34 assumes a value "1", it indicates a "character registration only" command sequence.
      <br/>
      As the contents of the command sequence 35, a font number 41, character code 42, and data size 43 appear in turn, and compressed character dot image data 44 is set at the end of the sequence.
    </p>
    <p num="64">
      Character data to be registered are classified in units of fonts, and are registered in the registered character data area 15 on the RAM 9 to have one-to-one correspondence with character codes.
      <br/>
      More specifically, such classification, association, and the like are managed on the registered character management table 14.
    </p>
    <p num="65">
      When the type command 34 assumes a value "2", it indicates a "character registration+printing" command sequence.
      <br/>
      This command sequence instructs both registration and printing of a character.
      <br/>
      The format of the command sequence 35 at that time is the same as that of the type command 34=1.
      <br/>
      A character code 42 in this case implies code assignment of a character to be registered, and also a printing instruction of the already registered character.
    </p>
    <p num="66">
      When the type command 34 assumes a value "3", it indicates a "character image printing only" command sequence.
      <br/>
      That is, character dot image data is printed without being registered.
      <br/>
      The command sequence 35 includes only compressed dot image data 44 after a data size 43.
    </p>
    <p num="67">
      When the type command 34 assumes a value "4", it indicates a "character code printing" command sequence.
      <br/>
      As the contents of the command sequence 35, only a character code 42 follows a font number 41.
      <br/>
      The controller unit 3 looks up the registered character management table 14 using the font number 41 and character code 42 to find target registered character data from the registered character data area 15, expands the found data using the character expansion circuit 17, and maps it onto the band memory 71 or 72.
    </p>
    <p num="68">
      When the type command 34 assumes a value "5", it indicates a "ruled line drawing" command sequence.
      <br/>
      The contents of the command sequence 35 include an X-coordinate 49 of the lower right vertex of a rectangle that defines a single ruled line, and a Y-coordinate 50 of the lower right vertex.
    </p>
    <p num="69">
      When the type command 34 assumes a value "6", it indicates an "image block paste" command sequence.
      <br/>
      As the contents of the command sequence 35, a vertical size 45 of a block image, a horizontal size 46 of the block image, and a data size 47 appear, and compressed block image data 48 is set at the end of the sequence.
      <br/>
      The controller unit 3 expands the compressed block image data using the image expansion circuit 16, and maps it on the band memory 71 or 72.
    </p>
    <p num="70">These six different type commands 34 are used.</p>
    <p num="71">
      FIG. 5 is an explanatory view when drawing of a single ruled line is instructed by a command sequence.
      <br/>
      A single ruled line is an elongated rectangle.
      <br/>
      The coordinate point of the upper left vertex of the rectangle is pointed by the position movement command 33, and the coordinate point of its lower right vertex is pointed by the X- and Y-coordinates 49 and 50 of the lower right vertex in the command sequence 35 when the type command 34="5".
    </p>
    <p num="72">FIG. 6 is a view for explaining the programs installed in the RAM 9 of the controller unit 3.</p>
    <p num="73">
      A reception management program 51 manages character, ruled line, and block image data in units of pages stored in the reception buffer 10 using the page management table 13.
      <br/>
      Also, the program 51 instructs the reception unit 6 of the write position of the received data on the reception buffer 10.
    </p>
    <p num="74">
      An interpreter program 52 interprets character data stored in the reception buffer 10, i.e., character registration commands and character printing commands, ruled line data, i.e., commands for instructing ruled line drawing, and block image data, i.e., block image paste commands.
      <br/>
      The program 52 instructs a character registration program 53 to execute character registration, instructs a printing program 54 to execute character mapping onto the band memory 71 or 72, maps a ruled line onto the band memory 71 or 72, and pastes an image onto the band memory 71 or 72.
    </p>
    <p num="75">
      Upon completion of mapping of character, ruled line, and block image data onto the band memory 71 or 72, the interpreter program 52 instructs transfer of image data in the band memory 71 or 72 to the engine unit 4 and execution of printing from the engine unit 4.
      <br/>
      For the paper discharged page, the program 52 deletes the data of that page from the reception buffer 10.
      <br/>
      Deletion is done by only erasing registration of the paper discharged page from the page management table 13.
      <br/>
      That is, the program 52 does not actually clear any data on the reception buffer 10.
    </p>
    <p num="76">In summary, the interpreter program 52 performs interpretation in units of bands, video output in units of bands, and paper discharging.</p>
    <p num="77">The operations of the individual programs will be described in detail with reference to the flow charts (to be described later).</p>
    <p num="78">
      Note that the reception management program 51 and interpreter program 52 are started simultaneously when the power switch of the printer is turned on, and wait for data transmitted from the host 1.
      <br/>
      These two programs continue multitask operations until the power switch of the printer is turned off.
    </p>
    <p num="79">
      FIGS. 7A and 7B are views for explaining the positional relationship among pointers while a write of the received data is in progress.
      <br/>
      The reception buffer 10 has a so-called "ring buffer" structure.
    </p>
    <p num="80">
      The reception management program 51 instructs the reception unit 6 of a limit pointer 61 in advance, and a direct write of the received data is granted up to the position of the limit pointer 61 in the reception buffer 10.
      <br/>
      The write position itself, which is incremented in units of bytes, is managed by the reception unit 6.
    </p>
    <p num="81">
      Referring to FIG. 7A, immediately after the printer 2 is started, the limit pointer 61 matches the maximum value position of the reception buffer 10, i.e., the end address of the area on the reception buffer 10.
      <br/>
      However, in FIG. 7A, the limit pointer 61 is set slightly before the maximum value of the reception buffer 10, for the purpose of description.
      <br/>
      This state indicates that the received data has been written by the reception unit 6 up to a position slightly before the limit pointer 61.
    </p>
    <p num="82">
      As for the received data, the interpreter program 52 executes data interpretation, mapping of character, ruled line, and image data onto the band memory 71 or 72, video transfer to the engine unit 4, and printing by the engine unit 4 in turn or parallelly.
      <br/>
      An interpreter pointer 62 is set at the data position of a page for which paper discharge instruction to the engine unit 4 is complete.
      <br/>
      After that, a paper discharge pointer 63 is set at the data position of a page for which paper discharging is normally completed.
      <br/>
      As for a portion of the received data before the address of the paper discharge pointer 62, since the corresponding paper sheets have already been discharged, and the data stored therein are unnecessary, this portion is "erased", and newly received data can be written.
      <br/>
      Upon "erasing", the data are not actually cleared but newly received data are overwritten.
    </p>
    <p num="83">
      Note that the interpreter pointer 62 and paper discharge pointer 63 are set in units of pages.
      <br/>
      The interpreter program 52 can detect the page boundary position and the like on the reception buffer 10 by looking up the page management table 13 created and managed by the reception management program 51.
    </p>
    <p num="84">
      When the received data have been written up to the position of the maximum value of the reception buffer 10, the reception management program 51 instructs the reception unit 6 to move the limit pointer 61 to a position near the start address of the reception buffer 10, and the write position of the received data by the reception unit 6 returns to the start address portion.
      <br/>
      FIG. 7B shows the state wherein the write position of the received data has returned to the start address position, and a write of the received data has progressed slightly from the start address position.
      <br/>
      That is, so-called "ring buffer" operation is done.
    </p>
    <p num="85">
      The limit pointer 61 is updated in the following procedure.
      <br/>
      When the reception unit 6 has written the received data up to the position of the limit pointer 61, it informs the reception management program 51 that "write has reached the limit and no more data can be written".
      <br/>
      That is, the reception unit 6 requests the reception management program 51 to update the limit pointer 61.
      <br/>
      Upon receiving the request, the reception management program 51 examines the paper discharge pointer 63 to check the presence/absence of a new empty area.
      <br/>
      Then, the program 51 instructs the reception unit 6 of the current position of the paper discharge pointer 63 as the new position of the limit pointer 61.
      <br/>
      In this fashion, the reception unit 6 can write received data from an old position to a new position of the limit pointer 61.
    </p>
    <p num="86">
      Note that the reception unit 6 communicates with the reception management program 51 not only when "the write position has reached the limit pointer 61" but also when "it detects a job start command 31, page start command 32, job end command 36", and the like from the received data.
      <br/>
      With this communication, the reception management program 51 can manage received pages while allowing the reception unit 6 to take control of actual reception jobs, i.e., control of signal lines and writes of received data in a memory.
    </p>
    <p num="87">
      Note that the reception unit 6 has a mechanism for directly writing data received from the host 1 in the reception buffer 10 at high speed, i.e., a so-called DMA (dynamic memory access) reception circuit.
      <br/>
      This circuit incorporates a FIFO (first-in, first-out) buffer.
      <br/>
      Image data sent from the host 1 is temporarily stored in this FIFO buffer, and is then written at the write position on the reception buffer 10 designated by the reception management program 51 at high speed.
      <br/>
      Since such circuit is the state-of-art technique, a detailed description thereof will be omitted.
    </p>
    <p num="88">
      The work area 12 includes the page management table 13, registered character management table 14, registered character data area 15, and the like, but a description of their detailed internal structures will also be omitted.
      <br/>
      However, these tables and areas have efficient structures so as not to consume excessive memory capacities.
    </p>
    <p num="89">Formulas 1 below include some for obtaining the times required for mapping a character and ruled line on a single band.</p>
    <p num="90">
      Equations 1
      <br/>
      (a) Mapping time for one character=C1 * square of character size �dots�
      <br/>
      (b) Mapping time for one ruled line=+C2 * (2 or 1 or 0)+C3 * length �bytes�} of overwrite area * height �dots� of ruled line
      <br/>
      (c) Total image mapping time=mapping time of single block image that has size equal to one band and cannot be compressed
      <br/>
      (d) Total time per band&lt;allowable mapping time per band
    </p>
    <p num="91">
      Note that C1, C2, and C3 are constants, and are respectively a coefficient for mapping a character, a coefficient for mapping a ruled line, calculating the OR of the ruled line and the already written data, and writing the OR, i.e., used upon OR-write, and a coefficient for mapping a ruled line and writing it while ignoring the already written data, i.e., used upon overwrite. "(2 or 1 or 0)" in formula (b) indicates the number of bytes to be OR-written.
      <br/>
      The controller unit 3 in the printer 2 has a predetermined "allowable time per band used for mapping character, ruled line, and block image data".
      <br/>
      When the driver on the host 1 generates character data or ruled line data to be sent to the printer 2 in units of bands, it sums up the mapping times obtained by formulas 1 in units of characters and ruled lines.
      <br/>
      When the total mapping time exceeds the "allowable mapping time per band", the subsequent characters or ruled lines are processed as a block image.
    </p>
    <p num="92">
      Note that one block image is permitted per band.
      <br/>
      Hence, the mapping time for a block image is determined assuming a block image which has a size equal to that of one band and cannot be compressed, and is assigned as such for every block images.
      <br/>
      That is, the worst case is taken into consideration.
    </p>
    <p num="93">
      Formulas 1 for a character and ruled lines will be described below.
      <br/>
      The mapping time per character is simply calculated assuming that it is proportional to the area of a character.
      <br/>
      That is, the mapping time per character is proportional to the square of the character size in units of dots.
      <br/>
      In this case, all characters are assumed to be OR-written.
    </p>
    <p num="94">
      Since a ruled line is an elongated rectangular area, it is divided into a portion that must be OR-written and a portion that can be overwritten.
      <br/>
      The mapping time per ruled line is a total of the processing times of these portions.
      <br/>
      This processing will be explained in detail later with reference to FIGS. 8 and 9.
    </p>
    <p num="95">
      In order to OR-write a ruled line, 1-byte image data at the mapping position is sampled from the band memory 71 or 72 to an internal 1-band buffer of the ruled line mapping circuit 131.
      <br/>
      This 1-byte data corresponds to eight continuous pixels in the main scan direction.
      <br/>
      The OR of the 1-byte data and 1-byte ruled line image data to be drawn at that position is calculated.
      <br/>
      The obtained 1-byte data is returned to the original position on the band memory 71 or 72.
      <br/>
      For this reason, a long processing time is required.
      <br/>
      On the other hand, an overwrite requires only a short processing time since ruled line image data is merely directly written on the band memory 71 or 72.
    </p>
    <p num="96">
      As described above, the mapping time required for a ruled line is calculated while being separated into the time required for an OR-write portion and the time required for an overwrite portion.
      <br/>
      The reason why the character or the right and left end portions of the ruled line must be OR-written is that the controller unit 3 may map a character, ruled line, and block image to overlap each other after it clears the band memory 71 or 72.
    </p>
    <p num="97">
      Assume that a character or ruled line is not OR-written but overwritten on, e.g., an image that includes such character or ruled line.
      <br/>
      In this case, if a character overlaps the image, a portion corresponding to the character box on the image becomes a blank area, and the character is drawn on that portion.
      <br/>
      Hence, a poor print result is obtained.
    </p>
    <p num="98">Also, if a ruled line overlaps the image, in case of overwrite, portions less than eight pixels (1 byte) at the right and left ends of the ruled line become blank areas, resulting in a poor print result.</p>
    <p num="99">Although the user does not always instruct OR-write of an image, character, and ruled line on the application on the host 1, this embodiment uses OR-write which has little influences on the final print result.</p>
    <p num="100">
      Note that the entire ruled line may be OR-written.
      <br/>
      However, since 1-byte data other than the right and left end portions is a black portion (ffH), overwrite that requires only a short mapping time is preferably used.
    </p>
    <p num="101">FIG. 8 is an explanatory view for calculating the mapping time per horizontal ruled line.</p>
    <p num="102">
      FIG. 8 shows a horizontally elongated ruled line which has a thickness of 7 dots, a length of 7 bytes, and right and left odd 1-byte portions.
      <br/>
      In this ruled line, the right and left 1-byte portions must be OR-written.
      <br/>
      Hence, in formula (b) in formulas 1, the value to be multiplied by the OR-write ruled line coefficient is 2.
      <br/>
      The middle 5-byte portion can be overwritten.
      <br/>
      In formula (b) in formulas 1, the length of the overwrite area to be multiplied by the overwrite ruled line coefficient is 5.
      <br/>
      Since the thickness of the ruled line is 7 dots, the height of the ruled line in formula (b) in formulas 1 is 7.
    </p>
    <p num="103">With these values, formula (b) in formulas 1 can yield the mapping time per horizontally elongated ruled line shown in FIG. 8.</p>
    <p num="104">
      Note that some ruled lines have no odd 1-byte portion, i.e., no OR-write area at the left or right end.
      <br/>
      In such case, the value to be multiplied by the OR-write ruled line coefficient in formulas 1 is 1 or 0 depending on the number of OR-write areas.
    </p>
    <p num="105">FIG. 9 is an explanatory view for calculating the mapping time per vertical ruled line.</p>
    <p num="106">
      FIG. 9 shows a vertically elongated ruled line which has a length of 21 dots, a thickness of 2 bytes, and right and left odd 1-byte portions.
      <br/>
      In this ruled line, the right and left 1-byte portions must be OR-written.
      <br/>
      Hence, in formula (b) in formulas 1, the value to be multiplied by the OR-write ruled line coefficient is 2.
      <br/>
      This ruled line has no overwrite portion.
      <br/>
      Therefore, in formula (b) in formulas 1, the length of the overwrite area to be multiplied by the overwrite ruled line coefficient is 0.
      <br/>
      Although the ruled line has a length of 21 dots, the value "21" is multiplied as the height of the ruled line in formula (b) in formulas 1.
    </p>
    <p num="107">With these values, formula (b) in formulas 1 can yield the mapping time per vertically elongated ruled line shown in FIG. 9.</p>
    <p num="108">
      Note that some ruled lines have a small thickness which may fall within a 1-byte OR area.
      <br/>
      In this case, the value to be multiplied by the OR-write ruled line coefficient in formulas 1 is 1.
    </p>
    <p num="109">(b) Operation</p>
    <p num="110">The operation of the system according to the first embodiment of the present invention will be described below with reference to the flow charts.</p>
    <p num="111">Printer Driver Program</p>
    <p num="112">
      FIGS. 10 and 11 are flow charts for explaining the operation of the printer driver on the host 1.
      <br/>
      The printer driver generates character and block image printer commands described above with the aid of FIGS. 3 and 4 from document data created by an application software program used by the user, and transfers them to the printer 2.
      <br/>
      When the user instructs document printing from the application software program, the printer driver is started in the host 1.
    </p>
    <p num="113">
      At the time of starting, the driver assures a frame buffer as am image mapping area for one page on a memory of the host 1 and clears the frame buffer at the same time.
      <br/>
      Upon completion of document printing by the driver, the driver releases the memory area that has been used as the frame buffer.
    </p>
    <p num="114">
      The printer driver transfers a job start command 31 to the printer 2 in step S1, sets a value obtained by adding 1 to the number of pages of the document to be printed in a variable m in step S2, and sets 1 in a variable mp in step S3.
      <br/>
      The driver then checks in step S4 if the variable mp is smaller than the variable m. If NO in step S4, since processing of all the pages of the document is complete, the driver transfers a job end command 36 in step S5, thus ending its processing.
    </p>
    <p num="115">
      On the other hand, if YES in step S4, the driver transfers a page start command 32 to the printer 2 in step S6, saves character printing instructions and ruled line drawing instructions of the mp-th page from the application program in step S7, and sorts the saved character printing instructions and ruled line drawing instructions based on their print positions and draw start positions in step S8.
      <br/>
      Henceforth, the driver maps drawing instructions other than the character printing instructions and ruled line drawing instructions of the mp-th page from the application program onto the frame buffer on the host 1 in step S9.
      <br/>
      The drawing instructions other than the character printing instructions and ruled line drawing instructions include figure drawing instructions, image paste instruction, and the like.
    </p>
    <p num="116">
      In sorting of the character printing instructions or ruled line drawing instructions based on their printing positions or draw positions in step S8, such drawing instructions are sorted based on their draw start positions in the longitudinal direction of a paper sheet, and are then sorted based on their draw positions in the widthwise direction of the paper sheet.
      <br/>
      For example, when an A4-size paper sheet is set in the portrait position, the drawing instructions are sorted so that their printing or draw start positions are arranged in turn from the upper left position to the lower right position, and instructions having the same vertical positions are sorted in the order from the left to the right.
    </p>
    <p num="117">
      Subsequently, the driver sets 17 in a variable n in step S10.
      <br/>
      The value "17" is obtained by adding 1 to a value "16" which means that the paper size is equally divided into 16 bands in its longitudinal direction.
      <br/>
      The driver sets 1 in a variable np in step S11, and checks in step S12 if the variable np is smaller than the variable n. If NO in step S12, since it indicates that the processing for 16 bands of one page is complete, the variable mp is incremented by 1, and the flow returns to step S4 to start band output processing of the next page.
    </p>
    <p num="118">
      If YES in step S12, the driver transfers a band start command 81 to the printer 2 in step S14, and sets a paste time required for pasting a single block image onto a band in a variable T in step S15.
      <br/>
      This time assumes a fixed value that means the mapping time of a single block image, which has a size equal to that of a band and cannot be compressed, onto a band, as has been described above in the paragraphs of formulas 1.
    </p>
    <p num="119">
      In step S16, the driver sets an allowable time required for mapping a character, ruled line, and block image per band, which time is allowed by the controller unit 3, in a variable Tmax.
      <br/>
      This time is also a fixed value.
    </p>
    <p num="120">The driver picks up character printing instructions included in the np-th band from the saved printing instructions from the application program in step S17, sets a value obtained by adding 1 to the number of picked-up characters in a variable s in step S18, and sets 1 in a variable sp in step S19.</p>
    <p num="121">
      Note that the character printing instructions to be picked up in step S17 include those of characters which are included in the np-th band albeit partially.
      <br/>
      Hence, some characters are printed across two bands depending on their printing positions.
    </p>
    <p num="122">The driver checks in step S20 if the variable sp is smaller than the variable s. If NO in step S20, since transfer processing of all character data included in the np-th band is complete, the driver executes ruled line command processing in units of bands in step S21, and starts transfer processing of image data of the np-th band in step S22 and the subsequent steps.</p>
    <p num="123">The operation in step S21 will be described in detail later with reference to FIG. 12.</p>
    <p num="124">
      The driver extracts an image corresponding to the position and size of the np-th band from the frame buffer on the host in step S22, and checks in step S23 if the np-th band is a blank band.
      <br/>
      If YES in step S23, the flow jumps to step S27 without any processing.
    </p>
    <p num="125">
      If NO in step S23, the driver extracts a rectangular region actually including an image as a single block in step S24.
      <br/>
      The driver transfers a position movement command 33 indicating the paste position of the extracted block to the printer 2 in step 25, and then transfers a command sequence corresponding to a type command 34=6, i.e., block image commands 45, 46, 47, and 48, to the printer 2 in step S26.
      <br/>
      Of course, the block image data is transferred after being compressed.
    </p>
    <p num="126">The driver increments the variable np by 1 in step S27, and the flow then returns to step S12 to start the next band transfer processing.</p>
    <p num="127">
      If YES in step S20, the driver adds a 1-character mapping time of the character to be printed in the variable T in step S28, and checks in step S29 if the variable T is smaller than Tmax.
      <br/>
      If NO in step S29, the driver subtracts the 1-character mapping time added in step S28 from the variable T in step S30, and maps the character to be printed on the frame buffer in step S31.
      <br/>
      After that, the flow jumps to step S39.
    </p>
    <p num="128">Note that the 1-character mapping time added in step S28 is calculated by the formula described above in the paragraphs of formulas 1.</p>
    <p num="129">
      If YES in step S29, the driver checks in step S32 if the sp-th character is the first character to be printed in this document.
      <br/>
      If YES in step S32, the driver transfers a position movement command 33 indicating the printing position to the printer 2 in step S33, and checks in step S34 if the number of registered characters has reached a limit on the printer 2 side.
      <br/>
      If YES in step S34, the driver transfers a command sequence corresponding to a type command 34=3, i.e., character image printing only commands 43 and 44, to the printer 2 in step S36.
      <br/>
      Next, the flow advances to step S39.
    </p>
    <p num="130">
      If NO in step S34, the driver transfers a command sequence corresponding to a type command 34=2, i.e., character registration+printing commands 41, 42, 43, and 44, to the printer 2 in step S35, and the flow advances to step S39.
      <br/>
      Of course, a dot image for each character to be transferred to the printer 2 is compressed.
    </p>
    <p num="131">If NO in step S32, since it indicates that this printing instruction is the second or subsequent printing instruction of that character in the document, the driver transfers a position movement command 33 indicating the printing position to the printer 2 in step S37, and also transfers a command sequence corresponding to a type command 34=4, i.e., character code printing commands 41 and 42, to the printer 2 in step S38.</p>
    <p num="132">In step S39, the driver increments the variable sp by 1, and the flow then returns to step S20 to execute transfer processing of the next character data to the printer 2.</p>
    <p num="133">Ruled Line Command Processing Program</p>
    <p num="134">FIG. 12 is a flow chart for explaining the processing in step S21 in FIGS. 10 and 11, i.e., the operation of a ruled line command processing routine in units of bands in detail.</p>
    <p num="135">The driver picks up ruled line drawing instructions for the np-th band in step S41, sets a value obtained by adding 1 to the number of picked-up ruled lines in a variable s in step S42, and sets 1 in a variable sp in step S43.</p>
    <p num="136">
      The driver then checks in step S44 if the variable sp is smaller than the variable s. If NO in step S44, the flow returns to the main routine.
      <br/>
      If YES in step S44, the driver adds the mapping time of a single ruled line, the drawing command of which is about to be transferred to the printer 2, to the variable T in step S45.
      <br/>
      This ruled line mapping time is calculated by formulas 1 above.
    </p>
    <p num="137">
      The driver checks in step S46 if the variable T is smaller than the variable Tmax.
      <br/>
      If NO in step S46, the driver subtracts the mapping time of the single ruled line added in step S45 from the variable T in step S47, and directly maps the ruled line on the frame buffer on the host 1 in step S48.
      <br/>
      Henceforth, the flow advances to step S51.
    </p>
    <p num="138">
      On the other hand, if YES in step S46, the driver transfers a position movement command 33 in step S49, and also transfers a command sequence corresponding to a type command 34=5, i.e., ruled line commands 49 and 50 in step S50.
      <br/>
      As has been described above with the aid of FIG. 4, the ruled line commands 49 and 50 respectively represent the X- and Y-coordinates 49 and 50 of the lower right end of an elongated rectangle that defines the ruled line.
    </p>
    <p num="139">After that, the flow advances to step S51 to increment the variable sp by 1, and the flow returns to step S44 to start the processing for the next ruled line.</p>
    <p num="140">
      Note that the ruled line commands to be transferred to the printer 2 in step S50 define an elongated rectangle included in the band area.
      <br/>
      Even if a ruled line is, e.g., a long one that extends from the upper end to the lower end of a page when the driver received a ruled line instruction from the application, such ruled line is segmented into small ruled line commands in units of bands when the commands are transferred to the printer 2.
    </p>
    <p num="141">
      In step S48, the driver directly draws a ruled line on the frame buffer.
      <br/>
      In this case, the ruled line is drawn within the band area.
    </p>
    <p num="142">
      FIGS. 13 and 14 are flow charts for explaining the operation of the reception management program 51.
      <br/>
      This program starts operation immediately after the power switch of the printer 2 is turned on.
    </p>
    <p num="143">
      The program clears the contents of the reception buffer 10, the band memories 71 and 72, and the page management table 13, the registered character management table 14, and the like in the work area 12 in step S61, and directs the reception unit 6 to set the received data write limit value, i.e., the value of the limit pointer 61 described above in FIGS. 7A and 7B, at the maximum value of the reception buffer in step S62.
      <br/>
      With this setup, the reception unit 6 can fully write data up to the size of the reception buffer.
      <br/>
      Thereafter, the program checks in step S63 if the user has turned off the power switch of the printer.
      <br/>
      If YES in step S63, this program ends its processing.
    </p>
    <p num="144">
      If NO in step S63, the program checks in step S64 if reception start information is received from the reception unit 6.
      <br/>
      The reception start information indicates whether or not the reception unit 6 detects a job start command 31 from transfer data received from the host 1.
      <br/>
      If NO in step S64, the flow returns to step S63, and the program forms a loop to wait for print commands transferred from the host 1.
    </p>
    <p num="145">If YES in step S64, the program instructs the reception unit 6 to write the received data in the reception buffer 10 in step S65.</p>
    <p num="146">
      Upon detecting the job start command 31, the reception unit 6 temporarily stops reception from the host 1, and supplies detection information of the job start command 31 to the reception management program 51.
      <br/>
      Then, the unit 6 waits for a write start instruction of the received data to the reception buffer 10 from the reception management program 51.
      <br/>
      This processing corresponds to step S65.
      <br/>
      In this process, the reception unit 6 discards all the received data before detection of the job start command 31.
      <br/>
      That is, the unit 6 receives data from the host 1 but does not write them in the reception buffer 10.
    </p>
    <p num="147">
      After step S65, the program waits for 1 sec in step S66.
      <br/>
      During this 1-sec interval, the reception unit 6 writes the received data in the reception buffer 10.
      <br/>
      Subsequently, the program checks in step S67 if detection information of a page start command 32 or job end command 36 is received from the reception unit 6.
      <br/>
      If YES in step S67, the program registers the received page in the page management table 13 in step S68.
      <br/>
      At this time, the program may often register not only a single page but also a plurality of pages in the page management table 13 at the same time.
      <br/>
      That is, at the time of step S67, some page start commands and job end commands may have already been queued.
    </p>
    <p num="148">
      The program checks in step S69 if the contents of the information from the reception unit 6 include a reception message of a job end command 36.
      <br/>
      If YES in step S69, the program instructs the reception unit 6 of the end of write in step S77, and the flow then returns to step S63.
      <br/>
      Then, the program forms a loop and waits for reception of the next job.
      <br/>
      However, if NO in step S69, the flow then returns to step S66, and the program forms a loop to continue the write of the received data in the reception buffer 10.
    </p>
    <p num="149">
      Note that the reception unit 6 temporarily stops data reception upon detecting a job end command.
      <br/>
      More specifically, even when the reception unit 6 successively receives a plurality of jobs, it does not randomly write all the received data into the reception buffer 10 at one time, but writes them into the reception buffer 10 in units of jobs in response to the instructions from the reception management program 51.
    </p>
    <p num="150">
      If NO in step S67, the program checks in step S70 if information indicating that the write position of the received data has reached the designated limit value is received from the reception unit 6.
      <br/>
      If NO in step S70, the flow returns to step S66, and the program forms a loop to continue the write of the received data by the reception unit 6.
      <br/>
      If YES in step S70, the program checks in step S71 if the program can inform the reception unit 6 of a new limit value.
      <br/>
      If YES in step S71, the program informs the reception unit 6 of a new limit value in step S72.
      <br/>
      After that, the flow returns to step S66, and the program forms a loop to continue the write of the received data into the reception buffer 10 by the reception unit 6.
    </p>
    <p num="151">
      If NO in step S71, the program checks in step S73 if the received data is too large. "Too large data" implies data for one page that cannot be received even when the reception buffer 10 is fully used.
      <br/>
      If YES in step S73, the program displays an error message on a panel of the printer 2 in step S74, and clears the contents of the reception buffer 10, the band memories 71 and 72, and the page management table 13, the registered character management table 14, and the like in the work area 12 in step S75.
      <br/>
      In step S76, the program directs the reception unit 6 to set the received data write limit value at the maximum value of the reception buffer.
      <br/>
      Next, the program instructs the reception unit 6 of the end of write in step S77, and the flow returns to step S63 to form a loop, thus waiting for job start information of the next document.
      <br/>
      With this processing, all the document jobs including a page that has caused errors arising from too large data are discarded from that giant page.
    </p>
    <p num="152">
      If NO in step S73, the program waits for 1 sec in step S78.
      <br/>
      In this case, the program waits until the interpreter program 72 has interpreted many instructions, and an empty area is formed on the reception buffer 10.
      <br/>
      The flow returns to step S71 to form a loop, and the program checks in step S71 if the reception buffer 10 is ready to store data.
    </p>
    <p num="153">
      Note that "an error message is displayed on the panel of the printer 2" in step S74 in the above description, but no panel is described or explained in the block diagram of FIG. 1.
      <br/>
      However, a normal printer or the like has a liquid crystal panel, status indication lamp, or the like on the front or upper surface of the printer 2 to indicate a "printable", "error", or "out-of-paper" state.
      <br/>
      Hence, a detailed description thereof will be omitted.
    </p>
    <p num="154">Operation of Reception Unit</p>
    <p num="155">
      FIGS. 15 and 16 are flow charts for explaining the operation of the reception unit 6.
      <br/>
      The operation of the reception unit 6 has already been mentioned in FIGS. 13 and 14 upon describing the operation of the reception management program 51, but will be described in detail below using the flow charts in FIGS. 15 and 16. Although the reception unit 6 is a hardware circuit and is different from a normal program, its operation order will be described below with the aid of the flow charts.
    </p>
    <p num="156">
      The reception unit 6 starts operation simultaneously when the power switch of the printer 2 is turned on.
      <br/>
      In step S81, the unit 6 temporarily stops reception.
      <br/>
      More specifically, the reception unit 6 sets the printer 2 busy to deny data transfer from the host 1.
      <br/>
      Thereafter, in step S82, the reception unit 6 waits for an instruction of the limit value of the write position on the reception buffer 10 from the reception management program 51.
      <br/>
      Upon receiving the instruction, in step S83 the reception unit 6 is set in a state wherein it can receive data from the host 1 but discards the received data.
    </p>
    <p num="157">
      It is then checked in step S84 if the user has turned off the power switch of the printer 2.
      <br/>
      If YES in step S84, the reception unit 6 ends its operation.
      <br/>
      If NO in step S84, it is checked in step S85 if a job start command 31 is detected from the received data.
      <br/>
      If NO in step S85, the flow returns to step S84 to wait for the job start command 31 from the host 1.
    </p>
    <p num="158">
      If YES in step S85, the unit 6 temporarily stops reception in step S86, and supplies information indicating detection of the job start command 31 to the reception management program 51 in step S87.
      <br/>
      That is, reception is temporarily stopped by setting the printer 2 busy to deny data reception from the host 1.
    </p>
    <p num="159">
      In step S88, the reception unit 6 waits for a write start instruction to the reception buffer 10 from the reception management program 51.
      <br/>
      Upon detecting that instruction, the unit 6 starts and continues reception and write of data received from the host 1 onto the reception buffer 10 in step S89.
      <br/>
      It is checked in step S90 if a page start command 32 is detected.
      <br/>
      If YES in step S90, the unit 6 supplies detection information of the page start command 32 to the reception management program 51 in step S91.
    </p>
    <p num="160">
      At this time, the reception management program 51 records the page position of the received document in the page management table 13.
      <br/>
      After step S91, the flow returns to step S89 to continue the data reception and write.
    </p>
    <p num="161">
      On the other hand, if NO in step S90, it is checked in step S92 if a job end command 36 is detected.
      <br/>
      If YES in step S92, the unit 6 temporarily stops reception in step S93, and supplies detection information of the job end command 36 to the reception management program 51 in step S94.
      <br/>
      At this time, the reception management program 51 records the end of the job on the page management table 13.
    </p>
    <p num="162">
      Subsequently, in step S95, the reception unit 6 waits for an instruction that allows reception but directs to discard received data from the reception management program 51.
      <br/>
      Upon receiving the instruction, the flow returns to step S83 to wait for a job start command 31 of the next document.
    </p>
    <p num="163">
      If NO in step S92, it is checked in step S96 if the write position on the reception buffer 10 has reached the limit value.
      <br/>
      If YES in step S96, the unit 6 temporarily stops reception in step S97, and supplies information indicating that the write position on the reception buffer 10 has reached the limit value to the reception management program 51 in step S98.
    </p>
    <p num="164">
      It is then checked in step S99 if an instruction of a new limit value of the write position on the reception buffer 10 is received from the reception management program 51.
      <br/>
      If NO in step S99, it is checked in step S100 if a write end instruction is received from the reception management program 51.
      <br/>
      If NO in step S100, the flow returns to step S99 to form a loop.
      <br/>
      More specifically, the reception unit 6 waits for an instruction of a new limit value or write end instruction from the reception management program 51.
    </p>
    <p num="165">The write end instruction is received from the reception management program 51 in step S100 when the data for one page is too large and cannot be stored even if the entire area of the reception buffer 10 is used, resulting in an error.</p>
    <p num="166">
      On the other hand, if YES in step S99, the flow returns to step S89 to continue the data reception and write.
      <br/>
      If YES in step S100, the flow returns to step S83, and thereafter, the subsequent data are received but discarded until the next job start command 31 is received.
      <br/>
      That is, pages in the document after the page that has caused the error due to too large data are discarded.
    </p>
    <p num="167">Also, if NO in step S96, the flow returns to step S89 to continue the data reception and write to the reception buffer.</p>
    <p num="168">
      FIGS. 17 to 20 are flow charts for explaining the operation of the interpreter program 52.
      <br/>
      The interpreter program 52 is started upon power ON of the printer 2, and performs interpretation of print commands in the reception buffer 10 written by the reception unit 6, image formation, and paper discharging.
    </p>
    <p num="169">
      In step S111, the program checks if the user has turned off the power switch of the printer 2.
      <br/>
      If YES in step S111, this program ends its processing.
      <br/>
      If NO in step S111, the program checks in step S112 if the reception buffer 10 stores the received data for one page.
      <br/>
      If NO in step S112, the flow returns to step S111 to form a loop, thus waiting for reception of data from the host 1.
    </p>
    <p num="170">
      In step S112, the program checks the presence/absence of received page data by looking up the page management table 13.
      <br/>
      The page management table 13 is managed by the reception management program 51, as has been described above with the aid of FIGS. 13 and 14.
    </p>
    <p num="171">
      If YES in step S112, the program interprets and processes print commands in that page in turn.
      <br/>
      The program sets "17" in a variable n in step S113. "17" is a value obtained by adding "1" to the total number of segments, "16", in one page.
      <br/>
      The program then sets "1" in a variable np indicating the band number in step S114, and checks in step S115 if the variable np is smaller than the variable n. If NO in step S115, since processing for all the bands is complete, the flow jumps to step S155 to wait for completion of paper discharging.
      <br/>
      Note that the band numbers are assigned in the order of 1, 2, . . . , 15, and 16 in turn from the top of the page.
    </p>
    <p num="172">
      If YES in step S115, the program checks in step S116 if the np-th band is a blank band, i.e., a band including none of character data, ruled line data, and block image data.
      <br/>
      If YES in step S116, the program sets "0" in a variable t in step S117.
      <br/>
      The flow then jumps to step S123.
    </p>
    <p num="173">
      If NO in step S116, the program checks in step S118 if data in the np-th band include character data.
      <br/>
      If YES in step S118, in step S119 the program sets "1" in the variable t if the variable np is an odd number or sets "2" in the variable t if the variable np is an even number.
      <br/>
      After that, the flow jumps to step S123.
    </p>
    <p num="174">
      If NO in step S118, the program checks in step S120 if data in the np-th band include ruled line data.
      <br/>
      If YES in step S120, in step S119 the program sets "1" in the variable t if the variable np is an odd number or sets "2" in the variable t if the variable np is an even number.
      <br/>
      After that, the flow jumps to step S123.
    </p>
    <p num="175">
      If NO in step S120, it indicates that data in the np-th band include only a single block data.
      <br/>
      Hence, the program sets "3" in the variable t in step S122, and the flow jumps to step S123.
    </p>
    <p num="176">
      The program checks in step S123 if the variable t is 1 or 2.
      <br/>
      If YES in step S123, the program interprets character data, ruled line data, or block image data included in the np-th band from the first one, and maps them onto the band memories 71 and 72, in step S124 and the subsequent steps.
      <br/>
      In step S124, the program clears the band memory 71 if the variable t is 1 or clears the band memory 72 if the variable t is 2.
      <br/>
      The program checks in step S125 if the command to be interpreted is a position movement command 33.
      <br/>
      If YES in step S125, the program moves the cursor in step S126.
      <br/>
      The "cursor" is an imaginary pointer that indicates the mapping position of a character, ruled line, or block image on the band memory 71 or 72.
      <br/>
      More specifically, this "cursor" is assured as variables indicating X- and Y-coordinates on the work area 12.
      <br/>
      The cursor position has the upper left end of each band as an origin.
      <br/>
      The position movement command 33 sent from the driver is transferred on the basis of the relative position that assumes the upper left end of each band as an origin.
      <br/>
      That is, the position movement command 33 does not have the upper left end of a page as an origin.
    </p>
    <p num="177">After step S126, the flow jumps to step S140.</p>
    <p num="178">
      If NO in step S125, the program checks in step S127 if the command is a type command 34 of type 1.
      <br/>
      If YES in step S127, after character registration is done by the character registration program 53 in step S128, the flow jumps to step S140.
      <br/>
      The character registration will be described in detail later with reference to the flow chart in FIG. 21.
    </p>
    <p num="179">
      If NO in step S127, the program checks in step S129 if the command is a type command 34 of type 2.
      <br/>
      If YES in step S129, character registration is done in step S130, and printing proceeds in step S131.
      <br/>
      Then, the flow jumps to step S140.
      <br/>
      The character registration in step S130 is the same as that in step S128 above.
      <br/>
      The printing in step S131 is done by the printing program 54, and its detailed operation will be explained later with reference to FIG. 22.
    </p>
    <p num="180">
      If NO in step S129, the program checks in step S132 if the command is a type command 34 of type 3.
      <br/>
      If YES in step S132, after printing of only a character image in step S133, the flow jumps to step S140.
    </p>
    <p num="181">
      If NO in step S132, the program checks in step S134 if the command is a type command 34 of type 4.
      <br/>
      If YES in step S134, printing proceeds in step S135, and the flow then jumps to step S140.
      <br/>
      The printing in step S135 is the same as that in step S131 above.
    </p>
    <p num="182">
      If NO in step S134, the program checks in step S136 if the command is a type command 34 of type 5.
      <br/>
      If YES in step S136, the program maps a ruled line using the ruled line mapping circuit 131 in step S137.
      <br/>
      In this case, the program maps a ruled line on the band memory 71 if the variable t is 1 or on the band memory 72 if the variable t is 2.
      <br/>
      After that, the flow jumps to step S140.
    </p>
    <p num="183">
      If NO in step S136, the program checks in step S138 if the command is a type command 34 of type 6.
      <br/>
      If YES in step S138, in step S139 the program expands compressed image data using the image expansion circuit 16, and pastes the expanded image block to the band memory 71 or 72.
      <br/>
      In this case, the program pastes data on the band memory A 71 if the variable t is 1 or on the band memory B 72 if the variable t is 2.
      <br/>
      The flow then jumps to step S140.
    </p>
    <p num="184">
      After step S126, S128, S131, S133, S135, S137, or S139, or if NO in step S138, the flow advances to step S140.
      <br/>
      The program checks in step S140 if data for the np-th band still include uninterpreted commands.
      <br/>
      If YES in step S140, the flow returns to step S125 to interpret that uninterpreted command.
    </p>
    <p num="185">If NO in step S123 or S140, the flow jumps to step S141 in FIG. 19.</p>
    <p num="186">In steps S141 to S154, video signal output processing to the engine unit 4 is done in units of bands.</p>
    <p num="187">
      The program checks in step S141 if the variable np is 1.
      <br/>
      That is, the program checks if the band of interest is the first band of a certain page.
      <br/>
      If YES in step S141, the program supplies a paper feed start instruction to the engine unit 4 in step S142, and checks in step S143 if the engine unit 4 has detected an out-of-paper state.
      <br/>
      If YES in step S143, the program waits until the user additionally sets paper sheets in step S144, and the flow then jumps to step S147.
      <br/>
      If NO in step S143, i.e., if paper sheets are set, the flow jumps to step S147.
    </p>
    <p num="188">
      On the other hand, if it is determined in step S141 that the band of interest is not the first band, the program waits for the end of video transfer of data for the previous band in step S145.
      <br/>
      During waiting, the program always monitors in step S146 if paper jam has occurred.
      <br/>
      If paper jam has occurred, the flow jumps from step S146 to step S160 to recover from paper jam.
    </p>
    <p num="189">
      If YES in step S145, i.e., if video transfer of data for the previous band is complete, the program checks in step S147 if the variable t is 0.
      <br/>
      If YES in step S147, after the program instructs the video transfer circuit 7 to output a blank band in step S148, the flow jumps to step S154.
      <br/>
      If NO in step S147, after the program checks in step S149 if the variable t is 1.
      <br/>
      If YES in step S149, the program instructs the video transfer circuit 7 to output a video signal from the band memory 71 in step S150, the flow jumps to step S154.
    </p>
    <p num="190">
      If NO in step S149, the program checks in step S151 if the variable t is 2.
      <br/>
      If YES in step S151, after the program instructs the video transfer circuit 7 to output a video signal from the band memory 72 in step S152, the flow jumps to step S154.
    </p>
    <p num="191">If NO in step S151, the program instructs the video transfer circuit 7 to output a video signal while expanding block image data included in the np-th band data in step S153, and the flow then advances to step S154.</p>
    <p num="192">In step S154, the program increments the variable np by 1, and the flow returns to step S115 to start mapping of the next band data onto the band memory and video signal output processing.</p>
    <p num="193">
      If NO in step S115, output processing of all the bands is complete, and the program waits for completion of discharging of the printed paper sheet in step S155 and the subsequent steps.
      <br/>
      In step S155, the program checks if paper discharging is complete.
      <br/>
      If NO in step S155, the program checks in step S159 if paper jam has occurred.
      <br/>
      If NO in step S159, the flow returns to step S115 to form a loop, thus waiting for completion of paper discharging.
    </p>
    <p num="194">
      If the program determines in step S155 that paper discharging is complete, the program clears the description of that page on the page management table 13 in step S156, and checks the end of job in step S157, i.e., if all the pages of a single document have been discharged.
      <br/>
      If YES in step S157, the program clears the registered character management table 14 in step S158, and the flow returns to step S111 to wait for data reception of the next document job.
    </p>
    <p num="195">If NO in step S157, the flow also returns to step Sill to wait for data reception of the subsequent page of that document.</p>
    <p num="196">
      On the other hand, if YES in step S159, the program displays a paper jam message on the panel in step S160, and waits until the user removes the jammed paper sheet in step S161.
      <br/>
      If the paper sheet has been removed, the flow returns to step S111, and the program re-executes mapping of received page data onto the band, video output, and paper discharging, which have already been done previously.
    </p>
    <p num="197">
      Note that the program clears page registration on the page management table 13 in step S156.
      <br/>
      The reception management program 51 confirms that this area has been cleared, and then instructs the reception unit 6 of a new limit value of the received data write position.
    </p>
    <p num="198">Character Registration Program</p>
    <p num="199">FIG. 21 is a flow chart for explaining the operation of the character registration program 53 in detail.</p>
    <p num="200">
      This program is called from the interpreter program 52.
      <br/>
      In step S171, the program transfers compressed character dot image data to the registered character data area 15.
      <br/>
      After that, the program records the registration address, font number, character code, and the like in the registered character management table 14 in step S172, thus ending the processing.
    </p>
    <p num="201">Printing Program</p>
    <p num="202">
      FIG. 22 is a flow chart for explaining the operation of the printing program 54 in detail.
      <br/>
      This program is also called from the interpreter program 52.
    </p>
    <p num="203">
      In step S181, the program searches the registered character management table 14 to acquire the address, of a registered character whose font number and character code match, on the registered character data area 15.
      <br/>
      In step S182, the program expands compressed dot image data using the character expansion circuit 17.
      <br/>
      In step S183, the program checks if the character to be pasted is on a band boundary.
      <br/>
      If YES in step S183, the program executes boundary value processing of a character image and also finely adjusts the cursor position in step S184.
      <br/>
      After that, the flow advances to step S185.
      <br/>
      If NO in step S183, the flow also advances to step S185.
    </p>
    <p num="204">
      In the boundary value processing in step S184, only a portion included in the region of the current band is extracted from a character image for one character.
      <br/>
      Since only that small image portion is pasted into the band region, the cursor position must also be finely adjusted to move to a position within the band region.
    </p>
    <p num="205">
      For example, assume that a certain character extends from the upper boundary of the current band by about the upper half portion of its character box.
      <br/>
      Since the character position is indicated by the upper left vertex position of the character box, this character falls outside the band region at that time as long as the cursor position is concerned.
      <br/>
      The boundary value processing is done to extract only the lower half image of the character box that falls within the band region.
      <br/>
      As a result, the upper left vertex position of the character box of the lower half character becomes a new cursor position.
      <br/>
      This position is located on the upper boundary of the band region.
      <br/>
      This is "fine adjustment of the cursor position".
    </p>
    <p num="206">Also, when a character box is on one of the four corners of the band region, a character image portion included in the band region is similarly extracted, and the cursor position is finely adjusted.</p>
    <p num="207">
      In step S185, the program pastes the expanded character dot image at the cursor position on the band memory 71 or 72.
      <br/>
      If the variable t described above in FIGS. 17 and 18 is 1, the dot image is pasted onto the band memory 71; if the variable t is 2, the image is pasted onto the band memory 72.
      <br/>
      Finally, this program ends its processing.
    </p>
    <p num="208">Operation of Ruled Line Mapping Circuit</p>
    <p num="209">
      FIGS. 23 and 24 are flow charts for explaining the operation of the ruled line mapping circuit 131.
      <br/>
      Although the ruled line mapping circuit 131 is not a program, its operation will be described below using the flow charts.
    </p>
    <p num="210">
      Upon receiving a mapping instruction of a single ruled line from the interpreter program, the ruled line mapping circuit 131 starts its operation.
      <br/>
      The mapping instruction of a single ruled line instructs drawing of an elongated rectangle which is painted in black.
      <br/>
      The ruled line mapping circuit 131 draws that elongated rectangle in turn from the top in units of rasters, thus completing the rectangle.
      <br/>
      Note that the mapping coordinate position is instructed in units of dots on the band memory 71 or 72.
      <br/>
      Of course, the band memory 71 or 72 used for mapping is also instructed.
    </p>
    <p num="211">Upon receiving a ruled line mapping instruction, the height �dots� of the rectangle is set in a variable m in step S191. "0" is set in a variable n in step S192, the drawing start address �bytes� is set in a variable ad in step S193, and the value of the variable ad is set in a variable adl in step S194.</p>
    <p num="212">
      In step S195, an increment �bytes� for obtaining the start position of the second raster and the subsequent rasters upon drawing in units of rasters is set in a variable ads.
      <br/>
      In step S196, the length �bytes� of the ruled line portion included in one raster is set in a variable lm.
      <br/>
      In step S197, "0" is set in a variable ln.
    </p>
    <p num="213">
      It is checked in step S198 if the left end portion of the ruled line is OR-written.
      <br/>
      If NO in step S198, "0" is set in a variable tl in step S199; otherwise, "1" is set in the variable tl in step S200.
      <br/>
      Note that whether or not OR-write is to be done can be determined by checking if the mapping start position �dots� of the ruled line designated by the interpreter program 52 can be divided by 8.
      <br/>
      If the start position can be divided by 8, OR-write is not performed.
    </p>
    <p num="214">
      It is checked in step S201 if the right end portion of the ruled line is OR-written.
      <br/>
      If NO in step S201, "0" is set in a variable tr in step S202; otherwise, "1" is set in the variable tr in step S203.
      <br/>
      Note that whether or not OR-write is to be done can be determined by checking if the "mapping end position �dots� of the ruled line+1" designated by the interpreter program 52 can be divided by 8.
      <br/>
      If the "end position+1" can be divided by 8, OR-write is not performed.
    </p>
    <p num="215">It is checked in step S204 if the variable n is larger than the variable m. If NO in step S204, since it indicates that drawing for all the rasters is complete, i.e., all the portions of the ruled line have been drawn, the operation of the ruled line mapping circuit 131 ends.</p>
    <p num="216">
      If YES in step S204, it is checked in step S205 if the variable ln is smaller than the variable lm.
      <br/>
      If NO in step S205, since it indicates completion of drawing for one raster, address adjustment is done in step S206 and the subsequent steps, and drawing for the next raster is then started.
      <br/>
      That is, the variable ads is added to the variable ad in step S206, and the value of the variable ad is set in the variable adl in step S207.
      <br/>
      The variable n is incremented by 1 in step S208, and "0" is set in the variable ln in step S209.
      <br/>
      After that, the flow returns to step S204 to continue drawing for the next raster.
    </p>
    <p num="217">
      If YES in step S205, it is checked in step S210 if the variable ln is 0.
      <br/>
      More specifically, it is checked if the first byte included in one raster is to be drawn.
      <br/>
      If YES in step S210, it is checked in step S211 if the variable tl is 1.
      <br/>
      That is, it is checked if the left end portion is OR-written.
      <br/>
      If NO in step S211, the flow jumps to step S217 to execute overwrite processing.
      <br/>
      However, if YES in step S211, the flow jumps to step S214 to execute OR-write processing.
    </p>
    <p num="218">
      If NO in step S210, it is checked in step S212 if the variable ln equals a value obtained by subtracting 1 from the variable lm.
      <br/>
      That is, it is checked if the last byte included in one raster is to be drawn.
      <br/>
      If NO in step S212, the overwrite processing is done in step S217; otherwise, it is checked in step S213 if the variable tr is 1.
      <br/>
      More specifically, it is checked if the right end portion is OR-written.
      <br/>
      If YES in step S213, OR-write processing is done in step S214 and the subsequent steps; otherwise, the overwrite processing is done in step S217.
    </p>
    <p num="219">In the overwrite processing in step S217, 1-byte data=ffH indicating black is simply set at the position of address adl �bytes�.</p>
    <p num="220">
      The OR-write processing in step S214 and the subsequent steps is done as follows.
      <br/>
      In step S214, 1-byte data is read out from the position of address adl �bytes� on the band memory 71 or 72.
      <br/>
      In step S215, the OR of the readout 1-byte data and an odd 1-byte pattern at the left or right end of the ruled line is calculated.
      <br/>
      In step S216, the 1-byte OR result is written back to the position of address adl �bytes� on the band memory 71 or 72.
    </p>
    <p num="221">
      After step S216 or S217, the variable adl is incremented by 1 in step S218, and the variable ln is incremented by 1 in step S219.
      <br/>
      After that, the flow returns to step S205 to draw the next byte in one raster which is being drawn.
    </p>
    <p num="222">
      In case of a thin vertical ruled line, for example, a vertical ruled line with a thickness of 1 dot, the variable lm, i.e, the number of bytes of the ruled line for one raster, is 1 in step S196, and the variable tl indicating OR-write of the left end portion is 1.
      <br/>
      Drawing for one raster is done once in steps S210, S211 and step S214.
      <br/>
      The value of the variable tr indicating whether or not the right end portion is OR-written has no significance in terms of processing.
    </p>
    <p num="223">Operation of Video Transfer Circuit 7</p>
    <p num="224">
      The operation of the video transfer circuit 7 will be explained below with reference to FIGS. 25, 26, 27, and 28.
      <br/>
      Although the video transfer circuit 7 is a hardware circuit and is not a program, its operation will be explained with the aid of the flow charts in FIGS. 26, 27, and 28.
      <br/>
      As described above, the interpreter program 52 instructs the video transfer circuit 7 to output a video signal to the engine unit 4.
      <br/>
      The processing of the image video transfer circuit 7 includes three different processing operations, i.e., blank band processing, video signal output processing from the band A 71 or B 72, and direct expansion of compressed image data from the compressed block image data and video signal output processing of the expanded data.
    </p>
    <p num="225">
      The video transfer circuit 7 includes a line buffer (not shown) for storing expanded data for one line after compressed image data is expanded from block image data.
      <br/>
      The circuit 7 generates a video signal based on data stored in this line buffer, and outputs it to the engine unit 4.
    </p>
    <p num="226">The variables used in the flow charts in FIGS. 26, 27, and 28 will be explained below with reference to FIG. 25.</p>
    <p num="227">
      A variable h indicates the height of a band, which corresponds to the number of lines upon outputting a video signal.
      <br/>
      A variable l indicates the width of a band, which is set in units of bytes.
      <br/>
      That is, dots corresponding in number to a multiple of 8 are converted into black and white bits of a video signal, and are output.
    </p>
    <p num="228">
      A variable ha indicates the top margin until an image block appears.
      <br/>
      That is, the variable ha indicates the number of lines for which no video signal need be sent.
      <br/>
      A variable hb indicates the height of an image block, i.e., the number of lines of the block.
    </p>
    <p num="229">
      A variable la is the left margin of an image block.
      <br/>
      In this portion, no video signal need be sent.
      <br/>
      A variable lb is the width of an image block.
      <br/>
      The values of la and lb are set in units of bytes.
      <br/>
      That is, dots corresponding in number to a multiple of 8 are converted into black and white bits of a video signal, and are output.
    </p>
    <p num="230">
      The above description of the operation of the driver on the host 1 does not suggest any adjustment of the width of a band or image block to "the size in units of bytes", but such adjustment to a given unit is required to allow high-speed image output using a hardware circuit.
      <br/>
      The driver transfers print commands to the printer 2 under such conditions.
    </p>
    <p num="231">The operation of the video transfer circuit 7 will be explained below with reference to FIGS. 26, 27, and 28.</p>
    <p num="232">
      This circuit starts its operation immediately after the power switch of the printer 2 is turned on.
      <br/>
      In step S221, it is checked if the user has turned off the power switch of the printer 2.
      <br/>
      If YES in step S221, this circuits ends operation.
      <br/>
      If NO in step S221, it is checked in step S222 if the circuit has received a video signal output instruction from the interpreter program 52.
      <br/>
      If NO in step S222, the flow returns to step S221 to form a loop, thus waiting for an instruction from the interpreter program 52.
    </p>
    <p num="233">
      If YES in step S222, the height of a band, i.e., the total number of lines of the band, is set in the variable h in step S223.
      <br/>
      This value is given together with the video signal output instruction from the interpreter program 52.
      <br/>
      In step S224, it is checked if the instruction from the interpreter program 52 is a blank band output instruction.
      <br/>
      If YES in step S224, 0 is set in the variable t in step S225, and the flow jumps to step S230.
    </p>
    <p num="234">
      If NO in step S224, the value of the band width is set in the variable l in step S226.
      <br/>
      This value is also given together with the video signal output instruction from the interpreter program 52.
      <br/>
      It is then checked in step S227 if the instruction from the interpreter program 52 is a video signal output instruction from the band memory 71 or 72.
      <br/>
      If YES in step S227, 1 is set in the variable t in step S228, and the flow then jumps to step S230.
    </p>
    <p num="235">
      If NO is determined in step S227, the received instruction indicates that a single block image is present in the band, and the compressed block image data is expanded by the video transfer circuit 7 to output a video signal.
      <br/>
      In step S229, 2 is set in the variable t, the top margin of the block is set in the variable ha, the block height, i.e., the total number of lines of the block, is set in the variable hb, the left margin of the block is set in the variable la, and the width of the block is set in the variable lb.
      <br/>
      These values are also given together with the video signal output instruction from the interpreter program 52.
      <br/>
      The flow then advances to step S230.
    </p>
    <p num="236">
      In step S230, 0is set in a variable hp.
      <br/>
      The variable hp serves as a counter indicating the position of a line on the band from which a video signal is to be output.
      <br/>
      It is then checked in step S231 if the variable t is 0 or 1.
      <br/>
      If the variable t is 0 or 1, it is checked in step S232 if the circuit has received a video signal output request from the engine unit 4.
      <br/>
      If NO in step S232, the control forms a loop to wait for that request.
      <br/>
      If the video signal output request is received, it is checked in step S233 if the variable t is 1.
      <br/>
      If NO in step S233, the flow jumps to step S235.
      <br/>
      If YES in step S233, in step S234 data on the hp-th line on the band memory A 71 or B 72 is converted into a video signal, and the video signal is output to the engine unit 4.
      <br/>
      After that, the flow advances to step S235.
      <br/>
      Note that in step S234, the output instruction from the band memory 71 or B 72 is given together with the video output instruction from the interpreter program 52.
    </p>
    <p num="237">
      In step S235, the variable hp is incremented by 1.
      <br/>
      In step S236, it is checked if the variable hp is smaller than the variable h. If YES in step S236, i.e., if the band still includes lines for which video signals to be output still remain, the flow returns to step S232 to output a video signal for the next line.
    </p>
    <p num="238">
      If NO in step S236, i.e., if video signals for all the lines in the band have been output, information indicating the end of output of video signals for the instructed band is supplied to the interpreter program 52 in step S237.
      <br/>
      This information also includes completion of the blank band output processing.
      <br/>
      The flow then returns to step S221 to wait for the next video output instruction from the interpreter program 52.
    </p>
    <p num="239">
      If NO in step S231, the received instruction is a video signal output instruction from block image data in the band.
      <br/>
      In this case, in step S238 in FIG. 28, compressed image data for the first line in the block image data is expanded and the expanded data is set in the internal line buffer of the video transfer circuit 7 in step S238.
      <br/>
      Expansion of the compressed data in advance can prevent any video output timing delay upon expanding data at the time of outputting a video signal.
    </p>
    <p num="240">
      Henceforth, in step S239, the control forms a loop to wait for a video signal request from the engine unit 4.
      <br/>
      If the video signal request is received, it is checked in step S240 if the variable hp is smaller than the variable ha.
      <br/>
      If YES in step S240, the flow jumps to step S247 without any processing.
      <br/>
      This means that no video signal is sent in the top margin portion of the block.
    </p>
    <p num="241">
      If NO in step S240, it is checked in step S241 if the variable hp is smaller than the sum of the variables ha and hb.
      <br/>
      If NO in step S241, the flow jumps to step S247 without sending any video signal.
      <br/>
      This means that if the portion beneath the block in the band is blank, i.e., the bottom margin is present, no video signal is sent for that portion.
    </p>
    <p num="242">
      If YES in step S241, no video signal is sent in correspondence with the size of the variable la on the line in step S242.
      <br/>
      Next, in step S243 data on the internal line buffer of the video transfer circuit 7 is converted into a video signal in correspondence with the size of the variable lb, and the video signal is output to the engine unit 4.
      <br/>
      In step S244, the sum of 1 and the value obtained by subtracting the variable ha from the variable hp is set in a variable hbp.
    </p>
    <p num="243">
      Subsequently, it is checked in step S245 if the variable hbp is smaller than the variable hb.
      <br/>
      If NO in step S245, i.e., if video signals for all the lines in the block have been output, the flow jumps to step S247 without any processing.
    </p>
    <p num="244">
      If YES in step S245, i.e., if the block includes lines for which video signals to be output still remain, in step S246 compressed image for the hbp-th line designated by the variable hbp in the block data is expanded, and the expanded data is set in the internal line buffer of the video transfer circuit 7.
      <br/>
      The flow then advances to step S247.
    </p>
    <p num="245">In this processing as well, expansion of the compressed data in advance can prevent any video output timing delay due to expansion upon outputting a video signal.</p>
    <p num="246">In step S247, the variable hp is incremented by 1, and it is then checked in step S248 if the variable hp is smaller than the variable h. If YES in step S248, the flow returns to step S239 to continue the video signal output processing of the next line in the band.</p>
    <p num="247">If NO in step S248, after the flow jumps to step S237 in FIG. 27 to supply information indicating the end of video signal output to the interpreter program 52, the flow returns to step S221 to wait for the next video signal output instruction from the interpreter program 52.</p>
    <p num="248">
      In step S237, the interval from when the video transfer circuit 7 supplies information indicating the end of video signal output to the interpreter program 52 until the interpreter program 52 supplies the video signal output instruction for the next band to the video transfer circuit 7 must be very short.
      <br/>
      If this interval becomes a long time lag, since no video signal is output during this interval, a white stripe is formed on that line portion on the printed paper sheet.
      <br/>
      That is, a gap is formed between adjacent bands.
    </p>
    <p num="249">Consequently, the processing between adjacent bands upon paper discharging of the interpreter program 52 must be done very quickly.</p>
    <p num="250">Effects Unique to System of First Embodiment</p>
    <p num="251">
      (1) In this embodiment, since printout is done by band processing by using band memories in place of a frame buffer, the memory capacity can be reduced.
      <br/>
      Hence, the manufacturing cost of a printer apparatus can be reduced.
    </p>
    <p num="252">
      (2) In this embodiment, since the driver transfers character and ruled line data as codes and commands to the printer, the data volume can be reduced in documents that include many characters and tables.
      <br/>
      Hence, the transfer time can be shortened, and printing can be done quickly.
    </p>
    <p num="253">
      (3) In this embodiment, the driver transfers character and ruled line data as codes and commands to the printer.
      <br/>
      However, when the internal processing of the printer cannot map character or ruled line data in time, the driver transfers such character or ruled line data as image data to the printer.
      <br/>
      In this way, the numbers of characters and ruled lines are not limited in practice.
    </p>
    <p num="254">
      (4) In this embodiment, printing is started after data for one page are received in the reception buffer.
      <br/>
      For this reason, since this embodiment does not assign top priority to data transfer to the printer unlike in the "host-based printer", other application programs can be prevented from being locked on the host.
    </p>
    <p num="255">
      (5) In this embodiment, since the driver on the host transfers a rectangular block actually including an image in the band region to the printer in place of image data having a size of the band itself, the volume of data to be transferred can be reduced.
      <br/>
      Consequently, the data transfer time can be short, and the print time can also be shortened.
    </p>
    <p num="256">
      (6) In this embodiment, when a blank band is present, since the controller unit instructs the video transfer circuit not to send any video signal in place of mapping the blank portion onto the band memory and sending that video signal to the engine unit, the load on the CPU can be reduced.
      <br/>
      Also, since the need for unnecessary mapping can be obviated, the print time can be shortened.
    </p>
    <p num="257">
      (7) In this embodiment, when a band includes an image alone without any characters or ruled lines, the controller unit instructs only expansion of the compressed image data, conversion into a video signal, and output of the video signal to the engine unit in place of mapping that image onto the band memory and outputting the video signal to the engine unit.
      <br/>
      Hence, the load on the CPU can be reduced.
      <br/>
      Also, since the need for unnecessary mapping can be obviated, the print time can be shortened.
    </p>
    <p num="258">Second Embodiment</p>
    <p num="259">
      The printer in the first embodiment has band memories, and prints out images mapped on the band memories in units of bands by alternately mapping and outputting images onto and from the two band memories.
      <br/>
      The printer may have a frame memory in place of these band memories to realize the same printer as in the first embodiment.
    </p>
    <p num="260">
      When the printer has a frame memory, the engine starts printing after mapping of all character, ruled line, and block image data for one page onto the memory has been finished.
      <br/>
      For this reason, whether or not image mapping on one band memory is complete need not be checked while a video signal is output from the other band memory.
      <br/>
      In other words, the limits of the numbers of characters and ruled lines within a band need not be considered.
      <br/>
      Hence, the driver need not have any limit check function.
    </p>
    <p num="261">With this arrangement, since the time required for image formation need not be checked, the print time can be shortened accordingly as compared to the printer of the first embodiment.</p>
    <p num="262">Third Embodiment</p>
    <p num="263">
      The first embodiment uses the ruled line mapping circuit as a hardware circuit in mapping of ruled line data.
      <br/>
      Instead, mapping may be done by software.
      <br/>
      The details of the operation are the same as those described above with reference to the flow charts in FIGS. 23 and 24.
    </p>
    <p num="264">Fourth Embodiment</p>
    <p num="265">
      In the printer of each of the first to third embodiments, the transfer amount of image data can be further reduced in such a manner that the number of bands and band height can be variably set, and when image data include repetitive image patterns in units of bands, the driver sends a band repeat command to the printer.
      <br/>
      The printing system of the fourth embodiment will be described below with reference to the drawings.
    </p>
    <p num="266">
      The first embodiment is premised on that one page is equally divided into 16 bands.
      <br/>
      In the third embodiment, as the major differences from the first embodiment, the number of bands and the height of each band can be variably set, and when image data include repetitive image patterns in units of bands, the driver sends a repetition command of a band to the printer, thereby reducing the transfer amount of image data.
    </p>
    <p num="267">However, since the constituting elements, program operations, and the like of this embodiment are nearly the same as those in the first embodiment, the differences will be mainly described below.</p>
    <p num="268">
      Since the block arrangement is the same as that in FIG. 1 of the first embodiment, a detailed description thereof will be omitted.
      <br/>
      In this embodiment, the band height is arbitrarily set within the band height of the band memory 71 or 72 allocated on the RAM 9 in FIG. 1.
    </p>
    <p num="269">FIGS. 29A and 29B are explanatory views of the principle of this embodiment.</p>
    <p num="270">The driver on the host 1 divides a document to be printed into character, ruled line, and block image data, and transfers them to the printer 2 like in the first embodiment.</p>
    <p num="271">
      In this embodiment, the driver performs pattern recognition in units of bands in an image for one page mapped on the frame buffer on the host 1 before it sends image data to the printer 2, and checks if bands include repetitive patterns.
      <br/>
      In this case, the band height can be arbitrarily changed.
      <br/>
      As for the pattern recognition technique, since various methods are known to those who are skilled in the art, a detailed description thereof will be omitted.
    </p>
    <p num="272">
      In FIG. 29A, a band set of a band of image A including a wavy figure, a blank band, and a band of image B including a chain-like figure repetitively appears three times.
      <br/>
      In such case, in the system of this embodiment, as for the bands of images A and B that occur for the second and subsequent times, print commands indicating that these band data are the same as the band data of images A and B that occurred first are transferred to the printer 2.
      <br/>
      The processing of a character data portion is the same as that in the first embodiment.
    </p>
    <p num="273">
      The example shown in FIG. 29A is rarely encountered in actual documents, but an example of repetitive image bands in FIG. 30A is likely to frequently appear in actual documents.
      <br/>
      However, in this case, all the ruled lines are assumed to be processed as images.
    </p>
    <p num="274">
      In this example, examining only a ruled line image portion, the image can be divided into the first to sixth bands, as shown in FIG. 30A. Image data of the first, second, and sixth bands are directly transferred to the printer 2 as print commands, but it is determined that the third, fourth, and fifth bands include repetitive images of that in the second band, and a print command instructing "repetition of the second band" is transferred to the printer 2.
      <br/>
      In case of tables or the like, ruled line data can be included in repetitive patterns.
      <br/>
      Since the identity of patterns of ruled line data between bands can be checked more easily than an image, this embodiment is very effective in consideration of the expected frequency of such tables.
    </p>
    <p num="275">
      FIG. 31 is an explanatory view of the command structure of character and image data sent from the host 1 to the printer 2.
      <br/>
      The command structure shown in FIG. 31 is substantially the same as that shown in FIG. 3 of the first embodiment, except that a band height command 82 and repeat band number 83 are added after the band start command 81.
    </p>
    <p num="276">
      An arbitrary number of band start commands 81 repetitively appear per page.
      <br/>
      The band height command 82 is also arbitrarily set in units of bands within the band height of the band memory 71 or 72.
      <br/>
      The repeat band number 83 indicates the order of bands included in that page, and 1 represents the head band of that page.
      <br/>
      When the band does not include any repetitive image, i.e., includes a new image, -1 is set in the band number.
    </p>
    <p num="277">Driver Program</p>
    <p num="278">The printer driver on the host executes processing in the sequence shown in FIGS. 32 and 33. The same reference numerals denote steps common to those in FIG. 10, and a detailed description thereof will be omitted.</p>
    <p num="279">
      In FIGS. 32 and 33, immediately after step S9, the driver checks if data on the frame buffer include repetitive patterns in units of bands.
      <br/>
      If such repetitive patterns are not found, the driver sets the band numbers and band height used upon equally segmenting one page into 16 bands, and -1 as a repeat band number in the corresponding columns in a band management table.
      <br/>
      On the other hand, if repetitive patterns are found, the driver sets the band numbers, band heights, and repeat band numbers in the band management table allocated on the host (step S321).
    </p>
    <p num="280">
      Immediately after step S14, the driver transmits a band height command indicating the segmented band height and a repeat band number command for the band to be transmitted (step S322).
      <br/>
      If no repetitive bands are found, -1 is set in the repeat band number command.
    </p>
    <p num="281">
      Furthermore, immediately after step S21, it is tested if the band includes a repetitive image (step S323).
      <br/>
      If YES in step S323, since there is no actual data, the flow jumps to step S27.
    </p>
    <p num="282">
      On the controller unit 3 side, the names of the programs installed in the ROM 8 of the controller unit 3 are the same as those shown in FIG. 6 of the first embodiment.
      <br/>
      The operations of the programs are substantially the same as those in the first embodiment except for the interpreter program 52.
      <br/>
      Since the operation of the reception unit 6 is the same as that in the first embodiment and the operation of the video transfer circuit 7 is the same as that in the second embodiment, a detailed description thereof will be omitted.
    </p>
    <p num="283">Sequence of Interpreter Program</p>
    <p num="284">
      FIGS. 34 to 37 are flow charts for explaining the operation of the interpreter program 52.
      <br/>
      The interpreter program 52 is started upon power ON of the printer 2, and performs interpretation of print commands in the reception buffer 10 written by the reception unit 6, image formation, and paper discharging.
      <br/>
      This sequence is nearly the same as that shown in FIGS. 17 to 20, and only differences will be explained.
      <br/>
      FIGS. 35 and 37 are the same as FIGS. 18 and 20, but are presented since they are parts of the sequence.
    </p>
    <p num="285">
      In FIG. 34, immediately after step S114, the program sets the band height in a variable bh (step S341).
      <br/>
      Immediately after step S124, the program checks if the repeat band number is -1 (step S342).
      <br/>
      If NO in step S342, since the band of interest is a repeat band, the program pastes, using the image expansion circuit 16, the block image of the designated band number on the band memory 71 if t=1 or the band memory 72 if t=2 (step S343).
      <br/>
      In this way, the image of the band designated as a repeat band can be printed out via the band memory.
    </p>
    <p num="286">
      Furthermore, in FIG. 36, immediately after step S151, the program checks if the repeat band number is -1 (step S344).
      <br/>
      If NO in step S344, i.e., if the band of interest is designated as a repeat band, the program instructs the video transfer circuit 7 to output the block image of that band as a video signal (step S345); otherwise, the program instructs the video transfer circuit 7 to output the block image of the np-th band as a video signal (step S346).
      <br/>
      In this fashion, the band including only an image can be output without using the band memory.
    </p>
    <p num="287">Effect Unique to Fourth Embodiment</p>
    <p num="288">
      (1) In this embodiment, the driver analyzes the image pattern on the frame buffer, and if it detects that identical patterns repetitively appear in units of bands, the driver sends only a repetition command as data of such repetitive band portions.
      <br/>
      Hence, the volume of image data to be transferred can be reduced.
      <br/>
      Also, the transfer time can be shortened.
      <br/>
      Furthermore, the memory consumption of the reception buffer on the printer side can be reduced.
    </p>
    <p num="289">Fifth Embodiment</p>
    <p num="290">The fifth embodiment will be described below with the aid of the drawings.</p>
    <p num="291">System Arrangement</p>
    <p num="292">In the fifth embodiment, when a large-size image that cannot be stored in the reception buffer of the printer is to be printed, the reception buffer is divided into some portions, and an image portion in one divided portion is output while another portion receives and stores another image portion, in place of the printing control method described in the first to fourth embodiments, thereby printing a large-size image by repeating the above-mentioned operations.</p>
    <p num="293">
      More specifically, all data in a document are processed as image data, most of the RAM area of the printer is used as a reception buffer, and data for a large-size image page on the reception buffer is directly subjected to image expansion and video transfer to the engine unit in the video transfer circuit 7, thus printing a document including a large-size image page.
      <br/>
      Since the constituting elements, program operations, and the like of this embodiment are substantially the same as those in the first embodiment, the differences will be mainly elaborated upon.
    </p>
    <p num="294">
      In the following description, the printing mode in the first embodiment will be referred to as a "synthesis mode".
      <br/>
      This is because character, ruled line, and image data are separately processed on the host, and character, ruled line, and image data are synthesized by ORing them and the OR data is output on the printer.
      <br/>
      A mode for outputting a giant image will be referred to as a "simplified synchronization mode" hereinafter.
      <br/>
      This is because when image data for one page has too large a size, it is printed by passively synchronously repeating data transfer in units of bands from the host and feeding of a paper sheet in the printer as data are received.
    </p>
    <p num="295">
      FIGS. 38A, 38B, and 39 are views for explaining the principle of the simplified synchronization mode.
      <br/>
      Assume that the printer of this embodiment comprises a 2 MB memory as the reception buffer.
      <br/>
      FIG. 38A shows a large-size image which exceeds the reception buffer capacity even if it is compressed.
      <br/>
      The printer driver on the host breaks up such large-size image into a single 1 MB block and 100 KB blocks, and sends these blocks to the printer, as shown in FIG. 38B.
    </p>
    <p num="296">
      FIG. 39 shows a state wherein the printer receives and reconstructs the block images sent as shown in FIG. 38B, and prints the image.
      <br/>
      The block images received from the host are compressed and stored in the RAM 9 in units of blocks.
      <br/>
      The printer expands these block images one by one, and prints out the expanded data.
      <br/>
      Since the second and subsequent block images are smaller than the first block and can be expanded quickly, the expansion time does not produce any overrun.
      <br/>
      In this embodiment, the above-mentioned "synthesis mode" and "simplified synchronization mode" are combined.
    </p>
    <p num="297">
      More specifically, the host checks, prior to generation of print commands, if the printer is likely to overrun.
      <br/>
      If it is determined that the printer is likely to overrun, the host maps the whole page as image data.
      <br/>
      This process is as has already been described earlier.
      <br/>
      In this case, the host checks the size of the generated image data, and uses the above-mentioned simplified synchronization mode if the size exceeds that of the reception buffer of the printer.
      <br/>
      If the printer is unlikely to produce any overrun, the host sends data to the printer by the method described in the first to fourth embodiments.
    </p>
    <p num="298">With this method, the effects of the first to fourth embodiments can be obtained, and one-page data having too large a size can be printed.</p>
    <p num="299">Other Embodiments</p>
    <p num="300">Note that the present invention may be applied to either a system constituted by a plurality of equipments (e.g., a host computer, an interface device, a reader, a printer, and the like), or an apparatus consisting of a single equipment (e.g., a copying machine, a facsimile apparatus, or the like).</p>
    <p num="301">The objects of the present invention are also achieved by supplying a storage medium, which records a program code of a software program that can realize the functions of the above-mentioned embodiments to the system or apparatus, and reading out and executing the program code stored in the storage medium by a computer (or a CPU or MPU) of the system or apparatus.</p>
    <p num="302">In this case, the program code itself read out from the storage medium realizes the functions of the above-mentioned embodiments, and the storage medium which stores the program code constitutes the present invention.</p>
    <p num="303">As the storage medium for supplying the program code, for example, a floppy disk, hard disk, optical disk, magneto-optical disk, CD-ROM, CD-R, magnetic tape, nonvolatile memory card, ROM, and the like may be used.</p>
    <p num="304">The functions of the above-mentioned embodiments may be realized not only by executing the readout program code by the computer but also by some or all of actual processing operations executed by an OS (operating system) running on the computer on the basis of an instruction of the program code.</p>
    <p num="305">Furthermore, the functions of the above-mentioned embodiments may be realized by some or all of actual processing operations executed by a CPU or the like arranged in a function extension board or a function extension unit, which is inserted in or connected to the computer, after the program code read out from the storage medium is written in a memory of the extension board or unit.</p>
    <p num="306">
      As described above, according to the present invention, upon instructing document printing, the host breaks up the document into character data, ruled line data, and other data portions, and processes the other data portions as images.
      <br/>
      As for the character portions, when the host encounters the first occurrence of a certain character, it registers the character image of that character in the printer, and instructs the printer of character printing for the second and subsequent occurrences of that character.
      <br/>
      In this manner, most of the character data portions can be sent as character codes.
      <br/>
      On the other hand, the host transfers the ruled line data portions as ruled line commands.
    </p>
    <p num="307">
      With this processing, according to the present invention, since most of character portions are processed using character codes, the character mapping time on the host can be shortened, and its data volume is small.
      <br/>
      Similarly, since the ruled line portions are processed using ruled line commands, the host does not require any ruled line mapping time, and the data volume is also small.
      <br/>
      Hence, not only document data but also table data can be output at high speed.
    </p>
    <p num="308">When band memories are arranged in place of the frame memory, the required memory capacity can be reduced.</p>
    <p num="309">
      In consideration of a case wherein mapping of a large number of characters or ruled lines onto the band memory cannot be done in time, the number of characters or ruled lines per band is limited upon generating printer commands, and characters or ruled lines that exceed the limit are processed as image data.
      <br/>
      Hence, normal document or table data can be output at high speed, and even a document including a very large number of characters or ruled lines can be printed out without any errors.
    </p>
    <p num="310">As many apparently widely different embodiments of the present invention can be made without departing from the spirit and scope thereof, it is to be understood that the invention is not limited to the specific embodiments thereof except as defined in the appended claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>An information processing apparatus comprising:</claim-text>
      <claim-text>a pick-up unit for detecting and picking up a ruled line drawing instruction in an area;</claim-text>
      <claim-text>and a determination unit for, in accordance with the ruled line drawing instruction picked up by said picking-up unit, determining whether a ruled line command corresponding to the ruled line drawing instruction is to be generated and transferred to a printer, or whether an image corresponding to the ruled line drawing instruction is to be generated and transferred to the printer.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The apparatus according to claim 1, wherein said determination unit determines whether or not a time required for mapping a single ruled line is shorter than a predetermined value, such that, in a case where the time required for mapping the single ruled line is shorter than the predetermined value, said determination unit generates the ruled line command corresponding to the ruled line drawing instruction and transmits the command to the printer, and, in a case where the time required for mapping the single ruled line is not shorter than the predetermined value, said determination unit generates the image corresponding to the ruled line drawing instruction and transmits the image to the printer.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The apparatus according to claim 2, wherein the area in which the ruled line drawing instruction is picked up includes a band area.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The apparatus according to claim 2, further comprising: a transmitter for, in a case where it is determined by said determination unit that an image corresponding to the ruled line drawing instruction is to be generated and transferred to the printer, generating an image corresponding to the ruled line drawing instruction in a buffer, extracting a rectangular region that includes an image, and transmitting the image included in the extracted region to the printer.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. An information processing method comprising: a pick-up step of detecting and picking up a ruled line drawing instruction in an area;</claim-text>
      <claim-text>and a determination step of determining whether a ruled line command corresponding to the ruled line drawing instruction is to be generated and transferred to a printer, or whether an image corresponding to the ruled line drawing instruction is to be generated and transferred to the printer, in accordance with the ruled line drawing instruction picked up in said pick-up step.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method according to claim 5, wherein said determination step determines whether or not a time required for mapping a single ruled line is shorter than a predetermined value, such that, in a case where the time required for mapping the single ruled line is shorter than the predetermined value, said determination step generates the ruled line command corresponding to the ruled line drawing instruction and transmits the command to the printer, and, in a case where the time required for mapping the single ruled line is not shorter than the predetermined value, said determination step generates the image corresponding to the ruled line drawing instruction and transmits the image to the printer.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method according to claim 6, wherein the area in which the ruled line drawing instruction is picked up includes a band area.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method according to claims 6, further comprising: a transmission step of, in a case where it is determined in said determination step that an image corresponding to the ruled line drawing instruction is to be generated and transferred to the printer, generating an image corresponding to the ruled line drawing instruction in a buffer, extracting a rectangular region that includes an image, and transmitting the image included in the extracted region to the printer.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A computer-readable recording medium in which a computer program for performing an information processing method is stored, the program comprising: (a) computer program code for a pick-up step of detecting and picking up a ruled line drawing instruction in an area;</claim-text>
      <claim-text>and (b) computer program code for a determination step of, in accordance with the ruled line drawing instruction picked up in the pick-up step, determining whether a ruled line command corresponding to the ruled line drawing instruction is to be generated and transferred to a printer, or whether an image corresponding to the ruled line drawing instruction is to be generated and transferred to the printer.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The medium according to claim 9, wherein the determination step includes determining whether or not a time required for mapping a single ruled line is shorter than a predetermined value, such that, in a case where the time required for mapping the single ruled line is shorter than the predetermined value, the ruled line command corresponding to the ruled line drawing instruction is generated and is transmitted to the printer, and, in a case where the time required for mapping the single ruled line is not smaller than the predetermined value, the image corresponding to the ruled line drawing instruction is generated and is transmitted to the printer.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The medium according to claim 10, wherein the area in which the ruled line drawing instruction is picked up includes a band area.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The medium according to claim 10, wherein the program further comprises: (c) computer program code for a transmission step of, in a case where it is determined in the determination step that an image corresponding to the ruled line drawing instruction is to be generated and transferred to the printer, generating an image corresponding to the ruled line drawing instruction in a buffer, extracting a rectangular region that includes an image, and transmitting the image included in the extracted region to the printer.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A computer program product for implementing an information processing method, comprising: (a) computer program code for a pick-up step of detecting and picking up a ruled line drawing instruction in an area;</claim-text>
      <claim-text>and (b) computer program code for a determination step of, in accordance with the ruled line drawing instruction picked up in the pick-up step, determining whether a ruled line command corresponding to the ruled line drawing instruction is to be generated and transferred to a printer, or whether an image corresponding to the ruled line drawing instruction is to be generated and transferred to the printer.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The computer program product according to claim 13, wherein the determination step includes determining whether or not a time required for mapping a single ruled line is shorter than a predetermined value, such that, in a case where the time required for mapping the single ruled line is shorter than the predetermined value, the ruled line command corresponding to the ruled line drawing instruction is generated and is transmitted to the printer, and, in a case where the time required for mapping the single ruled line is not shorter than the predetermined value, the image corresponding to the ruled line drawing instruction is generated and is transmitted to the printer.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The computer program product according to claim 14, wherein the area in which the ruled line drawing instruction is picked up includes a band area.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The computer program product according to claim 14, further comprising: (c) computer program code for a transmission step of, in a case where it is determined in the determination step that an image corresponding to the ruled line drawing instruction is to be generated and transferred to the printer, generating an image corresponding to the ruled line drawing instruction in a buffer, extracting a rectangular region that includes an image, and transmitting the image included in the extracted region to the printer.</claim-text>
    </claim>
  </claims>
</questel-patent-document>