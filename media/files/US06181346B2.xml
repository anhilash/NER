<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181346B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181346</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181346</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="13805937" extended-family-id="21114830">
      <document-id>
        <country>US</country>
        <doc-number>08820145</doc-number>
        <kind>A</kind>
        <date>19970319</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08820145</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>21652802</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>JP</country>
        <doc-number>8356196</doc-number>
        <kind>A</kind>
        <date>19960405</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1996JP-0083561</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06T  11/40        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>11</main-group>
        <subgroup>40</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   3/153       20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>153</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06T   1/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>1</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06T   1/20        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>1</main-group>
        <subgroup>20</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>G06T  15/04        20110101ALI20101213RHJP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>15</main-group>
        <subgroup>04</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20101213</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>345582000</text>
        <class>345</class>
        <subclass>582000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>345503000</text>
        <class>345</class>
        <subclass>503000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>345506000</text>
        <class>345</class>
        <subclass>506000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06T-011/40</text>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>11</main-group>
        <subgroup>40</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06T-011/40</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>11</main-group>
        <subgroup>40</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>9</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>7</number-of-drawing-sheets>
      <number-of-figures>9</number-of-figures>
      <image-key data-format="questel">US6181346</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Graphics system</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>SAKAIBARA TORU, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5485559</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5485559</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>WATKINS GARY S</text>
          <document-id>
            <country>US</country>
            <doc-number>5821944</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5821944</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>RENTSCHLER ERIC M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5821950</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5821950</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>ALCORN BYRON A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5886706</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5886706</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>NAGY MICHAEL B</text>
          <document-id>
            <country>US</country>
            <doc-number>5943058</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5943058</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>TOELLE MICHAEL A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5949428</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5949428</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Ono, Makoto</name>
            <address>
              <address-1>Yokohama, JP</address-1>
              <city>Yokohama</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Takatsu, Yoshihisa</name>
            <address>
              <address-1>Yamato, JP</address-1>
              <city>Yamato</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Ohtani, Munetaka</name>
            <address>
              <address-1>Yamato, JP</address-1>
              <city>Yamato</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Moriyama, Takao</name>
            <address>
              <address-1>Yokohama, JP</address-1>
              <city>Yokohama</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Sbrollini, Jay P.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Brier, Jeffery</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      This graphics system has a geometric sub-system that does not have to take into consideration memory resources for the raster sub-system of the graphics system.
      <br/>
      The graphics system sequentially receives from a host computer system data sets that define a graphic object and downloads texture data for graphics from the host computer system, so that geometric processing and rasterization are performed on the graphic object for display on a computer screen.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">
      The present invention relates to a graphics system for displaying computer graphics (CG) on a display screen.
      <br/>
      More particularly, it relates to a graphics system that includes a geometric sub-system for dividing a graphic object into multiple polygons and for performing geometric processing only on the vertexes of the polygons.
      <br/>
      Furthermore, it relates to such a graphic system that also includes a raster sub-system for interpolating image data for pixels in the polygons.
      <br/>
      Specifically, the present invention pertains to a graphics system as described above in which the geometric sub-system performs parallel processing.
    </p>
    <heading>DESCRIPTION OF THE BACKGROUND</heading>
    <p num="2">
      The generation and processing of graphic images using computers (so-called "computer graphics (CG)") is an example of the expansion in the use of computers.
      <br/>
      Recently, as the capabilities of computer displays have been improved, and their graphic functions enhanced, the focus has been placed on "3D Graphics", whereby a three-dimensional object is rendered on a two-dimensional medium for display on a screen.
      <br/>
      With the 3D graphics, an optical phenomenon of a 3D object when it is irradiated by a light source is provided by using a mathematical model, and based on the model, the surface of the object is described by using shading or perspective, or a pattern is used to represent the surface, for the display of a more realistic and colorful 3D image.
      <br/>
      The 3D graphic techniques have been used more frequently for CAD/CAM in science, in engineering, in manufacturing, and in other application fields, and for the development of various software applications.
    </p>
    <p num="3">Graphics System</p>
    <p num="4">The graphics system comprises a "geometric sub-system", generally as a front-end, and a "raster sub-system", generally as a back-end.</p>
    <p num="5">
      The geometric sub-system regards a graphic object as a set of polygons (normally, triangles), and performs schematic geometric processing for each polygon.
      <br/>
      The geometric processing performed by the geometric sub-system determines the position of an object on a computer screen.
      <br/>
      More specifically, geometric calculations, such as coordinate transformation, clipping, and light source calculation, are performed only on the coordinates of the individual vertexes defining the polygons.
      <br/>
      Coordinate transformation is a process for transforming the coordinates for the vertexes of a given polygon in accordance with the position of a visual point.
      <br/>
      Clipping is a process for removing portions of a polygon that lie outside the limits of a computer screen.
      <br/>
      Light source calculation is a process for calculating a luminance at each vertex based on its positional relationship with a light source.
    </p>
    <p num="6">
      The raster sub-system interpolates image parameters for all the pixels in a polygon by using image parameters acquired for the vertexes of the polygon.
      <br/>
      The image parameters are color data indicated by RGB, and a Z value representing the distance in the direction of the depth.
      <br/>
      In the latest highly colorful 3D graphic processing, fog "f" to represent distance and texture t to represent a material and a pattern on the surface of an object are included as image parameters, which are also calculated for each pixel.
      <br/>
      The polygon is represented in two dimensions and an object without a texture is merely an inorganic image obtained by shifting each plane in parallel or rotating it in accordance with a visual point.
      <br/>
      Therefore, the processing for putting texture on the surface of an object (texture mapping) is very important for the quality and the realism of an object.
      <br/>
      However, the amount of bit mapped texture data required for surface patterns is generally enormous, and a huge memory resource is thus required.
    </p>
    <p num="7">Parallel processing for graphics system</p>
    <p num="8">
      Since the capabilities of signal processing are limited when a large amount of calculations must be performed in real time, a multiprocessing technique that performs parallel processing using a plurality of node processors has been used.
      <br/>
      Since 3D graphic processing requires an enormous amount of calculations and data for image generation, parallel processing is used for enhancement of functions and performances.
    </p>
    <p num="9">
      In the above described graphics system, while the geometric sub-system performs calculations for each polygon, the raster sub-system performs calculations for each pixel in a polygon.
      <br/>
      In other words, the processing unit at the front-end and the back-end differ from each other.
      <br/>
      The sub-systems at the front-end and at the back-end frequently have separate inherent parallel structures to independently provide improved functions and performances.
      <br/>
      A system design in which the sub-systems adopt different parallel structures is described in, for example, Chapter 18 of "Computer Graphics" (J. D. Foley: second edition, Addison-Wesley).
    </p>
    <p num="10">
      FIG. 6 is a schematic diagram illustrating a hardware arrangement for a graphics system that comprises two different parallel structures.
      <br/>
      The graphics system includes a dispatch processor 10; a plurality of geometry node processors 20; a merge processor 30; a plurality of raster node processors 40; and a frame buffer 50.
    </p>
    <p num="11">
      The dispatch processor 10 distributes drawing instructions sets for the geometric processing of a 3D object to each of the geometry node processors 20.
      <br/>
      More specifically, the dispatch processor 10 is connected to another host computer system (not shown) via a bus.
      <br/>
      On the bus, the dispatch processor 10 sequentially receives a set of drawing instructions (also called a "data set"), and distributes the data sets so as to equalize the work loads imposed on the respective node processors 20.
      <br/>
      In other words, an data set is the unit to be distributed to the node processors 20.
      <br/>
      A data set is generally a set of data for defining one polygon (or a part of a polygon) and includes coordinate values for the vertexes, and attribute information, such as line widths, line types and texture IDs for specifying texture.
    </p>
    <p num="12">
      The geometry node processors 20, which constitute the core of the geometric sub-system, perform parallel geometric calculations for a 3D object.
      <br/>
      Each of the geometric node processors 20 performs coordinate transformation, clipping, and light source calculation for a received data set, and outputs the results to the merge processor 30.
    </p>
    <p num="13">
      The merge processor 30 merges the data sets transmitted from the geometry node processors 20, and imposes on the succeeding raster sub-system the rasterization of the data sets.
      <br/>
      The raster sub-system shown in FIG. 6 has a parallel structure including a plurality of raster node processors 40.
      <br/>
      The merge processor 30 also serves as a dispatch processor for the raster sub-system.
      <br/>
      That is, when the merge processor 30 receives a data set that has been geometrically processed, it distributes, to the raster node processors 40, the pixels in the screen regions defined by the data sets.
    </p>
    <p num="14">
      The raster node processors 40, which constitute the core of the raster sub-system, rasterize the distributed pixels.
      <br/>
      Since data sets are distributed to the raster node processors 40 as pixel units, which are smaller than data set units, more raster node processors 40 are provided than the geometry node processors 20.
      <br/>
      The raster node processors 40 employ image parameters (color data, such as RGB and fog) that have been acquired for each vertex to interpolate the image parameters for distributed pixels and to put texture image (texture mapping).
    </p>
    <p num="15">
      The results obtained by the raster node processors 40 are appropriately written to corresponding addresses in the frame buffer 50.
      <br/>
      The drawing information is read from the frame buffer 50 and is displayed on an attached display 60.
    </p>
    <p num="16">Problems with parallel graphics system</p>
    <p num="17">In a parallel geometric sub-system, several problems have arisen at the front-end.</p>
    <p num="18">
      One of these problems is the maintenance of the drawing order for drawing data sets.
      <br/>
      The problem concerns serialization.
      <br/>
      The data sets for geometric processing for a 3D object are distributed to the geometry node processors 20 as polygon units.
      <br/>
      However, the geometry node processors 20 do not always terminate their processing in the order in which the data sets were distributed.
      <br/>
      Data sets are not so generated that the work loads imposed on the geometry node processors 20 are equalized, and the time required for the geometric processing of the individual data sets is generally not the same.
      <br/>
      When, for example, data sets are distributed in order as polygons -1, -2 and -3, the geometry node processors 20 do not always terminate their processing so as to maintain that set order.
      <br/>
      The order in which the data sets are output may be different, such as polygons -2, -1 and -3.
    </p>
    <p num="19">
      So long as the data sets are related only to 3D graphics, no problems concerning serialization occur.
      <br/>
      Since the data sets for a 3D object include a Z value, hidden line removal is performed to prevent the view of a polygon in the front from being obscured by a polygon at the back.
      <br/>
      In other words, so long as only 3D graphics are used to construct a display screen, the drawing is arbitrarily performed, regardless of the drawing order.
      <br/>
      However, since a two-dimensional graphic, such as a menu window, does not include a Z value, the portion of the menu window that a later drawn polygon overlaps may be covered.
      <br/>
      Many conventional application programs distribute data sets for two-dimensional graphics last, so that the view of them will not be obscured.
      <br/>
      To generate a graphic shown in FIG. 7, for example, data sets are supplied in the order shown in FIG. 8.
      <br/>
      It is therefore necessary for the graphics system to maintain the data set order while transmitting the data sets to the raster sub-system, so as to maintain compatibility with conventional application programs.
    </p>
    <p num="20">
      The problem concerning the drawing order is resolved relatively easily in the system shown in FIG. 6, by adding to the merge processor 30 a function for serializing the data sets, for example.
      <br/>
      In accordance with the example in FIG. 8, even though the data set for the 2D menu was geometrically processed earlier than the data set for the polygon -3, the data set for polygon -3 is always transmitted to the raster sub-system first.
      <br/>
      Accordingly, even when the periods required for geometric processing of data sets are varied, and the data sets are transmitted to the merge processor 30 in a different order, the data sets are serialized by the merge processor 30 when transmitted to the raster sub-system.
      <br/>
      As a result, the desired display shown in FIG. 7 can be obtained.
    </p>
    <p num="21">
      Another problem with the parallel geometric sub-system involves the management of the memory resource for a raster sub-system.
      <br/>
      The raster sub-system also performs texture mapping in a screen region defined by a data set.
      <br/>
      In general, all of the texture data required for 3D graphics are held by a host computer system to which a graphics system is adapted.
      <br/>
      Generally, the raster sub-system includes a memory resource (not shown) that is adequate for the temporary storage of work data, and requested texture data are downloaded to the memory resource.
    </p>
    <p num="22">
      The size of the texture data is usually large.
      <br/>
      If the raster sub-system prepares a memory resource large enough to store texture data of all types, i.e., all the texture data stored in the host computer system, a huge memory capacity will be required and memory costs will be increased.
      <br/>
      And if unnecessary texture data are stored in the raster sub-system, it will not be used efficiently and the benefits provided by the memory resource will be wasted.
    </p>
    <p num="23">
      When only a part of the texture data is stored in the memory resource of the raster sub-system, a problem arises concerning which operating unit should manage the memory resource.
      <br/>
      The size of the texture data is large, as mentioned above, and downloading the texture data from the host computer system takes time.
      <br/>
      If the raster sub-system is in charge of managing the memory resource, for example, it is inevitable that its performance will be impaired.
      <br/>
      This is because when the raster node processors 40 are aware of the absence of desired texture data and they download the data, the time that elapses before rasterization is begun will be extended.
    </p>
    <p num="24">
      In addition, it is also difficult for the geometry node processors to manage the memory resource for the raster sub-system.
      <br/>
      Since the geometry node processors 20 do not know which data sets are being handled by other parallel processing geometry node processors, and since the serialization is performed after the geometric processing, rasterization of the data sets is not performed in the order in which the data sets were output by the geometry node processors 20.
    </p>
    <p num="25">
      In some systems (e.g., graphics system "GXT 1000" by IBM Corp.), when the memory resource is filled, the geometric sub-system serves as a single processor to facilitate the management of the memory resource.
      <br/>
      This system, however, adversely affects performance, and does not fully take the advantage of the parallel processing.
    </p>
    <p num="26">Therefore, it is one object of the present invention to provide an excellent graphics system for generating a computer graphics (CG) display screen.</p>
    <p num="27">It is another object of the present invention to provide an excellent graphics system that comprises a parallel processing geometric sub-system for dividing a graphic object into multiple polygons, and for performing geometric calculations only for the vertexes of the polygons; and a raster sub-system for interpolating image data for pixels in the polygons.</p>
    <p num="28">It is an additional object of the present invention to provide an excellent graphics system in which geometric sub-system does not have to take into consideration a memory resource of a raster sub-system.</p>
    <p num="29">It is a further object of the present invention to provide an excellent graphics system, which has a parallel processing geometric sub-system, that can efficiently manage a memory resource for a raster sub-system.</p>
    <heading>SUMMARY OF THE PRESENT INVENTION</heading>
    <p num="30">To achieve the above objects of the present invention, a graphics system which sequentially receives, from a host computer system, data sets that define a graphic object, and which appropriately downloads texture data for graphics from the host computer system so that geometric processing and rasterization are performed on the graphic object for display on a computer screen, includes: a dispatch processor, for receiving data sets from the host computer system and for distributing data sets for geometric processing; a plurality of geometry node processors, each issuing a texture command including a texture identifier specified in distributed data sets and performing geometric processing of the distributed data sets; a merge processor, for merging geometrically processed data sets output by the geometry node processors and for distributing the data sets for rasterization; a texture memory, in which texture data are stored; a raster processor, for receiving the geometrically processed data sets from the merge processor and for rasterizing the geometrically processed data sets by referring to the contents in the texture memory; and texture memory management means, for managing texture data to be stored in the texture memory in accordance with the texture commands received from each of the geometry node processors.</p>
    <p num="31">The texture memory management means may have: a texture list of texture identifiers in the texture data, which are currently stored in the texture memory, and corresponding storage areas in the texture memory; first control means for determining whether or not the texture identifier indicated by a received texture command is included on the texture list and for issuing an interrupt request if the texture identifier isn't included on the texture list; and second control means for, in response to the interrupt request, downloading texture data corresponding to the texture identifier from the host computer system to the texture memory, and for updating a result obtained by the downloading to the texture list.</p>
    <p num="32">
      The texture list and the first control means may be provided in the merge processor, and the merge processor may include means for maintaining the order of data sets, i.e., for performing serialization.
      <br/>
      Further, the raster processor may consist of a plurality of raster node processors for rasterizing each pixel in screen regions defined by the data sets.
    </p>
    <p num="33">
      According to the graphics system of the present invention, when the geometry node processors have received data sets from the dispatch processor, they read a texture identifier described in the data set, and issue a texture command that includes the texture identifier.
      <br/>
      The texture memory management means has a texture list of texture data that are currently stored in the texture memory.
      <br/>
      Upon receipt of a texture command, the texture memory management means determines whether or not the texture identifier designated by the texture command is included on the texture list.
      <br/>
      If the result is negative, there are insufficient texture data in the texture memory to perform rasterization of data sets.
      <br/>
      The first control means then issues an interrupt request to instruct the downloading of texture data.
      <br/>
      In response to the interrupt request, the second control means downloads the designated texture data from the host computer system to the texture memory.
      <br/>
      If the texture memory is full, an algorithm, such as LRU (Least Recently Used) algorithm, may be employed to determine which data are unnecessary and should be abandoned, and then the necessary texture data are downloaded.
      <br/>
      The second control means updates the texture list in accordance with the result of the downloading.
    </p>
    <p num="34">
      While the texture memory management means is processing the texture command, the respective geometry node processors geometrically process the received data sets.
      <br/>
      The geometry node processors do not have to be concerned with the management of the texture memory, i.e., the memory resource for the raster sub-system.
    </p>
    <p num="35">
      At the time the raster sub-system begins rasterization of the data sets, the required texture data have already been downloaded to the texture memory.
      <br/>
      That is, the overhead for downloading the enormous amount of texture data is absorbed by the texture memory management means.
    </p>
    <p num="36">As a result, the graphics system of the present invention can operate the node processors of the geometric sub-system without taking into account the memory resource for the raster sub-system.</p>
    <p num="37">The graphics system of the present invention can efficiently manage the memory resource for the raster sub-system, with no deterioration of the parallel processing performance.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="38">
      The above and other objects, features, and advantages of the present invention will become apparent in due course during the detailed description of the embodiment of the present invention, which will be given while referring to the accompanying drawings of which:
      <br/>
      FIG. 1 is a specific diagram illustrating the hardware arrangement of a graphics system 100 according to the present invention.
      <br/>
      FIG. 2 is a flowchart showing the operational characteristics of geometry node processors 20.
      <br/>
      FIG. 3 is a flowchart showing the operational characteristics of merge processor 30.
      <br/>
      FIG. 4 is a flowchart showing the operational characteristics of a resource management unit 35.
      <br/>
      FIG. 5 is a flowchart showing the operational characteristics of raster node processors 40.
      <br/>
      FIG. 6 is a schematic diagram illustrating the hardware arrangement of a graphics system that has two different parallel structures.
      <br/>
      FIG. 7 is a diagram illustrating example computer graphics on a display screen.
      <br/>
      FIG. 8 is a schematic diagram illustrating the distribution for a graphics system for geometric processing.
    </p>
    <heading>DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="39">
      A.
      <br/>
      System Configuration
    </p>
    <p num="40">
      FIG. 1 is a specific diagram illustrating the hardware arrangement of a graphics system 100 according to the present invention.
      <br/>
      The system 100 comprises: a dispatch processor 10; a plurality of geometry node processors 20; a merge processor 30; a resource management unit 35; a plurality of raster node processors 40; a texture memory 45, as a memory resource of a raster sub-system; and frame buffers 50.
    </p>
    <p num="41">
      The graphics system 100 is used, for example, as an expansion adaptor card for another host computer system (not shown).
      <br/>
      One example of the host computer system is the workstation "RS/6000" by IBM Japan, Ltd.
      <br/>
      Such a host computer system divides a 3D graphic object into multiple polygons (normally, triangles), and prepares in advance three-dimensional coordinates for the vertexes of the polygons and other attribute data.
      <br/>
      The host computer system manages graphic information for each polygon in its storage device, and in addition, stores all the texture data required for rasterization of a 3D object.
      <br/>
      The host computer system sequentially supplies the stored and managed graphic information to the graphics system 100 as data set units (or "drawing instructions sets").
      <br/>
      A data set is a collection of data for defining a single polygon (or one part of a single polygon), and includes the coordinates for the vertexes of a polygon, a line width, a line type and an identifier (texture ID) for the texture to be mapped on the polygon.
      <br/>
      A screen region defined by a single data set essentially is constituted by only one type of texture.
    </p>
    <p num="42">
      The input terminal of the dispatch processor 10 is connected to a system bus in the host computer system, and its output terminal is connected to the succeeding geometry node processors 20 by a bus running between them.
      <br/>
      Upon receipt of the data set from the host computer system, the dispatch processor 10 distributes the geometric processing for the data sets to the succeeding geometry node processors 20 to equalize their work loads.
      <br/>
      In other words, the parallel geometric processing is performed as data set units.
    </p>
    <p num="43">
      Four of the geometry node processors 20, which perform the geometric processing for distributed data sets, are provided to perform parallel processing for the system 100 in this embodiment.
      <br/>
      Another specific function of the geometry node processor 20 in this embodiment is that it issues a texture command.
      <br/>
      More specifically, upon receipt of a data set from the dispatch processor 10, the geometry node processor 20 reads a texture ID from the received data set and transmits a texture command including the read texture ID, to the succeeding merge processor 30.
      <br/>
      Then, the geometry node processor 20 performs conventional geometric processing of the data set.
      <br/>
      Each of the geometry node processors 20 includes a First-in First-out (FIFO) buffer at its output terminal in which to store the geometrically processed data set.
    </p>
    <p num="44">
      The input terminal of the merge processor 30 is connected to the geometry node processors 20 by a bus running between them, and its output terminal is connected to the raster node processors 40 by a bus running between them.
      <br/>
      The merge processor 30 performs serialization for the data sets received from the geometry node processors 20, and distributes data as pixel units to the raster node processors 40 for rasterizing screen regions defined by individual data sets.
      <br/>
      The serialization is performed by extracting, in the order dispatched by the dispatch processor, the data sets temporarily stored in the FIFO buffers of the geometry node processors 20.
    </p>
    <p num="45">
      Other specific functions/structures of the merge processor 30 in this embodiment is that it includes a texture list 30-1, with which are managed the contents of the texture memory 45 that is the memory resource for the raster sub-system; and logic included in the block 30, for handling texture commands received from the geometry node processors 20.
      <br/>
      As is shown in FIG. 1, the texture list 30-1, which is placed in the incorporated memory of the merge processor 30.
      <br/>
      The texture list 30-1 specifies the relation between the texture IDs of texture data presently stored in the texture memory 45 and their current storage areas in the memory 45.
      <br/>
      According to the texture list 30-1, texture data for texture IDs of, for example, "Texture A", "Texture B", "Texture C" and "Texture D" are stored at start addresses 0x0000, 0x1200, 0x2000 and 0x4000 in the texture memory 45.
      <br/>
      The merge processor receives a texture command and examines its texture ID to determine whether or not it is present in the texture list 30-1.
      <br/>
      If the designated texture ID is not present, the merge processor issues an interrupt request to the resource management unit 35 for downloading the pertinent texture data.
    </p>
    <p num="46">
      The resource management unit 35 is connected to the system bus of the host computer system, and can exchange data or commands with the host computer system.
      <br/>
      When the resource management unit 35 has received an interrupt request from the merge processor, the resource management unit 35 downloads from the host computer system to the texture memory 45 texture data corresponding to the texture ID designated by the request.
      <br/>
      If the texture memory 45 has sufficient empty space, new texture data are written therein.
      <br/>
      If the texture memory 45 is filled with old data, unnecessary texture data are abandoned and new texture data are written therein.
      <br/>
      At this time, an LRU algorithm, etc., may be employed to determine which of the texture data in the texture memory 45 are unnecessary.
      <br/>
      In addition, after the resource management unit 35 has downloaded the texture data, it updates the texture list 30-1 in accordance with the new contents of the texture memory 45.
      <br/>
      It should especially be noted that the downloading of the texture data is performed regardless of the geometric processing, i.e., the downloading is performed without any interference by the geometry node processors 20.
    </p>
    <p num="47">
      The raster node processors 40 perform rasterization, i.e., interpolate drawing data for pixels in polygons defined by data sets.
      <br/>
      Since the parallel rasterization process is performed for minuite units, pixels, relatively many, 8 or 12, raster node processors are generally provided for the raster sub-system.
    </p>
    <p num="48">
      The texture memory 45, a primary memory resource of the raster sub-system, is employed to temporarily store texture data downloaded from the host computer system.
      <br/>
      The texture memory 45 has a memory capacity of several MBs, in which a large single texture, or several relatively small textures, can be stored.
      <br/>
      The texture memory 45 can be accessed by the raster sub-system.
      <br/>
      In other words, the raster node processors 40 can acquire color data of processed pixels by referring to the coordinate data included in the data set.
    </p>
    <p num="49">
      The results of the processing by the raster node processors 40 are merged by writing them in the frame buffers 50.
      <br/>
      The data are read from the frame buffers 50, as needed, and displayed on a display, similarly such as the one shown in FIG. 6, connected to the system 100 of FIG. 1.
      <br/>
      If the display is a CRT display, the digital data stored in the buffer 50 are converted into analog data before outputting to the CRT display.
    </p>
    <p num="50">B. System Operation</p>
    <p num="51">
      The hardware arrangement of the graphics system 100 according to the present invention has been explained.
      <br/>
      In this subdivision, the operation of the system 100 and the function of the present invention will be explained.
    </p>
    <p num="52">Operational characteristics of geometry node processors</p>
    <p num="53">
      As shown in FIGS. 1 and 2, when each of the geometry node processors 20 has received a data set from the dispatch processor 10 (step S10), it interprets the attribute data in the data set to determine whether or not texture is added to the data set (step S11).
      <br/>
      When the result is negative, texture mapping is not required for the received data set, i.e., a request for downloading of texture data is not necessary.
      <br/>
      The geometry node processor 20 skips step S12, and begins geometric processing of the received data set (step S13).
    </p>
    <p num="54">
      When the result at step S11 is affirmative, a texture command is issued (step S12).
      <br/>
      The texture command includes a texture ID that is read from the data set.
      <br/>
      The texture command is handled by the merge processor 30, which will be described later.
      <br/>
      It should be noted that the geometry node processors 20 do not participate in the management of texture data, i.e., during the geometric processing, there is no wait time for downloading the texture data.
    </p>
    <p num="55">
      Following this, the geometry node processor 20 performs the geometric processing of the data set (step S13), and outputs the results to the merge processor 30 (step S14).
      <br/>
      Program control then returns to step S10 to repeat the above described processes.
    </p>
    <p num="56">Operational characteristics of merge processor</p>
    <p num="57">
      Referring now to FIGS. 1 and 3, the merge processor 30 reads data or a command from the FIFO buffer of one of the geometry node processors 20, in accordance with the order in which the data or commands have been issued.
      <br/>
      The merge processor 30 then determines whether or not a texture command has been read (step S20).
    </p>
    <p num="58">
      When the result at step S20 is negative, the merge processor 30 then determines whether or not the read data is a data set (step S21).
      <br/>
      If the read data is a data set, that data set is distributed to one of the raster node processors 40 for rasterization (step S23).
      <br/>
      When the read data is not a data set, it means that an error in the processing has occurred, and program control jumps to an error routine (step S22).
    </p>
    <p num="59">
      If the result at step S20 is affirmative, i.e., if the read data constitute a texture command, the merge processor 30 determines whether or not a texture ID designated by the texture command is in the texture list (step S24).
      <br/>
      If the texture ID is in the texture list, program control advances and branches to "YES" at step S25 and steps S26 and S27 are skipped.
      <br/>
      At step S28, the size of the texture data for the next data set, and a corresponding storage area in the texture memory 45 are written in a control register in the raster node processor 40.
      <br/>
      Processing is thereafter terminated.
    </p>
    <p num="60">
      When a texture ID designated by the texture command is not found in the texture list, i.e., when desired texture data is not present in the texture memory 45, program control advances and branches to "NO" at step S25.
      <br/>
      Then, an interrupt request for downloading the texture data is issued to the resource management unit 35 (step S26).
      <br/>
      The interrupt request includes a texture ID.
    </p>
    <p num="61">
      While the resource management unit 35 is downloading texture data or performing an associated process, the merge processor 30 is in the wait state (step S27).
      <br/>
      While in the wait state, the merge processor 30 does not read data or commands from the FIFOs of the geometry node processors 20, and does not distribute data to the raster node processors 40 for rasterization.
    </p>
    <p num="62">
      In response to a resume request from the resource management unit 35, which will be described later, the merge processor 30 recovers from the wait mode to the normal mode.
      <br/>
      At step S28, the size of texture data for the next data set, and a corresponding storage area in the texture memory 45 are written in the control register of each of the raster node processors 40.
      <br/>
      The processing is thereafter terminated.
    </p>
    <p num="63">Operational characteristics of resource management unit</p>
    <p num="64">Referring to FIGS. 1 and 4, the resource management unit 35 receives an interrupt request from the merge processor 30 and begins its operation (step S30).</p>
    <p num="65">
      The resource management unit 35 searches the texture memory 45 for an appropriate area in which to store texture data requested for downloading (step S31).
      <br/>
      If an appropriate empty area is found in the texture memory 45, it is determined to be a downloading area.
      <br/>
      If there is no empty area, unnecessary texture data that have been stored in the texture memory 45 are abandoned, and the emptied area is employed as a downloading area.
      <br/>
      At this time, an LRU algorithm, for example, may be employed to determine whether or not specific texture data is unnecessary.
    </p>
    <p num="66">In accordance with the interrupt request, the resource management unit 35 downloads texture data from the storage area in the host computer system to the texture memory 45 (step S32).</p>
    <p num="67">
      Sequentially, the resource management unit 35 updates the texture list 30-1 in the merge processor 30 in accordance with the results of the downloading (step S33).
      <br/>
      When, for example, Texture B at address 0x1200 and Texture C at address 0x2000 in the texture memory 45 are abandoned, and Texture E has been newly downloaded, the texture list 30-2 is rewritten as is shown in Table 1.
    </p>
    <p num="68">
      -- TABLE 1
      <br/>
      -- Texture list
      <br/>
      --               Texture A 0 x 0 0 0 0
      <br/>
      --               Texture E 0 x 1 2 0 0
      <br/>
      --               Texture D 0 x 4 0 0 0
    </p>
    <p num="69">
      As is described above, when the resource management unit 35 has completed the downloading and the associated process, it issues a resume request to the merge processor 30 (step S34).
      <br/>
      In response to this, the merge processor 30 recovers to the normal mode, as was previously described, and resumes the operation.
    </p>
    <p num="70">Operational characteristics of raster node processors</p>
    <p num="71">Referring now to FIGS. 1 and 5, once one of the raster node processors 40 is assigned to perform the rasterization of one pixel in a screen region defined by a data set, the raster node processor 40 first determines whether or not the data set is for a polygon having a texture (step S41).</p>
    <p num="72">
      When the data set concerns a polygon having a texture, according to the contents in its own control register, the raster node processor 40 refers to the texture memory 45 (step S42), and rasterizes the pixel (step S43).
      <br/>
      If the data set concerns a polygon having no texture, the raster node processor 40 skips step S42 and rasterizes the data (step S43).
    </p>
    <p num="73">
      As is described above in detail, according to the present invention, a graphics system is provided in which geometric sub-system can process without taking the memory resource of a raster sub-system into consideration.
      <br/>
      The present invention does not cause impairment of parallel geometric processing.
      <br/>
      In addition, according to the present invention, a graphics system, which has a parallel processing geometric sub-system, that can efficiently manage a memory resource for a raster sub-system.
    </p>
    <p num="74">
      While the present invention has been described in detail while referring to one specific embodiment, it should be obvious to one having ordinary skill in the art that various modifications or revisions of the embodiment are possible within the scope of the present invention.
      <br/>
      That is, although the present invention has been disclosed by using one embodiment, it should be understood that it is not limited to that embodiment but that various changes can be made therein without departing from the spirit and scope of the invention.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A graphics system, which sequentially receives from a host computer system data sets that define a graphic object, and which downloads texture data from said host computer system so that geometric processing and rasterization are performed on said graphic object for display on a computer screen, comprising:</claim-text>
      <claim-text>(a) a dispatch processor, for receiving data sets from said host computer system and for distributing data sets for geometric processing; (b) a plurality of geometry node processors, each of said geometry node processors issuing distributing data sets with a texture command including a texture identifier identifying a texture data group and performing geometric processing of said distributed data sets; (c) a merge processor, for merging geometrically processed data sets output by said geometry node processors and for distributing said data sets for rasterization; (d) a texture memory, in which one or more texture data groups, including some but not all of said texture data of said host computer system are stored; (e) a raster processor, for receiving said geometrically processed data sets from said merge processor for rasterizing said geometrically processed data sets and for adding texture to pixels of said data sets obtaining texture data from said texture memory;</claim-text>
      <claim-text>and (f) texture memory management means for managing texture data stored in said texture memory placing texture data groups in said texture memory in accordance with said texture commands of each of said geometry node processors so that required texture data is resident in the texture data memory when requested by the raster processor.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The graphics system according to claim 1, wherein said texture memory management means includes: (f-1) a texture list in said merge processor of texture identifiers of said texture data, which specifies a relationship between texture data groups currently stored in said texture memory and corresponding storage areas in said texture memory; (f-2) first control means in said merge processor for determining whether or not said texture identifier indicated by a received texture command is included on said texture list and for issuing an interrupt request if said texture identifier isn't included on said texture list interrupting the transfer of data sets to the raster processor;</claim-text>
      <claim-text>and (f-3) second control means for responding to said interrupt request by downloading to said texture memory a texture data group corresponding to said texture identifier from said host computer system, and for updating a result obtained by said downloading in said texture list and upon updating the texture list issuing a resume request to the merge processor.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The graphics system according to claim 1, wherein said merge processor includes means for maintaining the order of data sets.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The graphics system according to claim 1, wherein said raster processor includes a plurality of raster node processors, each of said raster node processors texturizing and rasterizing pixels in screen regions defined by said data sets.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The graphics system according to claim 4 wherein the second control means includes means for replacing texture data resident in the texture memory with said downloaded texture data when the texture memory is full.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The graphics system according to claim 5 wherein said second control means replaces texture data in accordance with the least recently used (LRU) algorithm.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. In a graphics system, which sequentially receives from a host computer system data sets that define a graphic object, and which downloads texture data from said host computer system so that geometric processing and rasterization are performed on said graphic object for display on a computer screen, the method comprising: (a) receiving data sets from said host computer system and distributing such data sets to a plurality of geometry node processors for geometric processing; (b) issuing a texture command from each of the geometry node processors including a texture identifier specified in distributed data sets and performing geometric processing of said distributed data sets; (c) merging geometrically processed data sets outputted by said geometry node processors in a merge processor and distributing said data sets for rasterization; (d) storing the downloaded texture data in a texture memory; (e) receiving said geometrically processed data sets from said merge processor and rasterizing said geometrically processed data sets in a plurality of raster processors which each obtain texture data from the texture memory and then add that texture data to the pixels of the data sets;</claim-text>
      <claim-text>and (f) managing texture data to be stored in said texture memory in accordance with said texture commands received from each of said geometry node processors having the merge processor assure texture data required for data sets is in the texture data memory prior to providing those data sets to the raster processors.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method according to claim 7, including: (f-1) maintaining a texture list of texture identifiers of said texture data in the merge processor, which list specifies the relation between currently stored in said texture memory and corresponding storage areas in said texture memory; (f-2) determining in the merge processor whether or not said texture identifier indicated by a received texture command is included on said texture list and issuing an interrupt request if said texture identifier isn't included on said texture list;</claim-text>
      <claim-text>and (f-3) in response to said interrupt request, downloading texture data corresponding to said texture identifier from said host computer system to said texture memory, and updating a result obtained by said downloading in said texture list.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method according to claim 8, including maintaining the order of data sets.</claim-text>
    </claim>
  </claims>
</questel-patent-document>