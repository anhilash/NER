<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182119B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182119</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182119</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25529595" extended-family-id="42108933">
      <document-id>
        <country>US</country>
        <doc-number>08982879</doc-number>
        <kind>A</kind>
        <date>19971202</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08982879</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165528</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>98287997</doc-number>
        <kind>A</kind>
        <date>19971202</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08982879</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L  12/24        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>24</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L  29/06        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>709206000</text>
        <class>709</class>
        <subclass>206000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>707999010</text>
        <class>707</class>
        <subclass>999010</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>709202000</text>
        <class>709</class>
        <subclass>202000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>709218000</text>
        <class>709</class>
        <subclass>218000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04L-041/08A1</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>041</main-group>
        <subgroup>08A1</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04L-041/02B</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>041</main-group>
        <subgroup>02B</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04L-063/02B</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>063</main-group>
        <subgroup>02B</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>H04L-063/02B6</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>063</main-group>
        <subgroup>02B6</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-041/0806</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>41</main-group>
        <subgroup>0806</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-041/0213</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>41</main-group>
        <subgroup>0213</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-063/0227</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>63</main-group>
        <subgroup>0227</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-063/0263</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>63</main-group>
        <subgroup>0263</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>36</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>3</number-of-drawing-sheets>
      <number-of-figures>3</number-of-figures>
      <image-key data-format="questel">US6182119</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Dynamically configurable filtered dispatch notification system</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>BROWN MATT</text>
          <document-id>
            <country>US</country>
            <doc-number>5857190</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5857190</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>LANG ANDREW K, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5867799</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5867799</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Hood et al., "Proactive Network Fault Detection", IEEE Communications Conference, Apr. 12, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Thottan et al., "Adaptive Thresholding for Proactive Network Problem Detection", IEEE Conference, 1998.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Cisco Technology, Inc.</orgname>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>CISCO TECHNOLOGY</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Chu, Clare</name>
            <address>
              <address-1>Fremont, CA, US</address-1>
              <city>Fremont</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Hickman Palermo Truong &amp; Becker LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Rinehart, Mark H.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method and system for filtering and acting upon data are provided.
      <br/>
      The specific identity, behavior and relationship between the various components that make up the system are not fixed at compile time.
      <br/>
      Rather, flexibility is maintained by establishing the identity, behavior and relationships based on configuration data at run time.
      <br/>
      At run time, various source, filter and action modules that are specified in configuration data are loaded into dynamic memory and initialized.
      <br/>
      The publisher-subscriber relationships are then established between the loaded modules based on said configuration data.
      <br/>
      A user interface is provided which allows a user to specify changes to the publisher-subscriber relationships between the components, or to the initialization arguments of the components.
      <br/>
      The various components of the system may be implemented as objects that are instances of JAVA classes.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The present invention relates to network management systems, and more particularly, to a method and apparatus for identifying important information among the total information collected by network management systems.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      Network management systems often have access to enormous amounts of data about the networks that they manage.
      <br/>
      Such data includes, for example, "syslog" messages generated by routers, and Management Information Base variables ("MIB variables") received in response to polling the various devices on the networks.
    </p>
    <p num="3">
      Typically, this data is stored in the form of log files.
      <br/>
      Because of the volume of data available to network management systems, it is relatively easy for important pieces of information ("key information") to go undetected, effectively lost deep inside a log file.
      <br/>
      For example, among the "syslog" messages generated by a router, there may be a single "configuration change" message hidden among thousands of relatively unimportant "link-up" and "link-down" messages.
      <br/>
      Detection of such a configuration change message may be the key to determining why a particular section of the network ceased to function properly.
    </p>
    <p num="4">
      The volume of collected data is such that it is not practical for network administrators to manually sift through the log files on a real-time basis to uncover key information.
      <br/>
      Consequently, attempts have been made to automate the discovery of key information.
      <br/>
      One such attempt involves the ad-hoc creation of shell or PERL scripts.
      <br/>
      Such scripts may be coded to read the log files searching for data that has certain characteristics.
      <br/>
      If data that satisfies the programmed criteria of a script is detected by the script, the script performs some predefined action.
    </p>
    <p num="5">
      Alternatively, complex analytical tools may be used to sift through the log files.
      <br/>
      For even basic filtering, such tools often require the use of relatively complex inference engines, event forwarding discriminators, and/or complex correlation codebooks.
    </p>
    <p num="6">
      One disadvantage of both the script approach and the analytical tool approach is that they do not provide real-time feedback.
      <br/>
      Thus, important information remains undetected until a detection tool is executed.
      <br/>
      For example, if a script file begins executing at time T10, it may take until time T20 before the script indicates that key information was received at time T1.
      <br/>
      Similarly, an analytical tool executed at time T10 may discover at time T20 the key information received at time T1.
      <br/>
      Such delays in detection are unacceptable in situations where it is critical to immediately act upon key information.
    </p>
    <p num="7">
      Another approach to detecting key information is to analyze the information in real-time as it arrives from one or more sources.
      <br/>
      Such sources could include, for example, a socket, a log file or a log file reader.
      <br/>
      Programs that perform such real-time analysis are referred to as filtering systems.
    </p>
    <p num="8">
      One problem with typical filtering systems is that they are inflexible with respect to the type of key information they detect, and the data sources with which they work.
      <br/>
      For example, a typical filtering system is delivered pre-compiled with filters, actions and source modules, as well as the connections between the various modules, already in place.
      <br/>
      Because the filters, actions and source modules and connections are effectively hard-coded, a user cannot adjust the operation of the filtering systems in response to changes.
      <br/>
      Changes that may require behavioral or connection changes in filtering systems may include, for example, changes in (1) which information is considered key information and (2) the number and type of sources supplying the information and (3) the number and type of actions to be triggered upon receipt of information that is considered key.
    </p>
    <p num="9">
      Based on the foregoing, it is clearly desirable to provide a mechanism for detecting and acting upon key information supplied by one or more sources.
      <br/>
      It is further desirable to provide a mechanism that is flexible enough to be adapted to the changing needs and configurations of the system in which it is employed.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="10">
      A method and system for filtering and acting upon data are provided.
      <br/>
      The specific identity, behavior and relationship between the various components that make up the system are not fixed at compile time.
      <br/>
      Rather, flexibility is maintained by establishing the identity, behavior and relationships based on configuration data at run time.
    </p>
    <p num="11">
      According to one aspect of the invention, the configuration data specifies a set of source modules, a set of filter modules, a set of action modules, and publisher-subscriber relationships between the source modules, filter modules, and action modules.
      <br/>
      At run time, the various modules specified in the configuration data are loaded into dynamic memory and initialized.
      <br/>
      The publisher-subscriber relationships are then established between the loaded modules based on the configuration data.
      <br/>
      The source modules then begin execution.
    </p>
    <p num="12">
      According to another aspect of the invention, the behavior of the various components is determined by arguments passed to the components when they are initialized.
      <br/>
      A user interface is provided which allows a user to specify changes to the publisher-subscriber relationships between the components, or to the initialization arguments of the components.
      <br/>
      In response to user input that specifies changes publisher-subscriber relationships, subscriber lists maintained by the components are changed.
      <br/>
      In response to user input that specifies changes to initialization arguments, the components are re-initialized with the new arguments.
    </p>
    <p num="13">
      According to one embodiment, the various components are implemented as objects that are instances of JAVA classes.
      <br/>
      After being loaded and initialized, the source objects are launched to begin execution in their own threads.
      <br/>
      The filter and action objects execute when invoked by objects, such as source objects and other filter objects, that are executing.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="14">
      The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:
      <br/>
      FIG. 1 is a block diagram illustrating a computer system that may be used to implement the invention;
      <br/>
      FIG. 2 is a flow chart illustrating steps for establishing subscriptions based on configuration data according to an embodiment of the invention; and
      <br/>
      FIG. 3 is a block diagram illustrating an exemplary message dispatcher system according to an embodiment of the invention and a user interface for manipulating the dispatcher system.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="15">
      A method and apparatus for filtering and acting upon data is described.
      <br/>
      In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention.
      <br/>
      It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details.
      <br/>
      In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.
    </p>
    <p num="16">Hardware Overview</p>
    <p num="17">
      FIG. 1 is a block diagram that illustrates a computer system 100 upon which an embodiment of the invention may be implemented.
      <br/>
      Computer system 100 includes a bus 102 or other communication mechanism for communicating information, and a processor 104 coupled with bus 102 for processing information.
      <br/>
      Computer system 100 also includes a main memory 106, such as a random access memory (RAM) or other dynamic storage device, coupled to bus 102 for storing information and instructions to be executed by processor 104.
      <br/>
      Main memory 106 also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor 104.
      <br/>
      Computer system 100 further includes a read only memory (ROM) 108 or other static storage device coupled to bus 102 for storing static information and instructions for processor 104.
      <br/>
      A storage device 110, such as a magnetic disk or optical disk, is provided and coupled to bus 102 for storing information and instructions.
    </p>
    <p num="18">
      Computer system 100 may be coupled via bus 102 to a display 112, such as a cathode ray tube (CRT), for displaying information to a computer user.
      <br/>
      An input device 114, including alphanumeric and other keys, is coupled to bus 102 for communicating information and command selections to processor 104.
      <br/>
      Another type of user input device is cursor control 116, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor 104 and for controlling cursor movement on display 112.
      <br/>
      This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.
    </p>
    <p num="19">
      The invention is related to the use of computer system 100 for filtering, dispatching and acting upon information.
      <br/>
      According to one embodiment of the invention, message filtering and dispatching is performed by computer system 100 in response to processor 104 executing one or more sequences of one or more instructions contained in main memory 106.
      <br/>
      Such instructions may be read into main memory 106 from another computer-readable medium, such as storage device 110.
      <br/>
      Execution of the sequences of instructions contained in main memory 106 causes processor 104 to perform the process steps described herein.
      <br/>
      In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention.
      <br/>
      Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.
    </p>
    <p num="20">
      The term "computer-readable medium" as used herein refers to any medium that participates in providing instructions to processor 104 for execution.
      <br/>
      Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media.
      <br/>
      Non-volatile media includes, for example, optical or magnetic disks, such as storage device 110.
      <br/>
      Volatile media includes dynamic memory, such as main memory 106.
      <br/>
      Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus 102.
      <br/>
      Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.
    </p>
    <p num="21">Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.</p>
    <p num="22">
      Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor 104 for execution.
      <br/>
      For example, the instructions may initially be carried on a magnetic disk of a remote computer.
      <br/>
      The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem.
      <br/>
      A modem local to computer system 100 can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal.
      <br/>
      An infra-red detector coupled to bus 102 can receive the data carried in the infra-red signal and place the data on bus 102.
      <br/>
      Bus 102 carries the data to main memory 106, from which processor 104 retrieves and executes the instructions.
      <br/>
      The instructions received by main memory 106 may optionally be stored on storage device 110 either before or after execution by processor 104.
    </p>
    <p num="23">
      Computer system 100 also includes a communication interface 118 coupled to bus 102.
      <br/>
      Communication interface 118 provides a two-way data communication coupling to a network link 120 that is connected to a local network 122.
      <br/>
      For example, communication interface 118 may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line.
      <br/>
      As another example, communication interface 118 may be a local area network (LAN) card to provide a data communication connection to a compatible LAN.
      <br/>
      Wireless links may also be implemented.
      <br/>
      In any such implementation, communication interface 118 sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.
    </p>
    <p num="24">
      Network link 120 typically provides data communication through one or more networks to other data devices.
      <br/>
      For example, network link 120 may provide a connection through local network 122 to a host computer 124 or to data equipment operated by an Internet Service Provider (ISP) 126. ISP 126 in turn provides data communication services through the world wide packet data communication network now commonly referred to as the "Internet" 128.
      <br/>
      Local network 122 and Internet 128 both use electrical, electromagnetic or optical signals that carry digital data streams.
      <br/>
      The signals through the various networks and the signals on network link 120 and through communication interface 118, which carry the digital data to and from computer system 100, are exemplary forms of carrier waves transporting the information.
    </p>
    <p num="25">
      Computer system 100 can send messages and receive data, including program code, through the network(s), network link 120 and communication interface 118.
      <br/>
      In the Internet example, a server 130 might transmit a requested code for an application program through Internet 128, ISP 126, local network 122 and communication interface 118.
    </p>
    <p num="26">
      The received code may be executed by processor 104 as it is received, and/or stored in storage device 110, or other non-volatile storage for later execution.
      <br/>
      In this manner, computer system 100 may obtain application code in the form of a carrier wave.
    </p>
    <p num="27">Functional Overview</p>
    <p num="28">
      A dispatcher system is provided in which components of the system communicate with each other based on a subscriber/publisher model.
      <br/>
      In a subscriber/publisher model, modules that produce messages ("publishers") maintain a "subscriber list" of modules ("subscribers") that are interested in receiving the messages the publishers produce.
      <br/>
      When a publisher produces a message, the publisher transmits the message to each of the subscribers in its subscriber list.
      <br/>
      Within a subscriber/publisher system, a particular module may be only a publisher, only a subscriber, or both a publisher and a subscriber.
    </p>
    <p num="29">According to one embodiment of the invention, a dispatcher system is provided in which the tasks associated with responding to key information are divided up among modules referred to herein as source objects, filter objects and action objects.</p>
    <p num="30">
      Source objects are publishers that receive or retrieve data from a source and transmit the data to a set of subscribers.
      <br/>
      According to one embodiment, each source object maintains a list of the subscribers to which it must send the data that is received from the source associated with the source object.
    </p>
    <p num="31">
      Filter objects are typically both publishers and subscribers.
      <br/>
      Filter objects receive messages from publishers and provide filtering criteria that decides whether the message should be dispatched to its subscribers.
      <br/>
      Filters may also transform the message if so designed.
      <br/>
      The main function of a filter is to decide whether the message embodies key information which the user is interested in.
    </p>
    <p num="32">
      Action objects are typically subscribers that receive messages from the publishers with which they are registered.
      <br/>
      Action objects respond to the messages by performing actions dictated by their logic.
      <br/>
      The type of action will vary from action object to action object.
      <br/>
      For example, one class of action object may execute a script generating an alert to a network management station (NMS) while another class of action object may trigger an update to a database.
    </p>
    <p num="33">According to one embodiment of the invention, the specific components and relationship between components of a dispatch system are established by a coordinator process, referred to herein as a dispatch system coordinator, based on information contained in a configuration file.</p>
    <p num="34">Dispatch System Coordinator</p>
    <p num="35">
      A dispatch system coordinator is a module that reads and parses a configuration file and sets up a dispatcher system based on the configuration file.
      <br/>
      The configuration file indicates the source objects, filter objects, and action objects that are to be used in a particular dispatch system, and the relationships between the source, filter and action objects.
    </p>
    <p num="36">
      After reading and parsing the configuration file, the dispatch system coordinator loads and initializes the sources identified in the configuration file.
      <br/>
      The dispatch system coordinator then loads and initializes the filters identified in the configuration file.
      <br/>
      After the sources and the filters have been loaded and initialized, the dispatch system coordinator subscribes the filter objects to the source objects as specified in the configuration file.
    </p>
    <p num="37">
      The action objects specified in the configuration file are then loaded and initialized.
      <br/>
      After the action objects are loaded and initialized, the dispatch system coordinator subscribes the action objects to the filter objects as specified in the configuration file.
    </p>
    <p num="38">After the source, filter and action objects have been loaded, initialized, and all of the appropriate subscriptions have been made, the dispatch system coordinator launches the sources by causing each source object to begin execution in its own thread.</p>
    <p num="39">
      According to one embodiment of the invention, the dispatch system coordinator communicates, in a separate thread, with a management process or user interface to start, stop, or reconfigure the executing dispatch system or a particular component thereof.
      <br/>
      Such a user interface may include, for example, controls for displaying the parameter values currently in effect for each module within the dispatch system, and controls for modifying the parameter values while the dispatch system is in operation.
    </p>
    <p num="40">Configuration Data</p>
    <p num="41">
      As mentioned above, the dispatch system coordinator is configured to load, initialize and establish subscriptions between the various components of a dispatch system based on configuration data.
      <br/>
      According to one embodiment of the invention, the configuration data, which may be stored in one or more files, identifies sources by the keyword SRC, filters by the keyword FLT, and actions by the keyword ACT.
      <br/>
      In addition, configuration data specifies subscriptions between components based on the rules: (1) filters subscribe to the source that most immediately precedes them in the configuration data, and (2) actions subscribe to the filter that most immediately precedes them in the configuration data.
    </p>
    <p num="42">An exemplary set of configuration data that uses this format is:</p>
    <p num="43">SRC LogReader/tmp/syslog_info</p>
    <p num="44">- FLT SimpleTextFilter deny ISDN</p>
    <p num="45">
      -  ACT ShellAction log.sh no_isdn.txt
      <br/>
      - FLT NullFilter
      <br/>
      -  ACT NativeSyslog
      <br/>
      -  ACT ShellAction log.sh my_syslog.txt
      <br/>
      SRC SocketReader 9009
      <br/>
      - FLT ReverseFilter
      <br/>
      -  ACT ShellAction echo
      <br/>
      -  ACT ShellAction log.sh reverse.txt
    </p>
    <p num="46">In response to this configuration data, the dispatch system coordinator would load and initialize two source objects (LogReader and SocketReader), three filter objects (SimpleTextFilter, NullFilter and ReverseFilter) and five action objects (NativeSyslog and four instances of ShellAction).</p>
    <p num="47">
      Based on the subscription rules specified above, the dispatch system coordinator would subscribe the SimpleTextFilter to the LogReader, and the first instance of ShellAction to the SimpleTextFilter.
      <br/>
      The NullFilter would be subscribed to the LogReader, and the NativeSyslog and second instance of ShellAction would be subscribed to the NullFilter.
      <br/>
      The ReverseFilter would be subscribed to the SocketReader, and the third and fourth instances of ShellAction would be subscribed to the ReverseFilter.
    </p>
    <p num="48">
      As illustrated in the above example, the configuration data may specify parameter values with which various modules are to be initialized.
      <br/>
      The parameter values used to initialize a particular module can significantly impact the behavior of the module.
      <br/>
      For example, the first instance of the ShellAction action object is followed by the parameter values log.sh no_isdn.txt. When initialized with these parameter values, the ShellAction action object will respond to messages by executing a shell program named "log.sh" that will store its results in a text file named no_isdn.txt. If different parameters are supplied, the ShellAction object may respond to messages by executing a shell script that does something completely different than the log.sh shell script.
    </p>
    <p num="49">Configuration Data Processing</p>
    <p num="50">According to one embodiment of the invention, the dispatch system coordinator processes the configuration data in the forward direction when loading the various components of the system, and in the backward direction when establishing the publisher/subscriber relationships between the components.</p>
    <p num="51">
      FIG. 2 is a flow chart illustrating the operation of the dispatch system coordinator during the subscription phase.
      <br/>
      At step 200, the dispatch system coordinator starts with an empty set of unsubscribed actions and an empty set of unsubscribed filters.
      <br/>
      Beginning at the end of the configuration data, the dispatch system coordinator begins reading upward (Step 202), adding action objects encountered to the unsubscribed action set (Steps 204 and 206).
      <br/>
      This continues until a filter object is encountered.
    </p>
    <p num="52">
      When a filter object is encountered, the members of the unsubscribed action set are subscribed to the filter object and removed from the unsubscribed action set.
      <br/>
      The filter object is added to the unsubscribed filter set (Steps 208 and 210).
      <br/>
      The loop defined by steps 202, 204, 206, 208 and 210 is repeated until a source object is encountered.
    </p>
    <p num="53">
      When a source object is encountered, the members of the unsubscribed filter set are subscribed to the source object and removed from the unsubscribed filter set (Step 212).
      <br/>
      The entire process is then repeated until the configuration data has been completely processed (Step 214).
    </p>
    <p num="54">Alternative Configuration Formats</p>
    <p num="55">
      The configuration data format described above is for illustrative purposes only.
      <br/>
      The present invention is not limited to any particular configuration data format.
      <br/>
      The format described above works well for three-level tree-shaped dispatcher systems (i.e. dispatcher systems in which each component has only one parent and where there is only one filter between any source and action object).
      <br/>
      However, a more sophisticated format may be required for other dispatcher system configurations.
    </p>
    <p num="56">
      For example, the configuration data may alternatively take the form of publisher/subscriber tuples.
      <br/>
      Based on this format, the configuration data:
      <br/>
      (SRC s1, FLT f1)
      <br/>
      (FLT f1, ACT a1)
      <br/>
      (FLT f1, FLT f2)
      <br/>
      (FLT f2, ACT a2)
      <br/>
      would specify that filter f1 subscribes to source s1, and that action a1 and filter f2 subscribe to filter f1.
      <br/>
      Action a2 subscribes to filter f2.
      <br/>
      The internal data structure for publisher/subscriber relationships is 1represented as a directed acyclic graph to represent the publisher/subscriber tuples.
    </p>
    <p num="57">Exemplary Dispatching System</p>
    <p num="58">
      Referring to FIG. 3, it is a block diagram that illustrates an exemplary dispatch system 300 according to an embodiment of the invention.
      <br/>
      System 300 includes two source objects: socket reader 302 and log reader 306.
      <br/>
      Socket reader 302 is configured to receive and publish messages based on data from another process (e.g. data received at a particular port).
      <br/>
      Log reader 306 is configured to read and publish messages based on data that is stored in a log file 304.
    </p>
    <p num="59">
      System 300 further includes a plurality of filter objects 308, 310, 312 and 314, and a plurality of action objects 316, 318 and 320.
      <br/>
      Filter object 308 and filter object 310 subscribe to messages published by socket reader 302.
      <br/>
      Filter object 312 subscribes to messages published by filter object 310.
      <br/>
      Filter object 314 subscribes to messages published by log reader 306.
    </p>
    <p num="60">
      Action object 316 subscribes to messages published by filter object 308.
      <br/>
      Action object 318 subscribes to messages published by filter object 310.
      <br/>
      Action object 320 subscribes to messages published by filter objects 312 and 314.
    </p>
    <p num="61">
      After the dispatch system coordinator has loaded and initialized the various objects in system 300, the dispatcher system coordinator launches socket reader 302 and log reader 306, causing them to begin execution in their own threads.
      <br/>
      The remaining components of system 300 are not launched, since they only execute upon being invoked by an object that is executing.
      <br/>
      For example, assume that socket reader 302 receives data from that socket that it is monitoring.
      <br/>
      Socket reader 302 publishes this message by invoking a method on each of its subscribers, and passing the message as an argument to the method.
    </p>
    <p num="62">
      For the purposes of explanation, the method of a subscriber that is invoked by a publisher to pass a message to the subscriber shall be referred to as the "update" method.
      <br/>
      Thus, in the present example, socket reader 302 would invoke the update method of filter object 308.
      <br/>
      The update method of filter object 308 would then execute.
      <br/>
      The update method of filter object 308 contains logic that determines how filter object 308 responds to the message.
      <br/>
      For the purposes of explanation, it shall be assumed that the logic of filter object 308 dictates that filter object 308 take no action on the particular message.
      <br/>
      This may occur, for example, if filter object 308 is programmed to filter out the particular type of message that was received from socket reader 308.
    </p>
    <p num="63">
      Execution of the thread associated with socket reader 302 would then return from filter object 308 to socket reader 302.
      <br/>
      Socket reader 302 would then send the message to the next subscriber in its subscription list (filter object 310) by invoking the update method of filter object 310.
      <br/>
      The update method of filter object 310 would then execute.
      <br/>
      The update method of filter object 310 contains logic that determines how filter object 310 responds to the message.
      <br/>
      For the purposes of explanation, it shall be assumed that the logic of filter object 310 dictates that filter object 310 publish the message thus received to its subscribers.
    </p>
    <p num="64">
      Filter object 310 would then send the message to the first subscriber in its subscription list (action object 318) by invoking the update method of action object 318.
      <br/>
      The update method of action object 318 would then execute.
      <br/>
      The update method of action object 318 contains logic that determines how action object 318 responds to the message.
      <br/>
      For the purposes of explanation, it shall be assumed that the logic of action object 318 causes a shell script to generate a message to another network management subsystem to alert the operator.
    </p>
    <p num="65">
      When execution of the shell script is complete, thread execution returns to action object 318.
      <br/>
      When the update method of action object 318 completes, thread execution returns to filter object 310.
    </p>
    <p num="66">
      Filter object 310 would then send the message to the next subscriber in its subscription list (filter object 312) by invoking the update method of filter object 312.
      <br/>
      The update method of filter object 312 would then execute.
      <br/>
      The update method of filter object 312 contains logic that determines how filter object 312 responds to the message.
      <br/>
      For the purposes of explanation, it shall be assumed that the logic of filter object 312 dictates that no action should be taken.
      <br/>
      Thread execution then returns to filter object 310.
    </p>
    <p num="67">
      At this point, filter object 310 has sent the message to all of the subscribers on its subscriber list.
      <br/>
      Therefore, thread execution returns to socket reader 302.
      <br/>
      Socket reader 302 then continues to monitor the port in which it is interested.
    </p>
    <p num="68">Java-Based Components</p>
    <p num="69">
      As mentioned above, the various components of the dispatch system are loaded and initialized by the dispatch system coordinator at runtime.
      <br/>
      According to an embodiment of the invention, the various components as well as the dispatch system coordinator itself are implemented as objects defined in JAVA classes.
      <br/>
      In JAVA, source code is compiled into class files of byte code.
      <br/>
      At runtime, class files are located and loaded into non-volatile memory on an as-needed basis.
      <br/>
      Once loaded, the class files are interpreted by an interpreter generally referred to as a JAVA virtual machine.
    </p>
    <p num="70">
      Specifically, when the currently-executing byte code invokes an object in a class that has not yet been loaded, a routine referred to as the JAVA class loader searches for the class file of the class.
      <br/>
      Typically, the JAVA class loader will search for the class file in locations identified in a search path.
      <br/>
      The locations are searched in sequence.
      <br/>
      Thus, the second location in the search path is searched only if the target class file is not found at the first location in the search path.
      <br/>
      If the target class file is not found at any locations in the search path, then the JAVA virtual machine generates an error.
      <br/>
      Depending on which class loader is used (default or application based), a class file can even originate from anywhere on the Internet as long as appropriate security restrictions are met.
    </p>
    <p num="71">
      The present invention uses JAVA's deferred loading of class files to increase the flexibility of the filtering system.
      <br/>
      Specifically, as long as a class has not already been loaded by the virtual machine, a class file for a particular class may be modified or even replaced with a different class file for the same class.
      <br/>
      Such changes, which when executed may significantly affect the functionality of the JAVA program, can be performed while the JAVA program is executing.
    </p>
    <p num="72">Runtime Configuration Modification</p>
    <p num="73">
      According to one embodiment of the invention, a user is presented with a graphical user interface that allows the user to specify changes in the configuration and behavior of the dispatcher system while it is executing.
      <br/>
      This user interface interacts with the dispatch system coordinator via a thread separate from the threads running the sources.
      <br/>
      Such configuration changes may include, for example, causing a filter object that is subscribed to one source to subscribe to a different source.
      <br/>
      Behavior changes may include, for example, causing a particular filter to switch from one filtering criteria to another.
    </p>
    <p num="74">
      The user interface may generate, for example, a display similar to that shown in FIG. 3.
      <br/>
      The user may use a pointing device, such as a mouse, to select the visual indicator associated with a particular component to be changed.
      <br/>
      For example, to change the behavior of filter object 314, the user may select circle 350.
      <br/>
      In response to selecting circle 350, the user may be presented with the operating parameter values currently in effect for filter object 314.
      <br/>
      The user may then revise the displayed parameter values to specify a change that should be made in the behavior of filter object 314.
      <br/>
      The methods used to revise filter or action parameters are synchronized to prevent parameters from changing while the filter or action logic is being invoked.
    </p>
    <p num="75">
      Similarly, a user may create an arrow, delete an arrow, or change the source or destination of an arrow to specify a change in the publisher-subscriber relationships between components.
      <br/>
      For example, a user may use a mouse to move the end of arrow 352 to point to the circle associated with action object 318 rather than the circle associated with action object 320.
      <br/>
      In response to this user input, action object 320 is removed from the subscriber list of filter object 314, and action object 318 is inserted into the subscriber list of filter object 314.
    </p>
    <p num="76">
      To facilitate configuration changes, publishers may implement the methods addSubscriber and removeSubscriber.
      <br/>
      These methods receive arguments that identify the component that should be respectively added or removed from the subscriber list of the publisher.
      <br/>
      The addSubscriber method of objects is called by the dispatch system coordinator to establish the subscription relationships of the initial dispatcher system configuration.
      <br/>
      Thus, in an embodiment where the dispatch system coordinator operates according to the flowchart illustrated in FIG. 2, the dispatch system coordinator calls the addSubscriber method of a filter object at step 210, and calls the addSubscriber method of a source object at step 212.
    </p>
    <p num="77">
      The addSubscriber and removeSubscriber methods may also be called after dispatcher system is executing in response to user input that specifies a change in the dispatcher system configuration.
      <br/>
      For example, a user may specify that a filter f1 that is currently subscribing to a source s1 be changed to subscribe to a different source s2.
      <br/>
      In response to this user input, the dispatch system coordinator invokes the removeSubscriber method of s1 and invokes the addSubscriber method of s2.
      <br/>
      For both invocations, the dispatch system coordinator passes an argument that identifies filter f1.
      <br/>
      In response to these invocations, s1 removes f1 from its subscriber list and s2 adds f1 to its subscriber list.
      <br/>
      Consequently, subsequent messages published by s1 will not be sent to f1, and subsequent messages published by s2 will be sent to f1.
      <br/>
      The addSubscriber and removeSubscriber methods are synchronized to prevent a subscriber from being added or removed while it is in the midst of being invoked.
    </p>
    <p num="78">Generic Publisher Class</p>
    <p num="79">
      To ensure that publishers consistently implement the basic functions common to all publishers, a generic publisher class may be defined.
      <br/>
      The generic publisher class specifies the interface of the methods that are common to all publishers.
      <br/>
      Classes for special purpose publishers may then be defined as child classes of the generic publisher class, thus inheriting the common publisher methods and interface.
      <br/>
      In JAVA, classes that specify the interface of a generic class without providing specific implementations for the methods of the class are referred to as abstract classes.
    </p>
    <p num="80">
      According to one embodiment of the invention, the generic publisher class defines the methods addSubscriber and removeSubscriber, as described above.
      <br/>
      In addition, the generic publisher class includes a removeAll method and a send method.
      <br/>
      When invoked, the removeAll method of a publisher object causes all subscribers to be removed from the subscriber list of the publisher object.
    </p>
    <p num="81">
      The send method of a publisher causes a message to be sent to all subscribers listed on the subscriber list of a publisher.
      <br/>
      This may be accomplished, for example, by calling the update method of each object that belongs to the subscriber list of the publisher.
    </p>
    <p num="82">Runtime Behavior Modification</p>
    <p num="83">
      According to an embodiment of the invention, the behavior of the various modules in the dispatcher system varies based on the values of the arguments with which the modules are initialized.
      <br/>
      For example, if the action object ShellAction is initialized with the arguments "log.sh reverse.txt", then the ShellAction object triggers the execution of the shell script "log.sh" upon receiving a message, and the shell script "log.sh" stores its output in the file "reverse.txt". On the other hand, if the same ShellAction object is initialized with the argument "other.sh", then the ShellAction object would trigger the execution of the shell script "other.sh" upon receiving a message.
      <br/>
      The shell script "other.sh" may do something completely different than the shell script "log.sh".
    </p>
    <p num="84">
      To facilitate configuration changes, objects must implement the method "initialize".
      <br/>
      When invoked on an object, this method receives arguments that affect the behavior of the object.
      <br/>
      According to one embodiment, the initialize method of objects is called by the dispatch system coordinator based on information retrieved from the configuration data to establish the initial behavior of the objects at the time they are loaded into memory.
    </p>
    <p num="85">
      The initialize method may also be called in response to user input that specifies a change in the behavior of an object within the dispatcher system after the dispatcher system is executing.
      <br/>
      For example, a user may specify that a filter f1 that is currently filtering out all messages except those originated at a particular Internet Protocol ("IP") address be changed to filter out all messages except those originated at a different IP address.
      <br/>
      In response to this user input, the dispatch system coordinator invokes the initialize method of filter f1 with arguments that specify the new IP address.
    </p>
    <p num="86">
      As described above, a generic publisher class may be used to establish a common interface for functions performed by all object classes that are publishers.
      <br/>
      According to one embodiment of the invention, the inheritance feature of object-oriented programming languages, such as JAVA, is used to establish common interfaces for functions shared by all members of other categories of objects as well.
      <br/>
      For example, a "loadable_object" class may be defined to include an "initialize" method, and all loadable objects (including source objects, filter objects and action objects) may be created as subclasses of the "loadable_object" class.
    </p>
    <p num="87">Network Management</p>
    <p num="88">
      According to an embodiment of the invention, a dispatching system that uses the techniques described herein is used in a network management environment to sift through the enormous amounts of data a network management system receives about the network it manages.
      <br/>
      For example, socket reader 302 may be configured to receive messages generated by routers and/or MIB variables received from the various devices on the networks.
      <br/>
      Similarly, log reader 306 may be configured to read from log files that store such information.
    </p>
    <p num="89">
      In such a configuration, filters 308, 310, 312 and 314 may be configured to filter out all data except for data that qualifies as "key information".
      <br/>
      The initialization parameters currently in effect for each filter determines which data qualifies as key information with respect to that filter.
      <br/>
      For example, socket reader 302 may be configured to receive the "syslog" messages generated by a router, and filter object 308 may be configured to filter out all messages but "configuration change" messages.
      <br/>
      Action object 316 may be configured to send alert messages to the network administrator in response to each configuration change message, or to log all configuration change messages to a special "debugging" log file.
    </p>
    <p num="90">
      Over time, the network administrator may become more or less selective in the types of data that should qualify as "key information".
      <br/>
      Using the techniques described above, the network administrator dynamically reconfigures the appropriate filter objects by re-initializing the objects with different argument values that establish new filtering criteria.
      <br/>
      Similarly, by re-initializing the action objects with different argument values, the network administrator may cause more, fewer, or different actions to be taken in response to detecting key information.
    </p>
    <p num="91">
      A method and system for filtering and acting upon data are provided.
      <br/>
      The specific identity, behavior and relationship between the various components that make up the system are not fixed at compile time.
      <br/>
      Rather, flexibility is maintained by establishing the identity, behavior and relationships based on configuration data at run time.
      <br/>
      At run time, various source, filter and action modules that are specified in configuration data are loaded into dynamic memory and initialized.
      <br/>
      The publisher-subscriber relationships are then established between the loaded modules based on said configuration data.
      <br/>
      A user interface is provided which allows a user to specify changes to the publisher-subscriber relationships between the components, or to the initialization arguments of the components.
      <br/>
      The various components of the system may be implemented as objects that are instances of JAVA classes.
    </p>
    <p num="92">
      In the foregoing specification, the invention has been described with reference to specific embodiments thereof.
      <br/>
      It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention.
      <br/>
      The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for filtering data, the method comprising the steps of:</claim-text>
      <claim-text>reading configuration data that specifies publisher-subscriber relationships between source modules in a set of source modules, filter modules in a set of filter modules, and action modules in a set of action modules; wherein source modules in said set of source modules are software modules configured to obtain data from a source and transmit the data in messages to a set of subscribers; wherein the set of subscribers to which each source module transmits messages is determined by information received by said source module while said source module is loaded into dynamic memory and not determined by code in said source module; wherein filter modules in said set of filter modules are software modules configured to receive messages and provide filtering criteria that decides whether the messages should be dispatched to a set of subscribers; wherein the set of subscribers to which each filter module dispatches messages is determined by information received by said filter module while said filter module is loaded in dynamic memory and not determined by code in said filter module; wherein action modules in said set of action modules are software modules configured to respond to messages by performing actions; creating a set of loaded modules by loading, into dynamic memory, modules that belong to said set of source modules, said set of filter modules and said set of action modules; initializing said set of loaded modules; establishing said publisher-subscriber relationships between said set of loaded modules based on said configuration data; wherein the step of establishing publisher-subscriber relationships includes sending information, based on said configuration data, to each source module in said set of loaded modules to indicate to said source module the set of subscribers to which said source module is to transmit messages;</claim-text>
      <claim-text>and sending information, based on said configuration data, to each filter module in said set of loaded modules to indicate to said filter module the set of substribers to which said filter module is to dispatch messages.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 wherein: said set of loaded modules includes a first source module and a first filter module; said step of establishing said publisher-subscriber relationships includes causing said first source module to include said first filter module in a subscriber list maintained for said first source module; when executing, said first source module receives data from one or more sources;</claim-text>
      <claim-text>and upon receiving data from said one or more sources, said first source module sends a message to all modules listed in said subscriber list maintained for said first source module.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 2 wherein: said step of establishing said publisher-subscriber relationships includes causing said first filter module to maintain a subscriber list; upon receiving said message from said first source module, said first filter module determines whether said message satisfies a particular set of criteria;</claim-text>
      <claim-text>and if said message satisfies said particular set of criteria, then said first filter module sends a message to all modules listed in said subscriber list maintained for said filter module.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 3 wherein: said subscriber list maintained for said first filter module includes a first action module;</claim-text>
      <claim-text>and upon receiving said message from said first filter module, said first action module performs a particular action.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 3 wherein: said configuration data includes a particular set of arguments that specify said particular set of criteria;</claim-text>
      <claim-text>and said step of initializing said loaded modules includes initializing said first filter module with said particular set of arguments to cause said first filter module to filter based on said particular set of criteria.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 5 further comprising the steps of: after said step of initializing said set of loaded modules, receiving user input that specifies a second set of criteria that is different from said particular set of criteria; generating a second set of arguments that reflect said second set of criteria;</claim-text>
      <claim-text>and re-initializing said first filter module with said second set of arguments to cause said first filter module to filter based on said second set of criteria.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 1 wherein: said set of loaded modules includes a first filter module and a first action module; said step of establishing said publisher-subscriber relationships includes causing said first filter module to include said first action module in a subscriber list maintained for said first filter module; upon receiving a message from another loaded module, said first filter module determines whether said message satisfies a particular set of criteria;</claim-text>
      <claim-text>and if said message satisfies said particular set of criteria, then said first filter module sends a message to all modules listed in said subscriber list maintained for said filter module.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 7 wherein: said configuration data includes a particular set of arguments that specify a particular action to be performed by said action module;</claim-text>
      <claim-text>and said step of initializing said loaded modules includes initializing said first action module with said particular set of arguments to cause said first action module to perform said particular action upon receipt of a message from said first filter module.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method of claim 8 wherein: after said step of initializing said set of loaded modules, receiving user input that specifies a second action that is different from said particular action; generating a second set of arguments that reflect said second action;</claim-text>
      <claim-text>and re-initializing said first action module with said second set of arguments to cause said first action module to perform said second action in response to messages from said first filter module.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 1 further comprising the steps of: after said set of source modules are executing, receiving input that specifies changes to said publisher-subscriber relationships between said loaded modules;</claim-text>
      <claim-text>and changing said publisher-subscriber relationships in response to said input.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 1 wherein: said loaded modules are objects that are instances of JAVA classes; the step of loading includes the step of searching a search path to locate code associated with said JAVA classes; and the step of causing said source modules to begin execution is performed by causing each of one or more source objects that belong to said loaded modules to begin execution in a separate thread.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method of claim 1 further comprising the step of executing a dispatcher system coordinator object in a thread to perform the steps of: reading said configuration data; loading and initializing said set of loaded modules; establishing said publisher-subscriber relationships;</claim-text>
      <claim-text>and causing said source modules to begin execution.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A computer-readable medium carrying one or more sequences of instructions for filtering data, wherein execution of the one or more sequences of instructions by one or more processors causes the one or more processors to perform the steps of: reading configuration data that specifies publisher-subscriber relationships between source modules in a set of source modules, filter modules in a set of filter modules, and action modules in a set of action modules; wherein source modules in said set of source modules are software modules configured to obtain data from a source and transmit the data in messages to a set of subscribers; wherein the set of subscribers to which each source module transmits messages is determined by information received by said source module while said source module is loaded into dynamic memory and not determined by code in said source module; wherein filter modules in said set of filter modules are software modules configured to receive messages and provide filtering criteria that decides whether the messages should be dispatched to a set of subscribers; wherein the set of subscribers to which each filter module dispatches messages is determined by information received by said filter module while said filter module is loaded in dynamic memory and not determined by code in said filter module; wherein action modules in said set of action modules are software modules configured to respond to messages by performing actions; creating a set of loaded modules by loading, into dynamic memory, modules that belong to said set of source modules, said set of filter modules and said set of action modules; initializing said set of loaded modules; establishing said publisher-subscriber relationships between said set of loaded modules based on said configuration data; wherein the step of establishing publisher-subscriber relationships includes</claim-text>
      <claim-text>- sending information, based on said configuration data, to each source module in said set of loaded modules to indicate to said source module the set of subscribers to which said source module is to transmit messages;</claim-text>
      <claim-text>and - sending information, based on said configuration data, to each filter module in said set of loaded modules to indicate to said filter module the set of subscribers to which said filter module is to dispatch messages.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The computer-readable medium of claim 13 wherein: said set of loaded modules includes a first source module and a first filter module; said step of establishing said publisher-subscriber relationships includes causing said first source module to include said first filter module in a subscriber list maintained for said first source module; when executing, said first source module receives data from one or more sources;</claim-text>
      <claim-text>and upon receiving data from said one or more sources, said first source module sends a message to all modules listed in said subscriber list maintained for said first source module.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The computer-readable medium of claim 14 wherein: said step of establishing said publisher-subscriber relationships includes causing said first filter module to maintain a subscriber list; upon receiving said message from said first source module, said first filter module determines whether said message satisfies a particular set of criteria;</claim-text>
      <claim-text>and if said message satisfies said particular set of criteria, then said first filter module sends a message to all modules listed in said subscriber list maintained for said filter module.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The computer-readable medium of claim 15 wherein: said configuration data includes a particular set of arguments that specify said particular set of criteria;</claim-text>
      <claim-text>and said step of initializing said loaded objects includes initializing said first filter module with said particular set of arguments to cause said first filter module to filter based on said particular set of criteria.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The computer-readable medium of claim 16 further comprising instructions for performing the steps of: after said step of initializing said set of loaded modules, receiving user input that specifies a second set of criteria that is different from said particular set of criteria; generating a second set of arguments that reflect said second set of criteria;</claim-text>
      <claim-text>and re-initializing said first filter module with said second set of arguments to cause said first filter module to filter based on said second set of criteria.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The computer-readable medium of claim 13 wherein: said set of loaded modules includes a first filter module and a first action module; said step of establishing said publisher-subscriber relationships includes causing said first filter module to include said first action module in a subscriber list maintained for said first filter module; upon receiving a message from another loaded module, said first filter module determines whether said message satisfies a particular set of criteria;</claim-text>
      <claim-text>and if said message satisfies said particular set of criteria, then said first filter module sends a message to all modules listed in said subscriber list maintained for said filter module.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The computer-readable medium of claim 18 wherein: said configuration data includes a particular set of arguments that specify a particular action to be performed by said action module;</claim-text>
      <claim-text>and said step of initializing said loaded objects includes initializing said first action module with said particular set of arguments to cause said first action module to perform said particular action upon receipt of a message from said first filter module; after said step of initializing said set of loaded modules, receiving user input that specifies a second action that is different from said particular action; generating a second set of arguments that reflect said second action;</claim-text>
      <claim-text>and re-initializing said first action module with said second set of arguments to cause said first action module to perform said second action in response to messages from said first filter module.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The computer-readable medium of claim 13 further comprising instructions for performing the steps of: after said set of source modules are executing, receiving input that specifies changes to said publisher-subscriber relationships between said loaded modules;</claim-text>
      <claim-text>and changing said publisher-subscriber relationships in response to said input.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The computer-readable medium of claim 13 wherein: said loaded modules are objects that are instances of JAVA classes; the step of loading includes the step of searching a search path to locate code associated with said JAVA classes; and the step of causing said source modules to begin execution is performed by causing each of one or more source objects that belong to said loaded modules to begin execution in a separate thread.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A system for filtering data comprising: a set of one or more source modules loaded and executing in memory; wherein source modules in said set of source modules are software modules configured to obtain data from a source and transmit the data in messages to a set of subscribers; wherein the set of subscribers to which each source module transmits messages is determined by information received by said source module while said source module is loaded into dynamic memory and not determined by code in said source module; a set of one or more filter modules loaded in memory; wherein filter modules in said set of filter modules are software modules configured to receive messages and provide filtering criteria that decides whether the messages should be dispatched to a set of subscribers; wherein the set of subscribers to which each filter moduled dispatches messages is determined by information received by said filter module when said filter module is executing and not determined by code in said filter module; a set of one or more action modules loaded in memory; wherein action modules in said set of action modules are software modules configured to respond to messages by performing actions; said set of source modules including a first source module that receives data from a source and responds to receipt of said data by transmitting messages to each subscriber in a first list of subscribers; said set of filter modules including a filter module that receives messages from a source module in said set of source modules and responds to receipt of said messages by determining whether said messages satisfy a set of criteria;</claim-text>
      <claim-text>and transmitting messages to a second list of subscribers if said messages from said source module satisfy said set of criteria; said set of action modules including a first action module that receives messages from a filter module in said set of filter modules and responds to receipt of said messages by performing a particular action; wherein members of said first list of subscribers are established when said first source module is loaded into said memory;</claim-text>
      <claim-text>and wherein members of said second list of subscribers are established when said first filter module is loaded into said memory.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The system of claim 22 further comprising a system coordinator configured to read configuration data that specifies said set of source modules, said set of filter modules, and said set of action modules;</claim-text>
      <claim-text>said system coordinator being further configured to load said set of source modules, said set of filter modules, and said set of action modules</claim-text>
      <claim-text>into said memory in response to said configuration data.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The system of claim 23 wherein: the configuration data further specifies publisher-subscriber relationships between source modules in said set of source modules, filter modules in said set of filter modules, and action modules in said set of action modules;</claim-text>
      <claim-text>and the system coordinator is configured to establish members of said first list of subscribers and said second list of subscribers in response to said configuration data.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The system of claim 24 wherein said system coordinator changes members of at least one of said first subscription list and said second subscription list in response to input received after said set of source objects have begun executing.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The system of claim 22 further comprising a system coordinator configured to respond to particular user input by causing said first action module to change said particular action.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The system of claim 22 further comprising a system coordinator configured to respond to particular user input by changing said set of criteria used by said first filter module.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. A system for filtering data comprising: a set of one or more source modules loaded and executing in memory; wherein said source modules are software modules configured to obtain data and transmit the data in messages to a set of subscribers; a set of one or more filter modules loaded in memory; wherein said filter modules are software modules configured to receive messages and provide filtering criteria that decides whether the messages should be dispatched to a set of subscribers; wherein one or more of the filtering criteria used by said filter modules is determined by information received by said filter modules when said filter modules are loaded into dynamic memory, and not determined by code in said filter modules; a set of one or more action modules loaded in memory; wherein said action modules are software modules configured to respond to messages by performing actions; wherein one or more of said actions performed by said action modules in response to messages are determined by information received by said action modules when said action modules are loaded into dynamic memory, and not by determined code in said filter modules; said set of source modules including a first source module that receives data from a source and responds to receipt of said data by transmitting messages to each subscriber in a first list of subscribers; said set of filter modules including a filter module that receives messages from a source module in said set of source modules and responds to receipt of said messages by - determining whether said messages satisfy a set of criteria;</claim-text>
      <claim-text>and - transmitting messages to a second list of subscribers if said messages from said source module satisfy said set of criteria; said set of action modules including a first action module that receives messages from a filter module in said set of filter modules and responds to receipt of said messages by performing a particular action; wherein said set of criteria is established when said first filter module is loaded into said memory;</claim-text>
      <claim-text>and wherein said particular action is established when said first action module loaded into said memory.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. A method for filtering data, the method comprising the steps of: receiving user input from a user that specifies - relationships between source modules, filter modules and action modules;</claim-text>
      <claim-text>and - criteria to be used by said filter modules; wherein said source modules are software modules configured to obtain data and transmit the data in messages to a set of subscribers; wherein said filter modules are software modules configured to receive messages and provide filtering criteria that decides whether the messages should be dispatched to a set of subscribers; wherein one or more of the filtering criteria used by said filter modules is determined by information received by said filter modules when said filter modules are loaded into dynamic memory, and not determined by code in said filter modules; wherein said action modules are software modules configured to respond to messages by performing actions; based on said user input, loading and initializing a filtering system that includes - filter modules that filter information from said source modules based on said criteria, and - action modules that perform said actions in response to messages from said filter modules;</claim-text>
      <claim-text>and wherein the step of initializing includes sending information to said filter modules after said filter modules are loaded, said information causing said filter modules to filter based on said criteria indicated in said user input.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The method of claim 29 wherein said step of initializing includes initializing a first filter module with a particular set of arguments to cause said first filter module to filter based on said particular set of criteria.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. The method of claim 30 further comprising the steps of: after said step of initializing, receiving user input that specifies a second set of criteria that is different from said particular set of criteria; generating a second set of arguments that reflect said second set of criteria;</claim-text>
      <claim-text>and re-initializing said first filter module with said second set of arguments to cause said first filter module to filter based on said second set of criteria.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The method of claim 29 further comprising the steps of: after initializing said filtering system, receiving user input that makes a modification to said relationships between said source modules, action modules and filter modules;</claim-text>
      <claim-text>and while said filtering system is in operation, modifying said relationship between said source modules, action modules and filter modules based on said user input.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The method of claim 32 further comprising the step of generating a user interface through which a user can specify changes to said relationships.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The method of claim 29 wherein one of said action modules causes a notification to be displayed to a user in response to receipt of a message from a filter.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. The method of claim 29 further comprising the step of displaying a user interface for communicating to a user a set of parameter values that are currently in effect within said filtering system.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. The method of claim 35 wherein said user interface includes controls that allow a user to change said set of parameter values that are currently in effect within said filtering system.</claim-text>
    </claim>
  </claims>
</questel-patent-document>