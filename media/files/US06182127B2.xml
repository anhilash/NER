<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182127B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182127</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182127</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26696205" extended-family-id="42108963">
      <document-id>
        <country>US</country>
        <doc-number>09022665</doc-number>
        <kind>A</kind>
        <date>19980212</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09022665</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165568</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>2266598</doc-number>
        <kind>A</kind>
        <date>19980212</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09022665</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>3770297</doc-number>
        <kind>P</kind>
        <date>19970212</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-60037702</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/30        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>709219000</text>
        <class>709</class>
        <subclass>219000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>707999002</text>
        <class>707</class>
        <subclass>999002</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707999010</text>
        <class>707</class>
        <subclass>999010</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>707999102</text>
        <class>707</class>
        <subclass>999102</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>707E17121</text>
        <class>707</class>
        <subclass>E17121</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>709200000</text>
        <class>709</class>
        <subclass>200000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30905</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30905</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99932</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99932</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99943</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99943</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>27</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>11</number-of-drawing-sheets>
      <number-of-figures>16</number-of-figures>
      <image-key data-format="questel">US6182127</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Network image view server using efficent client-server tilting and caching architecture</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>LIGTENBERG ADRIANUS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5682441</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5682441</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>EGGER DANIEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5832494</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5832494</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>HOFFERT ERIC M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5903892</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5903892</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>GROUT GORDON BLAIR</text>
          <document-id>
            <country>US</country>
            <doc-number>5913033</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5913033</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/037,702</doc-number>
          <date>19970212</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/037702</doc-number>
          <date>19970212</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Digital Paper, LLC</orgname>
            <address>
              <address-1>Alexandria, VA, US</address-1>
              <city>Alexandria</city>
              <state>VA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>DIGITAL PAPER</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Cronin, III, John C.</name>
            <address>
              <address-1>Philadelphia, PA, US</address-1>
              <city>Philadelphia</city>
              <state>PA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Hornbacker, III, Cecil V.</name>
            <address>
              <address-1>Apopka, FL, US</address-1>
              <city>Apopka</city>
              <state>FL</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Schnader Harrison Segal &amp; Lewis, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Asta, Frank J.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A computer network server using HTTP (Web) server software combined with foreground view composer software, background view composer software, a view tile cache, view tile cache garbage collector software, and image files provides image view data to client workstations using graphical Web browsers to display the view of an image from the server.
      <br/>
      Problems with specialized client workstation image view software are eliminated by using the Internet and industry standards-based graphical Web browsers for the client software.
      <br/>
      Network and system performance problems that previously existed when accessing large image files from a network file server are eliminated by tiling the image view so that computation and transmission of the view data can be done in an incremental fashion.
      <br/>
      The view tiles are cached on the client workstation to further reduce network traffic.
      <br/>
      View tiles are cached on the server to reduce the amount of view tile computation and to increase responsiveness of the image view server.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application claims priority as a continuation of provisional U.S. patent application Ser.
      <br/>
      No. 60/037,702 filed Feb. 12, 1997.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="3">This invention relates to workstation viewing images of digital documents stored on a network server and in particular to viewing large digital document images using a client-server architecture.</p>
    <p num="4">2. Description of the Prior Art</p>
    <p num="5">
      Current methods for viewing digital document images for workstations in a networked environment use proprietary workstation application software to access a network image file server.
      <br/>
      To view an image, the application software transfers a copy of the whole image file from the image file server to the networked client workstation This method has a number limitations including: inefficient use of the network; high software purchase cost per workstation; high software administrative cost per workstation; high computational demands on the workstation; proprietary software available only for limited workstation types.
      <br/>
      Some other network image viewers may provide viewing using more optimized image transmission protocols but only with proprietary protocols and proprietary workstation software.
    </p>
    <p num="6">It is an object of the invention to provide a method of obtaining graphical images from a network server for viewing at a computer workstation which does not require proprietary workstation software.</p>
    <p num="7">It is another object to provide such a method which makes efficient use of the network and results in greater speed of image display in response to requests from the workstations.</p>
    <p num="8">It is another object to provide such a method which makes use of caching mechanisms resulting in a balanced load on the network file server and a faster response time to a single client when many clients are accessing the server simultaneously.</p>
    <p num="9">It is another object to minimize the computing resources required by a client workstation.</p>
    <p num="10">A further object is to provide apparatus for storing graphical images, requesting portions of the stored graphical images from storage, and quickly and efficiently displaying the images on a workstation.</p>
    <p num="11">A still further object is to provide a computer program which facilitates requesting portions of graphical images stored on a network server and displaying those portions on a workstation.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="12">These objects, and others which will become apparent from the following disclosure, are achieved by this invention which comprises in one aspect method of identifying and delivering a graphical image from a computer network file server comprising providing a network file server on which are stored digital document image files, said server adapted to receive requests from a Web browser in Uniform Resource Locator (URL) code, to identify the image file and format selections being requested, to compose the requested view into a grid of view tiles, and to transmit HTML code for view tiles to the requesting Web browser.</p>
    <p num="13">Another aspect of the invention comprises apparatus comprising a computer network server adapted to store digital document image files, programmed to recieve requests from a client Web browser in URL code, the URL specifying a view which identifies an image file and format, to compose the requested view, and to transmit HTML code for the resultant view to the client Web browser to display.</p>
    <p num="14">A further aspect of the invention is the computer program recorded on magnetic or optical media for use on a network server comprising code which interprets HTTP requests from a workstation for a particular view of a digital document image file stored in memory, retrieves the digital document image file, composes a grid of view tiles corresponding to the requested view of the image, computes HTML code for the grid of view tiles in a form which can be transmitted from the server to the workstation.</p>
    <p num="15">The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate an embodiment of the invention and together with the general description, serve to explain the principles of the invention.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="16">
      FIG. 1 is a diagram of the system architecture showing the relationship of the components of the system and the image view server.
      <br/>
      FIG. 2 is a flow diagram of the steps performed by the system to request, compose and display a view of an image.
      <br/>
      FIGS. 3A and 3B are diagrams that show the view tile grid as determined by the view scale.
      <br/>
      FIGS. 4A and 4B are diagrams that show the grid view tiles composed for an initial image viewS and then for a shifted view of the image.
      <br/>
      FIGS. 5A and 5B are diagrams that show the web browser display of view tiles for an initial view and then for a shifted view of the image that correspond to FIGS. 4A and 4B.
      <br/>
      FIGS. 6A and 6B are diagrams that show view tiles pre-computed by the background view composer.
      <br/>
      FIG. 7 is a high-level flow diagram of the foreground view composer.
      <br/>
      FIG. 8 is a flow diagram for the view generator component of the view composer.
      <br/>
      FIG. 9 is a flow diagram for the data output component of the view composer.
      <br/>
      FIGS. 10A, 10B, and 10C together constitute a flow diagram for the view tile cache garbage collector.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION AND THE PREFERRED EMBODIMENTS</heading>
    <p num="17">
      References will now be made in detail to the presently preferred embodiment of the invention, an example of which is illustrated in the accompanying drawings.
      <br/>
      The preferred embodiment is a server PC consisting of an Intel Pentium Pro 200 MHz processor, with at least 128 MB of RAM, an Ultra-wide Fast SCSI disk controller with at least 4 GB of hard disk space, and LAN/WAN/Internet network interface controllers.
      <br/>
      The server runs the Windows NT Server Version 4 operating system with NT File System, Microsoft Internet Information Server Version 3, and the network image server software.
      <br/>
      The server and client are configured with TCP/IP network protocols to support the HTTP (Web) protocol.
      <br/>
      No software other than a Web browser is required on the client.
      <br/>
      The preferred Web browser is Internet Explorer 3.0 or Netscape 3.0 or higher.
    </p>
    <p num="18">Referring first to FIG. 1, a network comprising client workstations 10 and 20 are connected through network connections to a network image view server 100 comprising a network server interface, preferably a web server 30 which uses the Hypertext Transfer Protocol (HTTP), a request broker 40, a foreground view composer 50, a view tile cache 60, a background view composer 80, a garbage collector 70, and a document repository 90 having image files.</p>
    <p num="19">
      The network image view server, i.e., client workstation, or "workstation," 100 can be implemented on a computer, for example a personal computer configured with a processor, I/O, memory, disk storage, and a network interface.
      <br/>
      The network image view server 100 is configured with a network server operating system and Web server software 30 to provide the network HTTP protocol link with the client workstations 10 and 20.
      <br/>
      Typical networks include many workstations served by one, and sometimes more than one, network server, the server functioning as a library to maintain files which can be accessed by the workstations.
    </p>
    <p num="20">
      In operation according to an embodiment of the method of the invention, using the Web browser software on the client workstation, a user requests an image view 110 (FIG. 2) having a scale and region specified by by means of a specially formatted Uniformed Resource Locator (URL) code using HTTP language which the Web server can decode as a request to be passed to the image view composition software and that identifies the image file to be viewed, the scale of the view and the region of the image to view.
      <br/>
      The network image server sends HTML data to the client with pre-computed hyperlinks, such that following a hyperlink by clicking on an area of an image will send a specific request to the server to deliver a different area of the drawing or to change the resolution of the image.
      <br/>
      The resultant HTML from this request will also contain pre-computed hyperlinks for other options the user may exercise.
    </p>
    <p num="21">
      The code is sent over the network to the network server where the web server software interprets the request 120, passes the view request URL to the foreground view composer software through a common gateway interface (CGI) that is designed to allow processing of HTTP requests external to the Web server software, and thereby instructs the request broker 130 to get the particular requested view, having the scale and region called for by the URL.
      <br/>
      The foreground view composer is initialized 140 and composes the requested view 150 after recovering it from memory on the network server.
      <br/>
      The foreground view composer software interprets the view request, computes which view tiles are needed for the view, creates the view tiles 160 needed for the view, and then creates Hypertext Markup Language (HTML) output file to describe the view composition to the Web browser, unless the necessary view tiles to fulfill the request are already computed and stored in cache memory of the workstation, in which case the already-computed tiles are recovered by the Web browser.
      <br/>
      In either case, the foreground view composer formats the output 170 and then intitializes backgound view composer 180 which passes the formatted output to the Web server, which in turn transmits the formatted output over the network to the Web browser 200 on the requesting workstation 10, where the requesting browser displays any view tiles already cached 210, combined with newly computed view tiles 220 which are fetched from the server.
    </p>
    <p num="22">
      The generation of the view tiles 160 is handled by an image tiling routine which divides a given page, rendered as an image, into a grid of smaller images (FIG. 3A) called view tiles is A1, A2, B1, etc. (or just tiles in the image view server context).
      <br/>
      These tiles are computed for distinct resolutions (FIG. 3B) of a given image at the server according to the URL request received from the browser software on the workstation.
      <br/>
      The use of tiling enables effective image data caching 60 at the image view server and by the browser 10 at the client workstation.
    </p>
    <p num="23">
      The preferred view tile format is 128 pixel by 128 pixel GIF image files.
      <br/>
      The GIF image file format is preferred because of Web browser compatibility and image file size.
      <br/>
      The GIF image file format is the most widely supported format for graphical Web browsers and therefore gives the maximum client compatibility for the image view server.
      <br/>
      The GIF image format has the desirable properties of loss-less image data compression, reasonable data compression ratios, color and grayscale support, and a relatively small image file header, which relates to the selection of view tile size.
      <br/>
      With a raw image data size for monochrome view tiles of 2,048 bytes and a typical GIF compression of 4 to 1, the compressed data for a view tile is approximately 512 bytes.
      <br/>
      With many image file formats, such as TIFF and JPEG, the image file header (and other overhead information such as data indexes) can be as large or larger than the image data itself for small images such as the view tiles; whereas a GIF header for a monochrome image adds as little as 31 bytes to the GIF image file.
      <br/>
      Alternate view tile formats such as Portable Network Graphics (PNG) may be used, especially as native browser support for the format becomes common.
    </p>
    <p num="24">
      The 128 pixel view tile size is a good compromise between view tile granularity and view tile overhead.
      <br/>
      The view tile granularity of 128 pixels determines the minimum view shift distance (pan distance) that can be achieved with standard graphical Web browser and level 2 HTML formatting.
      <br/>
      This allows the adjustment of the view position on a 0.64 inch grid when viewing a 200 pixel-per-inch image at 1 to 1 scale.
      <br/>
      Reducing the size of the view tiles allows finer grid for view positioning, but has the problem that the view tile overhead becomes excessive.
    </p>
    <p num="25">
      A view tile typically represents more or less than 128 * 128 pixels of the image file.
      <br/>
      If the view being displayed is reduced 2 to 1, then each view tile will represent a 256 * 256 pixel area of the image file that has been scaled down to 128 * 128 pixels.
      <br/>
      For each possible scale factor there is an array of tiles to represent the view.
      <br/>
      Fixed size view tiling is beneficial because it allows more effective use of the caching mechanism at the server and at the client.
      <br/>
      For example, consider a view of 512 pixels by 512 pixels.
      <br/>
      Without tiling, this view is composed of a single GIF file that is displayed by the Web browser, and so if the user asks for the view to be shifted by 256 pixels, then a new GIF image of 512 * 512 pixels needs to be created and transmitted to the Web browser.
      <br/>
      With tiling, the first view would cause 16 view tiles to be computed and transmitted for display by the Web browser.
      <br/>
      When the request for the view to be shifted by 256 pixels is made, only 8 view tiles representing an area of 256 by 512 pixels need to be computed.
      <br/>
      In addition only the 8 new view tiles need to be transmitted to the Web browser since the shifted view will reuse 8 view tiles that are available from the Web browser cache.
      <br/>
      The use of tiling cuts the computation and data transmission in half for this example.
    </p>
    <p num="26">
      The use of view tiling also allows the image view server to effectively pre-compute view tiles that may be required by the next view request.
      <br/>
      The image view server background view composer computes view tiles that surround the most recent view request in anticipation a request for a shifted view.
      <br/>
      When the shifted view is requested, the foreground view composer can use the pre-computed view tiles and eliminate the time to compute new view tiles for the view.
      <br/>
      For frequently accessed images there is a good chance that the view tiles for a view may already exist in the view tile cache since the view tile cache maintains the most recently accessed view tiles.
      <br/>
      Since millions of view tiles may be created and eventually exceed the storage capacity of the image view server, the view tile cache garbage collector removes the least recently accessed view tiles in the case where the maximum storage allocation or minimum storage free space limits are reached.
    </p>
    <p num="27">
      The number of view tiles needed to render a given view size increases in inverse proportion to the square of the view tile size.
      <br/>
      A 64 pixel view tile would require 4 times as many view tiles to render the same view area, and so is less preferred.
      <br/>
      The view tile overhead exists as quantity of data and as the number of network transactions.
      <br/>
      The data quantity overhead comes from the image file header size as a proportion of the total image file size as described above and as data needed to make the view tile references in the HTML text file.
      <br/>
      The network transaction overhead increases with smaller view tiles since each of the view tiles requires a network transaction.
      <br/>
      The increased number of network transactions required with a smaller view tile size would slow the response to render a view.
    </p>
    <p num="28">
      The HTML output file produced by the foreground view composer is passed to the Web server software to be transmitted to the Web browser.
      <br/>
      The graphical Web browser serves as the image viewer by utilizing the HTML output from the image view server to compose and display the array of view tiles that form a view of an image.
      <br/>
      The HTML page data list the size, position and the hyperlink for each view tile to be displayed.
      <br/>
      The view tiles are stored in the GIF image file format that can be displayed by all common graphical Web browsers.
      <br/>
      The Web browser will retrieve each view tile to be displayed from a local cache if the view tile is present, otherwise from the image view server.
    </p>
    <p num="29">
      The request broker 40 takes the raw request from the network server interface 130, interprets the request, communicates with the other system components and determines what the appropriate response should be.
      <br/>
      It also determines when the response is returned.
      <br/>
      In the preferred embodiment the request broker is implemented with the Web server Common Gateway Interface (CGI).
      <br/>
      Options exist to use other direct Application Program Interfaces (API) to the Web server.
    </p>
    <p num="30">
      To support the tiling and caching of many images on the same image view server, each view tile must be uniquely identified for reference by the Web browser with a view tile URL.
      <br/>
      This uniqueness is accomplished through a combination of storage location and view tile naming.
      <br/>
      Uniqueness between images is accomplished by having a separate storage subdirectory in the view tile cache for each image.
      <br/>
      Uniqueness of view tiles for each scale of view is accomplished through the file name for each view tile.
      <br/>
      The view tile name is preferably of the following form:
      <br/>
      V&lt;SCALE&gt;&lt;TILE_NUMBER&gt;.GIF
    </p>
    <p num="31">
      The &lt;SCALE&gt; value is a 2 character string formed from the base 36 encoding of the view scale number as expressed in parts per 256.
      <br/>
      The &lt;TILE_NUMBER&gt; value is a 5 character string formed from the base 36 encoding of the tile number as determined by the formula:
      <br/>
      TILE_NUMBER=TILE_ROW*IMAGE_TILE_WIDTH+TILE_COLUMN
    </p>
    <p num="32">
      The TILE_ROW and TILE_COLUMN values start at 0 for this computation.
      <br/>
      For example the second tile of the first row for a view scaled 2:1 would be named under the preferred protocol:
    </p>
    <p num="33">V3J0001.GIF</p>
    <p num="34">
      The full URL reference for the second tile of the first row for image number 22 on the image view server would be:
      <br/>
      http://hostname/view-tile-cache-path/000022/V3J00001.GIF
    </p>
    <p num="35">
      In addition to the view tile position and view scale, other view attributes that may be encoded in the view tile storage location or in the view tile name.
      <br/>
      These attributes are view rotation angle, view x-mirror, view y-mirror, invert view.
      <br/>
      A view tile name with these extra view attributes can be encoded as:
      <br/>
      V&lt;SCALE&gt;&lt;TILE_NUMBER&gt;&lt;VIEW_ANGLE&gt;&lt;X_MIRROR&gt;&lt;Y_MIRROR&gt;&lt;INVERT&gt;.GIF
    </p>
    <p num="36">
      VIEW_ANGLE is of the form A&lt;ANGLE&gt;. X_MIRROR, Y_MIRROR, and INVERT are encoded by the single characters X, Y, and I respectively.
      <br/>
      An example is:
      <br/>
      V3J00001A90XYI.
      <br/>
      GIF
    </p>
    <p num="37">
      The Web server 30 is configured to recognize the above-described specially formatted request Uniform Resource Locators (URL) to be handled by the image view server request broker 40.
      <br/>
      This is done by association of the request broker 40 with the URL path or with the document filename extension.
    </p>
    <p num="38">
      The foreground view composer 50 interprets the view request command 140 to determine what view needs to be composed.
      <br/>
      The view request may be absolute by defining scale and position, relative by defining scale and position as a delta to a previous view, or implied by relying on system defaults to select the view.
    </p>
    <p num="39">View computation software routine 150 is illustrated in FIG. 7 wherein the command interpreter 151 takes the view request and determines 152 what scale view tile grid is needed for the view and what view tiles within the grid are needed for the view 150 (FIG. 2), and generates the view tile 153, resulting in formatted view output 154.</p>
    <p num="40">
      The view tile generator routine 160 performs the actual creation of the view tiles according to the preferred steps shown in FIG. 8.
      <br/>
      The view tile generator receives information from the view computation as to what view tiles are needed for the view.
      <br/>
      It has access to records in the cache 80 that determine which tiles have already been created and are resident in the cache.
      <br/>
      If a needed view tile is in the cache then its last access time is updated to prevent the cache garbage collector from deleting the view tile.
      <br/>
      If a needed view tile is not in the cache, then the view tile generator creates the view tile from the image file 90.
      <br/>
      The view tile generator uses a software imaging library that supports rendering many digital document file formats including monochrome raster images, grayscale raster images, color raster images as well as many content rich non-raster formats such as Adobe Portable Document Format (PDF), PostScript, HPGL, etc.
      <br/>
      When rendering monochrome image data the imaging library scale-to-gray scaling is used to provide a more visually appealing rendition of the reduced image.
    </p>
    <p num="41">
      For example, a specific view request might include tiles B2, C2, B3, and C3 (FIGS. 4A and 5A).
      <br/>
      If, after viewing those tiles, the client decides that the view to the immediate left is desired, then the server would send tiles A2 and A3 (FIGS. 4B and 5B).
      <br/>
      This assumes that the client retains in a cache the other tiles.
      <br/>
      If the client does not cache then tiles A2, A3, B2, and B3 are sent.
    </p>
    <p num="42">
      Formatted output is created 170 to reference the view tiles needed to display the completed view.
      <br/>
      The formatted output uses HTML to describe the order, position and hyperlink for each view tile to be displayed.
      <br/>
      The output formatter applies another optimization by detecting white view tiles and replacing the hyperlink for the image specific white tile with a common white tile reference.
      <br/>
      This eliminates transmission of all but one white tile and eliminates the need to transmit any white tiles once the common white tile is cached by the Web browser.
    </p>
    <p num="43">The foreground view composer 50 controls the background view composer 80 by stopping it when a foreground view is being composed and then starting it with information about the newest view, once the new view has been composed 180.</p>
    <p num="44">
      Preferably, the background view composer 80 is programmed to optimize performance of the system by pre-computing, i.e., composing, view tiles that may be needed between view requests to the server.
      <br/>
      The tiles to be pre-computed are the tiles surrounding the most recent view and with the same scale as the most recent view.
      <br/>
      The order of view tile pre-computation is a clock-wise spiral out from the most recent view.
      <br/>
      The number of view tiles pre-computed around a view are preferably limited by a system configuration parameter to prevent useless creation of view tiles that may never be needed.
      <br/>
      Once the maximum number of pre-computed view tiles is reached for the most recent view scale, the pre-computation can proceed for alternate view scales.
      <br/>
      The background view composer preferably is programmed to work at a low priority to minimize interference with more critical system tasks.
    </p>
    <p num="45">
      FIG. 6A illustrates how the background view composer algorithm works.
      <br/>
      Assuming that for a given view requested by the client, tiles C3, C4, D3 and D4 are delivered, after those tile are delivered to the Web browser, the background view composer routine within the server program creates the tiles around these tiles, starting at E4, by composing or computing such surrounding tiles.
      <br/>
      As long as the client continues to view this page at this scale factor, the server will compute view tiles expanding outward from the tiles requested last.
      <br/>
      FIG. 6B illustrates another request made by a client, after the two rotations of tiles were generated.
      <br/>
      The request asked for tiles G3, G4, H3, and H4.
      <br/>
      When the tile pre-computation begins for this request it will create tiles G5, H5, I5, I4, I3, I2, H2, and G2 in the first rotation, but it will not attempt to create tiles in the F column.
    </p>
    <p num="46">
      Preferably a view tile cache garbage collector algorithm 70 manages the use of the storage for view tiles (FIGS. 10A, 10B, 10C).
      <br/>
      The garbage collector maintains the view tile cache 60 (FIG. 1) to keep the view tile cache storage usage below a storage limit and to keep the storage free space above a free space limit.
      <br/>
      The garbage collector constantly scans the cache to accumulate size and age statistics for the view tiles.
      <br/>
      When the cache size needs to be reduced, the garbage collector selects the least recently accessed view tiles for deletion until the cache size is within limits.
      <br/>
      The garbage collector runs at a low priority to minimize interference with more critical system tasks.
      <br/>
      The storage free space limit is designed as a fail-safe limit to prevent the system from running out of storage.
      <br/>
      The free space limit is checked on a periodic basis and if it is exceeded the garbage collector becomes a critical system task and runs at a high priority until the storage free space is greater than the free space limit.
    </p>
    <p num="47">
      Digital document files may be stored on the web server or on another server within the network.
      <br/>
      The image files are typically managed as digital documents with attribute information that is stored with the documents in the document repository 90.
      <br/>
      A digital document management system can run independently or in conjunction with the image view server software.
      <br/>
      The digital document file may be a raster image file or a non-raster document file.
      <br/>
      If the digital document file is a non-raster format then it is rendered as a monochrome, grayscale, or color raster image for viewing.
    </p>
    <p num="48">
      The graphical Web browser on the client workstation 10 receives HTML data from the image view server 210 that contains hyperlinks to the view tiles within the view tile cache 60 to be displayed and formatting that describes the layout of the of the tiles to form the image view.
      <br/>
      The Web browser initially must fetch each view tile 220 for a view from the view server.
      <br/>
      After the initial view, whenever a view overlaps with a previous view at the same scale, the Web browser preferably retrieves view tiles that have been previously displayed from the Web browser's local cache 210 rather than from the server.
    </p>
    <p num="49">
      Performance and usability of document viewing can be increased by using progressive display of tiled images.
      <br/>
      By using an image file format that allows a rough view of the image to be displayed while the remainder of the image content is downloaded, a rough view of the document can be seen more quickly.
    </p>
    <p num="50">
      Since most Web browsers can only transfer 1 to 4 GIF images at a time, usually not all of the view tiles in the view array can be progressively displayed at the same time.
      <br/>
      Therefore, it is preferred that to implement progressive display, algorithms at the client are provided to accept an alternate data format that would allow the whole document viewing area screen to take advantage of the progressive display while still taking advantage of the benefits of tiling and caching at the client.
      <br/>
      This can be accomplished in a Web browser environment using algorithms written in Java, JavaScript, or ActiveX technologies.
      <br/>
      By using client software to enhance the client viewer, additional enhancements to performance can be made by using alternate view tile image formats and image compression algorithms.
      <br/>
      A significant example would be to use the Portable Network Graphics (PNG) format with the optimization of having the image view server and client transfer only one image header common to be shared by all view tiles and then sending the low-resolution compressed image data for each view tile followed by the full-resolution image data for each view tile.
    </p>
    <p num="51">
      In addition to displaying the view tile array for the requested view, the HTML data can include hyperlinks used to form a tool bar that provide the user with a way to send requests to the server to change the current view by increasing or decreasing the view scale, shifting the view area, or changing the view size.
      <br/>
      Such hyperlinks would reference the current view and also contain operation codes that direct the image view server to compose a new view based on the hyperlink selected by the user.
    </p>
    <p num="52">
      The method, apparatus, and software article of the invention provide an improved client-server architecture using a graphical Web browser to access the image view server which makes efficient use of the network.
      <br/>
      By using image tiling and caching according to the preferred method, relatively small amounts of data need to be transmitted when the user selects a new view of an image already received and viewed.
      <br/>
      The server sends the requested image in the request format to the workstation and then allows viewing the image from the local copy of the image file.
      <br/>
      The image view server provides a better solution by utilizing lower cost graphical Web browsers for the workstations to access a network image view server that provides views of the image that can be displayed on the workstation by the graphical Web browser.
      <br/>
      For example an E-size engineering drawing raster image file is 8 million bytes in size when imaged in monochrome at 200 pixels-per-inch.
      <br/>
      With commonly used data compression the image file can be reduced to 250 kilobytes.
      <br/>
      With a low bandwidth 28.8 kilobaud modem network connection with approximately 3 kilobytes-per-second throughput, it 83 seconds (250 KB/3 KB/second) to transfer the image file to the workstation application for viewing.
      <br/>
      With the image view server only the image data to be displayed needs to be transmitted.
      <br/>
      A typical view size of 896 by 512 pixels is made up of a 7 by 4 array of 128 pixel * 128 pixel view tiles.
      <br/>
      The monochrome view tiles are transmitted in a compressed format that typically yields tiles that are 512 bytes each so the entire view is approximately 14 kilobytes (0.5 KB * 28 tiles) and the transfer takes approximately 4.8 seconds (14 KB /3 KB/second).
      <br/>
      This method of image viewing provides better response to the user with much lower demand on the network connection.
      <br/>
      A local-area-network typically utilizes a 10 megabit-per-second media so the savings from the efficiency of the image view server does not seem obvious.
      <br/>
      However, if the 10 megabit-per-second network is shared by 100 users, then the average bandwidth per user is only about 12.5 kilobytes-per-second so the efficiency of the image view server is still a benefit.
      <br/>
      Another benefit of the image view server is that the data transfer size remains constant even if the size of the view image is increased.
      <br/>
      If the image file size was 4 times larger than with the previous example as may be the case with a larger image, a higher resolution image or a less compressible image then the network load by the image view server would remain unchanged while network load of the traditional image viewer would quadruple.
    </p>
    <p num="53">
      The invention lowers the software purchase costs since a graphical Web browser is a common workstation application that is inexpensive and the expense for the Web browsers is often a cost that is required for the workstation for other purposes and in many cases is included with the workstation operating system.
      <br/>
      The costs for the server software can be shared over hundreds of client workstations.
    </p>
    <p num="54">The software administrative cost is reduced by using the graphical Web browser that is a common workstation application that is already being administered, by eliminating an additional proprietary workstation software application, and by using server software that only needs to be administered on a central server rather than for each workstation.</p>
    <p num="55">The graphical Web browser is available on all common workstation types as well other devices such as notebook computers, palm-top computers, Network Computers and Web television adapters to provide a widely available solution.</p>
    <p num="56">
      It will be apparent to those skilled in the art that various modifications and variations can be made in network image view server and image view server methods without departing from the scope or spirit of the invention.
      <br/>
      Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein.
      <br/>
      It is intended that the specification and examples be considered as exemplary only, with a true scope and spirit of the invention being indicated by the following claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method of identifying and delivering a graphical image from a computer network file server comprising:</claim-text>
      <claim-text>providing a network file server on which are stored digital document image files, said server adapted to receive requests for views from a Web browser in Uniform Resource Locator (URL) code; identifying the image file and format selections from the requested views, such formats comprising opcodes for selecting an updated view and view template for determining the presentation of the view; in response to receiving the view tile request and identifying the image file and format selections, retrieving the digital document image file and composing the requested view into a grid of view tiles corresponding to the requested view of the image; computing and transmitting HTML code for the grid of view tiles to the requesting Web browser.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. Method according to claim 1 wherein the URL view requests identify the image file, page number within the image file, formats comprising one or more of position, scale, rotation angle, x mirror, y mirror, inversion, region, opcode to select an updated view, and view template to determine the presentation of the view, and wherein the transmitted HTML code for the view tiles causes the requesting Web browser to display the requested view of the requested graphical image in the requested format.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. Method according to claim 2 wherein an array of view tiles selected from the grid of view tiles to fulfill the request described by the URL is computed by the network file server and transmitted over the network to the Web browser on the workstation in HTML and GIF format.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. Method according to claim 3 wherein the file server creates an HTML output file listing the size, position, and hyperlink for each view tile to be displayed, and wherein the view tiles are stored in GIF image file format for each view tile for display by the Web browser.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. Method according to claim 1 wherein view tiles adjacent to the array of view tiles transmitted to the Web browser to fulfill the request described by the URL are computed by the server during a time period subsequent to the transmission of the array of view tiles, and the adjacent view tiles are stored in cache form on the server in anticipation of possible future requests to be received from the workstation.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A method of identifying and delivering a graphical image from a computer network file server comprising providing a network file server on which are stored digital document image files, said server adapted to receive requests from a Web browser in Uniform Resource Locator (URL) code, to identify the image file and format selections being requested, to compose the requested view into a grid of view tiles, and to transmit HTML code for view tiles to the requesting Web browser;</claim-text>
      <claim-text>wherein view tiles adjacent to the array of view tiles transmitted to the Web browser to fulfill the request described by the URL are computed by the server during a time period subsequent to the transmission of the array of view tiles, and the adjacent view tiles are stored in cache form on the server in anticipation of impossible future requests to be received from the workstation;</claim-text>
      <claim-text>and wherein the view tiles adjacent to the array of view tiles transmitted to the Web browser are computed by the server in a clockwise or counterclockwise spiral sequence outward from the array of view tiles transmitted and the adjacent view tiles are cached in network server memory.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. Method according to claim 2 wherein the Web browser is adapted to cache view tiles in workstation memory which have been received for display and view, and in the event that a view is subsequently requested which includes one or more of the view tiles cached in the workstation memory, to retrieve the one or more cached view tiles from the local workstation memory rather than from the network server.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. Method according to claim 2 wherein the view tiles are 128 pixel by 128 pixel GIF image files.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. Method according to claim 2 wherein each view tile is identified by the server with a unique URL which includes storage location and view tile naming data.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. Method according to claim 2 wherein a separate storage subdirectory is computed by the server in the view tile cache for each image.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. Method according to claim 9 wherein the URL includes identification data for each scale of view through the file name for each view tile.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A method of identifying and delivering a graphical image from a computer network file server comprising providing a network file server on which are stored digital document image files, said server adapted to receive requests from a Web browser in Uniform Resource Locator (URL) code, to identify the image file and format selections being requested, to compose the requested view into a grid of view tiles, and to transmit HEML code for view tiles to the requesting Web browser;</claim-text>
      <claim-text>wherein the URL view requests identify the image file, page number within the image file, formats comprising one or more of position, scale, rotation angle, x mirror, y mirror, inversion, region, opcode to select an updated view, and view template to determine the presentation of the view, and wherein the transmitted HTML code for the view tiles causes the requesting Web browser to display the requested view of the requested graphical image in the requested format;</claim-text>
      <claim-text>wherein each view tile is identified by the server with a unique URL which includes storage location and view tile naming data;</claim-text>
      <claim-text>wherein the URL includes identification data for each scale of view through the file name for each view tile;</claim-text>
      <claim-text>and wherein view tiles are named in the format V&lt;SCALE&gt;&lt;TILE_NUMBER&gt;.GIF wherein &lt;SCALE&gt;value is a 2 character string formed from the base 36 encoding of the view scale number as expressed parts per 256;</claim-text>
      <claim-text>&lt;TILE_NUMBER&gt;value is a 5 character string formed from the base 36 encoding of the tile number as determined by the formula:</claim-text>
      <claim-text>wherein TILE_ROW and TILE_COLUMN values start at 0.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A method of identifying and delivering a graphical image from a computer network file server comprising providing a network file server on which are stored digital document image files, said server adapted to receive requests from a Web browser in Uniform Resource Locator (URL) code, to identify the image file and format selections being requested, to compose the requested view into a grid of view tiles, and to transmit HTML code for view tiles to the requesting Web browser;</claim-text>
      <claim-text>wherein the URL view requests identify the image file, page number within the image file, formats comprising one or more of position, scale, rotation angle, x mirror, y mirror, inversion, region, opcode to select an updated view, and view template to determine the presentation of the view, and wherein the transmitted HTML code for the view tiles causes the requesting Web browser to display the requested view of the requested graphical image in the requested format;</claim-text>
      <claim-text>wherein each view tile is identified by the server with a unique URL which includes storage location and view tile naming data;</claim-text>
      <claim-text>wherein the URL includes identification data for each scale of view through the file name for each view tile;</claim-text>
      <claim-text>and wherein view rotation angle, view x-mirror, view y-mirror and invert view information is encoded in the URL naming format in the form V&lt;SCALE&gt;&lt;TILE_NUMBER&gt;&lt;VIEW_ANGLE&gt;&lt;X_MIRROR&gt;&lt;Y_MIRROR&gt;&lt;INVERT&gt;.GIF wherein VIEW_ANGLE is of the form A&lt;ANGLE&gt;;</claim-text>
      <claim-text>and X_MIRROR, Y_MIRROR, and INVERT are encoded by the single characters X, Y, and I, respectively.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. Method according to claim 1 wherein the Web server is implemented with Web server Common Gateway Interface (CGI).</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. Method according to claim 1 wherein the requesting client workstation is configured to run applets or scripts to improve communications with the network image server to further reduce the amount of redundant data that needs to be transferred to the client workstation.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. Method according to claim 1 wherein the client workstation and network server are adapted to minimize the amount of redundant data that is sent to the client.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. Method according to claim 1 wherein higher resolution images are used by the server to sample lower resolution images at the client.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. Method according to claim 1 wherein grey scale is used to provide shades of grey or color image files are stored on the server and communicated to the client in color or grey scale.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. Method according to claim 1 wherein non-raster files are rasterized by the server for viewing by the client.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. Method according to claim 1 wherein image files are stored on a second server and retrieved and temporarily stored by the network server when needed.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. Apparatus comprising: a computer network server adapted to store digital document image files, programming to receive requests from a Web browser in Uniform Resource Locator (URL) code, the URL specifying a view which identifies an image file and format, such formats comprising opcodes for selecting an updated view and view template for determining the presentation of the view; in response to receiving the view tile request and identifying the image file and format selections, retrieving the digital document image file and composing the requested view into a grid of view tiles corresponding to the requested view of the image; computing and transmitting HTML code for the resultant grid of view tiles to the client Web browser to display.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. Apparatus according to claim 21 wherein the server is programmed with Web server software and a foreground view composer which is adapted to interpret the view request, compute a grid of view tiles of the image, compute an array of view tiles which are needed for the requested view, compose the array of view tiles needed for the requested view, and create an HTML output file to describe the view composition to the Web browser.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. Apparatus according to claim 21 wherein the server is programmed with a background view composer adapted to compute and cache, during periods between view requests, view tiles which surround the most recent view request in the same scale as the most recent view so that when a new, shifted view is subsequently requested, the server program computes which of the resultant cached surrounding view tiles can be used in response to the request for shifted view, and composes a view which comprises one or more of the cached view tiles.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. Apparatus comprising a computer network server adapted to store digital document image files, programmed to receive requests from a client Web browser in URL code, the URL specifying a view which identifies and image file and format, to compose the requested view, and to transmit HTML code for the resultant view to the client Web browser to display;</claim-text>
      <claim-text>wherein the surrounding view tiles are computed by the background view composer in a clock-wise or counter-clockwise spiral out from the most recent view.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. Apparatus according to claim 21 wherein the client web browser is programmed to cache view tiles which are received in response to requests to the server and to access the cached view tiles when included within an array included in a subsequently requested view.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. Apparatus according to claim 21 wherein the server is programmed with a view tile cache garbage collector adapted to remove the least recently accessed view tiles when maximum storage allocation or minimum storage free space limits are reached.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. Article comprising a computer program recorded on magnetic or optical media for use on a network server comprising: code which interprets HTTP requests from a workstation for a particular view of a digital document image file and format, such formats comprising opcodes for selecting an updated view and view template for determining the presentation of the view, being stored in memory; in response to receiving the view tile request and identifying the image file and format selections, retrieving the digital document image file and composing the requested view into a grid of view tiles corresponding to the requested view of the image;</claim-text>
      <claim-text>and, computing HTML code for the grid of view tiles in a form which can be transmitted from the server to the workstation.</claim-text>
    </claim>
  </claims>
</questel-patent-document>