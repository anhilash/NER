<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185725B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185725</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185725</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26720467" extended-family-id="42113846">
      <document-id>
        <country>US</country>
        <doc-number>09057084</doc-number>
        <kind>A</kind>
        <date>19980408</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09057084</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43172225</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>5708498</doc-number>
        <kind>A</kind>
        <date>19980408</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09057084</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>4347697</doc-number>
        <kind>P</kind>
        <date>19970411</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-60043476</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/50        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>50</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>716105000</text>
        <class>716</class>
        <subclass>105000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>716116000</text>
        <class>716</class>
        <subclass>116000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-017/50D4</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>017</main-group>
        <subgroup>50D4</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5054</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5054</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>7</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>10</number-of-figures>
      <image-key data-format="questel">US6185725</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Apparatus and method for partitioning logic into a programmable logic device</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HUBER GARY D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5455775</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5455775</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>CHEN NANG-PING, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5475830</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5475830</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>SNIDER GREGORY S</text>
          <document-id>
            <country>US</country>
            <doc-number>5519629</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5519629</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>RUSH KENNETH, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5742181</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5742181</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>ROSTOKER MICHAEL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5933356</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5933356</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/043476</doc-number>
          <date>19970411</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Altera Corporation</orgname>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>INTEL</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Pedersen, Bruce</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Galliani, William S.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <orgname>Pennie &amp; Edmonds LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Lintz, Paul R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method of partitioning logic into a programmable logic device includes the steps of synthesizing a logic design into a network of hierarchical components.
      <br/>
      Each hierarchical component is then mapped to a minimum number of logic array blocks in a programmable logic device.
      <br/>
      The mapping operation may be performed by independently synthesizing the hierarchical components into a network of virtual logic elements, assigning the virtual logic elements to virtual logic array blocks, and mapping the virtual logic array blocks to the logic array blocks in the programmable logic device.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application claims priority to the provisional patent application entitled "Apparatus and Method for Partitioning Logic into a Programmable Logic Device", filed Apr. 11, 1997, Ser.
      <br/>
      No. 60/043,476.
    </p>
    <heading>BRIEF DESCRIPTION OF THE INVENTION</heading>
    <p num="2">
      This invention relates generally to the process of implementing logic in programmable logic devices.
      <br/>
      More particularly, this invention relates to a technique of partitioning logic into a programmable logic device.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="3">
      FIG. 1 illustrates a programmable logic device 20 composed of logic array blocks 22.
      <br/>
      Horizontally aligned logic array blocks 22 form logic array block rows 23.
      <br/>
      Each logic array block 22 consists of a group of logic elements 24.
    </p>
    <p num="4">
      Around the periphery of the programmable logic device 20 are input/output nodes 26.
      <br/>
      Each logic element 24 and input/output node 26 can generate one or more signals that can be routed to other logic elements 24 or input/output nodes 26 through column interconnect circuitry 28 and row interconnect circuitry 30.
    </p>
    <p num="5">
      FIG. 2 is a more detailed view of a logic array block 22.
      <br/>
      The figure illustrates a set of logic elements 24.
      <br/>
      Local interconnect circuitry 31 routes signals generated within the logic array block 22 (or signals generated externally to the logic array block which have been routed to this logic array block) to the logic elements 24 within that logic array block.
    </p>
    <p num="6">
      Each row of logic array blocks 23 has associated row interconnect circuitry 30 that can route signals between the different logic array blocks in a row.
      <br/>
      The columm interconnect circuitry 28 operates in a similar manner to route signals between different logic array blocks in a column.
    </p>
    <p num="7">
      A logic design is a description of a logic circuit that can be implemented with a programmable logic device.
      <br/>
      A logic design typically consists of a collection of logic components and input/output pins that connect together through input and output ports.
      <br/>
      Large logic designs will typically be described in a hierarchical fashion, where some of the logic components represent other logic "subdesigns".
      <br/>
      For example, FIG. 3 illustrates a hierarchical logic design 32.
      <br/>
      The hierarchical logic design 32 includes element A:1, which includes: input/output ports 33, logic gate 35, and hierarchical components B:1, B:2, and D:1.
      <br/>
      Hierarchical component B:1 includes component C:1, hierarchical component B:2 includes component C:2, and hierarchical component D:1 includes components E:1 and E:2.
    </p>
    <p num="8">
      FIG. 4 illustrates a partially flattened hierarchical design 36 corresponding to FIG. 3.
      <br/>
      Observe in FIG. 4 that hierarchical component B:1 has been flattened such that it does not include hierarchical component C:1.
      <br/>
      Similarly, hierarchical component B:2 is flattened such that it does not include hierarchical component C:2.
    </p>
    <p num="9">Hierarchical logic designs of the type shown in FIGS. 3 and 4 can be specified with a number of well-known entry mechanisms, such as graphical schematic entry or textual design entry (such as using the VHDL language).</p>
    <p num="10">
      When implementing a logic design in a programmable logic device, the logic design is typically synthesized into a completely flattened (non-hierarchical) network of virtual logic elements.
      <br/>
      FIG. 5 illustrates a fully flattened hierarchical design corresponding to the design of FIGS. 3 and 4.
      <br/>
      The synthesized virtual logic elements are assigned to physical logic elements 24 of a programmable logic device 20.
      <br/>
      Such an assignment is called a partitioning.
      <br/>
      Thus, partitioning refers to a process of converting a logic design to individual logical elements 24 of a programmable logic device 20 that are used to implement the logic design.
    </p>
    <p num="11">
      To satisfy the routing requirements of the device, a partitioning must observe the maximum number of signals that are allowed to enter or leave each logic array block 22 or each logic array block row 23.
      <br/>
      A partitioning that minimizes the routing requirements in the device is considered superior to one that does not.
    </p>
    <p num="12">
      In the prior art, if a change is made to one of the hierarchical components of a design, say hierarchical component B1 of FIG. 3, the entire design has to be resynthesized and re-partitioned.
      <br/>
      Alternatively, the design software can re-synthesize only those logic elements that are affected by changes to the logic design and only re-partition those logic elements that were subsequently added or altered.
      <br/>
      Unfortunately, re-partitioning only those logic elements that were altered can lead to an inferior partitioning, or in a worse case, an unsuccessful partitioning.
      <br/>
      Unsuccessful partitioning occurs when the modified logic changes the routing requirements of the unmodified logic elements, the modified logic makes demands upon routing resource pools that are shared with the unmodified logic element, or when the modified virtual logic elements cannot be assigned to their preferred logic elements because the logic elements have been previously assigned to some of the unmodified virtual logic elements.
    </p>
    <p num="13">In view of the foregoing, it would be highly desirable to provide an improved technique for partitioning a logic design into a programmable logic device.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="14">
      A method of partitioning logic into a programmable logic device includes the steps of synthesizing a logic design into a network of hierarchical components.
      <br/>
      Each hierarchical component is then mapped to a minimum number of logic array blocks in a programmable logic device.
      <br/>
      The mapping operation may be performed by independently synthesizing the hierarchical components into a network of virtual logic elements, assigning the virtual logic elements to virtual logic array blocks, and mapping the virtual logic array blocks to the logic array blocks in the programmable logic device.
    </p>
    <p num="15">The technique of the invention improves partitioning, aids in the incremental re-repartitioning of logic, and improves the consistency of logic delays within similar hierarchical components.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="16">
      For a better understanding of the nature and objects of the invention, reference should be made to the following detailed description taken in conjunction with the accompanying drawings, in which:
      <br/>
      FIG. 1 illustrates a prior art programmable logic device that may be programmed in accordance with the invention.
      <br/>
      FIG. 2 illustrates a programmable logic block and associated logic elements of the programmable logic device of FIG. 1.
      <br/>
      FIG. 3 illustrates a hierarchical logic design.
      <br/>
      FIG. 4 illustrates a partially flattened hierarchical logic design.
      <br/>
      FIG. 5 illustrates a fully flattened hierarchical logic design.
      <br/>
      FIG. 6 illustrates an apparatus that may be used to practice the invention.
      <br/>
      FIG. 7 illustrates processing steps associated with-an embodiment of the invention.
      <br/>
      FIG. 8 illustrates logic array block hierarchical partitioning in accordance with the invention.
      <br/>
      FIG. 9 illustrates logic array block non-hierarchical partitioning in accordance with the prior art.
      <br/>
      FIG. 10 illustrates a programmable logic device configured in accordance with the invention forming a part a larger digital system.
      <br/>
      Like reference numerals refer to corresponding parts throughout the several views of the drawings.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="17">
      FIG. 6 illustrates a computer 40 that may be used to practice the present invention.
      <br/>
      The computer 40 includes a Central Processing Unit (CPU) 42 which communicates with a set of input/output devices 44 over a bus 46.
      <br/>
      The input/output devices include standard components, such as a keyboard, mouse, scanner, monitor, printer, etc.
      <br/>
      The CPU 42 also communicates with a memory 48, which stores a logic partitioning program 48 in accordance with the invention.
      <br/>
      A logic design 50 is passed to the input/output devices 44.
      <br/>
      The logic design 50 may be in the form of a graphical schematic, a VHDL description, etc.
      <br/>
      The logic design 50 is then processed by the logic partitioning program 48 to produce a partitioned design for a programmable logic device 51.
      <br/>
      The partitioned design 51 may be passed through the input/output devices 44 so that it can be implemented into a programmable logic device using standard techniques.
    </p>
    <p num="18">
      FIG. 7 illustrates processing steps associated with on embodiment of the logic partitioning program 48 of the invention.
      <br/>
      FIG. 7 illustrates that the first processing step is to synthesize the logic design into hierarchical components (step 52).
      <br/>
      The second processing step is to map each hierarchical component to the minimum number of logic array blocks (step 53).
      <br/>
      The prior art did not map hierarchical components to logic array blocks, rather the prior art mapped flattened components to logic array blocks.
      <br/>
      Some hierarchical components can be selectively flattened, in accordance with the invention, as long as this does not result in an excessive number of logical components in any of the -remaining unflattened hierarchical components.
      <br/>
      For example, the flattening of the design of FIG. 3 into the design of FIG. 4 is acceptable because it does not result in an excessive number of logical components in any of the remaining unflattened hierarchical components.
    </p>
    <p num="19">
      The mapping of each hierarchical component to the "minimum" number of logic array blocks means that each hierarchical component is preferably mapped to the smallest number of logic array blocks required to implement the component.
      <br/>
      Design and routing considerations may sometimes prevent a mapping to the absolute smallest number of logic array blocks possible.
      <br/>
      Nevertheless, the present invention endeavors to use as few logic array blocks as possible.
    </p>
    <p num="20">
      The mapping operation (step 53) may be implemented as follows.
      <br/>
      The hierarchical components may be synthesized into virtual logic elements (step 54).
      <br/>
      The virtual logic elements are then assigned to virtual logic array blocks (step 56).
      <br/>
      The virtual logic array blocks are then mapped to physical logic array blocks of a programmable logic device (step 58).
    </p>
    <p num="21">
      When the network of virtual logic elements is synthesized, the output ports of the hierarchical components become the outputs of the virtual logic elements.
      <br/>
      Each of the hierarchical collections of virtual logic elements is independently partitioned into collections of virtual logic array blocks.
      <br/>
      If a hierarchical collection of virtual logical elements is large, the collection of virtual logic array blocks may be further partitioned into a collection of virtual logic array block rows.
      <br/>
      For the purpose of this partitioning, every input and output port of the hierarchical component is assumed to contribute to the number of signals entering or leaving each virtual logic array block or virtual logic array block row.
      <br/>
      Once this is complete, each virtual logic array block or virtual row is assigned to a corresponding physical logic array block 22 or logic array block row 23 in the PLD 20.
      <br/>
      The virtual elements operate as a mapping structure for the ultimate mapping to the corresponding physical elements.
    </p>
    <p num="22">
      This process results in a partitioning such that any change to a hierarchical component will affect the smallest number of logic array blocks and logic array block rows possible.
      <br/>
      The logic elements from a hierarchical component will be packed tightly into a small number of logic array blocks, instead of possibly being scattered over a large number of logic array blocks and logic array block rows.
      <br/>
      FIGS. 8-9 illustrate this concept.
    </p>
    <p num="23">
      FIG. 8 illustrates a first set of logic array blocks 22 forming a first logic array block row 23A and a second set of logic array blocks 22 forming a second logic array block row 23B.
      <br/>
      The hierarchical design of FIG. 3 is mapped into the logic array block rows in accordance with the invention.
      <br/>
      For example, observe that LAB 1 of row 23A uses five logic elements 24 to implement the hierarchical component A1.
      <br/>
      That is, the five logic elements 24 implement the connections 33 and the logical gate 35 associated with component A1.
      <br/>
      LAB2 of row 23A uses six adjacent logic elements 24 to implement the hierarchical component B1.
    </p>
    <p num="24">
      FIG. 9 illustrates a prior art mapping of the flattened design of FIG. 5.
      <br/>
      That is,
    </p>
    <p num="25">
      FIG. 9 illustrates how the equivalent hierarchical components shown in FIG. 3 are distributed in the logical array block rows 23A and 23B using prior art flattened design mapping techniques.
      <br/>
      Observe that in the prior art mapping of FIG. 9, the component B1 is mapped to LAB1 and LAB2 of row 23A.
      <br/>
      This stands in contrast to the efficient mapping achieved by the invention wherein the B1 component is implemented in six adjacent logic elements of a single logic array block (LAB2), as shown in FIG. 8.
    </p>
    <p num="26">
      Similarly, in accordance with the invention, the component C1 is efficiently mapped into logic array blocks LAB3 and LAB4 in row 23A of FIG. 8, while the same component is mapped, in accordance with the prior art, over three logic array blocks LAB2, LAB3, and LAB4 of row 23A in FIG. 9.
      <br/>
      Similar mapping efficiencies for the remaining components are appreciated via a comparison of FIGS. 8 and 9.
    </p>
    <p num="27">
      Those skilled in the art will recognize a number of benefits associated with the technique of the invention.
      <br/>
      First, if the logic within a hierarchical component should change, only those logic array blocks into which it is was previously partitioned need to be re-partitioned.
      <br/>
      Relying upon the previous example, if hierarchical component B1 of FIG. 8 needs to be re-partitioned, only logic array block LAB2 may need to be processed.
      <br/>
      On the other hand, in the case of the mapping of FIG. 9, two logic array blocks LAB1 and LAB2 may need to be processed.
    </p>
    <p num="28">
      Occasionally, it may help the routing of the device if elements of two different hierarchical components can be placed in the same logic array block or row.
      <br/>
      This can be achieved by packing hierarchical components into partially populated virtual logic array blocks or partially populated rows.
      <br/>
      This allows multiple virtual logic array blocks to be placed in the same physical logic array block even if the virtual logic array blocks are from different hierarchical components.
    </p>
    <p num="29">
      Since a designer typically chooses hierarchical components in away that minimizes the number of input and output ports of each component, this hierarchical partitioning method has the added benefit of typically minimizing the routing resources required in the programmable logic device.
      <br/>
      This is because the number of input and output signals from each logic array block or row will be limited by the number of input and output ports of the hierarchical component implemented in that logic array block or row.
    </p>
    <p num="30">
      Often, a hierarchical component will be instantiated multiple times in the same design.
      <br/>
      In the prior art, these various instantiating may each have been synthesized or partitioned differently, resulting in different signal delays for each instantiation.
      <br/>
      The technique of the invention results in more consistent partitioning, which results in the added benefit of preventing variations in signal delays caused by synthesis and routing delay differences.
    </p>
    <p num="31">
      FIG. 10 illustrates a programmable logic device (PLD) 100 constructed according to the method of the invention.
      <br/>
      The PLD 100 forms a part of a data processing system 102.
      <br/>
      The data processing system 102 may include one or more of the following components: a processor 104, a memory 106, input/output circuitry 108, and peripheral devices 110.
      <br/>
      These components are coupled together by a system bus 120 and are populated on a circuit board 122, which is contained in an end-user system 124.
    </p>
    <p num="32">
      The system 102 can be used in a wide variety of applications, such as computer networking, data networking, instrumentation, video processing, digital signal processing, or any other application where the advantage of using reprogrammable logic is desirable.
      <br/>
      The PLD 100 can be used to perform a variety of logic functions.
      <br/>
      For example, the PLD 100 can be configured as a processor or controller that works in cooperation with processor 104.
      <br/>
      The PLD 100 may also be used as an arbiter for arbitrating access to a shared resource in the system 102.
      <br/>
      In yet another example, the PLD 100 can be configured as an interface between the processor 104 and one of the other components in the system 102.
    </p>
    <p num="33">
      The foregoing description, for purposes of explanation, used specific nomenclature to provide a thorough understanding of the invention.
      <br/>
      However, it will be apparent to one skilled in the art that the specific details are not required in order to practice the invention.
      <br/>
      In other instances, well known circuits and devices are shown in block diagram form in order to avoid unnecessary distraction from the underlying invention.
      <br/>
      Thus, the foregoing descriptions of specific embodiments of the present invention are presented for purposes of illustration and description.
      <br/>
      They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, obviously many modifications and variations are possible in view of the above teachings.
      <br/>
      The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.
      <br/>
      It is intended that the scope of the invention be define by the following Claims and their equivalents.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method of partitioning a logic design into a programmable logic device, said method comprising the steps of:</claim-text>
      <claim-text>forming a network of hierarchical components for implementation within physical logic array blocks of a programmable logic device; synthesizing said hierarchical components into a network of virtual logic elements; assigning said virtual logic elements to virtual logic array blocks;</claim-text>
      <claim-text>and mapping said virtual logic array blocks to said physical logic array blocks of said programmable logic device.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 further comprising the step of incrementally re-partitioning a single hierarchical component in a single logic array block.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1 wherein said mapping step includes the step of mapping multiple virtual logic array blocks to a single physical logic array block.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A programmable logic device constructed according to the method of claim 1.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A computer readable memory to direct a computer to function in a specified manner, comprising: executable instructions to form a network of hierarchical components for implementation within physical logic array blocks of a programmable logic device; executable instructions to synthesize said hierarchical components into a network of virtual logic elements; executable instructions to assign said virtual logic elements to virtual logic array blocks;</claim-text>
      <claim-text>and executable instructions to map said virtual logic array blocks to said physical logic array blocks of said programmable logic device.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The computer readable memory of claim 5 further comprising executable instructions to incrementally re-partition a single hierarchical component in a single logic array block.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The computer readable memory of claim 5 further comprising executable instructions to map multiple virtual logic array blocks to a single physical logic array block.</claim-text>
    </claim>
  </claims>
</questel-patent-document>