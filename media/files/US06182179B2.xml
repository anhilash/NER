<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182179B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182179</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182179</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22045194" extended-family-id="42109035">
      <document-id>
        <country>US</country>
        <doc-number>09062841</doc-number>
        <kind>A</kind>
        <date>19980420</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09062841</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165666</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>6284198</doc-number>
        <kind>A</kind>
        <date>19980420</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09062841</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  12/06        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>710313000</text>
        <class>710</class>
        <subclass>313000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>370364000</text>
        <class>370</class>
        <subclass>364000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>700003000</text>
        <class>700</class>
        <subclass>003000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>710005000</text>
        <class>710</class>
        <subclass>005000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>710009000</text>
        <class>710</class>
        <subclass>009000</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>710011000</text>
        <class>710</class>
        <subclass>011000</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>710100000</text>
        <class>710</class>
        <subclass>100000</subclass>
      </further-classification>
      <further-classification sequence="7">
        <text>710260000</text>
        <class>710</class>
        <subclass>260000</subclass>
      </further-classification>
      <further-classification sequence="8">
        <text>711E12088</text>
        <class>711</class>
        <subclass>E12088</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-012/06K4P</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>012</main-group>
        <subgroup>06K4P</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/0676</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>0676</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>15</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>23</number-of-drawing-sheets>
      <number-of-figures>27</number-of-figures>
      <image-key data-format="questel">US6182179</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">System that is able to read and write using a transmission medium and is able to read stored information via a model information structure using a different transmission medium</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>WILLEMIN PAUL</text>
          <document-id>
            <country>US</country>
            <doc-number>4459655</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4459655</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>BAXTER LESLIE A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4535448</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4535448</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>FREMONT MICHAEL J</text>
          <document-id>
            <country>US</country>
            <doc-number>4890224</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4890224</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>FRANCISCO ROBERT</text>
          <document-id>
            <country>US</country>
            <doc-number>5185866</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5185866</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>THOMSEN JOSEPH A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5404460</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5404460</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>MULLINS JACQUELINE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5596724</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5596724</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>KREIDL JOSEF</text>
          <document-id>
            <country>US</country>
            <doc-number>5649124</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5649124</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>DENG BRIAN TSE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5815509</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5815509</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>CORNABY STEPHEN R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5875349</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5875349</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>SIXTRAK Programmable I/O for Windows, product brochure, (C)Copyright 1996, Digitronics SIXNET, 4 pages.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>SYSTRON(R) Flexible I/O's programmable controller, product brochure, Mar. 1998,12 pages.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Personal Daq(TM): Portable USB Data Acquisition, product brochure, (C)Copyright 1997, Iotech Inc., 2 pages.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Flexible and Modular I/O Design Lowers Installation, Wiring and Maintenance Costs: Product Profile from Rockwell Automation (C)Copyright 1994, Allen-Bradley Company Inc., 4 pages.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>The birth of . . . our latest RevolutI/On by WAGO Corporation, product brochure, Aug. 31, 1995, 6 pages.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>WINbloc . . . puts I/O right on track: product information from Weidmüller: The Interface Partner, Oct. 1995, 10 pages.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="7">
          <text>Beckhoff Bus-Klemme: Der universelle Grundbaustein für die Automatesierungstechnik, German-language product brochure, from Beckhoff Indstrie Elektonik, 1996, 17 pages.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="8">
          <text>Total Solutions for PC-based Industrial Automation, Solution Guide vol. 71, by Advantech, Feb. 1997, 31 pages.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="9">
          <text>FLEX I/O (Catalog No. 1794) Product Data, Apr. 1997, 6 pages.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>National Instruments Corporation</orgname>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>NATIONAL INSTRUMENTS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Foote, Garritt W.</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Mehta, Pratik</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Conley, Rose &amp; Tayon</orgname>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Hood, Jeffrey C.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Lintz, Paul R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A modular distributed I/O system includes a computer coupled to module banks through a network bus.
      <br/>
      A module bank includes a communication module, terminal bases, and I/O modules.
      <br/>
      The adjoined terminal bases form a local bus mastered by the communication module.
      <br/>
      The I/O modules connect to the local bus through terminal bases.
      <br/>
      I/O modules are pluriform and programmable.
      <br/>
      The communication module maintains a memory image of the configuration state of each I/O module resident in the module bank.
      <br/>
      A memory image persists when an I/O module is removed from its terminal base.
      <br/>
      The memory image is used to configure a new I/O module which is inserted into the same terminal base.
      <br/>
      The communication module monitors for communication failure on the network bus, and is configured to capture the state of the module bank and automatically restore this captured state after a power-loss event.
      <br/>
      The terminal bases realize a local bus which includes a parallel bus, a serial bus, and an address assignment bus.
      <br/>
      Each terminal base receives a value from a preceding terminal base, increments this value, and asserts the increment value to a succeeding terminal base.
      <br/>
      Each terminal base is automatically assigned an physical proximity address.
      <br/>
      An I/O module controls read/write access to its register space by a semaphore mechanism which supports multi-threaded processing.
      <br/>
      The I/O module latches an ungranted semaphore request and assumes a self-exclusion state upon releasing the semaphore wherein the semaphore is reserved for the communication module.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The present invention relates to the field of distributed I/O systems, and more particularly, to a modular networked I/O system including a host computer and one or more module banks coupled via a network bus.</p>
    <heading>DESCRIPTION OF THE RELATED ART</heading>
    <p num="2">In order to more efficiently and effectively address the problems associated with distributed sensing and control, providers of I/O devices and systems have evolved toward solutions which adhere to a common set of principles which include modularity, ease of configuration, and network operability.</p>
    <p num="3">
      For example, the 1794 Flex I/O product line manufactured by Allen-Bradley, a Rockwell Automation Business, comprises a modular I/O system for distributed applications.
      <br/>
      For more information concerning the Flex I/O product line refer to the Flex I/O Product Data Publication 1794-2.1 which is hereby incorporated by reference.
    </p>
    <p num="4">
      Another example is offered by the OpenLine (tm)  product line manufactured by Grayhill, Inc.
      <br/>
      The OpenLine (tm)  I/O system is a modular distributed control and data acquisition system.
      <br/>
      For more information concerning the OpenLineTM family of products refer to the OpenLine Product Data Bulletin -738 which is hereby incorporated by reference.
    </p>
    <p num="5">
      Prior art modular distributed I/O systems typically include a host computer coupled to one or more module banks through a network bus.
      <br/>
      The host computer sends command and configuration information to the module banks, and receives sensor data and status information from the module banks through the network bus.
      <br/>
      Each module bank generally includes a communication module, a plurality of terminal bases, and a plurality of I/O modules.
      <br/>
      The terminal bases couple together to form a communications backplane.
      <br/>
      The communication module generally couples to the first terminal base of the succession of terminal bases.
      <br/>
      The I/O modules are interchangably inserted into terminal bases.
      <br/>
      Each terminal base includes a host of connectors which provide the corresponding I/O module with connectivity to field devices.
      <br/>
      The communication module mediates communications between the network bus and the I/O modules comprising a module bank.
      <br/>
      The I/O modules occur in a variety of types for performing analog and/or digital I/O operations.
    </p>
    <p num="6">
      As mentioned above, the host computer sends configuration information to an I/O module in order to customize the functionality of the I/O module.
      <br/>
      However, a fundamental problem associated with the prior art distributed I/O systems is that this configuration information programmed into an I/O module is lost when the I/O module is removed from its terminal base.
      <br/>
      The time and effort expended in tuning the I/O module's configuration is wasted.
      <br/>
      Thus, a need exists for a modular distributed I/O system with the capacity to more adequately maintain I/O module configuration even during the physical absence of the I/O module from its terminal base.
    </p>
    <p num="7">
      In addition to the physical removal of an I/O module, configuration information may be lost in response to the loss of power to the I/O module.
      <br/>
      Thus, it would be very desirable to provide a method for (a) capturing the configuration state of an I/O module, and (b) restoring the captured configuration state to the I/O module, or to another I/O module of similar type, after a power-loss event.
    </p>
    <p num="8">
      Another issue of concern in modular distributed I/O systems, and in networked systems in general, is to provide mechanisms for safely and reliably responding to failures in network bus communications.
      <br/>
      To this end, it is desirable to provide within each communication module an activity monitor for sensing communication failure conditions on the network bus.
      <br/>
      Furthermore, since the distributed I/O system is controlled by a software application which runs on the host computer, there may be a period of network bus inactivity during the initial start-up phase while the host computer loads the software application.
      <br/>
      It is desirable that the activity monitors within the communication modules not interpret this initial period of network bus activity as a communication failure condition.
    </p>
    <p num="9">
      The primary function of the communication module is to mediate communications between the network bus and the local bus formed by the adjoined terminal bases.
      <br/>
      In order to maximize the communication capacity over the local bus, it is necessary for the local bus architecture to be optimized.
      <br/>
      In particular, since an I/O module may be interchangably inserted into any terminal base, a need exists for an automatic mechanism of assigning addresses to terminal bases.
      <br/>
      Furthermore, since the I/O modules, in the course of their operation, may send and receive different types of data, a need exists for a partitioned local bus architecture where distinct sections of the local bus are dedicated for different types of data transfer.
    </p>
    <p num="10">
      In response to continuing improvements in CPU and memory technology, communication modules are increasingly able to perform more sophisticated types of processing under software control.
      <br/>
      In view of the fact that the module bank may include multiple I/O modules of different types, a need exists for a communication module with multi-threaded processing capacity,
    </p>
    <p num="11">
      In order to perform the sensing and/or control tasks for which it is designed, an I/O module includes internal registers which may be read/written by the communication module as well as the I/O module.
      <br/>
      Thus, a mechanism for controlling read/write access to the internal registers is needed, and especially such a mechanism as would be compatible with the requirements of a communication module with multi-threaded processing capability.
    </p>
    <heading>SUMMARY</heading>
    <p num="12">
      The problems and needs discussed above in the context of prior art modular distributed I/O systems are solved by the system and methods of the present invention.
      <br/>
      In particular, the present invention contemplates a method for maintaining the continuity of configuration information among multiple I/O modules which successively occupy a common slot (i.e. terminal base) in a distributed I/O system.
      <br/>
      The distributed I/O system includes a computer system coupled to at least one module bank.
      <br/>
      The module bank includes a communication module and one or more terminal bases which are in electrical contact with the communication module.
      <br/>
      The module bank also includes one or more I/O modules which are attached to corresponding terminal bases.
    </p>
    <p num="13">
      The method for maintaining configuration continuity includes the following steps.
      <br/>
      An I/O module is inserted into a terminal base of a module bank.
      <br/>
      The communication module reads configuration information stored in the I/O module.
      <br/>
      The stored configuration information comprises a data structure which serves to describe the functional characteristics and factory default settings for the I/O module.
      <br/>
      The communication module stores the configuration information in non-volatile memory as a "virtual module structure".
      <br/>
      Furthermore, the communication module monitors configuration updates which are supplied to the I/O module and updates the stored configuration information (i.e. virtual module structure) accordingly.
      <br/>
      The virtual module structure is maintained as a continuous image of at least a subset of the registers within the I/O module.
      <br/>
      When the I/O module is removed and a subsequent I/O module is inserted into the same slot (terminal base), the communication module determines if the subsequent I/O module is compatible with the stored configuration information.
      <br/>
      If the subsequent I/O module is determined to be compatible with the stored configuration information, the configuration information is used to configure the subsequent I/O module.
      <br/>
      Thus, configuration continuity is maintained between the first I/O module and the second I/O module.
    </p>
    <p num="14">
      It is noted that the communication module continues to update the stored configuration information after the first I/O module has been removed and before the subsequent I/O module has been inserted.
      <br/>
      In other words, the communication module detects messages targeted for the first I/O module even in the physical absence of the first I/O module, and updates the virtual module structure to correspond to the contents of the configuration registers of the first I/O module which would have prevailed if the first I/O module has not been removed.
    </p>
    <p num="15">
      The present invention further contemplates a method for providing a user-defined configuration state to a module bank where the module bank is comprised in an I/O system.
      <br/>
      The I/O system includes a computer and the module bank coupled by a network bus.
      <br/>
      The module bank comprises a communication module and one or more I/O modules coupled to the communication module.
      <br/>
      The method includes the following steps.
      <br/>
      First, the module bank is configured with a desired state.
      <br/>
      In the preferred embodiment of the invention, the desired state is established by a series of configuration messages sent by the computer to the communication module and the I/O modules which comprise the module bank.
      <br/>
      After the desired state of the module bank has been established, the computer sends a state capture command to the communication module in response to user input.
      <br/>
      The communication module captures the state of the communication module and the one or more I/O modules which comprise the module bank in response to the state capture commands.
      <br/>
      The captured state information is stored into non-volatile memory within the communication module.
      <br/>
      Then the captured state information is used to restore the state of the module bank in response to an event.
      <br/>
      In particular, the communication module configured the one or more I/O module with the captured state information in response to the event.
      <br/>
      In the preferred embodiment of the invention, the event is defined to be a loss of power to the module bank.
    </p>
    <p num="16">
      It is noted that the method also includes the step of configuring the communication module to perform the state restoration.
      <br/>
      Thus, the communication module performs the state restoration in response to the event only if the communication module has been pre-configured to do so.
    </p>
    <p num="17">
      The present invention also contemplates a method for providing delayed start-up of an activity monitor comprised with the distributed I/O system.
      <br/>
      As described above, the distributed I/O system includes a computer coupled to at least one module bank through a network bus.
      <br/>
      The module bank includes a communication module coupled to one or more I/O modules through a local bus.
      <br/>
      The method includes the following steps.
      <br/>
      The computer sends a monitor enable command to the communication module which enables the communication module to perform activity monitoring on network bus.
      <br/>
      However, the activity timer associated with the activity monitoring function is not actually started in response to the enable command.
      <br/>
      The activity timer is started when the communication module detects subsequent network traffic on the network bus, i.e. after having received the monitor enable command.
    </p>
    <p num="18">
      The communication module uses the activity timer to measure the time duration of period of network bus inactivity.
      <br/>
      When the communication module determines a period of inactivity which exceed a threshold after having started the activity timer, the communication module reads configuration values from memory, and writes the configuration values to the one or more I/O modules.
      <br/>
      The communication module assumes that a communication failure conditions exists on the network bus when the threshold-exceeding period of activity is determined.
      <br/>
      It is noted that this method of delaying start-up of the activity monitor allows a software application to be invoked or loaded into memory after the assertion of the monitor enable command.
      <br/>
      Since the software application typically generates the subsequent network traffic on the network bus, the method of the present invention prevents the intervening network bus inactivity from being interpreted as a communication failure condition.
    </p>
    <p num="19">
      Additionally, the present invention contemplates an I/O system with improved communication capabilities including a communication module, one or more I/O module, and a physical bus coupled between the communication module and each of the one or more I/O modules.
      <br/>
      The physical bus includes a parallel bus and a serial bus.
      <br/>
      The communication module is a master of the physical bus.
      <br/>
      Each of the one or more I/O modules includes memory.
      <br/>
      The memory of each I/O module is accessible to the communication module through the parallel bus.
      <br/>
      In addition, each of the I/O module includes non-volatile memory for storing a module information structure (MIS) which describes the corresponding I/O module.
      <br/>
      The communication module is operable to read the MIS of each of the I/O modules when the I/O module is coupled to the physical bus.
      <br/>
      The reading of the MIS is performed through the serial bus.
    </p>
    <p num="20">
      The system also includes one or more terminal bases which couple together to form the physical bus.
      <br/>
      The I/O modules are coupled to respective ones of the terminal bases.
      <br/>
      Each of the terminal bases includes a predecessor connector and a successor connector.
      <br/>
      The predecessor connector is adapted for coupling to a preceding terminal base or to the communication module, and the successor connector is adapted for coupling to a succeeding terminal base.
      <br/>
      The predecessor connector provides physical bus connectivity to the preceding terminal base, and the successor connector provides physical bus connectivity to the succeeding terminal base.
      <br/>
      The terminal bases are coupled together into a linear succession, and the predecessor connector of a first terminal base of the linear succession is coupled to the communication module.
    </p>
    <p num="21">
      According to the present invention, the physical bus includes an address assignment bus where the address assignment bus includes a plurality of address assignment lines.
      <br/>
      Each terminal base of the linear succession is operable: to receive an integer value asserted on the address assignment lines of its predecessor connector, to increment the integer value, and to assert the incremented integer value on the address assignment lines of its successor connector.
      <br/>
      Since the communication module asserts a fixed constant value on the address assignment lines coupling between said communication module and said first terminal base, each terminal base of the linear succession may be associated with a unique integer value based on physical proximity to the communication module.
      <br/>
      In the preferred embodiment of the invention, a terminal base uses the incremented integer value asserted on its successor connector as it assigned address.
      <br/>
      Any I/O module inserted into the terminal base inherits the address of its terminal base.
      <br/>
      It is noted that in an alternate embodiment of the invention, a terminal base uses the integer value receives on it predecessor connector as it assigned address.
    </p>
    <p num="22">
      The present invention further contemplates a method for controlling read/write access to the register space of an I/O module in a distributed I/O system.
      <br/>
      The distributed I/O system includes a computer system coupled to a module bank.
      <br/>
      The module bank includes a communication module coupled to one or more I/O modules.
      <br/>
      The method includes the following steps.
      <br/>
      A first process executing in the communication module requests access to the register space of an I/O module.
      <br/>
      The access request comprises initiating a read operation on a semaphore register associated with the I/O module.
      <br/>
      The I/O module determines if any process executing on the communication module already has access to the register space of the I/O module.
      <br/>
      The communication module grants register space access to the first process with information indicating whether any process previously executing in the communication module already has access to the register space of the I/O module.
      <br/>
      The first process may use the information to affect its register access behavior.
    </p>
    <p num="23">
      When the information indicates that a previous process already has access to the register space of the I/O module, the first process may force the previous process to release access by performing a semaphore release write operation to the I/O module.
      <br/>
      This strategy is preferred when the first process is known to be a high priority process relative to the previous process.
      <br/>
      When the first process is a lower priority process relative to the previous process, the first process may assume the strategy of waiting until the previous process releases access to the register space of the I/O module.
      <br/>
      In particular, the first process may repeatedly request access to the register space of the I/O module until the information indicates that no other process executing in the communication module currently controls access to the register space of I/O module.
    </p>
    <p num="24">
      In addition to the communication module, the I/O module itself may access the register space of the I/O module.
      <br/>
      Thus, the I/O module grants register space access to the communication module only when it does not currently control the register space.
      <br/>
      If a process requests access to the register space while the I/O module controls the register space, the I/O module will (a) deny the access request, and (b) store an indication of the access request asserted by the first process.
      <br/>
      When the I/O module subsequently releases the register space, the I/O module will be unable to regain access to the register space until a process executing on the communication module has requested, gained, and released access to the register space of the I/O module.
    </p>
    <p num="25">
      In order to provide an informed determinism to the access control mechanism, the I/O module is configured to store a semaphore request time parameter which specifies the maximum time duration the I/O module control access to the register space after a request for access has been asserted by the communication module.
      <br/>
      The communication module reads the semaphore request time parameter from the I/O module preferably when the I/O module is inserted into the module bank.
      <br/>
      Thus, a process which requests access to the register space of an I/O module and is denied may optimally determine the times of subsequent access requests.
      <br/>
      For example, a "least effort" strategy dictates that having been denied an access request, a process should perform a subsequent access request after the semaphore request time elapses, since the I/O module will have released access to the register space within this time.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="26">
      A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:
      <br/>
      FIG. 1A illustrates a first embodiment of the modular distributed I/O system of the present invention;
      <br/>
      FIG. 1B illustrates a second embodiment of the modular distributed I/O system of the present invention;
      <br/>
      FIG. 2 illustrates a typical module bank 110 according to the present invention;
      <br/>
      FIG. 3A illustrates network module 200 in isolation from the module bank 110;
      <br/>
      FIG. 3B illustrates an alternate embodiment of network module 200 herein referred to as network module 200B;
      <br/>
      FIG. 4A provides a top view of an isolated terminal base 220;
      <br/>
      FIG. 4B provides a left side view of the terminal base 220;
      <br/>
      FIG. 4C provides a right side view of the terminal base 220;
      <br/>
      FIG. 4D provides a perspective view of terminal base 220;
      <br/>
      FIG. 5 illustrates network module 200 and several terminal bases 220 according to the present invention mounted onto a DIN Rail 230;
      <br/>
      FIG. 6 is an abstracted block diagram of the modular distributed I/O system according to the present invention showing the patterns of connectivity within and surrounding a typical module bank 110;
      <br/>
      FIG. 7 is an abstracted block diagram of the MDIO system of FIG. 1A according to the present invention;
      <br/>
      FIG. 8 presents a wiring diagram for an 8 channel analog input module;
      <br/>
      FIG. 9 presents a wiring diagram for an 8 channel analog output module;
      <br/>
      FIG. 10 illustrates an input isolation circuit for a 16 channel discrete input module;
      <br/>
      FIG. 11 illustrates an input isolation circuit for an 8 channel universal discrete input module;
      <br/>
      FIG. 12 is a table of the physical signal lines included in the local bus of the present invention;
      <br/>
      FIG. 13 is an abstracted diagram of the local bus architecture for an I/O module bank 110 according to the present invention;
      <br/>
      FIG. 14 is a state diagram of the semaphore mechanism of the present invention;
      <br/>
      FIG. 15 is a flowchart of the method by which the network module 200 accesses the register space(s) of an I/O module 210 according to the present invention;
      <br/>
      FIG. 16, collectively comprising FIGS. 16A and 16B, illustrates the organization of the module information structure (MIS) according to the present invention;
      <br/>
      FIG. 17 is a flowchart of the watch dog feature according to the present invention;
      <br/>
      FIG. 18A illustrate the Snap Shot Capture and Enables feature according to the present invention;
      <br/>
      FIG. 18B illustrate the method of Snap Shot Restoration according to the present invention;
      <br/>
      FIG. 18C illustrates the default Power-Up Configuration Sequence according to the present invention in the case the Snap Shot Feature is not enabled;
      <br/>
      FIG. 19A illustrates the Hot Insertion, Auto-Configuration, and Hot-Swap Features of the present invention; and
      <br/>
      FIG. 19B illustrates the method by which the network module 200 maintains a virtual module structure even in the absence of the corresponding physical I/O module 210.
      <br/>
      While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and will herein be described in detail. It should be understood however, that drawings and detailed descriptions thereto are not intended to limit the invention to the particular form disclosed. But on the contrary the invention is to cover all modifications, equivalents and alternatives following within the spirit and scope of the present invention as defined by the appended claims.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PRESENT INVENTION</heading>
    <p num="27">
      FIG. 1A illustrates a first embodiment of the modular distributed I/O system of the present invention.
      <br/>
      The modular distributed I/O (MDIO) system comprises a computer 100, and a plurality of module banks 110 for performing field distributed I/O operations.
      <br/>
      The MDIO system can include up to 25 module banks 110.
      <br/>
      FIG. 1A depicts three module banks labelled 110A through 110C.
      <br/>
      The computer 100 is coupled to the I/O module banks 110 through a network bus 120.
      <br/>
      In this first embodiment, the network bus 120 preferably comprises an RS-485 serial bus.
    </p>
    <p num="28">In the present embodiment, the total cable distance between the computer 100 and all module banks 110A to 110C can be up to 4000 feet (nominal).</p>
    <p num="29">
      FIG. 1B illustrates a second embodiment of the modular distributed I/O system of the present invention.
      <br/>
      As with the first embodiment, the second embodiment includes computer 100 and module banks 110.
      <br/>
      However, in the second embodiment, network bus 120 is reserved for coupling the I/O modules 210 together, while a short range bus is employed to couple computer 100 with the first module bank 110.
      <br/>
      The short range bus preferably comprises an RS232 bus.
    </p>
    <p num="30">
      FIG. 2 illustrates a typical module bank 110 according to the present invention.
      <br/>
      The module bank 110 includes a network module 200 and a plurality of I/O modules 210.
      <br/>
      FIG. 2 depicts three I/O modules labelled 210A through 210C.
      <br/>
      The I/O modules 210 are configured to perform basic I/O operations such as analog current measurement, analog current sourcing, thermocouple temperature measurement, discrete input sensing, discrete output signal generation, and so forth.
      <br/>
      The I/O modules 210 are inserted into terminal bases 220 as indicated by the exploded view of I/O module 210B and terminal base 220 B. FIG. 2 depicts three terminal bases 220A, 220B, and 220C.
    </p>
    <p num="31">
      The I/O modules 210 and terminal bases 220 are physically universal in the sense that any I/O module 210 can be inserted into any terminal base 220, provided a keying mechanism on the terminal base 220 is set to the universal position.
      <br/>
      Alternatively, the keying mechanism on a terminal base 220 may be set so that the terminal base 220 accepts only a certain type of I/O module 210.
      <br/>
      Each terminal base 220 includes a host of convenient external connectors for wiring to field devices.
      <br/>
      When an I/O module 210 is inserted into a terminal base 220, the I/O module 210 is electrically coupled to the external connectors of the terminal base 220.
      <br/>
      As the terminal bases 220 are coupled together and coupled to the network module 200, altogether they form a high-speed local bus that efficiently transfers data between the I/O modules 210 and the network module 200.
      <br/>
      The module bank 110 can include up to nine I/O modules 210.
    </p>
    <p num="32">
      FIG. 3A illustrates network module 200 in isolation from the module bank 110.
      <br/>
      The network module 200 includes a network bus connector 201 for coupling to the network bus 120, and a local bus connector 202 for communication with I/O modules 210.
      <br/>
      The network module 200 mediates communications between computer 100 and the I/O modules 210.
      <br/>
      Thus, the network module 200 is also referred to as a communication module.
      <br/>
      In addition, the network module 200 receives external power through power connector 203, and supplies power to the I/O modules 210 through the local bus which includes lines for power and ground.
      <br/>
      Since each network module 200 typically has its own power source, each module bank 110 may be operated independently.
      <br/>
      In a typical scenario, one module bank may be powered down for re-wiring of field devices, while the remaining module banks are powered and fully operational.
    </p>
    <p num="33">
      FIG. 3B illustrates an alternate embodiment of network module 200 herein referred to as network module 200B.
      <br/>
      In addition to network bus connector 201, local bus connector 202, and power connector 203, network module 200B includes a short range bus connector 204.
      <br/>
      Network module 200B is employed in the first module bank 110A of the second embodiment illustrated in FIG. 1B. The remaining module banks 110 in FIG. 1B employ network module 200 described above.
      <br/>
      In particular, the short range bus connector 204 of module 200B couples directly to the short range bus 121 to achieve connectivity with computer 100.
      <br/>
      Furthermore, the network bus connector 201 of network module 200B couples to network bus 120, thereby achieving connectivity to the remaining network modules 200.
      <br/>
      The network modules 200 of the remaining module banks, e.g. 110B and 110C, couple to the network bus 120 through their respective network bus connectors 201.
    </p>
    <p num="34">
      Network module 200B includes a bi-directional repeater to forward signals from short range bus 121 to network bus 120, and vice versa.
      <br/>
      The bi-directional repeater advantageously allows computer 100 to employ a low power device to drive short range bus 121.
    </p>
    <p num="35">
      FIG. 4A provides a top view of an isolated terminal base 220.
      <br/>
      The terminal base 220 includes a DIN Rail Clip 301.
      <br/>
      With the DIN rail clip 301 in its unlocked position, the terminal base 220 may be mounted onto a standard DIN rail (see FIG. 5).
      <br/>
      As long as the DIN Rail clip 301 is in the unlocked position, the terminal base 220 may freely slide along the DIN rail.
      <br/>
      However, when the DIN rail clip is set to its locked position, the terminal base 220 is bound securely to the DIN rail.
    </p>
    <p num="36">
      The terminal base 220 also includes a module access connector 302, a latch 303, and ejector button 304.
      <br/>
      Each I/O module 210 has a slot for receiving latch 303 and a connector which is complementary to the module access connector 302.
      <br/>
      When an I/O module 210 is properly aligned with the terminal base 220, the I/O module 210 is seated into the terminal base 220 by the application of pressure.
      <br/>
      Once an I/O module 210 is seated into a terminal base 220, the module access connector 302 provides the I/O module 220 with access to the local bus, and to the external connectors (see FIG. 4D) of the terminal base 320.
    </p>
    <p num="37">
      FIG. 4B provides a left side view of the terminal base 220.
      <br/>
      In this view it is apparent that the terminal base 220 includes a left local bus connector 320.
      <br/>
      The left local bus connector 320 is also referred to as a predecessor connector 320.
    </p>
    <p num="38">
      FIG. 4C provides a right side view of the terminal base 220.
      <br/>
      In this view it is apparent that the terminal base 220 includes a right local bus connector 340.
      <br/>
      The right local bus connector 340 is also referred to as a successor connector 340.
      <br/>
      The right local bus connector 340 and the left local bus connector are complementary.
      <br/>
      Thus, the right local bus connector 340 of one terminal base naturally couples with the left local bus connector 320 of a second terminal base as implied by the terminal bases 220A and 220B of FIG. 5.
    </p>
    <p num="39">
      FIG. 4D provides a perspective view of terminal base 220.
      <br/>
      In this view it is apparent that the terminal base 220 is supplied with an external connector bank 350 which comprises two rows of external connectors for wiring to field devices.
      <br/>
      Each external connector includes a slot for admitting an external wire and a screw for securing the wire to the slot.
      <br/>
      For example, external connector 351 includes slot 351A and corresponding screw 351B.
      <br/>
      An external wire is inserted in slot 351A, and fastened to the slot by tightening screw 351B.
      <br/>
      In an alternative embodiment of the terminal base 220, the screws of the external connectors 350 are replaced with spring loaded locking devices.
      <br/>
      In this case, if the screw 351B is reinterpreted as a spring loaded locking device 351B, one depresses the spring loaded locking device 351B in order to allow admission of a wire into the corresponding slot 351A.
      <br/>
      Once a wire is inserted into the slot 351A, it is locked into position within the slot simply by releasing pressure from the spring loaded locking device 351A.
    </p>
    <p num="40">
      When an I/O module 210 is seated into the terminal base 220, the I/O module 210 is electrically coupled to the external connectors of the external connector bank 350.
      <br/>
      As described above, this coupling occurs through module access connector 302.
    </p>
    <p num="41">
      FIG. 5 illustrates network module 200 and several terminal bases 220 mounted onto a DIN Rail 230.
      <br/>
      The network module 200 and terminal bases 220A and 220B are shown coupled to each other, while terminal base 220C is shown uncoupled.
      <br/>
      With the DIN rail clip of terminal base 220C in its unlocked position, a user may slide terminal base 220C until its left local bus connector 320 securely interfaces with the right local bus connector 340 of terminal base 220B.
      <br/>
      Then the terminal base 220C is locked into position by closing the DIN rail clip 301 of terminal base 220C.
      <br/>
      The steps just described for connecting one terminal base 220 to another also serve to describe the means for connecting a first terminal base 220 to the network module 200.
    </p>
    <p num="42">
      As mentioned above, the high-speed local bus (not shown) is formed as the terminal bases 220 are coupled to each other and to network module 200.
      <br/>
      Each terminal base 220 contains internally a portion of the local bus.
      <br/>
      As additional terminal bases 220 are connected to the existing complex of connected terminal bases, the local bus automatically extends. I/O modules 210 connect to the local bus through the terminal bases 220.
    </p>
    <p num="43">
      FIG. 6 is an abstracted block diagram of the modular distributed I/O system showing the patterns of connectivity within and surrounding a typical module bank 110.
      <br/>
      The terminal bases 220 are not shown in order to more clearly exhibit the local bus.
      <br/>
      The network module 200 is coupled to computer 100 through the network bus 120.
      <br/>
      The I/O modules 210 and network module 200 are connected by local bus 240.
      <br/>
      As mentioned above, local bus 240 is formed as the terminal bases 220 (not shown in FIG. 6) are coupled together.
      <br/>
      Each I/O module 210 is coupled to the local bus 240 through the terminal base 220 in which it is seated.
      <br/>
      It is noted that certain portions of local bus 240 contain active elements which are resident in the terminal bases 220, i.e. local bus 240 is not entirely comprised of pure conductors.
      <br/>
      The architecture of local bus 240 will be explained in detail below.
    </p>
    <p num="44">
      Furthermore, as mentioned above, each I/O module 210 is coupled to the external connectors 350 of the terminal base 220 in which it is seated.
      <br/>
      Through these external connectors 350 each I/O module 210 connects to one or more external I/O devices Dk.
      <br/>
      The maximum number of I/O devices Dk to which an I/O module 210 may connect is determined by the type of the I/O module 210.
      <br/>
      For example, an 8-channel analog input module has eight input channels for sensing signals from up to eight devices Dk.
      <br/>
      The types of I/O modules 210 which are available for use in the preferred embodiment are described more fully below.
      <br/>
      FIG. 6 shows nine I/O devices D1, through D9 partitioned among three I/O modules 210A, 210B, and 210C.
    </p>
    <p num="45">Since the network module 200 couples directly to the network bus 120, and the I/O modules 210 couple to the network module 200 through the local bus 240, the network module 200 represents the module bank 110 from the point of view of the serial bus 120 and computer 100.</p>
    <p num="46">
      FIG. 7 is an abstracted block diagram of the MDIO system of FIG. 1A. Again, the terminal bases 220 are not shown to more clearly exhibit local bus connectivity.
      <br/>
      Furthermore, the coupling of I/O modules 210 to external I/O devices Dk is not shown for the sake of simplicity.
      <br/>
      As described above, each module bank 110 comprises a network module 200 and up to nine I/O modules 210.
      <br/>
      In FIG. 7, the I/O modules 210A through 210G are partitioned among the three network modules 200A through 200C as shown.
      <br/>
      Each network module 200 includes an array of DIP switches which determine (a) the address of the network module 200 as seen by the computer 100 via the network bus 120, and (b) the baud rate at which the network module 200 is to communicate over the network bus 120 with computer 100.
      <br/>
      The system user sets the DIP switches of each network module 200 so that each network module 200 has a unique serial bus address, and a common baud rate.
    </p>
    <p num="47">
      Software running on computer 100 provides a system user with an interface for controlling and monitoring the state of the MDIO system.
      <br/>
      In response to user requests, computer 100 sends messages to selected network modules 200 and/or selected I/O modules 210.
      <br/>
      Messages targeted for an I/O module 210 are routed through a corresponding network module 200.
      <br/>
      Thus, each network module 200 mediates network communication for a whole module bank.
    </p>
    <p num="48">I/O Module Functionality</p>
    <p num="49">
      The I/O Modules 210 occur in a variety of different types.
      <br/>
      Each type of I/O Module performs a set of I/O related functions.
      <br/>
      By choosing among the different types of I/O modules, a system user has the flexibility to customize the I/O capabilities of each module bank 110 and of the MDIO system as a whole.
      <br/>
      The following table lists several different types of I/O Modules 210 which are available for use in the MDIO system.
    </p>
    <p num="50">
      --
      <br/>
      -- Module
      <br/>
      -- Type      Channels  Description    Signal Ranges
      <br/>
      -- AI-8      8         analog inputs  mV, V, 0-20 mA, 4-20 mA
      <br/>
      -- AO-8      8         analog outputs 0-20 mA, 4-20 mA
      <br/>
      -- DI-16     16   discrete inputs 24 VDC
      <br/>
      -- UDI-8     8         universal      5 to 240 VAC/VDC
      <br/>
      --                     discrete inputs
      <br/>
      -- DO-8      8         discrete outputs 24 VDC (10 to 30 VDC)
      <br/>
      -- DO-16     16   discrete outputs 24 VDC (10 to 30 VDC)
    </p>
    <p num="51">Analog Input Module</p>
    <p num="52">
      An analog input I/O module (AI-8) has eight input channels for monitoring analog input signals.
      <br/>
      Each input channel can be independently configured to accept either a voltage or current input signal.
      <br/>
      Furthermore, each input channel has a noise filter which can be independently configured to reject either 50 Hz, 60 Hz, or 500 Hz.
      <br/>
      When all the channels are configured for 50 Hz or 60 Hz rejection, the input channels are sampled every 1.48 second or 1.24 seconds respectively.
      <br/>
      When all the channels are configured for 500 Hz rejection, the input channels are sampled every 0.18 seconds.
    </p>
    <p num="53">Input signals are digitized using a high-accuracy, 16-bit resolution A/D converter, which is continuously and automatically calibrated using a stable voltage reference and calibration circuitry within the AI-8 module.</p>
    <p num="54">
      The AI-8 module has over-ranging and under-ranging capability.
      <br/>
      For example, when configured for an input range of 4-20 mA, the AI-8 module actually measures inputs from 3.5 to 21 mA. Thus, the AI-8 module is able to tolerate input devices and sensors which may not be accurately calibrated.
    </p>
    <p num="55">
      FIG. 8 presents a wiring diagram for the AI-8 module.
      <br/>
      The AI-8 module mounts onto a terminal base 220 (not shown), and thus is in electrical contact with terminals of the external connector block 350 of the terminal base 220.
      <br/>
      Field devices are wired to the terminals of the external connector block 350.
      <br/>
      Each input channel of the AI-8 module is provided with four input terminals: voltage input (Vin), current input (Iin), common (Com), and optional power (Vsup) for field devices.
      <br/>
      If necessary, the user can connect a power supply 800 for field devices to the V and C terminals of the external connector block 350.
      <br/>
      The AI-8 module routes the V and C terminals to the Vsup and Com terminals of each channel.
      <br/>
      External field devices may be generally modeled as either a voltage source 801, a loop powered current source 802, or a powered transducer 803.
      <br/>
      In FIG. 8, the voltage source 801 is applied to input channel zero.
      <br/>
      The nominally positive and negative sides of voltage source 801 are coupled respectively to the terminals Vin0 and Com of input channel zero.
      <br/>
      A loop powered current source 802 is shown coupled to input channel one.
      <br/>
      The loop powered current source 802 is coupled to the Vsup and Iin1 terminals of input channel one as shown.
      <br/>
      The powered transducer 802 is coupled to input channel two.
      <br/>
      The powered transducer 802 includes V+ and V- terminals which are coupled to the Vsup and Com terminals of input channel two.
      <br/>
      Furthermore, the Vout terminal of the powered transducer 802 is coupled to the terminal Vin2 of input channel two.
      <br/>
      Optionally, the powered transducer 802 has a current out (Iout) terminal which is coupled to the terminal Iin2 of input channel two.
    </p>
    <p num="56">
      The input channels zero through seven are supplied to an input multiplexer 804.
      <br/>
      The remaining functional blocks of the AI-8 module are not shown for the sake of simplicity of the illustration.
    </p>
    <p num="57">Analog Output Module</p>
    <p num="58">
      An analog output module (AO-8) has eight analog output channels for sourcing current to external devices.
      <br/>
      Each output channel can be independently configured to operate with an output range of either 0-20 mA or 4-20 mA.
      <br/>
      The output signals are generated with a 12-bit D/A converter.
      <br/>
      With built-in overanging capability, the actual full-scale output ranges are 0-21 mA and 3.5-21 mA. Thus, the AO-8 module is able to compensate for span and offset errors in uncalibrated field devices which load the output channels.
      <br/>
      The AO-8 module sources current provided by an external loop supply from 5-24 VDC.
    </p>
    <p num="59">
      Each output channel includes a monitoring circuit and LED indicator for open current loop detection.
      <br/>
      An open circuit on any channel or faulty loop power supply lights the corresponding LED.
      <br/>
      This error condition can also be reported to the network module 200 and computer 100.
    </p>
    <p num="60">
      FIG. 9 is a wiring diagram of the AO-8 module.
      <br/>
      The AO-8 module mounts onto a terminal base 220 (not shown), and thus is in electrical contact with terminals of the external connector block 350 of the terminal base 220.
      <br/>
      Field devices are wired to the terminals of the external connector block 350.
      <br/>
      Each output channel of the AO-8 is provided with a current source 901.
      <br/>
      Thus, the AO-8 module includes eight current sources 901A through 901H.
      <br/>
      In FIG. 9, current sources 901C through 901G are implicitly suggested by the ellipses.
      <br/>
      The current sources 901 are power by an external power supply 900 which is coupled to the V and C terminals of the external connector block 350.
      <br/>
      As mentioned above, the external power supply 900 may have any voltage in the range from 5 to 24 VDC.
    </p>
    <p num="61">
      Each output channel of the AO-8 module has three output terminals: current output (Iout), current common (COM), and loop power (Vsup).
      <br/>
      The AO-8 module internally routes the V and C terminals to the Vsup and Com terminals respectively for each of the output channels.
      <br/>
      An external field device may be generally modeled either as a load 902 or a powered receiver 903.
      <br/>
      A load 902 is shown coupled to output channel zero.
      <br/>
      The terminals of the load 902 are coupled to the terminals Iout0 and Corn of output channel zero.
      <br/>
      A powered receiver 903 is shown coupled to output channel one.
      <br/>
      The power receiver 903 includes Power and Corn terminals which are coupled to the Vsup and Com terminals respectively of output channel one.
      <br/>
      Furthermore, the Iin terminal of the powered receiver 903 is coupled to the terminal Iout1 of output channel one.
    </p>
    <p num="62">Discrete Input Module</p>
    <p num="63">A 16-channel discrete input module (DI-16) provides sensing for up to sixteen 24 VDC input devices such as DC proximity and limit switch outputs, push-button switches, and thermostat states.</p>
    <p num="64">
      Each input channel of the DI-16 module includes an input circuit 1000 as shown in FIG. 10. The input circuit 1000 comprises an opto-isolator 1001 in series with current limiting device 1002.
      <br/>
      The input circuit 1000 senses a logical ON state when the signal supplied to terminal IN is greater than or equal to 15 VDC with respect to the Com terminal.
      <br/>
      Conversely, the input circuit 1000 senses a logical OFF state when the input signal at terminal IN is less than or equal to 5 VDC with respect to the Com terminal.
      <br/>
      The input circuit 1000 provides 3000 Vrms of breakdown isolation.
      <br/>
      In addition, the DI-16 provides double insulation for up to 250 Vrms of operational isolation.
    </p>
    <p num="65">8-Channel Universal Discrete Input Module</p>
    <p num="66">
      A universal discrete input module (UDI-8) has eight input channels for sensing the discrete (i.e. ON/OFF) state of up to eight externally supplied signals.
      <br/>
      Each input channel may be driven by a wide range of signal types, from digital logic signals to 240 VAC/VDC signals.
      <br/>
      For example, the UDI-8 module can be used to sense the state of TTL signals, proximity and limit switches, push-button switches, thermostats, relays, or power circuits.
    </p>
    <p num="67">
      Each input channel of the UDI-8 module includes an input isolation circuit 1100 as shown in FIG. 11. The input isolation circuit 1100 includes a bi-directional opto-isolator 1101 in series with a current limiter 1102.
      <br/>
      A voltage signal to be sensed is provided across terminals INa and INb of the input channel.
      <br/>
      The combination of the bi-directional opto-isolator 1100 and the current limiter 1101 allows the input isolation circuit 1100 to sense a wide range of AD and DC input voltages.
      <br/>
      The input isolation circuit 1100 also includes an AC smoothing filter 1103 to provide for stable detection of AC signals.
    </p>
    <p num="68">
      The connections INa and INb can be used as an isolated two-wire input, or one of the connections can be wired to an external common (or supply) terminal for use with sourcing (or sinking) discrete devices.
      <br/>
      A positive or negative DC input signal with a magnitude greater than 4 volts, up to 240 volts, will turn on the opto-isolater circuit 1101 and register as a logic high.
      <br/>
      When sensing the presence of AC signals, a 50 Hz or 60 Hz sinusoidal signal with a magnitude of at least 15 VAC registers as a constant logic high.
      <br/>
      The UDI-8 module returns a constant logic low as long as the peak magnitude of the signal does not exceed  +- 1 volt.
    </p>
    <p num="69">Discrete Output Modules</p>
    <p num="70">
      The DO-8 and DO-16 modules are discrete output modules.
      <br/>
      The DO-8 module provides eight discrete output channels, while the DO-16 provides sixteen discrete output channels.
      <br/>
      Both modules can drive a total of 8A, or up to 2A on any single channel.
      <br/>
      The outputs are compatible with voltages from 10 to 30 VDC.
      <br/>
      Each channel includes an LED to indicate the on/off state of the output.
    </p>
    <p num="71">Local Bus Architecture</p>
    <p num="72">
      The local bus 240 provides a physical medium for communication within an I/O module bank 110.
      <br/>
      The network module 200 is a local bus master.
      <br/>
      The local bus comprises physical lines signal lines as listed in the physical interface table of FIG. 12. The direction of the signals is given as seen by the network module.
      <br/>
      The physical lines of the local bus 240 are defined as follows.
    </p>
    <p num="73">
      BA�3:0� The Base Address Lines BA�3:0� are used in the present invention to assign addresses to each of the terminal bases 220 according to proximity to the network module 200.
      <br/>
      This address assignment mechanism will be explained in detail below.
    </p>
    <p num="74">MD�3:0� The Module Select Lines MD�3:0� are used by the network module 200 to address a particular I/O module 210 for communication access.</p>
    <p num="75">CH�3:0� The Channel Select Lines CH�3:0� are used by the network module 200 to address a particular logical channel within the I/O module 210 addressed by lines MD�3:0�.</p>
    <p num="76">WR* The low-going Write Line WR* is asserted by the network module 200 to start a write cycle.</p>
    <p num="77">RD* The low-going Read Line RD* is asserted by the network module 200 to start a read cycle.</p>
    <p num="78">
      FC�2:0� The Function Code Lines FC�2:0� are asserted by the network module 200, and determine a function which is to be performed in a read or write access.
      <br/>
      The following table describes the function associated with each value of the Function Code.
      <br/>
      It is noted that the interpretation of a Function Code generally depends on the kind of access being performed (i.e. read or write access).
    </p>
    <p num="79">
      --
      <br/>
      -- Function
      <br/>
      -- Code        FC2    FC1    FC0    Read access    Write access
      <br/>
      -- 0           0      0      0      Semaphore      Command Write
      <br/>
      --                                  Request
      <br/>
      -- 1           0      0      1      Status Read    Semaphore
      <br/>
      --                                                 Release
      <br/>
      -- 2           0      1      0      Configuration  Configuration
      <br/>
      --                                  Read           Write
      <br/>
      -- 3           0      1      1      Data Read      Data Write
      <br/>
      -- 4-7         1      x      x      Reserved       Reserved
    </p>
    <p num="80">D�7:0� The Data Lines D�7:0� are used to convey data to/from an I/O module 210 during (a) data register reads or writes (Function Code 3), (b) configuration register reads or writes (Function Code 2), (c) status register reads (Function Code 1), (d) semaphore request reads (Function Code 0), (d) command register writes (Function Code 0), or (e) semaphore release writes (Function Code 1).</p>
    <p num="81">
      CLK The network module 200 provides a clock signal to the I/O module 210 through the Clock Line CLK.
      <br/>
      The clock signal is nominally 4 MHz.
      <br/>
      States may change on the rising edge of this clock but must be valid by the falling edge.
    </p>
    <p num="82">SPI_CS* The Serial Chip Select Line SPI_CS* is a serial interface line for setting the Start sequence which opens a serial communication channel to a I/O module 210.</p>
    <p num="83">MOSI The MOSI (Master Out Slave In) Line is used for sending serial data from the network module 200 to an I/O module 210.</p>
    <p num="84">MISO The MISO (Master In Slave Out) Line is used for sending data from an I/O module 210 to the network module 200.</p>
    <p num="85">
      SPI_CLK The Serial Clock SPI_CLK Line carries a clock signal for the serial interface.
      <br/>
      The clock rate of the Serial Clock signal is less than 1 MHz.
    </p>
    <p num="86">
      NEW_MD* The New Module Interrupt Line NEW_MD* is used to indicate that one or more new I/O modules 210 have been inserted into terminal bases and have not yet been configured.
      <br/>
      In other words, when a new I/O module 210 is inserted into a terminal base 220, the new I/O module 210 drives the NEW_MD* line low.
      <br/>
      The network module 200 is thereby informed of the existence of new I/O modules 210.
    </p>
    <p num="87">RESET* The Master Reset Line RESET*, when asserted by the network module 200, causes all I/O modules 210 to be reset.</p>
    <p num="88">GND The network module 200 and all I/O modules 210 are tied to a common ground through the GND line.</p>
    <p num="89">+5V The network module 200 supplies all the I/O modules 210 with power (1 Watt) through the +5V Line.</p>
    <p num="90">
      FIG. 13 is an abstracted diagram of the local bus architecture for an I/O module bank 110.
      <br/>
      As indicated in FIG. 5, the local bus connector 202 of network module 200 is directly coupled to the left local bus connector 320 of terminal base 220A, thereby achieving the connectivity indicated by local bus portion 240I.
      <br/>
      The right local bus connector 340 of terminal base 220A is directly coupled to the left local bus connector 320 of terminal base 220B, thereby achieving the connectivity indicated by local bus portion 240A.
      <br/>
      The right local bus connector 340 of terminal base 220B is directly coupled to the left local bus connector 320 of terminal base 220C, thereby achieving the connectivity indicated by local bus portion 240B.
      <br/>
      Similarly, terminal base 220C optionally couples to a successive terminal base 220 through local bus portion 240C.
    </p>
    <p num="91">
      Terminal base 220A is coupled to I/O module 210 A through local bus portion 250A.
      <br/>
      In physical realization, local bus portion 250A comprises part of the connectivity achieved by module access connector 302.
      <br/>
      It is noted that module access connector 302 also provides the I/O module 210A with connectivity (not shown) to the external connector bank 350 of terminal block 220A.
      <br/>
      Similarly, terminal base 220B is coupled to I/O module 210B through local bus portion 250B, and terminal base 220C is coupled to I/O module 210C through local bus portion 250C.
    </p>
    <p num="92">
      The local bus 240 is partitioned into three sub-categories: the address assignment bus 241, the parallel bus 242, and the serial bus 243.
      <br/>
      The address assignment bus 241 corresponds to base address lines BA�3:0� in the physical interface table above.
      <br/>
      The address assignment bus 241 is physically sub-divided into sections 241I, 241A, 241B, and 241C between each of the terminal bases 220, or between the network module 200 and the first terminal base 220A.
      <br/>
      The parallel bus 242 corresponds to lines -5-26, and lines -31-33 of the physical interface table above.
      <br/>
      The parallel bus 242 is associated with sections 242I, 242A, 242B, and 242C.
      <br/>
      However, since each terminal base 220 directly couples the parallel bus section from its left local bus connector 320 to its right local bus connector 340, in a configured module bank 110 all sections 242I, 242A, 242B, and 242C of the parallel bus 242 are coupled together electrically.
      <br/>
      Furthermore, each of the terminal bases 220A, 220B, and 220C provide access to the parallel bus 242 for I/O modules 210A, 210B, and 210C respectively through sections 252A, 252B, and 252C respectively.
    </p>
    <p num="93">
      The serial bus 243 corresponds to lines -27-30 from the table above, and is associated with sections 243I, 243A, 243B, and 243C.
      <br/>
      Again, since each terminal base 220 directly couples the serial bus section from its left local bus connector 320 to its right local bus connector 340, all sections 243I, 243A, 243B, and 243C are coupled together electrically.
      <br/>
      Furthermore, each of the terminal bases 220A, 220B, and 220C provide access to the serial bus 243 through sections 253A, 253B, and 253C for I/O modules 210A, 210B, and 210C respectively.
    </p>
    <p num="94">
      The partitioning of local bus 240 into sub-categories optimally corresponds to the types of data transfer tasks that must occur in a module bank.
      <br/>
      The address assignment bus 241 is dedicated for assigning an address to each of the I/O modules 210 of the module bank.
      <br/>
      The serial bus 243 is dedicated for low priority and/or non-time critical tasks such as the task of reading the module information structure (MIS) of I/O modules 210.
      <br/>
      In contrast, the parallel bus 242 is configured to handle high priority and/or time-critical transfer tasks such as read/write accesses to the register spaces of I/O modules.
      <br/>
      As a consequence of the local bus partitioning, when a new I/O module 210 is inserted into a terminal base 220, the MIS of the I/O module 210 may be read through the serial bus 243 without slowing down or impeding normal transfer operations to pre-existing I/O modules 210 through the parallel bus 242.
    </p>
    <p num="95">Address Assignment Mechanism</p>
    <p num="96">
      The address assignment bus 241 is used to assign an address to each terminal base 220 in an I/O module bank 110.
      <br/>
      The address assignment mechanism of the present invention is geographical.
      <br/>
      Thus, the terminal base 220 which is closest to the network module 200 is always assigned the base address one (0001), and the remaining terminal bases 220 which are successively farther removed from the network module 200 are assigned successively larger base addresses.
      <br/>
      An I/O module 210 inherits the address of the terminal base 220 in which it is mounted.
      <br/>
      For example, the terminal bases 220A, 220B, and 220C in FIG. 2 would be assigned the addresses one, two and three respectively.
      <br/>
      Thus, I/O modules 210A, 210B, and 210C inherit the addresses of their terminal bases, i.e. one, two and three respectively.
    </p>
    <p num="97">
      The address assignment mechanism of the present invention operates as follows.
      <br/>
      The network module 200 perpetually asserts zero (all bits zero) on the base address lines BA�3:0� which comprise address assignment bus section 241I.
      <br/>
      Each terminal base 220 reads the address assignment bus section at its left local bus connector 320, adds one to this 4-bit integer value, and asserts the incremented 4-bit value on the address assignment bus section at it right local bus connector 320.
      <br/>
      Thus, for example, terminal base 220A reads the integer value 0000 from the address assignment bus section 240I, adds one, and asserts the result, 0001, on address assignment bus section 241A.
      <br/>
      By extrapolation of this method, it follows that address assignment bus sections 241B and 241C will maintain values 0010 and 0011 respectively.
      <br/>
      Thereby, each terminal base 220 maintains an integer value which reflects its position in the coupled succession of the terminal bases 220 with the network module 220 representing the head of the succession.
      <br/>
      By definition, the incremented integer value as calculated by a terminal base 220, and as asserted on the address assignment section at its right local bus connector 340, is taken to be the address of the terminal base 220.
      <br/>
      So terminal bases 220A, 220B, and 220C have addresses one, two, and three respectively.
    </p>
    <p num="98">
      I/O module 220A inherits the address of terminal base 220A, since the incremented address assignment value (which defines the terminal base address) is provided to the I/O module 220A through address assignment bus section 251A.
      <br/>
      The lines BA�3:0� comprising address assignment bus section 251 A carry the integer value 0001B which defines the address of the I/O module 220A.
      <br/>
      Similarly, I/O module 210B and 210C are provided with the addresses of their corresponding terminal bases through address assignment bus sections 251B and 251C respectively.
    </p>
    <p num="99">In the preferred embodiment of the invention, the terminal bases 220 use combinational logic to increment the integer address assignment value.</p>
    <p num="100">
      Since addresses are associated with physical proximity to the network module, a system user is able to easily locate a faulty I/O module 210: e.g. address three means physically the third terminal base 220.
      <br/>
      Furthermore, the faulty I/O module 210 can be replaced with a new I/O module 210 of the same type �or with a new I/O module 210 of a type which comprises a fimctional superset of the type to be replaced�, and the new I/O module 210 will instantaneously assume the proximity address of the terminal base 220 of its predecessor (i.e. the faulty I/O module 210 ).
    </p>
    <p num="101">Generic Architecture of I/O Modules</p>
    <p num="102">
      Although the I/O modules 210 occur in a number of different types, the local bus interface to each of the I/O module types has a common structure.
      <br/>
      Each I/O module type has a predetermined number of logical (i.e. addressable) channels.
      <br/>
      It is to be noted that the number of logical channels does not necessarily agree with the number of physical channels for an I/O module type, since the mapping between logical channels and physical channel is not necessarily one-to-one.
    </p>
    <p num="103">
      Each logical channel of an I/O module 210 has a data register, a configuration register, and a command register.
      <br/>
      In addition, the I/O module 210 includes a status register of which the 6 most significant bits report the global status of the I/O module 210, and of which the 2 least significant bits report channel specific information.
      <br/>
      The data and configuration registers admit read and write access.
      <br/>
      However the command register is write-only, and the status register is read-only.
    </p>
    <p num="104">
      Each data register has an associated number of data points.
      <br/>
      One or more data points map to a single physical channel.
      <br/>
      Some examples of the correspondence between logical channels, points, and physical channels are as follows.
    </p>
    <p num="105">
      1. An analog output module AO-8 has 8 physical output channels, and 8 logical channels of one point each.
      <br/>
      Thus, each logical channel corresponds to a physical channel.
      <br/>
      2. A discrete input module DI-16 has 16 physical input channels, and 1 logical channel with 16 points.
      <br/>
      Thus, each physical channel corresponds to two points of the logical channel.
      <br/>
      3. A counter module CT-8A has 8 physical channels, and 8 logical channels with two points each.
      <br/>
      Thus each logical channel correspond to a physical channel.
      <br/>
      One point of a logical channel defines a count value, and the second point defines an input frequency for the corresponding physical channel.
      <br/>
      4. An counter module CT-8B has 8 physical channels, and 16 logical channels with 1 point each.
      <br/>
      Eight logical channels define the count values for the eight physical channels, while the eight remaining logical channels define input frequencies for the eight physical channels.
      <br/>
      5. A waveform output module WAV-4 has 4 physical,channels, and four logical channels with 1024 points each.
      <br/>
      The 1024 points of a logical channel define amplitude values for the waveform to be asserted on one physical channel.
    </p>
    <p num="106">
      Each data register is organized as a circular buffer.
      <br/>
      Reads or writes to a data register are accomplished by addressing an I/O module 210 and a particular logical channel in the I/O module 210 with the Function Code set to 3.
      <br/>
      Each byte of the channel's data register may be read (or written) with consecutive I/O read (or write) cycles.
      <br/>
      Since these reads (or writes) increment a byte pointer associated with the data register, all of a channel's data bytes must be read (or written), thus rolling over the pointer to the head of the data register, before attempting to access another channel's data register.
      <br/>
      It is advisable to follow a data register read with a status register read on the same channel to verify that the data was valid, the I/O module still exists, the I/O module is configured, etc.
    </p>
    <p num="107">
      While the network module 200 possesses the semaphore of an I/O module 210, it may freely access (read and/or write) the channels of the I/O module 210.
      <br/>
      It is noted that the I/O module 210 does not update its data registers while the network module 200 holds the semaphore.
      <br/>
      Thus, by not releasing the semaphore the network module 200 is able to ensure that data read from different channels was acquired close together in time.
    </p>
    <p num="108">Configuration Registers</p>
    <p num="109">
      A logical channel may be individually configured by writing to its configuration register.
      <br/>
      A configuration register includes storage for a Range ID and one or more Attribute Settings as illustrated by the following table.
    </p>
    <p num="110">
      --
      <br/>
      -- Byte 0    Byte 1      Byte . . .            Byte n
      <br/>
      -- Range ID  Attribute   Attribute . . . setting ID Attribute
      <br/>
      --           0 setting ID                       n - 1 setting ID
    </p>
    <p num="111">
      A configuration register is written (or read) one byte at a time.
      <br/>
      The value of the Range ID determines the range which is force for the logical channel.
      <br/>
      For example, the range "4-20 mA" has a Range ID of 1.
      <br/>
      The Attributes may be programmable (more than one possible Attribute Setting ID) or predetermined (only one possible Attribute Setting ID).
    </p>
    <p num="112">
      In order to facilitate automatic configuration of I/O modules 210, each I/O module 210 includes non-volatile memory which stores a Module Information Structure (MIS).
      <br/>
      The MIS provides a description of the structure and programmable states of the I/O module 210.
      <br/>
      All I/O modules 210 of a particular type have identical MISes.
      <br/>
      When an I/O module 210 is initially inserted into a terminal base 220, the network module 200 reads the MIS of the I/O module 210.
    </p>
    <p num="113">
      Each MIS contains one or more Channel Information Structures.
      <br/>
      A Channel Information Structure (CIS) defines the characteristics of an abstract channel type which can be applied to one or more logical channels.
      <br/>
      Each logical channel conforms to one of the Channel Information Structures of the MIS.
      <br/>
      Among other things, a Channel Information Structure includes (a) a number of points associated with the present channel type, (b) a number of ranges supported by the present channel type, (c) a description for each range supported by the present channel type �including Range ID, and Data Length for points associated with the present range�, (d) a number of Attributes associated with the current channel type, (e) a description of the possible Settings ID's for each of the Attributes associated with the current channel type.
    </p>
    <p num="114">Command Registers</p>
    <p num="115">
      In addition to a configuration register, each channel of an I/O module 210 has a command register space (possibly of null length).
      <br/>
      To issue a command, the network module 200 writes to the I/O module 210 with Function Code set to 0.
      <br/>
      The values of the Data lines D�7:0� are written into the addressed command register space.
      <br/>
      Examples of commands include Start/Stop Counter, Reset Module, Clear Latches, and Start Averaging.
      <br/>
      The command register space is written to one byte at a time.
      <br/>
      The number of commands and the depth of the command register space is determined by the information in the channel's Channel Information Structure (CIS).
    </p>
    <p num="116">Module Select, Channel Select, and Function Code Lines</p>
    <p num="117">
      The module select lines MD�3:0�, Channel Select lines CS�3:0�, and Function Code lines FC�2:0� are asserted by a bus master (e.g. the network module 200 ) in addressing I/O modules 210.
      <br/>
      The module select lines MD�3:0� are used to address a particular I/O module 210.
      <br/>
      Each I/O module 210 compares its assigned address inherited from its terminal base to the module select lines MD�3:0�. If a match occurs, the bus master is granted access to read or write from/to the I/O module 210.
    </p>
    <p num="118">
      The Channel Select lines CS�3:0� address a particular logical channel within the addressed I/O module 210.
      <br/>
      The Function Code lines FC�2:0� are used (1) to access a particular register space within the addressed logical channel of the addressed I/O module; or (2) to request a semaphore from an I/O module 210; or (3) to release a semaphore back to an I/O module 210.
      <br/>
      The table below specifies the meaning of each value of the Function Code.
      <br/>
      Note that the interpretation of a Function Code depends on whether a read or write access is being performed.
    </p>
    <p num="119">
      --
      <br/>
      -- Function
      <br/>
      -- Code        FC2    FC1    FC0    Read access    Write access
      <br/>
      -- 0           0      0      0      Semaphore      Command Write
      <br/>
      --                                  Request
      <br/>
      -- 1           0      0      1      Status Read    Semaphore
      <br/>
      --                                                 Release
      <br/>
      -- 2           0      1      0      Configuration  Configuration
      <br/>
      --                                  Read           Write
      <br/>
      -- 3           0      1      1      Data Read      Data Write
      <br/>
      --                                                 (if applicable)
      <br/>
      -- 4-7         1      x      x      Reserved       Reserved
    </p>
    <p num="120">Writing to an I/O Module</p>
    <p num="121">
      A falling edge on the WR* line starts a write cycle on the local bus 240.
      <br/>
      The Module Select lines MS�3:0�, Channel Select lines CS�3:0�, and Function Code lines FC�2:0� must be stable before the falling edge on the WR* line.
      <br/>
      The WR* line must remain low as long as the RDY line is low.
      <br/>
      Data must remain valid on the data line D�7:0� until the rising edge of the WR* line.
      <br/>
      Successive writes to the same logical channel of an I/O module 210 will write to successive bytes of that channel's data (or configuration) register.
      <br/>
      Reading from an I/O Module
    </p>
    <p num="122">
      A falling edge on the RD* line starts a read cycle on local bus 240.
      <br/>
      The Module Select lines MS�3:0�, Channel Select lines CS�3:0�, and Function Code lines FC�2:0� must be stable before the falling edge of the pulse.
      <br/>
      The RD* line should remain low as long as the RDY line is low.
      <br/>
      Data will remain valid on the data lines D�7:0� until the rising edge of the RD* line.
      <br/>
      Successive reads of the same logical channel of an I/O channel will read successive bytes of that channel's data (or configuration) register.
    </p>
    <p num="123">Semaphore Mechanism</p>
    <p num="124">
      In order to control access to the data and configuration registers of the I/O modules 210, the present invention employs a semaphore mechanism.
      <br/>
      One semaphore is associated with each I/O module 210.
      <br/>
      The network module 200 must possess the semaphore before accessing the data register and/or configuration register of the corresponding I/O module 210.
      <br/>
      To obtain the semaphore of an I/O module 210, the network module 200 reads the I/O module 210 with the Function Code 0.
      <br/>
      This act of reading the I/O module 210 with Function Code 0 comprises a semaphore request, i.e. a request for possession of the semaphore.
      <br/>
      In response to the semaphore request, the I/O module 210 either: (a) grants the semaphore to the network module 200 with an indication that the current granting is non-trivial, i.e. that prior to the current granting, the network module 210 did not already have possession of the semaphore; (b) acknowledges that the semaphore was already possessed by the network module 200 prior to the current request, and remains in the possession of the network module 200; or (c) denies the semaphore request.
      <br/>
      Each I/O module 210 includes a semaphore register which includes a pair of semaphore status bits S_Gnt* and S_Ack.
      <br/>
      The I/O module 210 updates the semaphore status bits before the RD* line is deasserted by the network module 200 during the semaphore request read cycle.
      <br/>
      The updated condition of the semaphore status bits reflects one of the responses (a), (b), or (c) according to the following semaphore status table.
    </p>
    <p num="125">
      --
      <br/>
      -- Response to Semaphore Request             S_Gnt*  S_Ack
      <br/>
      -- (a) I/O module grants semaphore request non-trivially, 0       1
      <br/>
      -- i.e. the network module 200 did not already own it.
      <br/>
      -- (b) I/O module grants semaphore request trivially, 1       1
      <br/>
      -- i.e. the network module 200 already possessed the
      <br/>
      -- semaphore.
      <br/>
      -- (c) I/O module denies semaphore request: semaphore 1       0
      <br/>
      -- not granted.
    </p>
    <p num="126">
      The network module 200 examines the contents of the semaphore register accessed by the semaphore request.
      <br/>
      The condition of the semaphore status bits informs the network module 200 if the semaphore has been granted, and if so, whether the semaphore is being newly granted or was already possessed by the network module 200.
    </p>
    <p num="127">
      When the network module 200 has ownership of a semaphore, the network module 200 may freely access (read and/or write) the data registers and/or configuration registers of the corresponding I/O module 210.
      <br/>
      When the network module 200 is finished accessing the I/O module 210, the network module releases the semaphore to the I/O module 210 by writing the I/O module 210 with Function Code set to 1.
      <br/>
      A semaphore request subsequent to the semaphore release will receive response (a) unless the I/O module 210 seizes the semaphore in the time intervening between the semaphore release and the subsequent semaphore request.
      <br/>
      In this later case, the subsequent semaphore request will receive the response (c), i.e. semaphore not granted.
    </p>
    <p num="128">
      The qualification of the semaphore grant offered by the S_Gnt* bit is important for the embodiment where the network module 200 is capable of multiprocessing.
      <br/>
      Suppose that a first process running in network module 200 performs a semaphore request and is granted the semaphore of an I/O module 210.
      <br/>
      Furthermore, suppose that the first process gets context-switched out and a second process gets switched in.
      <br/>
      If the second process performs a semaphore request to the same I/O module 210, the second process will receive response (b), i.e. semaphore granted but already possessed, since the first process still possesses the semaphore.
      <br/>
      In this case, the second process may take the passive approach of waiting until the first process is finished accessing the I/O module 210 and releases the semaphore.
      <br/>
      To this end, the second process may intermittently perform semaphore requests.
      <br/>
      Response (b) will prevail until the first process releases the semaphore, after which time the response (a) will be detected.
    </p>
    <p num="129">
      Alternatively, if the second process is time-critical (or has a high priority relative to the first process), the second process may assert a semaphore release and thereby force the first process to relinquish the semaphore.
      <br/>
      A subsequent semaphore request asserted by the second process will result in response (a), i.e. a non-trivial granting of the semaphore.
      <br/>
      Thus, the qualified semaphore grant mechanism and the semaphore release feature of the present invention allow time-critical processes to maintain their determinism.
      <br/>
      Without the semaphore release feature, a time-critical task would be forced to wait for an indefinite length of time for the first process to finish its data transfer activity and release the semaphore voluntarily.
    </p>
    <p num="130">
      It is noted that it is possible for the I/O module 210 to seize the semaphore in the time interval between the semaphore release and the subsequent semaphore request asserted by the second process, in which case the subsequent request will be denied, i.e. receive response (c).
      <br/>
      Thus, it is advantageous to minimize the time interval between the semaphore release and the subsequent request.
    </p>
    <p num="131">Semaphore Request Storing Feature</p>
    <p num="132">
      The semaphore mechanism of the present invention has a feature that elevates the priority of a semaphore request from the network module 200.
      <br/>
      This guarantees faster semaphore granting, and also eliminates the case of accidental request synchronization.
      <br/>
      Accidental request synchronization is said to occur if the request cycle times of the I/O module 210 and the network module 200 are such that each time the network module 200 requests the semaphore, the I/O module 210 has possession of it.
      <br/>
      Such a condition would make it impossible for the network module 200 to gain ownership of the semaphore.
    </p>
    <p num="133">
      If the I/O module 210 owns the semaphore and cannot grant it in response to the request from the network module 200, the I/O module 210 stores the request.
      <br/>
      The stored request prevents the I/O module from re-owning the semaphore once it releases it.
      <br/>
      This feature guarantees that once the I/O module relinquishes the semaphore, the ownership of the semaphore is reserved for the network module 200 (i.e. the I/O module 210 cannot re-acquire the semaphore unless the network module 200 releases it).
      <br/>
      This also implies that the network module 200 must either re-attempt to acquire a semaphore that it was not granted, or must indicate that it no longer needs the semaphore by performing a semaphore release.
      <br/>
      Releasing a semaphore that was not granted causes the latched request to be invalidated.
    </p>
    <p num="134">Deterministic Semaphore Availability</p>
    <p num="135">
      In order to provide determinism to the semaphore mechanism, the semaphore control algorithm of the I/O module 210 enforces a maximum time the I/O module 210 may own the semaphore after a denied semaphore request.
      <br/>
      As explained above, if a network module 200 asserts a semaphore request while the I/O module 210 owns the semaphore, the I/O module 210 denies the semaphore request, i.e. the semaphore request receives response (c).
      <br/>
      The semaphore control algorithm allows the I/O module 210 to retain the semaphore no longer than the maximum time after the denied semaphore request.
      <br/>
      The maximum time is referred to as the semaphore request time.
    </p>
    <p num="136">
      The semaphore request time is stored in the Module Information Structure (MIS) of the I/O module in non-volatile memory.
      <br/>
      All modules of a given type have the same semaphore request time.
      <br/>
      When an I/O module 210 is initially inserted into an active terminal base, the network module 200 reads the MIS of the I/O module 210 and is thereby informed of the semaphore request time of the I/O module.
      <br/>
      A first process executing in network module 200, after having received response (c) to a first semaphore request, may use the semaphore request time to determine an optimal strategy for performing subsequent semaphore requests.
      <br/>
      For example, according to a "least effort" strategy, the first process asserts a second semaphore request after the semaphore request time elapses starting from the first semaphore request.
      <br/>
      Since the I/O module 210 is guaranteed to release the semaphore within the semaphore request time following the first semaphore request, the second semaphore request will be non-trivially granted, i.e. receive response (a).
      <br/>
      It is noted that it is possible for another process running in the network module 200 to request the semaphore in the time interval intervening between the semaphore release by the I/O module 210 and the second semaphore request by the first process.
      <br/>
      In this case, the second semaphore request will be trivially granted, i.e. receive response (b).
    </p>
    <p num="137">
      According to a "east time" strategy, the first process asserts repeated semaphore requests after the first semaphore request and before the semaphore request time elapses.
      <br/>
      Since, the I/O module 210 may release the semaphore before the semaphore request time elapses, e.g. due to a natural completion of a data transfer task, the process by following the least-time strategy may obtain semaphore ownership sooner than if the least effort strategy were followed.
    </p>
    <p num="138">
      Processes executing in the network module 200 may be more efficiently coded in view of the fact that all I/O modules 210 have deterministic behavior.
      <br/>
      Furthermore, a given process may employ an optimized semaphore request strategy for each of the I/O modules 210 which takes into account: the function performed by the I/O module 210; the semaphore request time of the I/O module 210; the priority of the process relative to other processes running the network module 200; etc.
    </p>
    <p num="139">Semaphore State Diagram</p>
    <p num="140">
      The semaphore mechanism operates according to a state diagram given in FIG. 14. When the I/O module 210 is powered up, the state diagram starts in semaphore available state 1500 where the semaphore is available to either the network module 200 or the I/O module 210.
      <br/>
      The I/O module 210 stays in the semaphore available state 1500 until either (1) the network module 200 asserts a semaphore request, or (2) the I/O module 210 performs a local semaphore seizure 1562.
    </p>
    <p num="141">
      If the network module 200 asserts a semaphore request 1550, the state diagram transitions to the semaphore non-trivially granted state 1505.
      <br/>
      As mentioned above, the I/O module 210 implements this transition by setting the S_Ack and S_Gnt* bits of the semaphore register to 1 and 0 respectively within the read cycle of the semaphore request 1550.
      <br/>
      By setting the semaphore status bits in this fashion, the I/O module 210 signals to the network module 210 that the semaphore request 1550 has been non-trivially granted, i.e. the semaphore was not owned by the network module 210 prior to the current semaphore request 1550.
      <br/>
      In the semaphore non-trivially granted state 1505, the network module 200 may freely access (read/write) the data and/or configuration registers of the I/O module 210.
    </p>
    <p num="142">
      From the semaphore non-trivially granted state 1505, a semaphore request 1554 induces a transition to the semaphore already owned state 1510.
      <br/>
      The I/O module 210 implements this transition by setting the S_Ack and S_Gnt* bits of the semaphore register to 1 and 1 respectively within the read cycle of the semaphore request 1554.
      <br/>
      By setting the semaphore status bits in this fashion, the I/O module 210 signals to the network module 210 that the semaphore request 1554 has been trivially granted, i.e. semaphore has already owned by the network module 200 prior to the current semaphore request 1554.
      <br/>
      In the semaphore already owned state 1510, the network module 200 may freely access (read/write) the registers of the I/O module 210 just as in semaphore non-trivially granted state 1505.
    </p>
    <p num="143">
      From the semaphore already owned state 1510, a semaphore request 1556 induces a null transition, i.e. the state does not change.
      <br/>
      The semaphore status bits S_Ack and S_Gnt* do not change and therefore maintain their values 1 and 1 respectively.
      <br/>
      From the semaphore already owned state 1510, a semaphore release 1558 asserted by the network module 200 induces a transition to the semaphore available state 1500.
    </p>
    <p num="144">From the semaphore non-trivially granted state 1505, a semaphore release 1552 asserted by the network module 200 induces a transition to the semaphore available state 1500.</p>
    <p num="145">
      From the semaphore available state 1500, a local semaphore seizure 1562 asserted by the I/O module 210 induces a transition to the local semaphore ownership state 1515.
      <br/>
      The I/O module 210 may freely access (read and/or write) the data registers and/or configuration registers of the I/O module 210 during local semaphore ownership state 1515.
      <br/>
      The I/O module 210 is said to own the semaphore during local semaphore ownership state 1515.
      <br/>
      Local semaphore ownership state 1515 is a composite state composed of two sub-states.
      <br/>
      The local semaphore seizure 1562 induces a transition to initial local ownership state 1515A.
      <br/>
      From the initial local ownership state 1515A, a semaphore request 1564 asserted by the network module 200 induces a transition to the semaphore requested state 1515B.
      <br/>
      The I/O module 210 implements this transition by setting the S_Ack and S_Gnt* bits of the semaphore register to 0 and 1 respectively within the read cycle of the semaphore request 1564.
      <br/>
      By setting the semaphore status bits in this fashion, the I/O module 210 denies the semaphore request 1564 asserted by the network module 200.
    </p>
    <p num="146">
      When the I/O module 210 no longer needs access to the data/configuration registers of the I/O module 210, it relinquishes the semaphore.
      <br/>
      From state 1515A, local semaphore relinquish 1572 asserted by the I/O module 210 induces a transition to the semaphore available state 1500.
      <br/>
      From the semaphore requested state 1515B, local semaphore relinquish 1574 asserted by the I/O module 210 induces a transition to the semaphore reserved for network module state 1525.
      <br/>
      In the semaphore reserved for network module state 1525, the I/O module 210 may not regain control of the semaphore.
      <br/>
      This is illustrated by the null transition from state 1525 to itself in response the I/O module requesting the semaphore.
      <br/>
      From the semaphore reserved for network module state 1525, a semaphore request 1576 asserted by the network module 200 induces a transition to the semaphore non-trivially granted state 1505.
      <br/>
      The I/O module 210 implements this transition by setting the semaphore status bits the S_Ack and S_Gnt* bits to 1 and 0 respectively.
      <br/>
      By setting in the bits in this fashion, the I/O module 210 informs that network module 210 that the semaphore has been non-trivially granted, i.e. that the semaphore is now granted and was not granted prior to the current semaphore request 1576.
    </p>
    <p num="147">
      From the semaphore reserved for network module state 1525, a semaphore release 1578 asserted by the network module 200 induces a transition to the semaphore available state 1500.
      <br/>
      By asserting semaphore release 1578, the network module 200 allows the I/O module 210 to have access to the semaphore.
    </p>
    <p num="148">
      From semaphore requested state 1515B, a semaphore request 1566 asserted by the network module 200 induces a trivial transition to the semaphore requested state 1515B.
      <br/>
      The I/O module 210 implements this transition by setting the S_Ack and S_Gnt* bits of the semaphore register to 0 and 1 respectively.
      <br/>
      By setting the semaphore status bits in this fashion, the I/O module 210 signals to the network module 200 that the semaphore request 1566 has been denied.
      <br/>
      From semaphore requested state 1515 B, a semaphore release 1568 asserted by the network module 200 induces a transition to the initial local ownership state 1515A.
    </p>
    <p num="149">
      As alluded to earlier, the semaphore control algorithm of the I/O module 210 enforces a maximum time that the I/O module 210 may control the semaphore after a denied semaphore request.
      <br/>
      In terms of the state diagram, this implies that the I/O module 210 may remain in semaphore requested state 1515B no longer than the semaphore request time.
    </p>
    <p num="150">It is noted that by a natural extension the semaphore mechanism described above, alternate embodiments are easily conceived wherein (1) each I/O module 210 uses more than one semaphore, and/or (2) each I/O module 210 uses one or more semaphores per logical channel.</p>
    <p num="151">Status Register</p>
    <p num="152">
      The status register is a single byte read-only register which indicates the state of the I/O module 210 as a whole, and of a logical channel in particular.
      <br/>
      When the network module 200 reads an I/O module 210 with Function Code equal to 0 or 1, the contents of the status register are returned on data lines D�7:0� of the parallel bus.
      <br/>
      The following table lists the name of the status bits conveyed on each data line D�7:0�.
    </p>
    <p num="153">Returned Data Contents:</p>
    <p num="154">
      --
      <br/>
      -- D7      D6      D5      D4      D3      D2      D1     D0
      <br/>
      -- S_Gnt*  S_Ack   MST2    MST1    MST0    SCO     CST1   CST0
    </p>
    <p num="155">
      The upper six bits corresponding to D�7:2� indicate the status of the I/O module 210 as a whole.
      <br/>
      The lower two bits corresponding to D�1:0� indicate the status of a particular logical channel.
      <br/>
      Reading the I/O module 210 with Function Code 0 comprises a semaphore request.
      <br/>
      In this case, only the upper six bits of the status register contents are valid.
      <br/>
      As described above, the response of the I/O module 210 to the semaphore request is indicated by the values of the S_Gnt* and S_Ack bits.
      <br/>
      That is, the active-low assertion of the RD* line initiating the semaphore request induces the I/O module 210 to update the semaphore status bits S_Gnt* and S_Ack according to the semaphore state diagram of FIG. 14. These status bits as well as the other four status bits MST�2:0� and SCO are updated before the de-assertion of the RD* line which concludes the semaphore request read cycle.
    </p>
    <p num="156">When reading the I/O module 210 with Function Code 0, the logical channel address conveyed on channel select lines CH�3:0� is ignored as illustrated in the following table.</p>
    <p num="157">Semaphore Request Addressing:</p>
    <p num="158">
      --
      <br/>
      -- Name:   MD3    MD2    MD1    MD0    CH3    CH2    CH1    CH0    FC
      <br/>
      -- Value:  Module Address        Channel Number Arbitrary 0
    </p>
    <p num="159">
      The Module Select lines MS�3:0� determine the I/O module 210 to be addressed.
      <br/>
      The I/O module 210 closest to the network module 200 has address 0000b, and I/O modules 210 successively farther from the network module 200 have corresponding larger addresses.
      <br/>
      The Channel Select lines CH�3:0� are normally used to address a particular logical channel of an I/O module 210.
      <br/>
      However, in the case of a semaphore request these lines are ignored.
    </p>
    <p num="160">
      In order to report the status of logical channels, the I/O module 210 maintains a pair of channel status bits CST�1:0� for each of the logical channels.
      <br/>
      To access the channel status bits for a particular logical channel, the network module 200 reads the I/O module 210 with Function Code 1.
      <br/>
      The two least significant bits of the status register convey the channel status bits CST�1:0� for the addressed logical channel, and are guaranteed to be valid only if the semaphore has been granted to the network module 200.
      <br/>
      The upper six bits of the status register have the same meaning as in a semaphore request, and are valid whether or not the semaphore has been granted to the network module 200.
      <br/>
      In the case of a channel status read, the channel select lines CH�3:0� denote the logical channel to be addressed.
    </p>
    <p num="161">Definition of the Status Register Bits</p>
    <p num="162">
      The S_Ack bit is also known as the Semaphore Acknowledge bit.
      <br/>
      A "1" value for this bit indicates that the network module 200 possesses the semaphore, and thus has permission to access the data, configuration, or command registers of the I/O module 210.
      <br/>
      A "0" value for this bit indicates that the network module 200 does not possess the semaphore, and thus does not have permission to access the data, configuration, or command registers of the I/O module 210.
      <br/>
      Although this bit is not very useful if the I/O module 210 is not physically present, its value is defined to be "1" if the MST status is "No Base" and a "0" if the MST status is "Base but no module".
      <br/>
      See below the definition of the MST bits.
    </p>
    <p num="163">
      The S_Gnt* bit, also known as the Semaphore Granted bit, is meaningful only in response to a semaphore request.
      <br/>
      When the S_Ack bit indicates that the network module 200 possesses the semaphore (i.e. S_Ack=1), the S_Gnt* bit provides the following qualification.
      <br/>
      A "0" value for the S_Gnt* bit indicates that permission to access the I/O module 210 was newly granted to the network module 200 during the current semaphore request.
      <br/>
      A "1" value for the S_Gnt* bit indicates that the network module 200 already had possession of the semaphore prior to the current semaphore request.
      <br/>
      Although, the S_Gnt* bit is not very meaningful if the addressed I/O module 210 or addressed terminal base 220 is not physically present, it takes the value "1" in these cases.
      <br/>
      The MST bits, also known as the Module Status bits, indicate the status of the selected I/O module 210.
      <br/>
      The various bit patterns for the MST bits and the corresponding conditions they represent are sunmmarized in the table below.
      <br/>
      The MST bit pattern 1-1-X indicates that the addressed terminal base 220 is not physically present.
      <br/>
      The MST bit pattern 1-0-X indicates that the addressed terminal base 220 is present, however no I/O module 210 is installed in the addressed terminal base 220.
    </p>
    <p num="164">
      --
      <br/>
      --      Module Status Condition MST_2         MST_1   MST_0
      <br/>
      --      No Base              1             1       x
      <br/>
      --      Base, but no module  1             0       x
      <br/>
      --      Module Unconfigured  0             0       0
      <br/>
      --      Module Not Ready     0             0       1
      <br/>
      --      Module Ready         0             1       1
    </p>
    <p num="165">
      When an I/O module 210 is initially powered up, the MST bits are set with the pattern 0-0-0 indicating that the I/O module 210 is in the so called "Module Unconfigured" state.
      <br/>
      The I/O module 210 remains in the Module Unconfigured state until the configuration table of the I/O module 210 is written to for the first time.
      <br/>
      The configuration table of an I/O module 210 is defined as the ensemble of all configuration register spaces for the I/O module 210.
      <br/>
      In response to the first write access to the configuration table, the I/O module 210 sets the MST bits with the bit pattern 0-0-1 indicating that the I/O module 210 has entered the "Module Not Ready" state.
      <br/>
      At this point, the I/O module 210 does not know which of the logical channels have received new configuration information, and therefore it cannot guarantee that any of the data registers are valid.
      <br/>
      Thus, upon entering the Module Not Ready state, the I/O module 210 scans its configuration table to determine which (if any) of the configuration register spaces were altered during the recent configuration table write access.
      <br/>
      For each logical channel whose configuration register space was altered, the I/O module 210 sets the channel status to "Unconfigured" by setting the corresponding CST�1:0� bits with the pattern 00b.
      <br/>
      Then the I/O Module returns to the "Module Ready" state by setting the MST bits with the pattern 0-1-1.
    </p>
    <p num="166">
      The I/O module 210 remains in the Module Ready state until the network module 200 writes the configuration table of the I/O module 210, at which time the I/O module 210 enters the "Module Not Ready" state which is again signaled by setting the MST bits to 0-0-1.
      <br/>
      As described above, upon entering the Module Not Ready state, the I/O module 210 scans the configuration table to identify the logical channels which have received new configuration values, and sets the channel status for these logical channels to Unconfigured.
      <br/>
      After this updating of the channel status information, the I/O module 210 returns to the Module Ready state (MST=011).
      <br/>
      Thus, the I/O module 210 resides in the Module Ready state except for short time intervals following a configuration table write access.
      <br/>
      Upon returning to the Module Ready state, the I/O module 210 reconfigures each of the logical channels which received new configuration information.
      <br/>
      When the reconfiguration of a given logical channel is complete, the I/O module 210 sets the corresponding CST�1:0� bits to 11b indicating that the channel status is "Good".
      <br/>
      In the "Good" state, the data register of the logical channel is guaranteed to conform to the current values of the corresponding configuration register space.
      <br/>
      In contrast, in the Unconfigured state, the data in the channel's data register does not correspond to the settings in its configuration register.
      <br/>
      A channel will always be in the Unconfigured state when the I/O module 210 is in either the "Unconfigured" state or "Module Not Ready" state, i.e. MST bits equal 000b or 001b respectively.
    </p>
    <p num="167">
      As an example of a channel reconfiguration, suppose that the I/O module 210 is an analog input module, and the network module 200 writes to the configuration register of a logical channel in order to set the input voltage range for that channel.
      <br/>
      Then the channel status bits CST�1:0� will indicate an Unconfigured channel until the I/O module 210 loads a new data point corresponding to the new range into the channel's data register.
    </p>
    <p num="168">
      In addition to the "Good" status and the "Unconfigured" status, a logical channel can have one of two "Bad" statuses.
      <br/>
      The following table lists the status indication provided by each of the possible CST bit patterns.
    </p>
    <p num="169">
      --
      <br/>
      --         Channel Status       CST_1   CST_0
      <br/>
      --         Good                 1       1
      <br/>
      --         Unconfigured         0       0
      <br/>
      --         Bad Status "A" 0       1
      <br/>
      --         Bad Status "B" 1       0
    </p>
    <p num="170">
      Recall that each I/O module 210 includes non-volatile memory in which is stored a Module Information Structure (MIS).
      <br/>
      The MIS includes one or more Channel Information Structures.
      <br/>
      A Channel Information Structure (CIS) defines a channel format which may be assigned to one or more logical channels.
      <br/>
      The CIS includes a definition for one or both of the "Bad" statuses which are referred to as "Channel Specific Error A" and "Channel Specific Error B".
      <br/>
      Examples for channel specific errors include "Input Out of Range", "Short Circuit Detected", and "Open Thermocouple".
    </p>
    <p num="171">The CST bits of the status register are valid only if the addressed terminal base 220 and I/O module 210 are physically present, and if the semaphore of the I/O module 210 has been granted to the network module 200.</p>
    <p num="172">
      The SCO bit, also known as the Serial Communication Open bit, reflects the state of the I/O module 210 in relation to the serial bus 243.
      <br/>
      When the SCO bit is high, the I/O module 210 is opened to the serial bus 243.
      <br/>
      This bit is not valid when the module status (MST) is "No Base".
    </p>
    <p num="173">Accessing an I/O Module</p>
    <p num="174">
      According to one embodiment, the network module 200 accesses an I/O module 210 as shown in FIG. 15. In order to access an I/O module 210, the network module 200 must first obtain the semaphore of the I/O module 210.
      <br/>
      To this end, in step 1605, the network module 200 requests the semaphore by reading the I/O module 210 with Function Code set to 0.
      <br/>
      In response to the semaphore request read, the I/O module 210 returns on Data lines D�7:0� the contents of the status register.
      <br/>
      In step 1610, the network module 200 tests the S_Gnt* and S_Ack bits of the returned status byte to determine if the semaphore request was granted or denied.
      <br/>
      If the semaphore request was denied, the network module 200 proceeds to step 1615.
      <br/>
      As described above, the I/O module 210 is guaranteed to relinquish the semaphore within the semaphore request time after a denied semaphore request.
      <br/>
      When the I/O module 200 is initially inserted into a terminal base, the network module 200 reads the module information structure (MIS) of the I/O module 210.
      <br/>
      Since the semaphore release time is one of the embedded parameters of the MIS, the network module 200 may use the semaphore request time to determine an optimal semaphore request strategy with respect to the I/O module 210.
    </p>
    <p num="175">
      According to the present embodiment, the network module 200 includes a semaphore timer which is used to control the timing of semaphore requests.
      <br/>
      In step 1615, the network module 200 determines whether the semaphore timer has been activated.
      <br/>
      If the semaphore timer has not been activated, the semaphore timer is activated in step 1620, and the semaphore request (step 1605) is re-asserted.
    </p>
    <p num="176">
      If, in step 1615, the semaphore timer has been activated, the semaphore timer value is compared with the semaphore request time in step 1625.
      <br/>
      If the semaphore timer value does not exceed the semaphore request time, the network module 200 re-asserts the semaphore request (step 1605) preferably after waiting for a retry interval.
      <br/>
      If, in step 1625, the semaphore timer value exceeds the semaphore request time, the network module 200 reports an error condition associated with the I/O module 210 as shown in step 1660.
    </p>
    <p num="177">
      If, in step 1610, the semaphore was granted in response to the semaphore request of step 1605, the network module 200 performs any pending read/write operations for a selected channel in the I/O module 210.
      <br/>
      After completing the pending read/write operations for the channel, the network module 200 performs a status read on the selected channel as shown in step 1635.
      <br/>
      In step 1640, the network module 200 tests the status register contents returned by the status read of step 1635.
      <br/>
      If the status bits reflect an error condition, the network module 200 reports the error in step 1660.
      <br/>
      Otherwise, the network module 200 determines whether there are pending read/write operations to be performed for any other channels of the I/O module as shown in step 1650.
      <br/>
      If there are other channels with pending read/write operations, the network module 200 selects one of these other channels and performs the reads/write operations for the newly selected channel as shown in step 1630.
      <br/>
      If, in step 1650, the network module 200 determines that there are no remaining channels with pending read/write operations to be performed, the network module 200 asserts a semaphore release as shown in step 1670.
    </p>
    <p num="178">Module Information Structure</p>
    <p num="179">
      Each I/O module 210 contains non-volatile memory in which is stored a Module Information Structure.
      <br/>
      The Module Information Structure (MIS) contains information which characterizes the I/O module 210.
      <br/>
      When an I/O module 210 is inserted to a terminal base 220, the network module 200 reads the MIS of the I/O module 210 via serial bus 243.
      <br/>
      The contents of the MIS determine how the network module 200 is to interact with the I/O module 210. I/O modules 210 of a given type have identical Module Information Structures.
      <br/>
      For example, all analog output modules AO-8 have identical Module Information Structures.
    </p>
    <p num="180">
      An MIS comprises a Module Description and one or more Channel Information Structures.
      <br/>
      Refer now to FIG. 16, collectively comprising FIGS. 16A and 16B, for a table describing the organization of the MIS.
      <br/>
      The Module Description comprises the first portion of the MIS.
      <br/>
      The Module Description contains information pertaining to the I/O module 210 as a whole and to the MIS itself.
      <br/>
      The Module Description includes the following fields.
    </p>
    <p num="181">
      �MIS Length� The MIS Length parameter describes the length of the MIS in bytes.
      <br/>
      The MIS Length parameter is a one word integer.
    </p>
    <p num="182">�Module ID� The Module ID corresponds to the module type of the I/O module 210.</p>
    <p num="183">
      �Hot Swap ID� I/O Modules 210 with the same Hot Swap ID have the same register space (Data, Configuration, and Command), and therefore can be hot-swapped for one another.
      <br/>
      The Hot Swap ID is a one byte integer.
    </p>
    <p num="184">�Module Name Length� The Module Name Length parameter specifies the length in bytes of the following "Module Name" character string.</p>
    <p num="185">
      �Module Name� The Module Name field is a character string with length up to 255 bytes.
      <br/>
      The Module Name string specifies the name of the I/O module 210.
    </p>
    <p num="186">
      �Serial Number� No two I/O module 210 of a given type have the same Serial Number.
      <br/>
      The Serial Number is a long word integer.
    </p>
    <p num="187">
      �Semaphore Request Time� The Semaphore Request Time is the maximum length of time (in microseconds) the I/O module 210 can remain in the semaphore requested state 1515B (of FIG. 14).
      <br/>
      The network module 200 uses this parameter to determine the maximum time necessary to acquire the semaphore.
      <br/>
      The Semaphore Request Time is a one byte integer.
    </p>
    <p num="188">
      �Number of CiSes� The Number of CISes parameter specifies the number of Channel Information Structures which are to follow in the Module Description.
      <br/>
      The Number of CISes parameter is a one byte integer.
    </p>
    <p num="189">
      �Number of Physical Channels� Defines the number of physical channels in the I/O module 210.
      <br/>
      This is not necessarily equal to the number of logical channels, since multiple physical channels may correspond to a single logical channel.
      <br/>
      The Number of Physical Channels parameter is a one byte integer.
    </p>
    <p num="190">Channel Information Structures</p>
    <p num="191">
      The Module Description is followed by a number of Channel Information Structures determined by the Number of CISes parameter described above.
      <br/>
      Each Channel Information Structure defines a channel format which may be applied to one or more logical channels.
      <br/>
      A Channel Information Structure includes the following fields.
    </p>
    <p num="192">
      �CIS Length� The CIS Length parameter specifies the length of the CIS in bytes.
      <br/>
      The CIS Length is an unsigned word integer.
    </p>
    <p num="193">
      �CIS ID� The CIS ID specifies a numerical ID for the channel type defined by the CIS.
      <br/>
      Channel Information Structures with identical CIS ID's are identical.
      <br/>
      Channel Information Structures with the same most significant byte define the same register structure, i.e. define identical data, configuration, and command registers.
    </p>
    <p num="194">�Channel Repetition Count� The Channel Repetition Count specifies the number of consecutive logical channels in the present I/O module 210 which conform to the present CIS definition.</p>
    <p num="195">�Channel Type� The Channel Type parameter specifies a channel type according to the following tabulated list.</p>
    <p num="196">
      --
      <br/>
      -- 0    Discrete Input Data passed as a word of �Data Length�
      <br/>
      -- 1    Discrete Output Boolean values
      <br/>
      -- 2    Analog Input  Data passed as an integer with �Data Length� bits
      <br/>
      -- 3    Analog Output representing a real number
      <br/>
      -- 4    Count Input   Data passed as an integer with �Data Length� bits
      <br/>
      -- 5    Count Output
    </p>
    <p num="197">�Points� The Points parameter specifies the number of points associated with any logical channel conforming to the present CIS.</p>
    <p num="198">
      �Number of Error Messages� Each logical channel can have up to two diagnostic error messages, corresponding to the Bad Status A and B states returned in the CST bits of the Status Register.
      <br/>
      These messages/states are given IDs and text strings so that they may be either machine or human readable.
      <br/>
      A channel may use both A and B, A only, or neither A nor B. Accordingly, the Number of Error Messages parameter therefore takes one of the values 0, 1, or 2.
      <br/>
      A number of Error Message Descriptions corresponding to the Number of Error Messages follows.
    </p>
    <p num="199">�Error Message "A/B" ID� The machine-readable ID of the Error Message for the "Bad Status A/B" state of the logical channel.</p>
    <p num="200">�Error Message "A/B" Length� The length of the next string, �Error Message "A/B" String�.</p>
    <p num="201">
      �Error Message "A/B" String� The human readable string message for the "Bad Status "A/B" State.
      <br/>
      This string has length less than 256 bytes.
    </p>
    <p num="202">
      �Number of ranges� The number of ranges supported by this logical channel format.
      <br/>
      Each range has an associated Range description which includes Range ID, Data Length, Data Units, Lower Limit Value, and Upper Limit Value.
      <br/>
      The first range described is the default range which the I/O module will assume.
    </p>
    <p num="203">
      �Range ID� A unique ID for this data range.
      <br/>
      A Range ID of 255 is reserved as a "null" range.
      <br/>
      For example, the range "4-20 mA" has range ID of 0.
      <br/>
      Any I/O module 210 supporting the range "4-20 mA" must give it the Range ID of 0.
      <br/>
      However, not all I/O modules 210 with a "4-20 mA" range must have identical Range descriptions for the range.
      <br/>
      One module might have a Data Length of 12 while another has a Data Length of 16.
      <br/>
      Also, one might have a full scale value of 20.000e-3 while another has overrange capabilities and a full scale value of 21.000e-3.
    </p>
    <p num="204">
      �Data length� The number of bits of data associated with each point of the present logical channel format.
      <br/>
      If the Data Length parameter is greater than 1 bit, each point of the data register will be right justified on a byte boundary, with any unused bits filling up the most significant bit positions.
      <br/>
      For Discrete I/O logical channels, the Data Length parameter is usually 1, in which case eight one- bit points are represented by one byte of the data register.
      <br/>
      For Count I/O channels, the Data Length parameter is the number of right justified significant bits in the data.
      <br/>
      For Analog I/O channels, a positive number N implies an unsigned integer value of N significant, right justified bits.
      <br/>
      A negative number - N implies a signed, two's complement integer of N significant, right justified bits.
      <br/>
      The bits to the left of the MSB in integer values should be taken as don't care bits which could have arbitrary values.
      <br/>
      The data value for a point can take any value in the range from 0 to 2N -1 for unsigned data �from-2(N-1) to 2(N-1) -1 for signed data�. This data range maps onto an associated range defined by the parameters �Lower Limit Value� and �Upper Limit Value�.
    </p>
    <p num="205">
      �Data Units� The Data Units parameter describes the units associated with �Lower Limit Value� and �Upper Limit Value� parameters.
      <br/>
      It also determines the data type of both the data value and the Upper and Lower Limit Values.
      <br/>
      The units corresponding to each value of the Data Units parameter is given in the following table.
    </p>
    <p num="206">
      �Lower Limit Value� The Lower Limit Value parameter defines the lower limit of a numeric range.
      <br/>
      The Data Units parameter specifies the units which are associated with the Lower Limit Value.
      <br/>
      For Boolean input or output types, the Lower Limit Value is all zeros.
      <br/>
      For Count types, this is the minimum (or most negative, for signed counts) value which can be measured or output.
      <br/>
      The Lower Limit value is of the same type as the data value.
      <br/>
      For Analog types, this is an 8-byte floating point value describing the value associated with the minimum (most negative) integer data value.
    </p>
    <p num="207">
      �Upper Limit Value� The Upper Limit Value parameter defines the upper limit of the numeric range whose lower limit is given by the Upper Limit Value.
      <br/>
      The Data Units parameter specifies the units are associated with the Upper Limit Value.
      <br/>
      For Boolean types, the Upper Limit Value is all ones.
      <br/>
      For Count types, the Upper Limit Value is the maximum (or most positive, for signed counts) value which can be measured or output; and the Upper Limit Value is of the same type as the data value.
      <br/>
      For Analog types, the Upper Limit Value is an 8-byte floating point value describing value associated with the maximum (most positive) integer data value.
    </p>
    <p num="208">
      �Number of Attributes� The number of independent attributes of the logical channel format.
      <br/>
      These attributes may be programmable (more than one setting) or not (only one setting).
      <br/>
      Each attribute has an associated description which includes an Attribute ID, Attribute Name Length, Attribute Name, Attribute Length, Type of Settings, and a description of the possible Settings for the Attribute.
    </p>
    <p num="209">
      �Attribute ID� A unique ID for this attribute.
      <br/>
      For example, the attribute "Noise Rejection" has range ID of 1.
      <br/>
      Any module supporting the range "Noise Rejection" must give it the ID of 1. (An Attribute ID of 255 is reserved as a "null" attribute with no settings.)
    </p>
    <p num="210">�Attribute Name Length� The number of characters in the following string field.</p>
    <p num="211">�Attribute Name� Text string giving the name of the attribute.</p>
    <p num="212">
      �Attribute Length�: Even though all attribute settings are unsigned 8-bit numbers, it is possible that consecutive attributes represent the consecutive bytes of a larger number.
      <br/>
      For example, an counter module may have two attributes, "Initial Count LSB" and "Initial Count MSB", where the settings of these two attributes represent a single, 16-bit, "virtual" attribute of the counter.
      <br/>
      For all practical purposes, "Initial Count LSB" and "Inital Count MSB" can be treated as two separate attributes.
      <br/>
      However, it may be desireable to have some way of recognizing that these attributes can be concatenated or typecast to a larger number, other than simply by using terms like "MSB" or "LSB" in the name.
      <br/>
      This field is used to describe the size of a "virtual" attribute.
      <br/>
      A value of one in this field implies that the attribute is a single byte and is not part of any larger "virtual" attribute.
      <br/>
      A value larger than one implies that the attribute represents the first (least significant) of multiple consecutive bytes.
      <br/>
      The value of this field is the total number of bytes in the "virtual" attribute.
      <br/>
      A value of zero implies that the attribute represents one of the other (not the first) bytes of a "virtual" attribute.
      <br/>
      Note: This field is only valid for integer settings (see the next field, �Type of Settings�).
      <br/>
      For enumerated settings, this field should contain zero.
    </p>
    <p num="213">
      �Type of settings� The allowable Settings for the current Attribute may be specified either (a) through an enumerated list of allowable Settings, or (b) through a minimum and maximum value defining an integer range of allowable Settings.
      <br/>
      The Type of Settings parameter takes the value 0 if the allowable Settings are to be specified through an enumerated list, and the value 1 if through a minimum and maximum value.
      <br/>
      Enumerated settings may or may not be programmable, while integer settings are always programmable.
    </p>
    <p num="214">
      If the Type of Settings parameter takes the value 0, then the allowable Settings for the Attribute are described by the following fields:
      <br/>
      �Number of Valid Settings�: The Number of Valid Settings parameter specifies the number of Settings which are allowed for this attribute.
      <br/>
      A value of 1 implies an Attribute which is not programmable (since there is only one setting to choose from).
      <br/>
      The Number of Valid Settings parameter is followed by a corresponding number of Setting Descriptions.
      <br/>
      Each Setting Description includes a Setting ID, Setting Name Length, and Setting Name.
      <br/>
      �Setting ID� The Setting ID is a unique ID for the present Setting of the present Attribute.
      <br/>
      For example, the Attribute "Noise Rejection" has a Setting of "10 Hz" with a Setting ID of 0.
      <br/>
      Any module supporting the Setting "10 Hz" for the Attribute "Noise Rejection" must give it the Setting ID of 0.
      <br/>
      A Setting ID of 255 is reserved as a "null" setting
      <br/>
      �Setting Name Length� The Setting Name Length parameter specifies the length of the following text string �Setting Name�.
      <br/>
      �Setting Name� The string Setting Name gives a textual description of the present Setting.
      <br/>
      The length of the string Setting Name is less than 256 bytes.
    </p>
    <p num="215">
      If the Type of Settings parameter takes the value 1, then the allowable Settings for the Attribute comprise a range of integer values defined by the following fields:
      <br/>
      �Minimum Setting� The Minimum Setting parameter defines the minimum allowed value that an Setting can achieve.
      <br/>
      If the value of the Minimum Setting parameter is greater (more positive) than the Maximum Setting parameter, then both the Minimum Setting and Maximum Setting are to be interpreted as signed values.
      <br/>
      Otherwise, they are to be interpreted as unsigned values.
      <br/>
      �Maximum Setting�: The Maximum Setting parameter defines the maximum allowed value that a Setting can achieve.
      <br/>
      If the value of the Minimum Setting parameter is greater (more positive) than the Maximum Setting parameter, then both the Minimum Setting and Maximum Setting are to be interpreted as signed values.
      <br/>
      Otherwise, they are to be interpreted as unsigned values.
    </p>
    <p num="216">
      �Default Setting� The Default Setting parameter specifies the Setting which is to be used as the default value for the present channel format.
      <br/>
      If Settings are enumerated, the Default Setting equals one of the allowable Setting IDs.
      <br/>
      If Settings are defined by an integer range, the Default Setting is an integer Setting in the range between Minimum Setting and Maximum Setting.
    </p>
    <p num="217">
      �Number of Command Registers�: The Number of Commands Registers parameter defines the number of single byte command registers for present logical channel format.
      <br/>
      Each register may represent one or more commands.
      <br/>
      Each Command Register has an associated Command Description which includes a Command Register ID, a Command
    </p>
    <p num="218">Register Name Length, a Command Length, and a description of the allowable values for the present Command.</p>
    <p num="219">
      �Command Register ID� A unique ID for this Command Register.
      <br/>
      A Command Register ID of 255 is reserved as a "null" command.
    </p>
    <p num="220">�Command Register Name Length�: The number of characters in the following text string, i.e. �Command Register Name�.</p>
    <p num="221">�Command Register Name� The name of the Command Register.</p>
    <p num="222">
      �Command Length�: Even though all command registers are unsigned 8-bit registers, it is possible that consecutive commands represent the consecutive bytes of a virtual Command Register.
      <br/>
      For example, an counter module may have two command registers, "Set Terminal Count LSB" and "Set Terminal Count MSB", where these two command registers represent a single, 16-bit, "virtual" command to the counter.
      <br/>
      For all practical purposes, "Set Terminal Count LSB" and "Set Terminal Count MSB" can be treated as two separate commands.
      <br/>
      However, it may be desirable to have some way of recognizing that these commands can be concatenated or typecast into a larger command, other than simply by using terms like "MSB" or "LSB" in the name.
      <br/>
      This field is used to describe the size of a "virtual" command.
      <br/>
      A value of one in this field implies that the command register is a single byte and is not part of any larger "virtual" command.
      <br/>
      A value larger than one implies that the command register represents the first (least significant) of multiple consecutive bytes.
      <br/>
      The value of this field is the total number of bytes in the "virtual" command.
      <br/>
      A value of zero implies that the command represents one of the other (not the first) bytes of a "virtual" command.
      <br/>
      Note: This field is only valid for integer Command Settings (see the next field, �Type of Commands�).
      <br/>
      For enumerated settings, this field should contain zero.
    </p>
    <p num="223">
      �Type of Commands� The allowable value for a Command Register may be specified either (a) through an enumerated list of allowable values, or (b) through a minimum and maximum value which defines an integer range of allowable values.
      <br/>
      The Type of Commands parameter takes the value 0 if the allowable values are to be specified by an enumerated list, and the value 1 if the allowable values are to be specified by a minimum and maximum value.
    </p>
    <p num="224">
      If the Type of Commands parameter takes the value 0, the allowable values for the present Command Register are defined as follows.
      <br/>
      �Number of Valid Commands� The Number of Valid Commands parameter specifies the number of commands which are allowed for the present Command Register.
      <br/>
      The Number of Valid Commands parameter is followed by a corresponding number of Command Descriptions.
      <br/>
      Each Command Description includes a Command ID, a Command Name Length, and a Command Name.
      <br/>
      �Command ID� The Command ID specifies a unique ID for the current command.
      <br/>
      A value of 255 is reserved as a "null" command.
      <br/>
      �Command Name Length�: The Command Name Length parameter specifies the number of characters in the following text string, �Command Name�.
      <br/>
      �Command Name� The Command Name parameter gives the a text description of the present Command.
      <br/>
      The Command Name string is less than 256 bytes long.
    </p>
    <p num="225">If the Type of Commands parameter takes the value 1, the allowable commands comprise an integer range defined by the following maximum and minimum values.</p>
    <p num="226">
      Integer Command descriptions: An integer command is described by its minimum and maximum allowable values.
      <br/>
      Zero is not a valid maximum or minimum value, since it is reserved as a null operation in all command registers.
      <br/>
      �Minimum Value� The Minimum Value parameter defines the minimum value for an integer range of allowable command values.
      <br/>
      If this Minimum Value is greater (more positive) than the following Maximum Value, both the Minimum Value and the Maximum Value are to be interpreted as signed values.
      <br/>
      Otherwise the Minimum Value and Maximum Value are to be interpreted as signed values.
      <br/>
      �Maximum Value� The Maximum Value parameter defines the maximum value for the integer range of allowable command values.
      <br/>
      If this Minimum Value is greater (more positive) than the preceding Maximum Value, both the Minimum Value and the Maximum Value are to be interpreted as signed values.
      <br/>
      Otherwise the Minimum Value and Maximum Value are to be interpreted as signed values.
    </p>
    <p num="227">Calibration Information in the Module Information Structure</p>
    <p num="228">
      In one embodiment of the present invention, the Module Information Structure (MIS) may be used to store calibration information for the I/O module 210.
      <br/>
      In the factory, before an I/O module 210 is shipped, an I/O module 210 may be subjected to a calibration test.
      <br/>
      For an input module, a calibration test aims at characterizing the functional relationship between a reference input and the corresponding measured value for each of the channels of the module.
      <br/>
      Conversely, for an output module, a calibration test aims at characterizing the functional relationship between the data value driving a channel and the corresponding signal output, for each of the channels of the module.
      <br/>
      In either case, the calibration fuinction may be summarized by a set of parameters and stored in the MIS.
      <br/>
      Later, when the I/O module 210 is installed in a module bank, the I/O module 210 may read the calibration parameters for a given channel and use these parameters to correct measured data values in the case of an input channel, and to adjust data values before driving an output in the case of an output channel.
    </p>
    <p num="229">
      For efficiency of storage and computational speed in field data correction, the calibration function may be linearized, and the corresponding gain and offset parameters stored as two-point correction information for the corresponding channel.
      <br/>
      For more accuracy in field correction, the calibration may be approximated as an No order polynomial, and the (N+1) coefficients of the polynomial stored as an (N+1) point correction information for the corresponding channel.
    </p>
    <p num="230">
      It is also noted that the network module 200 may used the calibration information in the MIS to perform data correction instead of the I/O module 210.
      <br/>
      As mentioned above, the network module 200 read the MIS of the I/O module 210 when the I/O module in inserted into an active terminal base.
      <br/>
      Thus, the network module 210 may apply any necessary corrections to input and output data values based on the calibration parameters read from the I/O module 210 on a per channel basis.
    </p>
    <p num="231">Reading the Module Information Structure</p>
    <p num="232">
      The Module Information Structure of an I/O module 210 is accessed by selecting the I/O module 210 with the MS�3:0� lines and reading the MIS from the serial bus.
      <br/>
      In the preferred embodiment of the invention, the serial bus comprises an SPI serial interface face.
      <br/>
      The SPI serial interface comprises the lines SPI_CS*, MISO, MOSI, and SPI_CLK lines.
      <br/>
      It is noted that the SPI serial interface of the present invention differs from standard SPI interfaces in that data is sent out LSB first on the SPI serial interface, while standard SPI sends data MSB first.
      <br/>
      This deviation simplifies interfacing to UARTS and serial ports in the network module 200 which accept data LSB first.
      <br/>
      It should also be pointed out that for multiple byte entries, data comes out the serial port least significant byte first.
    </p>
    <p num="233">
      The SPI serial interface on the local bus can be set to "point" to one of the 16 possible I/O modules 210 by performing a read on the I/O module 210 while the SPI_CS* line is held low.
      <br/>
      The SPI interface will continue to point to this module until a read on another module is performed with the SPI_CS* line low.
      <br/>
      Thus the network module 200 may read the MIS of one module while it services other resources (i.e., data I/O and configuration table writes) on either the same or different I/O modules 210 over the local bus.
      <br/>
      However, it is also important to note that the SPI interface may only point to one I/O module 210 at a time, and that it must always point to some address.
      <br/>
      In general, it would be good to have the SPI interface point to either an unused address or to the address of the network module, if possible, during idle times.
    </p>
    <p num="234">
      After pointing the SPI interface to an I/O module 210, the network module 200 initiates an MIS read by writing a predefined bit pattern over the MOSI Line.
      <br/>
      During this write operation, the data coming in from the MISO Line will be all ones.
      <br/>
      After writing the initiation pattern, the I/O module 210 will clock out the MIS values on the MISO Line.
      <br/>
      The MOSI Line from the network module 200 will be a "don't care" after the previous pattern.
      <br/>
      This will allow using open collector buffers to send both the local bus data in and data out lines to a single serial data line on the network module microcontroller.
    </p>
    <p num="235">Watch Dog</p>
    <p num="236">
      The Watch Dog feature allows a network module 200 to detect a communication failure condition and to respond in a user-defined way.
      <br/>
      If the Watch Dog feature is enabled for a given network module 200, the network module 200 monitors activity on network bus 120.
      <br/>
      In other words, the network module 200 detects any signal activity on network bus 120, not merely messages targeted to the network module 200 itself.
      <br/>
      If inactivity persists for longer than a preprogrammed amount of time given by the Watch Dog Timeout value, the network module 200 assumes that the communication link with computer 100 has failed.
      <br/>
      In response to the detected communication failure, the network module 100 writes a series of user-defined values to selected channels/modules of the module bank as specified by a Watch Dog Database stored in non-volatile memory.
      <br/>
      Software running on computer 100 provides the user with commands for:
      <br/>
      (1) Setting a data value in the Watch Dog Database for a selected I/O module and selected channel, where the data value is applied to the selected channel/module in case of communication failure;
    </p>
    <p num="237">
      (2) Setting (or Clearing) a Channel Enable Flag in the Watch Dog Database, associated with a selected channel of an I/O module 210, where the Channel Enable Flag controls whether or not the data value of (1) above is applied to the selected channel in case of communication failure;
      <br/>
      (3) Setting (or Clearing) a Module Enable Flag in the Watch Dog Database, associated with a selected I/O module 210;
      <br/>
      (4) Writing a selected network module 200 to set the Watch Dog Timeout value for the corresponding module bank, and
      <br/>
      (5) Enable the Watch Dog Monitor for a user-specified network module 200.
    </p>
    <p num="238">
      A Module Enable Flag, when set, implies that the Channel Enable Flag will determine whether or not the corresponding data value will be applied in case of communication failure.
      <br/>
      A Module Enable Flag, when cleared, implies that none of the data values will be applied to their respective channels in case of communication failure.
    </p>
    <p num="239">
      When the user issues a command to enable the Watch Dog feature for a network module 200, the network module 200 does not immediately enable the Watch Dog Monitor.
      <br/>
      Instead, according to the present invention, the network module 200 waits for a first message from computer 100, subsequent to the enable command, and targeted for the network module 200.
      <br/>
      The network module 200 enables the Watch Dog Monitor when this first subsequent message is received.
      <br/>
      Once the Watch Dog Monitor has started, computer 100 is responsible to maintain activity on network bus 120 to prevent the Watch Dog Monitor from timing out, and the Watch Dog Database values being assumed.
    </p>
    <p num="240">
      This delayed enabling of the Watch Dog Monitor allows the user to assert a Watch Dog Enable command before invoking an application which is to communicate with the network modules 200.
      <br/>
      A large software application may take as long as necessary to load and execute since a network module 200 will not enable the Watch Dog Monitor until a first message targeted to the network module 200 is received.
      <br/>
      However, once the application starts writing to the network module, the application is responsible to write to the network module repeatedly to prevent the Watch Dog Monitor from timing out.
      <br/>
      Thus, the delayed enabling feature of the present invention allows computer 100 to take as much time as necessary to transition from configuration mode to operational mode.
    </p>
    <p num="241">
      In the preceding discussion, the network module 200 has been described as detecting activity on network bus 120.
      <br/>
      In one embodiment of the invention, this function is performed by dedicated hardware within the network module 200 referred to as a signal activity detector.
      <br/>
      In another embodiment of the invention, the signal activity detector is implemented by the CPU of the network module 200 under software control.
    </p>
    <p num="242">
      Refer now to FIG. 17 which presents a flowchart of the Watch Dog Feature according to the present invention.
      <br/>
      In step 1710, the host computer 100 sends a command to a network module 200 setting a Watch Dog Database value for a selected channel of a selected I/O module 210.
      <br/>
      In case of a communication failure, the Watch Dog Database value will be written to the selected channel of the selected I/O module 210 subject to the value of the corresponding Channel Enable Flag and Module Enable Flag.
      <br/>
      In step 1720, the host computer 100 sends a command to the network module 200 setting the Channel Enable Flag for the channel selected in step 10.
      <br/>
      In step 1725, the host computer 100 sends command to the network module 200 setting the Module Enable Flag for the I/O module 210 selected in step 1710.
      <br/>
      In step 1730, the host computer 100 sends a command to the network module 200 setting the Watch Dog Timeout value.
      <br/>
      In step 1740, the host computer 100 sends a command to the network module 200 to enable the Watch Dog Monitor for the network module 200.
      <br/>
      In response to receiving the enable command, the network module 200 waits for subsequent network bus activity (i.e. any subsequent activity on the network bus 120) before starting the Watch Dog Monitor as shown in step 1750.
      <br/>
      In step 1760, the network module 200 monitors the activity on network bus 120.
      <br/>
      If the network bus 120 is inactive for a period of time exceeding the Watch Dog Timeout value, then as shown in step 1770 the network module downloads the values from the Watch Dog Database subject to the values of the respective Module Enable Flags and the Channel Enable Flags.
    </p>
    <p num="243">Snap Shot and Snap Shot Restoration Features</p>
    <p num="244">
      The Snap Shot feature of the present invention allows the user to capture the state of a module bank for later use as a power up configuration upon the next power-up event.
      <br/>
      When computer 100 sends a Snap Shot command to a network module 200, the network module 200 captures the state of the whole module bank into a data structure called the Snap Shot Image which is stored in non-volatile memory (preferably FLASH memory) resident within the network module 200.
      <br/>
      The Snap Shot Image stores (a) the state of the network module 200 itself, and (b) the address, identity, and state of the all the I/O modules 210 connected to the network module 200 via the local bus 240.
      <br/>
      The identity of an I/O module 210 comprises its Module ID and its Hot Swap ID.
      <br/>
      The state of an I/O module 210 is represented by the contents of its register spaces.
    </p>
    <p num="245">
      The Snap Shot Restoration feature of the present invention operates as follows.
      <br/>
      If the network module 200 should loose power, upon regaining power, the network module 200 will automatically attempt to configure the module bank with the states stored in the Snap Shot Image.
      <br/>
      Upon the power-up event, the network module scans the addresses of the module bank to detect and locate I/O modules 210.
      <br/>
      Recall that a status read (Function Code 1) with respect to a given address reports the existence and status of the corresponding terminal base and I/O module 210.
      <br/>
      Suppose that an I/O module 210 is detected at address X. The network module 200 first reads the Hot Swap ID from the I/O module 210. �As discussed above, the Hot Swap ID is one of the fields of the Module Information Structure (MIS) which is stored in non-volatile memory in the I/O module 210.� The network module 200 then determines if the Snap Shot Image contains the image of a module associated with address X. If such an image module exists for address X, the network module 200 compares the Hot Swap ID of the image module with the Hot Swap ID of the current physical module to determine if the current module is compatible for receiving the state information of the image module.
      <br/>
      If the Hot Swap IDs indicate compatibility, the network module 200 downloads the image module state information to the current physical module.
      <br/>
      The download involves writing to the current physical module the register space contents of the image module.
      <br/>
      After performing this download, the network module 200 searches for any remaining I/O modules 210 of the module bank which have not yet been located.
    </p>
    <p num="246">
      If the Hot Swap IDs of the image module and the corresponding current physical module are equal, the network module 200 downloads to the current physical module the factory default configuration settings and data values recorded in the MIS of the current physical module.
      <br/>
      It is noted that if the Hot Swap IDs are equal, the MIS read may be aborted after reading the Hot Swap ID.
      <br/>
      If the Hot Swap IDs are not equal, the remainder of the MIS must be read to determine the factory default settings for the physical module.
      <br/>
      Recall that the Hot Swap IDs of I/O modules 210 are defined such that I/O modules 210 with identical Hot Swap IDs have the same register space architecture, and therefore are compatible with one another.
    </p>
    <p num="247">
      The network module 200 must be enabled by computer 100 to perform Snap Shot Restoration.
      <br/>
      Software running on computer 100 allows the user to enable or disable the Snap Shot Restoration feature for individual module banks.
      <br/>
      If Snap Shot Restoration has not been enabled for a given module bank, the I/O modules 210 of the module bank are restored with their respective factory default settings upon the next power-up event.
    </p>
    <p num="248">
      In addition to the Snap Shot command, the network module 200 provides a Piecewise Snapshot Updating feature.
      <br/>
      Namely, the individual components of information stored in the Snap Shot Image (described below) may be updated by commands sent from computer 100.
    </p>
    <p num="249">
      In combination, the Snap Shot command, Piecewise Snapshot Updating, and the Snap Shot Restoration features allow the user to protect the time and effort invested in achieving an optimal system configuration.
      <br/>
      These features allow the MDIO system to maintain performance in spite glitches in power or user-intended power cycling.
    </p>
    <p num="250">
      Prior to issuing a Snap Shot command, the user configures the state of the module bank.
      <br/>
      Software running on computer 100 allows the user to write command, configuration, and/or data values to any of the modules/channels of the MDIO system.
      <br/>
      The Snap Shot command causes a selected network module to capture the following information into the Snap Shot Image which is stored in non-volatile memory within the network module 200.
      <br/>
      (1) The attribute and range settings for each channel of each I/O module of the module bank.
      <br/>
      (2) The output values of each output channel of the module bank; the output values are given by the data register values which correspond to the output channel.
      <br/>
      (3) The Watch Dog Storage, i.e. all the Watch Dog data values, Module Enable Flags, and Channel Enable Flags for each channel/module of the module bank.
    </p>
    <p num="251">As mentioned above, computer 100 and network module 200 support a Piecewise Snapshot Updating feature whereby computer 100 may send commands to update individual components of information in the Snap Shot Image.</p>
    <p num="252">
      As an example, suppose that the user applies power to a single network module 200.
      <br/>
      Then, if the Snap Shot Restoration feature has been enabled for this network module 200, the network module 200 will restore the whole module bank to an operational state as defined by the Snap Shot Image in non-volatile memory.
      <br/>
      Thus, the module bank will assume a desirable functional state even though computer 100 and the remaining module banks of the MDIO system are powered down.
    </p>
    <p num="253">
      FIG. 18A illustrates the typical flow of events in connection with the Snap Shot Feature.
      <br/>
      As shown in step 1802, the user initially configures a module bank as desired.
      <br/>
      Software running on computer 100 allows the user to execute commands which control the configuration, data, and command registers of any channel/module of the MDIO system.
      <br/>
      In step 1804, computer 100 sends a Snap Shot command to the network module 200.
      <br/>
      In response to receiving the Snap Shot command, as shown in step 1806 the network module 200 captures an image of the entire module bank into non-volatile memory resident in the network module 200.
      <br/>
      The contents of the Snap Shot Image is enumerated above.
      <br/>
      In step 1807, computer 100 optionally sends one or more snapshot update commands to modify pieces of information in the Snap Shot Image.
      <br/>
      In one embodiment, the user initiates these snapshot update commands through inputs provides to a software user interface running on computer 100.
      <br/>
      It is noted that step 1807 may be performed before or after step 1808.
    </p>
    <p num="254">
      In step 1808, computer 100 sends a command to the network module 200 to enable the Snap Shot Restoration Feature.
      <br/>
      In response to the enable command, as shown in step 1810, the network module 200 configured itself to restore the states capture in the Snap Shot Image upon the next power-up event.
      <br/>
      It is noted that computer 100 may also issue a command to disable (not shown in the Figure) the Snap Shot Restoration Feature.
    </p>
    <p num="255">
      Refer to FIG. 18B for a flowchart illustrating the method of Snap Shot Restoration according to the present invention.
      <br/>
      The method is initiated upon a power up event as shown in step 1820.
      <br/>
      A power-up event is said to occur when power is applied to a network module 200.
      <br/>
      After the power-up event, the network module 200 determines if the Snap Shot Restoration feature has been enabled for the network module 200 as shown in step 1822.
      <br/>
      If the Snap Shot Restoration feature has not been enabled for the network module 200, Snap Shot Restoration is not performed, and I/O modules are configured according their default settings stored in their respective Module Information Structures.
      <br/>
      Flow Connector A is a placeholder for the remainder of the flowchart which is given FIG. 18C.
    </p>
    <p num="256">
      If Snap Shot Restoration has been enabled, the network module 200 successively interrogates the addresses of the module bank to locate I/O modules 210.
      <br/>
      In step 1824, the network module 200 accesses an I/O module 200.
      <br/>
      Recall that by performing a read with Function Code set to 1, the network module 200 may determine the existence and status of an I/O module at any given module bank address.
      <br/>
      In step 1826, the network module 200 consults the Snap Shot Image in non-volatile memory to determine if the Snap Shot Image contains an Image Module for the Current Address.
      <br/>
      In other words, if, at the time the Snap Shot Image was captured, an I/O module existed in the current module position, an image module will have been created for it.
      <br/>
      If no image module exists for the current address, the method continues with step 1832.
      <br/>
      If however, there does exists an image module for the current address, method proceeds with step 1828.
      <br/>
      In step 1828, the network module 200 determines if the accessed I/O module 210 is compatible with the image module.
      <br/>
      This involves accessing the Hot Swap ID of the accessed I/O emodule 210 by reading the first few words of its MIS, and comparing the Hot Swap ID of the accessed I/O module 210 with the Hot Swap ID of the image module.
      <br/>
      If the Hot Swap IDs indicate that the accessed module is compatible for receiving the image module, the network module 200 downloads the image module state to the accessed I/O module 210 as shown in step 1830.
      <br/>
      After downloading the image module information to the I/O module 210, the method continues with step 1836.
    </p>
    <p num="257">If, in step 1828, the Hot Swap IDs indicate that that accessed I/O module 210 is not compatible to receive the image module information, the method proceeds with step 1832.</p>
    <p num="258">
      In step 1832, the network module 200 uploads the MIS from the accessed I/O module 200.
      <br/>
      It is noted that if step 1832 has been arrived at by way of step 1828, the MIS read operation of step 1832 is a continuation of the MIS read initiated in step 1828.
      <br/>
      In step 1834, the network module 200 downloads the factory default settings for the accessed I/O module 210 as obtained from the MIS.
      <br/>
      Step 1836 follows after step 1834.
    </p>
    <p num="259">
      In step 1836, the network module 200 continues the interrogation of the module bank addresses.
      <br/>
      If other I/O modules 210 are located, the method proceeds with step 1824; otherwise the method terminates.
    </p>
    <p num="260">
      Refer to FIG. 18C for a flowchart of the default Power-Up Configuration Sequence in the case the Snap Shot Feature is not enabled.
      <br/>
      Steps 1820 and 1822 are identical to the commonly numbered steps described in connection with FIG. 18B. Flow Connector B represents the flowchart steps of FIG. 18B discussed above.
      <br/>
      If the Snap Shot Restoration feature is not enabled, the network module 200 successively interrogates addresses of the module bank to locate I/O modules 210.
      <br/>
      In step 1840, the network module accesses an I/O module 210.
      <br/>
      In step 1842, the network module 200 uploads the MIS from the accesses I/O module 210.
      <br/>
      In step 1844, the network module 110 parse the MIS to identify the factory default settings for the accessed I/O module 210, and downloads these defaults settings to the accessed I/O module 210.
      <br/>
      After downloading the default settings, the network module 200 continues to interrogate the remaining module bank addresses.
      <br/>
      If another I/O module 210 is located, the method proceeds with step 1840; otherwise the method terminates.
    </p>
    <p num="261">Hot Insertion and Auto-Configuration</p>
    <p num="262">
      The MDIO system of the present invention includes a Hot Insertion and Auto-Configuration feature whereby an I/O module 210 is automatically configured upon being inserted in an active terminal base 220.
      <br/>
      An active terminal base is one which is electrical contact with a powered network module 200 through the local bus.
      <br/>
      Thus, in FIG. 5, terminal bases 220A and 220B are active and terminal base 220C is inactive, if the network module 200 is receiving power; whereas all the terminal bases 220A-C are inactive if the network module 200 is not receiving power.
      <br/>
      In view of the Hot Insertion and Auto-configuration feature of the present invention, I/O modules 210 need not include the software to provide for their own configuration.
      <br/>
      This allows the I/O modules 210 to be less expensive than in conventional MDIO systems.
    </p>
    <p num="263">
      When an new I/O module 210 is inserted into an active terminal base 220, the I/O module 210 asserts a signal on the New Module Interrupt Line New_Md*. The network module 200 monitors the New_Md* Line.
      <br/>
      From the point of view of the network module 200, the active low assertion of the New_Md* Line indicates that one or more I/O modules 210 have been inserted into terminal bases 220.
      <br/>
      The network module 200 polls each address of the module bank 110 to determine which I/O module(s) 210 are asserting New_Md*. An I/O module 210 is recognized as newly inserted when the MST bits returned in a status read indicate the Unconfigured status.
      <br/>
      When the network module 200 detects a I/O module 210 which is newly inserted, it consults a Virtual Module Database to discern whether or not the I/O module 210 had a predecessor, i.e. whether another module previously occupied the same terminal base position.
      <br/>
      Suppose that the current I/O module 210 is the first occupant of its terminal base, i.e. had no predecessor.
      <br/>
      In this case, the network module 200 reads the MIS of the I/O module 210.
      <br/>
      From the MIS, the network module 210 extracts the factory default settings stored in the MIS, and downloads these default settings to the I/O module 210.
      <br/>
      In addition, the network module 210 creates a Virtual Module structure for the I/O module 210 from the information in the MIS.
      <br/>
      The Virtual Module structure is added to the Virtual Module Database.
    </p>
    <p num="264">The network module 200 continues polling the module bank addresses until the New_Md* Line is observed to be in the de-asserted state indicating that all new I/O modules 210 have been detected and configured.</p>
    <p num="265">
      The Virtual Module Database mentioned above is stored in non-volatile memory within the network module 200.
      <br/>
      The Virtual Module Database contains Virtual Module Structures.
      <br/>
      A Virtual Module structure is created when an I/O module is inserted into a terminal base 220 for the first time.
      <br/>
      The Virtual Module, as originally created, contains an image of the contents of the data register, configuration register, and command register of the corresponding physical I/O module.
      <br/>
      Furthermore, as computer 100 sends messages to the physical I/O module 210, the network module 200 updates the corresponding virtual module so that the virtual module is a continuous image of the state of the physical I/O module 210.
      <br/>
      In other words, the virtual module maintains an exact replica of the register spaces of the corresponding I/O module 210.
      <br/>
      In addition, when the I/O module 210 is removed from its terminal base 220, the virtual module persists.
      <br/>
      Thus, if computer 100 sends a message to a "missing" I/O module 210, the register space(s) of the virtual module is updated in the same way the "missing" I/O module would have updated its register space(s).
      <br/>
      In this case, the network module 200 also sends an error message to computer 100 reporting the targeted I/O module as missing.
      <br/>
      The utility of the Virtual Module structure is realized when the first I/O module is replaced with a second I/O module as described below.
    </p>
    <p num="266">Hot Swap and Configuration Inheritance</p>
    <p num="267">
      In addition to the Hot Insertion and Auto-Configuration feature, the MDIO system of the present invention includes a Hot Swap feature whereby an I/O module 210 may be removed and replaced with another I/O module 210 without powering down the module bank 110.
      <br/>
      Suppose that a configured I/O module 210 is removed from an active terminal base 220 and another I/O module 210 is inserted into this same terminal base 220.
      <br/>
      Since the power and ground pins of the I/O module 210 are longer than the reset pin of the I/O module 210, the I/O module 210 receives power first and then is reset as it is inserted into the active terminal base 220.
      <br/>
      After being reset, the I/O module 210 asserts a New Module Interrupt on the New_Md* Line.
      <br/>
      The network module 200 detects the new I/O module 210 as above.
      <br/>
      Once, the new I/O module 210 is located, the network module determines whether or not a Virtual Module structure already exists for the terminal base 220 occupied by the new I/O module 210.
      <br/>
      In the case under consideration, the Virtual Module structure corresponding to the predecessor I/O module 210 is resident in the Virtual Module Database.
      <br/>
      Thus, the network module 200 initiates an MIS read of the new I/O module 210 via the SPI serial interface.
      <br/>
      The network module 200 compares the Hot Swap ID of the new I/O module 210 (obtained from the MIS) with the Hot Swap ID of the virtual module.
      <br/>
      If the Module IDs indicate that the new I/O module 210 is compatible with the Virtual Module, the network module abandons reading the MIS, and downloads to the new I/O module 210 the current state of the Virtual Module, i.e. the contents of the registers spaces of the virtual module.
      <br/>
      Recall that the network module 200 updates the virtual module even in the absence of a corresponding physical module.
      <br/>
      Thus, the new I/O module 210 automatically assumes the state that the predecessor I/O module would have occupied had it not been removed.
      <br/>
      This configuration inheritance feature implemented by the network module 200 according to the present invention allows an I/O module to be replaced with a I/O module of compatible type while the MDIO system is running.
      <br/>
      Functionality is restored without the intervention of computer 100.
      <br/>
      Any configuration that was programmed into the old I/O module, and configuration that was programmed into the virtual module during the time the old module was missing is reprogrammed into the new module.
    </p>
    <p num="268">
      As an example of modular compatibility, consider two discrete output modules with 8 physical channels which source 24 volts and 48 volts respectively.
      <br/>
      Since, the 24 volt module is a subset of the 48 volt module, the 24 volt module admits configuration inheritance from the 48 volt module.
    </p>
    <p num="269">
      If the Hot Swap ID comparison indicates that the new I/O module 210 is not compatible to receive the virtual module information, the network module 200 determines if the Snap Shot Restoration has been enabled for the module bank.
      <br/>
      If Snap Shot Restoration has been enabled, the network module 200 consults the Snap Shot Image in non-volatile memory to determine if an image module exists for the currently module address.
      <br/>
      If an image module exists, the network module 200 compares the Hot Swap ID of the new I/O module 210 with the Hot Swap ID of the image module.
      <br/>
      If the Hot Swap ID comparison indicates that the new I/O module is compatible with the image module, the image module state information is downloaded to the new I/O module 210.
      <br/>
      Furthermore, the Virtual Module structure is updated to replicate the current state of the new I/O module 210, i.e. the image module information is copied to the Virtual Module structure.
    </p>
    <p num="270">
      If the Hot Swap ID comparison indicates that the new I/O module 210 is not suitable to receive the image module information, the network module 210 continues reading the MIS of the new I/O module 210, and downloads to the I/O module the factory default settings extracted from the MIS.
      <br/>
      Also the network module 200 updates the Virtual Module structure to replicate the state (i.e. the default settings) of the new I/O module 210.
    </p>
    <p num="271">
      Refer now to FIG. 19A which illustrates the method connected with the Hot Insertion, Auto-Configuration, and Hot-Swap Features of the present invention.
      <br/>
      In step 1910, the user inserts an I/O module 210 into an active terminal base 220.
      <br/>
      In step 1915, the new I/O module 210 asserts a signal indicating its status as a newly inserted I/O module.
      <br/>
      In the preferred embodiment this involves driving low the New_MD* Line of the local bus.
      <br/>
      In step 1920, the network module 200 interrogates the module bank addresses until the new module is located.
      <br/>
      In step 1925, the network module consults the Virtual Module Database to determine if a Virtual Module structure exists for the address of the new I/O module.
      <br/>
      If a Virtual Module structure does not exist for the current address, the method continues with step 1940.
      <br/>
      However, if a Virtual Module exists for the current address, the network module determines if the new I/O module 210 is compatible to receive the state information stored in the Virtual Module as shown in step 1930.
      <br/>
      As described above, this involves comparing the Hot Swap ID of the Virtual Module with the Hot Swap ID of the new I/O module.
      <br/>
      The later is read from the MIS of the new I/O module.
      <br/>
      If the new I/O module is determined to be incompatible with the Virtual Module structure, the method proceeds to step 1940.
      <br/>
      However, if the new I/O module is compatible with the Virtual Module structure, the network module 200 downloads the state information in the Virtual Module to the new I/O module as shown in step 1935.
      <br/>
      After step 1935, the method terminates.
    </p>
    <p num="272">
      In step 1940, the network module 200 determines if Snap Shot Restoration has been enabled.
      <br/>
      If Snap Shot Restoration has not been enabled, the method proceeds with step 1960.
      <br/>
      However, if Snap Shot Restoration has been enabled, the network module 200 determines if there exists an image module in the Snap Shot Image for the current address as shown in step 1945.
      <br/>
      If an image module does not exist for the current address, the method proceeds with step 1960.
      <br/>
      However, if an image module does exist for the current address, the network module 200 determines if the new I/O module is suitable for receiving the state information in the image module as shown in step 1950.
      <br/>
      Again, this involves comparing the Hot Swap ID of the image module and the Hot Swap ID of the new I/O module.
      <br/>
      If the new I/O module is determined to be incompatible with the image module, the method proceeds with step 1960.
      <br/>
      However, if the new I/O module 210 is compatible with the image module, the state information in the image module is downloaded to the new I/O module as shown in step 1955.
      <br/>
      After step 1955, the method terminates.
    </p>
    <p num="273">
      In step 1960, the network module 200 finishes reading the MIS from the new I/O module 210.
      <br/>
      It is noted that an MIS read is initiated in step 1930 in order to determine the Hot Swap ID of the new I/O module.
      <br/>
      Similarly, an MIS read may be initiated in step 1940 to determine the Hot Swap ID of the new I/O module.
      <br/>
      Thus, if step 1960 is arrived at by way of step 1930 or step 1940 then the MIS read of step 1960 is may be a continuation of the MIS read initiated in step 1930 or 1940 respectively.
      <br/>
      In step 1965, the network module 200 extracts the factory default settings of the new I/O module 210 from the MIS, and downloads the default settings to the new I/O module 210.
      <br/>
      After step 1965, the network module 200 creates a virtual module structure for the new I/O module based on the MIS information.
    </p>
    <p num="274">
      Refer now to FIG. 19B which illustrates the method by which the network module 200 maintains the virtual module structure even in the absence of the corresponding physical I/O module 210.
      <br/>
      FIG. 19B assumes that a virtual module structure has been created for an I/O module 210 corresponding to a particular terminal base address.
      <br/>
      In step 1980, the computer sends a configuration update command destined for an I/O module to the network module 200.
      <br/>
      In step 1982, the network module 200 receives the configuration update command and updates the state of the virtual module structure in non-volatile memory.
      <br/>
      The virtual module structure maintains an image of the register spaces of the I/O module 210 whether or not the I/O module 210 is physically present.
      <br/>
      Thus, in step 1984, the network module 200 determines whether the addressed I/O module is physically present.
      <br/>
      If the addressed I/O module is physically present, the network module 200 passes the configuration update command to the I/O module 210 as shown in step 1986.
      <br/>
      If the addressed I/O module is not physically present at the addressed terminal base location, the network module 200 sends a missing module error message to the computer 100.
    </p>
    <p num="275">Conclusion</p>
    <p num="276">Although the system and method of the present invention has been described in connection with several representative embodiments, it is not intended to be limited to the specific forms set forth herein, but on the contrary, it is intended to cover such alternatives, modifications, and equivalents, as can be reasonably included within the spirit and scope of the invention as defined by the appended claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>An I/O system with improved communication capabilities, the system comprising:</claim-text>
      <claim-text>at least one communication module; one or more I/O modules; a physical bus coupled between the communication module and each of said one or more I/O modules, wherein said physical bus comprises a parallel bus and a serial bus; wherein said communication module is a master of the physical bus; wherein each of said one or more I/O modules includes a memory, wherein said communication module is configured to read and write said memory of each of said one or more I/O modules via said parallel bus; wherein each of said one or more I/O modules includes non-volatile memory, wherein said non-volatile memory stores a module information structure (MIS) corresponding to said I/O module, wherein said MIS comprises one or more attributes and one or more programmable states of said I/O module; wherein said communication module is operable to read the MIS of each of said one or more I/O modules when said I/O module is coupled to said physical bus, wherein said reading the MIS is performed through said serial bus.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The system of claim 1, wherein said physical bus includes a power line, wherein the communication module provides power to said one or more I/O module through said power line.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The system of claim 1, further comprising one or more terminal bases, wherein said one or more terminal bases couple together to form said physical bus; wherein said one or more I/O modules are coupled to respective ones of said one or more terminal bases; wherein each of said one or more terminal bases includes a predecessor connector and a successor connector, wherein said predecessor connector is adapted for coupling to a preceding terminal base or to said communication module, wherein said successor connector is adapted for coupling to a succeeding terminal base, wherein said one or more terminal bases are coupled in a linear succession, wherein said communication module couples to the predecessor connector of a first terminal base of said linear succession; wherein said predecessor connector provides physical bus connectivity to said preceding terminal base or to said communication module, wherein said successor connector provides physical bus connectivity to said succeeding terminal base.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The system of claim 3, wherein each of said one or more terminal bases allow connectivity to any of said one or more I/O modules.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The system of claim 4, wherein each of said terminal bases in said linear succession is assigned an address depending on the position of said terminal base in said linear succession, wherein each of said I/O modules inherits the assigned address of said respective terminal base to which said I/O module is coupled.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The system of claim 5, wherein said physical bus includes an address assignment bus, wherein said address assignment bus comprises a plurality of address assignment lines; wherein each terminal base of said linear succession is operable to receive an integer value asserted on the address assignment lines of its predecessor connector, increment said integer value, and assert said incremented integer value on the address assignment lines of its successor connector.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The system of claim 6, wherein said communication module asserts a fixed constant value on the address assignment lines coupling between said communication module and said first terminal base.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The system of claim 5, wherein said parallel bus includes address lines, wherein said communication module asserts an address value on said address lines in order to select a particular I/O module for data communication, wherein each of said I/O modules is operable to compare the address value asserted on said address lines with said assigned address value inherited from said respective terminal base, wherein said communication module is allowed access to at least a portion of the memory in a respective I/O module when said address value agrees with said assigned address value of said respective I/O module.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The system of claim 1, wherein said communication module is operable to read the MIS of each of said one or more I/O modules when said I/O module is electrically uncoupled from said physical bus, wherein said reading the MIS is performed through said serial bus.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The system of claim 1, wherein said one or more attributes comprise information on one or more channels, calibration information, module description information and semaphore request time related to said I/O module.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The system of claim 1, wherein said communication module comprises an activity monitor for sensing a communication failure condition.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The system of claim 1, wherein said non-volatile memory is operable to read and write data.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A method for assigning addresses to one or more I/O modules in a module bank, the module bank comprising a communication module, a plurality of terminal bases, and said one or more I/O modules, wherein each of said terminal bases includes a predecessor connector and a successor connector, wherein said terminal bases are coupled in a linear succession through their predecessor and successor connectors, wherein the predecessor connector of a first terminal base of said linear succession couples to said communication module, said method comprising: said communication module providing a fixed integer value to the predecessor connector of said first I/O module; each of said terminal bases in said linear succession performing the following steps:</claim-text>
      <claim-text>- reading a first integer value prevailing at its predecessor connector; - adding one to said first integer value to generate an incremented integer value, wherein said incremented integer value is useable as an address for said terminal base; - providing said incremented integer value to its successor connector; inserting each of said one or more I/O modules into one of said terminal bases; assigning each of said one or more I/O modules an address value based on the terminal base in which it is inserted.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 13, wherein said assigning each of said one or more I/O modules an address value comprises using the incremented integer value of the terminal base in which it is inserted as said address value.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 13, wherein said assigning each of said one or more I/O modules an address value comprises using said first integer value read from said precessor connector of the terminal base in which said I/O module is inserted.</claim-text>
    </claim>
  </claims>
</questel-patent-document>