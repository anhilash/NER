<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182160B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182160</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182160</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="22546892" extended-family-id="41965871">
      <document-id>
        <country>US</country>
        <doc-number>09148397</doc-number>
        <kind>A</kind>
        <date>19980904</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09148397</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43024038</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>14839798</doc-number>
        <kind>A</kind>
        <date>19980904</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09148397</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>75654096</doc-number>
        <kind>A</kind>
        <date>19961125</date>
        <priority-linkage-type>1</priority-linkage-type>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1996US-08756540</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="3">
        <country>US</country>
        <doc-number>47850095</doc-number>
        <kind>A</kind>
        <date>19950607</date>
        <priority-linkage-type>B</priority-linkage-type>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="3">
        <doc-number>1995US-08478500</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="4">
        <country>US</country>
        <doc-number>15336293</doc-number>
        <kind>A</kind>
        <date>19931116</date>
        <priority-linkage-type>3</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="4">
        <doc-number>1993US-08153362</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   9/42        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>42</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   9/44        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>44</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F   9/46        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>46</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>710003000</text>
        <class>710</class>
        <subclass>003000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>712E09084</text>
        <class>712</class>
        <subclass>E09084</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>717107000</text>
        <class>717</class>
        <subclass>107000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>717108000</text>
        <class>717</class>
        <subclass>108000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>717110000</text>
        <class>717</class>
        <subclass>110000</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>719315000</text>
        <class>719</class>
        <subclass>315000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-009/54B</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>54B</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-008/24</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>24</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G06F-008/34</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>34</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>G06F-009/44F2A</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>009</main-group>
        <subgroup>44F2A</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/542</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>542</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20180216</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-008/24</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>24</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20180216</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-008/34</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>34</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20180216</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20180201</date>
        </classification-scheme>
        <classification-symbol>G06F-009/449</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>449</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20180203</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>18</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>9</number-of-drawing-sheets>
      <number-of-figures>9</number-of-figures>
      <image-key data-format="questel">US6182160</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and system for using editor objects to connect components</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>GENDRON ROBERT F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4860204</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4860204</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>MATHENY JOHN R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5315703</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5315703</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>STUTZ DAVID S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5517645</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5517645</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>ALLRED SCOTT K, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5765142</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5765142</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>TONELLI DANIEL L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5831610</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5831610</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>WILLIAMS DAVID MARK</text>
          <document-id>
            <country>US</country>
            <doc-number>5850548</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5850548</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>AIMTECH CORP</text>
          <document-id>
            <country>WO</country>
            <doc-number>8807719</doc-number>
            <kind>A2</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>WO8807719</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>SUPERCOMPUTER SYSTEMS LTD</text>
          <document-id>
            <country>WO</country>
            <doc-number>9120033</doc-number>
            <kind>A1</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>WO9120033</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>WEISSHAAR BERNHARD P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4754395</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4754395</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>MAEZAWA HIROYUKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4872167</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4872167</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>BECK KENT L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4885717</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4885717</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>RUMBAUGH JAMES E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5005119</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5005119</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>WEXELBLAT ALAN D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5021976</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5021976</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>WRIGHT JOHN H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5051898</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5051898</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>FUJITA SUMIKAZU, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5095522</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5095522</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>HARVEY GEORGE A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5136716</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5136716</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="17">
          <text>HULLOT JEAN-MARIE</text>
          <document-id>
            <country>US</country>
            <doc-number>5163130</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5163130</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="18">
          <text>SIMPSON WILLIAM B</text>
          <document-id>
            <country>US</country>
            <doc-number>5179550</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5179550</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="19">
          <text>KUSUMOTO KOJI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5283898</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5283898</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="20">
          <text>NEWMARK RONA J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5287537</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5287537</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="21">
          <text>KHOYI DANA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5303379</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5303379</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="22">
          <text>FEIGENBAUM BARRY A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5305461</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5305461</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="23">
          <text>LUNDIN KENNETH, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5339430</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5339430</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="24">
          <text>TRAVIS JR ROBERT L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5341478</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5341478</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="25">
          <text>CONNER MICHAEL H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5421016</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5421016</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="26">
          <text>YUASA HIROKO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5448736</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5448736</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="27">
          <text>GJOVAAG INGHARD J</text>
          <document-id>
            <country>US</country>
            <doc-number>5455952</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5455952</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="28">
          <text>ARNOLD ERICH C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5551035</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5551035</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>"Drag-Drop Technique for Connecting Source and Target Objects in an Application Builder Environment", IBM Technical Disclosure Bulletin, 1-2, (Aug. 1993).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Berre, A.J., "COOP-An Object Oriented Framework for Systems Integration", Proceedings of the Second International Conference on Systems Integration, 104-113 (Jun. 15-18, 1992).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Hirakawa, H., et al., "Advances in Visual Programming", IEEE (1992), 538-543.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Hirakawa, M., et al., "A Generic Model for Constructing Visual Programming Systems", IEEE (1989), 124-129.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>Hirakawa, M., et al., "An Iconic Programming System, HI-Visual", IEEE Transactions on Software Engineering, 16, 1178-1184, (Oct. 1990).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>Ingalls, D., et al., "Fabrik: A Visual Programming Environment", OOPSLA Proceedings, 176-190, (Sep. 25-30, 198).</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>75654096</doc-number>
              <kind>A</kind>
              <date>19961125</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>47850095</doc-number>
              <kind>A</kind>
              <date>19950607</date>
            </document-id>
            <parent-status>ABANDONED</parent-status>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5805896</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </continuation>
      <division>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>15336293</doc-number>
              <kind>A</kind>
              <date>19931116</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5742848</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </division>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Microsoft Corporation</orgname>
            <address>
              <address-1>Redmond, WA, US</address-1>
              <city>Redmond</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>MICROSOFT</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Burgess, Henry W.</name>
            <address>
              <address-1>Woodinville, WA, US</address-1>
              <city>Woodinville</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Schwegman, Lundberg, Woessner &amp; Kluth, P.A.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Lee, Thomas C.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method and system for interconnecting software components.
      <br/>
      In a preferred embodiment, the present invention instantiates an event object.
      <br/>
      The event object includes message information describing the message and a dispatching member function for invoking a member function of a target object passing the message information.
      <br/>
      A message is passed by invoking the dispatching member function of the event object passing an identifier to a target object and an identifier of a member function of the target object.
      <br/>
      The dispatching member function invokes the identified member function of the identified target object passing the event information as an actual parameter.
      <br/>
      The event object is preferably of a derived class that inherits a base class.
      <br/>
      The base class provides common event behavior, while the derived class provides behavior specific to a type of message.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application is a continuation of U.S. patent application Ser.
      <br/>
      No. 08/756,540, filed Nov. 25, 1996, now U.S. Pat. No. 5,805,896; which is a continuation of U.S. patent application Ser.
      <br/>
      No. 08/478,500, filed Jun. 7, 1995, now abandoned; which is a divisional of U.S. patent application Ser.
      <br/>
      No. 08/153,362, filed Nov. 16, 1993; issued as U.S. Pat. No. 5,742,848.
    </p>
    <heading>TECHNICAL FIELD</heading>
    <p num="2">The present invention relates generally to a computer system for visual programming, and more specifically, to a method and system for interconnecting visual components and passing messages between connected components.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="3">
      Visual programming is a computer programming technique that allows for rapid development of visually oriented programs (visual programs).
      <br/>
      FIG. 1 is a diagram illustrating a sample operation of a visual program.
      <br/>
      The visual program is a temperature converter, which converts Fahrenheit to Centigrade, and vice versa.
      <br/>
      The Fahrenheit scroll bar 101 is used to set the Fahrenheit value to between 0 and 100 degrees as indicated by the position of the Fahrenheit slider 103.
      <br/>
      The Fahrenheit display 102 displays the numeric Fahrenheit value represented by the position of the Fahrenheit slider.
      <br/>
      The Centigrade scroll bar 111 is used to set the Centigrade value between 0 and 100 degrees as indicated by the Centigrade slider 113.
      <br/>
      The Centigrade display 112 displays the numeric Centigrade value represented by the position of the Centigrade slider.
      <br/>
      In operation, when the Fahrenheit slider is moved by a user, the Centigrade slider is automatically moved to the corresponding Centigrade position and the Fahrenheit and Centigrade displays are updated.
      <br/>
      Conversely, when the Centigrade slider is moved by a user, the Fahrenheit slider is automatically moved to the corresponding Fahrenheit position and the Centigrade and Fahrenheit displays are updated.
    </p>
    <p num="4">
      Visual programming allows various components (e.g., a scroll bar) to be interconnected visually to effect the program behavior.
      <br/>
      A visual programming environment typically includes a list of predefined components that can be interconnected to create a visual program.
      <br/>
      Each component may include input and output ports and a visual interface.
      <br/>
      When creating a visual program, a programmer specifies the visual components and their location on the display.
      <br/>
      The programmer also specifies the interconnection between various ports.
      <br/>
      The components pass values through these connections.
      <br/>
      FIG. 2 is a block diagram illustrating a scroll bar component.
      <br/>
      The scroll bar component 201 receives messages from the operating system (e.g., mouse down) and controls the display of a scroll bar.
      <br/>
      The scroll bar also provides an input port 203 and an output port 202.
      <br/>
      The input port is used to receive a value indicating a new position of the slider and the output port is used to send a value indicating a new slider position.
      <br/>
      The scroll bar can be connected to other components through its ports.
    </p>
    <p num="5">
      FIG. 3 is a diagram illustrating a scroll bar connected to a display component.
      <br/>
      A display component 301 has one input port 303 for receiving a value.
      <br/>
      The display component controls the displaying of the value that it receives.
      <br/>
      The output port 202 of the scroll bar component 201 is connected to the input port 303 of the display component.
      <br/>
      In operation, whenever the scroll bar slider is moved, a value indicating the new position of the slider is sent from the scroll bar component to the display component.
      <br/>
      The display component receives this value and updates its display accordingly.
    </p>
    <p num="6">
      Although prior references have described general visual programming environments, visual programming is not widespread because of the inefficiencies of visual programs.
      <br/>
      For example, visual programs often execute in an interpretive mode that results in unacceptably slow performance.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="7">It is an object of the present invention to provide a method and system that allows for creation of efficient visual programs.</p>
    <p num="8">It is another object of the present invention to provide a method and system that shields component developer from the details of the connecting of components and the passing of values between components.</p>
    <p num="9">
      These and other objects, which will become apparent as the invention is more fully described below, are obtained by an improved method and system for sending messages between components.
      <br/>
      In a preferred embodiment, the present invention instantiates an event object.
      <br/>
      The event object includes message information describing the message and a dispatching member function for invoking a member function of a target object passing the message information.
      <br/>
      A message is passed by invoking the dispatching member function of the event object passing an identifier to a target object and an identifier of a member function of the target object.
      <br/>
      The dispatching member function invokes the identified member function of the identified target object passing the event information as an actual parameter.
      <br/>
      The event object is preferably of a derived class that inherits a base class.
      <br/>
      The base class provides common event behavior, while the derived class provides behavior specific to a type of message.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="10">
      FIG. 1 is a diagram illustrating a sample operation of a visual program.
      <br/>
      FIG. 2 is a block diagram illustrating a scroll bar component.
      <br/>
      FIG. 3 is a diagram illustrating a scroll bar connected to a display component.
      <br/>
      FIG. 4 is a diagram illustrating visual programming of the present invention.
      <br/>
      FIG. 5 is a diagram illustrating the instantiated objects for the temperature converter.
      <br/>
      FIG. 6 is a table containing a listing of the connections for the for the temperature converter program.
      <br/>
      FIG. 7 is a flow diagram illustrating the flow of control of sending a message from a source object to a target object.
      <br/>
      FIG. 8 is a block diagram of data structures of a creditor object.
      <br/>
      FIG. 9 is a block diagram of a computer system.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="11">
      The present invention provides a method and system for connecting components and passing of messages (events) between components.
      <br/>
      In a preferred embodiment, each component may provide multiple input ports and output ports.
      <br/>
      Each output port sends a message corresponding to a particular type of event; each input port receives a message corresponding to a particular type of event.
      <br/>
      A component that sends a message is referred to as a source, and a component that receives the message is referred to as the target.
      <br/>
      In a preferred embodiment, each component has an associated run-time class and editor class.
      <br/>
      The editor class provides component-specitic behavior to assist in creating a visual program.
      <br/>
      The run-time class provides the component behavior when the visual program executes.
      <br/>
      A visual programming system controls the development of visual programs by instantiating objects of the editor classes and controls the run-time execution by instantiating objects of the run-time class.
      <br/>
      As described below, the present invention provides a mechanism in which messages are efficiently passed between components.
      <br/>
      In the following, a preferred embodiment of the present invention is described using well-known object-oriented terminology and terminology of the C++ programming language.
    </p>
    <p num="12">
      FIG. 4 is a diagram illustrating visual programming of the present invention.
      <br/>
      To generate a visual program to implement a temperature converter, a programmer would position a Fahrenheit scroll bar 410, Fahrenheit display 430, a Centigrade scroll bar 420, and a Centigrade display 440.
      <br/>
      The programmer would also position an FtoC calculator 460, which converts a Fahrenheit value to a Centigrade value, and a CtoF calculator 450, which converts a Centigrade value to a Fahrenheit value.
      <br/>
      In one embodiment, the components are selected from an extendible list of available components.
      <br/>
      The programmer then connects the components through their ports.
      <br/>
      The connections 412-&gt;461 and 412-&gt;431 indicate that when the Fahrenheit scroll bar is changed (e.g., slider moved), the new value is sent to the FtoC calculator and the Fahrenheit display.
      <br/>
      The connection 462-&gt;421 indicates that when the FtoC calculator calculates a new Centigrade value, the new value is sent to the Centigrade scroll bar.
      <br/>
      The connections 422-&gt;441 and 422-&gt;451 indicate that when the Centigrade scroll bar is changed, the new value is sent to the CtoF calculator and the Centigrade display.
      <br/>
      The connection 452-&gt;411 indicates that when the CtoF calculator calculates a new Fahrenheit value, the new value is sent to the Fahrenheit scroll bar.
      <br/>
      In one embodiment, the components are connected by entering a connect mode and selecting the source and target of each connection.
    </p>
    <p num="13">
      The visual programming system instantiates an object of the run-time class for each component selected by the programmer.
      <br/>
      FIG. 5 is a diagram illustrating the instantiated objects for the temperature converter.
      <br/>
      The FScrollbar object 501 corresponds to the Fahrenheit scroll bar component, the CScrollbar object 502 corresponds to the Centigrade scroll bar component, the FDisplay object 503 corresponds to the Fahrenheit display component, the CDisplay object 504 corresponds to the Centigrade display component, the FtoC object 505 corresponds to the FtoC calculator component, and the CtoF object 506 corresponds to the CtoF calculator component.
      <br/>
      Each of these objects implements the display and control of the corresponding component.
      <br/>
      The directed arcs indicate the direction of the connections, that is, from an output port to an input port.
    </p>
    <p num="14">
      Each component may send messages to other components corresponding to different types of events.
      <br/>
      For example, a scroll bar may send a message to indicate a changed value event has occurred and another message to indicate a scroll down has occurred.
      <br/>
      Each type of event has its own output port.
      <br/>
      Also, input ports are designated to receive only certain types of events.
      <br/>
      For example, an output port that sends messages relating to a scroll up event can only be connected to an input port that expects a message in the same format as a scroll up message.
    </p>
    <p num="15">
      A source object (corresponding to a source component) sends a message (communicates the occurrence of an event) by invoking a member function of a target object (corresponding to a target component).
      <br/>
      Each input and output port is preferably associated with a function member of the run-time object.
      <br/>
      For example, a scroll bar object may have a function member named ValueIn corresponding to an input port for receiving a new value and a function member named ValueOut corresponding to an output port for sending a new value.
      <br/>
      In operation, the member function ValueOut is invoked whenever a change in the value for the scroll bar occurs, e.g., when the slider is moved.
      <br/>
      The member function ValueOut invokes the target member function corresponding to each input port to which it is connected.
      <br/>
      The invoked target member function then processes the value information which is passed as a parameter.
    </p>
    <p num="16">
      In a preferred embodiment, message information (e.g., new value) is encapsulated in an object of an event class.
      <br/>
      The source member function corresponding to an output port creates an event object and stores the event information in the event object.
      <br/>
      The source member function effects the invocation of a notify member function of a target object passing the event object and a pointer to the target member function.
      <br/>
      The notify member function invokes a dispatching member function of the event object passing a pointer to the target object and a pointer to the target member function.
      <br/>
      The dispatching member function invokes the target member function passing the stored information as a parameter.
      <br/>
      In a preferred embodiment, different implementations of event objects are used to represent different function prototypes (parameter list) of target member functions.
      <br/>
      Each class of event object contains information that is passed to a target member function according to the function prototype.
      <br/>
      Thus, each source member function invokes target member functions with the same prototype.
    </p>
    <p num="17">
      In a preferred embodiment, each run-time class inherits the class CObject.
      <br/>
      The class CObject tracks the connections and controls the sending of messages.
      <br/>
      The class CObject is referred to as a connection manager.
      <br/>
      In this way, run-time classes that implement component behavior can be developed without detailed knowledge of the implementation of the class CObject.
      <br/>
      Moreover, run-time objects implemented by different. developers can cooperatively interact.
      <br/>
      FIG. 6 is a table containing a listing of the connections for the temperature converter program.
      <br/>
      The class CObject includes an array (connectionArray) that contains the connections for each output port of the run-time object.
      <br/>
      Each entry of the connection array contains an identifier of the output port of the source object, an identifier of the target object, and an identifier of the input port of the target object.
      <br/>
      For example, the connection array for the FScrollbar object contains two entries:
    </p>
    <p num="18">(Out1, FDisplay, In1) and (Out1, FtoC, In1)</p>
    <p num="19">
      "Out1" identifies the output port, "FDisplay" and "FtoC" identify the target objects, and "In1" identifies the input port of the target objects.
      <br/>
      When an event occurs for a particular output port, the source object instantiates an event object and invokes an inform targets member function of the class CObject (connection manager) identifying the output port.
      <br/>
      The output port is preferably identified by a pointer to a member function (source member function) of the source object.
      <br/>
      The inform targets member function sends an appropriate message to each target object as indicated by the connection array for the source object.
      <br/>
      The input port is preferably identified by a pointer to a member function (target member function) of the target object.
      <br/>
      The connection manager sends the message to the target object by invoking a notify member function of the target object passing a pointer to the target member function and an event object.
      <br/>
      The event object contains actual parameters for the target member function.
      <br/>
      The notify member function invokes a dispatch member function of the event object passing a pointer to the target member function and a pointer to the target object.
      <br/>
      The dispatch member function formats the actual parameters and invokes the target member function of the target object passing the actual parameters.
    </p>
    <p num="20">Code Table 1 contains pseudocode for the class CObject.</p>
    <p num="21">
      -- CODE TABLE 1
      <br/>
      -- class CONNECTION
      <br/>
      -- +  CObject *ptarget;
      <br/>
      --         ULONG pmftarget;
      <br/>
      --         ULONG pmfsource;
      <br/>
      -- }
      <br/>
      -- class CObject
      <br/>
      -- +
      <br/>
      --         boolean        isRecursing;
      <br/>
      --         CONNECTION     connectionArray�10�;
      <br/>
      --         int            connectionCount;
      <br/>
      --         virtual boolean NotifyEvent (CEvent *pevent, CObject *psource,
      <br/>
      --  ULONG pmftarget);
      <br/>
      --                 boolean InformTargets(CEvent *pevent, ULONG pmfsource);
      <br/>
      --                 void    AddTarget(CObject *ptarget, ULONG pmftarget, ULONG
      <br/>
      --  pmfsource);
      <br/>
      --         virtual void    Serialize(CArchive &amp;ar);
      <br/>
      --         virtual VOID    WriteConnectionArray(CArchive &amp;ar);
      <br/>
      --         virtual VOID    ReadConnectionArray(CArchive &amp;ar);
      <br/>
      --         virtual VOID    SerializeObjectData(CArchive &amp;ar);
      <br/>
      -- };
      <br/>
      -- BOOL CObject::NotifyEvent (CEvent *pevent, CObject *psource, ULONG
      <br/>
      --  pmftarget)
      <br/>
      -- +
      <br/>
      --         BOOL ret;
      <br/>
      --         if (isRecursing) return FALSE;
      <br/>
      --         isRecursing = TRUE;
      <br/>
      --         if (pevent --&gt; IsKindOf(CValueEvent))
      <br/>
      --                ret = ((CValueEvent*)pevent)--&gt;Dispatch(psource, this,
      <br/>
      --  pmftarget);
      <br/>
      --         else if
      <br/>
      --                .
      <br/>
      --                .
      <br/>
      --                .
      <br/>
      --         else return FALSE;
      <br/>
      --         isRecursing = FALSE;
      <br/>
      --         return ret;
      <br/>
      -- }
      <br/>
      -- BOOL CObject::InformTargets(CEvent *pevent, ULONG pmfsource)
      <br/>
      -- +
      <br/>
      --         for (i = 0; i &lt; connectionCount; i++)
      <br/>
      --         +
      <br/>
      --                if (connectionArray�i�.pmfsource = = pmfsource)
      <br/>
      --                       connectionArray�i�.pmftarget--&gt; NotifyEvent(pevent,
      <br/>
      --  this,
      <br/>
      -- connectionArray�i�.pmftarget);
      <br/>
      --         }
      <br/>
      -- }
      <br/>
      -- void CObject::AddTarget(CObject *ptarget, ULONG pmftarget, ULONG pmfsource)
      <br/>
      -- +
      <br/>
      --         i = connectionCount + +;
      <br/>
      --         connectionArray�i�.ptarget = ptarget;
      <br/>
      --         connectionArray�i�.pmftarget = pmftarget;
      <br/>
      --         connectionArray�i�.pmfsource = pmfsource;
      <br/>
      -- }
    </p>
    <p num="22">
      The programming system adds connections to a run-time object by invoking the member function AddTarget provided by the connection manager.
      <br/>
      The programming system invokes the AddTarget member function of the source object whenever a programmer connects two objects.
      <br/>
      The member function AddTarget is passed a pointer to the target object, a pointer to the target member function (representing the input port), and a pointer to a source member function (representing the output port).
      <br/>
      The member function AddTarget adds an entry to the connectionArray of the source object corresponding to the passed parameters.
      <br/>
      In a preferred embodiment, the connections are stored not as data members of the CObject, but rather are stored in a heap that is shared by all run-time objects.
      <br/>
      In this way, the storage overhead for. each object can be minimized.
    </p>
    <p num="23">
      A message is sent to a target object in the following manner.
      <br/>
      The source object instantiates an event object and stores event information in the event object.
      <br/>
      The source object invokes the member function InformTargets of its connection manager passing the event object and a pointer to the source member function.
      <br/>
      For each connection for that output port (source member function), the connection manager invokes the member function NotifyEvent of target object passing the event object, a pointer to the target member function, and a pointer to the source object.
      <br/>
      The member function NotifyEvent invokes the member function Dispatch of the event object passing a pointer to the source object, a pointer to the target object, and a pointer to the target member function.
      <br/>
      The member function Dispatch invokes the target member function of the target object passing the stored event information as actual parameters.
      <br/>
      An event object encapsulates the message information in a way that is transparent to the connection manager.
      <br/>
      Thus, the connection manager can control the invoking of target member functions passing arbitrary parameters.
    </p>
    <p num="24">
      FIG. 7 is a flow diagram illustrating the flow of control of sending a message from a source object to a target object.
      <br/>
      A source member function 710-714 of the source object instantiates an event object in step 711.
      <br/>
      In step 712, the source member function stores the event information in the event object.
      <br/>
      In step 713, the source member function invokes the member function InformTargets of the connection manager passing a pointer to the event and the source member function.
      <br/>
      In step 721, the member function InformTargets loops determining which entries in the connection array correspond to the source member function.
      <br/>
      When an entry is found, the member function InformTargets invokes the member function NotifyEvent of the target object passing a pointer to the event, a pointer to the source object, and a pointer to the target member function.
      <br/>
      In step 731, the member function NotifyEvent of the target object invokes the member function Dispatch of the event passing a pointer to the source object, a pointer to the target object, and pointer to the target member function.
      <br/>
      In step 741, the member function Dispatch invokes the target member function passing the event information stored in the event object.
      <br/>
      The target member function processes the event information in step 751.
      <br/>
      The target member function then returns, which causes the member functions Dispatch, NotifyEvent, and InformTargets to return to the execution of the source member function.
    </p>
    <p num="25">
      The use of an event object allows the connection manager to invoke input member functions with arbitrary parameters.
      <br/>
      Each prototype for a input member function has its own implementation of the event class to handle the event.
      <br/>
      The source object instantiates the appropriate class of event object.
      <br/>
      For example, the input member function ValueIn is passed an integer.
      <br/>
      Thus, an event class is implemented that contains an integer data member to store the value.
      <br/>
      The member function Dispatch of the event class invokes a passed target member function passing the stored value.
      <br/>
      An event class may be implemented for each different prototype of a target member function.
      <br/>
      For example, if the event information includes both an integer and a string, then an event class can have a data member for the integer and another for the string.
      <br/>
      The member function Dispatch of the event class invokes a passed target member function passing the integer and the string as parameters.
    </p>
    <p num="26">
      Code Table 2 contains pseudocode that describes the event classes.
      <br/>
      Each event class derives from the class CEvent.
      <br/>
      The event class CIntEvent is used to pass information stored as an integer to a target member function.
      <br/>
      The member function Dispatch is passed a pointer the target object and a pointer to the member function.
      <br/>
      The member function Dispatch invokes the target member function by the following statement:
      <br/>
      (ptarget-&gt;*(LongToMember (pmftarget)))(numValue)
    </p>
    <p num="27">The event class CActionEvent is used to pass messages with no corresponding data, and the event class CStringEvent is used to pass messages with string data.</p>
    <p num="28">
      --
      <br/>
      -- class CEvent
      <br/>
      -- +
      <br/>
      -- public:
      <br/>
      --        CEvent( );
      <br/>
      --        virtual BOOL Dispatch (CObject *psource, CObject *ptarget, ULONG
      <br/>
      --  pmftarget)=0;
      <br/>
      -- }
      <br/>
      -- class CActionEvent : public CEvent
      <br/>
      -- +
      <br/>
      -- public:
      <br/>
      --        virtual BOOL Dispatch (CObject *psource, CObject *ptarget, ULONG
      <br/>
      --  pmftarget)
      <br/>
      --        +(ptarget--&gt;*(LongToMember(pmf)))( )};
      <br/>
      -- }
      <br/>
      -- class CIntEvent : public CEvent
      <br/>
      -- +
      <br/>
      -- public:
      <br/>
      --        INT         numValue;
      <br/>
      --        virtual BOOL Dispatch (CObject*psource, CObject *ptarget, ULONG
      <br/>
      --  pmftarget)
      <br/>
      --        +(ptarget--&gt;*(LongToMember(pmftarget)))(numValue)};
      <br/>
      -- }
      <br/>
      -- class CStringEvent : public CEvent
      <br/>
      -- +
      <br/>
      -- public:
      <br/>
      --        STRING      string Value;
      <br/>
      --        virtual BOOL Dispatch (CObject *psource, CObject *ptarget, ULONG
      <br/>
      --  pmftarget);
      <br/>
      --        +(ptarget--&gt;*(LongToMember(pmftarget)))(stringValue)};
      <br/>
      -- }
    </p>
    <p num="29">
      Code Table 3 contains pseudocode for a sample scroll bar object corresponding to a scroll bar component.
      <br/>
      The scroll bar object is defined by class CScrollbar, which inherits the connection manager (class CObject).
      <br/>
      The class contains data members to store the current value of the scroll bar, a large and small increment for the scroll bar, and the minimum and maximum values for the scroll bar.
      <br/>
      The class also contains the member function to set and retrieve the current value, to receive messages from the parent window of that scroll bar, and to effect various scroll bar behaviors.
      <br/>
      The scroll bar component has an input function member (value) with one parameter and an output function member (value) with no parameters.
    </p>
    <p num="30">
      The constructor CScrollbar registers the scroll bar with the operating system and initializes its data members.
      <br/>
      The member function HandleParentMsg receives messages from the parent window and dispatches the message.
      <br/>
      For example, if the member function HandleParentMsg is passed a message that the scroll bar event line up (SB_LINEUP) has occurred, then the member function invokes the member function LineUp.
      <br/>
      The member function LineUp instantiates a CActionEvent object, sets a pointer to the member function LineUp, and invokes the member function InformTargets of the connection manager.
      <br/>
      The member function LineUp then invokes the member function value passing a new value for the scroll bar.
    </p>
    <p num="31">
      The member function value receives the new value.
      <br/>
      If the new value is different than the current value, then the member function adjusts the slider, instantiates a CIntEvent object, sets the event object to the new value, sets a pointer to the member function value (to identify the source member function), and invokes the member function InformTargets of the connection manager.
    </p>
    <p num="32">
      The member function minimum illustrates a member function of an object that does not cause a message to be sent to target objects, that is, it does not correspond to an output port.
      <br/>
      The member function minimum, however, may correspond to an input port.
      <br/>
      In one embodiment, a member function could correspond to both an input and an output port (a bidirectional port).
      <br/>
      The member function can be invoked to receive a message and then send a message to other target objects.
    </p>
    <p num="33">
      In a preferred embodiment, the present invention is implemented to execute under the Windows operating system developed by Microsoft Corporation.
      <br/>
      The Windows operating system is described in "Programming Windows" written by Charles Petzold and published by Microsoft Corporation, which is hereby incorporated by reference.
    </p>
    <p num="34">
      -- CODE TABLE 3
      <br/>
      -- class CScrollbar : CObject, CWindow
      <br/>
      -- +
      <br/>
      --         INT:    m_largeChange;
      <br/>
      --         INT     m_smallChange;
      <br/>
      --         INT     m_value;
      <br/>
      --         INT     m_minimum;
      <br/>
      --         INT     m_maximum;
      <br/>
      --         BOOL    m_isVert;
      <br/>
      --                 CScrollBar( );
      <br/>
      --                 CScrollBar(const VRect &amp;pos, CWindow *parent, boolean
      <br/>
      --  isVert);
      <br/>
      --         virtual INT   largeChange( );
      <br/>
      --         virtual VOID  largeChange(INT);
      <br/>
      --         virtual INT   smallChange( );
      <br/>
      --         virtual VOID  smallChange(INT);
      <br/>
      --         virtual INT   value( );
      <br/>
      --         virtual VOID  value(INT);
      <br/>
      --         virtual INT   minimum( );
      <br/>
      --         virtual VOID  minimum(INT);
      <br/>
      --         virtual INT   maximum( );
      <br/>
      --         virtual VOID  maximum(INT);
      <br/>
      --         virtual VOID  lineUP( );
      <br/>
      --         virtual VOID  lineDown( );
      <br/>
      --         virtual VOID  pageUP( );
      <br/>
      --         virtual VOID  pageDown( );
      <br/>
      --         virtual LONG  HandleParentMsg(HWND hwnd, unsigned wm, WORD wParam,
      <br/>
      --  LONG
      <br/>
      -- lParam);
      <br/>
      -- }
      <br/>
      -- CScrollBar::CScrollBar(const VRect &amp;pos, CWindow *parent, BOOL isVert)
      <br/>
      --        DWORD style;
      <br/>
      --        if (isVert)
      <br/>
      --                style = WS_CHILD .vertline.
      <br/>
      SBS_VERT;
      <br/>
      --         else
      <br/>
      --                style = WS_CHILD .vertline.
      <br/>
      SBS_HORZ;
      <br/>
      --         m_isVert = isVert;
      <br/>
      --         CWinWindow::Init( parent,
      <br/>
      --                          NULL,
      <br/>
      --                          0L,
      <br/>
      --                          "SCROLLBAR",
      <br/>
      --                          " ",
      <br/>
      --                          style,
      <br/>
      --                          pos.left,
      <br/>
      --                          pos.top,
      <br/>
      --                          pos.right - pos.left,
      <br/>
      --                          pos.bottom - pos.top,
      <br/>
      --                          NULL,
      <br/>
      --                          NULL);
      <br/>
      --         smallChange(1);
      <br/>
      --         largeChange(10);
      <br/>
      --         minimum(0);
      <br/>
      --         maximum(100);
      <br/>
      --         value(0);
      <br/>
      -- }
      <br/>
      -- VOID    CScrollBar::lineUp( )
      <br/>
      -- +
      <br/>
      --         CActionEvent evt;
      <br/>
      --         VOID (ScrollBar::*mfp)( ) = &amp;CScrollBar::lineUp;
      <br/>
      --         InformTarget(&amp;evt, MemberToLong(mfp));
      <br/>
      --         value(m_value-m_smallChange);
      <br/>
      -- }
      <br/>
      -- VOID    CScrollBar::value(INT theValue)
      <br/>
      -- +
      <br/>
      --         if (theValue &lt; m_minimum)
      <br/>
      --               the Value = m_minimum;
      <br/>
      --         if (theValue &gt; m_maximum)
      <br/>
      --               theValue = m_maximum;
      <br/>
      --         if (m_value �= theValue)
      <br/>
      --         +
      <br/>
      --               m_value = theValue;
      <br/>
      --               if (m_hwnd �= NULL)
      <br/>
      --                    SetScrollPos(GetHwnd( ), SB_CTL, m_value, TRUE);
      <br/>
      --               CIntValue numEvent;
      <br/>
      --               INT (CScrollBar::*mfp)( ) = &amp;CScrollBar::value;
      <br/>
      --               numEvent.numValue = m_value;
      <br/>
      --               InformTargets(&amp;numEvent, (ULONG)MemberToLong(mfp));
      <br/>
      --         }
      <br/>
      -- }
      <br/>
      -- VOID    CScrollBar::minimum(INT theMinimum)
      <br/>
      -- +
      <br/>
      --         m_mimimum = theMinimum;
      <br/>
      --         if (m_hwnd �= NULL)
      <br/>
      --               SetScrollRange(GetHwnd( ), SB_CTL, m_minimum, m_maximum,
      <br/>
      --  TRUE);
      <br/>
      --         if (m_value &lt; the Minimum)
      <br/>
      --               value(theMinimum);
      <br/>
      -- }
      <br/>
      -- LONG ScrollBar::HandleParentMsg( HWND    hwnd,
      <br/>
      --                                      unsigned   wm,
      <br/>
      --                                      WORD wParam,
      <br/>
      --                                      LONG    lParam)
      <br/>
      -- +
      <br/>
      --         switch(wm)
      <br/>
      --         +
      <br/>
      --               case WM_HSCROLL:
      <br/>
      --               case WM_VSCROLL:
      <br/>
      --               switch(wParam)
      <br/>
      --               +
      <br/>
      --                    case SB_LINEUP:  lineUp( ); break;
      <br/>
      --                    case SB_LINEDOWN:         lineDown( ); break;
      <br/>
      --                    case SB_PAGEUP:           pageUp( ); break;
      <br/>
      --                    case SB_PAGEDOWN:         pageDown( ); break;
      <br/>
      --                    case SB_TOP:              value(minimum( )); break;
      <br/>
      --                    case SB_BOTTOM            value(maximum( )); break;
      <br/>
      --                    case SB_THUMBTRACK:
      <br/>
      --                    case SB_THUMBPOSITION:    value(LOWORD(lParam)); break;
      <br/>
      --                    case SB_ENDSCROLL:        break;
      <br/>
      --               }
      <br/>
      --               default: break;
      <br/>
      --         }
      <br/>
      --         return CWinWindow::HandleParentMSG(hwnd, wm, wParam, lParam);
      <br/>
      -- }
    </p>
    <p num="35">
      In a preferred embodiment, the programming system persistently stores the run-time objects of a visual program.
      <br/>
      The programming system maintains a pointer to each run-time object corresponding to a component.
      <br/>
      To store the program, the programming environment invokes a member function Serialize (provided by the connection manager of each object).
      <br/>
      The member function Serialize writes the connection array to the persistent storage and invokes the member function SerializeObjectData to write the object specific data to the persistent storage.
      <br/>
      The member function SerializeObjectData of the connection manager would typically be overridden by the run-time object corresponding to the component.
      <br/>
      For example, the member function SerializeObjectData for the scroll bar object writes each data member to persistent storage.
      <br/>
      Similarly, each object has corresponding member functions to retrieve the persistent stored data.
      <br/>
      When storing and retrieving data, the programming system needs to map the memory address of each pointer to its persistently stored object data.
      <br/>
      When the object data is retrieved, the pointers in the connection array need to be mapped to their new memory locations.
    </p>
    <p num="36">
      In a preferred embodiment, each component has a corresponding editor object which controls the placement, movement, and connection to the component.
      <br/>
      A standard interface (CEditor) to the editor object is provided.
      <br/>
      The CEditor object provides a standard mechanism (1) for displaying the available ports and the current connections, (2) for selecting an available port, (3) for connecting a port to another port, and (4) for moving the component.
      <br/>
      The implementor of a component preferably implements an editor object that inherits the CEditor interface.
      <br/>
      When a programmer selects a component, the programming system instantiates both the run-time object and an editor object for the component.
    </p>
    <p num="37">
      FIG. 8 is a block diagram of data structures of a CEditor object.
      <br/>
      The CEditor object 802 contains a pointer to a list of available ports (mPortList), a pointer to a user interface editor object (mEditorUI), a pointer to the run-time object corresponding to the component (mSubject), a pointer to a list of child editor object (mChildEditors), and a pointer to a parent editor (mParent).
      <br/>
      Each port is described by a CEditPort object 808.
      <br/>
      A CEditPort object contains a pointer to the associated CEditor object (mOwnerEditor), a pointer to a list of input ports to which the port is connected (mConnectedPorts), status information (mStatus), and pointer to member functions identifying the input and output portions of the port (mValueIn and mvalueOut) as pointers to member functions.
      <br/>
      The CEditorUI object 812 contains member functions to control moving the component on the display and displaying available ports and connections.
    </p>
    <p num="38">
      A component may contains child components.
      <br/>
      For example, a window component (parent component) may contain a scroll bar component.
      <br/>
      The CEditor object for the window contains pointers to each child CEditor object.
    </p>
    <p num="39">
      The visual programming environment tracks the first level of parent components.
      <br/>
      Each CEditor object tracks its child CEditor objects.
      <br/>
      When an event occurs (e.g. mouse button down), the programming environment passes the event to the appropriate first level component.
      <br/>
      The first level component is responsible to passing the event on the appropriate child component.
    </p>
    <p num="40">
      Code Table 4 is pseudocode for the class CEditor.
      <br/>
      The CEditer class inherits the CObject class.
      <br/>
      This inheritance allows connections between CEditor objects to be controlled by the connection manager.
      <br/>
      The CEditor objects are, thus, connected in a manner similar to the way the run-time objects are connected.
      <br/>
      The CEditor object includes a constructor and member function to delete an object.
    </p>
    <p num="41">
      -- CODE TABLE 4
      <br/>
      -- class CEditor:   public CObject
      <br/>
      -- +
      <br/>
      -- public:
      <br/>
      --             CEDitor(CEditor* pEditor, CObject* pSubject);
      <br/>
      --         virtual VOID ObjectDeleted(CObject* object);
      <br/>
      --         virtual VOID PortChanged(CEditPort* port);
      <br/>
      --         VString mName;
      <br/>
      -- private:
      <br/>
      --         CEditPortListPtr mPortList;
      <br/>
      --         CEditorUIPtr mEditorUI;
      <br/>
      --         CObjectPtr mSubject;
      <br/>
      --         CEditorListPtr mChildEditors;
      <br/>
      --         CEditorPtr mParent;
      <br/>
      -- };
      <br/>
      -- VOID    CEditor::ObjectDeleted(CObject* object)
      <br/>
      -- +
      <br/>
      --         for each CEditPort port1 in mPortList
      <br/>
      --             if (port1 is connected)
      <br/>
      --                for each CEditPort port2 in mConnectedPorts of port1
      <br/>
      --                    if (port2.mSubject = = object)
      <br/>
      --                       port1--&gt;Disconnect(port2)
      <br/>
      --         RemoveTarget(object);
      <br/>
      --         mSubject--&gt;RemoveTarget(object);
      <br/>
      --         fore ach CEditorUI eui in mEditorUIList
      <br/>
      --             eui--&gt;RemoveTarget(object);
      <br/>
      -- };
    </p>
    <p num="42">
      Code Table 5 contains pseudocode defining CEditorUI class.
      <br/>
      The CEditorUI class provides a standard mechanism for editing connections between components and movement of components.
      <br/>
      When a programmer selects to add a component to a visual program, the programming system instantiates the object, an CEditorUI for the object, and a CEditor object for the object.
      <br/>
      In a preferred embodiment, the programmer can move a component by clicking on the component.
      <br/>
      A tracker box is drawn and the user can then drag the component to a new position.
    </p>
    <p num="43">
      -- CODE TABLE 5
      <br/>
      -- class CEditorUI: public CObject, CWindow
      <br/>
      -- +
      <br/>
      -- public:
      <br/>
      --        virtual void  Draw(const VRect&amp; rectUpdate);
      <br/>
      --        virtual BOOL  OnMouseStart(CUserEvp *, VPoint, INT, INT);
      <br/>
      --        virtual BOOL  OnMouseDrag(CUserEvp *, VPoint, BOOL);
      <br/>
      --        virtual BOOL  OnMouseEnd(CUserEvp *, VPoint, BOOL);
      <br/>
      --        virtual void  PositionChange( );
      <br/>
      --        BOOL    showTracker;
      <br/>
      --        VPoint  startSize;
      <br/>
      --        VPoint  startPoint;
      <br/>
      --        WORD    dragMode;
      <br/>
      --        virtual BOOL     MakeStdUI(CEditor*, CWindow*);
      <br/>
      --        virtual BOOL     NotifyEvent(CEvent* ev,
      <br/>
      --                           CObject* sender,
      <br/>
      --                           ULONG action);
      <br/>
      --        CPopMenuPtr      m_popup;
      <br/>
      --        CPropertyDialogPtr m_dialog;
      <br/>
      -- private:
      <br/>
      --        CEditorPtr    mEditor;
      <br/>
      --        BOOL          mIsActive;
      <br/>
      -- };
    </p>
    <p num="44">
      The programming system invokes the member function Draw to request the component to draw a tracker box.
      <br/>
      The programming system invokes the member function OnMouseStart to indicate that object is being selected, the member function OnMouseDrag to indicate the new position of the tracker, and the member function OnMouseEnd to indicate that the tracking is complete.
      <br/>
      The member function OnMouseEnd invokes the member function PositionChange to pass the new position to the CEditorUI object that is specific to the component (e.g., scroll bar).
    </p>
    <p num="45">
      The member function MakeStdUI initializes a standard user interface for the component.
      <br/>
      The standard user interface includes a menu for selecting to delete the component, to move or size the component, or to change properties of the component.
      <br/>
      The CEditorUI provides a standard dialog for displaying available ports and current connections.
      <br/>
      For example, a list of available ports would be
    </p>
    <p num="46">
      --
      <br/>
      --      Name    Type           Input Member  Output Member
      <br/>
      --      Position CIntEvent      6             7
      <br/>
      --      PageUp  CActionEvent   11            12
    </p>
    <p num="47">
      Code Table 6 contains pseudocode describing the CEditPort class.
      <br/>
      This class provides member functions to manage the actual connection between components.
      <br/>
      When two ports are selected for connection, the programming system invokes the member function Connect of the output port passing the input port.
      <br/>
      The member function Connect adds the target object to the connection array of the source object and adds the input port to the list of connections for the editor object.
    </p>
    <p num="48">
      -- CODE TABLE 6
      <br/>
      -- class CEditPort:   public CObject
      <br/>
      -- +
      <br/>
      -- public:
      <br/>
      --        virtual BOOL            Connect(CEditPort* OtherPort);
      <br/>
      --        virtual BOOL            Disconnect(CEditPort* OtherPort);
      <br/>
      -- private:
      <br/>
      --        VString          mName;
      <br/>
      --        CEditorPtr           mOwnerEditor;
      <br/>
      --        CObjectPtr           mSubject;
      <br/>
      --        CEditPortListPtr mConnectedPorts;
      <br/>
      --        BOOL                 mIsConnected : 1;
      <br/>
      --        BOOL                 mIsOutput : 1;
      <br/>
      --        BOOL                 mIsInput : 1;
      <br/>
      --        BOOL                 mCanRead : 1;
      <br/>
      --        BOOL                 mCanWrite : 1;
      <br/>
      --        CObjectPtr           mValueIn;
      <br/>
      --        CObjectPtr           mValueOut;
      <br/>
      -- };
      <br/>
      -- BOOL CEditPort::Connect(CEditPort* OtherPort)
      <br/>
      -- +
      <br/>
      --        mSubject--&gt; AddTarget( OtherPort--&gt; mSubject,
      <br/>
      --                             OtherPort--&gt; MValueIn,
      <br/>
      --                             this--&gt; MValueOut);
      <br/>
      --        mIsConnected = TRUE;
      <br/>
      --        mConnectedPorts--&gt; Add(OtherPort);
      <br/>
      --        return TRUE:
      <br/>
      -- }
    </p>
    <p num="49">
      Code Table 7 contains pseudocode for an implementation of the CEditor class for a scroll bar component.
      <br/>
      The implementation provides a constructor for the CEScrollBar class that inherits the CEditor class.
      <br/>
      The Constructor instantiates a CEditPort object for each port for the scroll bar component.
      <br/>
      In this example, the ports are "value" and "LineUp." The port value is a bidirectional port, that is, the member function value can be connected to an input and output port.
      <br/>
      The constructor also creates a CEScrollBarUI object.
      <br/>
      Code Table 8 contains pseudocode for the EScrollBarUI class.
    </p>
    <p num="50">
      -- CODE TABLE 7
      <br/>
      -- class CEScrollBar : CEditor
      <br/>
      -- +  CEScrollBar(CEditor* pParentEditor,
      <br/>
      --                       CWindow* pParentWindow,
      <br/>
      --                       CObject* pSubject);
      <br/>
      -- };
      <br/>
      -- CEScrollBar::CEScrollBar(CEditor* pParentEditor,
    </p>
    <p num="51">
      --                       CWindow* pParentWindow,
      <br/>
      --                       CObject* pSubject);
      <br/>
      -- : CEditor(pParentEditor, pSubject)
      <br/>
      -- +
      <br/>
      --         CEditPort* pp;
      <br/>
      --         void (CScrollBar::*mfp3)( );
      <br/>
      --         name(**);
      <br/>
      --         +
      <br/>
      --             INT (CScrollBar::*mfp1)( ) = &amp;CScrollBar::value;
      <br/>
      --             void (CScrollBar::*mfp2)(INT) = &amp;CScrollBar::value;
      <br/>
      --             pp = new CNumEditPort(this, "Value");
      <br/>
      --             pp--&gt; isOutput(TRUE);
      <br/>
      --             pp--&gt; valueOut( (CObject*)MemberToLong( mfp1 ) );
      <br/>
      --             pp--&gt; isInput(TRUE);
      <br/>
      --             pp--&gt; valueIn( (COjbect*)MemberToLong( mfp2 ) )
      <br/>
      --             pp--&gt; canRead(TRUE);
      <br/>
      --             pp--&gt; canWrite(TRUE);
      <br/>
      --             portList( )--&gt; Add(pp);
      <br/>
      --         }
      <br/>
      --         pp = new CEditPort(this, "Line Up");
      <br/>
      --         pp--&gt; isInput(TRUE);
      <br/>
      --         pp--&gt; valueIn( (CObject*)MemberToLong( mfp3 = &amp;CScrollBar::lineUp )
      <br/>
      --  );
      <br/>
      --         portList( )--&gt; Add(pp);
      <br/>
      --         CEScrollBarUI* ui = new CEScrollBarUI(this, pParentWindow);
      <br/>
      --         editorUIList( new CEditorUIList );
      <br/>
      --         editorUIList( )--&gt; Add( ui );
      <br/>
      -- }
    </p>
    <p num="52">
      -- CODE TABLE 8
      <br/>
      -- class CEScrollBarUI:CEditorUI
      <br/>
      -- +CEScrollBarUI(CEditor*,CWindow*)}
      <br/>
      -- CEScrollBarUI::CEScrollBarUI( CEditor* pEditor,
      <br/>
      --                           CWindow* pParentWindow)
      <br/>
      -- +
      <br/>
      --         editor(pEditor);
      <br/>
      --         parent(pParentWindow);
      <br/>
      --         COjbect* po = editor( )--&gt; subject( );
      <br/>
      --         position ( ((CWindow*)po)--&gt; position( ) );
      <br/>
      --         MakeStdUI(pEditor, pParentWindow);
      <br/>
      -- }
    </p>
    <p num="53">
      FIG. 9 is a block diagram illustrating a computer system for implementing the present invention.
      <br/>
      The computer system 901 includes central processing unit 902, memory 903, storage 904, display 905, and input device 906.
      <br/>
      In a preferred embodiment, objects are instantiated in memory and persistently stored to storage.
      <br/>
      Visual programs output data to the display and input data from the input device.
    </p>
    <p num="54">
      Although the present has been described in terms of a preferred embodiment, it is not intended that the invention be limited to this embodiment.
      <br/>
      Modifications within the spirit of the invention will be apparent to those skilled in the art.
      <br/>
      The scope of the present invention is defined by the claims which follow.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method in a computer system for composing a visual program, the method comprising:</claim-text>
      <claim-text>when selecting each of a plurality of components to be included in the visual program, instantiating a run-time object to implement the behavior of each selected component and instantiating an editor object for each selected component;</claim-text>
      <claim-text>and under control of the instantiated editor object for a component, displaying a list of available ports for the instantiated run-time object that implements the behavior of the component, each available port corresponding to an event associated with the component; selecting a displayed port;</claim-text>
      <claim-text>and directing the instantiated run-time object that implements the behavior of the component to establish a connection between the selected port and a target object, whereby during execution of the visual program the instantiated run-time object that implements the behavior of the component sends an indication of the event to each target object connected to the port upon occurrence of the event.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 wherein the editor objects control displaying a visual representation of the components during composition of the visual program.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1 wherein the run-time objects control displaying a visual representation of each of the components during composition of the visual program and the editor objects control positioning of the visual representation.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1 wherein each run-time object inherits a manager class having member functions for establishing the connection, wherein the editor objects invoke the member function to store in the run-time objects an indication of the connection.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1 wherein each port is a member function of the source object.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 1 wherein the editor objects inherit a managing editor class for controlling the establishment of the connection.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 1 wherein each editor objects contain a reference to an editor user interface object for controlling interactions with a programmer of the visual program.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 1 wherein each component contains a plurality of sub-components and the editor objects contain a reference to each editor object corresponding to a sub-component.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A computer-readable medium containing instructions for composing a visual program by: when selecting each of a plurality of components to be included in the visual program, instantiating a run-time object to implement the behavior of each selected component and instantiating an editor object for each selected component; under control of the instantiated editor object for a component, displaying a list of available ports for the instantiated run-time object that implements the behavior of the component, each available port corresponding to an event associated with the component; selecting a displayed port;</claim-text>
      <claim-text>and directing the instantiated run-time object that implements the behavior of the component to establish a connection between the selected port and a target object, whereby during execution of the visual program the instantiated run-time object that implements the behavior of the component sends an indication of the event to each target object connected to the port upon occurrence of the event.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The computer-readable medium of claim 9 wherein the editor objects control displaying a visual representation of the components during composition of the visual program.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The computer-readable medium of claim 9 wherein the run-time objects control displaying a visual representation of each of the components during composition of the visual program and the editor objects control positioning of the visual representation.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A computer-readable medium containing instructions for execution by a computer system for composing a visual program by performing a method comprising: when selecting each of a plurality of components to be included in the visual program, instantiating a run-time object to implement the behavior of each selected component and instantiating an editor object for each selected component; under control of the instantiated editor object for a component, displaying a list of available ports for the instantiated run-time object that implements the behavior of the component, each available port corresponding to an event associated with the component; selecting a displayed port;</claim-text>
      <claim-text>and directing the instantiated run-time object that implements the behavior of the component to establish a connection between the selected port and a target object, whereby during execution of the visual program the instantiated run-time object that implements the behavior of the component notifies each target object connected to the port of the occurrence of the event.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A computer-readable medium containing instructions for enabling a computer to compose a visual program comprised of multiple selected components by: instantiating a run-time object to implement the behavior of each selected component; instantiating an editor object for each selected component; displaying a list of available ports for the instantiated run-time object that implement the behavior of the component, each available port corresponding to an event associated with the component; selecting a displayed port;</claim-text>
      <claim-text>and the editor object directing the instantiated run-time object to establish a connection between the selected port and a target object, whereby during execution of the visual program the instantiated run-time object sends an indication of the event to each target object connected to the port upon occurrence of the event.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A computer-readable medium containing instructions for enabling a computer to compose a visual program comprised of multiple selected components by: instantiating a run-time object to implement the behavior of each selected component; instantiating an editor object for each selected component; displaying a list of available ports for the instantiated ran-time object that implement the behavior of the component, each available port corresponding to an event associated with the component; selecting a displayed port;</claim-text>
      <claim-text>and the editor object directing the instantiated run-time object to establish a connection between the selected port and a target object.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The medium of claim 14 and further containing instructions for enabling a computer to compose a visual program by: displaying a visual representation of the components during composition of the visual program.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A method in a computer system for composing a visual program comprised of multiple selected components, the method comprising: instantiating a run-time object to implement the behavior of each selected component; instantiating an editor object for each selected component; displaying a list of available ports for the instantiated run-time object that implements the behavior of the component, each available port corresponding to an event associated with the component; selecting a displayed port;</claim-text>
      <claim-text>and directing the instantiated run-time object that implements the behavior of the component to establish a connection between the selected port and a target object.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 16 wherein during execution of the visual program the instantiated run-time object that implements the behavior of the component sends an indication of the event to each target object connected to the port upon occurrence of the event.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. A computer-readable medium containing instructions for enabling a computer to compose a visual program comprised of multiple selected components by: instantiating an editor object for each selected component; causing display of a list of available ports, each port corresponding to an event associated with the component; enabling selection of a displayed port;</claim-text>
      <claim-text>and causing a connection to be established between the selected port and a target object, such that during execution of the visual program, an indication of the event is sent to each target object connected to the port upon occurrence of the event.</claim-text>
    </claim>
  </claims>
</questel-patent-document>