<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185636B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185636</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185636</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="24703245" extended-family-id="13727305">
      <document-id>
        <country>US</country>
        <doc-number>09307275</doc-number>
        <kind>A</kind>
        <date>19990507</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1999US-09307275</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>14023413</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>30727599</doc-number>
        <kind>A</kind>
        <date>19990507</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1999US-09307275</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>67358396</doc-number>
        <kind>A</kind>
        <date>19960701</date>
        <priority-linkage-type>3</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1996US-08673583</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04N   7/173       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>7</main-group>
        <subgroup>173</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04N  21/234       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>234</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04N  21/44        20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>44</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>710034000</text>
        <class>710</class>
        <subclass>034000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>348E07073</text>
        <class>348</class>
        <subclass>E07073</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>375E07014</text>
        <class>375</class>
        <subclass>E07014</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>710033000</text>
        <class>710</class>
        <subclass>033000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>710052000</text>
        <class>710</class>
        <subclass>052000</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>710053000</text>
        <class>710</class>
        <subclass>053000</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>710057000</text>
        <class>710</class>
        <subclass>057000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/23406</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>23406</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-007/17336</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>7</main-group>
        <subgroup>17336</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/44004</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>44004</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>8</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>8</number-of-drawing-sheets>
      <number-of-figures>8</number-of-figures>
      <image-key data-format="questel">US6185636</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Media server system and method for preventing FIFO buffer underflow during multiple channel startup by pre-loading a decoder buffer prior to issuing a play command</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HAYASHI JUNJI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5363138</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5363138</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>AULD DAVID R</text>
          <document-id>
            <country>US</country>
            <doc-number>5502494</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5502494</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>SCHULMAN MARTIN A</text>
          <document-id>
            <country>US</country>
            <doc-number>5600366</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5600366</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>HENDRICKS JOHN S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5600573</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5600573</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>RYAN LAWRENCE D</text>
          <document-id>
            <country>US</country>
            <doc-number>5708846</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5708846</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>KOULOHERIS JACK LAWRENCE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5915094</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5915094</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>ODAWARA HIROAKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5584041</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5584041</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>AUYEUNG CHEUNG, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5619341</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5619341</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>NAKAMURA YOSHIHIRO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5644787</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5644787</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>"Buffer Management for Video Database Systems," Rotem, et al., IEEE, pp. 439-448.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>"A Multimedia Storage System for On-Demand Playback," Oyang, et al., IEEE, pp. 53-64.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <division>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>67358396</doc-number>
              <kind>A</kind>
              <date>19960701</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5931922</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </division>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Sun Microsystems, Inc.</orgname>
            <address>
              <address-1>Palo Alto, CA, US</address-1>
              <city>Palo Alto</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>SUN MICROSYSTEMS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Hough, James K.</name>
            <address>
              <address-1>Mountain View, CA, US</address-1>
              <city>Mountain View</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Conley, Rose &amp; Tayon, PC</orgname>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Kowert, Robert C.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Lee, Thomas C.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A media server system and method for reducing the probability of data starvation or underflow in a media server system.
      <br/>
      The media server system preferably comprises a video server computer system which stores a plurality of encoded data streams, wherein the computer system is coupled through a SCSI (Small Computer Systems Interface) bus to one or more MPEG decoder blocks.
      <br/>
      The media server system thus utilizes a single control channel for multiple video channels.
      <br/>
      The present invention operates to fill the FIFO buffer of a channel to a higher level during startup, thus reducing the probability of data underflow.
      <br/>
      In one embodiment, the host computer or server begins data transmission prior to sending the "play" function or play command in order to pre-fill or pre-load the buffer.
      <br/>
      In another embodiment where the host server is not configured to pre-load the buffer prior to issuing the play command, the MPEG decoder block disables the FIFO buffer when the play command is received.
      <br/>
      The MPEG decoder block then receives and stores data in the buffer to pre-fill the buffer, and then enables the FIFO to begin transfers.
      <br/>
      The present invention thus pre-loads the FIFO buffer to prevent underflow problems associated with the start-up of multiple data streams.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CONTINUING APPLICATION DATA</heading>
    <p num="1">This application is a division of U.S. Ser. No. 08/673,583 filed Jul. 1, 1996 now U.S. Pat. No. 5,931,922.</p>
    <heading>FIELD OF THE INVENTION</heading>
    <p num="2">The present invention relates to media server and/or video server systems, and more particularly to a media server system comprising a video server coupled through a SCSI bus to one or more MPEG decoder blocks, wherein the system pre-fills data buffers at start-up to prevent buffer underflow.</p>
    <heading>DESCRIPTION OF THE RELATED ART</heading>
    <p num="3">
      Video-on-demand or video delivery systems enable a plurality of subscribers or users to selectively watch movies or other audio/video sequences which are stored on one or more video servers or media servers.
      <br/>
      The video servers are connected through data transfer channels to the plurality of subscribers or users.
      <br/>
      The video servers store a plurality of movies or other audio/video sequences, and each user can select one or more movies from the video servers for viewing.
      <br/>
      Each user includes a television or other viewing device, as well as associated decoding logic, for selecting and viewing desired movies.
      <br/>
      When a user selects a movie, the selected movie is transferred on one of the data transfer channels to the television of the respective user.
    </p>
    <p num="4">
      Full-motion digital video requires a large amount of storage and data transfer bandwidth.
      <br/>
      Thus, video-on-demand systems use various types of video compression algorithms to reduce the amount of necessary storage and data transfer bandwidth.
      <br/>
      Current video-on-demand systems use MPEG or MPEG-2 encoding in order to reduce the required data transfer bandwidth.
      <br/>
      Thus, audiovisual sequences, such as movies or other content, are stored on the media server in an MPEG compressed format, and the audiovisual sequence is decoded and typically converted to analog format for display and/or transmission to a user.
    </p>
    <p num="5">
      One type of media server design comprises a video server computer system which stores a plurality of encoded data streams, wherein this computer system is coupled through a SCSI (Small Computer Systems Interface) bus to one or more MPEG decoder blocks.
      <br/>
      Each of the MPEG decoder blocks are in turn coupled to video encoders and/or codecs (coder/decoders) for producing analog baseband data.
      <br/>
      Respective modulators may also be provided for modulating the data with a carrier frequency to produce band pass signals, such as UHF or VHF signals, or cable TV signals.
    </p>
    <p num="6">
      Media servers which utilize a SCSI bus to communicate to multiple MPEG decode channels utilize a single control channel for multiple video channels.
      <br/>
      The firmware overhead involved with beginning the transfer of video data on one or more channels may lead to data starvation of an existing channel.
      <br/>
      In other words, a buffer which is transferring data to an MPEG channel may run out of data due to the overhead associated with other channels.
      <br/>
      This may result in an undesirable interruption of the play of a multimedia stream.
      <br/>
      Therefore, a system and method is desired to reduce the probability of data starvation or underflow in a media server system.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="7">
      The present invention comprises a media server system and method for reducing the probability of data starvation or underflow in a media server system.
      <br/>
      The media server system preferably comprises a video server computer system which stores a plurality of encoded data streams, wherein the computer system is coupled through a SCSI (Small Computer Systems Interface) bus to one or more MPEG decoder blocks.
      <br/>
      The media server system thus utilizes a single control channel for multiple video channels.
      <br/>
      As discussed above, the firmware overhead involved with starting channels can sometimes lead to data starvation of an existing channel.
      <br/>
      The present invention operates to fill the FIFO buffer of a channel to a higher level only during startup, thus reducing the probability of data underflow.
    </p>
    <p num="8">
      According to the invention, the host computer or server begins data transmission prior to sending the "play" function or play command.
      <br/>
      The number of blocks is calculated based on block size to prevent overflowing the buffer.
      <br/>
      In this embodiment, the MPEG decoder block is configured to not begin emptying the FIFO until the play function is decoded.
      <br/>
      After the pre-determined number of blocks have been transferred or issued, the play function is sent.
      <br/>
      This signals the firmware executing on the MPEG decoder block to enable the FIFO for transfer to the decoder.
      <br/>
      All subsequent transfers proceed normally.
    </p>
    <p num="9">
      In another embodiment where the host server is not configured to pre-load the buffer prior to issuing the play command, the firmware executing on the MPEG decoder block sets a flag to disable the FIFO buffer when the play command is received.
      <br/>
      The MPEG decoder also initiates a predetermined buffer block counter when the play command is received.
      <br/>
      As data blocks are received for the respective channel, the MPEG decoder decrements the block counter.
      <br/>
      The buffer block counter counts a predetermined number of blocks of received data based on worst case block size and buffer capacity.
      <br/>
      When the count expires, the MPEG decoder resets the play flag and enables the FIFO to begin transfers.
      <br/>
      Once the play flag is reset, all subsequent blocks proceed normally.
    </p>
    <p num="10">
      Therefore, the present invention pre-loads the FIFO buffer to prevent underflow problems associated with the start-up of multiple data streams.
      <br/>
      In one embodiment, the host server transfers a calculated number of SCSI blocks and used uses the "play" function or play command to terminate the preload process.
      <br/>
      In a second embodiment, where the host is not configured for the pre-load option, firmware in the target device detects the beginning of a transfer and use a block counter to control the pre-load process prior to execution of the play command.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="11">
      A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings in which:
      <br/>
      FIG. 1 illustrates a media server system according to one embodiment of the present invention;
      <br/>
      FIG. 2 illustrates a media server system according to another embodiment of the invention;
      <br/>
      FIG. 3 illustrates a media server system which includes a plurality of 24 channel MPEG decoder units forming a 96 channel system;
      <br/>
      FIG. 4 is a block diagram illustrating the MPEG decoder box of FIG. 1;
      <br/>
      FIGS. 5 and 6 are flowchart diagrams illustrating operation of the media server computer system and MPEG decoder, respectively, wherein the media server pre-loads the MPEG decoder buffer prior to issuing a Play command;
      <br/>
      FIGS. 7 and 8 are flowchart diagrams illustrating operation of the media server computer system and MPEG decoder, respectively, wherein the media server does not pre-load the buffer prior to issuing a Play command, and the MPEG decoder operates to pre-load received data prior to enabling the buffer.
    </p>
    <p num="12">
      While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail.
      <br/>
      It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary the intention is to cover all modifications equivalents and alternatives solely within the spirit and scope of the present invention, as defined by the appended claims.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="13">
      Referring now to FIG. 1, a diagram illustrating the media server system according to one embodiment of the present invention is shown.
      <br/>
      As shown, the media server system includes a computer system unit 102.
      <br/>
      The computer system unit 102 is preferably the Sun SS-5 or Sun SS-20 computer produced by Sun Microsystems, and is preferably based on the UltraSparc processor.
      <br/>
      The computer system unit 102 may include one or more various types of storage devices including a RAID (redundant array of inexpensive disks) disk array, one or more digital video disks, or other memory or media storage as desired.
      <br/>
      Alternatively, or in addition, the computer system unit 102 may couple to a disk array storage device 104, as shown.
      <br/>
      The computer system 102 may also include a monitor (not shown).
    </p>
    <p num="14">
      The various media storage devices comprised in the computer system unit 102 or coupled to the system unit 102 preferably store compressed data streams.
      <br/>
      In the preferred embodiment, the data streams are MPEG-2 compressed streams.
      <br/>
      However, it is noted that any of various types of data or video compression may be used as desired.
    </p>
    <p num="15">
      The computer system unit 102 couples to one or more MPEG decoder boxes 122 as shown.
      <br/>
      In the embodiment shown, the computer system unit 102 couples to four MPEG decoder boxes 122A-122D.
      <br/>
      Each MPEG decoder box 122 preferably comprises 6 MPEG channels.
      <br/>
      The group of four MPEG decoder boxes 122A-122D collectively comprises a 24 channel decoder box 130.
      <br/>
      As shown, the MPEG decoder boxes 122A-122D are preferably configured in a rack mounted configuration, wherein the plurality of MPEG decoder boxes are mounted one on top of each other.
      <br/>
      The MPEG decoder boxes 122 are preferably connected in a daisy chained manner.
    </p>
    <p num="16">
      The computer system unit 102 preferably couples to a first one of the respective MPEG decoder boxes 122A through the Small Computer Systems Interface (SCSI) bus or cable 112.
      <br/>
      As is well known, the SCSI bus is a peripheral device bus wherein a plurality of devices may be connected to the bus in a daisy chained manner.
      <br/>
      The SCSI bus may be the Fast SCSI bus or the Wide SCSI bus or a Fast/Wide SCSI bus, as is well known in the art.
      <br/>
      As shown, the computer system unit 102 couples to a first MPEG decoder box 122A, and the remaining MPEG decoder boxes are in turn in turn daisy chained together.
      <br/>
      The computer system 102 includes a SCSI host adapter (not shown) which couples through a SCSI cable to the MPEG decoder box 122A.
    </p>
    <p num="17">
      Referring now to FIG. 2, an alternate embodiment of the media server system is shown.
      <br/>
      In the embodiment of FIG. 2, a single MPEG decoder 122 is connected to the media server system unit 102.
      <br/>
      The single MPEG decoder 122 and the media server system unit 102 are preferably physically configured in a rack mounted configuration.
      <br/>
      Although not shown in FIG. 2, the MPEG decoder 122 couples to the media server system unit 102 through a SCSI connection or SCSI cable.
      <br/>
      The media server system unit 102 may in turn couple to a disk array media storage unit 104 or other type of storage unit, preferably through a Fast SCSI bus, or Fast-Wide SCSI bus cable 112A, as shown.
    </p>
    <p num="18">
      Referring now to FIG. 3, a block diagram illustrating a media server system according to another embodiment is shown.
      <br/>
      This embodiment includes four 24 channel MPEG decoder units 130 labeled 130A-130D.
      <br/>
      In FIG. 3, each of the 24 channel MPEG decoder units 130 comprise the four MPEG decoder boxes 122A-122D connected or daisy chained together as shown in FIG. 1.
      <br/>
      In the embodiment of FIG. 3, four 24 channel MPEG decoder units 130 are daisy chained together to produce a 96 channel system.
      <br/>
      Thus, the embodiment of FIG. 3 comprises 16 MPEG decoder boxes 122.
    </p>
    <p num="19">
      As shown in FIG. 3, in this embodiment the media server system unit 102 includes a plurality of output ports, preferably four output ports, which provide Fast/Wide SCSI bus connectivity.
      <br/>
      Each of the SCSI bus connector ports is adapted to couple to a digital input of one of the respective 24 channel MPEG decoder units 130A-130D as shown.
      <br/>
      As shown, the media server system unit 102 also includes a serial output port which couples to an input port of one of the respective MPEG decoder units 130A.
      <br/>
      The respective MPEG decoder unit 130A which receives the serial output from the media server system unit 102 includes an analog output which is provided to a corresponding analog input of a subsequent MPEG decoder unit 130B.
      <br/>
      This respective MPEG decoder unit 130B in turn provides an analog output to an analog input of a subsequent MPEG decoder unit 130C.
      <br/>
      Finally, the MPEG decoder unit 130C provides a corresponding analog output to an analog input of the last MPEG decoder unit 130D.
      <br/>
      Thus, each of the MPEG decoder units 130A-D are daisy chained together through the serial output of the media server system unit 102.
      <br/>
      The last MPEG decoder unit 130D in the daisy chain provides a 96 channel output, i.e., an output signal which comprises up to 96 video streams or channels of video or audiovisual content, including television programming content.
    </p>
    <p num="20">
      The analog output of the MPEG decoder unit 130D may be comprised in various formats.
      <br/>
      In one embodiment, the analog output conforms to the National Television Standards Committee (NTSC) standard for analog video.
      <br/>
      In an alternate embodiment, the analog output corresponds to the European PAL format.
    </p>
    <p num="21">
      As shown in FIG. 3, the first MPEG decoder unit 130A also preferably includes an analog input port for receiving an analog input signal.
      <br/>
      As shown, this analog input signal may comprise a UHF or VHF signal, or a cable TV signal.
    </p>
    <p num="22">FIG. 4--MPEG Decoder Box Block Diagram</p>
    <p num="23">
      Referring now to FIG. 4, a block diagram illustrating one of the MPEG decoder boxes 122 is shown.
      <br/>
      As shown, each MPEG decoder box 122 includes an MPEG decoder board 180.
      <br/>
      The MPEG decoder board 180 includes two expansion slots 226 and 227 for receiving up to two MPEG decoder daughter cards 182.
      <br/>
      The MPEG decoder board 180 includes two MPEG channels, as shown.
      <br/>
      Each MPEG decoder daughter card 182 also includes two MPEG channels.
      <br/>
      Thus, when two MPEG decoder daughter cards 182 are inserted in the respective slots 226 and 227 of the MPEG decoder board 180, the MPEG decoder box 122 comprises 6 MPEG channels.
      <br/>
      The MPEG decoder box 122 also includes a modulator box 184 which is coupled to an output of the MPEG decoder board 180.
      <br/>
      The output of the MPEG decoder board 180 is a baseband signal.
      <br/>
      The modulator box 184 converts the output baseband signal to a passband signal, such as a UHF, VHF or cable TV signal.
    </p>
    <p num="24">
      Each MPEG decoder board 180 includes an input/output (I/O) port 202 for coupling to a SCSI bus.
      <br/>
      As noted above, in the preferred embodiment each MPEG decoder box 122 is adapted for coupling to a Fast/Wide SCSI bus.
      <br/>
      As also noted above, the SCSI bus I/O port is preferably used to couple through a SCSI bus to a respective media server system unit 102.
      <br/>
      The SCSI I/O port 202 couples to a SCSI controller 204.
      <br/>
      In the preferred embodiment, the SCSI controller is the NCR53C720 SCSI Controller produced by National Cash Register (NCR).
      <br/>
      A counter 205 is coupled to the SCSI controller 204.
    </p>
    <p num="25">
      Each MPEG decoder box 122 also includes a serial port input for receiving serial data.
      <br/>
      The respective serial port input 212 couples to a local processor 214.
      <br/>
      In the preferred embodiment, the local processor 214 is the MC68340 processor produced by Motorola Corporation.
    </p>
    <p num="26">
      The SCSI controller 204 and the local processor 214 couple to a system bus interface 222.
      <br/>
      A memory, preferably dynamic random access memory (DRAM) 216, couples to the system bus interface 222.
      <br/>
      The DRAM is preferably 512K * 16.
      <br/>
      A non-volatile memory 218, preferably an EEPROM (electrically erasable programmable ROM), is also coupled to the system bus interface 222.
      <br/>
      The EEPROM 218 stores firmware which controls the operation of the SCSI controller 204 according to the present invention.
      <br/>
      At power on, the firmware stored in the EEPROM 218 is loaded into the DRAM 216, and the firmware is then executed by the SCSI controller 204 from the DRAM 216.
      <br/>
      As discussed below, the firmware directs the SCSI controller 204 to pre-fill or pre-load a buffer in the MPEG decoder board 180 in order to prevent an underflow or starvation situation.
    </p>
    <p num="27">
      The system bus interface 222 couples to a bus 224 as shown.
      <br/>
      The two MPEG decoder daughter card slots 226 and 227 are coupled to the bus 224.
      <br/>
      The bus is preferably the S-bus, but other bus types may be used.
      <br/>
      Two MPEG decoder logic blocks 230 are coupled to the bus 224.
      <br/>
      The MPEG decoder logic blocks 230 are preferably identical, and only one is described below for convenience.
    </p>
    <p num="28">
      As shown, each MPEG decoder logic block 230 includes a first transceiver 232 coupled to the system bus 224.
      <br/>
      A first in first out (FIFO) buffer 234 couples to the transceiver 232.
      <br/>
      Each of the transceiver 232 and FIFO buffer 234 couple to an MPEG-2 decoder block 242.
      <br/>
      A memory block 244, preferably 2M * 16 DRAM, couples to the MPEG-2 decoder block 242.
      <br/>
      The MPEG-2 decoder block 242 is preferably the HDM8211.
    </p>
    <p num="29">
      The FIFO buffer 234 receives and stores data received from the media server 102.
      <br/>
      The FIFO buffer 234 is used to store data prior to being sent to the MPEG decoder block 242.
      <br/>
      According to the present invention, the media server 102 and/or the MPEG decoder box 122 operate to pre-fill or pre-load the buffer 234 to prevent an underflow situation from occurring, as described below.
    </p>
    <p num="30">
      The MPEG-2 decoder block 242 couples to a video encoder 252.
      <br/>
      The video encoder 252 includes analog to digital conversion logic and produces a baseband analog video signal.
      <br/>
      The MPEG-2 decoder block 242 also couples to a coder/decoder (codec) 254, which converts the digital audio portion of the decoded MPEG signal to analog audio signals.
      <br/>
      Each of the video encoder 252 and codec 254 are coupled through a bus to an input/output port 262 of the MPEG decoder board 180.
    </p>
    <p num="31">
      As mentioned above, one or more MPEG-2 decoder daughter cards 182 may be coupled to the system bus 224 for providing two to four additional stream processing channels.
      <br/>
      As shown, each MPEG-2 decoder daughter card 182 comprises two MPEG decoder logic blocks 230, as described above.
    </p>
    <p num="32">
      The analog I/O port 262 of the MPEG decoder board 180 preferably outputs a baseband analog signal comprising a plurality of data streams or channels.
      <br/>
      In the preferred embodiment of the invention, a modulator box 184 is coupled to the I/O outport 262 for converting the baseband analog signal to a passband analog signal.
      <br/>
      As shown, the modulator box 184 comprises a plurality of modulators 284 for each of the respective channels.
      <br/>
      Each of the modulators 284 is coupled to a combiner 286 which combines the modulated systems into a single analog signal, such as a VHF or UHF signal, comprising a plurality of channels.
      <br/>
      The combiner 286 provides an output through a connector 288 which may conform to any of various fornats, including the NTSC format, the PAL format, or the SECAM format.
    </p>
    <p num="33">
      As shown, the modulator box 184 also includes an input for optionally receiving a UHF, VHF or cable TV signal.
      <br/>
      The analog input is provided to the combiner 286 and is provided as a portion of the analog output from the I/O port 288.
    </p>
    <p num="34">FIGS. 5 and 6--Media Server Pre-loads Buffer</p>
    <p num="35">
      Referring now to FIGS. 5 and 6, flowchart diagrams illustrating operation of the present invention according to a first embodiment is shown.
      <br/>
      In this embodiment, the host server or computer system is configured to perform pre-loading according to the present invention in order to prevent data transfer underflow associated with the startup of transfer of multiple data streams.
      <br/>
      FIG. 5 illustrates operation of the media server 102, and FIG. 6 illustrates operation of one of the MPEG decoder boxes 122.
    </p>
    <p num="36">
      Referring now to FIG. 5, in this embodiment the host server 102 first begins a data transmission in step 502.
      <br/>
      It is noted here that the video server 102 begins data transmission of one or more streams prior to sending the "play" command.
      <br/>
      In step 502 the video server 102 transfers a pre-determined number of blocks in order to pre-fill or pre-load the FIFO buffer 234.
      <br/>
      The number of blocks transferred in step 502 is preferably calculated based on block size to prevent overflow of the buffer 234.
    </p>
    <p num="37">
      After the calculated or pre-determined number of blocks have been transferred in step 502, as determined in step 504, in step 506 the media server 102 issues the play command.
      <br/>
      Thus, in this embodiment, the media server 102 only issues the play command after the FIFO buffer 234 has been filled with sufficient data to prevent an underflow or starvation situation from occurring.
      <br/>
      In the preferred embodiment, the media server 102 operates to substantially fill the buffer 234 prior to issuing the play command.
      <br/>
      In the preferred embodiment, the FIFO buffer 234 is substantially filled when the buffer 234 is more than 90% filled with data.
    </p>
    <p num="38">
      Referring now to FIG. 6, a flowchart diagram illustrating operation of an MPEG decoder box 122 according to the first embodiment of the present invention is shown.
      <br/>
      FIG. 6 illustrates operation of the MPEG decoder box 122 according to the media server operation shown in FIG. 5.
      <br/>
      As shown, in step 602 the MPEG decoder box 122 receives and stores data in its FIFO buffer 234.
      <br/>
      In other words, data is received at the input port 202 of the MPEG decoder box 122 and stored in the buffer 234.
      <br/>
      As shown, this operation continues until a play command is received.
    </p>
    <p num="39">
      When a play command is determined to be received in step 604, then in step 606 the MPEG decoder box 122 enables transmission of data from the FIFO buffer 234 to the MPEG decoder logic 242.
      <br/>
      Thus, in this embodiment, the media server computer system 102 operates to pre-load the buffer 234 in the MPEG decoder box 122 prior to issuing a play command.
    </p>
    <p num="40">
      Therefore, according to this embodiment of the invention, the host computer or server begins data transmission prior to sending the play command.
      <br/>
      The number of blocks transferred is calculated based on block size to prevent overflowing the buffer.
      <br/>
      In this embodiment, the MPEG decoder box or block 122 is configured to not begin emptying the FIFO 234 until a play command is decoded.
    </p>
    <p num="41">
      After the pre-determined number of blocks have been transferred or issued in step 502, in step 506 the host server 102 transfers the play command or function.
      <br/>
      This signals the firmware executing on the MPEG decoder block 122 to enable the FIFO 234 to transfer data to the decoder 242.
      <br/>
      In response to receiving the play command, the SCSI controller 204 enables the FIFO 234 to begin data transfers to the MPEG decoder block 242.
      <br/>
      All subsequent transfers proceed normally.
    </p>
    <p num="42">FIGS. 7 and 8--Media Server Does Not Pre-load Buffer</p>
    <p num="43">
      Referring now to FIGS. 7 and 8, flowchart diagrams illustrating operation of the present invention according to a second embodiment is shown.
      <br/>
      In this embodiment, the host server or computer system does not perform pre-loading in order to prevent data transfer underflow.
      <br/>
      Rather, in this embodiment, the MPEG decoder box 122 operates to pre-fill or pre-load its buffer 234 to prevent underflow or starvation associated with the startup of transfer of multiple data streams.
      <br/>
      FIG. 7 illustrates operation of the media server 102, and FIG. 8 illustrates operation of one of the MPEG decoder boxes 122.
    </p>
    <p num="44">
      Referring now to FIG. 7, in step 702 the media server 102 issues the play command.
      <br/>
      In step 704 the media server 102 begins transferring data to a respective MPEG decoder box 122.
      <br/>
      Thus in this embodiment the media server 102 begins by issuing a play command and then begins providing data blocks to the MPEG decoder box 122.
      <br/>
      In other words, in this embodiment the media server 102 is not configured according to the present invention to pre-fill the buffer 234, but rather operates according to the prior art, whereby the play command is issued first followed by the data transfer.
      <br/>
      In this embodiment, the SCSI controller 204 in the MPEG decoder box 122 is programmed according to the invention to pre-fill the buffer 234 prior to enabling operation according to the play command.
    </p>
    <p num="45">
      Referring now to FIG. 8, operation of the MPEG decoder box 122 according to the second embodiment of the present invention is shown.
      <br/>
      The steps in FIG. 8 are preferably executed by the SCSI controller 204 in the MPEG decoder box 122.
      <br/>
      As shown, in step 802 the MPEG decoder box 122 receives a play command from the server 102.
      <br/>
      This play command was generated by the server 102 in step 702 of FIG. 7.
    </p>
    <p num="46">
      In step 804 the MPEG decoder box 122 sets a flag when play is initiated, i.e., in response to the received play command.
      <br/>
      This flag directs the MPEG decoder box 122 to not begin transfers from the FIFO 234.
    </p>
    <p num="47">
      In step 806 the MPEG decoder box 122 sets or enables a predetermined buffer block counter 205.
      <br/>
      Thereafter, each time the MPEG decoder box 122 receives a block of data as determined in step 812, the MPEG decoder box 122 decrements the block counter 205.
      <br/>
      When the block counter 205 expires as determined in step 816, indicating that the predetermined number of blocks have been received, then in step 822 the MPEG decoder resets the play flag and in step 824 enables the FIFO 234 to proceed under normal operations.
      <br/>
      Thus, in step 824 the FIFO 234 begins transferring data to the MPEG decoder 242.
    </p>
    <p num="48">
      FIGS. 7 and 8 thus illustrate a second embodiment where the host server 102 is not configured to pre-load the buffer prior to issuing the "PLAY" command.
      <br/>
      In this embodiment, the firmware executing on the MPEG decoder box or block 122 disables the FIFO buffer 234 when play is initiated.
      <br/>
      The MPEG decoder box 122 also sets a predetermined buffer block counter 205 based on worst case block size and buffer capacity.
      <br/>
      As data blocks are received, the MPEG decoder box 122 decrements the block counter 205 on every received block for that channel.
      <br/>
      When the count expires, the MPEG decoder box 122 resets the play flag and enables the FIFO 234 to begin transfers.
      <br/>
      Once the play flag is reset, all subsequent blocks are transferred normally.
    </p>
    <p num="49">
      Therefore, the present invention comprises a system and method for preventing underflow or data starvation in a media server system.
      <br/>
      The present invention provides a first embodiment where the media server 102 intelligently pre-loads the buffer prior to issuing the play command.
      <br/>
      The present invention also includes a second embodiment where the media server 102 does not pre-load the buffer prior to issuing the play command, but rather the MPEG decoder box 122 operates to intelligently pre-load the buffer prior to acknowledging the play command.
    </p>
    <p num="50">Although the system and method of the present invention has been described in connection with the described embodiments, it is not intended to be limited to the specific form set forth herein, but on the contrary, it is intended to cover such alternatives, modifications, and equivalents, as can be reasonably included within the spirit and scope of the invention as defined by the appended claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>I claim:</claim-text>
      <claim-text>1. A media server system, comprising:</claim-text>
      <claim-text>a computer system including a memory media for storing multimedia data, wherein the computer system is configured to generate multimedia data transfers, wherein the computer system is configured to transfer a plurality of blocks of multimedia data prior to issuing a play command to begin play of said multimedia data, wherein play continues until a user-selected multimedia sequence has been entirely played;</claim-text>
      <claim-text>and one or more decoder boxes coupled to said computer system, wherein each of said one or more decoder boxes is adapted to receive data from said computer system, wherein each of said one or more decoder boxes includes:</claim-text>
      <claim-text>- a plurality of data channels adapted for transmitting data simultaneously for display;</claim-text>
      <claim-text>and - a buffer for each data channel for receiving data from said computer system, wherein said buffer receives and stores said plurality of blocks of multimedia data transferred by said computer system, wherein said buffer is substantially filled when said play command is received to reduce the possibility of the buffer becoming empty during play of said multimedia data.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The media server system of claim 1, wherein said computer system includes a SCSI host adapter for coupling to a SCSI bus, wherein the computer system is configured to generate SCSI bus data transfers; wherein the media server system further comprises a SCSI cable for connecting said computer system to said one or more decoder boxes; wherein said one or more decoder boxes comprise SCSI devices coupled to said SCSI cable.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The media server system of claim 1, wherein said computer system memory media stores MPEG compressed multimedia data; wherein each of said one or more decoder boxes comprises MPEG decoder logic for decoding said MPEG compressed multimedia data.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The media server system of claim 1, wherein said buffer begins transferring data when said play command is received.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The media server system of claim 1, wherein said buffer is a first-in-first-out (FIFO) buffer.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A method for transferring video data in a media server system comprising a video server and at least one decoder box comprising a plurality of channels, wherein the at least one decoder box is coupled to the video server, the method comprising: the server reading multimedia data from a storage media; the server transferring a first plurality of multimedia data to said at least one decoder box; said at least one decoder box receiving said first plurality of multimedia data, wherein said receiving comprises storing said first plurality of multimedia data in a buffer; the server issuing a play command to said at least one decoder box to begin play of said multimedia data, wherein said server issues said play command after transferring said first plurality of multimedia data to said at least one decoder box, wherein said server issues said play command after transferring said first plurality of multimedia data to said at least one decoder box to reduce the possibility of the buffer becoming empty during play of said multimedia data, wherein play continues until a user-selected multimedia sequence has been entirely played;</claim-text>
      <claim-text>and transferring multimedia data from said buffer in said at least one decoder box when said play command is received.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 6, wherein the server transferring a first plurality of multimedia data to said at least one decoder box comprises the server transferring a first plurality of multimedia data calculated to substantially fill said buffer; wherein said buffer is substantially filled when said play command is received to reduce the possibility of the buffer becoming empty during play of said multimedia data.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 6, wherein the video server couples to the at least one decoder box through a SCSI cable; wherein the server transferring a first plurality of multimedia data to said at least one decoder box comprises the server performing a SCSI bus transfer.</claim-text>
    </claim>
  </claims>
</questel-patent-document>