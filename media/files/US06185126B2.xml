<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185126B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185126</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185126</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25192808" extended-family-id="42113096">
      <document-id>
        <country>US</country>
        <doc-number>08805890</doc-number>
        <kind>A</kind>
        <date>19970303</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08805890</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43171159</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>80589097</doc-number>
        <kind>A</kind>
        <date>19970303</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08805890</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G11C   5/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>5</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G11C   7/10        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>7</main-group>
        <subgroup>10</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G11C   7/20        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>7</main-group>
        <subgroup>20</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>H03K  19/177       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>19</main-group>
        <subgroup>177</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>365154000</text>
        <class>365</class>
        <subclass>154000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>365156000</text>
        <class>365</class>
        <subclass>156000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>365189020</text>
        <class>365</class>
        <subclass>189020</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G11C-005/06</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>5</main-group>
        <subgroup>06</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G11C-007/10L</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>007</main-group>
        <subgroup>10L</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G11C-007/20</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>7</main-group>
        <subgroup>20</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>H03K-019/177F</text>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>019</main-group>
        <subgroup>177F</subgroup>
      </classification-ecla>
      <classification-ecla sequence="5">
        <text>H03K-019/177H3</text>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>019</main-group>
        <subgroup>177H3</subgroup>
      </classification-ecla>
      <classification-ecla sequence="6">
        <text>H03K-019/177H6</text>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>019</main-group>
        <subgroup>177H6</subgroup>
      </classification-ecla>
      <classification-ecla sequence="7">
        <text>H03K-019/177J</text>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>019</main-group>
        <subgroup>177J</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-005/06</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>5</main-group>
        <subgroup>06</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-007/1006</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>7</main-group>
        <subgroup>1006</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-007/20</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>7</main-group>
        <subgroup>20</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H03K-019/17736</classification-symbol>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>19</main-group>
        <subgroup>17736</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H03K-019/1776</classification-symbol>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>19</main-group>
        <subgroup>1776</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H03K-019/17772</classification-symbol>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>19</main-group>
        <subgroup>17772</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H03K-019/1778</classification-symbol>
        <section>H</section>
        <class>03</class>
        <subclass>K</subclass>
        <main-group>19</main-group>
        <subgroup>1778</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>15</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>5</number-of-figures>
      <image-key data-format="questel">US6185126</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Self-initializing RAM-based programmable device</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>RANDAZZO TODD A</text>
          <document-id>
            <country>US</country>
            <doc-number>5648930</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5648930</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>PASCUCCI LUIGI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5659498</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5659498</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>BAITINGER U, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>3798621</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US3798621</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>WATERS RONALD S</text>
          <document-id>
            <country>US</country>
            <doc-number>4149268</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4149268</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>BANSAL JAI P</text>
          <document-id>
            <country>US</country>
            <doc-number>4418401</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4418401</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>HSIEH HUNG-CHENG</text>
          <document-id>
            <country>US</country>
            <doc-number>4821233</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4821233</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>HSIEH HUNG-CHENG</text>
          <document-id>
            <country>US</country>
            <doc-number>5148390</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5148390</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>KUMAR NIRAJ, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5230058</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5230058</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Cypress Semiconductor Corporation</orgname>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>CYPRESS SEMICONDUCTOR</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Rodgers, T. J.</name>
            <address>
              <address-1>Woodside, CA, US</address-1>
              <city>Woodside</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Graf, III, W. Alfred</name>
            <address>
              <address-1>Saratoga, CA, US</address-1>
              <city>Saratoga</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Wagner, Murabito &amp; Hao LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Dinh, Son T.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A programmable logic device includes a node and a RAM cell configured to power-up in a preferred state so as to provide a predetermined logic signal to the node upon power-up.
      <br/>
      The node may comprise an interconnection element, for example a transistor.
      <br/>
      Associated with the interconnection element may be two signal lines within the programmable logic device, for example, as part of a programmable interconnect matrix.
      <br/>
      The interconnection element and the two signal lines are associated such that when the interconnection element is in a first state the two signal lines are electrically coupled and when the interconnection element is in a second state the two signal lines are not electrically coupled.
      <br/>
      The predetermined logic signal from the RAM cell selects one of the first and second states.
      <br/>
      The RAM cell may include two PMOS transistors, each having an associated threshold voltage, wherein the threshold voltage of one of the PMOS transistors is lower than the threshold voltage of the other PMOS transistor.
      <br/>
      The RAM cell may be included in a look-up table such that the node is an output of the look-up table.
      <br/>
      Alternatively, the programmable logic device may further include a multiplexer wherein the RAM cell is coupled to the data path input of the multiplexer through the node.
      <br/>
      In other embodiments, the RAM cell may act as a select cell for the multiplexer.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The present invention relates to programmable logic devices and, more particularly, to programmable logic devices employing volatile programmable cells for use in configuring desired logic functions.</p>
    <heading>BACKGROUND</heading>
    <p num="2">
      Programmable logic devices (PLDs) are popular general purpose logic devices.
      <br/>
      Traditional PLDs generally include a number of logic elements (e.g., in the form of logic cells or a logic array) and a number of input/output (I/O) macrocells.
      <br/>
      A routing interconnect is used to transport electrical signals from input macrocells to selected logic elements.
      <br/>
      The logic elements typically provide a number of logical AND and logical OR functions which are combined to create a number of output signals, called sum of product expressions.
      <br/>
      The signals generated by the logic elements are then passed to macrocells which typically include register elements.
      <br/>
      The macrocells are coupled to output pads for transferring the logic signals out of the PLD and also may also be coupled to signal paths which feed back the logic signals to further logic elements to create even more complex logic signals.
    </p>
    <p num="3">
      These programmable logic devices are capable of implementing various logic functions by selectively coupling the electrical signals within the device to desired logic elements (e.g., AND gates, OR gates, etc.).
      <br/>
      Selected logic paths for the electrical signals can be implemented by programming appropriate elements in the routing interconnect.
      <br/>
      Typically, these programmable elements are non-volatile, that is, once programmed the elements retain their respective programmed states even when power is removed from the device.
    </p>
    <p num="4">
      Some families of programmable logic devices such as PLDs, complex PLDs (so-called CPLDs) and field programmable gate arrays (FPGAs) have replaced traditional programmable elements (e.g., fuses, antifuses, EPROM cells, EEPROM cells and flash cells) with volatile, i.e., RAM (random access memory), elements.
      <br/>
      So-called RAM-based FPGAs (and other RAM-based programmable logic devices) implement logic gates and/or programmable interconnect points with volatile RAM cells which lose their programmed (or stored) state when power is turned off.
      <br/>
      As a result, RAM-based FPGAs must be programmed after power-up with the appropriate stored states for each RAM cell to configure the desired logic functions.
      <br/>
      These stored states are typically loaded via a serial interface from a non-volatile storage source such as a companion EPROM or EEPROM device which maintains its stored contents when the power supply is removed.
      <br/>
      Alternatively, RAM-based FPGAs may be configured by loading the stored states for the desired logic function from a magnetic disc source via a microcontroller or by another means.
    </p>
    <p num="5">
      Regardless of the method used to program the RAM cells of the FPGA, there is a delay after power-up before the logic can be utilized by other elements in the system in which the device operates.
      <br/>
      Consequently, RAM-based FPGAs cannot be used to implement those portions of a system which control initialization upon power-up.
      <br/>
      Further, the non-volatile storage devices used to store the configuration program for such RAM-based FPGAs require additional system overhead (including space on a printed circuit board in those systems so designed).
    </p>
    <p num="6">
      Accordingly, what is needed is a means for setting the power-up state of some or all of the storage elements in such a RAM-based FPGA or other programmable device to ensure that the proper stored state will be available immediately upon power up.
      <br/>
      In addition, it is also desirable to eliminate the need for a separate non-volatile storage device for programming such RAM-based programmable devices.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="7">In one embodiment, the present invention provides a programmable logic device which includes a node and a RAM cell configured to power-up in a preferred state so as to provide a predetermined logic signal to the node upon power-up.</p>
    <p num="8">
      The node may comprise an interconnection element, for example a transistor.
      <br/>
      Associated with the interconnection element may be two signal lines within the programmable logic device, for example, as part of a programmable interconnect matrix.
      <br/>
      The interconnection element and the two signal lines are associated such that when the interconnection element is in a first state the two signal lines are electrically coupled and when the interconnection element is in a second state the two signal lines are not electrically coupled.
      <br/>
      The predetermined logic signal from the RAM cell selects one of the first and second states.
    </p>
    <p num="9">
      In another embodiment, the RAM cell may include two PMOS transistors, each having an associated threshold voltage, wherein the threshold voltage of one of the PMOS transistors is lower than the threshold voltage of the other PMOS transistor.
      <br/>
      The RAM cell may be included in a look-up table such that the node is an output of the look-up table.
    </p>
    <p num="10">In yet another embodiment, the programmable logic device may further include a multiplexer wherein the RAM cell is coupled to the multiplexer through the node.</p>
    <p num="11">In a further embodiment, the present invention provides a method of programming a programmable logic device by applying power to the device and powering up a RAM cell in a preferred state so as to provide a predetermined logic signal to a node within the device.</p>
    <p num="12">These and other features and advantages of the present invention will be apparent to those skilled in the art upon review of the detailed description below and the figures referenced therein.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="13">
      The features and advantages of the present invention are illustrated by way of example in the accompanying drawings which are in no way intended to limit the scope of the present invention to the particular embodiments shown.
      <br/>
      FIG. 1 illustrates a field programmable gate array (FPGA) configured in accordance with the present invention.
      <br/>
      FIG. 2 illustrates a random access memory (RAM) cell configured to power-up in a preferred state according to the present invention.
      <br/>
      FIG. 3 illustrates look-up table functionality in an FPGA utilizing RAM cells configured to power-up in one or more preferred states in accordance with the present invention.
      <br/>
      FIG. 4 illustrates one implementation of a two input look-up table for use in an FPGA and having RAM cells configured to power-up in one or more preferred states in accordance with the present invention.
      <br/>
      FIG. 5 illustrates a RAM cell used as a select cell for a multiplexer according to the present invention.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="14">
      Described herein is a programmable logic device which includes a RAM cell configured to power-up in a preferred state so as to provide a predetermined logic signal to a node upon power-up.
      <br/>
      The RAM cell may include two PMOS transistors, each having an associated threshold voltage, wherein the threshold voltage of one of the PMOS transistors is lower than the threshold voltage of the other PMOS transistor.
    </p>
    <p num="15">
      In one embodiment, the RAM cell may be coupled to an interconnection element, for example a transistor.
      <br/>
      Associated with the interconnection element may be two signal lines within the programmable logic device, for example, as part of a programmable interconnect matrix.
      <br/>
      The interconnection element and the two signal lines are associated such that when the interconnection element is in a first state the two signal lines are electrically coupled and when the interconnection element is in a second state the two signal lines are not electrically coupled.
      <br/>
      The predetermined logic signal from the RAM cell selects one of the first and second states.
    </p>
    <p num="16">
      In another embodiment, the RAM cell may be included in a look-up table such that the node is an output of the look-up table.
      <br/>
      Alternatively, the programmable logic device may further include a multiplexer wherein the RAM cell is coupled to the multiplexer through the node.
    </p>
    <p num="17">
      Although described with reference to an FPGA architecture, those skilled in the art will recognize that the present invention is equally applicable for use in PLDs, CPLDs, ASICs or other programmable devices.
      <br/>
      Accordingly, the embodiments described below should be regarded as illustrative only.
    </p>
    <p num="18">
      FIG. 1 illustrates a portion of a field programmable gate array (FPGA) configured in accordance with the present invention.
      <br/>
      FPGA 10 includes a number of logic cells 12a-12e, a programmable interconnect matrix 14, register elements 16a-16e and multiplexers 18a-18e.
      <br/>
      Logic signals within the FPGA 10 may be routed from an output of one logic cell, e.g., logic cell 12a, to the input of a subsequent logic cell, e.g., logic cell 12b, through the programmable interconnect matrix 14.
      <br/>
      The logic cells 12a-12e may be configured to provide various desired logic functions such as AND operations, OR operations, exclusive OR operations, etc.
    </p>
    <p num="19">
      Logic cells 12a-12e within FPGA 10 may receive and operate on one or more logic signals provided from programmable interconnect matrix 14.
      <br/>
      As illustrated, each logic cell 12a-12e has a number of input paths from programmable interconnect matrix 14.
      <br/>
      The interconnections of the inputs of the logic cells 12a-12e with other signal lines within programmable interconnect matrix 14 occur at interconnection points 20 where programmable elements are located.
      <br/>
      The programmable elements are programmed so as to electrically couple the respective signal lines within programmable interconnect matrix to provide desired input signals to each logic cell 12a-12e.
      <br/>
      While some traditional FPGAs utilize non-volatile programmable elements (e.g., fuses, antifuses, flash cells, etc.) at these interconnection points 20, FPGA 10 may utilize random access memory (RAM) cells at some or all of these locations.
      <br/>
      Hence, FPGA 10 is referred to as a RAM-based FPGA.
    </p>
    <p num="20">
      Logic cells 12a-12e may perform one or more logical operations on their respective input signals and provide output signals to programmable interconnect matrix 14 and/or register elements 16a-16e.
      <br/>
      Register elements 16a-16e capture data present on their respective input lines in response to clock signals provided on clock lines 22a-22e.
      <br/>
      As shown, the clock lines 22a-22e may themselves be coupled to other signal lines within programmable interconnect matrix 14.
      <br/>
      Alternatively, some or all of the clock lines 22a-22e may be dedicated clock signal paths.
    </p>
    <p num="21">
      In addition to receiving inputs from logic cells 12a-12e, register elements 16a-16e may receive signals directly from programmable interconnect matrix 14.
      <br/>
      Multiplexers 18a-18e, in response to appropriate control signals, route the desired input signals from either logic cells 12a-12e or programmable interconnect matrix 14 to the register elements 16a-16e.
    </p>
    <p num="22">
      As indicated, output signals from one logic cell 12a-12e may be one of several input signals to a subsequent logic cell 12a-12e which may then perform further logical operations to produce a further output signal.
      <br/>
      Ultimately, an output signal may be provided to an output pad 24.
    </p>
    <p num="23">
      FIG. 2 illustrates a RAM cell 30 which may be used at an interconnection point 20 within programmable interconnect matrix 14.
      <br/>
      For one embodiment, RAM cell 30 is a static random access memory (SRAM) cell implemented using metal oxide semiconductor (MOS) technology.
      <br/>
      FPGA 10 may include an array of such cells.
    </p>
    <p num="24">
      RAM cell 30 acts as a latch device for storing a single bit of data and is formed by a pair of cross-coupled CMOS inverters defined by NMOS transistors 32 and 34 and PMOS transistors 36 and 38.
      <br/>
      In an alternative embodiment, resistive load devices may be used instead of the PMOS transistors 36 and 38 of FIG. 2.
    </p>
    <p num="25">
      RAM cell 30 includes a first port 40 and a second port 42.
      <br/>
      The state of RAM cell 30 (i.e., programmed or not programmed) is determined by the respective voltages of the ports 40 and 42.
      <br/>
      That is, in one state, the first port 40 will be a logic HIGH while the second port 42 will be a logic LOW.
      <br/>
      Alternatively, when the RAM cell 30 is in a second state the first port 40 will be a logic LOW while the second port 42 will be a logic HIGH.
      <br/>
      Both the first port 40 and the second port 42 utilize the same logic basis for storage of these voltage levels in order to ensure that the first port 40 and the second port 42 can share the RAM cell 30.
      <br/>
      In other words, the first and second ports 40 and 42 must both use either a positive or a negative logic system.
      <br/>
      Hereafter, it will be assumed that RAM cell 30 uses a positive logic system with respect to the first port 40.
      <br/>
      This means that a logic HIGH level or "1" is represented by a voltage greater in magnitude than the voltage representing a logic LOW level or "0." For purposes of this description, the voltage level at the second port 42 will indicate the state of the RAM cell 30.
    </p>
    <p num="26">
      RAM cell 30 is used to control the interconnection of signal lines 44 and 46 within programmable interconnect matrix 14.
      <br/>
      Signal line 44 and signal line 46 are connected by an n-channel enhancement mode pass gate transistor 48 which when turned on electrically couples signal lines 44 and 46.
      <br/>
      Transistor 48 will he turned on when the RAM cell 30 is in the programmed state, i.e., when the RAM cell 30 stores a logic "1".
      <br/>
      This occurs when the voltage at the second port 42 is a logic HIGH and the voltage at the first port 40 is a logic LOW.
      <br/>
      When a logic "0" is stored in the RAM cell 30, the pass gate transistor 48 is turned off, thereby electrically disconnecting the two signal lines 44 and 46.
      <br/>
      In this way, Ram cells such as RAM cell 30 can be used to control the interconnection of some or all of the signal lines within programmable interconnect matrix 14.
    </p>
    <p num="27">
      Typical RAM-based FPGAs utilize similar schemes to control the interconnection of signal lines in a programmable interconnect matrix.
      <br/>
      However, because RAM cells are volatile storage devices, the state of the RAM cell (and hence the interconnection of the signal lines) is lost whenever power is removed from the device.
      <br/>
      Upon power-up, individual RAM cells within the programmable interconnect matrix of such FPGAs must be programmed by reading a configuration state from an associated non-volatile storage device as described above.
      <br/>
      This programming step is required because when a typical RAM cell is first powered-up, the cell will settle in one of its two possible states (i.e., programmed or not programmed).
      <br/>
      The state in which the cell will settled is determined by the symmetry of the cell and any voltage transients which may cause charge imbalances during power-up.
      <br/>
      Because the power-up process is uncertain, each cell must be programmed so that the desired interconnections are achieved.
    </p>
    <p num="28">
      Unlike a typical RAM cell, however, RAM cell 30 is configured to always power-up in a preferred state.
      <br/>
      That is, upon power-up, the voltage at the second port 42 will always settle into a predetermined logic state (HIGH or LOW).
      <br/>
      Thus, the state of the RAM cell 30 upon power-up is known and, hence, the interconnection (or lack thereof) of signal lines 44 and 46 is predictable.
      <br/>
      No separate programming step will be required, thus eliminating the need for a separate non-volatile storage device to retain a configuration state program.
    </p>
    <p num="29">
      RAM cell 30 can be configured to always power-up in a preferred state by adjusting the characteristics of the p-channel enhancement mode load transistors 36 and 38.
      <br/>
      The threshold voltage of load transistor 38 can be lowered by selectively implanting Boron in the channel region of load transistor 38 during fabrication.
      <br/>
      This may be accomplished using traditional fabrication methods such as masking an appropriate channel region of a semiconductor substrate by patterning a photoresist layer and implanting the Boron dopant either in a high temperature gas environment or using an ion beam accelerator.
    </p>
    <p num="30">
      When a RAM cell 30 in which only the threshold voltage of load transistor 38 has been so modified is powered-up, load transistor 38 will turn on (i.e., conduct) at a lower threshold voltage (relative to Vcc) than will load transistor 36.
      <br/>
      This, in turn, will cause the second port 42 to rise in voltage level faster than the first port 40 during the power-up sequence.
      <br/>
      As second port 42 rises faster relative to first port 41, n-channel enhancement mode transistor 32 will turn on, pulling the first port 40 lower and thereby increasing the drive on the gate of load transistor 38 while simultaneously turning off n-channel transistor 34.
      <br/>
      The net result is a RAM cell 30 which will predictably power-up in a "programmed" state, i.e., where the voltage at the second port 42 is a logic "1" while the voltage at the first port 40 is a logic "0".
      <br/>
      As a result, pass gate transistor 48 will turn on, electrically coupling signal lines 44 and 46.
    </p>
    <p num="31">
      Alternatively, if signal lines 44 and 46 are not to be electrically coupled upon power-up, RAM cell 30 is constructed such that it will power-up in the "unprogrammed" state.
      <br/>
      That is, RAM cell 30 is constructed so that upon power-up, the first port 40 will be at a logic "1" while the second port 42 is at a logic "0". this will ensure that pass gate transistor 48 remains off, preventing an electrical coupling of signal lines 44 and 46.
      <br/>
      RAM cell 30 is so constructed by selectively implanting Boron into the channel region of load transistor 36 during fabrication so that load transistor 36 will have a lower threshold voltage than load transistor 38.
      <br/>
      This will insure that during the power-up sequence, load transistor 36 will turn on first, forcing the first port 40 to a logic HIGH while the second port 42 is pulled to a logic LOW.
    </p>
    <p num="32">
      By selectively fabricating the RAM cells of the programmable interconnect matrix 14 in accordance with the above description, FPGA 10 can be constructed such that upon power-up all of the desired interconnections within programmable interconnect matrix 14 are achieved.
      <br/>
      This eliminates the need for a separate non-volatile storage device and a separate programming operation following power up.
      <br/>
      If desired, selected portions of a RAM-based FPGA 10 can be constructed to power-up in preferred states so as to perform a specific function in a predictable manner with predictable performance (in terms of routing interconnect timings).
      <br/>
      Other portions of the RAM-based FPGA can be left as unconfigured for later use by a user.
      <br/>
      These unconfigured portions would need to be programmed using a configuration program as described above.
    </p>
    <p num="33">
      So long as RAM cell 30 is fabricated to allow later reprogramming after powering-up in its preferred state, the state of the cell (programmed or not programmed) may be altered at a later time.
      <br/>
      The criteria for providing sufficient Boron doping to ensure that RAM cell 30 powers-up in a preferred state while still retaining load transistor threshold voltages that allow later reprogramming may be determined empirically by varying the doping levels in accordance with techniques known in the art and testing the RAM cells for writability.
    </p>
    <p num="34">
      Provided RAM cell 30 can be reprogrammed after power-up, select transistor 50 may be used to access RAM cell 30 to provide a configuration input.
      <br/>
      Select transistor 50 is activated by a read/write cell select signal on select line 52.
      <br/>
      When select transistor 52 is activated, a configuration state input is applied to the first node 40.
      <br/>
      If the configuration input is HIGH, a logic "0" will be written to the RAM cell 30.
      <br/>
      Conversely, if the configuration input is LOW, a logic "1" will be written to the RAM cell 30.
      <br/>
      Thus, by providing select transistor 50, means for altering the state of RAM cell 30 after power-up are achieved.
      <br/>
      Such means may find application, for example, in situations where circuit designers wish to test new logic configurations within FPGA 10.
    </p>
    <p num="35">
      In addition to finding application as programmable interconnection points within a programmable interconnect matrix, RAM cells may be used to effect logic functions within a RAM-based FPGA.
      <br/>
      For example, as shown in FIG. 3, RAM cells such as RAM cell 30 may be implemented as a "look-up table" to replace hardware logic gates.
      <br/>
      To illustrate, suppose look-up table 60 is comprised of RAM cells 62a-62p and decoder 68.
      <br/>
      Each RAM cell 62a-62p resembles RAM cell 30, that is each RAM cell 62a-62p is configured to power up in a preferred state, "0" or "1".
      <br/>
      In this example, suppose RAM cells 62a-62o are configured to power-up in a "0" state while RAM cell 62p is configured to power up in a "1" state.
    </p>
    <p num="36">
      After power-up, if input lines 64a-64d are used to address the look-up table 60, the output signal at output node 66 may reflect a desired logic function, in this case a logical AND operation.
      <br/>
      To illustrate, suppose all inputs 64a-64d are HIGH.
      <br/>
      These logic HIGH inputs are decoded by decoder 68 to select an address line corresponding to a logic "1111" pattern.
      <br/>
      This corresponds to RAM cell 62p of look-up table 60.
      <br/>
      Because RAM cell 62p powered-up in a "1" state, output node 66 is driven to a logic "1".
      <br/>
      That is, look-up table 60 has emulated a 4-input AND gate and because all four inputs 64a-64d were HIGH, a logic "1" is presented at output node 66.
      <br/>
      If any of the inputs 62a-62d are LOW, a RAM cell other than cell 62p will be addressed and, consequently, a logic "0" will be presented at output node 66.
      <br/>
      Other logic functions can be implemented using appropriate look-up tables where each table element is a RAM cell configured to power-up in a preferred state.
    </p>
    <p num="37">
      The look-up table application can be used to implement a variety of logic functions.
      <br/>
      FIG. 4 further illustrates the case of a two input look-up table.
      <br/>
      The look-up table is formed using a two input multiplexer 76 and four RAM cells 70a-70d.
      <br/>
      The RAM cells are each coupled to data path inputs of mux 76.
      <br/>
      The implementation shown in FIG. 4 effectively removes the individual RAM cells 70a-70d from the read path (e.g., in contrast to schemes such as that illustrated in FIG. 3 in which an input address is decoded prior to presentation to the RAM cells which must then be accessed).
      <br/>
      Thus, overall throughput speed is enhanced over those look-up table implementation which position RAM cells in the read path.
      <br/>
      Nevertheless, implementations which do provide RAM cells in the read path may be utilized as alternatives to the scheme shown in FIG. 4.
    </p>
    <p num="38">
      Any function "F" of the two logic inputs "X" and "Y" can be implemented by selectively programming the appropriate states in the four cells of the look-up table.
      <br/>
      To set a predetermined logic function on power-up, the appropriate load transistor would be selectively implanted in each RAM cell 70a-70d of the look-up table.
      <br/>
      For example, to set the look-up table to implement X OR Y on power-up, transistor 72 would be implanted in RAM cells 70a, 70c and 70d while transistor 74 would be selectively implanted in RAM cell 70b.
      <br/>
      Other logic functions which could be implemented are set forth below in Table 1 which indicates the required storage patterns for achieving various logic function outputs.
      <br/>
      It should be appreciated that for each added logic input, the number of required RAM cells 70 and the required width of the multiplexer 76 doubles.
      <br/>
      Nevertheless, by selectively implanting both interconnect RAM cells and look-up table RAM cells in the logic cells of RAM-based FPGA 10, any portion of the FPGA 10 could be preprogrammed to always power-up in an appropriate state to implement any desired logic macrofunction.
    </p>
    <p num="39">
      --      TABLE 1
      <br/>
      --      Logic Function Cell 70a Cell 70b    Cell 70c Cell 70d
      <br/>
      --      "F" Storage Storage     Storage Storage
      <br/>
      --      X+L  AND Y+L   1       0           0       0
      <br/>
      --      X AND Y+L      0       0           1       0
      <br/>
      --      X+L  AND Y     0       1           0       0
      <br/>
      --      X AND Y        0       0           0       1
      <br/>
      --      X+L  OR Y+L    1       1           1       0
      <br/>
      --      X OR Y+L       1       0           1       1
      <br/>
      --      X+L  OR Y      1       1           0       1
      <br/>
      --      X OR Y         0       1           1       1
      <br/>
      --      X+L  EXOR Y+L  0       1           1       0
      <br/>
      --      X EXOR Y+L     1       0           0       1
      <br/>
      --      X+L  EXOR Y    1       0           0       1
      <br/>
      --      X EXOR Y       0       1           1       0
    </p>
    <p num="40">
      RAM cells such as RAM cell 30 also find application as select cells for multiplexers within FPGA 10.
      <br/>
      This is illustrated in FIG. 5.
      <br/>
      Multiplexer 80 receives two input lines 82a and 82b.
      <br/>
      Multiplexer 80 can be configured to power-up so that a preferred input is selected by using select cell 84.
      <br/>
      Select cell 84 is a RAM cell configured to power up in a preferred state as described above.
      <br/>
      If select cell 84 is configured to power up in a logic "0" state, multiplexer 80 will select input 82a.
      <br/>
      Conversely, if select cell 84 is configured to power up in a logic "1" state, multiplexer 80 will select input 82b. in this way, multiplexer 70 can be configured to select an appropriate input upon power-up.
    </p>
    <p num="41">
      The techniques described above can be used to predetermine the logic configuration of any portion of a RAM-based FPGA to perform a specific function in a predictable manner with predictable performance while leaving a portion of the device as RAM-based reconfigurable logic which can be modified at will.
      <br/>
      This capability allows implementation of pre-designed, pretested macrofunctions with guaranteed performance within RAM-based FPGAs without the need for additional user intervention.
      <br/>
      Because only a single additional mask and a single additional implant step is all that is required during fabrication of the FPGA to implement the predetermined self-initializing logic function, a wide range of such "hard wired" macrofunctions are capable of being implemented in the same RAM-based FPGA.
    </p>
    <p num="42">
      A further advantage provided by the present invention is that development and characterization of such macrofunctions can be done in the programmable device with the assurance that when the self-initializing version is fabricated it will have the same performance as a volatile RAM implemented macro that may have been utilized for initial testing.
      <br/>
      Because the logic in the predetermined self-initializing device is implemented in the same RAM cells in the same location as the RAM cells in the volatile version of the device, the performance achieved in the volatile device will be duplicated in the predetermined configuration version of the device.
      <br/>
      This means that designers, who would otherwise have to account for timing mismatches which might result when a volatile FPGA macrofunction is transferred to an ASIC implementation, no longer need to be concerned with such difficulties.
      <br/>
      The preprogrammed FPGA using RAM cells such as RAM cell 30 described above assures that the same timing characteristics as were present in the nonvolatile device will be achieved in the preprogrammed version.
    </p>
    <p num="43">
      Thus, means for implementing embedded macrofunctions in portions of a RAM-based FPGA (or in the entire FPGA) have been described.
      <br/>
      Use of these means allows the logic so implemented to be available immediately upon power-up such that it can be used in the booting logic of a larger system.
      <br/>
      This contrasts with the case for a system employing other RAM-based FPGAs having RAM cells which must first be programmed to configure the logic after system power-up.
      <br/>
      Unlike such systems, the present invention eliminates the need for external EPROM, EEPROM or other nonvolatile storage media to be provided to store a configuration program for the FPGA.
      <br/>
      Although discussed with reference to specific illustrated embodiments, it should be appreciated that the present invention is applicable to wide numbers of programmable devices, including PLDs, CPLDs, FPGAs, and ASICs.
      <br/>
      Accordingly, the above discussed embodiments and accompanying diagrams should be regarded as illustrative only and the present invention should in no way be limited thereby.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A programmable logic device, comprising:</claim-text>
      <claim-text>a node;</claim-text>
      <claim-text>and a look-up table having a random access memory (RAM) cell configured to power-up in a preferred state so as to provide a predetermined logic signal representing a logic function to said node upon power-up.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A programmable logic device as in claim 1 wherein said node comprises an interconnection element having two signal lines associated therewith such that when said interconnection element is in a first state said signal lines are electrically coupled and when said interconnection element is in a second state said signal lines are not electrically coupled, said predetermined logic signal for selecting one of said first and second states.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A programmable logic device as in claim 2 wherein said interconnection element is a transistor.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A programmable logic device as in claim 3 wherein said signal lines comprise a programmable interconnect matrix.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A programmable logic device as in claim 1 wherein said RAM cell comprises a first PMOS transistor having an associated first threshold voltage and a second PMOS transistor having an associated second threshold voltage lower than said first threshold voltage.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A programmable logic device as in claim 5 further comprising a multiplexer, said RAM cell being coupled to a data path input of said multiplexer through said node.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A programmable logic device as in claim 5 wherein said first and second PMOS transistors are load transistors of said RAM cell.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A programmable logic device as in claim 5 further comprising a multiplexer, wherein said RAM cell is coupled to said mulitplexer through said node and is configured to select a data path input of said multiplexer.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A programmable logic device as in claim 1, further comprising other RAM cells configured to power up according to cell symmetry and voltage transients.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A programmable logic device as in claim 9 wherein said RAM cell configured to power up in a preferred state includes selectively dopped load devices.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A method of powering-up a programmable logic device in a configuration state, comprising the steps of: applying power to a random access memory (RAM) cell within said programmable logic device; generating an output signal at an output of said RAM cell, said output signal having a predetermined logic state according to a preferred doping of load devices within said RAM cell, said preferred doping being accomplished during manufacture of said RAM cell to allow said RAM cell to power up in a preferred state corresponding to said predetermined logic state;</claim-text>
      <claim-text>and implementing a logic function within said programmable device in accordance with said output signal.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A method of powering-up a programmable logic device as in claim 11 wherein said logic function is implemented using look-up table logic which includes said RAM cell.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A method of programming a programmable logic device, comprising the steps of: applying power to said programmable logic device; powering up a random access memory (RAM) cell within said programmable logic device in a preferred state so as to provide a predetermined logic signal upon said step of applying power;</claim-text>
      <claim-text>and selecting a data path input at a multiplexer within said programmable logic device according to said logic signal.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A programmable logic device, comprising: a random access memory (RAM) cell configured to power-up in a preferred state so as to provide a predetermined logic signal upon power-up, said RAM cell comprising a first PMOS transistor having an associated first threshold voltage and a second PMOS transistor having an associated second threshold voltage lower than said first threshold voltage;</claim-text>
      <claim-text>and an interconnection element coupled to said RAM cell having two signal lines associated therewith such that when said interconnection element is in a first state said signal lines are electrically coupled and when said interconnection element is in a second state said signal lines are not electrically coupled, said predetermined logic signal for selecting one of said first and second states.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A method of programming a programmable logic device, comprising the steps of: applying power to said programmable logic device;</claim-text>
      <claim-text>and powering up a random access memory (RAM) cell within said programmable logic device in a preferred state so as to provide a predetermined logic signal to program an interconnection of signal lines within said programmable logic device.</claim-text>
    </claim>
  </claims>
</questel-patent-document>