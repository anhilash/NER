<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182195B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182195</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182195</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="23728495" extended-family-id="42004227">
      <document-id>
        <country>US</country>
        <doc-number>09123473</doc-number>
        <kind>A</kind>
        <date>19980728</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09123473</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43017321</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>12347398</doc-number>
        <kind>A</kind>
        <date>19980728</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09123473</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>43545995</doc-number>
        <kind>A</kind>
        <date>19950505</date>
        <priority-linkage-type>3</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1995US-08435459</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  12/08        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>08</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  12/10        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>10</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>711141000</text>
        <class>711</class>
        <subclass>141000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>711003000</text>
        <class>711</class>
        <subclass>003000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>711118000</text>
        <class>711</class>
        <subclass>118000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>711203000</text>
        <class>711</class>
        <subclass>203000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>711210000</text>
        <class>711</class>
        <subclass>210000</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>711E12025</text>
        <class>711</class>
        <subclass>E12025</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>711E12061</text>
        <class>711</class>
        <subclass>E12061</subclass>
      </further-classification>
      <further-classification sequence="7">
        <text>711E12066</text>
        <class>711</class>
        <subclass>E12066</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-012/08B4N</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>012</main-group>
        <subgroup>08B4N</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-012/10L</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>012</main-group>
        <subgroup>10L</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G06F-012/10M</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>012</main-group>
        <subgroup>10M</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/0813</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>0813</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/1027</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>1027</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/1072</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>1072</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-2212/682</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>2212</main-group>
        <subgroup>682</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06F-212/682</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>22</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>7</number-of-figures>
      <image-key data-format="questel">US6182195</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">System and method for maintaining coherency of virtual-to-physical memory translations in a multiprocessor computer</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>TANAKA TETSUYA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5487162</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5487162</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="2">
          <text>MCLAGAN ANGUS</text>
          <document-id>
            <country>US</country>
            <doc-number>4141067</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4141067</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>FUKUNAGA YASUSHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4481573</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4481573</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>FRANK STEVEN J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4622631</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4622631</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>SAGER DAVID J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4825412</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4825412</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>STEWART DARRYL J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4914577</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4914577</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>RAMANUJAN RAJ K, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5214770</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5214770</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>MORIWAKI ATSUSHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5226144</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5226144</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>SHIMIZU SHIGENORI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5228136</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5228136</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>LIU LISHING</text>
          <document-id>
            <country>US</country>
            <doc-number>5282274</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5282274</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>DONALDSON DARREL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5297269</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5297269</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>KELLY EDMUND, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5361340</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5361340</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>CHANG JUNG-HERNG, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5398325</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5398325</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>DENISCO JOHN A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5406504</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5406504</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>FORSYTH MARK, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5412787</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5412787</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>MOORE CHARLES R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5437017</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5437017</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="17">
          <text>CHANG CHIH-WEI D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5455834</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5455834</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="18">
          <text>DELANO ERIC R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5493660</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5493660</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="19">
          <text>BRIDGES K MONROE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5515522</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5515522</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="20">
          <text>FRINK CRAIG R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5530933</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5530933</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="21">
          <text>BORRILL PAUL L</text>
          <document-id>
            <country>US</country>
            <doc-number>5588131</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5588131</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>Patricia J. Teller, "Translation Lookaside Buffer Consistency", Jun. 1990, pp. 26-36.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Steven K. Reinhardt, "The Wisconsin Wind Tunnel: Virtual Prototyping of Parallel Computers", May 1993, pp. 48-60.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <division>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>43545995</doc-number>
              <kind>A</kind>
              <date>19950505</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5787496</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </division>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Silicon Graphics, Inc.</orgname>
            <address>
              <address-1>Mountain View, CA, US</address-1>
              <city>Mountain View</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>SILICON GRAPHICS INTERNATIONAL</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Laudon, James P.</name>
            <address>
              <address-1>Menlo Park, CA, US</address-1>
              <city>Menlo Park</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Lenoski, Daniel E.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Sterne, Kessler, Goldstein &amp; Fox P.L.L.C.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Thai, Tuan V.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A multiprocessor computer system and method for maintaining coherency between virtual-to-physical memory translations of multiple requestors in the system.
      <br/>
      A poison bit is associated with a memory block in the system.
      <br/>
      The poison bit is set to indicate that a virtual-to-physical memory translation for the memory block is stale.
      <br/>
      An exception is generated in response to an access by one of the requestors to the memory block if the poison bit is set, thereby indicating to the requestor that the virtual-to-physical memory translation entry for the memory block is stale.
      <br/>
      The virtual-to-physical memory translation for the memory block is then updated with a virtual memory translation corresponding to a new physical location for the memory block.
      <br/>
      In an embodiment having a cache-based multiprocessor system, the method further comprises the step of invalidating all cached copies of the memory block.
      <br/>
      In this case, the invalidating step and the setting step must be performed as an atomic operation.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application is a divisional application of, and claims priority to, U.S. patent application Ser.
      <br/>
      No. 08/435,459, filed May 5, 1995, now allowed, now U.S. Pat. No. 5,787,496
    </p>
    <p num="2">Additional, the following are related, commonly owned applications:</p>
    <p num="3">
      Directory-Based Coherence Protocol Allowing Efficient Dropping of Clean-Exclusive Data, U.S. patent application Ser.
      <br/>
      No. 08/435,460; now U.S. Pat. No. 5,680,527;
      <br/>
      System and Method for Multiprocessor Partitioning to Support High Availability, U.S. patent application Ser.
      <br/>
      No. 08/435,462; now U.S. Pat. No. 5,991,895; and
      <br/>
      Cache Coherency Using Flexible Directory Bit Vectors, U.S. patent application Ser.
      <br/>
      No. 08/435,463; now U.S. Pat. No. 5,634,110;
    </p>
    <p num="4">The disclosures of the above applications are incorporated herein by reference.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="5">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="6">The present invention relates generally to a system and method for cache coherency, and more particularly to a system and method for maintaining coherency of virtual-to-physical memory translations in a multiprocessor computer.</p>
    <p num="7">2. Related Art</p>
    <p num="8">
      Maintaining the coherence of virtual translation caches (such as translations stored in translation-lookaside buffers (TLBs)) is usually handled in software rather than hardware in most distributed, shared-memory multiprocessors.
      <br/>
      This is based on a number of reasons.
    </p>
    <p num="9">
      Translation updates (i.e., TLB coherence actions) are much less frequent than updates to memory locations (normal memory coherence actions).
      <br/>
      These translation updates are often associated with paging, which also involves a relatively expensive read or write, or both to a disk.
      <br/>
      This disk access dominates the cost of maintaining coherence.
      <br/>
      Most memory pages are private to individual processes and processors so TLB updates can often be done by simply purging a translation entry in a single processor's TLB.
      <br/>
      In many architectures (including MIPS), translation table updates, which comprise loads and purges, are handled in software anyway, so it is more natural to handle TLB coherence in software as well.
    </p>
    <p num="10">It should also be noted that much of the cost of software TLB coherence in a multiprocessor is the need to synchronize (i.e., interrupt) all the processors who need to have entries in their TLB invalidated or updated.</p>
    <p num="11">
      In a large-scale non-uniform memory architecture (NUMA) many of these conditions do not hold.
      <br/>
      A NUMA computer system typically includes a plurality of processing nodes each having one or more processors, a cache connected to each processor, and a portion of main memory that can be accessed by any of the processors.
      <br/>
      The main memory is physically distributed among the processing nodes.
      <br/>
      In other words, each processing node includes a portion of the main memory.
      <br/>
      At any time, data elements stored in a particular main memory portion can also be stored in any of the caches existing in any of the processing nodes.
    </p>
    <p num="12">
      Most importantly, the NUMA architecture implies that translation may change due to migrating data from the memory of one node to a node that contains the processor referencing the data more frequently.
      <br/>
      This can cause the rate of translation updates to increase over traditional systems.
      <br/>
      Further, the non-TLB update costs decrease since the data moves only from one memory to another, not to disk.
      <br/>
      Thus, in a NUMA system it is desirable to have hardware acceleration of TLB coherence.
      <br/>
      Furthermore, since most processors (including all the MIPS processors) do not support TLB coherence in hardware, it is desirable for TLB coherence to be managed outside of the processor, and to remove the need for inter-processor synchronization in the updating of the TLBs.
    </p>
    <p num="13">
      There are a number of schemes that have been described in the literature for maintaining TLB coherence. (See Teller et al., "Translation-Lookaside Buffer Consistency", IEEE Computer, June 1990).
      <br/>
      Teller's TLB validation algorithm maintains a generation count in memory, which is incremented when a page table translation update is made.
      <br/>
      Along with each memory access, the processor includes its TLB copy of the generation count and memory compares these.
      <br/>
      If the two match, then the translation is valid and the access is validated.
      <br/>
      If the generation counts do not match, then the processor is notified to invalidate the appropriate TLB entry.
      <br/>
      An advantage of Teller's scheme is that it does not have problems reclaiming stale pages.
      <br/>
      When reused, the new translation starts with the next generation count for that physical page (frame is just another name for a page-sized portion of main memory).
      <br/>
      It does have a problem of needing to purge translations when a given generation counter overflows.
    </p>
    <p num="14">
      A bus error scheme is used in the Wisconsin Wind Tunnel (WWT) (Reinhardt et al., "The Wisconsin Wind Tunnel: Virtual Prototyping of Parallel Computers", ACM SIGMETRICS Conference Proceedings, May 1993) for triggering memory and coherence operations in software.
      <br/>
      In the WWT design, the error correction code (ECC) for a given memory word is corrupted to cause a bus error, which subsequently invokes software that maintains the illusion of coherent shared-memory on top of a message-passing system (i.e., a CM-5 computer: "Connection Machine CM-5: Technical Summary", Thinking Machines Corporation, November 1993).
      <br/>
      This scheme, however, is for cache coherency and does not address the problem of maintaining virtual-to-physical memory translations.
    </p>
    <p num="15">
      The problem not addressed by art is how to minimize costly synchronization of the processors.
      <br/>
      Thus, what is required is an improved mechanism to handle virtual-to-physical memory translations for maintaining coherency in a distributed computer system that results in minimal if any system performance degradation, and that requires minimal if any additional storage overhead.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="16">The present invention is directed to a system and method for maintaining coherency between virtual-to-physical memory translations of multiple requesters in a shared-memory multiprocessor system.</p>
    <p num="17">
      A poison bit is associated with each memory block in the system.
      <br/>
      The poison bit is set when a virtual-to-physical memory translation for a memory block is stale.
    </p>
    <p num="18">
      A memory controller, or the like, associated with that memory block, generates an exception in response to an access by one of the requesters to the memory block if the poison bit is set.
      <br/>
      In a preferred embodiment, a requestor comprises a processor, input/output device, or the like.
      <br/>
      The exception indicates that the virtual-to-physical memory translation entry for the memory block is stale.
      <br/>
      In response to the exception, the requester updates its virtual-to-physical memory translation for the memory block with the virtual memory translation corresponding to a new physical location for the memory block.
    </p>
    <p num="19">
      The system may be a cached system or a non-cached system.
      <br/>
      An example of a cached system would include a cache in each processor.
      <br/>
      In this case, all cached copies of the memory block are invalidated when the poison bit is set.
      <br/>
      Preferably, the system supports a "poisoned read" operation that returns the current copy of a block while automatically setting the block's poison bit.
      <br/>
      The contents of the block can then be written to the new physical location.
      <br/>
      If the system supports caches, then the poison read would additionally invalidate all cached copies of the block at its old location.
    </p>
    <p num="20">
      The requestors can be a plurality of processors each with a cache memory and a translation-lookaside buffer to store virtual-to-physical memory translations.
      <br/>
      Alternatively, the requestors could also be input/output devices, or the like.
    </p>
    <p num="21">
      An advantage of the present invention over Teller is reduced memory overhead.
      <br/>
      According to the invention, only one state encoding is required (i.e., poison state), versus Teller's generation count and the need to send generation counts to memory.
    </p>
    <p num="22">
      An advantage of the present invention over the WWT approach is that WWT does not address TLB consistency at all.
      <br/>
      Their scheme is used to trigger cache coherency operations.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="23">
      The present invention will be described with reference to the accompanying drawings, wherein:
      <br/>
      FIG. 1 is a block diagram of a distributed computer system according to a preferred embodiment of the present invention.
      <br/>
      FIG. 2 is a schematic diagram of a portion of main memory space and corresponding directory information according to the present invention.
      <br/>
      FIGS. 3A, 3B, 3C and 3D show an example of migrating a page and updating the associated TLB entries without global synchronization according to the present invention.
      <br/>
      FIG. 4 is a flow diagram representing the operation of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="24">
      The preferred embodiment of the invention is discussed in detail below.
      <br/>
      While specific steps, configurations and arrangements are discussed, it should be understood that this is done for illustrative purposes only.
      <br/>
      A person skilled in the relevant art will recognize that other steps, configurations and arrangements can be used without departing from the spirit and scope of the invention.
    </p>
    <p num="25">
      The preferred embodiment of the invention is now described with reference to the figures where like reference numbers indicate identical or functionally similar elements.
      <br/>
      Also in the figures, the left most digit of each reference number corresponds to the figure in which the reference number is first used.
    </p>
    <p num="26">
      A block is a portion of memory that can range from a single storage location to an entire physical memory frame.
      <br/>
      A memory frame can store a page of data, which is referenced by a virtual addresses.
      <br/>
      The entire collection of virtual-to-physical address translations is called a page table.
      <br/>
      A translation-lookaside buffer, or TLB, is a cache of virtual-to-physical address translations and is associated with the processors and I/O devices that access memory using virtual addresses.
      <br/>
      A cache line is typically equated to the size of a memory block.
    </p>
    <p num="27">
      In this detailed description the term TLB is used in place of the phrase "virtual-to-physical memory translation." However, TLBs are not a requirement of the present invention per se, but are only an example of an implementation to organize virtual-to-physical memory translations.
      <br/>
      In the preferred embodiment, each computing node includes a TLB for managing virtual-to-physical memory translations.
    </p>
    <p num="28">
      In accordance with the present invention, associated with each memory block is a "poison" bit that indicates whether a given block is accessible.
      <br/>
      If the processor attempts to access a block when the poison bit for that block is set (e.g., has a value of logical "1"), then it receives a bus error and memory access status register, associated with the processor indicates that the bus error was due to accessing a block that was poisoned.
      <br/>
      Bus error exception software, upon reading the status register value, updates its virtual-to-physical memory translation with the new translation for the given page.
    </p>
    <p num="29">
      The term "poison bit" will be used throughout this application by way of example.
      <br/>
      An important aspect of the invention is that the system maintains some notion of a poison state.
      <br/>
      This state could be implemented as a dedicated bit or kept part of a block's state, as would be apparent to a person skilled in the relevant art.
    </p>
    <p num="30">
      The overall effect according to the present invention is that virtual-to-physical memory translation coherence is maintained without the very costly synchronization of the processors, that may have cached a translation for this page.
      <br/>
      Translation coherence is maintained in a lazy fashion, in which each processor updates its translation independently, and only if an access using a stale translation is attempted.
    </p>
    <p num="31">
      An exemplary block diagram of a distributed computer system 102 according to a preferred embodiment of the present invention is shown in FIG. 1.
      <br/>
      The distributed computer system 102 is preferably a distributed, nonuniform memory access (NUMA) computer system.
      <br/>
      The computer system 102 includes a plurality of processing nodes 104 (preferably 512 processing nodes 104), which are physically distinct and physically separated from one another.
      <br/>
      The processing nodes 104 communicate with each other over a communication network 120, representing a well-known data communication means, such as a bus, multistage interconnection network, local area network, wide area network, etc., or any combination of these.
    </p>
    <p num="32">
      System 102 includes one or more nodes.
      <br/>
      Each node contains a memory controller and network interface and optionally includes:
    </p>
    <p num="33">
      1) two processors with their associated caches,
      <br/>
      2) a portion of main memory, and
      <br/>
      3) I/O devices.
    </p>
    <p num="34">In the preferred embodiment all three are included, but the invention is not limited to this embodiment.</p>
    <p num="35">
      The portions of main memory 114 in all of the processing nodes 104 collectively represent the main memory of the computer system 102.
      <br/>
      Any processor 108 in any processing node 104 can access data stored in the portion of main memory 114 contained in any other processing node 104.
      <br/>
      Access to data contained in the portion of main memory 114 of any particular processing node 104 is controlled by the memory controller and network interface 112 contained in that same processing node 104, but is limited by the partitioning scheme disclosed in commonly-owned, copending U.S. patent application Ser.
      <br/>
      No. 1452.0630000115-4-193.00), titled System and Method for Multiprocessor Partitioning to Support High Availability.
    </p>
    <p num="36">
      At any time, data elements stored in any main memory portion 114 can also be stored in any of the caches 110 existing in the processing nodes 104.
      <br/>
      Requests for data are made by requesters, such as a processor 108, I/0 device 122, or the like.
      <br/>
      Each processing node 104 includes a directory-based cache coherency mechanism (not shown) to maintain the coherency of data stored in its main memory portion 114.
      <br/>
      The cache coherency mechanism preferably forms part of the memory controller and network interface 112 in the processing node 104.
      <br/>
      Similarly, partitioning, according to the present invention, is also managed by the memory controller and network interface 112.
    </p>
    <p num="37">
      A preferred embodiment of the directory-based protocol implemented by the memory controller and network interface 112 is described in commonly-owned, copending U.S. patent application Ser.
      <br/>
      Nos. 1452.0710000/15-4-204.00), titled Cache Coherency Using Flexible Directory Bit Vectors, and 1452.0620000/15-4-192.00), titled Directory-Based Coherence Protocol Allowing Efficient Dropping of Clean-Exclusive Data.
    </p>
    <p num="38">
      FIG. 2 shows a portion of the main memory space 202, separated into pages 204.
      <br/>
      Each main memory portion 114 stores N number of pages that are divided into memory blocks.
      <br/>
      According to the preferred embodiment of the present invention, a memory block is the size of a cache line for each block, which stores the caching state of the block, and pointers to the processors who are caching this block.
      <br/>
      A memory directory 206 has a corresponding multifield entry 208 for each block.
      <br/>
      A first bit field 210 points to the node (i.e., location) caching the corresponding block and the state (i.e., poison or not poison) of that block in a second bit field 212.
      <br/>
      If the poison bit is set (e.g., has a value of logical "1"), the corresponding virtual-to-physical memory translation is stale, and when it is not set, the translation is presumed valid.
      <br/>
      Further block state information to indicate whether the memory block is locked for atomic operation, so that the corresponding block can not be accessed.
      <br/>
      The lock on updating a page table entry in memory, for example, is a logical construct which is carried out either by a software algorithm or a hardware lock operation on a normal memory location.
    </p>
    <p num="39">
      An example of how the poison bit is used for virtual-to-physical translations will be described with reference to FIGS. 3A-3D. These figures' operational/block diagrams show three nodes 106 (labeled Proc. 0, Proc. 1, and Proc. 2), three corresponding main memory portions 114, and an interconnection network 120.
      <br/>
      A TLB entry is shown by the designation "tlb:".
      <br/>
      In FIG. 3A, all processors' TLBs translate virtual address "Vx" to physical page P0.
      <br/>
      P0 is also cached by each processor in FIG. 3A. The value of P0 is AA55.
      <br/>
      The directory entries at P1 and P3 of the memories associated with Proc. 1 and Proc. 2, respectively, are shown as "don't care" since their value at this stage is not relevant to the example.
    </p>
    <p num="40">
      In FIG. 3B, Proc. 0 executes a copy of P0 to location P1, which set the poison bit for P0 to a logical "1", and location P0 is purged from the caches of all three processors.
      <br/>
      After the move is complete, Proc. 0 also updates the page table and its TLB entry so that Vx points to P1.
    </p>
    <p num="41">The setting of the poison state while reading the current value of the location should be an atomic operation, unless the process setting the poison state can read the location after it has been poisoned.</p>
    <p num="42">
      If Proc. 1 and Proc. 2 use their stale TLB translation, they must first go to memory since the move itself invalidated their cache copies of P0.
      <br/>
      They receive a bus error from memory and an indication that the bus error was caused by a poison access, access to P0.
      <br/>
      This causes Proc. 1 and Proc. 2 to update their TLB translation for Vx (asynchronously to one another), as shown in FIG. 3C.
    </p>
    <p num="43">
      Finally, when it can be guaranteed that there are no longer any stale TLB entries for P0, the P0 frame can be reused and its poison bit reset (e.g., to 0), as shown in FIG. 3D. Conventional page re-use algorithms can be used as would be apparent to a person skilled in the relevant art.
      <br/>
      A flow diagram summarizing the steps described above in connection with FIGS. 3A-D is shown in FIG. 4.
      <br/>
      Step 404, however, includes both reading the page and copying it to the new location.
      <br/>
      Updating of stale translations in done asynchronously on a per-processor basis as attempts are made to access the poison state.
      <br/>
      This is therefore called a "lazy" TLB coherence scheme.
      <br/>
      Essentially, requestors individually determine that their translations are stale when they asynchronously access the page and get bus errors due to the poison state.
    </p>
    <p num="44">
      While this basic scheme would be sufficient to build a lazy TLB coherence scheme, there are a number of extensions to improve performance and deal with the caching of data.
      <br/>
      The first issue is that if cached copies of the page are not purged before the memory block is poisoned, it is possible for a processor to continue referencing the page from its cache without ever accessing the poison state stored in main memory.
      <br/>
      To solve this problem, the inventors have added an operation that forces the current value of a cache line back to main memory, invalidates any cached copies of the block, and sets the poison bit.
      <br/>
      Theoretically, this operation could be issued by the processor, but in a preferred embodiment of the present invention, this operation is supported by the block transfer controller, which is simultaneously copying the block to a new node.
      <br/>
      The block transfer controller functions as a DMA controller that is specialized for doing memory to memory copy and fill operations.
    </p>
    <p num="45">
      Thus, once the copy is completed and page tables updated, others can immediately start using the block without any global TLB coherence operations.
      <br/>
      Subsequently, any processor with a stale TLB translation will access the poison state at the old memory location and update their TLBs before using the stale data.
      <br/>
      Note that it is also safe to be referencing the old page even when the copying is going on, but this does imply that the flush and set poison operation must interact with other potential coherence operations.
    </p>
    <p num="46">
      Another issue with fully utilizing the poison (bit) state is that the system must ensure that all old translations of a page are purged before the poison bits for a page are reset.
      <br/>
      Since entire TLBs are flushed on a regular basis anyhow (e.g., due to reuse of process identifiers in the TLB), this is guaranteed by simply time-stamping these flushes, and guaranteeing that such a flush had happened on all processors that might have a stale TLB translation before reclaiming the poisoned page.
      <br/>
      Other software, firmware, or hardware mechanisms can be envisioned that would amortize any global synchronization required with such reclaiming over multiple pages.
    </p>
    <p num="47">
      Thus, an advantage of the poison bit is that overhead in the memory is reduced (one bit compared with n-bit binary number), and there is no need to modify the processor to maintain and transmit the generation count.
      <br/>
      As with Teller, the WWT does not address the issue of forcing all potentially cached copies of the block back to memory, nor does it support any ties between the poison state and doing block copies.
    </p>
    <p num="48">
      As stated before, given the non-uniform access time of a DSM (distributed shared memory) system, it becomes desirable to migrate memory close to the processors with which it is being used.
      <br/>
      Since, in the preferred embodiment, this amounts to a 16 KB memory to memory move, and such moves can occur in 10-30  MU sec, the overhead of maintaining TLB coherence can dominate the costs of such a migration (traditional TLB coherence can cost 80-100  MU sec).
      <br/>
      A mechanism to maintain TLB coherence, such as the poison state, is critical in keeping the costs of such migration down.
    </p>
    <p num="49">
      While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example, and not limitation.
      <br/>
      It will be apparent to persons skilled in the relevant art that various changes in form and detail can be made therein without departing from the spirit and scope of the invention.
      <br/>
      For example, the poison bit scheme could be used in a system that does not employ cache coherence.
      <br/>
      The only difference would be that there would be no need to purge cached copies when setting the poison bit.
      <br/>
      Thus, the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.
      <br/>
      All cited patent documents and publications in the above description are incorporated herein by reference.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A multiprocessor computer system supporting memory page migration, comprising:</claim-text>
      <claim-text>a plurality of nodes each having</claim-text>
      <claim-text>- (a) at least one processor, - (b) a cache memory associated with the processor, - (c) a portion of memory that can be accessed by multiple requestors located within any of the plurality of nodes, wherein said portion of memory is organized in pages comprising memory blocks, wherein each of said memory blocks has an associated poison state;</claim-text>
      <claim-text>and - (d) a memory controller that maintains coherency between virtual-to-physical translations of said multiple requestors in the system, wherein said controller</claim-text>
      <claim-text>-  sets a first poison state for a first one of said memory blocks when a virtual-to-physical memory translation for said first one of said memory blocks is stale, and -  generates an exception in response to an access by one of said multiple requesters to said first one of said memory blocks if said first poison state is set, thereby indicating that said virtual-to-physical memory translation for said first one of said memory blocks is stale, - wherein another one of said multiple requesters ascertains that said virtual-to-physical memory translation for said first one of said memory blocks is stale if said another one of said multiple requestors attempts to access said first one of said memory blocks while said first poison state is set.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The multiprocessor computer system according to claim 1, wherein each node further comprises a translation-lookaside buffer (TLB) for caching virtual-to-physical memory translations.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The multiprocessor computer system according to claim 1, further comprising means for invalidating all cached copies of said first one of said memory blocks.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The multiprocessor computer system according to claim 3, wherein said invalidating and said setting are performed as an atomic operation.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The multiprocessor computer system according to claim 1, further comprising means for copying said first one of said memory blocks to a new physical location.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The multiprocessor computer system according to claim 5, further comprising means for setting a lock bit in a memory directory to lock said virtual-to-physical memory translation during said copying.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The multiprocessor computer system according to claim 1, wherein said multiple requesters include each of said plurality of node's at least one processor.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The multiprocessor computer system according to claim 1, wherein said multiple requestors include input/output devices.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The multiprocessor computer system according to claim 1, further comprising logic that sets a first poison bit in a memory directory to indicate that said first poison state is set.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The multiprocessor computer system according to claim 1, further comprising a memory directory having a first poison bit field, wherein said first poison bit field is used to indicate whether said first poison state is set.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The multiprocessor computer system according to claim 1, further comprising a block transfer controller to invalidate all cached copies of said first one of said memory blocks.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The multiprocessor computer system according to claim 1, further comprising a block transfer controller for copying said one of said memory blocks to a new physical location.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The multiprocessor computer system according to claim 12, further comprising a memory directory having a lock bit field, wherein said lock bit field is used to lock said virtual-to-physical memory translation during said copying.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. In a multiprocessor computer system supporting memory page migration and including a plurality of nodes each having at least one processor, a cache memory associated with the processor, and a portion of memory that can be accessed by multiple requesters located within any of the plurality of nodes, wherein said portion of memory is organized in pages comprising memory blocks, wherein each of the memory blocks has an associated poison state, a method for maintaining coherency between virtual-to-physical translations of multiple requestors in the system, comprising the steps of: setting a first poison state for a first one of the memory blocks when a virtual-to-physical memory translation for said first one of the memory blocks is stale;</claim-text>
      <claim-text>and generating an exception in response to an access by one of the requesters to said first one of the memory blocks if said first poison state is set, thereby indicating that the virtual-to-physical memory translation for said first one of the memory blocks is stale, wherein another one of said multiple requestors ascertains that said virtual-to-physical memory translation for said first one of said memory blocks is stale if said another one of said multiple requestors attempts to access said first one of said memory blocks while said first poison state is set.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method according to claim 14, wherein each node further comprises a translation-lookaside buffer (TLB) for caching virtual-to-physical memory translations.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method according to claim 14, further comprising the step of invalidating all cached copies of said stale memory block.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method according to claim 16, wherein said setting and said invalidating steps are performed as an atomic operation.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method according to claim 14, further comprising the step of copying said first one of the memory blocks to a new physical memory location.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method according to claim 18, further comprising the step of setting a lock bit in a memory directory to lock the virtual-to-physical memory translation during said copying step.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method according to claim 14, wherein said access by one of the requestors in said generating step, is performed by one of the plurality of node's at least one processor.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The method according to claim 14, wherein said access by one of the requestors in said generating step, is performed by an input/output device.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The multiprocessor computer system according to claim 14, further comprising the step of setting a first poison bit in a memory directory to indicate that said first poison state is set.</claim-text>
    </claim>
  </claims>
</questel-patent-document>