<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181795B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181795</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181795</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="21861431" extended-family-id="42108477">
      <document-id>
        <country>US</country>
        <doc-number>09031793</doc-number>
        <kind>A</kind>
        <date>19980227</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09031793</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43164936</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>3179398</doc-number>
        <kind>A</kind>
        <date>19980227</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09031793</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L   9/08        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>9</main-group>
        <subgroup>08</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>380280000</text>
        <class>380</class>
        <subclass>280000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>713153000</text>
        <class>713</class>
        <subclass>153000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>713171000</text>
        <class>713</class>
        <subclass>171000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04L-009/08</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>9</main-group>
        <subgroup>08</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-009/0819</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>9</main-group>
        <subgroup>0819</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20140210</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>6</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>7</number-of-drawing-sheets>
      <number-of-figures>7</number-of-figures>
      <image-key data-format="questel">US6181795</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Portable cryptographic key</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>ANEZAKI AKIHIRO</text>
          <document-id>
            <country>US</country>
            <doc-number>5263137</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5263137</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>ANEZAKI AKIHIRO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5418963</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5418963</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>ANEZAKI AKIHIRO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5649227</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5649227</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SUGITA KIYOSHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5778360</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5778360</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>JOHNSON DONALD BYRON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5796830</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5796830</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>JOHNSON DONALD BYRON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5815573</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5815573</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>ADUSUMILLI PANDURANGA RAO</text>
          <document-id>
            <country>US</country>
            <doc-number>5870749</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5870749</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Telecommunication Standardization Sector of ITU, X509 Information Technology-Open Systems Interconnection-the Directory: Authentication Framework, Nov. 1993, Section 8.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/047,499</doc-number>
          <date>19970523</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Chandersekaran, Sekar</name>
            <address>
              <address-1>Potomac, MD, US</address-1>
              <city>Potomac</city>
              <state>MD</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Vasudevan, Narayanan</name>
            <address>
              <address-1>Gaithersburg, MD, US</address-1>
              <city>Gaithersburg</city>
              <state>MD</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Malik, Sohail</name>
            <address>
              <address-1>Gaithersburg, MD, US</address-1>
              <city>Gaithersburg</city>
              <state>MD</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Muresan, Michael</name>
            <address>
              <address-1>Gaithersburg, MD, US</address-1>
              <city>Gaithersburg</city>
              <state>MD</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Morgan &amp; Finnegan, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Swann, Tod R</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method, system, and computer program are disclosed to transport an encrypted key across multiple, diverse systems which provides the relevant and necessary information to guarantee a successful decryption of the key.
      <br/>
      The method prepares an ASN.1 encoding file at the sender which contains the key.
      <br/>
      The receiver performs the method to decode the ASN.1 encoded file.
      <br/>
      In this manner, only the data and the contents of the portable key need to be sent to guarantee successful decryption at the receiver.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">This invention relates to a cryptographic key management system.</p>
    <p num="3">2. Description of the Related Art</p>
    <p num="4">
      Copending U.S. patent application of D. B. Johnson et al., Ser. No. 08/629,815 (U.S. Pat. No. 5,815,573), filed Apr. 10, 1996, entitled "Cryptographic Key Recovery System" ("Johnson et al. I"), assigned to the International Business Machines Corporation, is incorporated herein by reference.
      <br/>
      This cited patent application describes a key recovery system using multiple key recovery agents.
    </p>
    <p num="5">
      Copending application of D. B. Johnson et al., Ser. No. 08/681,679 (U.S. Pat. No. 5,796,830), filed Jul. 29, 1996, entitled "Interoperable Cryptographic Key Recovery System" ("Johnson et al.
      <br/>
      II"), assigned to the International Business Machines Corporation, is incorporated herein by reference.
      <br/>
      This cited patent application describes another key recovery system.
    </p>
    <p num="6">
      Copending provisional application of Sekar Chandersekaran and Sarbari Gupta, Ser.
      <br/>
      No. 60/047,499, filed May 23, 1997, and the copending regular patent application derived therefrom, Ser.
      <br/>
      No. 08/971,204, filed Nov. 14, 1997, entitled "FRAMEWORK-BASED".
      <br/>
      CRYPTOGRAPHIC KEY RECOVERY SYSTEM", assigned to the International Business Machines Corporation, is incorporated herein by reference.
    </p>
    <heading>BACKGROUND</heading>
    <p num="7">
      In recent times, cryptography has come into widespread use in meeting multiple security needs, such as confidentiality, integrity, authentication and non-repudiation.
      <br/>
      When data is encrypted using a particular cryptographic algorithm, data is fed into a cryptographic engine along with key material and encryption parameters.
      <br/>
      When decryption occurs, a similar process must occur and the two keys must match (they must be identical in the case of symmetric encryption and be mathematically related in the case of asymmetric encryption).
    </p>
    <p num="8">
      Currently, when a key has to be transported across multiple systems and/or over a network connection, there exists no standard technique to guarantee that the relevant and necessary information is transmitted to guarantee a successful decryption.
      <br/>
      Application in distributed environments, in particular, have to make assumptions about the way that encryption was done.
      <br/>
      They also have to make assumptions about the format of key data that they receive.
      <br/>
      We define a technique by which we encode all the appropriate information into a "portable key" so that only the data and the contents of the portable key are needed to guarantee successful decryption using the appropriate cryptographic engine.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">
      The invention is a method, system, and computer program to transport an encrypted key across multiple, diverse systems which provides the relevant and necessary information to guarantee a successful decryption of the key.
      <br/>
      The method prepares an ASN.1 encoding file at the sender which contains the key.
      <br/>
      The method begins by creating the ASN.1 format for portable key information.
      <br/>
      The ASN.1 compiler is run, feeding the platform-independent ASN.1 file as input, and generating platform-specific output files.
      <br/>
      Then platform-specific data values are created representing the portable key information based on the platform-specific data structure definitions just generated.
      <br/>
      Then, the platform-specific ASN.1 encoding functions are used to create the ASN.1 encoded protocol data unit (PDU) corresponding to the portable key information.
      <br/>
      The ASN.1 encoded protocol data unit (PDU) is then sent to the receiver node.
    </p>
    <p num="10">
      At the time of decryption, the receiver performs the method to decode the ASN.1 encoded file.
      <br/>
      The method begins by creating the ASN.1 format for portable key information.
      <br/>
      The ASN.1 compiler is run, by feeding the platform-independent ASN.1 file as input, and generating platform specific output files.
      <br/>
      Then platform-specific data values are created representing the portable key information based on the platform-specific data structure definitions just generated.
      <br/>
      Then, the platform-specific ASN.1 decoding functions are used to decode the ASN.1 encoded protocol data unit (PDU) to obtain the platform-specific key information.
      <br/>
      The platform-specific key information is then used at the receiving node for normal cryptographic operations.
      <br/>
      In this manner, only the data and the contents of the portable key are needed to guarantee successful decryption.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="11">
      FIG. 1A is a network diagram showing a sender and receiver nodes using the invention.
      <br/>
      FIG. 1B illustrates the overall processing at the sender and receiver nodes.
      <br/>
      FIG. 2 illustrates the format of the ASN.1 encoding file
      <br/>
      FIG. 3A illustrates the encoding file for a symmetric key
      <br/>
      FIG. 3B illustrates the encoding file for an asymmetric key
      <br/>
      FIG. 4 illustrates the method to prepare the ASN.1 encoding file at the sender.
      <br/>
      FIG. 5 illustrates the method to decode the ASN.1 encoding file at the receiver.
    </p>
    <heading>DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="12">The International Standards Organization (ISO), the International Electrotechnical Commission (IEC) and the International Telecommunications Union--Telecommunications Sector (ITU-T) (formerly known as the International Telegraph and Telephone Consultative Committee (CCITT)) have established Abstract Syntax Notation One (ASN.1) and its encoding rules as a standard for describing and encoding messages.</p>
    <p num="13">
      ASN.1 is a formal language for abstractly describing data to be exchanged between distributed computer systems.
      <br/>
      ASN.1 frees protocol designers to describe the layout of messages exchanged between application programs running in typically dissimilar hardware and software environments.
      <br/>
      The term abstract is used because ASN.1 doesn't describe the bits and bytes details of how messages are laid out while in transit between two machines; rather, it describes the message layout at a higher, more abstract level.
      <br/>
      Enclosing rules are sets of rules used to transform data specified in the ASN.1 language into a standard format that can be decoded by any system that has a decoder based on the same set of rules.
    </p>
    <p num="14">Relevant Citations</p>
    <p num="15">CCITT, Recommendations X.680, "Information Technology--Abstract Syntax Notation One (ASN.1)--Specification of Basic Notation, "Consultation Committee, International Telephone and Telegraph, International Telecommunications Union, Geneva, 1994.</p>
    <p num="16">CCITT, Recommendations X.690, "Information Technology--ASN.1 Encoding Rules--Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)" Consultation Committee, International Telephone and Telegraph, International Telecommunications Union, Geneva, 1994.</p>
    <p num="17">CCITT, Recommendations X.691, "Information Technology--ASN.1 Encoding Rules--Packed Encoding Rules (PER)" Consultation Committee, International Telephone and Telegraph, International Telecommunications Union, Geneva, 1994.</p>
    <p num="18">
      The invention disclosed herein defines an ASN.1 encoding file that can represent all keys and all possible parameters using unique object identifiers.
      <br/>
      FIG. 1A is a network diagram showing a sender and receiver nodes using the invention.
      <br/>
      A sender application in the sender node generates a key with a generate key function in the sender system's proprietary key format and passes it to the portable key encoder which outputs a portable key.
      <br/>
      Associated with the sender application at the sender node is an IBM Keyworks framework and an IBM Keyworks Cryptographic Service Provider, as is described in the above referenced copending patent application entitled "FRAMEWORK-BASED CRYPTOGRAPHIC KEY RECOVERY SYSTEM".
      <br/>
      The Framework provides the required checks of the key from the generate key function.
      <br/>
      The portable key produced at the sender node is sent to the receiver node.
      <br/>
      A receiver application at the receiver node receives the portable key and the portable key decoder decodes it and outputs the decoded value in the receiver system's proprietary key format.
    </p>
    <p num="19">
      FIG. 1B illustrates the overall processing at the sender and receiver nodes.
      <br/>
      One of the common functions at the sender and receiver nodes is the ASN.1 compiler, that outputs a platform-independent ASN.1 definition file with the portable key information.
      <br/>
      Another common function at the sender and receiver nodes are the platform specific ASN.1 functions to encode and decode the portable key.
    </p>
    <p num="20">
      FIG. 1B also illustrates the sender functions on the sender platform, such as the Microsoft Windows 95 operating system running on an Intel Pentium processor.
      <br/>
      A platform specific data definition is input to create a platform specific data value and portable key information.
      <br/>
      The portable key information is then encoded from platform specific data into platform independent data, which is transmitted in the ASN.1 format to the receiver.
    </p>
    <p num="21">
      FIG. 1B also illustrates the receiver functions on the receiver platform, such as the IBM/AIX operating system running on an IBM RISC/6000 processor.
      <br/>
      The encoded portable key information which is received, is decoded from platform independent data to platform specific data.
    </p>
    <p num="22">
      FIG. 2 illustrates the format of the ASN.1 encoding file for a portable key, in accordance with the invention.
      <br/>
      The format includes portable key information that includes a portable key header and portable key data.
      <br/>
      FIG. 3A illustrates the format of the ASN.1 encoding file for a symmetric key.
      <br/>
      The format includes portable key information that includes a portable key header with a cryptographic algorithm identifier, algorithm usage, and related parameters, and the cryptographic key data format and related parameters.
      <br/>
      The portable key data includes the byte stream of the size specified in the format data.
      <br/>
      FIG. 3B illustrates the format of the ASN.1 encoding file for an asymmetric key.
      <br/>
      The format includes portable key information that includes a portable key header with a cryptographic algorithm identifier, algorithm usage, and related parameters, and the cryptographic key data format and related parameters.
      <br/>
      The portable key data includes the byte stream of the size specified in the format data.
    </p>
    <p num="23">The encoder/decoder functions corresponding to this ASN.1 definition have been generated using an ASN.1 compiler.</p>
    <p num="24">
      At the time of encryption, the key material and corresponding parameters for the algorithm are fed into an encode function that produces a portable key.
      <br/>
      FIG. 4 illustrates the method to prepare the ASN.1 encoding file at the sender.
      <br/>
      The method begins by creating the ASN.1 format for portable key information as a file of type "asn" (e.g., RequiredPortableKeyInfo.asn).
      <br/>
      The appropriate tool is run, for example the ASN.1 compiler, by feeding the platform-independent ASN.1 file as input, and generating platform specific output files.
      <br/>
      Then platform-specific data values are created representing the portable key information based on the platform-specific data structure definitions just generated.
      <br/>
      Then, the platform-specific ASN.1 encoding functions are used to create the ASN.1 encoded protocol data unit (PDU) corresponding to the portable key information.
      <br/>
      The ASN.1 encoded protocol data unit (PDU) is then sent to the receiver node.
      <br/>
      This portable key bytestream may be distributed by an mechanism such as distributed file system, direct network connections, etc.
      <br/>
      An example of these steps is as follows:
    </p>
    <p num="25">InitializePDU (PortableKeyInfoName)</p>
    <p num="26">OpenPDU (PortableKeylnfoName)</p>
    <p num="27">EncodePDU</p>
    <p num="28">
      (Input: Platform-specific data,
      <br/>
      Output: ASN.1 encoded data)
    </p>
    <p num="29">ClosePDU (PortableKeyInfoName)</p>
    <p num="30">
      At the time of decryption, the portable key is fed into the decoder function and the key material and corresponding parameters are created.
      <br/>
      In addition to this information, only the data to be decrypted is needed by the decryption algorithm to perform a successful decryption.
      <br/>
      FIG. 5 illustrates the method to decode the ASN.1 encoded file at the receiver.
      <br/>
      The method begins by creating the ASN.1 format for portable key information as a file of type "asn" (e.g., RequiredPortableKeyInfo.asn).
      <br/>
      The appropriate tool is run, for example the ASN.1 compiler, by feeding the platform-independent ASN.1 file as input, and generating platform specific output files.
      <br/>
      Then platform-specific data values are created representing the portable key information based on the platform-specific data structure definitions just generated.
      <br/>
      Then, the platform-specific ASN.1 decoding functions are used to decode the ASN.1 encoded protocol data unit (PDU) to obtain the platform-specific key information.
      <br/>
      The platform-specific key information is then used at the receiving node for normal cryptographic operations.
      <br/>
      An example of these steps is as follows:
    </p>
    <p num="31">InitializePDU (PortableKeyInfoName)</p>
    <p num="32">OpenPDU (PortableKeylnfoName)</p>
    <p num="33">
      DecodePDU
      <br/>
      (Input: ASN.1 encoded data,
      <br/>
      Output: Platform-specific data)
    </p>
    <p num="34">ClosePDU (PortableKeyInfoName)</p>
    <p num="35">The portable key bytestream may be distributed by any mechanism such as distributed file system, direct network connections, etc.</p>
    <p num="36">This method provides a uniform way to encode key-related information needed to encrypt and decrypt data with no reliance on additional methods to provide algorithm-specific information.</p>
    <p num="37">
      --
      <br/>
      -- -- ASN.1 Type Definitions for a Generic, Portable Key
      <br/>
      -- PortableKeyInfo DEFINITIONS            ::=  BEGIN
      <br/>
      -- PortableKeyInfo    ::= SEQUENCE  +
      <br/>
      --      keyVersion     Uint32,        -- Version number of the key structure
      <br/>
      --      cspId          Guid,          -- crypto service provider Id
      <br/>
      --      algorithmId    Uint32,        -- Crypto algorithm Id
      <br/>
      --      blobType       Uint32,        -- raw_type, wrapped_type, reference, .
      <br/>
      --  . .
      <br/>
      --      format         Uint32,        -- PKCS_version, PGP, CDSA, FIPS186,
      <br/>
      --  MSCAPI, . . .
      <br/>
      --      keyStatus �0� Uint32           OPTIONAL,
      <br/>
      --                                    -- ISO 11770 Key Life Cycle Management
      <br/>
      --  attribute:
      <br/>
      --                                    -- pending active, active, or post
      <br/>
      --  active
      <br/>
      --      keyClass       Uint32,        -- public, private, secret, . . .
      <br/>
      --      keySizeInBits  Uint32,
      <br/>
      --      keyAttr        Uint32,        -- permanent, private, modifiable, . . .
      <br/>
      --      keyUsage       Uint32,        -- encrypt, decrypt, sign, verify, wrap,
      <br/>
      --  unwrap
      <br/>
      --      startDate      GeneralizedTime,
      <br/>
      --      endDate        GeneralizedTime,
      <br/>
      --      wrapAlgorithmId Uint32,
      <br/>
      --      wrapMode       Uint32,
      <br/>
      --      reserved       Uint32,
      <br/>
      --      mode      �1� Uint32           OPTIONAL, -- Cipher Block Chaining, . .
      <br/>
      --  .
      <br/>
      --      initVector �2� OCTET STRING     OPTIONAL, -- initialization vector
      <br/>
      --      padding   �3� Uint32           OPTIONAL,
      <br/>
      --      parameters �4� OCTET STRING     OPTIONAL,
      <br/>
      --      keyData   �5� OCTET STRING     OPTIONAL
      <br/>
      -- }
      <br/>
      -- Uint32             ::= INTEGER(0 . . . 4294967295)
      <br/>
      -- Uint16             ::= INTEGER(0 . . . 65535)
      <br/>
      -- Guid               ::= SEQUENCE     +
      <br/>
      --      data1                Uint32,
      <br/>
      --      data2                Uint16,
      <br/>
      --      data3                Uint16,
      <br/>
      --      data4                OCTET STRING (SIZE(8))
      <br/>
      -- }
      <br/>
      -- END
    </p>
    <p num="38">This portable key definition has been used to achieve interoperability in our IBM KeyWorks product suite which consists of:</p>
    <p num="39">
      1.
      <br/>
      IBM KeyWorks Toolkit (cryptographic and certificate services framework+service providers)
      <br/>
      2.
      <br/>
      IBM Key Recovery Service Provider (key recovery service provider which generates key recovery blocks)
      <br/>
      3.
      <br/>
      IBM Key Recovery Server (server which recovers (portable cryptographic) keys when presented with key recovery blocks from authorized parties)
    </p>
    <p num="40">
      The ASN.1 specification for the Portable Key Structure is a generic structure, which covers all key types.
      <br/>
      The keyClass attribute in the PortableKeyInfo structure distinguishes symmetric keys for asymmetric keys (public/private keys are asymmetric, secret keys are symmetric keys).
    </p>
    <p num="41">
      A portable cryptographic key is encoded and decoded by following these steps:
      <br/>
      1.
      <br/>
      Software that processes the ASN.1 encoded data structure must be created for encoding keys (usually prior to sending) and decoding keys (usually after receiving)--This may be done manually by writing what is effectively an ASN.1 standard compliant parser.
      <br/>
      Alternatively, a ASN.1 compiler may be used to automate this process.
      <br/>
      ASN.1 compilers read in an ASN.1 encoding file and generate data structure definitions and encode/decode function (subroutine) source code in a given target language (c.g., C) for a given target machine (e.g., Windows NT).
      <br/>
      2. The encode function (previously generated by the compiler) must be called; its input is the language-specific, machine-specific data structure representing the key semantics; its output is a portable byte stream which can be decoded by the corresponding decode function (which may be implemented in a different language and a different machine type). E.g., the encode may be in C on Windows NT, but the decode may be in Java on the AIX operating system.
      <br/>
      3. When the portable byte stream is received, it is fed to the appropriate decode function to obtain the original key in a form usable on the target machine.
    </p>
    <p num="42">
      This invention is useful in any environment where cryptographic keys are used and portability is required.
      <br/>
      For example, it is very useful in the Internet environment where many different parties need keys to provide security services like confidentiality, message integrity, etc.
    </p>
    <p num="43">We use the portable cryptographic key in our IBM KeyWorks product suite so that we can generate keys on one machine type and recover it in a usable form on a different machine type.</p>
    <p num="44">Although a specific embodiment of the invention has been disclosed, it will be understood by those having skill in the art that changes can be made to that specific embodiment without departing from the spirit and scope of the invention.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for providing portable cryptographic keys, comprising:</claim-text>
      <claim-text>creating an ASN.1 format for portable key information at a sender node; generating first platform-specific data structure definitions at the sender node; creating first platform-specific data values at the sender, representing portable key information based on the first platform-specific data structure definitions; encoding portable key information at the sender using first platform-specific ASN.1 encoding functions to create a platform independent ASN.1 encoded protocol data unit (PDU) corresponding to the portable key information; sending the platform independent ASN.1 encoded protocol data unit (PDU) to a receiver node; creating said ASN.1 format for portable key information at the receiver node; generating second platform-specific data structure definitions at the receiver node;</claim-text>
      <claim-text>and decoding the platform independent ASN.1 encoded protocol data unit (PDU) using second platform-specific ASN.1 decoding functions to obtain second platform-specific key information at the receiver node.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A method for providing portable cryptographic keys, comprising: creating a format for portable key information at a sender node; generating first platform-specific data structure definitions at the sender node; creating first platform-specific data values at the sender, representing portable key information based on the first platform-specific data structure definitions; encoding portable key information at the sender using first platform-specific encoding functions to create a platform independent encoded protocol data unit (PDU) corresponding to the portable key information; sending the platform independent encoded protocol data unit (PDU) to a receiver node; creating said format for portable key information at the receiver node; generating second platform-specific data structure definitions at the receiver node;</claim-text>
      <claim-text>and decoding the platform independent encoded protocol data unit (PDU) using second platform-specific decoding functions to obtain second platform-specific key information at the receiver node.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A system for providing portable cryptographic keys, comprising: means for creating an ASN.1 format for portable key information at a sender node; means for generating first platform-specific data structure definitions at the sender node; means for creating first platform-specific data values at the sender, representing portable key information based on the first platform-specific data structure definitions; means for encoding portable key information at the sender using first platform-specific ASN.1 encoding functions to create a platform independent ASN.1 encoded protocol data unit (PDU) corresponding to the portable key information; means for sending the platform independent ASN.1 encoded protocol data unit (PDU) to a receiver node; means for creating said ASN.1 format for portable key information at the receiver node; means for generating second platform-specific data structure definitions at the receiver node;</claim-text>
      <claim-text>and means for decoding the platform independent ASN.1 encoded protocol data unit (PDU) using second platform-specific ASN.1 decoding functions to obtain second platform-specific key information at the receiver node.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A system for providing portable cryptographic keys, comprising: a first processor programmed to create a format for portable key information at a sender node; said first processor generating first platform-specific data structure definitions at the sender node; said first processor programmed to create first platform-specific data values at the sender, representing portable key information based on the first platform-specific data structure definitions; said first processor encoding portable key information at the sender using first platform-specific encoding functions to create a platform independent encoded protocol data unit (PDU) corresponding to the portable key information; a transmitter coupled to said first processor for sending the platform independent encoded protocol data unit (PDU) to a receiver node; a second processor programmed to create said format for portable key information at the receiver node; said second processor generating second platform-specific data structure definitions at the receiver node;</claim-text>
      <claim-text>and said second processor programmed to decode the platform independent encoded protocol data unit (PDU) using second platform-specific decoding functions to obtain second platform-specific key information at the receiver node.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. An article of manufacture for use in a computer, comprising: a computer useable medium having computer readable program code means embodied therein for providing portable cryptographic keys, comprising: computer readable program code means for causing a computer to create an ASN.1 format for portable key information at a sender node; computer readable program code means for causing a computer to generate first platform-specific data structure definitions at the sender node; computer readable program code means for causing a computer to create first platform-specific data values at the sender, representing portable key information based on the first platform-specific data structure definitions; computer readable program code means for causing a computer to encode portable key information at the sender using first platform-specific ASN.1 encoding functions to create a platform independent ASN.1 encoded protocol data unit (PDU) corresponding to the portable key information; computer readable program code means for causing a computer to send the platform independent ASN.1 encoded protocol data unit (PDU) to a receiver node; computer readable program code means for causing a computer to create said ASN.1 format for portable key information at the receiver node; computer readable program code means for causing a computer to generate second platform-specific data structure definitions at the receiver node;</claim-text>
      <claim-text>and computer readable program code means for causing a computer to decode the platform independent ASN.1 encoded protocol data unit (PDU) using second platform-specific ASN.1 decoding functions to obtain second platform-specific key information at the receiver node.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. An article of manufacture for use in a computer, comprising: a computer useable medium having computer readable program code means embodied therein for providing portable cryptographic keys, comprising: computer readable program code means for causing a computer to create a format for portable key information at a sender node; computer readable program code means for causing a computer to generate first platform-specific data structure definitions at the sender node; computer readable program code means for causing a computer to create first platform-specific data values at the sender, representing portable key information based on the first platform-specific data structure definitions; computer readable program code means for causing a computer to encode portable key information at the sender using first platform-specific encoding functions to create a platform independent encoded protocol data unit (PDU) corresponding to the portable key information; computer readable program code means for causing a computer to send the platform independent encoded protocol data unit (PDU) to a receiver node; computer readable program code means for causing a computer to create said format for portable key information at the receiver node; computer readable program code means for causing a computer to generate second platform-specific data structure definitions at the receiver node;</claim-text>
      <claim-text>and computer readable program code means for causing a computer to decode the platform independent encoded protocol data unit (PDU) using second platform-specific decoding functions to obtain second platform-specific key information at the receiver node.</claim-text>
    </claim>
  </claims>
</questel-patent-document>