<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181713B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181713</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181713</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="25501103" extended-family-id="3874869">
      <document-id>
        <country>US</country>
        <doc-number>08958610</doc-number>
        <kind>A</kind>
        <date>19971027</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08958610</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>4006843</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>95861097</doc-number>
        <kind>A</kind>
        <date>19971027</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08958610</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04N  21/2381      20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2381</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04N  21/434       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>434</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04N  21/4363      20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>4363</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>H04N  21/438       20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>438</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>H04N  21/63        20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>63</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>H04N  21/6437      20110101A I20140524RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>6437</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140524</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>370474000</text>
        <class>370</class>
        <subclass>474000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>370476000</text>
        <class>370</class>
        <subclass>476000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>375E07003</text>
        <class>375</class>
        <subclass>E07003</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>375E07025</text>
        <class>375</class>
        <subclass>E07025</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04N-021/63</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>63</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04N-021/2381</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2381</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04N-021/434</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>434</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>H04N-021/4363</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>4363</subgroup>
      </classification-ecla>
      <classification-ecla sequence="5">
        <text>H04N-021/438D</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>021</main-group>
        <subgroup>438D</subgroup>
      </classification-ecla>
      <classification-ecla sequence="6">
        <text>H04N-021/6437</text>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>6437</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/63</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>63</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/2381</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>2381</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/434</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>434</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/4363</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>4363</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/4381</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>4381</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04N-021/6437</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>N</subclass>
        <main-group>21</main-group>
        <subgroup>6437</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>1</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>4</number-of-drawing-sheets>
      <number-of-figures>4</number-of-figures>
      <image-key data-format="questel">US6181713</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Selectable depacketizer architecture</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>GROVER WAYNE D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4612636</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4612636</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>MONTGOMERY GERALD D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5387941</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5387941</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>MORRIS TODD D</text>
          <document-id>
            <country>US</country>
            <doc-number>5390184</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5390184</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>JUNGO CHARLES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5559559</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5559559</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>PEARLSTEIN LARRY</text>
          <document-id>
            <country>US</country>
            <doc-number>5691986</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5691986</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>KIM SEONG-BONG</text>
          <document-id>
            <country>US</country>
            <doc-number>5832256</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5832256</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Sun Microsystems, Inc.</orgname>
            <address>
              <address-1>Palo Alto, CA, US</address-1>
              <city>Palo Alto</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>SUN MICROSYSTEMS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Patki, Ema</name>
            <address>
              <address-1>Mtn. View, CA, US</address-1>
              <city>Mtn. View</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Wong, Daniel C. W.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>The Hecker Law Group</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Patel, Ajit</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A scheme is provided that permits the use of a selectable depacketization module to depacketize data streams.
      <br/>
      An RTP session manager is responsible for receiving RTP packets from a network and parsing/processing them.
      <br/>
      A depacketizer module is located using the type of data received on the stream.
      <br/>
      Thus a specific depacketizer is located at runtime depending on the coding decoding scheme ("codec") used to compress the incoming data stream.
      <br/>
      A naming convention is followed in order for a specific depacketizer to be located.
      <br/>
      The depacketizer receives data that has already been parsed and is in a readable form.
      <br/>
      The depacketizer outputs this data using a well defined interface.
      <br/>
      This interface has been designed such that it is generic across a number of codecs.
      <br/>
      The interface passes all relevant information to the decoder where the actual depacketized data stream will be decompressed.
      <br/>
      The session manager need not know of any codec details since the depacketizer handles all codec specific issues.
      <br/>
      A default format is described for data that is output by a depacketizer.
      <br/>
      There is provision for a depacketizer to output data in this pre-defined format.
      <br/>
      However, there is also a provision for a depacketizer to output data itself in a pre-defined format.
      <br/>
      This data is provided to a handler that is aware of this format, so that the integration of depacketizers is seamless.
      <br/>
      Thus, a depacketizer can be made available as long as it implements certain defined interfaces.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">This invention relates to the field of sending and receiving data packets on a computer network.</p>
    <p num="3">
      A portion of the disclosure of this patent document contains material which is subject to copyright protection.
      <br/>
      The owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.
    </p>
    <p num="4">2. Background Art</p>
    <p num="5">
      Computers are often used to process, play back, and display video data, audio data and other data.
      <br/>
      This data may come from sources such as storage devices, on-line services, VCRs, cable systems, broadcast television tuners, etc.
      <br/>
      Video and audio data is memory intensive, that is, such data requires large amounts of memory for storage and use by a computer system.
      <br/>
      In addition, the transmission time of such large volume data from a remote source to a client computer can be expensive and be a limiting factor in the ability to provide such data at all.
    </p>
    <p num="6">
      To reduce the transmission bandwidth and memory requirements when working with data, various compression schemes have been developed so that less storage space is needed to store information and a smaller bandwidth is needed to transmit it.
      <br/>
      Prior art video compression schemes include Motion JPEG, MPEG-1, MPEG-2, Indeo, Quicktime, True Motion-S, CinePak, and others.
      <br/>
      Similarly, there are a number of compression schemes for audio data.
    </p>
    <p num="7">
      The use of compression schemes for transmitting video and audio is particularly important in the context of computer networks, such as the Internet and World Wide Web.
      <br/>
      Providers wish to provide multi-media content that includes video and audio to users and transmit such content over the Internet.
      <br/>
      Transmission times become too long if the data is not compressed.
      <br/>
      In addition, it is not possible to provide real time streaming of video and audio data without a compression scheme.
    </p>
    <p num="8">
      RTP is a Real Time Transport protocol used to transmit audio and video on a network such as the Internet.
      <br/>
      Typically, audio or video data is compressed using a specific compression technique and the compressed data stream is broken down into smaller packets for transmission over the wire.
      <br/>
      This process is referred to as "packetization" and the reverse process, i.e. assembling network packets into a continuous byte stream is called "depacketization".
      <br/>
      An RTP session handler is a mechanism that controls the receipt and depacketization of packetized data at a client computer.
      <br/>
      In the prior art, the depacketization scheme is part of the RTP session handler's code.
      <br/>
      This is a disadvantage because it requires that the RTP session handler have foreknowledge of all possible packetization schemes.
      <br/>
      This makes it difficult to add new packetization schemes without requiring that a new RTP session handler be created.
      <br/>
      It would be advantageous if the depacketization could exist as a separate module.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">
      A scheme is provided that permits the use of a selectable depacketization module to depacketize data streams.
      <br/>
      An RTP session manager is responsible for receiving RTP packets from a network and parsing/processing them.
      <br/>
      A depacketizer module is located using the type of data received on the stream.
      <br/>
      Thus a specific depacketizer is located at runtime depending on the coding decoding scheme ("codec") used to compress the incoming data stream.
      <br/>
      A naming convention is followed in order for a specific depacketizer to be located.
      <br/>
      The depacketizer receives data that has already been parsed and is in a readable form.
      <br/>
      The depacketizer assembles this data into frames and outputs frame data to a handler according to an interface of the preferred embodiment.
      <br/>
      This interface has been designed such that it is generic across a number of codecs.
      <br/>
      The interface passes all relevant information to the decoder where the actual depacketized data stream will be decompressed.
      <br/>
      The session manager need not know of any codec details since the depacketizer handles all codec specific issues.
    </p>
    <p num="10">
      A default format is described for data that is output by a depacketizer.
      <br/>
      There is provision for a depacketizer to output data in this pre-defined format.
      <br/>
      However, there is also a provision for a depacketizer to output data itself in a pre-defined format.
      <br/>
      This data is provided to a handler that is aware of this format, so that the integration of depacketizers is seamless.
      <br/>
      Thus, a depacketizer can be made available as long as it implements certain defined interfaces.
      <br/>
      Special intelligence on packet loss, error recovery, and other data can be utilized by the depacketizer and various proprietary codecs are allowed to be used inside of the RTP session manager, making use of the protocol state management code of the session manager.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="11">
      FIG. 1 is a block diagram of an exemplary computer system for implementing the present invention.
      <br/>
      FIG. 2 ilustrates the RTP Session Manager of the present invention.
      <br/>
      FIG. 3 illustrates the RTP Depacketizer of the present invention.
      <br/>
      FIG. 4 is a flow diagram of the process of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="12">
      The invention is a method and apparatus for providing a selectable depacketizer.
      <br/>
      In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention.
      <br/>
      It will be apparent, however, to one skilled in the art, that the invention may be practiced without these specific details.
      <br/>
      In other instances, well known features have not been described in detail so as not to obscure the invention.
    </p>
    <heading>JAVA</heading>
    <p num="13">
      The preferred embodiment of the invention is implemented in the Java.RTM. language developed by Sun Microsystems, Inc. of Mountain View, Calif.
      <br/>
      The following is background on Java and on object oriented programming.
    </p>
    <p num="14">
      Java is an object-oriented programming language.
      <br/>
      Object-oriented programming is a method of creating computer programs by combining certain fundamental building blocks, and creating relationships among and between the building blocks.
      <br/>
      The building blocks in object-oriented programming systems are called "objects." An object is a programming unit that groups together a data structure (instance variables) and the operations (methods) that can use or affect that data.
      <br/>
      Thus, an object consists of data and one or more operations or procedures that can be performed on that data.
      <br/>
      The joining of data and operations into a unitary building block is called "encapsulation.
    </p>
    <p num="15">
      An object can be instructed to perform one of its methods when it receives a "message." A message is a command or instruction to the object to execute a certain method.
      <br/>
      It consists of a method selection (name) and a plurality of arguments that are sent to an object.
      <br/>
      A message tells the receiving object what operations to perform.
    </p>
    <p num="16">
      One advantage of object-oriented programming is the way in which methods are invoked.
      <br/>
      When a message is sent to an object, it is not necessary for the message to instruct the object how to perform a certain method.
      <br/>
      It is only necessary to request that the object execute the method.
      <br/>
      This greatly simplifies program development.
    </p>
    <p num="17">
      Object-oriented programming languages are predominantly based on a "class" scheme.
      <br/>
      The class-based object-oriented programming scheme is generally described in Lieberman, "Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems," OOPSLA 86 Proceedings, September 1986, pp. 214-223.
    </p>
    <p num="18">
      A class defines a type of object that typically includes both instance variables and methods for the class.
      <br/>
      An object class is used to create a particular instance of an object.
      <br/>
      An instance of an object class includes the variables and methods defined for the class.
      <br/>
      Multiple instances of a the same class can created from an object class.
      <br/>
      Each instance that is created from the object class is said to be of the same type or class.
    </p>
    <p num="19">
      A hierarchy of classes can be defined such that an object class definition has one or more subclasses.
      <br/>
      A subclass inherits its parent's (and grandparent's etc.) definition.
      <br/>
      Each subclass in the hierarchy may add to or modify the behavior specified by its parent class.
    </p>
    <p num="20">
      To illustrate, an employee object class can include "name" and "salary" instance variables and a "set_salary" method.
      <br/>
      Instances of the employee object class can be created, or instantiated for each employee in an organization.
      <br/>
      Each object instance is said to be of type "employee." Each employee object instance includes the "name" and "salary" instance variables and the "set_salary" method.
      <br/>
      The values associated with the "name" and "salary" variables in each employee object instance contain the name and salary of an employee in the organization.
      <br/>
      A message can be sent to an employee's employee object instance to invoke the "set_salary" method to modify the employee's salary (i.e., the value associated with the "salary" variable in the employee's employee object).
    </p>
    <p num="21">
      An object is a generic term that is used in the object-oriented programming environment to refer to a module that contains related code and variables.
      <br/>
      A software program can be written using an object-oriented programming language whereby the program's functionality is implemented using objects.
    </p>
    <p num="22">
      Development of software applications may be performed in an independent piecewise manner by establishing application programming interfaces (APIs) for components of the application.
      <br/>
      An API refers to the methods of a particular component that are accessible by other components, and the format by which those methods may be invoked.
      <br/>
      The particular implementation of those methods is important only with respect to the design of the particular component.
      <br/>
      Each component is designed individually to implement its respective API and any internal functions, and to interface with the APIs of the other components of the application.
      <br/>
      Typically, these components comprise one or more objects forming the application.
    </p>
    <p num="23">
      Examples of object-oriented programming languages include C++ and Java.
      <br/>
      Unlike most programming languages, in which a program is compiled into machine-dependent, executable program code, Java classes are compiled into machine independent byte-code class files which are executed by a machine-dependent virtual machine.
      <br/>
      The virtual machine provides a level of abstraction between the machine independence of the byte-code classes and the machine-dependent instruction set of the underlying computer hardware.
      <br/>
      A class loader is responsible for loading the byte-code class files as needed, and an interpreter or just-in-time compiler provides for the transformation of byte-codes into machine code.
    </p>
    <p num="24">Embodiment of Computer Execution Environment (Hardware)</p>
    <p num="25">
      An embodiment of the invention can be implemented as computer software in the form of computer readable program code executed on a general purpose computer such as computer 100 illustrated in FIG. 1.
      <br/>
      A keyboard 110 and mouse 111 are coupled to a bi-directional system bus 118.
      <br/>
      The keyboard and mouse are for introducing user input to the computer system and communicating that user input to central processing unit (CPU) 113. Other suitable input devices may be used in addition to, or in place of, the mouse 111 and keyboard 110. I/O (input/output) unit 119 coupled to bi-directional system bus 118 represents such I/O elements as a printer, A/V (audio/video) I/O, etc.
    </p>
    <p num="26">
      Computer 100 includes a video memory 114, main memory 115 and mass storage 112, all coupled to bi-directional system bus 118 along with keyboard 110, mouse 111 and CPU 113.
      <br/>
      The mass storage 112 may include both fixed and removable media, such as magnetic, optical or magnetic optical storage systems or any other available mass storage technology.
      <br/>
      Bus 118 may contain, for example, thirty-two address lines for addressing video memory 114 or main memory 115.
      <br/>
      The system bus 118 also includes, for example, a 32-bit data bus for transferring data between and among the components, such as CPU 113, main memory 115, video memory 114 and mass storage 112.
      <br/>
      Alternatively, multiplex data/address lines may be used instead of separate data and address lines.
    </p>
    <p num="27">
      In one embodiment of the invention, the CPU 113 is a microprocessor manufactured by Motorola.RTM., such as the 680X0 processor or a microprocessor manufactured by Intel.RTM., such as the 80X86, or Pentium.RTM. processor, or a SPARC.RTM. microprocessor from Sun Microsystems.RTM.. However, any other suitable microprocessor or microcomputer may be utilized.
      <br/>
      Main memory 115 is comprised of dynamic random access memory (DRAM).
      <br/>
      Video memory 114 is a dual-ported video random access memory.
      <br/>
      One port of the video memory 114 is coupled to video amplifier 116.
      <br/>
      The video amplifier 116 is used to drive the cathode ray tube (CRT) raster monitor 117.
      <br/>
      Video amplifier 116 is well known in the art and may be implemented by any suitable apparatus.
      <br/>
      This circuitry converts pixel data stored in video memory 114 to a raster signal suitable for use by monitor 117.
      <br/>
      Monitor 117 is a type of monitor suitable for displaying graphic images.
    </p>
    <p num="28">
      Computer 100 may also include a communication interface 120 coupled to bus 118.
      <br/>
      Communication interface 120 provides a two-way data communication coupling via a network link 121 to a local network 122.
      <br/>
      For example, if communication interface 120 is an integrated services digital network (ISDN) card or a modem, communication interface 120 provides a data communication connection to the corresponding type of telephone line, which comprises part of network link 121.
      <br/>
      If communication interface 120 is a local area network (LAN) card, communication interface 120 provides a data communication connection via network link 121 to a compatible LAN.
      <br/>
      Wireless links are also possible.
      <br/>
      In any such implementation, communication interface 120 sends and receives electrical, electromagnetic or optical signals which carry digital data streams representing various types of information.
    </p>
    <p num="29">
      Network link 121 typically provides data communication through one or more networks to other data devices.
      <br/>
      For example, network link 121 may provide a connection through local network 122 to host computer 123 or to data equipment operated by an Internet Service Provider (ISP) 124. ISP 124 in turn provides data communication services through the world wide packet data communication network now commonly referred to as the "Internet" 125.
      <br/>
      Local network 122 and Internet 125 both use electrical, electromagnetic or optical signals which carry digital data streams.
      <br/>
      The signals through the various networks and the signals on network link 121 and through communication interface 120, which carry the digital data to and from computer 100, are exemplary forms of carrier waves transporting the information.
    </p>
    <p num="30">
      Computer 100 can send messages and receive data, including program code, through the network(s), network link 121, and communication interface 120.
      <br/>
      In the Internet example, server 126 might transmit a requested code for an application program through Internet 125, ISP 124, local network 122 and communication interface 120.
    </p>
    <p num="31">
      The received code may be executed by CPU 113 as it is received, and/or stored in mass storage 112, or other non-volatile storage for later execution.
      <br/>
      In this manner, computer 100 may obtain application code in the form of a carrier wave.
    </p>
    <p num="32">
      The computer systems described above are for purposes of example only.
      <br/>
      An embodiment of the invention may be implemented in any type of computer system or programming or processing environment.
    </p>
    <heading>PREFERRED EMBODIMENT</heading>
    <p num="33">
      The present invention provides a system that permits the use of a selectable depacketizer.
      <br/>
      The preferred embodiment of the present invention contemplates the use of RTP and the use of an RTP session manager to handle the receipt of data (in the preferred embodiment, video or audio data).
      <br/>
      The RTP session manager is described below.
    </p>
    <heading>RTP SESSION MANAGER</heading>
    <p num="34">
      The RTP Session Manager (RTPSM) allows a local participant to participate (send or receive data) in a single RTP "session".
      <br/>
      The RTPSM maintains an updated state of the session as viewed from the local participant.
      <br/>
      In effect, an instance of an RTPSM is a local representation of a distributed entity (an RTP session).
      <br/>
      It allows an application to render and create data streams on an RTP session.
      <br/>
      One embodiment of this invention takes advantage of the Java Media Framework (JMF) described in Appendix A herein.
    </p>
    <p num="35">
      A graphical representation of the RTP Session Manager is illustrated in FIG. 2.
      <br/>
      The java media package manager 201 handles the creation of players and locates the appropriate players.
      <br/>
      Manager 201 is part of the JMF.
      <br/>
      The Java Media Framework (JMF) is a set of multimedia APIs and implementations designed to playback multimedia in a variety of protocols and formats, such as a QuickTime Cinepak movie over the HTTP (Hypertext Transfer Protocol) protocol.
      <br/>
      The Java Media Framework specifies the concept of a "player," a unit to playback multimedia data.
    </p>
    <p num="36">
      Transport delivery 202 receives data streams from the network and provides them, via RTPSocket 203, the to RTP Session Manager 204.
      <br/>
      The Session Manager 204 inspects the RTP packet and determines what the encoding is.
      <br/>
      Depending on the type of encoding, the Session Manager 204 identifies and invokes the appropriate depacketizer 206.
      <br/>
      The Session Manager 204 sends RTP packets to the depacketizer 206.
      <br/>
      The depacketizer 206 assembles the packets into frames as appropriate for the codec environment of the packets and sends them via the Session Manager 204 to the handler 205.
      <br/>
      Handler 205 decodes the frames and provides playback as appropriate.
    </p>
    <p num="37">
      The RTPSM 204 represents the session with two dynamic sets of objects --a set of "participants" and a set of "streams".
      <br/>
      The stream is provided by transport delivery 202.
      <br/>
      These objects are created by and controlled by the RTPSM.
      <br/>
      A participant is a single machine, host or user participating in the session, while a stream is a series of data packets arriving from or sent by a single source.
      <br/>
      A participant may own more than one stream, each of which is identified by the SSRC used by the source of the stream.
    </p>
    <p num="38">
      At the top-most level the RTPSM manages a set of "participants" (RTPParticipant ), each represented by an instance of a class implementing the RTPParticipant interface.
      <br/>
      RTPSM implementations create RTPParticipant whenever a previously unidentified RTCP (Real Time Control Protocol) packet is received. (The RTPParticipant object is updated each time a subsequent RTCP packet from this source arrives).
    </p>
    <p num="39">
      In addition to the set of RTPParticipant objects, an RTPSM implementation also manages a set of RTPStream objects.
      <br/>
      Each such object represents a stream of RTP data packets on the session; if the stream originates from the local participant (the client) it is an instance of the RTPSendStream subclass; otherwise the stream is coming off the net from a remote participant and is an instance of the RTPRecvStream subclass.
    </p>
    <heading>PLUGGABLE DEPACKETIZER ARCHITECTURE</heading>
    <p num="40">
      The preferred embodiment of the present invention provides a scheme for identifying an appropriate depacketizer module based on the codec type of incoming data.
      <br/>
      The depacketizer module assembles data into frames and provides it to a handler for decoding and playback.
      <br/>
      A flow diagram of this process is illustrated in FIG. 4.
    </p>
    <p num="41">
      At step 401 the RTP Session Manager receives a data stream.
      <br/>
      At Step 402 RTPSM obtains the payload type of the data stream by parsing the RTP header of the data.
    </p>
    <p num="42">
      At step 403 the appropriate depacketizer is called based on the results of the payload query in step 402.
      <br/>
      At step 404 the RTPSM calls the depacketize( ) method of the depacketizer each time it has received and parsed an RTP packet on the stream of the depacketizer.
    </p>
    <p num="43">
      The depacketizer assembles protocol data units received in the depacketize( ) method into application data units (frames) and notifies its DePacketizedDataHandler when it has finished preparing a frame of data at step 405 (RTPSM sets the transferHandler of the depacketizer once it has been instantiated using the depacketizer's setTransferHandler( ) method.
      <br/>
      The transferHandler of a depacketizer is a DePacketizedDataHandler and is the object to which depacketized data must be handed over by the depacketizer).
      <br/>
      Notification is done by calling the transferData( ) method of its DePacketizedDataHandler at step 406.
      <br/>
      The DePacketizedDataHandler then takes care of streaming the depacketized data to the handler of this stream at step 407.
    </p>
    <p num="44">Graphical Representation of the DePacketizer</p>
    <p num="45">
      The operation of the Depacketizer is represented graphically in FIG. 3.
      <br/>
      RTP streaming packets are delivered to the RTP Session Manager 204.
      <br/>
      The RTP Session Manager examiners the first packet and examines the RTP header.
      <br/>
      The packet includes information such as Extension Present, Type, byte array of extension data, marker, Payload Type, Sequence Number, RTP timestamp, SSRC integer array of CSRC, and payload(offset, length).
      <br/>
      The parsed RTP packet is then provided to the DepacketizedDataHandler 301.
    </p>
    <p num="46">
      The Depacketizer depacketizes the RTP packet into a DepacketizedUnit 302.
      <br/>
      The DepacketizedUnit 302 includes a DepacketizedUnitHeader, a timestamp, a marker, payloadtype, payload header, and payload size.
      <br/>
      DepacketizedUnits are essentially data frames and are provided from the depacketizer to the depacketizedatahandler which is part of the RTPSM.
      <br/>
      The RTPSM 204 will then provide this frame to the handler 205 for decoding and playback.
    </p>
    <p num="47">Depacketizer Interface</p>
    <p num="48">
      In the Java language, an interface is a collection of constants and abstract methods.
      <br/>
      A class can implement an interface by adding the interface to the class's "implements" clause.
      <br/>
      An abstract method can be overridden (i.e. replaced).
      <br/>
      A variable can be declared as an interface type and all of the constants and methods declared in the interface can be accessed from this variable.
    </p>
    <p num="49">
      The preferred embodiment of the present invention includes an interface called "RTPDepacketizer".
      <br/>
      This interface is implemented by all plug-in depacketizers in RTPSM in the preferred embodiment.
      <br/>
      The entry point from the RTPSM to the depacketizer is via the depacketize method.
      <br/>
      Application data units or frames are transferred from the depacketizer to the RTPSM by calling the transferData( ) method of the DePacketizedDataHandler.
      <br/>
      The RTPSM is responsible for setting the DePacketizedDataHandler on a depacketizer.
      <br/>
      The Depacketizer interface implements the following methods:
    </p>
    <p num="50">depacketize</p>
    <p num="51">public abstract void depacketize(RTPPacket p)</p>
    <p num="52">Called by RTPSM when a RTP packet arrives from the network or on the RTPSocket's output data stream.</p>
    <p num="53">setTransferHandler</p>
    <p num="54">public abstract void setTransferHandler(DePacketizedDataHandler handler)</p>
    <p num="55">
      Used by RTPSM to set the transferHandler of this depacketizer.
      <br/>
      The depacketizer should call the transferData( ) method of its transferHandler when it has finished preparing a application data unit or frame.
      <br/>
      Object passed to the DePacketizedDataHandler is a DepacketizedDataUnit
    </p>
    <p num="56">getMediaType</p>
    <p num="57">public abstract String getMediaType( )</p>
    <p num="58">
      Used by RTPSM to retrieve the media type of the stream.
      <br/>
      This can be one of audio or video and is used to set content type of the RTPSM and the source streams it prepares.
    </p>
    <p num="59">getCodecString</p>
    <p num="60">public abstract String getCodecString( )</p>
    <p num="61">
      Used by the RTPSM to set the codec string type on the data source stream it creates for the handler.
      <br/>
      This returns a string identifying the codec to be used.
      <br/>
      The Manager will locate a codec of type package-prefix.media.codec.mediatype.�codec-string�.Codec.
    </p>
    <p num="62">public class DePacketizedUnitHeader</p>
    <p num="63">
      As illustrated in FIG. 3, a DePacketizedUnit includes a DePacketizedUnitHeader.
      <br/>
      A DePacketizedUnitHeader describes the DePacketizedUnit it belongs to.
      <br/>
      The header parameters are meant to describe the depacketized unit as a whole.
      <br/>
      The header contains certain fields from the RTP header of a packet considered relevant to the decoding and rendering process.
      <br/>
      In cases where the depacketizedUnit encompasses more than one RTP packet, the header needs to be filled correctly with data describing the unit as a whole.
      <br/>
      Programmers may have their own structure of the depacketized data unit or use the default class provided by RTPSM.
    </p>
    <p num="64">The constructor for this class is DePacketizedUnitHeader(long, int, int, int, byte� �, int).</p>
    <p num="65">public DePacketizedUnitHeader(long rtptimestamp,</p>
    <p num="66">
      int markerbit,
      <br/>
      int payloadtype,
      <br/>
      int payloadhdrsize,
      <br/>
      byte payloadhdr� �,
      <br/>
      int payloadsize)
    </p>
    <p num="67">The parameters for this constructor are:</p>
    <p num="68">
      rtptimestamp--The RTP timestamp that came in protocol data units (RTP packets)of this stream.
      <br/>
      These are passed to the handler as they could be used for transferring timing information and synchronization by the handler
      <br/>
      markerbit--The marker bit in the RTP Header of this application data unit or frame. i.e. set to 1 if the marker bit was set for this ADU.
      <br/>
      payloadtype--payload type of the data in this depacketizedunit
      <br/>
      payloadhdr--The payload specific header following the RTP header for this payload type
      <br/>
      payloadsize--Length of data in this DePacketizedUnit
    </p>
    <p num="69">The methods of this class are as follows:</p>
    <p num="70">
      getSize
      <br/>
      public int getSize( )
    </p>
    <p num="71">
      getPayload
      <br/>
      public int getPayload( )
    </p>
    <p num="72">
      getMarker
      <br/>
      public int getMarker( )
    </p>
    <p num="73">
      getTimeStamp
      <br/>
      public long getTimeStamp( )
    </p>
    <p num="74">
      getPayloadHdrSize
      <br/>
      public int getPayloadHdrSize( )
    </p>
    <p num="75">
      getPayloadHdr
      <br/>
      public byte� � getPayloadHdr( )
    </p>
    <p num="76">public interface RTPPayload</p>
    <p num="77">
      This is the interface implemented by all RTP datasources in order to query the payload type of the data received on this datasource.
      <br/>
      If RTP data has not yet been received on this datasource, it will return the field UNKNOWN_PAYLOAD, a constant returned when no data has been received on this datasource.
    </p>
    <p num="78">The methods for this interface are as follows:</p>
    <p num="79">setPayloadType</p>
    <p num="80">
      public abstract void setPayloadType(int type)
      <br/>
      Used to set the payload of this datasource.
      <br/>
      If payload has previously been set, it will be reset to this new payload type.
    </p>
    <p num="81">getPayloadType</p>
    <p num="82">
      public abstract int getPayloadType( )
      <br/>
      Returns the payload type of this datasource
    </p>
    <p num="83">getCodecString</p>
    <p num="84">
      public abstract String getCodecString( )
      <br/>
      Returns the Codec string for the codec to be used to decode data from this datasource
    </p>
    <p num="85">setCodecString</p>
    <p num="86">
      public abstract void setCodecString(String codec)
      <br/>
      Used to set the codec string of the datasource/stream.
      <br/>
      If codec string has been previously set, it will be reset to this new codec string
    </p>
    <p num="87">Content Handlers</p>
    <p num="88">
      The invention provides a design that enables a programmer to plug-in his/her own depacketizer.
      <br/>
      Content handlers for this depacketizer should be available in order to playback this depacketized stream.
      <br/>
      In the preferred embodiment, integration between the depacketizer and content handler is provided when depacketizers implement a pluggable depacketizer interface and handlers are programmed to expect data in a pre-determined format described below in connection with pluggable depacketizers.
    </p>
    <p num="89">
      In the preferred embodiment, a default pre-determined format is provided in RTPSM, but this does not preclude the programmer from using his/her own format of depacketized data.
      <br/>
      Pluggable depacketizer naming and searching conventions are designed according to JMF's player factory architecture and use the same rules for integrating depacketizers into RTPSM.
      <br/>
      For example, to integrate a new depacketizer into JMF,
    </p>
    <p num="90">1) The depacketizer implements the interface defined below.</p>
    <p num="91">2) Install the package containing the new depacketizer class.</p>
    <p num="92">3) Add the package prefix to the content prefix list controlled by the PackageManager.</p>
    <p num="93">4) The DePacketizerFactory queries the PackageManager for the list of content package prefixes and search for &lt;packageprefix&gt;.media.rtp.depacketizer.avpx.DePacketizer class, where x is the RTP payload type for the installed depacketizer.</p>
    <p num="94">
      RTP Content Handlers are JMF players and should implement the methods and semantics of a Java Media Player.
      <br/>
      Integrating new handlers or players is as explained in the JMF specification attached as an Appendix.
      <br/>
      The content type of RTP datasources created by the session manager is one of "rtp/audio" or "rtp/video".
      <br/>
      Manager will consequently search for a handler of the type &lt;package-prefix&gt;.media.content. rtp.audio.Handler or &lt;packageprefix&gt;.media.content.rtp.video.Handler.
    </p>
    <p num="95">
      Note: JMF will not change handlers once a handler has been chosen and created by Manager.
      <br/>
      It is therefore important to note that the loaded Handler should be capable of supporting expected audio or video RTP payload types in order to successfully playback data streams.
    </p>
    <p num="96">
      Manager creates the datasource and sets it on the handler.
      <br/>
      This datasource is a PushDataSource and streams a PushSourceStream as explained in the JMF specification in package javax.media.protocol.
      <br/>
      Handlers can read data from this stream as explained in the specification.
      <br/>
      When the Manager creates a datasource and locates a handler for it, it calls setsource( ) on the handler, passing it the datasource.
      <br/>
      At this time, the handler returns an IncompatibleSourceException if it does not support the datasource.
      <br/>
      All RTP datasources implement the javax.media.rtp.RTPPayload interface.
      <br/>
      The getPayloadType( ) method can be used by the handler to query the payload type of the datasource.
      <br/>
      If the handler does not support playback of the payload type, it may return an IncompatibleSourceException.
      <br/>
      This causes Manager to continue searching for a handler that does support this datasource.
      <br/>
      In this manner, implementations can default to using handlers in the system that do support a certain payload not supported by this handler.
      <br/>
      Note: The RTP datasource can return a payload type only after data has actually been received on it.
      <br/>
      This is not a guaranteed process to happen before the getPayload( ) call is issued.
      <br/>
      In the event that data is not received on the datasource, UNKNOWN_PAYLAOD is returned by the datasource.
      <br/>
      The handler at this time can use its discretion and make a decision to support any payloads expected on this stream or to throw an IncompatibleSourceException.
    </p>
    <p num="97">
      The RTP Session Manager will stream data to the content handler as a PushSourceStream.
      <br/>
      The byte stream read by the handler is a DePacketizedObject converted to a stream of bytes.
      <br/>
      The structure of the object need not be known to the RTPSM.
      <br/>
      It uses the toByteStream( ) method of the interface to stream bytes from the DePacketizedObject to the sourcestream of the handler.
      <br/>
      RTPSM provides a default implementation of the DePacketizedObject interface. i.e. DePacketizedUnit.java.
      <br/>
      Programmers can write depacketizers which create a DePacketizedUnit explained in javax.media.rtp.RTPSessionManager.dePacketizer.DePacketizedUnit.java.
      <br/>
      The toByteStream( ) method has been implemented in DePacketizedUnit.
      <br/>
      Thus the user need not do anything more than create a DePacketizedUnit.
    </p>
    <p num="98">
      Thus, a method and apparatus for providing a selectable depacketizer has been described in conjunction with one or more specific embodiments.
      <br/>
      The invention is defined by the claims and their full scope of equivalents.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>In a computer system having a plurality of depacketizers, a method configured to select a depacketizer for a datastream, said method comprising:</claim-text>
      <claim-text>installing a package containing a new depacketizer class, said package having prefixes; adding said package prefixes to a list controlled by a package manager; receiving a datastream; selecting one of said plurality of depacketizers based on a type of data in said datastream; searching said list for a prefix based on the type of data in said datastream to find a handler configured to interface with said selected depacketizer; providing packets of said datastream to said selected depacketizer; assembling packets into frames; providing said frames to said handler; decoding said frames into media data.</claim-text>
    </claim>
  </claims>
</questel-patent-document>