<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185572B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185572</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185572</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="24961192" extended-family-id="42004994">
      <document-id>
        <country>US</country>
        <doc-number>09074208</doc-number>
        <kind>A</kind>
        <date>19980507</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09074208</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43018457</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>7420898</doc-number>
        <kind>A</kind>
        <date>19980507</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09074208</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>73675996</doc-number>
        <kind>A</kind>
        <date>19961025</date>
        <priority-linkage-type>1</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1996US-08736759</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <term-of-grant>
      <disclaimer/>
    </term-of-grant>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/30        20060101A I20070721RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20070721</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <further-classification sequence="1">
        <text>707999102</text>
        <class>707</class>
        <subclass>999102</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707999103</text>
        <class>707</class>
        <subclass>999103</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30607</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30607</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99943</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99943</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99944</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99944</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>84</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>6</number-of-drawing-sheets>
      <number-of-figures>6</number-of-figures>
      <image-key data-format="questel">US6185572</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method for representing data from non-relational, non-object-oriented datastores as queryable datastore persistent objects</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>BLACKMAN KENNETH R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5794247</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5794247</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="2">
          <text>ABRAHAM ROBERT L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5161225</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5161225</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>BAKER RONALD B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5212787</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5212787</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>BAPAT SUBODH</text>
          <document-id>
            <country>US</country>
            <doc-number>5291583</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5291583</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>BAPAT SUBODH</text>
          <document-id>
            <country>US</country>
            <doc-number>5295256</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5295256</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>BANNON THOMAS J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5297279</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5297279</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>KHOYI DANA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5303379</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5303379</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>FILIP MICHAEL J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5414812</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5414812</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>KHOYI DANA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5421015</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5421015</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>WEINREB DANIEL L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5426747</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5426747</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>BANNON THOMAS J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5437027</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5437027</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>BURNETT COLIN J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5459860</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5459860</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>HENNINGER DEREK P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5499371</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5499371</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>MARTEL PAUL A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5542078</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5542078</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>Kenneth J. Muckenhaupt, Kenneth J., "Preserving Current Assets With Objects on MVS White Paper", Mar. 15, 1996, 21 pages, at http://www.s390.ibm. com/products/wp/wrap.html, Mar. 15, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Jack L. Howe, III, "Objects in IMS Are Closer Than They Appear", IBM Corporation, overheads from presenation at IBM Technical Interchange '95, May 20, 1995.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>"IMS in an Object Oriented World", IBM Corporation, San Jose, CA, Jul. 12, 1995, pp. 1-53.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Jack L. Howe, III, "MS/OO-Overview: Objects in IMS Are Closer Than They Appear", overheads from presentation at SHARE 95, IBM Corporation, Feb. 23, 1995.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>"Voyager/C++ Client/Server Object Management System", Secant Technologies Inc., 1995.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>73675996</doc-number>
              <kind>A</kind>
              <date>19961025</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5794247</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </continuation>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Blackman, Kenneth R.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Howe, III, Jack L.</name>
            <address>
              <address-1>Gilroy, CA, US</address-1>
              <city>Gilroy</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Gates &amp; Cooper</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Kulik, Paul V.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method, apparatus, and article of manufacture for representing data from non-object-oriented external datastores as queryable datastore persistent objects.
      <br/>
      A computerized system in accordance with the principles of the present invention includes a "bridge" for locating a logical unit of data in a non-object-oriented datastore, for retrieving the data from the datastore, and for mapping the data retrieved from the datastore into a datastore persistent object so that the data is encapsulated within the datastore persistent object.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
    <p num="1">
      This application is a continuation of and commonly-assigned patent application Ser.
      <br/>
      No. 08/736,759, entitled "METHOD FOR REPRESENTING DATA FROM NON-RELATIONAL, NON-OBJECT-ORIENTED DATASTORES AS QUERYABLE DATASTORE PERSISTENT OBJECTS," filed on Oct. 25, 1996, by Kenneth R. Blackman and Jack L. Howe III, now U.S. Pat. No. 5,794,247; which application is incorporated by reference herein.
    </p>
    <p num="2">This application is related to the following and commonly-assigned patent applications:</p>
    <p num="3">
      Application Ser.
      <br/>
      No. 08/736,762 entitled "A FRAMEWORK FOR OBJECT-ORIENTED ACCESS TO NON-OBJECT-ORIENTED DATASTORES," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,799,313;
    </p>
    <p num="4">
      Application Ser.
      <br/>
      No. 08/736,763, entitled "A METHOD FOR REPRESENTING NON-OBJECT-ORIENTED DATASTORES USING A COLLECTION OF COLLECTIONS DATA MODEL," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,794,248;
    </p>
    <p num="5">
      Application Ser.
      <br/>
      No. 08/738,294, entitled "A METHOD FOR THE INCREMENTAL PRESENTATION OF NON-OBJECT-ORIENTED DATASTORES USING AN OBJECT-ORIENTED QUERYABLE DATASTORE COLLECTION," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,781,907;
    </p>
    <p num="6">
      Application Ser.
      <br/>
      No. 08/738,104, entitled "A QUERY SYNTAX FOR ACCESSING NON-RELATIONAL, NON-OBJECT-ORIENTED DATASTORES," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,778,379;
    </p>
    <p num="7">
      Application Ser.
      <br/>
      No. 08/738,082, entitled "A QUERY PARSER FOR ACCESSING NON-RELATIONAL, NON-OBJECT-ORIENTED DATASTORES," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,788,358;
    </p>
    <p num="8">
      Application Ser.
      <br/>
      No. 08/736,330, entitled "A METHOD FOR USING A DATASTORE CURSOR FOR THE INCREMENTAL PRESENTATION OF QUERY RESULTS WHEN TRAVERSING IMPLIED COLLECTIONS IN NON-OBJECT-ORIENTED DATASTORES," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,787,436;
    </p>
    <p num="9">
      Application Ser.
      <br/>
      No. 08/736,764, entitled "A METHOD FOR ENCAPSULATING DATA FROM NON-OBJECT-ORIENTED DATASTORES AS DATASTORE PERSISTENT OBJECTS," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,765,161;
    </p>
    <p num="10">
      Application Ser.
      <br/>
      No. 08/738,103, entitled "A METHOD FOR USING QUERYABLE PERSISTENT IDENTIFIERS TO LOCATE DATA FOR DATASTORE PERSISTENT OBJECTS IN NON-OBJECT-ORIENTED DATASTORES," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,765,163;
    </p>
    <p num="11">
      Application Ser.
      <br/>
      No. 08/736,983, entitled "A METHOD FOR INTERFACING QUERYABLE DATASTORE PERSISTENT OBJECTS TO NON-RELATIONAL, NON-OBJECT-ORIENTED DATASTORES," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,761,671;
    </p>
    <p num="12">
      Application Ser.
      <br/>
      No. 08/736,952, entitled "A METHOD FOR MANAGING QUERYABLE DATASTORE PERSISTENT OBJECTS AND QUERYABLE DATASTORE COLLECTIONS IN AN OBJECT-ORIENTED ENVIRONMENT," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,765,162;
    </p>
    <p num="13">
      Application Ser.
      <br/>
      No. 08/736,765, entitled "A METHOD FOR CATALOGING DATASTORE CHARACTERISTICS AND DEFINING AND GENERATING DATASTORE PERSISTENT OBJECTS," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,737,597;
    </p>
    <p num="14">
      Application Ser.
      <br/>
      No. 08/736,922, entitled "A METHOD FOR CAPTURING AND CATALOGING DATASTORE CHARACTERISTICS TO DEFINE DATASTORE PERSISTENT OBJECTS," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,809,508;
    </p>
    <p num="15">
      Application Ser.
      <br/>
      No. 08/738,102, entitled "A METHOD FOR CAPTURING AND CATALOGING SPECIFICATIONS FOR DATASTORE PERSISTENT CLASSES," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,737,598;
    </p>
    <p num="16">
      Application Ser.
      <br/>
      No. 08/738,761, entitled "A METHOD FOR CAPTURING AND CATALOGING PROGRAM CHARACTERISTICS FOR THE USAGE OF DATASTORE PERSISTENT CLASSES," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,764,979; and
    </p>
    <p num="17">
      Application Ser.
      <br/>
      No. 08/738,105, entitled "A METHOD FOR USING A NON-OBJECT-ORIENTED DATASTORE AS A GENERIC PERSISTENT DATASTORE FOR PERSISTENT OBJECTS," filed on same date herewith, by Kenneth R. Blackman and Jack L. Howe III, U.S. Pat. No. 5,809,509;
    </p>
    <p num="18">all of which applications are incorporated by reference herein.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="19">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="20">The present invention relates generally to computerized methods for accessing datastores, and in particular, to a computerized object-oriented method for accessing non-object-oriented datastores.</p>
    <p num="21">2. Description of Related Art</p>
    <p num="22">
      It is well known in the art to use database management systems, such as IBM's IMS (tm)  (Information Management System) database management system, to manage computerized datastores.
      <br/>
      Indeed, IMS (tm)  has been used for decades and remains in use today.
      <br/>
      Currently, there is a need to access such "legacy" datastores using application programs developed by object-oriented programming systems (OOPS).
      <br/>
      However, there are few tools available to assist OOPS programmers.
    </p>
    <p num="23">
      One method for allowing object-oriented application programs to access data in an IMS (tm)  datastore is through transaction wrappering, implemented in such products such as IBM's VisualAge (tm)  IMS Connection product.
      <br/>
      Transaction wrappering creates a class having methods that retrieve data from the IMS (tm)  datastore, create an object embodying the retrieved data, and manipulate the object in an object-oriented application program.
      <br/>
      The problem with this approach is that each object-oriented application requires substantial additional coding, both object-oriented and non-object-oriented, before it is able to access the data in the IMS (tm)  datastore.
    </p>
    <p num="24">
      Another approach to accessing data in a non-relational, non-object-oriented datastore is to translate the non-relational datastore to a relational datastore, and use existing object-oriented programming techniques developed for relational datastores to access the data therein.
      <br/>
      The problem with this approach is that non-relational data, such as the hierarchical data found in an IMS (tm)  datastore, does not map well to a relational datastore.
    </p>
    <p num="25">Thus, there is a need in the art for improved techniques for bridging between non-object-oriented datastores and object-oriented application programs.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="26">
      To overcome the limitations in the prior art described above, and to overcome other limitations that will become apparent upon reading and understanding the present specification, the present invention discloses a method, apparatus, and article of manufacture for representing data from non-object-oriented external datastores as queryable datastore persistent objects.
      <br/>
      A computerized system in accordance with the principles of the present invention includes a "bridge" for locating a logical unit of data in a non-object-oriented datastore, for retrieving the data from the datastore, and for mapping the data retrieved from the datastore into a datastore persistent object so that the data is encapsulated within the datastore persistent object.
    </p>
    <p num="27">
      Various advantages and features of novelty which characterize the invention are pointed out with particularity in the claims annexed hereto and form a part hereof.
      <br/>
      However, for a better understanding of the invention, its advantages, and the objects obtained by its use, reference should be made to the drawings which form a further part hereof, and to accompanying descriptive matter, in which there is illustrated and described specific examples of an apparatus in accordance with the invention.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="28">
      Referring now to the drawings in which like reference numbers represent corresponding parts throughout:
      <br/>
      FIG. 1 is a block diagram illustrating an exemplary hardware environment used to implement the preferred embodiment of the invention;
      <br/>
      FIG. 2 is a block diagram illustrating the collection of collections data model used in the present invention;
      <br/>
      FIG. 3 is a block diagram illustrating an exemplary datastore collection of the bridge according to the present invention;
      <br/>
      FIG. 4 is a block diagram illustrating the operation of the bridge according to the present invention;
      <br/>
      FIG. 5 is a block diagram illustrating the structure and relationship between a datastore persistent object and its persistent identifier (PID) according to the present invention; and
      <br/>
      FIG. 6 is a block diagram illustrating the operation of the instance manager according to the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="29">
      In the following description of the preferred embodiment, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration a specific embodiment in which the invention may be practiced.
      <br/>
      It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.
    </p>
    <p num="30">Overview</p>
    <p num="31">
      The present invention represents data from non-object-oriented external datastores as queryable datastore persistent objects.
      <br/>
      A computerized system in accordance with the principles of the present invention includes a "bridge" for locating a logical unit of data in a non-object-oriented datastore, for retrieving the data from the datastore, and for mapping the data retrieved from the datastore into a datastore persistent object so that the data is encapsulated within the datastore persistent object.
    </p>
    <p num="32">Hardware Environment</p>
    <p num="33">
      FIG. 1 is a block diagram illustrating an exemplary hardware environment used to implement the preferred embodiment of the invention.
      <br/>
      A workstation or terminal 100 communicates with a server computer 102.
      <br/>
      Both the workstation 100 and the server computer 102 are typically comprised of one or more processors, random access memory (RAM), read-only memory (ROM), and other components such data storage devices and data communications devices.
    </p>
    <p num="34">
      The workstation 100 executes one or more computer programs 104 operating under the control of an operating system 106, such as the MVS (tm) , VM (tm) , AIX (tm) , OS/2 (tm) , Windows (tm) , Macintosh (tm) , AS/400 (tm) , or UNIX (tm)  operating systems.
      <br/>
      These computer programs 104 transmit commands to the server computer 102 for performing various functions and receive data from the server computer 102 in response to the commands.
    </p>
    <p num="35">
      The server computer 102 also operates under the control of an operating system 108, such as the MVS (tm) , VM (tm) , AIX (tm) , OS/2 (tm) , Windows (tm) , Macintosh (tm) , AS/400 (tm) , or UNIX (tm)  operating systems.
      <br/>
      The server computer 102 executes one or more computer programs 110 and 112 under the control of the operating system 108.
      <br/>
      These computer programs 110 and 112 receive commands from the workstation 100 for performing various functions and transmit data to the workstations 100 in response to the commands.
    </p>
    <p num="36">
      The server computer 102 manages one or more external databases or datastores 114 stored on one or more data storage devices 116 (such as a fixed or hard disk drive, a floppy disk drive, a CD-ROM drive, a tape drive, or other device).
      <br/>
      In the preferred embodiment, the external datastore 114 comprises an IMS (tm)  datastore managed by an IMS (tm)  database management system (DBMS) product offered by IBM Corporation.
      <br/>
      Those skilled in the art will recognize, however, that the present invention may be applied to any datastore and associated database management system.
    </p>
    <p num="37">
      The present invention is generally implemented using five major components executed by the workstation 100 and the server computer 102, i.e., object-oriented application program 104, workstation operating system 106, server operating system 108, bridge 110, and datastore manager (DSM) 112, wherein each of these components comprise one or more computer programs.
      <br/>
      The object-oriented application program 104 performs application functions; the workstation operating system 106 controls the operation of the workstation 100; the server operating system 108 controls the operation of the server computer 102; the bridge 110 materializes data retrieved from the external database 114 as objects; and the datastore manager 112 controls access to the external database 114.
    </p>
    <p num="38">
      Generally, these computer programs 104-112 are all tangibly embodied in or retrievable from a computer-readable medium, e.g., a data storage device or a data communications device.
      <br/>
      Moreover, the computer programs are all comprised of instructions which, when read and executed by the workstation 100 and/or server computer 102, causes the workstation 100 and/or server computer 102 to perform the steps necessary to implement and/or use the present invention.
    </p>
    <p num="39">Those skilled in the art will recognize that any combination of the above components, or any number of different components, including computer programs, peripherals, and other devices, may be used to implement the present invention, so long as similar functions are performed thereby.</p>
    <p num="40">Datastore Model</p>
    <p num="41">
      FIG. 2 is a block diagram illustrating the collection of collections data model used in the present invention.
      <br/>
      Data retrieved from the non-object-oriented external datastore 114 is modeled as a "collection of object collections" in the bridge 110.
      <br/>
      Where the external data has a simple structure, each record is encapsulated as an object, which becomes a member of an object collection.
      <br/>
      Where the records are hierarchical in structure, that hierarchical structure is modeled by creating object collections and then hierarchically connecting the related object collections.
      <br/>
      Other complex logical records can be modeled as a hierarchy of object collections.
      <br/>
      A single collection of collections is materialized for each datastore, e.g., the object model of two flat files is a model having two collections of collections.
    </p>
    <p num="42">
      Block 200 represents the logical hierarchical structure of the data as stored in the external datastore 114, and block 202 represents the logical "collection of object collections" structure created from the data retrieved from the external datastore 114.
      <br/>
      The bridge 110 translates the data between the differing formats and structures in blocks 200 and 202.
    </p>
    <p num="43">
      In the logical hierarchical structure of block 200, parent record A (204) has children records B (206) and C (208), and child record C (208) is also a parent of children records D (210) and E (212).
      <br/>
      There may also be multiple instances of parent record A (214 and 216).
    </p>
    <p num="44">
      Similarly, in the logical "collection of object collections" structure of block 202, parent object A (218) has children objects B (220) and C (222), and child object C (222) is also a parent of children objects D (224) and E (226).
      <br/>
      Further, there are multiple instances of parent object A (228 and 230).
      <br/>
      Each of these objects is a datastore persistent object (DPO) that encapsulates a logical unit of data, i.e., record, retrieved from the non-object-oriented datastore, and includes member functions for manipulating the encapsulated data.
      <br/>
      Thus, the difference between blocks 200 and 202 is that each record A, B, or C in block 200 is represented by a DPO in block 202, and the hierarchy in block 200 is represented by the collections of object collections in block 202.
    </p>
    <p num="45">Datastore Collection</p>
    <p num="46">
      The bridge 110 manages "datastore collections", which are the foundation of the "collections of object collections" data model.
      <br/>
      The members of the datastore collection are the DPOs.
      <br/>
      The datastore collection also includes a query evaluator having a query syntax and a query parser, a queryable datastore cursor, and an associated result collection with a cursor.
      <br/>
      For complex queries, queries may be sub-divided.
      <br/>
      Results for the queries are presented in user-specifiable increments, which permits the delivery of large result collections while controlling use of memory.
    </p>
    <p num="47">
      FIG. 3 is a block diagram illustrating an exemplary datastore collection 300 of the bridge 110 according to the present invention.
      <br/>
      The datastore collection 300 includes a query evaluator 302 for receiving a query from the application program 104, wherein the query evaluator 302 comprises a query syntax and a query parser.
      <br/>
      The query evaluator 302 parses the query request in accordance with the query syntax and stores the parsed request in a parse table in a query object 304.
      <br/>
      A datastore cursor 306 retrieves the parsed query from the query object 304 and provides the parsed query to an instance manager 308, which coordinates requests from the application program 104 with the datastore collection 300 and the external datastore 114.
      <br/>
      The instance manager 308 uses a schema mapper 310 to interface with the datastore manager 112.
      <br/>
      The datastore manager 112 retrieves data from the external datastore 114 on the external storage device 116 and returns the requested data to the schema mapper 310.
      <br/>
      The schema mapper 310 translates common elements between the requested data retrieved from the external datastore 114 and a DPO 312, which results in the requested data being encapsulated in the DPO 312.
      <br/>
      The schema mapper 310 returns the DPO 312 through the instance manager 308 to the datastore cursor 306 which stores the DPO 312 in the result collection 314.
      <br/>
      Generally, the result collection 314 comprises one or more DPOs 316, 318, and 320.
    </p>
    <p num="48">
      The datastore cursor 306 populates the result collection 314 so that the application program 104 can incrementally access the query result.
      <br/>
      Because the number of data items or records requested by the query may be large, the datastore cursor 306 only populates the result collection 314 with a specified number of DPOs 316, 318, and 320 that correspond to the query request.
      <br/>
      A pointer to the current DPOs 316, 318, or 320 is maintained by the cursor 322, and the size of the result collection 314 is determined by a size variable 324.
    </p>
    <p num="49">If the application program 104 needs to access more data items or records that satisfy the query, the datastore cursor 306 deletes one or more of the DPOs 316, 318, and 320 from the result collection 314 and requests the instance manager 308, through the schema mapper 310, to retrieve additional DPOs 312, up to the number indicated in the size variable 324, into the result collection 314.</p>
    <p num="50">
      In addition to populating a DPO 312 with data from the external datastore 114, the schema mapper 310 updates the external datastore 114 with changed data from the DPO 312.
      <br/>
      The schema mapper 310 may add data to the external datastore 114 when a new DPO 312 is created, and the schema mapper 310 may delete corresponding data from the external datastore 114 when a existing DPO 312 is deleted.
    </p>
    <p num="51">
      The schema mapper 310 translates queries to specific instructions for the datastore manager 112.
      <br/>
      Generally, these instructions comprise: SELECT, UPDATE, INSERT and DELETE, wherein the SELECT instruction retrieves data from the external datastore 114 via the datastore manager 112 for a DPO 312; the UPDATE instruction, following a SELECT, saves changed data from the DPO 312 into the external datastore 114 via the datastore manager 112; the INSERT instruction saves new data from the DPO 312 into the external datastore 114 via the datastore manager 112; and the DELETE instruction deletes the DPO 312 and its corresponding data from the external datastore 114 via the datastore manager 112.
    </p>
    <p num="52">Datastore Persistent Objects (DPOs)</p>
    <p num="53">
      The members, or elements, of the datastore collection 300 are queryable DPOs 316, 318, and 320 that encapsulate external data, i.e., records retrieved from the external datastore 114, with associated methods to move data with data type integrity between the DPOs 316, 318, and 320, and the records of the external datastore 114.
      <br/>
      Thus, a DPO 316, 318, and 320 makes non-object-oriented data accessible as "base class objects" that may be used or wrappered by other classes in an object-oriented programming system.
      <br/>
      Further, the data being encapsulated by the DPOs 316, 318, and 320 may or may not be concurrently shared or updated between object-oriented and non-object-oriented applications, depending on the characteristics of the underlying datastore 114.
    </p>
    <p num="54">
      The bridge 110 thus comprises a queryable persistence implementation that can be used to access data in non-object-oriented datastores 114.
      <br/>
      The bridge 110 provides a datastore persistent object class to wrapper data retrieved from the external datastore 114, a queryable persistent identifier (PID) used to specify information used to locate the data in the external datastore 114 needed to populate the particular DPO 312, and a schema mapper class used to obtain the required data from the external datastore 114 and translate or transfer it into the format of the particular DPO 312.
    </p>
    <p num="55">
      FIG. 4 is a block diagram illustrating the operation of the bridge 110 according to the present invention.
      <br/>
      The application program 104 passes a query request to the datastore collection 300.
      <br/>
      The datastore collection 300 evaluates the query and passes control to the datastore cursor 306 for processing.
      <br/>
      The datastore cursor 306 creates a DPO 312 and its associated PID 400.
      <br/>
      The PID 400 is used to specify the query information needed to locate the data in the external datastore 114.
    </p>
    <p num="56">
      The DPO 312 and PID 400 are passed to the instance manager 308 who requests that the schema mapper 310 retrieve the data via the datastore manager 112 for storing into the DPO 312.
      <br/>
      The schema mapper 310 looks at the DPO 312 accompanying PID 400 which has information from the query object 304 for locating data.
      <br/>
      The schema mapper 310 provides the input/output commands to the datastore manager 112 using information from a subschema mapper 402 and program specification block (PSB) 404. The schema mapper 310 receives the located logical unit of data from the datastore manager 112 and maps the located data into the DPO 312, thereby "wrappering" the logical unit of data.
      <br/>
      Upon completion of the operation, the DPO 312 then encapsulates the data retrieved by the schema mapper 310.
    </p>
    <p num="57">Persistent Identifier (PID)</p>
    <p num="58">FIG. 5 is a block diagram illustrating the structure and relationship between a DPO 312 and its PID 400 according to the present invention, wherein the PID 400 has fields for storing the datastore type 500, locator 502, search indicator 504, key 506, and locator validity 508, and the DPO 312 has a memory status 510 and a persistence status 512.</p>
    <p num="59">
      The datastore type field 500 indicates the datastore type, e.g., IMS (tm) , VSAM (tm) , etc. The locator field 502 stores the relevant query information from the query object 304.
      <br/>
      The search indicator field 504 indicates the method of retrieving additional DPOs, i.e., a FIRST, NEXT, or KEY retrieval, wherein a FIRST or NEXT retrieves additional datastore persistent objects through the locator field 502 and a KEY indicates that a single instance will be retrieved through the key field 506.
      <br/>
      The key field 506 stores the key to be used to locate data.
      <br/>
      The locator validity field 508 indicates whether the locator field 502 and key field 506 have been validated by the datastore manager 112.
    </p>
    <p num="60">
      The memory status 510 is either active, indicating that data from the external datastore 114 has been materialized in the DPO 312, or passive, indicating that the DPO 312 contains no such data.
      <br/>
      The persistence status 512 is a relative comparison of the data contained in the DPO 312 and the external datastore 114, indicating whether the data has been changed or not within the DPO 312.
    </p>
    <p num="61">Instance Manager</p>
    <p num="62">FIG. 6 is a block diagram illustrating the operation of the instance manager 308 according to the present invention.</p>
    <p num="63">
      In the run-time environment, the datastore collections 300 and DPOs 316, 318, and 320 are managed (e.g., created, tracked, materialized, destroyed, and garbage collected) by the instance manager 308.
      <br/>
      The instance manager 308 also participates in the unit-of-work between the application program 104 being served and the external datastore 114.
    </p>
    <p num="64">
      Although the interface to the application program 104 remains constant, the level of service provided by the instance manager 308 will vary according to the characteristics of the external datastore 114.
      <br/>
      The instance manager 308 will exploit the capabilities of the external datastore 114 and the datastore manager 112 wherever possible, e.g., with regard to query functions, concurrency, security, etc.
    </p>
    <p num="65">
      The instance manager 308 uses service classes to isolate some of its functions, system services object (SSO) 600, interface object services (IOS) 602, and subschema mapper 402.
      <br/>
      The SSO 600 serves as a "factory" for creating DPO 312 and datastore collections 300 requested by query objects 304.
      <br/>
      The SSO 600 further serves as a transaction manager for the unit-of-work.
    </p>
    <p num="66">
      The SSO 600 receives a unit-of-work request from the application program 104.
      <br/>
      The SSO 600 creates a subschema mapper 402 and opens a PSB 404 for the unit-of-work request.
      <br/>
      The SSO 600 interfaces to the datastore manager 112 through the IOS 602.
      <br/>
      The IOS 602 opens and closes the connection to the datastore manager 112.
    </p>
    <p num="67">
      Using the schema mapper 310, the instance manager 308 populates the datastore collection 300 with DPOs 316, 318, and 320 that encapsulate data retrieved from the external datastore 114 via the datastore manager 112.
      <br/>
      The schema mapper 310 updates the external datastore 114 with changed data from the DPOs 316, 318, and 320, and adds or deletes the associated elements from the external datastore 114 when the DPOs 316, 318, and 320 are added or deleted.
    </p>
    <p num="68">
      The SSO 600 propagates a request to complete a unit-of-work to the instance manager 308, the datastore collection 300, the schema mapper 310, and the DPOs 316, 318, and 320, so as to coordinate the requests with the datastore manager 112 to maintain the integrity of the external datastore 114.
      <br/>
      Upon completion of the unit-of-work, the instance manager 308 deletes the DPOs 316, 318 and 320, the datastore collection 300, and schema mapper 310, from the memory of the server computer 102.
    </p>
    <p num="69">Conclusion</p>
    <p num="70">
      This concludes the description of the preferred embodiment of the invention.
      <br/>
      The following paragraphs describe some alternative methods of accomplishing the same objects.
    </p>
    <p num="71">
      In alternative embodiments of the present invention, other types and configurations of computers could be used.
      <br/>
      For example, the invention need not be restricted to client-server configurations.
      <br/>
      In addition, mainframes, minicomputers, or personal computers, could be used with the present invention.
    </p>
    <p num="72">
      In alternative embodiments of the present invention, other types and configurations of computer programs could be used.
      <br/>
      For example, the invention need not be restricted to client-server configurations.
    </p>
    <p num="73">
      In alternative embodiments of the present invention, other database management systems could be used.
      <br/>
      For example, the invention need not be restricted to IMS (tm)  database management systems.
      <br/>
      In addition, the present invention could be used to model other types of information.
    </p>
    <p num="74">
      In summary, a method, apparatus and article of manufacture for representing data from non-object-oriented external datastores as queryable datastore persistent objects has been described.
      <br/>
      A computerized system in accordance with the principles of the present invention includes a "bridge" for locating a logical unit of data in a non-object-oriented datastore, for retrieving the data from the datastore, and for mapping the data retrieved from the datastore into a datastore persistent object so that the data is encapsulated within the datastore persistent object.
    </p>
    <p num="75">
      The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description.
      <br/>
      It is not intended to be exhaustive or to limit the invention to the precise form disclosed.
      <br/>
      Many modifications and variations are possible in light of the above teaching.
      <br/>
      It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A computerized method of data retrieval, comprising the steps of:</claim-text>
      <claim-text>creating a data structure in a memory of a computer for use by a computer program executed by the computer, wherein the data structure comprises one or more queryable objects; encapsulating data retrieved from a non-relational, non-object-oriented datastore in the objects, wherein each of the objects includes one or more associated methods to move data between the objects and the datastore.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 above, wherein the objects are datastore persistent objects.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1 above, wherein the objects comprise base class objects that are used by other classes in an object-oriented programming system.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1 above, wherein the objects comprise base class objects that are wrappered by other classes in an object-oriented programming system.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1 above, wherein the data encapsulated by the objects is concurrently shared between object-oriented and non-object-oriented application programs.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 1 above, wherein the data is concurrently shared through the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 1 above, wherein the data encapsulated by the objects is concurrently updated between object-oriented and non-object-oriented computer programs.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 1 above, wherein the data is concurrently updated through the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method of claim 1 above, wherein each object has an associated identifier that is used to specify information used to locate the data in the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 9 above, wherein each identifier is comprised of one or more fields selected from the group comprising a datastore type, locator, search indicator, key, and locator validity.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 10 above, wherein the datastore type indicates the non-relational, non-object-oriented datastore's type.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method of claim 10 above, wherein the locator stores the relevant query information.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 10 above, wherein the search indicator indicates a method for retrieving additional data from the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 13 above, wherein the search indicator indicates that additional objects are retrieved through the locator.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 13 above, wherein the search indicator indicates that additional objects are retrieved through the key.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 13 above, wherein the key stores a value used to locate the data.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 10 above, wherein the locator validity indicates whether the locator and key have been validated by the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 1 above, wherein each object further includes one or more fields selected from a group comprising a memory status and persistence status.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 18 above, wherein an active memory status indicates that data from the non-relational, non-object-oriented datastore has been materialized in the object.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of claim 18 above, wherein a passive memory status indicates that the object contains no data.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The method of claim 18 above, wherein the persistence status is a relative comparison of the data contained in the object and the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A data structure stored in a memory for use by a computer program executed by a computer, the data structure comprising one or more queryable objects that encapsulate data retrieved from a non-relational, non-object-oriented datastore, and each of the objects including one or more associated methods to move data between the objects and the datastore.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The data structure of claim 22 above, wherein the objects are datastore persistent objects.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The data structure of claim 22 above, wherein the objects comprise base class objects that are used by other classes in an object-oriented programming system.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The data structure of claim 22 above, wherein the objects comprise base class objects that are wrappered by other classes in an object-oriented programming system.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The data structure of claim 22 above, wherein the data encapsulated by the objects is concurrently shared between object-oriented and non-object-oriented application programs.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The data structure of claim 22 above, wherein the data is concurrently shared through the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The data structure of claim 22 above, wherein the data encapsulated by the objects is concurrently updated between object-oriented and non-object-oriented computer programs.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The data structure of claim 22 above, wherein the data is concurrently updated through the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The data structure of claim 22 above, wherein each object has an associated identifier that is used to specify information used to locate the data in the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. The data structure of claim 30 above, wherein each identifier is comprised of one or more fields selected from the group comprising a datastore type, locator, search indicator, key, and locator validity.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The data structure of claim 31 above, wherein the datastore type indicates the non-relational, non-object-oriented datastore's type.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The data structure of claim 31 above, wherein the locator stores the relevant query information.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The data structure of claim 31 above, wherein the search indicator indicates a method for retrieving additional data from the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. The data structure of claim 34 above, wherein the search indicator indicates that additional objects are retrieved through the locator.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. The data structure of claim 34 above, wherein the search indicator indicates that additional objects are retrieved through the key.</claim-text>
    </claim>
    <claim num="37">
      <claim-text>37. The data structure of claim 34 above, wherein the key stores a value used to locate the data.</claim-text>
    </claim>
    <claim num="38">
      <claim-text>38. The data structure of claim 31 above, wherein the locator validity indicates whether the locator and key have been validated by the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="39">
      <claim-text>39. The data structure of claim 22 above, wherein each object further includes one or more fields selected from a group comprising a memory status and persistence status.</claim-text>
    </claim>
    <claim num="40">
      <claim-text>40. The data structure of claim 39 above, wherein an active memory status indicates that data from the non-relational, non-object-oriented datastore has been materialized in the object.</claim-text>
    </claim>
    <claim num="41">
      <claim-text>41. The data structure of claim 39 above, wherein a passive memory status indicates that the object contains no data.</claim-text>
    </claim>
    <claim num="42">
      <claim-text>42. The data structure of claim 39 above, wherein the persistence status is a relative comparison of the data contained in the object and the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="43">
      <claim-text>43. A computerized data retrieval apparatus, comprising: a computer having a memory;</claim-text>
      <claim-text>and a data structure stored in the memory for use by a computer program executed by the computer, wherein the data structure comprises one or more queryable objects that encapsulate data retrieved from a non-relational, non-object-oriented datastore, and each of the objects includes one or more associated methods to move data between the objects and the datastore.</claim-text>
    </claim>
    <claim num="44">
      <claim-text>44. The apparatus of claim 43 above, wherein the objects are datastore persistent objects.</claim-text>
    </claim>
    <claim num="45">
      <claim-text>45. The apparatus of claim 43 above, wherein the objects comprise base class objects that are used by other classes in an object-oriented programming system.</claim-text>
    </claim>
    <claim num="46">
      <claim-text>46. The apparatus of claim 43 above, wherein the objects comprise base class objects that are wrappered by other classes in an object-oriented programming system.</claim-text>
    </claim>
    <claim num="47">
      <claim-text>47. The apparatus of claim 43 above, wherein the data encapsulated by the objects is concurrently shared between object-oriented and non-object-oriented application programs.</claim-text>
    </claim>
    <claim num="48">
      <claim-text>48. The apparatus of claim 43 above, wherein the data is concurrently shared through the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="49">
      <claim-text>49. The apparatus of claim 43 above, wherein the data encapsulated by the objects is concurrently updated between object-oriented and non-object-oriented computer programs.</claim-text>
    </claim>
    <claim num="50">
      <claim-text>50. The apparatus of claim 43 above, wherein the data is concurrently updated through the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="51">
      <claim-text>51. The apparatus of claim 43 above, wherein each object has an associated identifier that is used to specify information used to locate the data in the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="52">
      <claim-text>52. The apparatus of claim 51 above, wherein each identifier is comprised of one or more fields selected from the group comprising a datastore type, locator, search indicator, key, and locator validity.</claim-text>
    </claim>
    <claim num="53">
      <claim-text>53. The apparatus of claim 52 above, wherein the datastore type indicates the non-relational, non-object-oriented datastore's type.</claim-text>
    </claim>
    <claim num="54">
      <claim-text>54. The apparatus of claim 52 above, wherein the locator stores the relevant query information.</claim-text>
    </claim>
    <claim num="55">
      <claim-text>55. The apparatus of claim 52 above, wherein the search indicator indicates a apparatus for retrieving additional data from the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="56">
      <claim-text>56. The apparatus of claim 55 above, wherein the search indicator indicates that additional objects are retrieved through the locator.</claim-text>
    </claim>
    <claim num="57">
      <claim-text>57. The apparatus of claim 55 above, wherein the search indicator indicates that additional objects are retrieved through the key.</claim-text>
    </claim>
    <claim num="58">
      <claim-text>58. The apparatus of claim 55 above, wherein the key stores a value used to locate the data.</claim-text>
    </claim>
    <claim num="59">
      <claim-text>59. The apparatus of claim 52 above, wherein the locator validity indicates whether the locator and key have been validated by the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="60">
      <claim-text>60. The apparatus of claim 43 above, wherein each object further includes one or more fields selected from a group comprising a memory status and persistence status.</claim-text>
    </claim>
    <claim num="61">
      <claim-text>61. The apparatus of claim 60 above, wherein an active memory status indicates that data from the non-relational, non-object-oriented datastore has been materialized in the object.</claim-text>
    </claim>
    <claim num="62">
      <claim-text>62. The apparatus of claim 60 above, wherein a passive memory status indicates that the object contains no data.</claim-text>
    </claim>
    <claim num="63">
      <claim-text>63. The apparatus of claim 60 above, wherein the persistence status is a relative comparison of the data contained in the object and the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="64">
      <claim-text>64. A program storage medium readable by a computer having a memory, the medium tangibly embodying one or more instructions executable by the computer to perform method steps for retrieving data from a non-relational, non-object-oriented datastore, the method comprising the steps of: creating a data structure in the memory of the computer for use by a computer program executed by the computer, wherein the data structure comprises one or more queryable objects;</claim-text>
      <claim-text>and encapsulating data retrieved from a non-relational, non-object-oriented datastore in the objects, wherein each of the objects includes one or more associated methods to move data between the objects and the datastore.</claim-text>
    </claim>
    <claim num="65">
      <claim-text>65. The program storage medium of claim 64 above, wherein the objects are datastore persistent objects.</claim-text>
    </claim>
    <claim num="66">
      <claim-text>66. The program storage medium of claim 64 above, wherein the objects comprise base class objects that are used by other classes in an object-oriented programming system.</claim-text>
    </claim>
    <claim num="67">
      <claim-text>67. The program storage medium of claim 64 above, wherein the objects comprise base class objects that are wrappered by other classes in an object-oriented programming system.</claim-text>
    </claim>
    <claim num="68">
      <claim-text>68. The program storage medium of claim 64 above, wherein the data encapsulated by the objects is concurrently shared between object-oriented and non-object-oriented application programs.</claim-text>
    </claim>
    <claim num="69">
      <claim-text>69. The program storage medium of claim 64 above, wherein the data is concurrently shared through the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="70">
      <claim-text>70. The program storage medium of claim 64 above, wherein the data encapsulated by the objects is concurrently updated between object-oriented and non-object-oriented computer programs.</claim-text>
    </claim>
    <claim num="71">
      <claim-text>71. The program storage medium of claim 64 above, wherein the data is concurrently updated through the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="72">
      <claim-text>72. The program storage medium of claim 64 above, wherein each object has an associated identifier that is used to specify information used to locate the data in the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="73">
      <claim-text>73. The program storage medium of claim 72 above, wherein each identifier is comprised of one or more fields selected from the group comprising a datastore type, locator, search indicator, key, and locator validity.</claim-text>
    </claim>
    <claim num="74">
      <claim-text>74. The program storage medium of claim 73 above, wherein the datastore type indicates the non-relational, non-object-oriented datastore's type.</claim-text>
    </claim>
    <claim num="75">
      <claim-text>75. The program storage medium of claim 73 above, wherein the locator stores the relevant query information.</claim-text>
    </claim>
    <claim num="76">
      <claim-text>76. The program storage medium of claim 73 above, wherein the search indicator indicates a program storage medium for retrieving additional data from the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="77">
      <claim-text>77. The program storage medium of claim 76 above, wherein the search indicator indicates that additional objects are retrieved through the locator.</claim-text>
    </claim>
    <claim num="78">
      <claim-text>78. The program storage medium of claim 76 above, wherein the search indicator indicates that additional objects are retrieved through the key.</claim-text>
    </claim>
    <claim num="79">
      <claim-text>79. The program storage medium of claim 76 above, wherein the key stores a value used to locate the data.</claim-text>
    </claim>
    <claim num="80">
      <claim-text>80. The program storage medium of claim 73 above, wherein the locator validity indicates whether the locator and key have been validated by the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
    <claim num="81">
      <claim-text>81. The program storage medium of claim 64 above, wherein each object further includes one or more fields selected from a group comprising a memory status and persistence status.</claim-text>
    </claim>
    <claim num="82">
      <claim-text>82. The program storage medium of claim 81 above, wherein an active memory status indicates that data from the non-relational, non-object-oriented datastore has been materialized in the object.</claim-text>
    </claim>
    <claim num="83">
      <claim-text>83. The program storage medium of claim 81 above, wherein a passive memory status indicates that the object contains no data.</claim-text>
    </claim>
    <claim num="84">
      <claim-text>84. The program storage medium of claim 81 above, wherein the persistence status is a relative comparison of the data contained in the object and the non-relational, non-object-oriented datastore.</claim-text>
    </claim>
  </claims>
</questel-patent-document>