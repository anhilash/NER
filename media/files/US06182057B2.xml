<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182057B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182057</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182057</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26574042" extended-family-id="21367739">
      <document-id>
        <country>US</country>
        <doc-number>08990050</doc-number>
        <kind>A</kind>
        <date>19971212</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08990050</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>21914763</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>JP</country>
        <doc-number>33199996</doc-number>
        <kind>A</kind>
        <date>19961212</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1996JP-0331999</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>JP</country>
        <doc-number>33753597</doc-number>
        <kind>A</kind>
        <date>19971208</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997JP-0337535</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  15/18        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>18</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06N   3/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>N</subclass>
        <main-group>3</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06N   3/12        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>N</subclass>
        <main-group>3</main-group>
        <subgroup>12</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>706013000</text>
        <class>706</class>
        <subclass>013000</subclass>
      </main-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06N-003/12G</text>
        <section>G</section>
        <class>06</class>
        <subclass>N</subclass>
        <main-group>003</main-group>
        <subgroup>12G</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06N-003/126</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>N</subclass>
        <main-group>3</main-group>
        <subgroup>126</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>26</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>24</number-of-drawing-sheets>
      <number-of-figures>31</number-of-figures>
      <image-key data-format="questel">US6182057</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Device, method, and program storage medium for executing genetic algorithm</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>KOZA JOHN R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5148513</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5148513</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>SYSWERDA GILBERT P</text>
          <document-id>
            <country>US</country>
            <doc-number>5319781</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5319781</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KOFORD JAMES S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5793644</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5793644</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SMITH BRIAN L</text>
          <document-id>
            <country>US</country>
            <doc-number>5819244</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5819244</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>GABRINER DANIEL C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5848403</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5848403</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>GENTRIC PHILIPPE</text>
          <document-id>
            <country>US</country>
            <doc-number>5940533</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5940533</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>MATSUMOTO SHUNJI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5974355</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5974355</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>SHACKLETON MARK A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5978507</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5978507</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Nakata et al., "Image Reconstruction from Projections Using a Genetic Algorithm", IEEE Nuclear Science Symposium and Medical Imaging Conference, Oct.-No. 1994.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Saito et al., "Shape Modeling of Multiple Objects from Shading Images Using Genetic Algorithms", IEEE Inter. Conf. on Systems, Man and Cybernetics, Oct. 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>Tompkins et al., "Genetic Algorithms in Optimizing Simulated Systems", IEEE Proceedings of the 1995 Winter Simulation Conference, 1995.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="4">
          <text>Binglin et al., "A Genetic Algorithm for Diagnosis Problem solving", IEEE International Conference On Systems, Man and Cybernetics, Oct. 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="5">
          <text>Haida, "Genetic Algorithms Approch to Voltage Optimization", IEEE Pproceedings of the 1st Inter-forum on Applications of Neural Networks to Power Systems, Jul. 1991.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="6">
          <text>Skomorokhov, Alexander, "Genetic Algorithms=APL2 Implementation and a Real Life Application", Proceedings of the APLm96 Conf. on Designing the Future, Aug. 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="7">
          <text>Logar et al, "Implementation of Massively Parallel Genetic Algorthms on the Maspar MP-1", Proceedings of the 1992 ACM/SIGAPP Symposium on Applied Computing (vol.-II), Mar. 1992.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="8">
          <text>Shimodaria, Hisashi, A New Genetic Algorithm Using Large Mutation Rates and Population-Elitist Selection (GALME) IEEE Proceedings of 8th Inter. Conf. on Tools with Artificial Intel., Nov. 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="9">
          <text>Juric, Mark, "Opotimizing Genetic Algorithm Parameters for Multiple Fault Diagnosis Applications", IEEE Proceedings of the 10th Conference on Artificial Intelligence for Applications., Mar. 1994.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="10">
          <text>D. Goldberg, "Gentic Algorithms in Search Optimization, and Machine Learning", A Gentle Introduction to Gentle Algorithms, January 1989, pp. 1-25.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Fujitsu Limited</orgname>
            <address>
              <address-1>Kawasaki, JP</address-1>
              <city>Kawasaki</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>FUJITSU</orgname>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Kikuchi, Yasuhiro</name>
            <address>
              <address-1>Kawasaki, JP</address-1>
              <city>Kawasaki</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Doi, Hirofumi</name>
            <address>
              <address-1>Kawasaki, JP</address-1>
              <city>Kawasaki</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Staas &amp; Halsey</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Hafiz, Tariq R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A genetic algorithm executing device, in which search of a genetic algorithm is improved, sets a distribution of characters at each position of character strings represent candidates of solution, obtain the degree of disorder at each position by the distributions of characters, set a larger mutation rate at the position of which degree of disorder is higher.
      <br/>
      This device performs a mutation operation on the character strings according to the mutation rates.
      <br/>
      This device generates the new character strings by selecting positions of which degrees of disorder are higher than a predetermined value, and changing the character at the selected positions.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">The present invention relates to a genetic algorithm executing device and method for efficiently searching for a solution using a genetic algorithm (GA), and a program storage medium thereof.</p>
    <p num="3">2. Description of the Related Art</p>
    <p num="4">
      Genetic algorithms are application technologies inspired by mechanisms of inheritance and evolution of living things.
      <br/>
      In the evolution of living things, genomic changes like crossovers of chromosomes, mutations of genes, etc. may occur when new individuals (children) are born from old ones (parents).
      <br/>
      An individual which can not adapt to the environment fails to survive after natural selection on the other hand an adaptable one survives and becomes a parent of a new descendant.
      <br/>
      Such adaptability is determined by their genomic properties.
    </p>
    <p num="5">
      In a genetic algorithm, a candidate of solution to an optimization problem is represented as a character string (corresponding to a chromosome which is a one-dimensional string of genes), and a solution is searched by repeating genetic operations including selection, crossover, mutation, etc.
      <br/>
      In this specification, we use the word "character" not only in the sense of alphabets but also in the universal sense of numbers, symbols, . . . , etc.
    </p>
    <p num="6">
      Here, evolution of living things corresponds to a process in which a value of the objective function (which is the function evaluated to determine the suitability for the optimization problem) of each character string approaches an optimum value.
      <br/>
      The selection operation is performed by choosing parent strings with a high evaluation value (which is calculated by the objective function), as shown in FIG. 1A. In a mutation operation, some characters are replaced with other characters at random, as shown in FIG. 1B. In the crossover operation, substrings of a pair of strings are exchanged, as shown in FIG. 1C. By repeating these operations, we can obtain new strings that make the objective function more suitable than with the initial ones.
    </p>
    <p num="7">
      In the conventional genetic algorithm, mutation is performed uniformly in the whole the of string, i.e. over all positions in the string.
      <br/>
      However in many optimization problems, there are some positions that need not (or have to) be mutated.
      <br/>
      For such problems, the conventional uniform mutation is not efficient.
      <br/>
      Accordingly, we can barely obtain a solution by the conventional method, especially for large scale problems.
    </p>
    <p num="8">
      Furthermore, since a sufficiently large number of generations is required to obtain an adequate string by the conventional genetic algorithm, the search process is continued up to the designated generation, even if a solution has been obtained.
      <br/>
      The conventional method also has a problem of efficiency of calculation.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">
      An object of the present invention is to improve the search efficiency of a genetic algorithm by estimating the effect of each position.
      <br/>
      Another object of the present invention is to save calculation time by automatically terminating the search.
    </p>
    <p num="10">
      A genetic algorithm executing device according to the present invention is for solving an optimization problem by a genetic algorithm.
      <br/>
      This device comprises a character-distribution calculating unit for calculating a distribution of characters at each position from a set of strings; a mutation rate calculating unit for calculating a degree of disorder at each position from the distributions of characters, and calculating a mutation rate at each position from the degrees of disorder; and a mutation processing unit for mutation operation according to the mutation rates.
    </p>
    <p num="11">
      The genetic algorithm executing device according to the present invention may further comprise a character distribution registering unit for registering the distributions of characters.
      <br/>
      The mutation rate calculating unit may obtain a degree of disorder at each position from the distributions of characters registered in the character distribution registering unit.
      <br/>
      This device may further comprise a generation number counting unit for counting the number of generations; and a termination condition evaluating unit for evaluating termination condition by using the distributions of characters and/or the number of generations.
    </p>
    <p num="12">Another genetic algorithm executing device according to the present invention comprises a character-distribution calculating unit for calculating a distribution of characters at each position; a character position selecting unit for calculating a degree of disorder at each position from the distributions of characters, and selecting positions with a high degree of disorder; and a combination generating unit for generating new strings by the combinations of characters at the selected positions.</p>
    <p num="13">
      A genetic algorithm executing method according to the present invention is for solving an optimization problem by a genetic algorithm.
      <br/>
      The method comprises the steps of: calculating a distribution of characters at each position from a set of strings; calculating a degree of disorder at each position from the distributions of characters; calculating a mutation rate at each position from the degrees of disorder; and generating new strings by mutation operation according to the mutation rates.
    </p>
    <p num="14">
      This method may further comprise the steps of: counting the number of generations; and evaluating termination condition by using the distributions of characters and/or the number of generations.
      <br/>
      Another genetic algorithm executing method according to the present invention comprises the steps of: calculating a distribution of characters at each position from a set of strings; calculating a degree of disorder at each position from the character distributions; selecting positions with a high degree of disorder; and generating new strings by the combinations of characters at the selected positions.
      <br/>
      In the step of generating new strings, characters at the selected positions are reset to the best combination.
    </p>
    <p num="15">
      A computer-readable storage medium according to the present invention stores a computer program for implementing a genetic algorithm executing method for solving an optimization problem by a genetic algorithm.
      <br/>
      The genetic algorithm executing method implemented by the computer program may comprise the steps of the above described genetic algorithm executing method according to the present invention.
      <br/>
      If the storage medium is an external storage medium, it is realized by an optical storage medium such as a CDROM, etc., a magnetic storage medium such as a floppy disk, etc., and a magneto-optical storage medium such as an MD, etc.
      <br/>
      If the storage medium is an internal storage medium, it is realized by a hard disk, a ROM, a RAM, etc.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="16">
      FIGS. 1A, 1B, and 1C are schematic diagrams explaining a genetic algorithm;
      <br/>
      FIGS. 2A and 2B are block diagrams showing the basic configuration of a genetic algorithm executing device according to the present invention;
      <br/>
      FIG. 3 is a flowchart showing the first example of a genetic algorithm executing process according to the present invention;
      <br/>
      FIGS. 4A and 4B are diagrams explaining the concept of a distribution of characters;
      <br/>
      FIGS. 5A, 5B, 5C and 6 are diagrams explaining a degree of disorder;
      <br/>
      FIG. 7 is a flowchart showing the process performed by a character-distribution calculating unit;
      <br/>
      FIG. 8 is a flowchart showing the process performed by a mutation rate calculating unit;
      <br/>
      FIG. 9 is a flowchart showing the second example of the genetic algorithm executing process according to the present invention;
      <br/>
      FIG. 10 is a diagram explaining a process of a character position selection and combination generation;
      <br/>
      FIG. 11 is a flowchart showing the process performed by a character position selecting unit;
      <br/>
      FIG. 12 is a flowchart showing the process performed by a combination generating unit;
      <br/>
      FIG. 13 exemplifies the knapsack problem;
      <br/>
      FIGS. 14A and 14B are tables showing comparison between performance of the conventional method and the present invention;
      <br/>
      FIG. 15 shows character strings in an intermediate generation according to the conventional method;
      <br/>
      FIG. 16 shows character strings in an intermediate generation according to the present invention;
      <br/>
      FIG. 17 shows a schematic diagram of the maximum evaluation value obtained until the number of generations;
      <br/>
      FIG. 18 shows performance of the present invention in comparison with the conventional method;
      <br/>
      FIG. 19 is a flowchart showing the third example of the genetic algorithm executing process according to the present invention;
      <br/>
      FIG. 20 are tables showing the results of the process obtained in the third example;
      <br/>
      FIG. 21 is a block diagram showing the configuration of the genetic algorithm executing device according to the second embodiment of the present invention;
      <br/>
      FIG. 22 is a flowchart showing the genetic algorithm executing process according to the second embodiment;
      <br/>
      FIG. 23 is a table showing the result of the genetic algorithm executing device according to the second embodiment; and
      <br/>
      FIG. 24 is a schematic diagram showing a computer system for realizing the genetic algorithm executing device according to the present invention.
    </p>
    <heading>DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="17">
      FIG. 2A and 2B are block diagrams showing the configuration of a genetic algorithm executing device according to the present invention.
      <br/>
      As shown in FIG. 2A, a genetic algorithm executing device 10 is composed of a CPU, a memory, etc.
      <br/>
      This device comprises an initial string generating unit 11 for generating (or selecting) initial strings; a selection processing unit 12 for selecting strings with a high evaluation value; a search efficiency improving unit 13 for promoting search efficiency by operations such as mutation, etc.; and a crossover processing unit 14 for performing a crossover operation on string pairs selected from a set of strings.
    </p>
    <p num="18">
      As shown in FIG. 2B, the unit 13 of the device 10 includes a character-distribution calculating unit 1, a mutation rate calculating unit 2, a mutation processing unit 3, a character-position selecting unit 4, a combination generating unit 5, and a character-distribution registering unit 6.
      <br/>
      The search efficiency improving unit 13 may be configured by the character-distribution calculating unit 1, the mutation rate calculating unit 2, and the mutation processing unit 3, or by the character-distribution registering unit 6 in addition to the above described three units.
      <br/>
      Furthermore, the search efficiency improving unit 13 may be configured by the character-distribution calculating unit 1, the character-position selecting unit 4, and the combination generating unit 5, or by the character-distribution registering unit 6 in addition to the above described three units.
    </p>
    <p num="19">
      The unit 1 receives strings selected by the selection operation, and calculates distributions of characters for all positions.
      <br/>
      The character-distribution at J-th position (j=1, 2, . . . , L) is composed of pj(a), which is the ratio of the number of strings with `a` at the j-th position to the total number of a set of strings.
      <br/>
      In this specification, a set of pj(a) for all available a's is abbreviated to &lt;pj(a)&gt;. FIG. 4A shows N strings which have L positions.
      <br/>
      For example, when N=100 and there are 36, 21, 29 and 14 strings with 0, 1, 2 and 3 at j-th position respectively, the character-distribution is pj(0)=0.36, pj(1)=0.21, pj(2)=0.29, and pj(3)=0.14 as shown in FIG. 4B.
    </p>
    <p num="20">
      The distributions of characters are calculated in order to estimate effect of each character-position.
      <br/>
      A position in which a certain character is frequently distributed is thought to be "fatal".
      <br/>
      Thus on such a position the mutation rate should be reduced.
      <br/>
      Conversely, a character position in which no character is frequently distributed is thought to be "changable".
      <br/>
      Thus on such position a mutation should be promoted.
    </p>
    <p num="21">
      The unit 2 obtains the degree of disorder rj, which is calculated according to the function Rj(&lt;pj(a)&gt;), and calculates the mutation rate mj according to the obtained r1, r2, . . . , rL. The function Rj is nonnegative and has a maximum value when all the pj(a)'s are the same value.
      <br/>
      FIG. 5A, 5B, 5C and 6 are diagrams for explaining the degree of disorder.
      <br/>
      In this example, the string has 4 characters, and the available characters are 0 and 1 for all positions.
      <br/>
      FIG. 5A, 5B and 5C exemplifies the degree of disorder function Rj(pj(0), pj(1)).
      <br/>
      The mutation rate mj is reset to be smaller if rj decreases, and conversely it is reset to be larger if rj increases.
      <br/>
      The search efficiency is improved by reducing the mutation rate on the "fatal" positions and promoting mutation on the "changable" positions.
    </p>
    <p num="22">
      The value of mj is calculated by the function Mj(r1, r2, . . . , rL) as follows
      <br/>
      mj=Mj (R1(&lt;p1(a)&gt;), R2(&lt;p2(a)&gt;), . . . , RL(&lt;pL(a)&gt;))
    </p>
    <p num="23">
      The value of MJ is a real number between 0 and 1.
      <br/>
      Additionally, Mj is a nondecreasing function of r1, r2, . . . , rL. Namely, if ak&lt;bk, Mj satisfies the following inequality for k=1, 2, . . . , L
      <br/>
      Mj (r1, . . . , rk-1, ak, rk+1, . . . , rL)  &lt;= Mj (r1, . . . , rk-1, bk, rk+1, . . . , rL).
    </p>
    <p num="24">
      The unit 3 performs the mutation operation according to m1, m2, . . . , mL obtained by the unit 2.
      <br/>
      For example, the function Mj can be defined with the following form
      <br/>
      Mj(r1, . . . , rL)= EPSILON i Ai,jfi(ri)
    </p>
    <p num="25">
      where Ai,j is a constant matrix and fj is a function of rj. (Here  EPSILON i indicates summation for I).
      <br/>
      Specifically, assuming that the constant matrix Ai,j satisfies Ai,j=1 if i=j, and Ai,j=0 if i not equal to j, the above equation is simplified as follows
      <br/>
      Mj(r1, . . . , rL)=fj(rj)
    </p>
    <p num="26">This definition is thought to be practical because they can be rapidly calculated by parallel computing.</p>
    <p num="27">
      The following method is also effective.
      <br/>
      The unit 4 calculates rj from &lt;pj(a)&gt; obtained by the unit 1, and selects the positions with a high value of rj.
      <br/>
      The unit 5 generates combinations of all available characters in the selected positions by the unit 4.
      <br/>
      At the position which is not selected, the character is fixed by the original or the most frequently distributed one.
      <br/>
      Furthermore the unit 5 selects a string with the highest evaluation value among the generated strings.
      <br/>
      The processes by the unit 4 and 5 is desirable to execute after some generations.
      <br/>
      Additionally, these processes may be performed together with the mutation process by the unit 2 and 3.
      <br/>
      In this case, the unit 2 and 3 may be used for some strings, while the other strings are processed by the unit 4 and 5.
      <br/>
      The unit 6 is a means for registering the distributions of characters obtained by the unit 1.
      <br/>
      For example, we can save calculation time by using the character-distributions registered in the unit 6 several times.
    </p>
    <p num="28">
      FIG. 3 shows a flowchart of the first example according to the present invention.
      <br/>
      In FIG. 3, steps S4 to S6 are operations performed by the unit 13 shown in FIG. 2B. In step S1, initial strings are created at random.
      <br/>
      In step S2, evaluation values of strings are calculated.
      <br/>
      In step S3, strings with a high evaluation value are selected (for example, by the roulette selection method).
      <br/>
      By this operation, unsuitable strings are rejected.
      <br/>
      In step S4, the distributions of characters are calculated by the unit 1 shown in FIG. 2B. In step S5, the unit 2 calculates rj by using the function Rj(&lt;pj(a)&gt;), and resets mj by using the function Mj(r1, r2, . . . , rL).
      <br/>
      In step S6, the unit 3 performs mutation operation according to mj calculated by the unit 2.
      <br/>
      Then, crossover operation in step S7, and evaluation in step S8 are performed on strings generated by the previous step.
      <br/>
      In step S9, it is determined whether the process is continued or not.
      <br/>
      The operations of steps S3 to S8 are repeated until limit generation.
    </p>
    <p num="29">
      FIG. 7 shows a flowchart of the process performed by the unit 1.
      <br/>
      In this figure, L indicates the number of positions, N indicates the total number of character strings, A(j) indicates the number of available characters at j-th position, x(n, j) indicates the character at j-th position in the n-th string, and p(j, a) indicates the ratio of the number of strings with a at j-th position to the total number of strings.
      <br/>
      The unit 1 repeats the following process for j=1, 2, . . . , N (steps 101 and 102).
      <br/>
      First of all, all the values of p(j, a) are initialized to be zero (steps 103 to 107).
      <br/>
      Then, the process for counting the number of characters a at j-th position in the n-th string is performed (step 108 to 111).
      <br/>
      Next, the process for calculating p(j, a) is performed (steps 112 to 115).
    </p>
    <p num="30">
      FIG. 8 shows a flow chart diagram of the process performed by the unit 2 according to the following function
      <br/>
      Mj(r1, r2, . . . , rL)=M * �L  EPSILON rj/+ EPSILON k rk}�j=1, 2, . . . , L
    </p>
    <p num="31">
      where M is a constant.
      <br/>
      In FIG. 8, L indicates the number of positions, r(j) indicates the degree of disorder at j-th position, A(j) indicates the number of available characters at j-th position, p(j, a) indicates the ratio of the number of strings with a at j-th position to the total number of character strings, R(j, . . . ) indicates the function to calculate the degree of disorder at j-th position, M indicates a constant, and m(j) indicates the mutation rate at j-th position.
      <br/>
      The unit 2 performs the process for calculating r(j) by using R(j, . . . ) (steps 121 to 124).
      <br/>
      Then, the process for calculating the summation part included in the right hand of the above equation is performed (steps 127 to 129).
      <br/>
      Here, if the summation C of r(j)'s vanishes, all mutation rates are set to the constant M (steps 130 to 134).
      <br/>
      If the total C is not zero, m(j) is calculated by using the above equation (steps 135 to 140).
    </p>
    <p num="32">
      To test the performance of the genetic algorithm, a knapsack problem is cited in this specification.
      <br/>
      The objective of this problem is to maximize the total price of items put into a knapsack subject to limit of the total capacity.
      <br/>
      Each of items corresponds to a bit, in which 0 means "not selected" and 1 means "selected".
      <br/>
      The objective function is defined as total price of the selected items, where it vanishes when total capacity of the selected items exceeds capacity of a knapsack.
      <br/>
      FIG. 13 exemplifies the knapsack problem used in this embodiment.
      <br/>
      The number of items is 50, and the items are numbered from 1 to 50 according to the descending order of price per capacity.
      <br/>
      If capacity of a knapsack is 1,500, the optimum value is 2,230.
      <br/>
      This solution is indicated in the "solution" column of FIG. 13. In the knapsack problem, it is usually more effective to select items with a higher value of price per capacity.
      <br/>
      Namely, in FIG. 13, the small numbered items should be selected, while the large numbered ones should be rejected.
      <br/>
      The solution bits in FIG. 13 support this assertion, because the bits of the items 1 to 25 are 1, and the most bits of the items 26 to 50 are 0.
      <br/>
      In other words, the bits of small and large numbered items in this problem are "fatal".
    </p>
    <p num="33">
      To apply the first example to the above problem, the function Rj is defined as follows
      <br/>
      Rj(pj(0), pj(1)) =20-19 * .vertline.pj(0)-0.5.vertline.-19 * .vertline.pj(1)=0. 5.vertline.j=1, . . . , 50
    </p>
    <p num="34">
      where .vertline.* .vertline. represents an absolute value.
      <br/>
      This function has the maximum value 20 when pj(0)=pj(1) =0.5, and the minimum value 1 when pj(0)=1 and pj(1)=0, or pj(0)=0 and pj(1)=1. mj is reset as follows
    </p>
    <p num="35">mj=0.08 * �50 * Rj(pj(0), pj(1))/+ EPSILON k Rk(pk(0), pk(1))}�j=1, . . . , 50.</p>
    <p num="36">
      FIG. 14A and 14B show the comparison between performance of the conventional method and the present invention.
      <br/>
      In this performance test, the average mutation rate, the number of strings, and the crossover probability are assumed to be 0.08, 100, and 0.5 respectively.
      <br/>
      FIG. 14A shows the results until 100 generations.
      <br/>
      Then the optimum value 2,230 was never obtained by the conventional method.
      <br/>
      On the other hand, by the present invention, 2,230 was obtained 8 times.
      <br/>
      Furthermore, 2,228, which is very close to the optimum value was obtained in the rest trials.
      <br/>
      FIG. 14B shows the results until the 1,000th generation.
      <br/>
      In this case, 2,230 was obtained 3 times by the conventional method.
      <br/>
      On the other hand, by the present invention, 2,230 was obtained every time.
      <br/>
      Additionally, the generations required for 2,230 was 47.4 on average.
      <br/>
      This is a quite good result in comparison with the average 461.3 of 3 successful cases by the conventional method.
      <br/>
      These results prove that the present invention is more effective than the conventional method.
    </p>
    <p num="37">
      To understand the reason of the previous results, we consider the search processes of both methods in detail.
      <br/>
      FIG. 15 and 16 shows the strings in the 30th generation by the conventional method and the present invention.
      <br/>
      The characters are sequentially displayed from the left side according to the item numbers 1 to 50 (refer to FIG. 13), and the right side digits represent the evaluation value.
      <br/>
      In the conventional method, 59 strings was invalid, this number was quite larger than 38 of the present invention.
      <br/>
      The reason why there are few invalid strings in FIG. 16 is that the mutation rates at the "fatal" bits are reduced.
    </p>
    <p num="38">
      FIG. 17 shows a schematic diagram of the maximum evaluation value obtained until the number of generations.
      <br/>
      Gc and Ga are generations required for optimization by the conventional method and the present invention respectively.
      <br/>
      The ratio Gc/Ga shows the performance of the present invention in comparison with the conventional method.
      <br/>
      FIG. 18 shows the ranges (indicated by segments) of the ratio Gc/Ga and their average values (indicated by black dots) for 5 different problems solved by the conventional method and the present invention.
      <br/>
      The tests were performed on problems with 40, 42, 44, 46, 48, 50 and 52 items.
      <br/>
      Gc/Ga grows according to the number of items.
      <br/>
      This result shows the efficiency of the present invention especially in the large scale problem.
    </p>
    <p num="39">
      FIG. 9 is a flowchart showing the second example of the genetic algorithm executing device according to the present invention.
      <br/>
      In this example, steps S10 and S11 are performed instead of steps S5 and S6 in the first example, therefore explanations for steps except S10 and S11 are omitted here.
      <br/>
      In step S10, the unit 4 obtains rj, and selects j's for which rj is higher than a threshold value.
      <br/>
      FIG. 10 shows diagrams to explain steps S10 and S11. (A) of FIG. 10 exemplifies strings after step S3.
      <br/>
      As shown in this figure, the available characters at the third and sixth positions are 0, 1, and 2, while those at the other positions are 0 and 1.
      <br/>
      In step S10, rj is obtained and positions in which rj is greater than 4 (a threshold value) are selected.
      <br/>
      In step S11, the unit 5 generates strings of all available characters at the selected positions (refer to (B) in FIG. 10), and the string with the maximum value is selected (refer to (C) in FIG. 10).
    </p>
    <p num="40">
      Provided below is the specific explanation about the process performed on the first string (G1) shown in (A) of FIG. 10. First of all, all of the combinations of the characters at the third and fifth positions, in which the degree of disorder is higher than the threshold value 4, are generated.
      <br/>
      The available characters at the third position are 0, 1, and 2, while those at the fifth position is 0 and 1.
      <br/>
      Accordingly, the six strings of combinations 00, 10, 20, 01, 11, and 21 are generated as shown in (B) of FIG. 10, and a string with the maximum value (=72) is defined as G1'. The same processes are performed also on G2 to G8.
      <br/>
      Consequently new strings G1' to G8' are generated as shown in (C) of FIG. 10.
    </p>
    <p num="41">
      FIG. 11 is a flowchart showing the process performed by the unit 4.
      <br/>
      In this figure, L indicates the number of positions, R(j, . . . ) indicates the function to calculate the degree of disorder at j-th position, r(j) indicates the degree of disorder at j-th position, A(j) indicates the number of available characters at j-th position, p(j, a) indicates the ratio of the number of strings with a at j-th position to the total number of strings, Q indicates a threshold value, and S(j) indicates an identification value representing selected/rejected at j-th position.
      <br/>
      The unit 4 calculates r(j) by using the function R(j, . . . ) (steps 151 to 154).
      <br/>
      Next, it is tested whether or not r(j) is less than a threshold value Q. S(j) is set to 0 if r(j)&lt;Q, and is set to 1 if r(j)&gt;=Q (steps 155 to 160).
    </p>
    <p num="42">
      FIG. 12 is a flowchart showing the process performed by the unit 5.
      <br/>
      In this figure, L indicates the number of positions, N indicates the total number of strings, A(j) indicates the number of available characters at J-th position, x(n, j) indicates the character at J-th position of the n-th string, S(j) indicates a selected/rejected identification value at j-th position, g( . . . ) indicates an evaluation function, and y(n, j) indicates the character at j-th position in the new n-th string.
      <br/>
      The unit 5 repeats the following processes while incrementing the string number n by 1 (step S202) from the first to N-th string (steps 171 and 172).
      <br/>
      First of all, the result of g( . . . ) of the n-th string is assigned to a variable H (step S173).
      <br/>
      Next, the string x(n, 1), . . . , x(n, L) is copied to y(n, 1), . . . , y(n, L) (steps 174 to 177).
      <br/>
      Next, the total number of combinations B is calculated from A(j) and S(j) (steps 178 to 184).
      <br/>
      Then, the combinations of all available characters at the selected positions are generated one by one (steps 185 to 193, which correspond to the process shown in (B) of FIG. 10).
      <br/>
      At this time, the result of g( . . . ) of the string x(n, 1), x(n, 2), . . . , x(n, L) is set to a variable G (step 194), and H, y(n, 1), y(n, 2), . . . , y(n, L) is substituted by G, x(n, 1), x(n, 2), . . . , x(n, L) If G&gt;H (steps 196 to 200).
      <br/>
      In this way, the old string is replaced by the new string with the highest value among strings generated by B combinations (steps 185 to 201).
      <br/>
      This process is performed on all of the old strings (step 202).
    </p>
    <p num="43">
      FIG. 19 is a flowchart showing the third example of the genetic algorithm executing device according to the present invention.
      <br/>
      In this example, distributions of characters during T generations are saved in the unit 6, and steps S10' and S11 are performed every T generations by the averaged distribution over T generations.
      <br/>
      In step S10', the unit 4 obtains rj, and selects j's for which rj is higher than a threshold value.
      <br/>
      To show the implementation example, we apply this to the knapsack problem shown in FIG. 13. The unit 6 saves pj(a) during T=2 generations and calculates the average p'j(a) of the first pj(a) and the second one (a=0, 1; j=1, . . . , 50). rj is obtained as follows
      <br/>
      rj=1-.vertline.p'j(0)-0.5.vertline.-.vertline.p'j(1)-0.5.vertline.
    </p>
    <p num="44">then, the unit 4 selects the positions for which rj &gt;= 0.5 for j=1, . . . , 50. Here, if the number of selected j's is greater than 8, we select the above 8 of the positions ranked according to their degree of disorder.</p>
    <p num="45">
      FIG. 20 shows the results of this example performed on the knapsack problem shown in FIG. 13 (corresponding to FIGS. 14A and 14B).
      <br/>
      In the tests until 100 generations, 2,230 was obtained only once, while in the test until 1,000 generations, it was obtained 8 times.
      <br/>
      The average number of generations required for 2,230 is 456.3. This result proves that the genetic algorithm process is improved in the third example in comparison with the conventional case.
      <br/>
      However the degree of improvement in the this example is less than that in the first example.
      <br/>
      It is thought that performance is highly dependent on a given problem.
    </p>
    <p num="46">
      Provided next is the explanation about the genetic algorithm executing device according to the second embodiment of the present invention.
      <br/>
      The genetic algorithm executing device according to the second embodiment is implemented by replacing the unit 13 in the configuration shown in FIG. 2A with a unit 13'. FIG. 21 shows the structure of the unit 13'. As shown in this figure, the unit 13' comprises a character-distribution calculating unit 1, a mutation rate calculating unit 2, a mutation processing unit 3, a character position selecting unit 4, a combination generating unit 5, a character distribution registering unit 6, a generation number counting unit 7, and a termination condition evaluating unit 8.
      <br/>
      Because the character-distribution calculating unit 1, the mutation rate calculating unit 2, the mutation processing unit 3, the character position selecting unit 4, the combination generating unit 5, and the character distribution registering unit 6 have the same capabilities as those shown in FIG. 2B, their explanations are omitted here.
      <br/>
      The generation number counting unit 7 comprises registers and a counter of the number of generations.
      <br/>
      The generation counter is reset to 0 by a reset signal before the generation loop, and is incremented by a countup signal every generation.
      <br/>
      The termination condition evaluating unit 8 evaluates the termination condition according to the data of the unit 1 and/or the unit 6, and the data of the unit 7.
      <br/>
      If the termination condition is satisfied, the unit 8 externally outputs a termination signal, and then the algorithm terminates.
    </p>
    <p num="47">
      We will abbreviate the sequence &lt;p1(a)&gt;, &lt;p2(a)&gt;, . . . , &lt;pL(a)&gt; to +pj(a)} here.
      <br/>
      In the process according to this embodiment, the functions E1, E2, . . . , EM of +pj(a)} and the number of generations t are required.
      <br/>
      The termination condition is estimated by the logical combination of inequalities such as E1(+pj(a)}, t)&lt;e1, E2(+pj(a)}, t)&gt;e2, . . . , etc., where e1, e2, eM are constant threshold values.
    </p>
    <p num="48">
      Provided next is the explanation about the process performed by the genetic algorithm executing device according to the second embodiment.
      <br/>
      FIG. 22 is a flowchart showing the flow of the process.
      <br/>
      In this process, steps S1 and S2 correspond to steps S1 and S2 of FIG. 3 and 9, and steps S3-1 to S3-N, S4-1 to S4-N, and S8-1 to S8-N correspond to steps S3, S4, and S8 of FIG. 3 and 9 respectively.
      <br/>
      Therefore, their explanations are omitted here.
      <br/>
      Additionally, steps S12-1 to S12-N are the process implemented by combining steps S5, S6, and S7 of FIG. 3.
      <br/>
      Initial strings are generated by the unit 11 in step S1.
      <br/>
      After the evaluation value of each string was obtained in step S2, the generation number counter included in the unit 7 is reset to 0 in step S13.
      <br/>
      After strings were selected by the unit 12 in step S3-1, the distributions of characters are calculated by the unit 1 in step S4-1.
      <br/>
      Furthermore, they are registered in the unit 6.
      <br/>
      Next, the recombination process is performed in step S12-1.
      <br/>
      In this recombination process, calculation of mutation rates by the unit 2, mutation by the unit 3, and crossover by the unit 14 are performed.
      <br/>
      Next, the evaluation value of each string is obtained in step S8-1.
      <br/>
      The generation number counter is then incremented by the unit 7 in step S14-1.
      <br/>
      Then, the unit 8 estimates the termination condition 1.
      <br/>
      If it is not satisfied, the process goes back to step S3-1.
      <br/>
      If it is satisfied, the process goes to step S3-2.
      <br/>
      Then the processes in steps S3-2 to S9-2, . . . , in steps S3-N to S9-N performed sequentially, and the unit 8 evaluates each of termination conditions 2 to N. The algorithm is completed when the termination condition N is satisfied.
    </p>
    <p num="49">
      Provided next is the explanation about the process performed by the genetic algorithm executing device according to the second embodiment.
      <br/>
      Implementation test was performed on the knapsack problem shown in FIG. 13, where the following two termination conditions were used:
    </p>
    <p num="50">
      Termination Condition 1:t&gt;10
      <br/>
      Termination Condition 2:
      <br/>
      (1/50)  EPSILON j(20-19 * .vertline.pj(0)-0. 5.vertline.19 * .vertline.pj(1)-0.5.vertline.) &lt;= 1.3
    </p>
    <p num="51">
      The same process as that shown in FIG. 3 is performed until 10th generation, because the termination condition 1 is used.
      <br/>
      After the 11th generation, the termination condition 2 is used.
    </p>
    <p num="52">
      Provided next is the explanation about the result of the above described algorithm execution process.
      <br/>
      FIG. 23 shows the results for this example.
      <br/>
      As shown in this figure, 2,230 was obtained every time.
      <br/>
      The largest value of the termination generation was 334, and the average was 142.6. In comparison with 1,000 generations, these values are quite small.
      <br/>
      That is, idling time was saved in this case.
    </p>
    <p num="53">
      FIG. 24 exemplifies a computer system for realizing the genetic algorithm executing device according to the present invention (the devices shown in FIG. 2A, 2B, and 21), which is used to execute computer programs for performing the processes shown in FIGS. 3, 7 to 12, 19, and 22.
      <br/>
      This computer system comprises a computer body 100, a display 200, and an input device 250 composed of a keyboard and a mouse.
      <br/>
      The computer body 100 comprises a processor 110, a memory 120, and a driver 130 for a storage medium.
      <br/>
      The processor 110 performs the operations of the initial string generating unit 11, the selection processing unit 12, the crossover processing unit 14, and the search efficiency improving unit 13, which are shown in FIG. 2A, and further performs the operations of the character-distribution calculating unit 1, the mutation rate calculating unit 2, the mutation processing unit 3, the character-position selecting unit 4, the combination generating unit 5, the generation counting unit 7, and the termination condition evaluating unit 8, which are shown in FIGS. 2B and 21. Specifically, these operations are implemented by performing the processes shown in FIGS. 3, 7 to 12, 19, and 22 with a computer program.
      <br/>
      The memory 120 stores the data required for executing the computer program (such as strings, evaluation function, thresholds, etc.), and the data obtained by executing the program (distributions of characters, evaluation values, degrees of disorder, mutation rates, the number of generations, new strings, etc.).
      <br/>
      The memory 120 also serves as the character-distribution registering unit 6.
      <br/>
      The driver 130 is intended to read a program and data stored in an external storage medium to the processor 110 and the memory 120.
      <br/>
      If the computer program for executing the processes according to the present invention is stored in an external storage medium, the program stored in the external storage medium is read and executed via the driver 130.
      <br/>
      The input device 250 is used by a user in order to input the data and instructions required for executing the program.
    </p>
    <p num="54">
      When the computer program for executing the processes according to the present invention is stored in an external storage medium, it may be realized by an optical storage medium such as a CDROM, a magnetic storage medium such as a floppy disk, a magnetooptical storage medium such as an MD, etc.
      <br/>
      Furthermore, the computer program for executing the processes according to the present invention may be stored in an internal storage medium such as a hard disk, a ROM, a RAM, etc.
    </p>
    <p num="55">
      According to the present invention, the search efficiency of the genetic algorithm is improved in comparison with the conventional method especially in the large scale problems.
      <br/>
      Furthermore, calculation time is saved by automatic termination of the algorithm.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A genetic algorithm executing device for solving an optimization problem based on a genetic algorithm, comprising:</claim-text>
      <claim-text>character-distribution-calculating means for calculating a distribution of characters for each position among character strings which represent candidates of solution; mutation-rate-calculating means for obtaining a degree of disorder for each position by using the distribution of characters, and setting a mutation rate for each position based on the obtained degree of disorder;</claim-text>
      <claim-text>and mutation-processing means for performing a mutation operation on a character string according to the mutation rates to generate a new character string.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The genetic algorithm executing device according to claim 1, wherein said mutation-rate-calculating means sets the mutation rate, at a position in the string, which is calculated by one of two rules that a larger mutation rate is set for a position with a higher degree of disorder and that a smaller mutation rate is set for a position with a lower degree of disorder.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The genetic algorithm executing device according to claim 1, further comprising character-distribution-registering means for registering the distribution of characters calculated by said character-distribution-calculating means, wherein said mutation-rate-calculating means obtains the degree of disorder based on the distribution of characters registered in said character-distribution-registering means.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The genetic algorithm executing device according to claim 1, further comprising: generation-number-counting means for counting the generation number of character strings;</claim-text>
      <claim-text>and termination-condition-evaluating means for determining whether or not to terminate a calculation process according to the genetic algorithm by using at least one of the distribution of characters obtained by said character-distribution-calculating means and a count-value counted by said generation-number-counting means.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The genetic algorithm executing device according to claim 4, wherein said termination-condition-evaluating means terminates the calculation process according to the genetic algorithm when a degree of disorder of a distribution of characters calculated by said character-distribution-calculating means is determined to be equal to or lower than a predetermined value.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A genetic algorithm executing device solving an optimization problem according to a genetic algorithm, comprising: a character-distribution-calculating unit calculating a distribution of characters for each position among character strings which represent candidates of solution; a character-position-selecting unit obtaining a degree of disorder for each position by using the distribution of characters, and selecting a position for which the degree of disorder is higher than a predetermined value;</claim-text>
      <claim-text>and a combination-generating unit generating a new character string by changing a character at the selected position and by fixedly setting a character to an original character or a character having a largest degree of disorder at a non-selected position.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The genetic algorithm executing device according to claim 6, wherein said combination-generating unit generates all combinations of the character strings in which a character at the selected position is replaced with an available character for each of the character strings, and selects character strings of which evaluation values are large among the combinations to generate new character strings.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The genetic algorithm executing device according to claim 6, further comprising: a character-distribution registering unit registering the distributions of characters calculated by said character-distribution calculating unit, wherein said character-position-selecting unit obtains the degrees of disorder based on the distributions of characters registered in said character-distribution-registering unit.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The genetic algorithm executing device according to claim 6, wherein if the number of positions of which degrees of disorder are higher than the predetermined value is larger than a predetermined number, said character-position-selecting unit selects the predetermined number of positions from the positions ranked according to the degree of disorder.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The genetic algorithm executing device according to claim 6, further comprising: a generation-number-counting unit counting the generation number of the character strings;</claim-text>
      <claim-text>and a termination-condition-evaluating unit determining whether or not to terminate the calculation process of the genetic algorithm by using at least either the distributions of characters obtained by said character-distribution-calculating unit, or a count-value counted by said generation-number-counting unit, or both.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The genetic algorithm executing device according to claim 10, wherein said termination-condition-evaluating unit terminates the calculation process of the genetic algorithm when a degree of disorder of distributions of characters calculated by said character-distribution-calculating unit is determined to be equal to or lower than a predetermined value.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A genetic algorithm executing method for solving an optimization problem according to a genetic algorithm, comprising: calculating a distribution of characters for each position for character strings which represent candidates of solution; obtaining a degree of disorder for each position by using the distribution of characters; setting a mutation rate for each position based on the obtained degree of disorder;</claim-text>
      <claim-text>and performing a mutation operation on a character string according to the mutation rates to generate a new character string.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The genetic algorithm executing method according to claim 12, wherein: the mutation rate is set, in the operation of setting the mutation rate, according to one of two rules that a larger mutation rate is set for a position with a higher degree of disorder and that a smaller mutation rate is set for a position with a lower degree of disorder.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The genetic algorithm executing method according to claim 12, further comprising the operation of registering a calculated distribution of characters, wherein the degree of disorder is obtained on the basis of the registered distribution of characters in the operation of obtaining the degree of disorder.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The genetic algorithm executing method according to claim 12, further comprising: counting the number of generations of character strings;</claim-text>
      <claim-text>and determining whether or not to terminate the calculation process according to the genetic algorithm by using at least either the distributions of characters, or a count-value of the number of generations, or both.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The genetic algorithm executing method according to claim 15, wherein a calculation process according to the genetic algorithm is terminated if a degree of disorder is equal to or lower than a predetermined value, in the operation of determining whether or not to terminate the calculation process.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. A genetic algorithm executing method for solving an optimization problem according to a genetic algorithm, comprising: calculating a distribution of characters for each position of character strings which represent candidates of solution; obtaining a degree of disorder for each position of the strings by using the distribution of characters; selecting a position of which the degree of disorder is higher than a predetermined value;</claim-text>
      <claim-text>and generating a new character string by changing a character at the selected position and by fixedly setting a character to an original character or a character having a largest degree of disorder at a non-selected position.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The genetic algorithm executing method according to claim 17, wherein, in the generating operation, all combinations of character strings in which a character at the selected position is replaced with an available character are generated for each of the character strings, and the new character strings are generated by selecting character strings of which the evaluation values are large from the generated combinations.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The genetic algorithm executing method according to claim 17, further comprising: registering the calculated distributions of characters, wherein the degree of disorder for the selected position is obtained on the basis of the registered distributions of characters.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The genetic algorithm executing method according to claim 17, wherein if the number of positions of which the degrees of disorder are higher than the predetermined value is larger than a predetermined number, then a predetermined number of positions are selected from the positions ranked according to the degree of disorder, in the selecting operation.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The genetic algorithm executing method according to claim 17, further comprising: counting the number of generations of the character strings;</claim-text>
      <claim-text>and determining whether or not to terminate the calculation process according to the genetic algorithm by using at least either the distributions of characters, or a count-value of the number of generations, or both.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The genetic algorithm executing method according to claim 21, wherein in the determining operation the calculation process according to the genetic algorithm is terminated if a degree of disorder of distributions of characters is equal to or lower than a predetermined value.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. A computer-readable storage medium storing a computer program for implementing a genetic algorithm executing method for solving an optimization problem according to a genetic algorithm, the genetic algorithm executing method comprising: calculating a distribution of characters for each position among character strings which represent candidates of solution; obtaining a degree of disorder for each position by using the distribution of characters; setting a mutation rate for each position based on the obtained degree of disorder;</claim-text>
      <claim-text>and performing a mutation operation on a character string according to the mutation rates to generate a new character string.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. A computer-readable storage medium storing a computer program for implementing a genetic algorithm executing a method for solving an optimization problem according to a genetic algorithm, the genetic algorithm executing method comprising: calculating a distribution of characters for each position among character strings which represent candidates of solution; obtaining a degree of disorder for each position by using the distribution of characters; selecting a position for which the degree of disorder is larger than a predetermined value;</claim-text>
      <claim-text>and generating a new character string by changing a character at the selected position and by fixedly setting a character to an original character or a character having a largest degree of disorder at a non-selected position.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. A genetic algorithm executing device solving an optimization problem based on a genetic algorithm, comprising: a character-distribution-calculating unit calculating a distribution of characters for each position among character strings which represent candidates of solution; a mutation-rate-calculating unit obtaining a degree of disorder for each position by using the distribution of characters, and setting a mutation rate for each position based on the obtained degree of disorder;</claim-text>
      <claim-text>and a mutation-processing unit performing a mutation operation on a character string according to the mutation rates to generate a new character string.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. A genetic algorithm executing device for solving an optimization problem according to a genetic algorithm, comprising: character-distribution-calculating means for calculating a distribution of characters for each position among character strings which represent candidates of solution; character-position-selecting means for obtaining a degree of disorder for each position by using the distribution of characters, and selecting a position for which the degree of disorder is higher than a predetermined value;</claim-text>
      <claim-text>and combination-generating means for generating a new character string by changing a character at the selected position and by fixedly setting a character to an original character or a character having a largest degree of disorder at a non-selected position.</claim-text>
    </claim>
  </claims>
</questel-patent-document>