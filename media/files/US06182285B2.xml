<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182285B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182285</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182285</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26737329" extended-family-id="59439462">
      <document-id>
        <country>US</country>
        <doc-number>09058173</doc-number>
        <kind>A</kind>
        <date>19980410</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09058173</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43138782</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>5817398</doc-number>
        <kind>A</kind>
        <date>19980410</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09058173</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>6962897</doc-number>
        <kind>P</kind>
        <date>19971215</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-60069628</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <term-of-grant>
      <disclaimer/>
    </term-of-grant>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/30        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>717170000</text>
        <class>717</class>
        <subclass>170000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>707E17005</text>
        <class>707</class>
        <subclass>E17005</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>714042000</text>
        <class>714</class>
        <subclass>042000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30289</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30289</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>24</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>21</number-of-drawing-sheets>
      <number-of-figures>21</number-of-figures>
      <image-key data-format="questel">US6182285</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for generating a default list</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>KIROUAC DONALD L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5155847</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5155847</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>TANIMURA MORIMASA</text>
          <document-id>
            <country>US</country>
            <doc-number>5752039</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5752039</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>CHEN YIH-FARN ROBIN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5806062</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5806062</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>STUPEK JR RICHARD A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5809287</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5809287</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>MALONE THOMAS W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5900870</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5900870</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>"Introduction to Continuus/CM 4.1", Continuus Software Corporation, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Mikkelsen et al., "Practical Software Configuration Management: The Latenight Developer's Handbook", Prentice Hall PTR, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>W.J. Pelt, B.J. Swearingen and S.A. Wadood, IBM Technical Disclosure Bulletin (TDB) "Preprocessing for Remote Install LAN Requester 1.3" vol. 34, No. 11, Apr. 1992, p. 174.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/069,628</doc-number>
          <date>19971215</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/069628</doc-number>
          <date>19971215</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Bleizeffer, Terry M.</name>
            <address>
              <address-1>Santa Cruz, CA, US</address-1>
              <city>Santa Cruz</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Church, Nathan D.</name>
            <address>
              <address-1>Seattle, WA, US</address-1>
              <city>Seattle</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Devine, Kathryn W.</name>
            <address>
              <address-1>Morgan Hill, CA, US</address-1>
              <city>Morgan Hill</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Hughes, Jr., Virginia W.</name>
            <address>
              <address-1>Hollister, CA, US</address-1>
              <city>Hollister</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Kilburn, Barbara J.</name>
            <address>
              <address-1>Saratoga, CA, US</address-1>
              <city>Saratoga</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="6">
          <addressbook lang="en">
            <name>Shough, David E.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Sughrue, Mion, Zinn, Macpeak &amp; Seas, PLLC</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Elmore, Reba I.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method and apparatus for compensating for deficiencies existing in programs to assist a user through installing a program.
      <br/>
      Polling the status of jobs requested by the user of a workstation is done so that the user may eventually be provided with status reports regarding the jobs being executed.
      <br/>
      The user can set parameters during loading of System Modification Program Extended (SMPE) libraries, install, migrate, fallback, remigrate and update procedures for the program.
      <br/>
      An indication is provided to a user of a workstation as steps of a task have been completed by the user.
      <br/>
      The health of catalog and directory databases may be verified before a migrate procedure is performed.
      <br/>
      The user of the program can be informed regarding parameters whose default values have changed, which parameters are of particular concern to the specific user.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application claims the benefit of U.S. Provisional Application Ser.
      <br/>
      No. 60/069,628 filed Dec. 15, 1997. This application is also related to the following applications, filed on the same day as the present application: Ser.
      <br/>
      No. 09/058,170, entitled "Method And Apparatus For Setting Parameters In A System"; Ser.
      <br/>
      No. 09/058,171, entitled "Method And Apparatus For Polling Job Status On A Mainframe System"; Ser.
      <br/>
      No. 09/058,172, entitled "Method And Apparatus Of Indicating Steps In A Task Which Have Been Completed"; and Ser.
      <br/>
      No. 09/058,138, entitled "Method And Apparatus For Performing A Health Check On A Database System."
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="3">The present invention relates to a method and apparatus for directing and assisting a user through procedures of a program required to perform various tasks on a complex software system.</p>
    <p num="4">2. Description of the Related Art</p>
    <p num="5">
      It is known that the installation of software systems on mainframe computers requires entry of many parameters and accomplishment of a large number of steps before the software is ready to run.
      <br/>
      During the installation process, an entry error or other mistake can result in substantial time being expended to debug the data that has been entered.
      <br/>
      The prior art has attempted to cope with this problem through a system that helps the user through the installation process.
    </p>
    <p num="6">
      One example of such prior art is disclosed in the IBM Technical Disclosure Bulletin (TDB), Volume 34, No. 11, April 1992 at page 174.
      <br/>
      There, it is noted that a local area network distribution system requires a large number of user actions to set up a workstation to remotely install a local area network (LAN) requester program.
      <br/>
      Previously, the LAN administrator would be required to create map files manually for all requesters that require remote installation.
      <br/>
      The IBM TDB article suggests that a preprocessor be used to help the LAN administrator customize the set-up for remote requesters.
      <br/>
      The preprocessing program creates a map file for each workstation wherein a requestor program is to be installed.
      <br/>
      For each requester, the LAN administrator inputs the requester's name, domain name and drive where the program will be installed.
      <br/>
      The preprocessing program reads these input parameters and creates a map file with appropriate default values.
      <br/>
      The preprocessing program is said to reduce the chance of user error by utilizing predefined inputs and by displaying appropriate error messages.
    </p>
    <p num="7">
      It is further known to direct a user through the various steps that are required for installing an application program.
      <br/>
      However, such installation instructions are generally set out as a listed series of tasks to accomplish, with little information being given as to their interrelationship, the status of various subtasks which comprise the overall task, or the overall relationship of the various subtasks to each other and to the task as a whole.
    </p>
    <p num="8">In fact, to successfully install a complex program, it is often a necessity that the user be an expert on how to install the program, on how to adapt and/or alter parameters that are inserted during the installation procedure, etc.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">The present invention overcomes these and other shortcomings of prior systems, by accomplishing the objective of providing an improved method, apparatus and article of manufacture for assisting a user via a program on a workstation, running under an operating system and being connected to a mainframe computer.</p>
    <p num="10">
      More specifically, the present invention provides an improved method, apparatus and article of manufacture for polling the status of jobs requested by the user of a workstation, where the jobs are being executed on a mainframe.
      <br/>
      The present invention does so by continuously polling to determine when a particular output file is present.
      <br/>
      When the output file is found to be present, the user is given an indication of the status of the job originally requested by the user.
    </p>
    <p num="11">
      The present invention also provides an improved method, apparatus and article of manufacture for assisting the user in setting parameters during loading of System Modification Program Extended (SMPE) libraries, installation, migration, fallback, remigration and update tasks of a program.
      <br/>
      Loading of SMPE libraries refers to a preinstallation which takes place prior to installation.
      <br/>
      Installation refers to the initial load of a program, while migration refers to moving from an older to a newer version of the program.
      <br/>
      Fallback is used to return to a state where the older version of the program is operational without uninstalling the newer version.
      <br/>
      Remigration is used to return to the newer version of the program when the reason for the fallback is resolved.
      <br/>
      Finally, an update is used to provide upgrades in the current version of the program.
    </p>
    <p num="12">
      When the user is in the process of setting parameters, the user is initially asked to choose one of two options to select system parameters.
      <br/>
      If the first option is selected, the user is presented with a series of information windows regarding the parameters.
      <br/>
      Within each of the windows, the user may select to change the associated parameter.
      <br/>
      If the user chooses to change the associated parameter, the system goes from the information window to a predefined window in which the parameter can be changed.
      <br/>
      Once this is done, the user is returned to the information window last viewed by the user.
      <br/>
      If the second option is used, the user is given a list of the predefined windows, each of which may be selected by the user to change an associated parameter.
    </p>
    <p num="13">
      The present invention also provides an improved method, apparatus and article of manufacture for providing an indication to a user of a workstation as steps of a task have been completed.
      <br/>
      The tasks include load SMPE libraries, install, migrate, fallback, remigrate and update.
      <br/>
      Each step in a task is represented by a button in a window.
      <br/>
      Behind each button is a text field of a color different from the background color of the window and which is also of a color different from that of the button.
      <br/>
      Additionally, the text field is larger than the button.
      <br/>
      Initially, the text field is hidden.
      <br/>
      This indicates that the task indicated on the button is not yet complete.
      <br/>
      When the user completes a task indicated by the button, the text field behind that button is shown.
      <br/>
      Since the text field is larger than the button and is in a color different from the background color of the window and from the button itself, when shown, the text field, appears to provide a highlighted border around the button.
      <br/>
      Thus, the user can determine which steps of a task have been completed by looking to see which step buttons have a highlighted border.
    </p>
    <p num="14">
      The present invention further provides an improved method, apparatus and article of manufacture for checking the integrity of catalog and directory of databases before a migrate task, for example, is performed on the databases.
      <br/>
      This is done by performing a series of jobs to verify the integrity of the catalog and directory of databases.
    </p>
    <p num="15">
      The present invention also provides an improved method, apparatus and article of manufacture for providing information, in the form of a defaults list, to the user of a program regarding parameters whose default values have changed, which parameters are of particular concern to the specific user.
      <br/>
      During a migrate task, for example, a list of parameters is generated.
      <br/>
      This list is displayed with only those parameters where the default value has changed from the prior version of the program and where a user of the system selected the default value of the parameter in the prior version of the program.
      <br/>
      This allows a user of the system to easily view parameters having new default values, where a user had selected the default values of the parameters in a prior version of the program.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="16">
      The above objects and advantages of the present invention will become more apparent by describing, in detail, preferred embodiments thereof with reference to the attached drawings in which:
      <br/>
      FIG. 1 shows a block diagram of a system that is particularly adapted to perform the method of the invention.
      <br/>
      FIG. 2 shows a welcome window, which is initially presented to the user of the workstation, giving the user the option of performing, inter alia, preinstall, install, migrate, fallback, remigrate and update tasks.
      <br/>
      FIG. 3 shows a window which directs a user in opening a DB2 Installer file for migration.
      <br/>
      FIG. 4 shows a window which lists the steps to be completed by a user for a migration task.
      <br/>
      FIG. 5 shows the window which allows a user to load a DSNTIDxx file from either a workstation or a host.
      <br/>
      FIG. 6 shows a window where the user provides information needed to download the DSNTIDxx file from the host.
      <br/>
      FIG. 7 shows a window which allows the user to select between a TaskGuide route and an expert route to set up DB2 parameters.
      <br/>
      FIG. 8 shows the logical connection between the user's options of selecting either the TaskGuide route or the expert route.
      <br/>
      FIG. 9 shows the TaskGuide window entitled "Sysplex Query Parallelism."
      <br/>
      FIG. 10 shows the predefined install window presented to the user when the user indicates a desire to change parameters relating to "Sysplex Query Parallelism."
      <br/>
      FIG. 11 shows another TaskGuide window entitled "Enhancements for Data Sharing."
      <br/>
      FIG. 12 shows another TaskGuide window entitled "Frequently Requested Enhancements."
      <br/>
      FIG. 13 shows another TaskGuide window entitled "Summary of Parameters with New Defaults."
      <br/>
      FIG. 14 shows another TaskGuide window entitled "Version 5 New Defaults Summary."
      <br/>
      FIG. 15 shows another version of the TaskGuide window entitled "Version 5 New Defaults Summary."
      <br/>
      FIG. 16 shows a window presented to the user when the expert route is selected.
      <br/>
      FIG. 17 shows an predefined install window presented to the user when the user indicates a desire to change the parameters shown.
      <br/>
      FIG. 18 shows a job status window relating to a test for system health.
      <br/>
      FIG. 19 shows a window listing DB2 Installer options and indicating whether or not the options are modifiable.
      <br/>
      FIG. 20 shows a job status window relating to running jobs.
      <br/>
      FIG. 21 shows an example of an Info Point window.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="17">
      A preferred embodiment of the present invention is described below in detail with reference to the accompanying drawings.
      <br/>
      The present invention will be described in the context of the DB2 database manager or system which assists a user of a workstation operating under an operating system such as Windows NT to load SMPE libraries, install, migrate, fallback, remigrate or update a complex database system on a mainframe computer with an operating system having a nonstandard file structure and lacking an application program interface (API) to a workstation operating system, e.g. an MVS or OS/390 mainframe computer.
      <br/>
      Windows NT is a trademark of the Microsoft Corporation, DB2 and MVS are registered trademarks of International Business Machines Corporation (IBM) and OS/390 is a trademark of IBM.
      <br/>
      The procedures are carried out at the workstation under control of the program.
      <br/>
      While the following discussion is presented in the context of a workstation operating under Windows NT and connected to an MVS or OS/390 mainframe computer with DB2, it is to be understood that the present invention is widely applicable to assisting the user through many interactions with complex programs on different systems.
    </p>
    <p num="18">
      FIG. 1 shows a system to which the program of the present invention may be applied.
      <br/>
      In FIG. 1, a user computer or workstation 10 is connected to a mainframe computer 12 on which a database system 14 is disposed.
      <br/>
      Tasks such as load SMPE libraries, install, migrate, fallback, remigrate or update, initiated by a user at user computer 10, may be applied to database system 14.
      <br/>
      In this instance, it will be assumed that the database system is the DB2 database, a product of IBM, although other database systems are equally applicable.
      <br/>
      IBM is a registered trademark of the International Business Machines Corporation.
      <br/>
      Since proper application of any of the load SMPE libraries, install, migrate, fallback, remigrate or update tasks to the DB2 database 14 may require the customization of hundreds of parameters and performance of many interrelated functions, it has been usually carried out by an expert, directly at an interface with computer 12.
    </p>
    <p num="19">
      The provision of user computer 10 and certain software systems installed thereon provides to the relatively unskilled user, the means to accomplish any of the load SMPE libraries, install, migrate, fallback, remigrate or update tasks.
      <br/>
      The user computer 10 includes a central processing unit (CPU) 16, a display 18, a user input 19 and a memory 20, all of which are coupled via bus system 22.
      <br/>
      Communications between computer 10 and mainframe computer 12 are carried out via an input/output module 24.
    </p>
    <p num="20">
      In order to accomplish any of the tasks, the program initially presents to the user of workstation 10 on display 18, the welcome window shown in FIG. 2.
      <br/>
      This welcome window allows the user to select one of the several tasks which may be performed on a DB2, or another database system, including the load SMPE libraries, install, migrate, fallback, remigrate and update tasks.
      <br/>
      The user indicates his/her selection by providing input via user input 19.
      <br/>
      Once the user has selected which task to execute, the user is then presented with a window which lists the steps needed to complete a task.
      <br/>
      This will be discussed in more detail below.
      <br/>
      The window listing the steps will allow the user to perform such steps as importing values from a previous version of the database system, specifying new function values, modifying his/her options, generating jobs, running jobs and running samples.
    </p>
    <p num="21">
      The various tasks which may be performed on DB2 will now be discussed in more detail.
      <br/>
      It shall be understood, however, that tasks will vary from program to program and that the underlying invention will be more generally applicable to the initial setup of complex programs.
      <br/>
      Over time, there have been different versions of the DB2 database.
      <br/>
      If a user wishes to go from an old version to a new version, then a task known as migrate is performed.
      <br/>
      The present invention adds the capability to support this migration function on workstations operating, for example, under Windows NT.
      <br/>
      Most people who have bought the recently released Version 5 of DB2 already have Version 4.
      <br/>
      So rather than installing Version 5 of DB2 from a Windows NT workstation, the present invention provides the ability to take Version 4 of DB2 and migrate it to Version 5.
      <br/>
      The migration results in all the added functionality of Version 5.
    </p>
    <p num="22">
      The heart of a DB2 database is catalog and directory tables.
      <br/>
      One difference between the catalog tables of Version 4 and Version 5 of DB2 is that the Version 5 catalog tables have some additional columns.
      <br/>
      After a successful DB2 migration, the user's application may or may not perform as desired.
      <br/>
      A user can return to the previous DB2 application without uninstalling the new DB2 version.
      <br/>
      This is called a fallback.
      <br/>
      After a fallback task is performed, the new columns of the Version 5 catalog are maintained.
      <br/>
      The only difference after a fallback is that those new columns are now hidden to a user of Version 4 of the DB2.
    </p>
    <p num="23">
      Once a fallback is performed and the new Version 5 catalog columns are hidden, the user must then determine the reason for which the original application did not perform as desired.
      <br/>
      The fallback allows the user of the system to still use the data in the Version 4 DB2 database while the reason for the undesirable application performance is determined.
    </p>
    <p num="24">
      Once the reason necessitating the fallback is addressed, a remigrate task may be performed.
      <br/>
      The remigrate is different from the migrate, in that all of the prior work is not lost.
      <br/>
      Essentially, during a remigrate, the new Version 5 DB2 columns that were hidden by the fallback are shown and functions that were made unavailable at fallback are now supported.
    </p>
    <p num="25">
      Another task which may be performed upon DB2 is an update.
      <br/>
      If, for example, the user already has Version 5 DB2 installed and wants to change a parameter, the update task may be used.
      <br/>
      This task does not result in a change in the version of DB2 used, but simply allows a parameter to be changed.
    </p>
    <p num="26">
      Regardless of which task is being performed, load SMPE libraries, install, migrate, fallback, remigrate or update, three basic steps are followed.
      <br/>
      The first step is to set the parameters.
      <br/>
      DB2 has on the order of 400 different parameters (e.g. set COBOL as the default language).
      <br/>
      Other database systems also have large numbers of parameters.
      <br/>
      Each of these parameters may be set using graphical user interfaces (GUIs), which direct the user through the parameter setting process.
      <br/>
      The parameters may be set by the user using a workstation, which need not be connected to the mainframe host.
      <br/>
      Once the parameters have been set, the second step is carried out.
      <br/>
      Namely, jobs are generated.
      <br/>
      In MVS or OS/390 jargon, jobs refer to a batch of work that needs to be done.
      <br/>
      Again, the job is generated at the workstation and is saved on the workstation.
      <br/>
      Optionally, the job may be uploaded to the host system (MVS or OS/390).
      <br/>
      The third step is to run the job.
      <br/>
      The workstation, running under Windows NT for example, has a job status window which lists in an icon format all of the jobs that need to be run for a particular task and provides the status regarding each of the jobs.
      <br/>
      These are the three basic steps which need to be accomplished to complete a task.
      <br/>
      Sometimes, extra steps may need to be performed and, at other times, not all three of the basic steps need be performed.
    </p>
    <p num="27">
      Initially, the step of generating and running jobs is discussed in the context of the install task.
      <br/>
      Utilities and APIs are used to connect the MVS or OS/390 host to a workstation operating under Windows NT, for example.
      <br/>
      In the example discussed below, MVS is basically a mainframe computer, e.g. the OS/390 product from IBM, and the subsystem is a DB2 subsystem on the mainframe.
    </p>
    <p num="28">
      DB2 Installer is a workstation based tool which allows a user to perform the task of installing DB2 for MVS or OS/390.
      <br/>
      In the case of the DB2 Installer, the user begins with an MVS or OS/390 host and must use the install task to put the DB2 subsystem on the MVS or OS/390 host.
      <br/>
      The user must accomplish this task using jobs.
      <br/>
      During the install, the user of the workstation is asked, through a GUI, for the values desired for the parameters for the DB2 subsystem.
      <br/>
      Once this is done, jobs on the workstation are generated and saved on the workstation.
    </p>
    <p num="29">
      A connection between the workstation and the host is then established using, for example, a TCP/IP connection, although other types of connections are possible.
      <br/>
      The TCP/IP connection is used to send the jobs that were generated on the workstation to the host.
      <br/>
      The jobs are logged on a queue file called JES Queue.
      <br/>
      On MVS or OS/390, there is a normal file structure, which works just like it would in DOS or in any other operating system.
      <br/>
      The JES Queue is a little different in that it is a repository to which jobs are sent to be run on the host.
      <br/>
      It is the jobs which actually perform the work of installing the DB2 subsystem.
      <br/>
      After the jobs are run, return codes are generated and sent back to the workstation.
      <br/>
      These are used to inform the user at the workstation whether the job ran successfully or not.
      <br/>
      Feedback to the user as to the status of the job is easy to provide for a workstation operating under the OS/2 operating system, because OS/2 readily allows for access of status information from the JES Queue.
      <br/>
      OS/2 is a registered trademark of IBM.
      <br/>
      In OS/2, there is an API which allows communication with the JES Queue using file transfer protocol (FTP).
      <br/>
      This API is needed to communicate with the JES Queue because the JES Queue is a repository which does not have a normal file structure.
    </p>
    <p num="30">
      This procedure allows the user of a workstation operating under OS/2 installing DB2, for example, a way to submit jobs and get feedback by getting the output of the job from the JES Queue.
      <br/>
      However, this procedure is not directly available for a user of a workstation operating under Windows NT.
      <br/>
      This is so because jobs to be run on the mainframe must first be sent to the JES Queue to be logged.
      <br/>
      Additionally, access to the JES Queue is needed to provide sufficient knowledge to determine the status of the jobs.
      <br/>
      However, Windows NT cannot communicate with the non-standard file structure of the JES Queue.
      <br/>
      Windows NT lacks the API of OS/2 which uses FTP to communicate with the JES Queue.
      <br/>
      Because the JES Queue lacks the standard file structure, as discussed above, and because Windows NT lacks the API of OS/2, Windows NT cannot communicate directly with the JES Queue.
    </p>
    <p num="31">
      The present invention provides a solution for this problem.
      <br/>
      In accordance with the present invention, for a workstation operating under Windows NT, for example, instead of directly using an FTP API, a standard command prompt in Windows NT is used to submit a series of MVS commands in the form of a single file to the host.
      <br/>
      This is accomplished by using the command prompt to submit templates of FTP commands which are edited and then sent to the host along with the job to tell the host what to do.
      <br/>
      The FTP command templates include a template for GET (to retrieve files), a template for PUT (to place or send files) and a template for DIR (to obtain directory listings).
    </p>
    <p num="32">
      Discussing this process in more detail, from the user's perspective this entire process will be completely transparent.
      <br/>
      The user simply uses a GUI to assign a name to a job and indicate that he/she wishes to run the job.
      <br/>
      At this point the TCP/IP connection to the host has already been set up.
      <br/>
      Then, transparent to the user, the template for the FTP PUT command is accessed and filled in with the correct commands and job name.
      <br/>
      The template is then executed, which causes the job to be put on the JES Queue and the JES Queue then handles running it.
      <br/>
      When the job is done, the JES Queue has a specific output file that it puts out.
      <br/>
      In order to determine when the job is done, the JES Queue is polled using a series of FTP templates for DIR.
      <br/>
      Essentially, this performs a directory check on the JES Queue each time the FTP DIR command template is executed.
      <br/>
      Based upon the file name of the job, the name of the output file on the JES Queue is known.
      <br/>
      The polls are continued, DIR after DIR after DIR, until the specific output file appears on the JES Queue.
      <br/>
      Then the FTP GET template is used to grab the output file and bring it down to the workstation.
      <br/>
      The user of the workstation is then given an indication that the job is complete.
      <br/>
      Thus, the present invention provides the capability of apprising the user of a workstation, operating under Windows NT, for example, of the status of jobs being run on the host.
    </p>
    <p num="33">
      Turning now to the step of setting parameters, as noted above, the user of a workstation operating under Windows NT, for example, is initially presented with the welcome window shown in FIG. 2.
      <br/>
      This window presents to the user the different tasks which may be executed.
      <br/>
      The window lists, inter alia, the preinstall, migrate, install, fallback, remigrate and update tasks, which may be selected by the user.
      <br/>
      In FIG. 2, it can be seen that the task "Migrate a DB2 from Version 4 to Version 5" has been selected.
      <br/>
      For ease of understanding, the remainder of our discussion will focus on this selected migration task.
      <br/>
      However, it should be kept in mind that a corresponding discussion applies to the other tasks of load SMPE libraries, install, fallback, remigrate and update as well as to other similar functions.
      <br/>
      Once again, while the following discussion takes place in the context of DB2, the general principles are widely applicable to other database systems.
    </p>
    <p num="34">
      Once the user has selected the "Migrate a DB2 from Version 4 to Version 5" task option and has clicked on the "OK" button, the user is then presented with the window shown in FIG. 3.
      <br/>
      This window directs the user in opening a DB2 Installer file for migration and gives the user the option of filling in a field to indicate the name of the DB2 subsystem to be put on the host.
      <br/>
      Alternatively, the user can click on a browse button to browse for a subsystem name.
      <br/>
      If the user fills out a subsystem name, that name plus the extension ".DB2" will be used as the default name in the ensuing file dialog.
      <br/>
      If the user clicks on the browse button without first filling out the subsystem name, the default filename will be "*.DB2". In either case, if it is determined that the user has selected an already existing subsystem name, that indicates that the named subsystem file must be already in the process of being migrated.
      <br/>
      If the user is beginning a new migration, a unique subsystem name must be selected.
      <br/>
      After the user fills in or selects the name of the subsystem, the OK button is enabled.
      <br/>
      When the user clicks on the OK button, the user is presented with the window shown in FIG. 4.
      <br/>
      FIG. 4 provides to the user a list of steps which are to be taken to complete a task, in the present case, migrate.
      <br/>
      Similar windows are presented to users, listing the steps for executing the load SMPE libraries, install, fallback, remigrate and upgrade tasks.
    </p>
    <p num="35">
      The first step to be completed by the user for the migrate task is to "Load existing options." Existing options are parameters that were set in the previously installed version of the program, in this case, DB2 Version 4.
      <br/>
      In a preferred embodiment, the previously set parameters are saved in a file created during the prior installation.
      <br/>
      Once the user selects this button, shown in FIG. 4, the user is presented with the window shown in FIG. 5.
      <br/>
      Existing options and parameters, as they were set in Version 4 of DB2, can be found in a file called, for example, DSNTIDxx, which was the output of the install process for Version 4.
      <br/>
      A user can use a filename other than DSNTIDxx, or can use multiple files.
      <br/>
      This file may either be stored on the workstation or on the host.
      <br/>
      FIG. 5 shows the window which allows the user to load the DSNTIDxx file using one of two options.
      <br/>
      First, the user can use FTP to download the file from the host by selecting the "Download DSNTIDxx from host" button or second, the user can load the file from the workstation by selecting the "Locate DSNTIDxx on workstation" button.
    </p>
    <p num="36">
      If the user selects the first option, to download the file from the host, the user must provide information that will allow the installer to locate the file on the host.
      <br/>
      For example, in the described environment, this information may include the host name, the user ID and the password using the window shown in FIG. 6.
      <br/>
      Additionally, the user may provide the partitioned data set member, which is the MVS filename.
      <br/>
      With this information, FTP is used to locate and download the file, in this case, an MVS file.
      <br/>
      The file, as downloaded, is in a different format from that which is to be used in the workstation.
      <br/>
      So, the file, whatever its format, must be parsed to extract all of the options and parameters set up for the previous program version out of the file.
      <br/>
      Once this is done, the user is provided with information regarding whether or not the file was downloaded and parsed successfully and if it was not successful, the user is provided with reasons.
    </p>
    <p num="37">
      If the user selects the second option, to load the file from the workstation, the user can use the Browse button, shown in FIG. 5, to select the appropriate file for parsing.
      <br/>
      Under either option, the user may decide to click on the "Save and close button" shown in FIG. 5.
      <br/>
      The user may select this button when he/she has not yet completed this step, but wishes to return to it at a later time.
      <br/>
      If the user chooses to complete this step, after the DSNTIDxx file has been successfully parsed, the user clicks on the DONE button, shown in FIG. 5 and is returned to the window shown in FIG. 4.
      <br/>
      FIG. 4 indicates that the user has already completed the first step of the migrate task, "Load existing options," as just discussed, by the fact that the button labeled "Load existing options" is highlighted.
    </p>
    <p num="38">
      It is important to be able to show to the user exactly what steps have been completed.
      <br/>
      For example, the user could begin the "Load existing options" step shown in FIG. 4.
      <br/>
      This is an extended process and so it could very well be that the user initiates the step, gets part way through the process and decides that he/she wants to save the work he/she has completed thus far and leave.
      <br/>
      The user might do this by clicking on the "Save and close" button, as discussed above.
      <br/>
      The user would then come back to the saved place at a later time, and the button for the load existing options step, while enabled, would not be highlighted, since the user left the task uncompleted.
      <br/>
      Thus, it is important to make it clear to the user that just because a button representing a step is enabled does not mean that the step is completed.
      <br/>
      A separate indication must be provided to the user so that he/she knows that a particular step has been completed.
    </p>
    <p num="39">
      For users of workstations operating under OS/2, providing an indication that a step of a task had been completed is a simple matter.
      <br/>
      This is so because OS/2 allows the color of a button to be changed.
      <br/>
      Thus, for a user working on a workstation operating under OS/2, once a user had completed a step, the color of the button representing that step can be changed to another color, for example, green.
    </p>
    <p num="40">
      However, this will not work for users of workstations operating under Windows NT, for example.
      <br/>
      This is so because Windows NT does not allow the color of a button to be changed, as can be done in OS/2.
      <br/>
      Thus, a new way had to be developed to show the designation of a completed step to the user.
      <br/>
      The present invention provides the solution.
      <br/>
      In the present invention, text fields have been placed behind each of the buttons (e.g. the "Load existing options" button, shown in FIG. 4) on the screen representing steps which must be completed for a task.
      <br/>
      The text fields are in a color that is different from the background color of the window and are also in a color different from that of the buttons.
      <br/>
      For example, the color of the text fields may be made green, although other colors could be used to indicate a completed task.
      <br/>
      Additionally, the text fields are larger than the buttons, so that when the buttons are placed on top of the text fields, the text fields show up as a border around the buttons.
      <br/>
      Taking a single button, initially, the text field behind the button is hidden so the user only sees the button representing a step that must be completed by the user.
      <br/>
      Only when the user indicates that a particular step is completed, for example, by clicking on a "Done" button or viewing the last window in a series of windows relating to the step, is the text field shown, thereby providing a colored border around the button representing the completed step.
      <br/>
      If the user were to leave a particular task uncompleted and perform a save and close operation, intending to complete the step at a later time, the text field would not be shown.
      <br/>
      This process is repeated for each of the steps for a particular task and enables the user to easily see which steps have been completed.
    </p>
    <p num="41">
      Looking again at FIG. 4, once the "Load existing options" step has been completed, the user can then move on to the "Set up version 5 new function" step.
      <br/>
      After the user clicks on the button labeled "Set up version 5 new function," the user is taken to the window shown in FIG. 7.
      <br/>
      At this point, the user has now accessed the Version 4 options and parameters.
      <br/>
      However there are new functions and new parameters associated with Version 5.
      <br/>
      This is often the case when new versions of database systems are created.
      <br/>
      To assist the user in navigating through these new functions and parameters, the present invention provides the users with a TaskGuide to tell users about the new functions and parameters.
    </p>
    <p num="42">
      Of the new functions and parameters, some need not be set by the user, some may be set by the user and some must be set by the user.
      <br/>
      A problem arises due to the fact that during a migrate, etc. there are on the order of 100 different predefined install windows in which these different functions and parameters can be set.
      <br/>
      Intelligence is built in to all these different windows allowing the system to check for certain file types and different types of input.
      <br/>
      For example, if the user inputs something in one window, that user action may indicate another window must be presented to the user.
      <br/>
      The present invention maintains all of this intelligence associated with the predefined install windows.
    </p>
    <p num="43">
      Returning to FIG. 7, it can be seen that the user has two paths to follow to set the functions and parameters.
      <br/>
      First, the user can select "DB2 Version 5 TaskGuide," to access information regarding the functions and parameters.
      <br/>
      Second, the more expert user can select "Set up Version 5 options."
    </p>
    <p num="44">
      FIG. 8 logically shows the choice to be made by the user, in the context of DB2 Version 5, where the user selects one of the two options discussed above.
      <br/>
      From the box labeled "Choice window," the user either selects the TaskGuide, made of TaskGuide windows, or the Expert window.
      <br/>
      The Expert window and some of the TaskGuide windows may be linked to the predefined install windows with the intelligence built in.
    </p>
    <p num="45">
      First, the TaskGuide user option is discussed.
      <br/>
      Each TaskGuide window provides an explanation of a single associated function or parameter.
      <br/>
      FIG. 9 shows the second of the TaskGuide windows, where the first window is just a welcome window.
      <br/>
      On the left side of this figure there is a navigation bar relating to a single task.
      <br/>
      The navigation bar tells the user that the new functions and parameters are separated into three separate groups: performance, capacity and availability enhancements; client/server and open systems; and user productivity.
      <br/>
      Each of these groups has several of the new functions and parameters assigned to it.
      <br/>
      The navigation bar also has a rectangular icon associated with each of these new functions and parameters.
      <br/>
      When the user has viewed a TaskGuide window associated with a particular new function or parameter, the associated icon on the navigation bar is changed in color, turned green, for example.
      <br/>
      This allows the user to determine where in the TaskGuide he/she is at present time and where he/she has been.
      <br/>
      Returning to the right-hand side of FIG. 9, it can be seen that this TaskGuide window is associated with a particular function or parameter called "Sysplex query parallelism."
    </p>
    <p num="46">
      In FIG. 9, the user may select the Yes button to set the parameter, or may select the No button if the user does not wish to set the parameter.
      <br/>
      If the user selects the No button, the Next button is enabled so that the user may continue.
      <br/>
      If user selects the Yes button, the user is then presented with the window shown in FIG. 10, labeled as a DDF window, with fields to be filled out by the user.
      <br/>
      FIG. 10 is an example of an predefined installation window, which is linked to the TaskGuide window, as shown in FIG. 8.
      <br/>
      The predefined installation window, which exists in DB2, has intelligence built into it.
      <br/>
      Such predefined installation windows may exist in other database programs.
      <br/>
      The user is taken to this predefined installation window to set the parameter associated with the TaskGuide window.
      <br/>
      This linking of TaskGuide windows and predefined installation windows allows the user to view whatever information is in the predefined windows and receive help for that window, if desired.
      <br/>
      Once the user selects the "OK" button on the predefined install window, the user is returned to the TaskGuide window he/she was previously viewing, in this case, FIG. 9.
      <br/>
      The "Next" button will then be enabled, allowing the user to select that button and continue on in the TaskGuide.
    </p>
    <p num="47">
      In the preferred embodiment of the present invention, in order to keep the process of setting parameters manageable, the user is forced to go to the predefined install window to change the parameters.
      <br/>
      Alternatively, the user could change the parameters directly in the TaskGuide.
      <br/>
      In this case, the system would have to also change the parameters in the predefined install windows.
      <br/>
      Thus, error checking would have to be implemented, which executes in two different locations: in the TaskGuide itself and in the predefined install windows.
    </p>
    <p num="48">
      Going back to FIG. 8, and the preferred implementation, the series of predefined install windows, which are task type windows, can be seen.
      <br/>
      It should be noted that some of the TaskGuide windows do not have arrows pointing to an predefined install window.
      <br/>
      This is because in these cases there is nothing for the user to input.
      <br/>
      Additionally, the arrows from the TaskGuide windows go straight to the predefined install window and back.
      <br/>
      This makes clear that the predefined install windows are not implanted in the middle of the flow of the TaskGuide windows.
      <br/>
      Rather, there are links off of the TaskGuide windows to the predefined install windows and links back to the particular TaskGuide window in the TaskGuide from which the link came off.
    </p>
    <p num="49">
      Turning to FIG. 11, which shows the "Enhancements for Data Sharing" TaskGuide window, this is an example of a TaskGuide window which does not have "Yes" and "No" buttons.
      <br/>
      In this case, a check was performed to determine if the user has data sharing and it was discovered that the user did not have this feature.
      <br/>
      Thus, there is no reason for the user to set the options relating to this feature.
      <br/>
      In this case, the TaskGuide window is used to tell the user that there are enhancements for data sharing, in the event that the user wishes to take advantage of those enhancements in the future.
    </p>
    <p num="50">
      Turning to FIG. 12, we see a TaskGuide window entitled "Frequently Requested Enhancements." Turning to the right side of FIG. 12, we see that instead of the "Yes" and "No" buttons, the user is presented with a "Set options" button.
      <br/>
      The user is presented with this button if the user must fill in these parameters.
      <br/>
      Preferably, the user is not given a choice, but must go to the associated predefined install window, where the user highlights and sets the fields in question and is then returned to the "Frequently Requested Enhancements" TaskGuide window.
      <br/>
      FIG. 13 similarly requires the user to select the "Set options" button.
    </p>
    <p num="51">
      Turning now to FIG. 14, displaying a window labeled "Version 5 New Defaults Summary," this shows the new defaults window.
      <br/>
      This particular TaskGuide window is another example where, preferably, the user has no choice but to follow through with some sort of action.
      <br/>
      However, this is one case where the user is not sent to a predefined install window.
      <br/>
      Rather, the user is sent to something called the new defaults summary.
      <br/>
      In DB2, every parameter has a default value.
      <br/>
      It is very common for a given user to keep the default value for particular parameters.
      <br/>
      For various reasons, when a new version of DB2 comes out, the default values might change.
      <br/>
      So, the complete list of DB2 parameters is examined to determine all the parameters whose default values have changed in the new version of DB2.
      <br/>
      Then, those parameters, whose default values have changed, are examined to determine those of the parameters where, in Version 4 of DB2, the user accepted the default value of the parameters.
    </p>
    <p num="52">
      If the user did not select the default value in Version 4, he/she is not likely to be interested in what the default value is in Version 5.
      <br/>
      The user apparently had a reason to change from the default value and as a consequence must know about the parameter.
      <br/>
      There is no need to worry about the user in such a situation.
      <br/>
      If, however, the user had accepted the default value of a parameter in Version 4, it is desirable to inform the user that the default has changed by listing the parameters in the new defaults summary, and give the user an opportunity to change the default value.
    </p>
    <p num="53">
      The new defaults summary TaskGuide window shown in FIG. 14, another example of which is shown in FIG. 15, provides to the user a list of all the parameters whose default values have changed, where the user had accepted the default values in Version 4.
      <br/>
      For each of these parameters, this window also provides to the user information regarding the Version 4 default value, the Version 5 default value and the current value.
      <br/>
      The user may change the value of the parameter from the default value by changing the current value field in the window.
    </p>
    <p num="54">
      Returning once again to FIG. 8, which shows the "Choice window," the expert path will now be discussed.
      <br/>
      This path is taken by a user who is familiar with all of the new functions and parameters of the new version of DB2 and need not be stepped through the TaskGuide to learn of the new functions and parameters.
      <br/>
      When this path is selected, the user is presented with the Expert window, which is shown in FIG. 16. This expert window presents the user with a list of buttons representing all the predefined install windows that the user would have eventually accessed had he/she gone through the TaskGuide.
    </p>
    <p num="55">
      For example, if the user were to select the button marked "Sysplex query parallelism", he/she would be presented with the window shown in FIG. 17, the same window as shown in FIG. 10, where both Figures show the fields to be filled out by the user.
      <br/>
      The difference in FIG. 17 is that there is also a button labeled TaskGuide, which was not visible in FIG. 10. This TaskGuide button allows the expert user to access the TaskGuide in case the information available there is needed.
    </p>
    <p num="56">
      In summary, the user has the option of choosing one of two paths, the TaskGuide path or the expert path.
      <br/>
      If the user chooses to go through the TaskGuide, he/she is given information about all the new functions and parameters.
      <br/>
      If the function or parameter is changeable, the user is given the opportunity to leave the Task Guide, go to an predefined install window, set parameters, return to the Task Guide and continue.
      <br/>
      If the user chooses to go to the expert path, the user is given a list of all the predefined install windows that may be accessed.
      <br/>
      The user can then jump to every one of those predefined install windows that he would have been able to access by using the TaskGuide, including the new defaults window.
    </p>
    <p num="57">
      In the present invention, the TaskGuide gives the user information about all the new functions and parameters, while utilizing all the separate predefined install windows.
      <br/>
      The same can be said for the expert path, where the user can leave the Expert window and jump to any of the predefined install windows.
      <br/>
      This provides the user with the ability to find out about all the functions of the product, without having all of the parameters in two different places, in the TaskGuide windows of the TaskGuide and in the predefined install windows.
    </p>
    <p num="58">
      In prior systems, which have some sort of informational user guide, designers of such systems having, on the order of 100 different functions and parameters, have decided that the typical user will not care about 90% of them.
      <br/>
      The designers then take the remaining 10 parameters and create an informational guide with them, where the user can change the 10 parameters directly in the guide.
      <br/>
      In other words, the parameter windows are thrown into the path of the informational guide and the user is asked about and is allowed to set only those 10 parameters which the designers have deemed as the most significant.
      <br/>
      Thus, prior systems have not allowed the user to access all the parameters and have also not allowed the user to leave the informational guide and go to an already predefined window to access the parameters which also has help and intelligence built in.
    </p>
    <p num="59">Thus, the present invention provides a way in which system parameters may be set, either by an expert user or by a non-expert user.</p>
    <p num="60">
      Returning to FIG. 4, once the user has completed the "Set up version 5 new function" step, that button is presented with the highlighted border in the manner discussed above.
      <br/>
      The user may then press the "Modify Migration Options" button, which will cause the window shown in FIG. 19 to be shown to the user.
      <br/>
      FIG. 19 lists DB2 Installer options along with an icon next to each of the options.
      <br/>
      The pencil icon indicates that the option is read-write, or modifiable, whereas, the pencil with an "x" icon indicates that the option is read only.
    </p>
    <p num="61">
      When the user clicks on the Done button of FIG. 19, the user is returned to the window of FIG. 4, where the user may click on the "Test DB2 system health" button.
      <br/>
      If the user chooses to do so, the user is presented with a standard job card (not shown), which the user fills out.
      <br/>
      After this is done, the user is then presented with the window shown in FIG. 18. FIG. 18 shows a standard job status window, entitled "Health Check Job Status," which contains jobs and information points, such as "Check integrity".
      <br/>
      The reason for running this health check is that before a user migrates his/her DB2 system, or any other database system, it is wise to check on the health or status of the running DB2 catalog and directory to ensure consistency and a lack of conflicts.
      <br/>
      It is also wise to know of any changes in the product that could possibly affect any currently running applications.
      <br/>
      Such information is also apparent from the job status window.
      <br/>
      DB2 Installer has provided a path within migration, which allows the user to verify the integrity of his/her database catalog and directory.
      <br/>
      In the Health Check View, shown in FIG. 18, the user is presented with a predefined job, which can divided into smaller jobs.
      <br/>
      From here the user can edit the jobs, including the job control language (JCL), execute the jobs, or add jobs.
      <br/>
      A shadow of the DB2 catalog and directory is created and the predefined and edited jobs are run against it to verify the integrity of the database catalog and directory.
      <br/>
      Any additional jobs added by the user are also executed to verify the integrity of the catalog and directory.
      <br/>
      This verification controls contention problems on the user's production catalog.
      <br/>
      DB2 Installer has taken many of the manual steps out for the user and provided a GUI path for the execution of these jobs.
      <br/>
      Another key component is the help that users receive via the Info Points on the Health Check View, where the Info Points list a series of tasks which the user needs to perform on his/her own.
      <br/>
      FIG. 21 shows an example of one such Info Point.
      <br/>
      These contain information and tasks that the user should perform and for which the DB2 Installer is unable to provide a job.
      <br/>
      While the user should make use of these jobs prior to a migration, most users will find the queries useful after migration as well, and will now have a convenient way to access and execute them.
    </p>
    <p num="62">
      After completion of the system health test, the user is returned to the window shown in FIG. 4, where the user can click on the button labeled "Generate migration jobs." After jobs are successfully generated, the "Run migration jobs" button, shown in FIG. 4, is enabled.
      <br/>
      Once the user clicks on this button, the user is presented with a window (not shown) where the user fills out job card information and clicks Continue.
      <br/>
      The user is then presented with the window shown in FIG. 20 which provides job status.
      <br/>
      Further details regarding running jobs were discussed above.
    </p>
    <p num="63">
      Once the migration jobs have been run, the user may verify his/her system by clicking on the "Run version 4 sample jobs" and "Run version 5 sample jobs" buttons, shown in FIG. 4.
      <br/>
      Once these steps are done, migration is complete.
    </p>
    <p num="64">
      As noted above, the foregoing discussion has been presented in the context of a migration task.
      <br/>
      It is to be noted that this discussion applies correspondingly to a user who wishes to perform a load SMPE libraries, install, fallback, remigrate or update task or any other similar tasks.
      <br/>
      For example, a user performing a fallback task may obtain job status through the continuous polling procedure discussed above.
      <br/>
      Similarly the fallback user can determine which steps of a task have been completed, can check the integrity of the database system and view the defaults list, all as discussed above.
    </p>
    <p num="65">
      In addition, DB2 Installer has applied the same GUI concepts, as discussed above, towards the loading of SMPE libraries or other similar preinstall functions.
      <br/>
      The approach, views, flow and job status indicators are implemented in the same fashion as the rest of DB2 Installer.
      <br/>
      In prior systems, users were instructed to unload jobs from the tape or cartridge, and edit them manually.
      <br/>
      The GUI in accordance with the present invention, enables the user to supply input for parameters that is edited into preinstall jobs.
      <br/>
      Progress and execution of these jobs is handled in the same way as jobs for install, migrate, etc. are handled for a program such as DB2.
      <br/>
      While the implementation of this in DB2 Installer is specific to DB2, the GUI can be used to accommodate other programs requiring preinstall functions.
    </p>
    <p num="66">
      Other modifications and variations to the invention will be apparent to those skilled in the art from the foregoing disclosure and teachings.
      <br/>
      Thus, while only certain embodiments of the invention have been specifically described herein, it will be apparent that numerous modifications may be made thereto without departing from the spirit and scope of the invention.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for generating a defaults list for assisting a user through a program procedure when the user goes from a first version of a program to a second version of the program on a computer, the method comprising:</claim-text>
      <claim-text>a) generating a list of program parameters, wherein the list includes only those parameters having default values in the second version of the program which are different from default values in the first version of the program;</claim-text>
      <claim-text>and b) displaying the list of program parameters to the user to assist the user in going from the first version to the second version.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method according to claim 1, wherein the program is DB2 (tm) .</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method according to claim 1, further comprising the steps of: c) when the one of the program parameters is selected by the user, displaying the default value in the second version of the program, the default value in the first version of the program and the current value;</claim-text>
      <claim-text>and d) providing the user with the ability to modify the current value.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method according to claim 1, wherein the program procedure is one of migrate and update.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1, wherein in said step a) the list includes only those parameters having default values in the first version of the program which were accepted by the user and are different from default values in the second version of the program.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method according to claim 1, wherein said a) further comprises: a1) identifying all of the program parameters in the program; a2) identifying those program parameters for which, in implementing the first version of the program, the user had selected default values;</claim-text>
      <claim-text>and a3) further identifying, for those program parameters for which the user had selected default values, the ones of those default values which changed in going from the first version of the program to the second version.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A computer system for generating a defaults list to assist a user through a program procedure when the user goes from a first version of a program to a second version of the program on a computer, said system comprising: a workstation for generating a list of program parameters, wherein the list includes only those parameters having default values in the second version of the program which are different from default values in the first version of the program;</claim-text>
      <claim-text>and a display for displaying the list of program parameters to the user to assist the user in going from the first version to the second version.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The computer system according to claim 7, wherein the program is DB2 (tm) .</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The computer system according to claim 7, wherein when the one of the program parameters is selected by the user, the display displays the default value in the second version of the program, the default value in the first version of the program and the current value;</claim-text>
      <claim-text>and wherein the workstation provides the user with the ability to modify the current value.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The computer system according to claim 7, wherein the program procedure is one of migrate and update.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The computer system of claim 7, wherein the list includes only those parameters having default values in the first version of the program which were accepted by the user and are different from default values in the second version of the program.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The computer system according to claim 7, wherein the workstation which generates the list of program parameters first identifies all of the program parameters;</claim-text>
      <claim-text>identifies those program parameters for which, in implementing the first version of the program, the user had selected default values;</claim-text>
      <claim-text>and further identifies, for those program parameters for which the user had selected default values, the ones of those default values which changed in going from the first version of the program to the second version.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A computer-readable medium containing a computer program for performing a method of generating a defaults list to assist a user through a program procedure when the user goes from a first version of a further program to a second version of the further program on a computer, the instructions comprising the steps of: a) generating a list of program parameters, wherein the list includes only those parameters having default values in the second version of the further program which are different from default values in the first version of the further program;</claim-text>
      <claim-text>and b) displaying the list of program parameters to the user to assist the user in going from the first version to the second version.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The computer-readable medium according to claim 13, wherein the program is DB2 (tm) .</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The computer-readable medium according to claim 13, further comprising the steps of: c) when the one of the program parameters is selected by the user, displaying the default value in the second version of the program, the default value in the first version of the program and the current value;</claim-text>
      <claim-text>and d) providing the user with the ability to modify the current value.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The computer-readable medium according to claim 13, wherein the program procedure is one of migrate and update.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The computer-readable medium of claim 13, wherein in said step a) the list includes only those parameters having default values in the first version of the program which were accepted by the user and are different from default values in the second version of the program.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The computer-readable medium according to claim 13, wherein said a) further comprises: a1) identifying all of the program parameters in the further program; a2) identifying those program parameters for which, in implementing the first version of the further program, the user had selected default values;</claim-text>
      <claim-text>and a3) further identifying, for those program parameters for which the user had selected default values, the ones of those default values which changed in going from the first version of the further program to the second version.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. A computer program to be performed on or with the aid of a computer system for generating a defaults list for assisting a user through a program procedure when the user goes from a first version of a further program to a second version of the further program on a computer, the computer program comprising: a) generating a list of program parameters, wherein the list includes only those parameters having default values in the second version of the program which are different from default values in the first version of the program;</claim-text>
      <claim-text>and b) displaying the list of program parameters to the user to assist the user in going from the first version to the second version.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The computer program according to claim 19, wherein the program is DB2 (tm) .</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The computer program according to claim 19, further comprising the steps of: c) when the one of the program parameters is selected by the user, displaying the default value in the second version of the program, the default value in the first version of the program and the current value;</claim-text>
      <claim-text>and d) providing the user with the ability to modify the current value.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The computer program according to claim 19, wherein the program procedure is one of install, migrate, fallback, remigrate and update.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The computer program of claim 19, wherein in said step a) the list includes only those parameters having default values in the first version of the program which were accepted by the user and are different from default values in the second version of the program.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. A computer program as claimed in claim 19, wherein said a) further comprises: a1) identifying all of the program parameters in the further program; a2) identifying those program parameters for which, in implementing the first version of the further program, the user had selected default values;</claim-text>
      <claim-text>and a3) further identifying, for those program parameters for which the user had selected default values, the ones of those default values which changed in going from the first version of the further program to the second version.</claim-text>
    </claim>
  </claims>
</questel-patent-document>