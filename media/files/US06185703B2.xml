<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185703B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185703</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185703</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25488178" extended-family-id="42113809">
      <document-id>
        <country>US</country>
        <doc-number>08948716</doc-number>
        <kind>A</kind>
        <date>19971010</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08948716</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43172171</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>94871697</doc-number>
        <kind>A</kind>
        <date>19971010</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08948716</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G11C  29/48        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>29</main-group>
        <subgroup>48</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>714718000</text>
        <class>714</class>
        <subclass>718000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>711003000</text>
        <class>711</class>
        <subclass>003000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G11C-029/48</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>29</main-group>
        <subgroup>48</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-029/48</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>29</main-group>
        <subgroup>48</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>10</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>5</number-of-figures>
      <image-key data-format="questel">US6185703</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for direct access test of embedded memory</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>KEELEY JAMES W</text>
          <document-id>
            <country>US</country>
            <doc-number>4575792</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4575792</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>NADEAU-DOSTIE BENOIT, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4969148</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4969148</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>FUCCIO MICHAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5249281</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5249281</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>FERRA LAWRENCE C</text>
          <document-id>
            <country>US</country>
            <doc-number>5596734</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5596734</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>SEYMOUR EDWARD MICHAEL</text>
          <document-id>
            <country>US</country>
            <doc-number>5663965</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5663965</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>ESKANDARI NICK G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5828825</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5828825</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>BALKIN DAVID K, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5835504</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5835504</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>BELL JAMES S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5875293</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5875293</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>BROWN BENJAMIN J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5923675</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5923675</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>DREYER ROBERT S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5479652</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5479652</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Intel Corporation</orgname>
            <address>
              <address-1>Santa Clara, CA, US</address-1>
              <city>Santa Clara</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>INTEL</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Guddat, Douglas A.</name>
            <address>
              <address-1>Portland, OR, US</address-1>
              <city>Portland</city>
              <state>OR</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Cleary, James M.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Israeli, Tsafrir</name>
            <address>
              <address-1>Haifa, IL</address-1>
              <city>Haifa</city>
              <country>IL</country>
            </address>
          </addressbook>
          <nationality>
            <country>IL</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Blakely, Sokoloff, Taylor &amp; Zafman LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Chan, Eddie P.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      An apparatus includes an embedded memory, a plurality of input connectors to receive input signals from an external source, a plurality of output connectors to provide output signals to the external source, and a plurality of reconfigurable input and output signal paths coupled to the embedded memory and the plurality of input and output connectors.
      <br/>
      When the apparatus is operating in a first operating mode, the plurality of reconfigurable input and output signal paths provide the input signals directly to and the output signals directly from the embedded memory.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">
      The present invention pertains to memories and memory testing.
      <br/>
      More particularly, this invention relates to direct access testing of embedded memory.
    </p>
    <p num="3">2. Background</p>
    <p num="4">
      Continual advances in processor technology have led to continual increases in the functionality provided in a single processor chip.
      <br/>
      One example of such functionality is on-chip memories, often referred to as cache memories.
      <br/>
      On-chip cache memories provide storage of data and/or instructions as well as various other control and/or address information for use by the execution unit(s) and other internal logic of the processor.
      <br/>
      These on-chip cache memories are typically very fast memories, with the combination of their speed as well as their close physical locality to the execution unit(s) and other internal logic leading to fast memory accesses for the information stored in these memories.
    </p>
    <p num="5">
      However, the fabrication of memories does not produce perfect results and, therefore, processors will occasionally be fabricated which have faulty memories.
      <br/>
      The faults may be complete failure of the memory cells, failure of particular cells, failure only under certain circumstances, etc.
      <br/>
      Therefore, given that processors with such faulty memories may be fabricated, it would be beneficial to provide a way to test the embedded memories to verify their performance.
      <br/>
      Unfortunately, given the embedded nature of these memories, it is typically not possible to directly access them from external to the processor, thereby making testing very difficult.
    </p>
    <p num="6">
      An additional concern in testing embedded memory is the amount of chip "real estate" which is taken up by the testing logic.
      <br/>
      Once operation of the embedded memory has been verified the testing of the embedded memory is typically not repeated.
      <br/>
      Therefore, it would be preferable to reduce the amount of chip real estate used for logic dedicated solely to the testing of the embedded memory.
    </p>
    <p num="7">
      One solution to testing embedded memories is to generate a software test program which, when executed by the execution unit(s) of the processor, requires the use of the embedded memories.
      <br/>
      By carefully selecting the instructions and data for testing, portions of the embedded memories can be checked and performance verified.
      <br/>
      However, this solution requires very careful planning by the test program designer and a thorough knowledge of the overall processor architecture in order for the designer to know how the instructions will be executed and information stored in the memories.
      <br/>
      Furthermore, this solution makes it very difficult to exactly identify which particular memory cell malfunctioned in response to which particular instruction.
    </p>
    <p num="8">Thus, a need exists for improved testing of embedded memories.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">
      An apparatus is disclosed which includes an embedded memory, a plurality of input connectors to receive input signals from an external source, a plurality of output connectors to provide output signals to the external source, and a plurality of reconfigurable input and output signal paths coupled to the embedded memory and the plurality of input and output connectors.
      <br/>
      When the apparatus is operating in a first operating mode, the plurality of reconfigurable input and output signal paths provide the input signals directly to and the output signals directly from the embedded memory.
    </p>
    <p num="10">
      A method is disclosed which includes checking whether a direct access test mode is selected and receiving input signals from an external source.
      <br/>
      If the direct access test mode is selected, the input signals are provided directly to an embedded memory.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="11">
      The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:
      <br/>
      FIG. 1 is a block diagram illustrating the direct access testability of embedded memory in a processor according to one embodiment of the present invention;
      <br/>
      FIG. 2 is a timing diagram illustrating the parallel command specification/serial execution according to one embodiment of the present invention;
      <br/>
      FIG. 3 is a block diagram illustrating the direct access test control logic according to one embodiment of the present invention;
      <br/>
      FIG. 4 is a block diagram illustrating the steps followed in providing direct access testability of embedded memory in a processor according to one embodiment of the present invention; and
      <br/>
      FIG. 5 illustrates a hardware system or machine suitable for use as a host or server system according to one embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="12">
      In the following description, various aspects of the present invention will be described.
      <br/>
      However, it will be understood by those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention.
      <br/>
      For purposes of explanation, specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention.
      <br/>
      However, it will also be apparent to those skilled in the art that the present invention may be practiced without these specific details.
    </p>
    <p num="13">
      In the discussions to follow, certain signals are discussed followed by a "-".
      <br/>
      This notation is used to indicate a signal which is active when in a low state (that is, a low voltage).
      <br/>
      It is to be appreciated, however, that the present invention may be implemented where these signals are active when in a high state rather than when in a low state.
      <br/>
      Similarly, the present invention may be implemented where signals discussed herein which are not followed by a "-" are active when in a low state.
    </p>
    <p num="14">
      FIG. 1 is a block diagram illustrating the direct access testability of embedded memory in a processor according to one embodiment of the present invention.
      <br/>
      As illustrated, processor 100 includes external input/output (I/O) connectors 110, direct access test (DAT) control logic 120, instruction cache unit 130, data cache unit 140, and branch target buffer (BTB) 150, coupled together as illustrated.
      <br/>
      The memory arrays of instruction cache 130, data cache 140, and branch target buffer 150 are referred to as "embedded memories".
      <br/>
      It is to be appreciated that processor 100 includes additional logic and circuitry, such as registers, execution unit(s), etc. However, this additional logic and circuitry has not been shown so as not to clutter the drawings.
    </p>
    <p num="15">
      Instruction cache unit 130, also referred to as an instruction fetch unit (IFU), includes a 16 k byte cache memory made up of static random access memory (SRAM) cells and associated control logic.
      <br/>
      In one implementation, instruction cache 130 is organized as a four-way set associative cache with 128 lines (sets) of 32 bytes each.
      <br/>
      Instruction cache 130 includes a data portion, a tag portion, and a control portion and is used to store instructions which are used, or expected to be used, by the execution unit(s) of processor 100.
      <br/>
      Instruction caches are well-known to those skilled in the art and thus will not be discussed further except as they pertain to the present invention.
    </p>
    <p num="16">
      Data cache 140 includes a 16 k byte cache memory made up of SRAM cells and associated control logic.
      <br/>
      In one implementation, data cache 140 is organized as a four-way set associative cache with 128 lines of 32 bytes each.
      <br/>
      Data cache 140 includes a data portion, a tag portion, and a control portion and is used to store data which is used, or expected to be used, by the execution unit(s) of processor 100.
      <br/>
      Data caches are well-known to those skilled in the art and thus will not be discussed further except as they pertain to the present invention.
    </p>
    <p num="17">
      Branch target buffer 150 includes a memory array made up of SRAM cells and associated control logic.
      <br/>
      In one implementation, branch target buffer 150 is organized as a four-way set associative cache with 128 lines per way.
      <br/>
      Branch target buffer 150 stores addresses of branch instructions as well as information predicting whether the branches will be taken when the instructions are executed.
      <br/>
      The branch target buffer is used to determine, based on whether the branch is taken, which address should be used to continue pre-fetching instructions.
      <br/>
      Branch target buffers are well-known to those skilled in the art and thus will not be discussed further except as they pertain to the present invention.
    </p>
    <p num="18">
      External I/O connectors 110 provide the input and output connections for processor 100.
      <br/>
      Address, data, and control information is input to and output from processor 100 via external I/O connectors 110.
      <br/>
      In one implementation, external I/O connectors 110 are a plurality of pins which interface between an external circuit board and processor 100.
      <br/>
      However, in alternate implementations different connecting mechanisms or devices are used.
      <br/>
      In one such alternate implementation, processor 100 is designed to be surface mounted to a circuit board without the use of pins.
      <br/>
      In this alternate implementation, external I/O connectors 110 are electrical connection points which, when processor 100 is affixed to the circuit board, are placed in electrical contact with the signal lines on the circuit board.
    </p>
    <p num="19">
      According to one embodiment of the present invention, processor 100 can function in either a DAT mode or a "normal" mode.
      <br/>
      DAT mode is the direct access test mode which makes the embedded memories externally directly accessible.
      <br/>
      External commands can directly read from and write to particular locations within the embedded memories in DAT mode.
      <br/>
      Normal mode refers to the normal operating mode (non-DAT mode) of processor 100, in which the embedded memories are not externally directly accessible.
    </p>
    <p num="20">
      In the illustrated embodiment, processor 100 is initialized into either DAT mode or normal mode at system reset based on the A-�30� signal from the external bus.
      <br/>
      If the A-�30� signal is in a first state (e.g., asserted) then processor 100 is operating in DAT mode.
      <br/>
      Otherwise, processor 100 is operating in normal mode.
      <br/>
      In one implementation the value of the A-�30 � signal is stored in a configuration register (not shown) during reset and is used during operation of processor 100 to enable or disable various signal drivers, as discussed in more detail below.
    </p>
    <p num="21">
      In the illustrated embodiment, the A-�30� signal is either asserted or deasserted at reset by external configuration logic.
      <br/>
      In alternate embodiments, the A-�30� signal is hardwired to a particular value, tied to a value in a Flash memory device or other EEPROM, configurable using jumpers, etc.
      <br/>
      Additionally, in alternate embodiments a signal(s) other than the A-�30� signal is used to enable/disable DAT mode.
    </p>
    <p num="22">
      As illustrated, address signals 112, control signals 114, and data in signals 116 are input to DAT control logic 120 from external I/O connectors 110, and data out signals 118 are output from DAT control logic 120 to external I/O connectors 110.
      <br/>
      In the illustrated embodiment, address and control signals 112 and 114 include sufficient information to identify to DAT control logic 120 a particular 32-bit double word (DWORD) within the embedded memories.
    </p>
    <p num="23">
      Address, control, and data signals 112, 114, 116, and 118 are routed to DAT control logic 120.
      <br/>
      When processor 100 is operating in DAT mode, address, control, and data signals 112, 114, 116, and 118 are "re-routed" by DAT control logic 120 and used to access instruction cache 130, data cache 140, and branch target buffer 150.
      <br/>
      However, when operating in normal mode, DAT control logic 120 does not re-route the address, control, and data signals 112, 114, 116, and 118, which are thus routed to the normal internal circuitry for normal operation of processor 100.
    </p>
    <p num="24">Table I describes the information which is encoded on the address and control signals 112 and 114 while operating in DAT mode.</p>
    <heading>-- TABLE I</heading>
    <p num="25">
      -- Signal        Description
      <br/>
      -- ARREN�2:0� Array Enable.
      <br/>
      Identifies which of the embedded
      <br/>
      --               memories is to be accessed.
      <br/>
      In the illustrated embodiment
      <br/>
      --               one of the following seven arrays can be identified:
      <br/>
      --               instruction cache data array, instruction cache
      <br/>
      --               tag array, data cache data array, data cache tag array,
      <br/>
      --               branch target buffer data array, branch target buffer
      <br/>
      --               tag (address) array, and branch target buffer
      <br/>
      --               pattern table memory array.
      <br/>
      -- 3xCMD�3:0� Command.
      <br/>
      Identifies the particular command for
      <br/>
      --               the access.
      <br/>
      -- 4xSet�6:0� Set Identifier.
      <br/>
      Identifies which of the multiple
      <br/>
      --               sets within a particular array is to be accessed.
      <br/>
      -- 3xway�1:0� Way Identifier.
      <br/>
      Identifies which of the multiple ways
      <br/>
      --               within a particular array is to be accessed.
      <br/>
      -- 3xBANK�1:0� Bank Identifier.
      <br/>
      Identifies which particular bank of
      <br/>
      --               memory within an array is to be accessed.
      <br/>
      In one
      <br/>
      --               embodiment, the bank identifier is used only for
      <br/>
      --               writes to the data cache data array and instruction
      <br/>
      --               cache data array.
      <br/>
      -- DWORD�2:0� Double Word Identifier.
      <br/>
      Identifies which of
      <br/>
      --               multiple double words within a particular set is to
      <br/>
      --               be accessed.
      <br/>
      In one embodiment, the Double Word
      <br/>
      --               Identifier is used for reads from the memory arrays and
      <br/>
      --               writes to arrays other than the data cache
      <br/>
      --               data array and instruction cache data array.
    </p>
    <p num="26">
      Although specific numbers of bits for particular signals are identified, it is to be appreciated that these numbers will vary based on the structure of the embedded memories being used.
      <br/>
      By way of example, two bits are used for a four-way associative cache memory.
      <br/>
      However, if processor 100 only included two-way associative cache memories, than a single bit would be sufficient.
    </p>
    <p num="27">
      Additionally, it should be noted that in some instances three or four groups of information (identified by the "3x" or "4x" in Table I) are provided to DAT control logic 120.
      <br/>
      Three groups of some signals are used due to the differences in bus clock and core clock frequencies, as discussed in more detail below.
      <br/>
      Four groups of Set Identifier signals are used due to the dual-ported nature of some of the memory arrays, as discussed in more detail below.
    </p>
    <p num="28">
      According to one embodiment of the present invention, write accesses to the data cache data array and the instruction cache data array are 64-bit accesses.
      <br/>
      Thus, the Bank Identifiers are used to identify a particular 64-bit portion of a set which is to be accessed for a write.
      <br/>
      For other accesses to the memory arrays, the Double Word Identifiers are used to identify a particular 32-bit double word of a set which is to be accessed.
    </p>
    <p num="29">
      In the illustrated embodiment, the Double Word Identifiers are only needed to access memory arrays with sets which are greater than 32 bits.
      <br/>
      It is to be appreciated that for memory arrays with sets which are 32 bits or less it is not necessary to identify a particular 32-bit portion.
      <br/>
      Similarly, the Bank Identifiers would not be needed if the data cache data array and instruction cache data array sets were 64 bits or less.
    </p>
    <p num="30">Table II shows the correspondence between address, control, and data signals 112, 114, 116, and 118 in DAT mode and the signals the lines carry during normal mode.</p>
    <heading>--      TABLE II</heading>
    <p num="31">
      --      DAT mode signal  Non-DAT mode signal
      <br/>
      --      DAT enable       Address line 30 (A-30).
      <br/>
      --      ARREN�2:0� Address lines 33-35 (A-�35:33�).
      <br/>
      --      CMD1�3:0� Data Even Parity lines 4-7 (DEP-�7:4�).
      <br/>
      --      CMD2�3:0� Request iines 0-3 (REQ-�3:0�).
      <br/>
      --      CMD3�3:0� Breakpoint lines 2-3 (BP-�3:2�), and
      <br/>
      --                       Breakpoint and Performance Monitor lines
      <br/>
      --                       0-1 (BPM-�1:0�).
      <br/>
      --      Set1�6:0� Address lines 5-11 (A-�11:5�).
      <br/>
      --      Set2�6:0� Address lines 12-18 (A-�18:12�).
      <br/>
      --      Set3�6:0� Address lines 19-25 (A-�25:19�).
      <br/>
      --      Set4�6:0� Address lines 26-32 (A-�32:26�).
      <br/>
      --      Way1�1:0� Data Even Parity iines 2-3 (DEP-�3:2�).
      <br/>
      --      Way2�1:0� Address lines 3-4 (A-�4:3�).
      <br/>
      --      Way3�1:0� Request line 4 (REQ-�4�) and Bus Request
      <br/>
      --                       line 3 (BREQ-�3�).
      <br/>
      --      BANK1�1:0� Data Even Parity lines 0-1 (DEP-�1:0�).
      <br/>
      --      BANK2�1:0� Address Parity lines 0-1 (AP-�1:0�).
      <br/>
      --      BANK3�1:0� Modified hit (HITM-) and Hit (HIT-)
      <br/>
      --                       lines.
      <br/>
      --      DWORD�2:0� Processor Stopped Normal Execution
      <br/>
      --                       (PRDY-), Defer (DEFER-), and Bus Lock
      <br/>
      --                       (LOCK-).
      <br/>
      --      Data In          Data lines 0-31 (�D-�31:0�).
      <br/>
      --      Data Out         Data lines 32-63 (�D-63:32�).
    </p>
    <p num="32">
      When operating in DAT mode the array enable signals identify which of the embedded memories is to be enabled for access, and thus which is to act upon a particular command.
      <br/>
      Along with the array enable signals, DAT control logic 120 forwards the Set, Way, DWORD, Bank, and Command signals to the embedded array.
      <br/>
      Any data which is read out is returned to DAT control logic 120, which, when operating in DAT mode, routes the output data as data out signals 118.
    </p>
    <p num="33">
      The values used to encode the array enable information are identified in Table III below.
      <br/>
      Similarly, the values used to encode the Way selection are identified in Table IV, the values used to identify the DWORD selection are identified in Table V, and the used to identify the Bank selection are identified in Table VI.
    </p>
    <heading>-- TABLE III</heading>
    <p num="34">
      -- Value                     Array Selection
      <br/>
      -- 000                       No array selected.
      <br/>
      -- 001                       BTB Address (Tag) array.
      <br/>
      -- 010                       BTB Pattern Table array.
      <br/>
      -- 011                       BTB Target (Data) array.
      <br/>
      -- 100                       DCU Data array.
      <br/>
      -- 101                       DCU Tag array.
      <br/>
      -- 110                       IFU Data array.
      <br/>
      -- 111                       IFU Tag array.
    </p>
    <heading>--               TABLE IV</heading>
    <p num="35">
      --               Value  Way Selection
      <br/>
      --               00     0
      <br/>
      --               01     1
      <br/>
      --               10     2
      <br/>
      --               11     3
    </p>
    <heading>--             TABLE V</heading>
    <p num="36">
      --             Value  DWORD Selection
      <br/>
      --             000    DWORD 0
      <br/>
      --             001    DWORD 1
      <br/>
      --             010    DWORD 2
      <br/>
      --             011    DWORD 3
      <br/>
      --             100    DWORD 4
      <br/>
      --             101    DWORD 5
      <br/>
      --             110    DWORD 6
      <br/>
      --             111    DWORD 7
    </p>
    <heading>--               TABLE VI</heading>
    <p num="37">
      --               Value  Bank Selection
      <br/>
      --               00     Bank 0
      <br/>
      --               01     Bank 1
      <br/>
      --               10     Bank 2
      <br/>
      --               11     Bank 3
    </p>
    <p num="38">
      According to one embodiment of the present invention several external signals are driven to default values or voltage levels so that they are at a known state and do not interfere with the DAT mode.
      <br/>
      These signals, according to one implementation, are identified in Table VII.
    </p>
    <heading>-- TABLE VII</heading>
    <p num="39">
      -- Signal                           Default Value
      <br/>
      -- Address bit 20 mask (A20M-).
      <br/>
      High Voltage
      <br/>
      -- Address strobe (ADS-).       High Voltage
      <br/>
      -- Bus Initialize (BINIT-).     High Voltage
      <br/>
      -- Priority Agent Bus Request (BPRI-).
      <br/>
      High Voltage
      <br/>
      -- Data Bus Busy (DBSY-).       High Voltage
      <br/>
      -- Data Ready (DRDY-).          High Voltage
      <br/>
      -- Cache Flush (FLUSH-).        High Voltage
      <br/>
      -- Ignore Numeric Error (IGNNE-).
      <br/>
      High Voltage
      <br/>
      -- Initialize (INIT-).          High Voltage
      <br/>
      -- Local Interrupt (LINTO-�1:0�).
      <br/>
      Low Voltage (both lines)
      <br/>
      -- Probe Mode Request (PREQ-).  High Voltage
      <br/>
      -- Request Parity (RP-).        High Voltage
      <br/>
      -- Response Status (RS�2:0�).
      <br/>
      Low Voltage (all three lines)
      <br/>
      -- Response Parity (RSP-).      High Voltage
      <br/>
      -- System Management Interrupt (SMI-) High Voltage
      <br/>
      -- Test Data Input (TDI).           Low Voltage
      <br/>
      -- Test Mode Select (TMS).          Low Voltage
      <br/>
      -- Test Reset (TRST-).          High Voltage
    </p>
    <p num="40">Table VIII identifies the commands which are supported in the DAT mode according to one embodiment of the present invention.</p>
    <heading>-- TABLE VIII</heading>
    <p num="41">
      -- Command        Description
      <br/>
      -- NOP            No operation.
      <br/>
      -- Write          Write data to a particular DWORD.
      <br/>
      -- Read           Read data from a particular DWORD.
      <br/>
      Note, however,
      <br/>
      --                that there is no data output from DAT control logic
      <br/>
      --                120 for this command.
      <br/>
      -- Snoop          Snoop at a particular DWORD.
      <br/>
      -- Write Port n   Write data to port "n" of a DWORD of a multi-port
      <br/>
      --                memory.
      <br/>
      -- Read Port n    Read data from port "n" of a DWORD of a multi-port
      <br/>
      --                memory.
      <br/>
      Note, however, that there is no data
      <br/>
      --                output from DAT control logic 120 for
      <br/>
      --                this command.
      <br/>
      -- Read with Data Read data from a particular DWORD.
      <br/>
      The read data is
      <br/>
      -- Output         DAT control logic 120.
      <br/>
      -- Snoop with Data Snoop a particular DWORD.
      <br/>
      The snooped data is
      <br/>
      -- Output         output from DAT control logic 120.
      <br/>
      -- Read Port n with Read data from port "n" of a DWORD of a multi-port
      <br/>
      -- Data Output    memory.
      <br/>
      The read data is output from DAT control
      <br/>
      --                logic 120.
    </p>
    <p num="42">
      Upon receipt of one of these commands by DAT control logic 120, DAT control logic 120 forwards the received command, along with the appropriate set, way, bank and data, if any, to instruction cache 130, data cache 140, or branch target buffer 150.
      <br/>
      In the illustrated embodiment, additional command decode logic (not shown) is included in each of instruction cache 130, data cache 140, and branch target buffer 150.
      <br/>
      This additional command decode logic decodes a received command into control signals for accessing the memory array to perform the requested function.
      <br/>
      It will be appreciated by those skilled in the art that this decoding is dependent on the encoding of the commands as well as the specific signals expected by the memory arrays.
      <br/>
      The design of such decoding logic is well-known to those skilled in the art, and thus will not be discussed further.
    </p>
    <p num="43">
      In the illustrated embodiment address, control, and data signals are input to the instruction cache 130, data cache 140, and branch target buffer 150 from DAT control logic 120.
      <br/>
      Additional address, control, and data signals from other portions of the processor (not shown) are also input to cache 130, data cache 140, and branch target buffer 150.
      <br/>
      In one implementation, these signals from the other portions of the processor are multiplexed with the signals from DAT control logic 120 and selected ones of the signals are forwarded to the memory arrays of cache 130, data cache 140, and branch target buffer 150.
      <br/>
      In this implementation, the DAT enable signal is used to select the signals from DAT control logic 120 as the inputs to the memory arrays of cache 130, data cache 140, and branch target buffer 150 rather than the signals from other sources.
    </p>
    <p num="44">
      In an alternate embodiment of the present invention, DAT control logic 120 includes translation logic to generate the appropriate signals to cache 130, data cache 140, and branch target buffer 150 so that cache 130, data cache 140, and branch target buffer 150 believe that the commands are actually those received from other logic within processor 100.
      <br/>
      Thus, in this alternate embodiment, additional decode logic is not needed in cache 130, data cache 140, and branch target buffer 150.
    </p>
    <p num="45">
      According to one embodiment of the present invention, various commands are available for the different memory arrays.
      <br/>
      Table IX identifies these commands and the values used to encode them according to one implementation of the present invention.
    </p>
    <p num="46">
      --
      <br/>
      -- Array Enabled  Value  DAT Function
      <br/>
      -- No array selected 0000   NOP
      <br/>
      -- BTB Address    0000   NOP
      <br/>
      -- array          0001   Address Read
      <br/>
      --                0010   Address Read with data output
      <br/>
      --                0011   Address Write
      <br/>
      -- BTB Pattern    0000   NOP
      <br/>
      -- Table array    0001   Pattern Table Read
      <br/>
      --                0010   Pattern Table Read with data output
      <br/>
      --                0011   Pattern Table Write
      <br/>
      -- BTB Target array 0000   NOP
      <br/>
      --                0001   Target Read
      <br/>
      --                0010   Target Read with data output
      <br/>
      --                0011   Target Write
      <br/>
      -- DCU Tag array  0000   NOP
      <br/>
      --                0001   Tagport 2 Read
      <br/>
      --                0010   Tag port 2 Read with Data output
      <br/>
      --                0011   Tag port 2 Read and Tag port 2 Write
      <br/>
      --                0100   Tag port 2 Read with data output and Tag
      <br/>
      --                       port 2 Write
      <br/>
      --                0101   Tag port 3 Read
      <br/>
      --                0110   Tag port 3 Read with data output
      <br/>
      --                0111   Tag port 2 Read and Tag port 3 Read
      <br/>
      --                1000   Tag port 2 Read with data output and Tag port
      <br/>
      --                       3 Read
      <br/>
      --                1001   Tag port 3 Read with data output and Tag port
      <br/>
      --                       2 Read
      <br/>
      -- DCU Data array 0000   NOP
      <br/>
      --                0001   Data Read
      <br/>
      --                0010   Data Read with data output
      <br/>
      --                0011   Data Write
      <br/>
      -- IFU Data array 0000   NOP
      <br/>
      --                0001   DataRead
      <br/>
      --                0010   Data Read with Data output
      <br/>
      --                o011   Data Write
      <br/>
      -- IFU Tag array  0000   NOP
      <br/>
      --                0001   Tag Read
      <br/>
      --                0010   Tag Read with data output
      <br/>
      --                0011   Tag Write
      <br/>
      --                0100   Tag Snoop
      <br/>
      --                0101   Tag Read and Tag Snoop
      <br/>
      --                0110   Tag Read with data output and Tag Snoop
      <br/>
      --                0111   Tag Write and Tag Snoop
      <br/>
      --                1000   Tag Snoop with data output
      <br/>
      --                1001   Tag Read and Tag Snoop with data output
      <br/>
      --                1010   Tag Write and Tag Snoop with data output
    </p>
    <p num="47">
      Thus, when operating in DAT mode, externally generated signals are supplied to processor 100 via external I/O connectors 110.
      <br/>
      The address, control, and data information is supplied to DAT control logic 120, which in turn forwards the correct information to access a particular portion of a memory array.
      <br/>
      The request is then carried out by the particular embedded memory with data and/or control signals being returned to DAT control logic 120 as appropriate.
      <br/>
      In the illustrated embodiment, data from a Read request to the BTB or instruction cache is valid five bus clock cycles after the command is input to processor 100, and data from a Read request to the data cache is valid four bus clock cycles after the command is input to processor 100.
      <br/>
      Thus, an "SRAM pipeline" is established to access the embedded memories, allowing multiple commands to be in various stages of completion at any particular time.
    </p>
    <p num="48">
      According to one embodiment of the present invention, the clock frequency at which the external bus coupled to processor 100 operates and the clock frequency at which the internal logic of processor 100, referred to as the "processor core", operates are two different frequencies.
      <br/>
      In the illustrated embodiment, the ratio of the core clock frequency to the bus clock frequency is 3:1.
      <br/>
      Thus, in the illustrated embodiment processor 100 can accept three commands in parallel in DAT mode in a single clock cycle.
      <br/>
      These three commands are provided to DAT control logic 120, which in turn submits the commands serially to the embedded memories.
      <br/>
      Thus, in this embodiment, back-to-back operations to the embedded memories can be made despite the differences in core and bus clock frequencies.
    </p>
    <p num="49">
      In the illustrated embodiment data input and output in DAT mode occurs in 32-bit quantities.
      <br/>
      In this embodiment, 32 bits of the external data bus are used for data input and 32 bits of the external data bus are used for data output.
      <br/>
      Thus, the external data bus is a single 64-bit bi-directional bus when operating in normal mode, and two 32-bit unidirectional data buses when operating in DAT mode.
      <br/>
      Because there is only one 32-bit input data bus and one 32-bit output data bus, only one data input and one data output can occur per bus clock cycle.
      <br/>
      Thus, only one of every group of three commands executed according to the core clock can include a data input and only one of every group of three commands executed according to the core clock can include a data output.
    </p>
    <p num="50">
      As discussed above, data accesses to certain embedded memory arrays are 64-bit accesses even though only 32 bits of input data are available.
      <br/>
      In the illustrated embodiment, the 32 bits of input data are used as the upper 32 bits of the 64-bit data access as well as the lower 32 bits of the 64-bit data access.
      <br/>
      Thus, a full 64-bit data access is made even though only 32 bits of input data are available.
    </p>
    <p num="51">
      The above discussion describes direct access testability of certain memory arrays within a processor.
      <br/>
      It is to be appreciated that DAT control logic 120 discussed above could be designed to test only a portion of the embedded arrays discussed or could be designed to test additional embedded arrays.
      <br/>
      Examples of additional arrays include data and/or instruction parity information, least recently used (LRU) information, etc.
      <br/>
      Although the present invention makes substantial use of pre-existing hardware and circuitry within the processor, some additional circuitry is required to add direct access testability to different embedded arrays.
      <br/>
      Which arrays and how many arrays to provide direct access testability to is a matter of design choice, balancing the desire to accurately test the embedded memories of a processor against the additional cost and chip real estate of adding direct access testability to other arrays.
    </p>
    <p num="52">
      FIG. 2 is a timing diagram illustrating the parallel command specification/serial execution according to one embodiment of the present invention.
      <br/>
      As illustrated, the processor core clock (CLK) 202 has a frequency three times the bus CLK 204 frequency.
      <br/>
      Five bus clock 204 cycles are illustrated in FIG. 2 labeled as "A", "B", "C", "F", and "G".
      <br/>
      The lines between bus clock 204 cycle C and bus clock 204 cycle F represent two bus clock 204 cycles.
      <br/>
      In each of the bus clock 204 cycles A, B, and C, three commands (CMDs) are input to processor 100, illustrated as CMD1206, CMD2208, and CMD3210.
      <br/>
      Additionally, three groups of "Set" data are input to processor 100 in each of the bus clock 204 cycles, illustrated as Set1212, Set2214, and Set3216.
      <br/>
      Each of the three groups of set data corresponds to one of the commands input to processor 100.
      <br/>
      Similarly, three groups of Way information corresponding to the commands are input to processor 100 in each of the bus clock 204 cycles, illustrated as Wayrw1218, Wayrw2220, and Wayrw3222, and three groups of Bank information corresponding to the commands are input to processor 100 in each of the bus clock 204 cycles, illustrated as Bankrw1224, Bankrw2226, and Bankrw3228.
    </p>
    <p num="53">
      Additionally, one 32-bit group of data is input to processor 100 in each of the bus clock 204 cycles A, B, and C. As discussed above, only 32 bits of data can be input per bus clock cycle.
      <br/>
      Array enable signals 232 are also received in each of the bus clock 204 cycles, as are DWORD signals 234.
      <br/>
      In the illustrated embodiment array enable signals 232 and DWORD signals 234 can change no more frequently than every bus clock 204 cycle.
      <br/>
      However, in alternate embodiments enable signals 232 and DWORD signals 234 can change each core clock 202 cycle.
    </p>
    <p num="54">
      Upon receipt of the command, set, way, bank, and data signals, DAT control logic 120 forwards the command 238, set 240, way 242 and bank 244 information for the first of the commands to the identified embedded memory in the first core clock 202 cycle.
      <br/>
      Similarly, DAT control logic 120 forwards the command 238, set 240, way 242 and bank 244 information for the second of the commands to the identified embedded memory in the second core clock 202 cycle, and forwards the command 238, set 240, way 242 and bank 244 information for the third of the commands to the identified embedded memory in the third core clock 202 cycle.
      <br/>
      By the fourth core clock 202 cycle, a new set of three commands and associated information via external I/O connectors 110 has been received.
    </p>
    <p num="55">Data corresponding to a read request from CMD1206, CMD2208 or CMD3210 of bus clock 204 cycle A is available on data out signals 236 in bus clock 204 cycle F. Similarly, data corresponding to a read request from CMD1206, CMD2208 or CMD3210 of bus clock 204 cycle B is available on data out signals 236 in bus clock 204 cycle G.</p>
    <p num="56">Thus, as can be seen in FIG. 2, back to back operations to memory cells can be maintained despite the differences in bus and core clock frequencies.</p>
    <p num="57">
      FIG. 3 is a block diagram illustrating the direct access test control logic according to one embodiment of the present invention.
      <br/>
      DAT control logic 120 operates in the core clock domain.
      <br/>
      Thus, each of the latches illustrated in FIG. 3 is clocked by the core clock.
    </p>
    <p num="58">
      As illustrated, DAT control logic 120 receives array enable (ARREN) signals 302 which are latched into latches 304.
      <br/>
      It is to be appreciated that latches 304 comprise three latches, one for each of the three ARREN signals 302.
      <br/>
      The latched ARREN signals 302 are then input to drivers 306.
      <br/>
      It is to be appreciated that drivers 306 comprise three drivers, one for each of the three ARREN signals 302.
      <br/>
      Drivers 306 are controlled by a DAT enable signal 308.
      <br/>
      In the illustrated embodiment, drivers 306 are only enabled when the DAT enable signal 308 is asserted.
      <br/>
      In the illustrated embodiment, the DAT enable signal 308 is generated from a configuration register (not shown) which indicates whether the processor is currently in DAT mode, as discussed above.
      <br/>
      Thus, the signals from DAT control logic 120 are only output to the embedded memories when DAT mode is enabled.
      <br/>
      Similarly, the double word (DWORD) signals 310 are latched into latches 312 and provided to drivers 314.
      <br/>
      Drivers 314 are also enabled by DAT enable signal 308.
    </p>
    <p num="59">
      Three groups of command signals, CMD1316, CMD2318, and CMD3320 are also latched and input to four three-to-one multiplexers (MUXs) 322. One of the three groups of command signals CMD1316, CMD2318, and CMD3320 are output by MUX 322 to drivers 326 in any given core clock cycle.
      <br/>
      Which group of command signals CMD1316, CMD2318, and CMD3320 is output by MUX 322 is determined by MUX control logic 324.
      <br/>
      MUX control logic 324 controls MUX 322 to output a different group of command signals each core clock cycle.
      <br/>
      Thus, given the 3:1 core clock to bus clock ratio, three groups of commands can be received in parallel by DAT control logic 120 in a bus clock cycle, and a different group of command signals will be output by DAT control logic 120 each of the three different clocks cycles.
    </p>
    <p num="60">Three groups of way signals 328 and bank signals 329 are also latched and input to a multiplexer analogous to the three groups of command signals CMD1316, CMD2318, and CMD3320.</p>
    <p num="61">
      Four groups of set signals are also received and selected pairs 330, 332, and 334 of the four sets are latched as illustrated.
      <br/>
      These set pairs are input to two MUXs 336 which in turn output a different pair to drivers 338 in each core clock cycle.
      <br/>
      The set signals are provided in pairs to allow two different addresses to be provided to the dual-ported memory cells.
    </p>
    <p num="62">Input data 340 is also latched and routed to the embedded memories via drivers 342 as illustrated.</p>
    <p num="63">
      In the illustrated embodiment, output data is received from the read buffers of the embedded memories, which in one embodiment of the present invention are 128-bit buffers.
      <br/>
      For the embedded memories which include 256-bit cache lines, the DWORD�2� signal is used to select either the high or low 128-bits of the 256-bit cache line.
      <br/>
      The output data from the read buffers is input to 32 four-to-one MUXs 344, and one group of 32 bits is output to latches 346.
      <br/>
      MUXs 344 are controlled by the DWORD�1:0� signals as illustrated.
      <br/>
      The output of latches 346 is then provided, through drivers 348, as the output data 350 of DAT control logic 120, data out 118 of FIG. 1.
    </p>
    <p num="64">
      Thus, it can be seen that DAT control logic 120 "reconfigures" the input and output data and control signal paths.
      <br/>
      When DAT mode is enabled, DAT control logic 120 reconfigures the signal paths to provide the signals directly to the embedded memory.
      <br/>
      However, when DAT mode is disabled, DAT control logic 120 does not reconfigure the signal paths to provide the signals directly to the embedded memory.
    </p>
    <p num="65">
      FIG. 4 is a block diagram illustrating the steps followed in providing direct access testability of embedded memory in a processor according to one embodiment of the present invention.
      <br/>
      A system reset first occurs, step 410.
      <br/>
      The system can be reset in any of a wide variety of conventional manners, including powering-on of the system, activation of a reset button, etc.
      <br/>
      During system initialization following the reset, DAT control logic 120 of FIG. 1 checks whether the DAT mode configuration has been selected, step 420.
      <br/>
      As discussed above, the DAT mode configuration is selected by assertion of the A-�30� signal during reset.
      <br/>
      If the DAT mode configuration has not been selected then DAT control logic 120 does not reroute any signals and the processor operates in "normal" mode.
      <br/>
      However, if the DAT mode configuration has been selected, then DAT control logic 120 routes the signals for DAT mode, providing direct access to the embedded memories, step 440.
    </p>
    <p num="66">
      In the illustrated embodiment, once the determination has been made as to whether the DAT mode configuration has been selected, the system continues to operate in either normal mode or DAT mode until another system reset occurs.
      <br/>
      In alternate embodiments, the processor can be taken out of DAT mode during operation without requiring a system reset.
    </p>
    <p num="67">
      FIG. 5 illustrates a hardware system or machine in which the present invention can be practiced according to one embodiment of the present invention.
      <br/>
      In the illustrated embodiment, hardware system 500 includes processor 502 and cache memory 504 coupled to each other as shown.
      <br/>
      In one embodiment, processor 100 of FIG. 1 is a processor 502 of FIG. 5.
      <br/>
      Additionally, hardware system 500 includes high performance input/output (I/O) bus 506 and standard I/O bus 508.
      <br/>
      Host bridge 510 couples processor 502 to high performance I/O bus 506, whereas I/O bus bridge 512 couples the two buses 506 and 508 to each other.
      <br/>
      Coupled to bus 506 are network/communication interface 524, system memory 514, and video memory 516.
      <br/>
      In turn, display device 518 is coupled to video memory 516.
      <br/>
      Coupled to bus 508 is mass storage 520, keyboard and pointing device 522, and I/O ports 526.
      <br/>
      Collectively, these elements are intended to represent a broad category of hardware systems, including but not limited to general purpose computer systems based on the Pentium.RTM. processor, Pentium.RTM. Pro processor, or Pentium.RTM. II processor manufactured by Intel Corporation of Santa Clara, Calif.
    </p>
    <p num="68">
      These elements 502-526 perform their conventional functions known in the art.
      <br/>
      In particular, network/communication interface 524 is used to provide communication between system 500 and any of a wide range of conventional networks, such as an Ethernet, token ring, the Internet, etc.
      <br/>
      It is to be appreciated that the circuitry of interface 524 is dependent on the type of network the system 500 is being coupled to. I/P ports 526 are one or more serial and/or parallel communication ports used to provide communication between additional peripheral devices which may be coupled to hardware system 500.
    </p>
    <p num="69">
      Test controller 528 provides a user connection to the bus 506 and thus processor 502 for testing purposes.
      <br/>
      According to one embodiment of the present invention address, data, and control signals can be provided to processor 502 by test controller 528 for testing the embedded memory of processor 502.
    </p>
    <p num="70">
      It is to be appreciated that various components of hardware system 500 may be re-arranged.
      <br/>
      For example, cache 504 may be on-chip with processor 502.
      <br/>
      Alternatively, cache 504 and processor 502 may be packaged together as a "processor module" and attached to a "processor card", with processor 502 being referred to as the "processor core".
      <br/>
      Furthermore, certain implementations of the present invention may not require nor include all of the above components.
      <br/>
      For example, mass storage 520, keyboard and pointing device 522, display device 518 and video memory 516, host bridge 510, test controller 528, and/or cache 504 may not be included in system 500.
      <br/>
      Additionally, the peripheral devices shown coupled to standard I/O bus 508 may be coupled to high performance I/O bus 506; in addition, in some implementations only a single bus may exist with the components of hardware system 500 being coupled to the single bus.
      <br/>
      Furthermore, additional components may be included in system 500, such as additional processors, storage devices, or memories.
    </p>
    <p num="71">
      Thus, it can be seen that the present invention provides an improved way to test embedded memory of a processor by making the embedded memory directly accessible from external to the processor.
      <br/>
      It can be seen that the present invention advantageously makes substantial use of pre-existing logic and circuitry to perform the memory testing, thereby reducing the amount of additional chip real estate taken up by the memory testing logic.
    </p>
    <p num="72">
      Thus, a method and apparatus for direct access test of embedded memory has been described.
      <br/>
      Whereas many alterations and modifications of the present invention will be comprehended by a person skilled in the art after having read the foregoing description, it is to be understood that the particular embodiments shown and described by way of illustration are in no way intended to be considered limiting.
      <br/>
      References to details of particular embodiments are not intended to limit the scope of the claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A microprocessor comprising:</claim-text>
      <claim-text>an embedded memory, the embedded memory including a tag memory; a plurality of input connectors to receive input signals from an external bus; a plurality of output connectors to provide output signals to the external bus; a plurality of reconfigurable input and output signal paths, coupled to the embedded memory and the plurality of input and output connectors, which, when the microprocessor is operating in a direct access test mode, provide the input signals from an external bus directly to the embedded memory and the output signals directly from the embedded memory to the external bus and disable normal operation of the microprocessor; a dedicated memory test queue, coupled to the plurality of reconfigurable input and output signal paths, configured to receive and store a plurality of memory testing commands when coupled to the external bus in a single external bus clock cycle;</claim-text>
      <claim-text>and dedicated direct access test mode control logic, coupled to the dedicated memory test queue, configured to provide the plurality of memory testing commands to the embedded memory serially over a plurality of consecutive microprocessor clock cycles, the plurality of microprocessor clock cycles being equal in duration to the single external bus clock cycle.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The microprocessor of claim 1, wherein the plurality of reconfigurable input and output signal paths are configured to prevent the input signals from being directly input to the embedded memory when in a second operating mode.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The microprocessor of claim 1, wherein the embedded memory includes a plurality of cache memory arrays.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The microprocessor of claim 1, wherein the dedicated memory test queue is further operative to receive and store array, set, and way information corresponding to each of the plurality of commands.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A system comprising: a bus configured to generate a bus clock cycle of a first duration;</claim-text>
      <claim-text>and an apparatus configured to generate an apparatus clock cycle of a second duration and coupled to the bus, the apparatus including,</claim-text>
      <claim-text>- an embedded memory, - a plurality of input connectors to receive input signals from the bus; - a plurality of output connectors to provide output signals to the bus;</claim-text>
      <claim-text>and - a plurality of reconfigurable input and output signal paths, coupled to the embedded memory and the plurality of input and output connectors configured to provide the input signals directly to and the output signals directly from the embedded memory when the apparatus is operating in a direct access test mode, - a plurality of latches, coupled to the plurality of reconfigurable input and output signal paths, to receive and store a plurality of memory testing commands from the bus in a single bus clock cycle, and - test mode control logic, coupled to the plurality of latches, to provide the plurality of memory testing commands to the embedded memory serially over a plurality of apparatus clock cycles, wherein the first duration is a multiple of the second duration.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The system of claim 5, wherein the plurality of reconfigurable input and output signal paths are configured to prevent the input signals from being directly input to the embedded memory when the apparatus is operating in a second operating mode.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The system of claim 5, wherein the plurality of latches are further configured to receive and store array, set, and way information corresponding to each of the plurality of commands.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A method of operating a microprocessor comprising: checking whether a direct access test mode is selected; receiving input signals from an external source; providing the input signals directly to an embedded memory if the direct access test mode is selected; receiving a plurality of memory testing commands in a single bus clock cycle, the bus clock cycle having a first duration; storing the plurality of memory testing commands in a memory test queue;</claim-text>
      <claim-text>and providing the plurality of memory testing commands to the embedded memory serially over a plurality of microprocessor clock cycles, a microprocessor clock cycle of the plurality of microprocessor clock cycles having a second duration, wherein the second duration is a fraction of the first duration.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method of claim 8, further comprising preventing the input signals from being directly input to the embedded memory if the direct access test mode is not selected.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 8, wherein the checking comprises checking, in response to a reset signal, whether the direct access test mode is selected.</claim-text>
    </claim>
  </claims>
</questel-patent-document>