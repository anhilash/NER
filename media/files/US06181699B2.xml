<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181699B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181699</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181699</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="22324549" extended-family-id="13452061">
      <document-id>
        <country>US</country>
        <doc-number>09108873</doc-number>
        <kind>A</kind>
        <date>19980701</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09108873</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>13737762</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>10887398</doc-number>
        <kind>A</kind>
        <date>19980701</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09108873</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L  12/40        20060101AFI20060101BMKR</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>40</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>KR</country>
        </generating-office>
        <classification-status>B</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060101</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L  12/46        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>46</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04L  29/12        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>12</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>370392000</text>
        <class>370</class>
        <subclass>392000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>370389000</text>
        <class>370</class>
        <subclass>389000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04L-029/12A6</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>029</main-group>
        <subgroup>12A6</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04L-012/46V1</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>012</main-group>
        <subgroup>46V1</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04L-029/12A</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>029</main-group>
        <subgroup>12A</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>H04L-029/12A9A</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>029</main-group>
        <subgroup>12A9A</subgroup>
      </classification-ecla>
      <classification-ecla sequence="5">
        <text>H04L-045/7453</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>45</main-group>
        <subgroup>7453</subgroup>
      </classification-ecla>
      <classification-ecla sequence="6">
        <text>H04L-061/35</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>61</main-group>
        <subgroup>35</subgroup>
      </classification-ecla>
      <classification-ecla sequence="7">
        <text>H04L-061/60A</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>061</main-group>
        <subgroup>60A</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-061/35</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>61</main-group>
        <subgroup>35</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-012/4645</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>4645</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-012/467</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>467</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-029/12009</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>12009</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-029/12783</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>12783</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-029/12801</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>12801</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-045/7453</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>45</main-group>
        <subgroup>7453</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-061/6004</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>61</main-group>
        <subgroup>6004</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04L-012/46V2</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>16</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>7</number-of-drawing-sheets>
      <number-of-figures>12</number-of-figures>
      <image-key data-format="questel">US6181699</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Apparatus and method of assigning VLAN tags</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>CHIN HON WAH</text>
          <document-id>
            <country>US</country>
            <doc-number>5852607</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5852607</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>LIRON MOSHE L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5930254</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5930254</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>BACKES FLOYD J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5956335</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5956335</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>FRANTZ PAUL JAMES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5959990</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5959990</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>CRAYFORD IAN S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6016308</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6016308</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>LIU CHANG-CHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6018526</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6018526</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>The Virtual LAN Technology Report, May 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>"P802.1Q/D7" of Oct. 3, 1997, IEEE. (Please note specifically pp. 52-54, 73-80, Appendix C-pp. 156-182 and 183-186).</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>National Semiconductor Corporation</orgname>
            <address>
              <address-1>Santa Clara, CA, US</address-1>
              <city>Santa Clara</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>NATIONAL SEMICONDUCTOR</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Crinion, Patrick T.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Pagnon, Vickie</name>
            <address>
              <address-1>Sunnyvale, CA, US</address-1>
              <city>Sunnyvale</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Limbach &amp; Limbach L.L.P.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Olms, Douglas W.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      An apparatus for and method of assigning a VLAN tag to a frame received at a port of a switch are disclosed.
      <br/>
      The apparatus includes a content addressable memory, a data frame memory, a search circuit, and a tagging circuit.
      <br/>
      The content addressable memory stores tagging information, the tagging information including lookup data and associated tag data.
      <br/>
      The frame memory stores at least part of a data frame, the part including data frame information.
      <br/>
      The search circuit is connected to the content addressable memory and the data frame memory.
      <br/>
      The search circuit reads the data frame information, searches the content addressable memory for the lookup data corresponding to the data frame information, and reads a corresponding subset of the associated tag data.
      <br/>
      The tagging circuit is connected to the search circuit and the data frame memory.
      <br/>
      The tagging circuit writes in the data frame memory a VLAN tag including the corresponding subset of the associated tag data.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">
      The present invention relates to data switches that route data frames to ports based on tagging information in the packets.
      <br/>
      In particular, the invention relates to circuits which assign default tags to data frames.
    </p>
    <p num="3">2. Description of the Related Art</p>
    <p num="4">Local area networks (LANs) of all types that are IEEE 802 compliant may be connected together with media access control (MAC) bridges, as specified in ISO/IEC 10038, as modified by supplement P802.1p. The IEEE 802.1Q standard defines the operation of virtual LAN (VLAN) bridges that permit the definition, operation, and administration of VLAN topologies within a bridged LAN infrastructure.</p>
    <p num="5">
      Within 802.1 Q, data frames are routed between ports of the VLAN according to VLAN tags.
      <br/>
      If a frame does not contain a VLAN tag, a default tag may be assigned to it based on the port on which the frame was received.
    </p>
    <p num="6">
      However, this assignment of the default tag fails to account for other information in the frame which may be used to more intelligently assign a default tag.
      <br/>
      A frame may contain information such as a source address, a destination address, and protocol information which provide more information than just the port at which the frame was received.
      <br/>
      There is a need for an apparatus and a method of assigning a default tag which accounts for this additional information.
    </p>
    <p num="7">
      In addition, IEEE 802.1Q does not enable the assignment of a priority level to untagged frames when assigning the default tag, nor enable an assigned priority level to be changed.
      <br/>
      There is a need for an apparatus and a method of assigning and changing priority levels.
    </p>
    <p num="8">
      Finally, it would be advantageous if the circuitry solving both these deficiencies included a number of common functional blocks.
      <br/>
      Such commonality would allow functions to be performed with the same circuitry, reducing the total number of circuits required.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">
      The present invention addresses these and other problems of the prior art by providing a circuit for assigning VLAN tags based on data frame information in addition to the port on which the data frame was received.
      <br/>
      Common parts of the circuit may also be used to assign a priority level to untagged data frames or to change an assigned priority level.
    </p>
    <p num="10">
      According to one embodiment, an apparatus according to the present invention includes a circuit for assigning a VLAN tag to a data frame received at a port of a switch.
      <br/>
      The circuit includes a content addressable memory, a data frame memory, a search circuit, and a tagging circuit.
      <br/>
      The content addressable memory stores tagging information, the tagging information including lookup data and associated tag data.
      <br/>
      The data frame memory stores at least part of a data frame, the part including data frame information.
      <br/>
      The search circuit is connected to the content addressable memory and the data frame memory.
      <br/>
      The search circuit reads the data frame information, searches the content addressable memory for the lookup data corresponding to the data frame information, and reads a corresponding subset of the associated tag data.
      <br/>
      The tagging circuit is connected to the search circuit and the data frame memory.
      <br/>
      The tagging circuit writes in the data frame memory a VLAN tag including the corresponding subset of the associated tag data.
    </p>
    <p num="11">
      According to another embodiment, a method according to the present invention assigns a VLAN tag to a data frame received at a port of a switch.
      <br/>
      The method includes the steps of storing tagging information (including lookup data and associated tag data), storing at least part of a data frame (including data frame information), reading the data frame information, searching the tagging information for the lookup data corresponding to the data frame information, reading a subset of the associated tag data according to a result of the step of searching, and writing in the part a VLAN tag including the subset of the associated tag data.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="12">
      FIG. 1 is a block diagram of a circuit implementing one embodiment of the present invention.
      <br/>
      FIG. 2 is a data field showing the data components of an Ethernet frame.
      <br/>
      FIG. 3 is a data field showing the data components of a VLAN tag.
      <br/>
      FIG. 4 is a data field showing the data components of the Tag Control Information.
      <br/>
      FIG. 5 is a data array showing the arrangement of data in the content addressable memory.
      <br/>
      FIG. 6 is a data field showing the data components of the tag data in the content addressable memory.
      <br/>
      FIG. 7 is a block diagram showing hash circuitry that may be added to FIG. 1.
      <br/>
      FIG. 8 is a block diagram of two data switches in which are implemented preferred embodiments of the present invention.
      <br/>
      FIG. 9 is a block diagram of a port block in the data switch.
      <br/>
      FIG. 10 is a block diagram of a look up engine in the data switch.
      <br/>
      FIG. 11 is a block diagram of a preferred embodiment of the present invention.
      <br/>
      FIG. 12 is a state diagram of the states taken by the embodiment shown in FIG. 11.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="13">General Description of a Preferred Embodiment</p>
    <p num="14">
      FIG. 1 shows the functional blocks of a circuit 100 implementing one embodiment of the present invention.
      <br/>
      The circuit includes a content addressable memory 110, a frame memory 120, a search circuit 130, a tagging circuit 140, a priority circuit 150, a control memory 160, and a detagging circuit 170.
      <br/>
      Circuit 100 is implemented as part of a data switch which sends and receives data frames.
    </p>
    <p num="15">
      Circuit 100 may be implemented using any integrated circuit process as is known in the art.
      <br/>
      Preferably circuit 100 is implemented to operate at 3.3 V.
    </p>
    <p num="16">
      Content addressable memory 110 stores tagging part of which is to be inserted into frames to enable VLAN functionality.
      <br/>
      Content addressable memory 110 may also store priority information.
      <br/>
      The tagging information and priority information are collectively referred to as tag data.
      <br/>
      The tagging information also includes lookup data which is associated with the tag data.
      <br/>
      Preferably each set of lookup data is unique and corresponds to one set of tag data.
    </p>
    <p num="17">
      According to IEEE 802.1Q, the default tag is assigned to a frame based on the port at which the frame has been received.
      <br/>
      This assignment method may be implemented in content addressable memory 110 by storing port identifiers as the lookup data.
      <br/>
      Thus, circuit 100 is able to assign default tags based on IEEE 802.1Q defaults as well as the other ways described below.
    </p>
    <p num="18">Content addressable memory 110 may be updated with new information, preferably by management software.</p>
    <p num="19">
      Frame memory 120 stores at least part of a frame which has been received at a port of the switch.
      <br/>
      The frame part includes frame information.
      <br/>
      An exemplary frame is shown in FIG. 2.
    </p>
    <p num="20">
      Search circuit 130 reads the frame information from frame memory 120 and then searches for the frame information in the lookup data.
      <br/>
      Once it has located the frame information, search circuit 130 reads the corresponding tag data.
      <br/>
      The corresponding tag data includes a VLAN tag to be inserted into the frame.
      <br/>
      The corresponding tag data may also include internal priority information.
    </p>
    <p num="21">
      Tagging circuit 140 writes the VLAN tag into the frame stored in frame memory 120.
      <br/>
      An exemplary VLAN tag is shown in FIG. 3.
    </p>
    <p num="22">
      Control memory 160 stores an information word that is used to control various operations of the switch, including setting the internal priority of frames.
      <br/>
      This internal priority may be distinct from the priority information carried in the frame by the VLAN tag (shown in FIG. 4).
      <br/>
      In a preferred embodiment, the internal priority is represented by a single bit.
    </p>
    <p num="23">Priority circuit 150 writes the internal priority information located by search circuit 130 into control memory 160.</p>
    <p num="24">Detagging circuit 170 removes the tag inserted by tagging circuit 140 before the frame is sent to the transmit ports for transmission to other receive ports.</p>
    <p num="25">
      Briefly, circuit 100 operates as follows.
      <br/>
      The witch receives a frame.
      <br/>
      Frame memory 120 stores the frame.
      <br/>
      If the frame lacks a tag, or if tag replacement is desired, search circuit 130 searches the lookup data in content addressable memory 110 for the frame information.
      <br/>
      Once it has located the frame information, search circuit 130 reads the associated tag data.
      <br/>
      Tagging circuit 140 inserts a desired portion of the tag data into the frame in frame memory 120.
      <br/>
      Frame memory 120 then sends the frame for internal processing by the switch.
      <br/>
      Finally, before the frame is forwarded to other switches, detagging circuit 170 removes the inserted tag, if desired.
      <br/>
      The frame is then sent to the transmit ports of the switch.
    </p>
    <p num="26">
      Circuit 100 may also control the internal priority of the frame.
      <br/>
      To do so, content addressable memory 110 also contains priority information.
      <br/>
      Search circuit 130 searches the lookup data as above, and reads the associated tag data.
      <br/>
      Priority circuit 150 reads the internal priority information from the tag data, and writes it into control memory 160.
    </p>
    <p num="27">
      FIG. 2 illustrates an exemplary frame.
      <br/>
      The frame includes seven bytes of preamble information (PRE), one byte of start-of-frame delimiter information (SFD), six bytes of destination address information (DA), six bytes of source address information (SA), four bytes of VLAN tag information, two bytes of protocol information (TYPE), and four bytes of Frame Check Sequence information (FCS).
      <br/>
      The above comprise the frame information.
      <br/>
      The frame also contains a number of bytes of data.
      <br/>
      The number of bytes of data is limited by the maximum frame size, which is determined by the data transmission standard the switch is operating under.
    </p>
    <p num="28">
      FIG. 3 illustrates an exemplary VLAN tag.
      <br/>
      The VLAN tag includes two bytes of Tag Protocol Identifier (TPID) and two bytes of Tag Control Information (TCI).
    </p>
    <p num="29">
      FIG. 4 illustrates an exemplary TCI.
      <br/>
      The TCI includes three bits of priority information, one bit of Canonical Format Indicator (CFI), and 12 bits of VLAN ID.
      <br/>
      The priority information is defined by IEEE P802.1p. The CFI bit indicates whether the Routing Information Field (RIF) is present in the Tag Header, and whether the MAC data carried by the frame is in Canonical format.
    </p>
    <p num="30">
      In a preferred embodiment, as shown in FIG. 5, the lookup data in content addressable memory 110 are each 48 bits and contain a collection of destination addresses.
      <br/>
      Thus, the frame information read by search circuit 130 is the frame's destination address.
      <br/>
      Optionally, the lookup data contain a collection of 32-bit hashes of the source address and the destination address, and either 16 zeros or the 16bit TYPE field, which totals 48 bits.
      <br/>
      These implementations of the lookup data are more fully discussed below.
    </p>
    <p num="31">
      As also shown in FIG. 5, the tag data in content addressable memory 110 are each 16 bits.
      <br/>
      FIG. 6 shows that the tag data include a 12-bit VLAN ID, a VALID bit for the VLAN ID, a one-bit PRIORITY flag, a VALID bit for the PRIORITY, and a one-bit ACTIVITY flag.
    </p>
    <p num="32">
      FIG. 7 shows circuitry which may be added to FIG. 1 to perform a search based on more frame information than the destination address.
      <br/>
      FIG. 7 shows a CRC circuit 125 and an addition circuit 135 between frame memory 120 and search circuit 130.
    </p>
    <p num="33">
      The CRC circuit 125 may be the same CRC circuit that is used for error-checking in other parts of the switch.
      <br/>
      In a preferred embodiment, CRC circuit 125 generates a 32-bit CRC.
    </p>
    <p num="34">
      Because the lookup data is preferably 48 bits, the 32 bits from CRC circuit 125 may be augmented with 16 more bits for a common bit-count lookup.
      <br/>
      Addition circuit 135 preferably adds either the 16-bit TYPE field or 16 zeros to the 32-bit hash to create a 48-bit value to locate in the content addressable memory.
    </p>
    <p num="35">
      The circuit blocks shown in FIG. 7 operate as follows.
      <br/>
      Frame memory 120 operates as described above in connection with FIG. 1.
      <br/>
      The CRC circuit 125 reads the frame information.
      <br/>
      Preferably the frame information read is the source address and the destination address.
      <br/>
      The CRC circuit 125 generates a 32-bit hash.
      <br/>
      Addition circuit reads the 32-bit hash and conforms it to the lookup data in content addressable memory 110, preferably by reading the TYPE frame information or by adding 16 zeros.
      <br/>
      Search circuit 130 then uses the resulting 48-bit value for searching content addressable memory 110.
    </p>
    <p num="36">In a preferred embodiment, the invention of the present application is implemented as a component of the DP83890 Private Data Exchanger (PDX) Ethernet switch from National Semiconductor Corp., Santa Clara, California.</p>
    <p num="37">
      General Overview of DP83890 PDX The DP83890 PDX is an integrated 13-port switching solution.
      <br/>
      The PDX allows 10/100 Mbps half- and full-duplex switched Ethernet at a cost point attractive for desktop connectivity.
      <br/>
      A complete stackable desktop switching solution with uplinks to existing switched networks is provided by the PDX.
      <br/>
      The PDX integrates a reduced MII interface on 12 ports, enabling connection to National Semiconductor's Multi-Port 10BASE-T/100BASE-TX physical layer protocol/physical medium dependent (PHY/PMD) integrated circuits.
      <br/>
      In addition, one full MII interface port (which is capable of supporting a fiber transceiver), is provided, and port 12 is capable of switching between full MII and reduced MII.
      <br/>
      The inclusion of the 13th port on the PDX gives the system designer the flexibility to create a stand-alone 12/24 port switch or up to a six-box stacked system with 26 ports per box (156 total ports).
      <br/>
      The 2.4 Gb/s switch bus allows for a simple and inexpensive stackable interface via SCSI ribbon cable.
      <br/>
      Since the signaling across the stack bus utilizes a differential low voltage swing technology, the EMI performance of the entire stack is improved.
      <br/>
      The switch bus also allows for bus oversubscription without packet loss.
    </p>
    <p num="38">
      The reduced MII may connect to external PHY and PMD or 10 Mbps and 100 Mbps 802.3 Ethernet. The twisted pair 10/100 Mbps common drivers with integrated filters requires only a single transformer and termination for external connection to the twisted pair.
      <br/>
      The compliant ANSI X3T12 TP-PMD includes adaptive equalization and baseline wander compensation.
    </p>
    <p num="39">
      The buffer manager (BM) accepts data from the switch us and buffers it to external DRAM.
      <br/>
      The queue manager also reassembles the packets and loads the appropriate port's transmit first-in first-out (FIFO) so the packet can be transmitted.
      <br/>
      This interface also includes all the logic and drivers required for DRAM refresh.
    </p>
    <p num="40">
      The DP83890 PDX includes several functional blocks that perform high speed routing of packets between various ports.
      <br/>
      FIG. 8 shows two DP83890 switches 200a and 200b and their functional blocks.
      <br/>
      These blocks include (for each switch "a" and "b") a port block 210, a receive (RX) FIFO block 225, a switch bus interface block 230, a look-up engine (LUE) block 235, a buffer manager block 240, a transmit (TX) FIFO block 245, and a management information base (MIB) engine block (not shown).
    </p>
    <p num="41">
      Port block 210 contains the IEEE 802.3 media access control (MAC) for both transmission and reception of Ethernet frame data.
      <br/>
      The DP83890 has 12 ports numbered 211 through 222.
    </p>
    <p num="42">
      The RX FIFO 225 is a packet buffer which provides temporary storage of frame data prior to sending data over the switch bus.
      <br/>
      It can store up to 2K bytes.
    </p>
    <p num="43">
      Switch bus interface 230 transfers data from RX FIFO 225 and sends it across the bus connecting multiple PDXs.
      <br/>
      Switch bus interface 230 also reads data off the bus and hands the headers to the look up engine to determine whether to accept the frame.
    </p>
    <p num="44">Look up engine 235 looks up destination addressing, information field data, and VLAN information to determine whether to accept a cell and to determine what buffer manager 240 should do with the cell.</p>
    <p num="45">
      Buffer manager 240 takes data from the bus interface and routing information from look up engine 235 to store information in DRAM 250.
      <br/>
      The DRAM 250 is preferably SDRAM located external to the switch.
      <br/>
      Buffer manager 240 also manages a series of queues for storage of frames on temporarily congested ports, and tracks free memory usage.
    </p>
    <p num="46">
      The TX FIFO 245 includes three types of transmit FIFOs which move the data from DRAM 250 to the transmit portion of the port block.
      <br/>
      The three sets of FIFOs are: (1) 13 Unicast FIFOs; (2) a Broadcast FIFO; (3) a second Broadcast FIFO.
    </p>
    <p num="47">The MIB Engine (not shown) interfaces to most of the other blocks to track network management statistics by maintaining a set of counters compliant to the various networking MIB standards.</p>
    <p num="48">FIG. 8 illustrates the data path of a packet as it traverses through PDX 200a, across switch data bus 260, and out of PDX 200b.</p>
    <p num="49">
      A good overview of the operation of the PDX system is to follow the transmission of a unicast packet.
      <br/>
      To start, a packet is received on port 211a of PDX 200a.
      <br/>
      The external PHY/PMD device converts the network encoded data (Manchester encoded for 10 Mb/s and MLT3 encoded for 100 Mb/s) to nibble-wide NRZ format that is passed to port block 210a for port 211a.
      <br/>
      This block contains the Ethernet Media Access Control (MAC) function.
      <br/>
      The port's receive section monitors the incoming data.
      <br/>
      It first looks for a Start of Frame Delimiter (SFD), and then (depending on mode enabled) checks the packet for VLAN tag, and PAUSE frame.
      <br/>
      As further described below, a frame may be processed by an internal receive CAM which can assign a VLAN tag to frames based upon source address (SA), destination address (DA), or protocol information (such as the TYPE field).
      <br/>
      The data is then framed into 40-bit cells and passed to receive FIFO 225a.
      <br/>
      At the end of the reception, assuming the packet is a simple unicast packet, the byte count and any errors are sent to the MIB.
    </p>
    <p num="50">
      As the reception process in port block 210a continues, data is loaded into RX FIFO 225a.
      <br/>
      When the data in RX FIFO 225a reaches the drain threshold, the PDX will arbitrate for access to switch bus 260 by asserting REQ and its unique PDX_ID onto bus 260 in order to become the bus master.
      <br/>
      If it wins the arbitration it can now source data across switch bus 260.
    </p>
    <p num="51">
      The protocol for sending data across switch bus 260 is to first send an information (Info) field word followed by data words.
      <br/>
      If the PDX mastering switch bus 260 has more than one port whose RX FIFO drain threshold has been met, then it will source consecutive Info/data cells.
      <br/>
      The process of switch bus arbitration and the sending of Info/data cells will continue until the entire packet from RX FIFO 225a has been emptied.
    </p>
    <p num="52">
      As the first cell from port 211a is sent across switch bus 260, all PDXs will monitor the data received from the switch bus.
      <br/>
      When the first Info/data cell of the packet is received by PDX 200b, the DA field of the packet is parsed by look up engine 235b which compares his address with those stored in its internal CAM.
      <br/>
      In this case, it is assumed that the CAM matches, indicating that port 221b is the intended destination.
      <br/>
      With an address match, PDX 200b will source a destination MATCH signal back to PDX 200a to indicate that the packet's destination has been found.
    </p>
    <p num="53">
      Once a DA match occurs, buffer manager 240b will assign a packet buffer (in DRAM 250b) to the newly received packet.
      <br/>
      This buffer is large enough so that it will store contiguously the entire packet in memory.
      <br/>
      As more of the cells from port 211a are received, buffer manager 240b assembles the packet data from switch bus 260, and buffer manager 24b will continue to fill the assigned packet buffer.
      <br/>
      When the packet buffer's drain threshold has been reached (which depends upon the forwarding mode of the port: cut-thru, run-free, or Store-n-Forward mode), the data is passed from the assigned buffer to transmit FIFO 245b.
    </p>
    <p num="54">
      The transmit portion of port block 210b will convert the 48-bit wide data from the TX FIFO 245b to nibble-wide data for the MII of the physical layer.
      <br/>
      The transmit portion of port block 210b also implements the 802.3 and various proprietary Ethernet MAC protocols.
      <br/>
      At the end of sending the frame, port block 210b will signal the transmit statistics to the MIB engine.
    </p>
    <p num="55">As nibble-wide data from the transmit Port Block is received by the PHY/PMD, it will transmit the packet in compliance with the 10 Mb/s or 100 Mb/s specification.</p>
    <p num="56">
      Broadcast or multicast frames have a similar data flow.
      <br/>
      The difference is that buffer manager 240 will place the frame on the broadcast queue.
      <br/>
      This queue feeds frame data to the 10 Mb/s and 100 Mb/s Broadcast FIFOs.
      <br/>
      Both FIFOs are a full packet buffer in size, and feed all 13 ports.
      <br/>
      The frame in this FIFO is sent to all idle ports, and to non-idle ports once their current transmission is complete.
    </p>
    <p num="57">Port Block</p>
    <p num="58">
      FIG. 9 shows port block 210, which implements the MAC layer protocol required to interface the PDX to 10 Mb/s or 100 Mb/s Physical Layer ENDEC blocks.
      <br/>
      During transmission, port block 210 frames the information from the transmission FIFO and supplies data to the PHY.
      <br/>
      During reception, the incoming information from the PHYs is deserialized, the frame monitored, and the data transferred to the receive FIFO.
      <br/>
      Additionally, port block 210 generates pause frames, detects and responds to pause frames, extracts VLAN packet tags, detects and inserts VLAN packet tags, and responds to flow control conditions.
      <br/>
      Control and status registers govern the operation of port block 210.
    </p>
    <p num="59">Port block 210 is divided into two sections, a receive section 310 and a transmit section 360.</p>
    <p num="60">
      Receive section 310 controls the MAC receive operations during reception, loopback and transmission (half duplex).
      <br/>
      It contains the control logic for the reception of normal data frames and PAUSE frames in nibble wide format from the internal MII interface.
      <br/>
      It receives a number of data and control signals, including control signals from the FIFOS, mode setting signals from the registers, a COL signal, a CRS signal, a RX_DV signal, a RX_ER signal, a four-bit RXD signal, and signals from the transmit protocol state machine 345.
      <br/>
      Receive section 310 generates a 48-bit rx_data signal and signals to the transmit protocol state machine 345.
    </p>
    <p num="61">
      During a reception, deserializer 315 becomes active after SFD/collision detector 320 detects the Start-of-Frame-Delimiter (SFD).
      <br/>
      Deserializer 315 then frames the data into a 48-bit wide format to be sent onto the switch bus through the receive FIFO via interface to RX 325.
      <br/>
      At the end of packet reception, CRC checker 330 checks the data for errors (CRC, FAE, length errors).
      <br/>
      If any of the previously mentioned errors occur, a "discard" bit in the information field for the packet is set so that buffer manager 240 of the destination PDX can filter the packet (store-n-forward mode).
      <br/>
      In cut-thru mode, the packet is forwarded regardless of packet error, but the CRC that is appended by the PDX will be erroneous.
    </p>
    <p num="62">
      Receive section 310 has the capability of VLAN tag detection with VLAN detector/inserter 335, which implements the IEEE 802.1Q default tag insertion scheme.
      <br/>
      Detector/inserter 335 compares the type field of the incoming frame to the VLAN type ID.
      <br/>
      If a match occurs, a VLAN tagged packet has been received and the PDX will set the Rx packet status bits in the info field.
      <br/>
      If the insert tag function is enabled, circuit 100 will insert the VLAN tag (assigned to the port) on an untagged received packet before sending the data on to RX FIFO 225.
      <br/>
      If a tagged frame is detected and the port is set to accept only untagged frames, then the frame will be discarded.
      <br/>
      Similarly, if an untagged frame is received on a port that is configured to accept tagged frames only, then the frame will be discarded.
      <br/>
      Also, if the received packet's VLAN identifier is set to "null", detector/inserter 335 will overwrite the identifier with the port's default ID.
    </p>
    <p num="63">Detector/inserter 335 also checks the DA field of the incoming packets for broadcast and multicast packets and passes this information to the RX FIFO and status information to the MIB Engine for logging of MIB counter statistics.</p>
    <p num="64">Detector/inserter 335 also detects the priority for PACE frames by monitoring the address field of the received packet.</p>
    <p num="65">
      NOTE: The PACE algorithm is a proprietary protocol developed by 3Com Corporation.
      <br/>
      To use this algorithm a manufacturer must obtain a license from 3Com.
      <br/>
      Once the manufacturer is licensed details of the operation and usage of PACE will be provided.
      <br/>
      PACE is a registered trademark of 3Com Corporation.
    </p>
    <p num="66">
      Detector/inserter 335 also processes the priority for VLANs.
      <br/>
      Priority for VLANs is supported in two different modes.
      <br/>
      In the first mode, the priority bits in a VLAN frame (see FIG. 4) are compared against the priority register (three bits for each port).
      <br/>
      Whenever the VLAN priority is higher than the register bit contents, the frame is marked as a high priority frame.
      <br/>
      In the second mode the incoming VLAN priority bits are compared against the priority register whose bits are specified in the VLAN Priority Mask register and if the MASK value matches, then VLAN priority is set.
      <br/>
      Priority is given to all multicasts received if EN_MCAST_PRI bit is set, in Port Control register 3.
    </p>
    <p num="67">PAUSE frame detector 340 monitors incoming packets for PAUSE frames.</p>
    <p num="68">Receive protocol state machine 345 may take various states in response to different conditions of receive section 310.</p>
    <p num="69">Control interface 350 receives various control signals.</p>
    <p num="70">
      Transmit section 360 contains the necessary logic to transmit normal data frames in compliance with IEEE 802.3 MAC protocol for both full and half duplex modes.
      <br/>
      In addition, it responds to flow control algorithms that are used to manage the resources of DRAM 250 and switch bus 260.
      <br/>
      It receives various control and data signals, including management signals, a 48-bit tx_data signal, and control signals from the receive protocol state machine 345.
      <br/>
      Transmit section 360 generates a TXE signal, a four-bit TXD signal, and control signals to the receive protocol state machine 345.
    </p>
    <p num="71">
      During data transfers, transmit section 360 accepts data from the TX FIFO via interface 365 in six-byte format, and serializer 370 converts it to nibble-wide data for transmission to the MII interface.
      <br/>
      Transmit section 360 will be allocated to the beginning of the packet prior to the preamble and SFD and will ensure a correct CRC is transmitted.
    </p>
    <p num="72">Transmit protocol state machine 375 implements a number of MAC protocol algorithms, including standard 802.3 MAC, PACE Mode, PDX MAC Algorithm, and PDX Aggressive Algorithm.</p>
    <p num="73">Loopback circuit 380 supports per port diagnostic loopback much like a standard MAC supports loopback.</p>
    <p num="74">Back off timer 382 generates a random backoff time interval if a set number of consecutive collisions occurs.</p>
    <p num="75">The PAUSE frame generator 385 manages the generation of PAUSE frames for flow control in full duplex mode.</p>
    <p num="76">
      The VLAN stripper 388 removes a VLAN tag inserted by receive section 310.
      <br/>
      The VLAN stripper 388 corresponds to detagging circuit 170.
    </p>
    <p num="77">
      The CRC generator 392 generates a CRC.
      <br/>
      This may be the same as CRC circuit 125.
    </p>
    <p num="78">Preamble/SFD generator 396 generates a preamble and an SFD.</p>
    <p num="79">Management interface 378 receives various control signals.</p>
    <p num="80">Uplink Ports</p>
    <p num="81">
      Uplink ports are defined as ports designated to be connected to the upper level network.
      <br/>
      These ports provide a means of connecting PDX to the rest of an enterprise network with potential to configure multiple ports for enhanced network performance.
    </p>
    <p num="82">The PDX will forward a packet to the upper level network through an uplink port when the packet's destination address is not matched within the PDX stack, or when it is a broadcast or multicast packet originating within PDX and VLANs are not enabled.</p>
    <p num="83">
      Any PDX port may be configured to be an uplink port.
      <br/>
      The configuration is controlled by programming the UPLINK bit in the Port Configuration Register 0, as follows:
    </p>
    <p num="84">
      --
      <br/>
      -- UPLINK                       Configuration
      <br/>
      -- 0                            Port is not an uplink
      <br/>
      -- 1                            Port is an uplink
    </p>
    <p num="85">
      The PDX uplink schemes provide for multiple uplinks per stack.
      <br/>
      This allows increased bandwidth to the upper level network, as some downlink ports can be allocated to one uplink and other downlinks to another uplink.
    </p>
    <p num="86">PDX can be configured with either of two uplink schemes.</p>
    <p num="87">
      The default mode uses VLAN membership to associate a given downlink port to an uplink port.
      <br/>
      Multiple uplinks can be specified per VLAN; however, the spanning tree will reduce the redundant uplinks to only one.
      <br/>
      This implies one active uplink port per VLAN.
      <br/>
      All packets received on a given port are sent to the same uplink port.
      <br/>
      If the PDX was not configured for VLANs, there would be one uplink port for the whole stack.
    </p>
    <p num="88">
      Optionally, if the stack is not configured for VLANs, PDX has a mode in which frames are sent to uplink ports based on a hash of their DA and SA fields rather than by receive port.
      <br/>
      A three-bit uplink ID per packet is generated by taking a snapshot of the lower three bits of the regenerated CRC word as the packet is checked on receive.
      <br/>
      This ID is placed in the info word of the first cell of the packet.
    </p>
    <p num="89">
      In default uplink mode, if there is a destination address mismatch (or broadcast/multicast), then the packet may be forwarded to a higher level network thru an uplink port.
      <br/>
      The PDX will logically AND the uplink mask (which is formed by the UPLINK bit of all the ports on that PDX) with the VLAN mask for the packet (if VLANs are not enabled, the VLAN mask will be all ones).
      <br/>
      The resulting mask is used to forward the packet out the appropriate port(s).
    </p>
    <p num="90">
      Additionally, the PDX may be configured to have concurrent, multiple uplinks.
      <br/>
      These uplink ports would be on separate non-overlapping VLANS.
    </p>
    <p num="91">
      When implementing Spanning Tree and using VLANS, IEEE 802.1Q provides only for VLANs over a single spanning tree and requires that spanning tree packets are not subjected to VLAN forwarding rules.
      <br/>
      This implies that multiple redundant links would be reduced by Spanning Tree to only one.
      <br/>
      If the one enabled link was to subsequently fail, another could be re-enabled by the spanning tree.
    </p>
    <p num="92">However, since PDX supports spanning tree by forwarding STP packets to a management agent that then configures PDX ports to a particular spanning tree state, it is possible to design a PDX stack such that after the spanning tree, PDX retains multiple concurrent uplinks.</p>
    <p num="93">
      It should be noted that the use of multiple uplinks with only PDX internal VLANs may result in the VLAN segmentation being compromised, e.g., a broadcast sent out the uplink port of one VLAN will be sent back down the uplink ports of any other VLANs.
      <br/>
      As long as the PDX uplink ports are on separate non-overlapping VLANs there will not be a problem with looping.
      <br/>
      Additionally, with multiple uplinks and only PDX configured for VLANs, it is not allowed to have a downlink port be a member of more than one VLAN visible to the upper level.
    </p>
    <p num="94">If the upper level network is also configured for VLANs then VLAN segmentation need not be affected and a downlink port may be configured as belonging to more than one VLAN.</p>
    <p num="95">Look Up Engine</p>
    <p num="96">
      FIG. 10 shows the look up engine (LUE), which learns, stores, and maintains MAC address information, port information, and VLAN information which it uses in making packet forwarding decisions.
      <br/>
      The look up engine forwards or filters packets based on PDX configuration, packet type, and stored address, port and VLAN information.
      <br/>
      When the LUE determines the ports (if any) to which a given packet must be sent, it informs Transmit Buffer Manager 240 by inserting a port bitmask into the info field of the first cell of the packet.
    </p>
    <p num="97">
      PDX performs lookups on both the receive side and the transmit side of the switch bus using four Content Addressable Memories (CAMs), further detailed below.
      <br/>
      The PDX's lookup function uses four CAMs: (1) MAC SA CAM 410, with a port ID number tag used for forwarding unicast packets; (2) VLAN CAM 415 with port mask tag for mapping VLAN tagged packets; (3) Uplink CAM 405 with a port address tag used to determine which uplink port a packet (with unknown destination address or a broadcast) should be sent; and (4) Receive side CAM 420 with VLAN ID tag fields for implementing multicast video streams using VLANs or associating a VLAN with a particular conversion (SA/DA/TYPE).
      <br/>
      Receive Side CAM 420 corresponds to content addressable memory 110 of FIG. 1.
    </p>
    <p num="98">
      The CAMs allow the PDX to make forwarding decisions at the transmit side based on: (1) the destination address; (2) the VLAN tag; and (3) the uplink ID of the packet as it is received from the switch bus.
      <br/>
      All of the described CAMs have a valid tag bit.
      <br/>
      Also, an activity bit is associated with VLAN CAM 415, Receive Side CAM 420, and MAC SA CAM 410.
    </p>
    <p num="99">
      To support VLAN based multicast video streams, PDX can map multicast DAs to specific VLANs with Receive Side CAM 420.
      <br/>
      This CAM contains multicast addresses and VLAN tags.
      <br/>
      Lookups of this CAM are performed on the receive side of the switch bus.
      <br/>
      As a SOF cell is drained from RX FIFO 225 into Bus Access FIFO 425, a lookup is performed on the DA and the returned VLAN and priority info are used to modify the packet's VLAN ID or change the info word priority bit.
      <br/>
      This functionality may be implemented as circuit 100 of FIG. 1.
    </p>
    <p num="100">
      Optionally, this CAM may be used to create a VLAN association with a hash of a packet's DA, SA, and the TYPE fields.
      <br/>
      The hash word is generated by capturing a snapshot of the CRC checker in the RX port after the last bit of the SA field have been clocked into the CRC.
      <br/>
      The 32 bits rendered by this operation are padded with zeroes (or TYPE field) to create a 48-bit hash word which is inserted into the data stream and is compared to the Rx side CAM contents before being stripped as the packet goes out to the switch bus.
      <br/>
      This lookup operation returns VLAN and/or priority information which may be used to overwrite the frame's existing information.
      <br/>
      This functionality may also be implemented as circuit 100 of FIG. 1.
    </p>
    <p num="101">
      If desired, to preserve the ability to check the CRC across the switch bus as an error protection mechanism, the VLAN ID may only be overwritten for frames which were received without a valid VLAN ID (either untagged or tagged with a null VLAN ID).
      <br/>
      The priority status, however, may be elevated for any packet as this information is stored in the info word rather than the packet body.
    </p>
    <p num="102">
      In a preferred embodiment, there are 192 multicast/hash CAM locations in Receive Side CAM 420 that may be programmed to associate a given multicast address or SA/DA TYPE hash with a specific VLAN and/or priority.
      <br/>
      If a packet is received whose DA matches an address contained in the CAM, then those ports that are members of the specified VLAN will participate in the frame's transmission.
      <br/>
      Lookups of the Receive Side CAM are performed on the receive side of the switch bus by the sourcing PDX.
    </p>
    <p num="103">
      The FIFO 450 holds the packet until Receive Side CAM 420 has performed its lookup.
      <br/>
      The FIFO 455 holds the packet and the tag added from Receive Side CAM 420 for transmission on the receive bus interface.
      <br/>
      Control circuit 465 receives the outputs from the CAMs (other than Receive Side CAM 420) and provides the port mask, packet type, and status information to buffer manager 240.
    </p>
    <p num="104">
      FIG. 11 shows how Receive Side CAM 420 is accessed in a preferred embodiment, corresponding to circuit 100 in FIG. 1.
      <br/>
      Receive Side CAM 420 reads the 48-bit DA (or 48-bit hash as described above) on the rx_fifo_data signal.
      <br/>
      If there is a match, the corresponding 12-bit VLAN ID field and 1-bit priority field are transferred from tag storage 430 as a 13-bit tag data signal to CAM data register 440, along with the 48 bits from Receive Side CAM 420.
      <br/>
      The CAM data register 440 holds 192 bits.
      <br/>
      When CAM data register 440 receives a read_cam signal, it transfers its data as a 16-bit data signal.
    </p>
    <p num="105">
      FIG. 11 also shows how new entries are added to Receive Side CAM 420 and tag storage 430.
      <br/>
      The new 48-bit lookup data and the 13-bit tag data are stored 16 bits at a time in CAM data register 440.
      <br/>
      Upon a write_cam signal, Receive Side CAM 420 reads the 48-bit lookup data and stores it, and tag storage 430 reads the 13-bit tag data and stores it as a 12-bit VLAN ID and a 1-bit priority.
    </p>
    <p num="106">
      FIG. 12 shows the states entered by the blocks shown in FIG. 11 when reading or writing a tag.
      <br/>
      The state machine is initially in prematch idle state 500.
      <br/>
      If it receives a rx_data_valid signal, it transitions to match DA state 510.
      <br/>
      Then, it transitions to read tag prematch state 520.
      <br/>
      While in state 520, if it receives a rx_hash_valid signal it transitions to match hash state 530; if it receives a .about.rx_hash_valid signal it transitions to prematch idle state 500.
    </p>
    <p num="107">If it receives a rx_hash_valid signal while in state 500, it transitions to match hash state 530.</p>
    <p num="108">
      After state 530, it transitions to read tag state 540.
      <br/>
      Then it transitions to prematch idle state 500.
    </p>
    <p num="109">
      If it receives a .about.wr_pending signal and a rd_pending signal and a .about.lookup_pending signal while in state 500, it transitions to read state 550.
      <br/>
      It then transitions to prematch idle state 500.
    </p>
    <p num="110">
      If it receives an age_pending signal and a .about.wr_pending signal and a .about.rd_pending signal and a .about.lookup pending signal while in state 500, it transitions to age state 560.
      <br/>
      It then transitions to prematch idle state 500.
    </p>
    <p num="111">
      If it receives a wr_pending signal and a .about.rd_pending signal and a .about.lookup_pending signal while in state 500, it transitions to write state 570.
      <br/>
      It then transitions to prematch idle state 500.
    </p>
    <p num="112">VLAN Support</p>
    <p num="113">
      The intent of the PDX VLAN support is to facilitate logical segmentation of a single physical network.
      <br/>
      A number of benefits accrue from this capability.
      <br/>
      Broadcast containment allows a single broadcast domain to become multiple smaller domains.
      <br/>
      Easy administration of moves/adds/changes is enabled because the new or moving host is part of a given network regardless of physical wiring.
      <br/>
      Security is improved because traffic is limited to hosts for which it is intended, making eavesdropping more difficult.
    </p>
    <p num="114">
      Current popular implementations of VLANs are port based and MAC based.
      <br/>
      Additionally, IEEE 802.1Q specifies a VLAN implementation based on explicit tagging of frames.
      <br/>
      This standard provides for dynamic as well as static configuration of VLANs and allows up to 4096 VLANs per network.
    </p>
    <p num="115">
      PDX supports port based VLANs, and both static and dynamic 802.1Q VLANs. Since PDX is designed as a desktop switch (user per port), it does not differentiate between port-based and MAC-based VLANs.
      <br/>
      PDX also supports VLAN based multicast video streams, allowing users to subscribe to a video broadcast simply by requesting membership of a VLAN.
      <br/>
      Preferably, PDX is implemented with a maximum of 192 concurrently active VLANs.
    </p>
    <p num="116">
      PDX is programmed to support VLANs by setting the VLAN_EN bit in the Global Configuration Register 0.
      <br/>
      The PDX may then be configured for full 802.1Q VLANs or internal port-based VLANs by setting the tag capability of each port.
    </p>
    <p num="117">802.1Q VLANs</p>
    <p num="118">Per the 802.1Q standard, each PDX port can be independently configured to be tagged only, untagged only, or hybrid by programming the TAG&lt;1:0&gt; bits of the Port Control Register 1.</p>
    <p num="119">
      Each port in the PDX will examine incoming receive frames for the existence of the 802.1Q tag in the frame.
      <br/>
      If none is present, the PDX will insert the two-byte 802.1Q tag protocol identifier and a two-byte default VLAN identifier for that port before forwarding onto the switch bus.
      <br/>
      The default tag value for the port is programmed into the Port VLAN Tag register.
      <br/>
      The tag status of the packet on receive is reflected in the RX_packet_status bits of the info word is set before sending onto the switch bus.
    </p>
    <p num="120">
      Depending on its configuration, the transmitting port may remove the embedded tag from a packet before transmitting to the network segment.
      <br/>
      If a port is configured as untagged then the tag will be removed.
      <br/>
      If a port is configured as hybrid the tag will be removed if the VLAN is known to be tag-unaware.
      <br/>
      This is known by means of a tag/untag bit in the VLAN CAM.
      <br/>
      By default, PDX will not discard tagged packets received on an untagged port or untagged packets on a tagged port However, PDX may be configured with this functionality by setting the DISCARD_TAG bit in the Global Configuration register 0.
    </p>
    <p num="121">
      PDX may also be configured to discard packets which due to tag insertion become larger than the maximum permissible Ethernet frame size (1518).
      <br/>
      This mode is invoked by setting the GIANT bit in the Global Configuration Register 0.
      <br/>
      When the receiving port inserts a tag into a frame so that the frame length exceeds 1518 bytes, the GIANT bit in the info word is set.
      <br/>
      If PDX receives a packet form the switch bus with the GIANT bit set and the GIANT bit in the Global Configuration Register 0 is also set, the Look Up Engine will discard the packet unless the destination port is configured to be untagged.
      <br/>
      If the destination port is configured to be untagged then the packet may safely be for-warded since the tag will be removed anyway before the packet is transmitted to the network.
    </p>
    <p num="122">
      PDX contains a 192 location look up table (VLAN CAM 415), programmable via the serial interface, of currently active VLAN tags and associated ports.
      <br/>
      Entries are only maintained for VLANs with at least one member present on the PDX stack, i.e., PDX does not seek to maintain entries for the potentially large number of VLAN IDs that may exist on the upper level network.
    </p>
    <p num="123">
      When a PDX receives a packet from switch bus 260, its VLAN tag is matched with the entries in VLAN CAM 415.
      <br/>
      If the packet is a broadcast/multicast (except for some special reserved addresses) and its tag is matched, then it is forwarded to ports on its VLAN only.
      <br/>
      If the packet is a unicast and PDX is configured to be in secure mode by setting the SECURE bit of the Global Configuration Register 0, then the packet will be forwarded only if there is a destination match and VLAN match returning the same port masks.
      <br/>
      Otherwise, it will be directed to the management entity (via the 13th port) for it to handle, or optionally forwarded out the uplink port.
    </p>
    <p num="124">
      GARP requests to a given VLAN are detected by the Look Up Engine and passed to a management entity via the 13th port.
      <br/>
      In this way, the VLAN table can be cached so as to support dynamic VLANs without storing all 4096 possible VLAN IDs.
      <br/>
      The management entity may then reconfigure the VLAN look up table.
      <br/>
      To facilitate this, each entry in the Look Up table has an activity bit which is set upon a VLAN match and may periodically be reset under management control.
      <br/>
      When the management entity determines that it needs to add a VLAN entry, it can examine the CAM for VLANs which have not been active recently (activity bit has not been set since last reset).
      <br/>
      That entry can then be overwritten with the tag and port mask for the new VLAN.
    </p>
    <p num="125">Port based VLANs</p>
    <p num="126">
      The PDX also supports Port-based VLAN implementations.
      <br/>
      The PDX internally uses the 802.1Q tagging mechanism described previously.
      <br/>
      The PDX's default port VLAN ID registers and VLAN look up table may be programmed such as to effectively configure PDX for Port-based VLANs.
    </p>
    <p num="127">Each port should be programmed to be untagged and assigned to a VLAN by programming the default VLAN ID register.</p>
    <p num="128">
      It is allowed for a node to be a member of multiple overlapping VLANS.
      <br/>
      This might be achieved by having a node associated with multiple VLANS, one of which would be a superset of the others, such that a port might send a packet on one VLAN, but receive packets on any of a number of other (different) VLANS, for example, one server with n VLANs.
    </p>
    <p num="129">When PDX is configured in Port-based VLAN mode, the tagging concept does not extend beyond the scope of the PDX stack; i.e., all ports are programmed as untagged, and no tagged packets are transmitted from the PDX.</p>
    <p num="130">Multicast "Video" Streams</p>
    <p num="131">
      The 192 location Receive Side CAM 420 may be used to associate multicast addresses with VLAN IDs and/or priority status, as described above and also as described regarding circuit 100.
      <br/>
      If a packet is received whose destination address matches one of the stored multicast addresses, then, before the packet is sent onto the switch bus, the VLAN tag field is overwritten with the tag associated with that multicast, rather than the default tag for the receive port.
      <br/>
      The tag is not overwritten if the packet was tagged when received.
      <br/>
      It is then sent onto switch bus 260 as normal and forwarded on the transmit section 360 according to its VLAN tag.
      <br/>
      Using this capability, PDX may be configured such that users can subscribe to a video broadcast simply by requesting membership of the relevant VLAN.
      <br/>
      Management software would then modify the CAM entry for the requested VLAN to set the bit in the port mask corresponding to that user's port.
    </p>
    <p num="132">
      It should be understood that various alternatives to the embodiments of the invention described herein may be employed in practicing the invention.
      <br/>
      It is intended that the following claims define the scope of the invention and that structures within the scope of these claims and their equivalents are covered thereby.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>An apparatus including a circuit for assigning a VLAN tag to a data frame received at a port of a switch, said circuit comprising:</claim-text>
      <claim-text>a content addressable memory which stores tagging information, said tagging information including lookup data and associated tag data: a data frame memory which stores at least part of a data frame, said Dart including data frame information; a search circuit, connected to said content addressable memory and said data frame memory, which reads said data frame information, searches said content addressable memory for said lookup data corresponding to said data frame information, and reads a corresponding subset of said associated tag data;</claim-text>
      <claim-text>and a tagging circuit, connected to said search circuit and said data frame memory, which writes in said data frame memory a VLAN tag including said corresponding subset of said associated tag data, wherein:</claim-text>
      <claim-text>- said data frame information comprises an associated source address and an associated destination address; - said lookup data comprises a plurality of hashes of reference source and destination addresses;</claim-text>
      <claim-text>and - said search circuit searches said content addressable memory for one of said Plurality of hashes corresponding to said associated source address and said associated destination address.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The apparatus of claim 1, wherein: said data frame information further comprises an associated frame type; said plurality of hashes further includes hashes of reference frame types;</claim-text>
      <claim-text>and said search circuit further searches said content addressable memory for said one of said plurality of hashes corresponding to said associated source address, said associated destination address, and said associated frame type.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The apparatus of claim 1, wherein said associated tag data includes priority data, said apparatus further comprising: a control memory which stores an information value;</claim-text>
      <claim-text>and a priority circuit, connected to said search circuit and said control memory, which writes into said control memory said corresponding subset of said associated tag data.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The apparatus of claim 1, further comprising: a detagging circuit, connected to said data frame memory, which removes said VLAN tag from said data frame.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The apparatus of claim 1, wherein: said associated destination address corresponds to a multicast address.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The apparatus of claim 2, wherein: said associated destination address corresponds to a multicast address.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The apparatus of claim 2, wherein said associated tag data includes priority data, said apparatus further comprising: a control memory which stores an information value;</claim-text>
      <claim-text>and a priority circuit, connected to said search circuit and said control memory, which writes into said control memory said corresponding subset of said associated tag data.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The apparatus of claim 2, further comprising: a detagging circuit, connected to said data frame memory, which removes said VLAN tag from said data frame.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A method for assigning a VLAN tag to a data frame received at a port of a switch, said method comprising the steps of: storing at least part of a data frame, said part including an associated source address and an associated destination address; storing tagging information, said tagging information including a plurality of hashes of reference source and destination addresses, and associated tag data; reading said associated destination address and said associated source address; searching said tagging information for said lookup data corresponding to said associated source address and said associated destination address; reading a subset of said associated tag data according to a result of said step of searching: and writing in said part a VLAN tag including said subset of said associated tag data.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 9, wherein: said step of storing at least part of a data frame comprises storing at least part of a data frame, said part including an associated source address and an associated destination address corresponding to a multicast address.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 9, wherein: said step of storing at least part of a data frame comprises storing at least part of a data frame, said part including an associated source address, an associated destination address, and an associated frame type; said step of storing tagging information comprises storing tagging information, said tagging information including a plurality of hashes of reference source and destination addresses and reference frame types, and associated tag data; said step of reading said data frame information comprises reading said associated destination address, said associated source address, and said associated frame type;</claim-text>
      <claim-text>and said step of searching said tagging information comprises searching said tagging information for said lookup data corresponding to said associated source address, said associated destination address, and said associated frame type.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method of claim 9, wherein said associated tag data includes priority data, further comprising the steps of: storing an information value;</claim-text>
      <claim-text>and writing into said information value said subset of said associated tag data.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 9, further comprising the step of: removing said VLAN tag from said data frame.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 11, wherein: said step of storing at least part of a data frame comprises storing at least part of a data frame, said part including an associated source address, an associated frame type, and an associated destination address corresponding to a multicast address.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 11, wherein said associated tag data includes priority data, further comprising the steps of: storing an information value;</claim-text>
      <claim-text>and writing into said information value said subset of said associated tag data.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 9, further comprising the step of: removing said VLAN tag from said data frame.</claim-text>
    </claim>
  </claims>
</questel-patent-document>