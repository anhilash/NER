<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181605B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181605</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181605</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="23642795" extended-family-id="42108175">
      <document-id>
        <country>US</country>
        <doc-number>09414750</doc-number>
        <kind>A</kind>
        <date>19991006</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1999US-09414750</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43164556</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>41475099</doc-number>
        <kind>A</kind>
        <date>19991006</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1999US-09414750</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G11C  16/04        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>16</main-group>
        <subgroup>04</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G11C  16/34        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>16</main-group>
        <subgroup>34</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>365185220</text>
        <class>365</class>
        <subclass>185220</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>365185210</text>
        <class>365</class>
        <subclass>185210</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>365185290</text>
        <class>365</class>
        <subclass>185290</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G11C-016/34V2C</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>016</main-group>
        <subgroup>34V2C</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G11C-016/04N</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>016</main-group>
        <subgroup>04N</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G11C-016/34V</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>016</main-group>
        <subgroup>34V</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>G11C-016/34V4C</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>016</main-group>
        <subgroup>34V4C</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-016/3445</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>16</main-group>
        <subgroup>3445</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-016/0483</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>16</main-group>
        <subgroup>0483</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-016/3436</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>16</main-group>
        <subgroup>3436</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-016/3459</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>16</main-group>
        <subgroup>3459</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>4</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>4</number-of-drawing-sheets>
      <number-of-figures>5</number-of-figures>
      <image-key data-format="questel">US6181605</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Global erase/program verification apparatus and method</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>YEOM JIN SEON</text>
          <document-id>
            <country>US</country>
            <doc-number>5936890</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5936890</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>HOLLMER SHANE C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6009014</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6009014</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>SUGIYAMA TOSHINOBU</text>
          <document-id>
            <country>US</country>
            <doc-number>6009015</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6009015</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>TAKEUCHI KEN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6055188</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6055188</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>OGANE JUNICHI</text>
          <document-id>
            <country>US</country>
            <doc-number>6055189</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6055189</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Advanced Micro Devices, Inc.</orgname>
            <address>
              <address-1>Sunnyvale, CA, US</address-1>
              <city>Sunnyvale</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>ADVANCED MICRO DEVICES</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Hollmer, Shane C.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Pawletko, Joseph G.</name>
            <address>
              <address-1>Santa Clara, CA, US</address-1>
              <city>Santa Clara</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Chung, Michael S. C.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Skjerven Morrill MacPherson LLP</orgname>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Kwok, Edward C.</name>
          </addressbook>
        </agent>
        <agent sequence="3" rep-type="agent">
          <addressbook lang="en">
            <name>Hsia, David C.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Mai, Son</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>GRANTED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A technique to determine whether multiple memory cells are programmed or erased.
      <br/>
      After a program or erase operation, respective program or erase verify operations are performed.
      <br/>
      A logical gate is coupled to measure the state of each memory cell.
      <br/>
      When all memory cells selected to be programmed or erased are programmed or erased then the output of the logical gate indicates successful program or erase verify.
      <br/>
      Thus, by using a single logical gate coupled to measure the states of multiple memory cells, only the output of the logical gate need be measured to determine successful program or erase verification of multiple memory cells.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The present invention is directed to a memory system and more particularly to an apparatus and method to verify whether multiple memory cells have successfully programmed or erased.</p>
    <heading>RELATED ART</heading>
    <p num="2">
      FIG. 1 illustrates a cross sectional view of a conventional memory transistor, also known as a memory cell.
      <br/>
      The memory transistor includes a control gate CG, a floating gate FG, a drain D, a source S, and a well W. Thin oxide layers isolate the floating gate FG from the control gate CG as well as the well W.
    </p>
    <p num="3">
      FIG. 2 schematically illustrates a conventional NAND type flash memory array 100 that includes numerous memory cells, each depicted in FIG. 1.
      <br/>
      A "string" includes a selection transistor Ti-1, memory transistors Mi-1 to Mi-j, and a selection transistor Ti-2, all being serially coupled.
      <br/>
      Each string can be coupled to a bit line BLj and a common source CS through selection transistors Ti-1 and Ti-2, respectively.
      <br/>
      The control gates for selection transistors Ti-1 and Ti-2 are respectively connected to selection lines Sl1 and Sl2.
      <br/>
      The control gates for the memory transistors Mi-1 to Mi-j are respectively connected to word lines W1 to Wj.
      <br/>
      Typically, a read operation is performed on a page basis, i.e., flash memory cells coupled to a word line are read together.
    </p>
    <p num="4">
      Herein, a memory transistor represents logical LOW when it is programmed to have a threshold voltage that is larger than a predetermined minimum threshold voltage for logical LOW bits.
      <br/>
      Correspondingly, a memory transistor represents a logical HIGH when it is erased to have a threshold voltage that is less than a predetermined maximum threshold voltage for logical HIGH bits.
      <br/>
      One skilled in the art will understand that logic level assignments to the predetermined minimum and maximum threshold voltages are arbitrary.
    </p>
    <p num="5">
      During testing of memory cells and subsequent consumer use of memory cells, it is desirable to speed the time to determine the success of both program and erase operations.
      <br/>
      Thus what is needed is a method and apparatus to verify successful program and erase operations.
    </p>
    <heading>SUMMARY</heading>
    <p num="6">An embodiment of the present invention includes a verification circuit that determines whether a plurality of memory cells are programmed, where each memory cell has an associated data latch that identifies whether the cell is to be programmed, the verification circuit including a plurality of switches, each switch being coupled to a data latch, where each switch is controlled by the state of the associated data latch, where if all memory cells identified to be programmed are programmed, the state of all switches are the same.</p>
    <p num="7">An embodiment of the present invention includes a verification circuit that determines whether a plurality of memory cells are erased, the verification circuit including a plurality of switches, each switch being coupled to measure the state of an associated memory cell, where the state of all switches are the same if all memory cells are erased.</p>
    <p num="8">Advantageously, only a single output needs to be measured in a program or erase verification thereby decreasing the time needed to erase or program verify.</p>
    <p num="9">Various embodiments of the present invention will be more fully understood in light of the following detailed description taken together with the accompanying drawings.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="10">
      FIG. 1 illustrates a cross sectional view of a conventional memory transistor.
      <br/>
      FIG. 2 Schematically illustrates a conventional NAND type flash memory array 100.
      <br/>
      FIG. 3 schematically depicts a memory system 300 in accordance with an embodiment of the present invention.
      <br/>
      FIG. 4 schematically depicts a suitable implementation of latch and sensing circuitry 310 for each bit in the page buffer 309.
      <br/>
      FIG. 5 depicts a suitable implementation of verification device 319, in accordance with one embodiment of the present invention.
      <br/>
      Note that use of the same reference numbers in different figures indicates the same or like elements.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="11">Overview</p>
    <p num="12">
      FIG. 3 schematically depicts a memory system 300 in accordance with an embodiment of the present invention.
      <br/>
      Memory system 300 includes a system logic 303 that controls the operation of memory system 300; a conventional memory array 100, described earlier; a conventional voltage source 311 used to generate voltages to appropriate portions of memory array 100 during conventional programming and erase operations; a page buffer 309 that is used to identify and/or set the state of memory cells; a current source 315 that generates a reference current through selected bitlines of memory array 100; and a global verify device 319 that determines whether multiple memory cells have successfully programmed or erased.
    </p>
    <p num="13">
      Following conventional program and erase operations, current source 315 provides reference currents through bit lines of memory array 100 which are associated with memory cells selected to be programmed or erased.
      <br/>
      The global verify device 319 determines whether the selected memory cells have successfully programmed or erased.
    </p>
    <p num="14">System Logic 303</p>
    <p num="15">
      In this embodiment, system logic 303 is implemented in hard wired logic.
      <br/>
      Of course, system logic 303 could be implemented in software executed by a microprocessor.
    </p>
    <p num="16">Voltage Source 311</p>
    <p num="17">
      Techniques to program and erase memory cells are well known.
      <br/>
      See for example, U.S. Pat. No. 5,812,457, entitled "Semiconductor NAND type flash memory with incremental step pulse programming", to inventors Arase et al., which is incorporated herein by reference in its entirety.
    </p>
    <p num="18">
      Of course, though not depicted, conventional X and Y address decoders are used.
      <br/>
      For an exemplary X-decoder, see U.S. Pat. No. 5,852,576, entitled "High voltage NMOS pass gate for integrated circuit with high voltage generator and flash non-volatile memory device having the pass gate", inventors Le et al. and U.S. Pat. No. 5,844,840, entitled "High voltage NMOS pass gate having supply range, area, and speed advantages", inventors Le et al., which are incorporated herein by reference in their entirety.
    </p>
    <p num="19">Page Buffer 309</p>
    <p num="20">
      Each bit line, BLj, of memory array 100 is coupled to page buffer 309.
      <br/>
      FIG. 4 schematically depicts a suitable implementation of latch and sensing circuitry 310 for each bit in the page buffer 309.
    </p>
    <p num="21">Conventional data latch includes inverter 350.1 coupled to an inverter 350.2. Outputs of inverters 350.1 and 350.2 are coupled to respective nodes 350.B and 350.A.</p>
    <p num="22">
      In one embodiment, load circuitry is used to specify which bits are to be programmed.
      <br/>
      Load circuitry includes NMOS transistors 355.2, 355.5, and 355.6 and PMOS transistors 355.3 and 355.4.
    </p>
    <p num="23">
      Transistors 355.2, 355.3, and 355.4 together allow a load operation of node 350.A when signal LDPB is HIGH.
      <br/>
      Transistor 355.2 passes the voltage present at node 355.A to node 350.A when LDPB is logical HIGH.
    </p>
    <p num="24">
      Transistors 355.3, 355.4, 355.5, and 355.6 together allow a read operation when signal RDPB is HIGH.
      <br/>
      Transistor 355.5 allows transistor 355.6 to control node 355.A when RDPB is logical HIGH and node 350.A is logical HIGH.
    </p>
    <p num="25">
      In this embodiment, transistors 355.1 and 355.7 selectively couple node 359 to node 355.A. When a HIGH signal is provided to each of the gate terminals of transistors 355.1 and 355.7, the signal at node 359 is transferred to node 355.A or vice versa.
      <br/>
      A conventional address decoder provides inputs of YDi and YDj to gate terminals of respective transistors 355.1 and 355.7.
    </p>
    <p num="26">
      Transistors 357 and 358 are arranged so that if SNS node is HIGH when the signal SET is HIGH, node 350.B will be pulled to ground.
      <br/>
      This will cause a logical LOW to be stored on node 350.B and a logical HIGH to be stored on node 350.A.
    </p>
    <p num="27">NMOS transistor 364 passes the voltage stored on node 350.A to SNS node of bit line BLj when signal PGM is a HIGH.</p>
    <p num="28">
      Bit line BLj includes low threshold NMOS transistor 360.2 and PMOS transistor 363.
      <br/>
      During sensing of the state of a memory cell connected to bit line BLj, the transistor 360.2 is used as a cascode device to amplify the bit line voltage.
      <br/>
      When the voltage bit line Blj approaches the BLCNTRL voltage, transistor 360.2 begins to turn off.
      <br/>
      This allows transistor 363 to pull the SNS node toward Vcc, thereby turning on transistor 358.
    </p>
    <p num="29">
      N-well and source terminals of p-channel transistor 363 are coupled to terminal Vcc.
      <br/>
      Input PBIAS to transistor 363 controls the level of reference current that flows through bit line BLj.
    </p>
    <p num="30">Reference Current Source 315</p>
    <p num="31">
      One technique to detect whether selected memory cells are programmed/erased is to use a conventional current source to provide a reference current, Iref, to the bit line BLj of each latch and sensing circuitry 310 associated with selected memory cells.
      <br/>
      The relationship between the reference current and program/erase verification is described in more detail later.
    </p>
    <p num="32">Program/Erase Verification</p>
    <p num="33">
      In accordance with one embodiment of the present invention, an apparatus and method are provided to verify program and erase operations across multiple latch and sensing circuitry 310.
      <br/>
      In this embodiment, the operation of program and erase verification circuits is similar to a NOR logic circuit.
    </p>
    <p num="34">
      For program verification, inputs to the NOR logical circuit are from node 350.B (FIG. 4) of each latch and sensing circuitry 310.
      <br/>
      In this embodiment, the node 350.A of only programmed cells is set to logical LOW, which corresponds to node 350.B being a logical HIGH state.
      <br/>
      For cells that are not to be programmed, the node 350.A is set to logical HIGH, which corresponds to node 350.B being a logical LOW state.
      <br/>
      After a reference current is generated through each bit line that includes a programmed cell on the selected page, for each bit line that includes a programmed cell, the node 350.B switches to a logical LOW.
      <br/>
      Thus the output of NOR is a HIGH when the state of each node 350.B is LOW, thereby indicating a program verify.
    </p>
    <p num="35">
      For erase verification, inputs to the NOR logic circuit are from node 350.A of each latch and sensing circuitry 310.
      <br/>
      When a node 350.A is a logical HIGH state, the corresponding memory cell is not erased.
      <br/>
      Erase verification occurs when all nodes 350.A are a LOW state.
      <br/>
      Thus an output of HIGH from the NOR logic circuit indicates erase verification.
    </p>
    <p num="36">
      FIG. 5 depicts suitable implementations of each of program and erase verification circuits in verification device 319.
      <br/>
      In one embodiment, separate replicas of verification device 319 are used for program and erase verifications.
    </p>
    <p num="37">
      Verification device 319 includes NMOS transistors 408.0 to 408.n, PMOS transistor 403, and inverter 405.
      <br/>
      In this embodiment, each of the source terminals 404.0 to 404.n of respective transistors 408.0 to 408.n are coupled to terminal 402.
      <br/>
      Drain terminals 410.0 to 410.n of respective transistors 408.0 to 408.n are coupled to ground.
      <br/>
      Terminal 402 is coupled to the drain terminal 403.2 of PMOS transistor 403.
      <br/>
      PMOS transistor 403 is a "weak p-channel" and thus is sensitive to any gate terminal 406.j being a logical HIGH.
      <br/>
      Source terminal 403.1 and gate terminal 403.3 of transistor 403 are coupled to respective terminal Vcc and inverter 405.
      <br/>
      A signal from system logic 303 is input to inverter 405 and controls whether transistor 403 turns on.
    </p>
    <p num="38">
      For program verification, node 350.B (FIG. 4) of each latch and sensing circuitry 310 is coupled to gate terminal 406.j, where j=0 to n. In a program operation, discussed earlier, latches of cells that are to be programmed are set to a HIGH at node 350.B. Following an attempt to program a cell, the cell is programmed if the latch switches to a LOW state at node 350.B. Thus when all nodes 350.B are a LOW state, each gate terminal 406.j, where j=0 to n, is a logical LOW state, e.g., approximately 0 V. Consequently, each of source terminals 404.0 to 404.n is in a HIGH state and thus terminal 402 is in a HIGH state.
      <br/>
      However, when any gate terminal 406.j is a logical HIGH state, i.e., corresponding to a latch that is not program verified, terminal 402 is a logical LOW.
      <br/>
      Thus a successful program verification occurs when terminal 402 is a HIGH.
    </p>
    <p num="39">
      For erase verification, node 350.A of each latch and sensing circuitry 310 (FIG. 4) is coupled to gate terminal 406.j, where j=0 to n. In an erase operation, discussed earlier, latches of all cells are set LOW at node 350.A. Following an attempt to erase a cell, the cell is erased if the latch remains at LOW at node 350.A. Thus when all nodes are a LOW state, gate terminals are a logical LOW state, e.g., approximately 0 V. Consequently, each of source terminals 404.0 to 404.n is in a LOW state and thus terminal 402 is in a LOW state.
      <br/>
      However, when any gate terminal 406.j is not a logical LOW state, i.e., corresponding to a latch that is not erase verified, terminal 402 is logical HIGH.
      <br/>
      Thus a successful erase verification occurs when terminal 402 is a LOW.
    </p>
    <p num="40">
      Thus by use of separate verification circuits 319, erase and program verification across an entire word line can be verified by measuring a single line terminal.
      <br/>
      Significant time savings thus result over inspecting each bit in the page buffers to determine whether program/erase has occurred.
      <br/>
      During test mode, in which a fabricated memory device is tested to determine program and erase characteristics, use of the verification device 319 speeds time to determine program and erase characteristics.
      <br/>
      Consequently, test times of commercially suppliable memory devices decreases, thereby increasing production capacity without need for additional capital equipment.
      <br/>
      This results in lower overall product cost.
    </p>
    <p num="41">Modifications</p>
    <p num="42">
      The above-described embodiments of the present invention are illustrative and not limiting.
      <br/>
      It will thus be obvious to those skilled in the art that various changes and modifications may be made without departing from this invention in its broader aspects.
      <br/>
      For example, memory array 100 can be a NOR type.
      <br/>
      Therefore, the appended claims encompass all such changes and modifications as fall within the true spirit and scope of this invention.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A memory system comprising:</claim-text>
      <claim-text>a plurality of memory cells; a plurality of latch devices, wherein each latch device corresponds to one of said memory cell, holding a value indicating whether or not said corresponding memory cell is to be programmed; a voltage source that selectively programs the memory cells to be programmed;</claim-text>
      <claim-text>and a verification circuit comprising a plurality of switches configured as a NOR circuit, each of said switches being coupled to receive as input said value held in a corresponding one of said the latch devices.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The system of claim 1, wherein (a) each of the plurality of latch devices is coupled to receive, after said programming by said voltage source, a stored value of the corresponding memory cell, (b) each of the plurality of latches is set to hold a predetermined value prior to programming of said memory cells by said voltage source, and (c) when all of the selected memory cells are successfully programmed, said values held in the plurality of latch devices are the same.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The system of claim 2, further comprising a current source that provides current to said latch devices after said programming of said memory by said voltage source, wherein when the memory cell corresponding to one of said latch devices is programmed, said latch device changes state in response to said current.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The system as in claim 1, wherein said verification circuit further comprising a second plurality of switches configured as a second NOR circuit, each of said second plurality of switches corresponding to one of said plurality of latch devices and being coupled to receive as input a value which is a logical complement of said value held in said corresponding latch device.</claim-text>
    </claim>
  </claims>
</questel-patent-document>