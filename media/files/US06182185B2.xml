<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182185B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182185</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182185</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22731696" extended-family-id="42109040">
      <document-id>
        <country>US</country>
        <doc-number>09198026</doc-number>
        <kind>A</kind>
        <date>19981123</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09198026</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165674</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>19802698</doc-number>
        <kind>A</kind>
        <date>19981123</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09198026</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  13/40        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>40</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  13/42        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>42</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>710317000</text>
        <class>710</class>
        <subclass>317000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>709238000</text>
        <class>709</class>
        <subclass>238000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-013/40D2</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>013</main-group>
        <subgroup>40D2</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-013/42C3S</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>013</main-group>
        <subgroup>42C3S</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-013/4022</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>4022</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-013/4243</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>4243</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>21</number-of-claims>
    <exemplary-claim>11</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>4</number-of-drawing-sheets>
      <number-of-figures>4</number-of-figures>
      <image-key data-format="questel">US6182185</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Port switches</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>ZAPISEK JOHN</text>
          <document-id>
            <country>US</country>
            <doc-number>5345556</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5345556</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>NUGENT STEVEN F</text>
          <document-id>
            <country>US</country>
            <doc-number>5347450</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5347450</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>NUGENT STEVEN F</text>
          <document-id>
            <country>US</country>
            <doc-number>5398317</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5398317</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>TAKE RIICHIRO</text>
          <document-id>
            <country>US</country>
            <doc-number>5420982</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5420982</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>MEYER CHARLES S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5751764</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5751764</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>GATES STILLMAN F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5920708</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5920708</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>WATSON WILLIAM JOEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5964835</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5964835</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>MATTSON H DAVID, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5983269</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5983269</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>BAUMAN JAMES A</text>
          <document-id>
            <country>US</country>
            <doc-number>6046979</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6046979</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>CIVANLAR SEYHAN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6078963</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6078963</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>ADC Telecommunications, Inc.</orgname>
            <address>
              <address-1>Minneapolis, MN, US</address-1>
              <city>Minneapolis</city>
              <state>MN</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>ADC TELECOMMUNICATIONS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Stokes, David H.</name>
            <address>
              <address-1>Nevada City, CA, US</address-1>
              <city>Nevada City</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Smith-Hill, John</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <orgname>Smith-Hill and Bedell</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Shin, Christopher B.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A port switch includes n bidirectional communication ports and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including a staging RAM and a switch responsive to data in the staging RAM for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input.
      <br/>
      A source lookup table contains, for each port, an entry specifying the router input that is connected to that port and a destination lookup table contains, for each port, an entry specifying the router output that is connected to that port.
      <br/>
      Forward and reverse connections are established between a uth port (1&lt;=u&lt;=n) and a vth port (1&lt;=v&lt;=n) by addressing the source lookup table with addresses associated with the uth and vth ports and reading respective router inputs and addressing the destination lookup table with addresses associated with the uth and vth ports and reading respective router outputs.
      <br/>
      A matrix image data structure is created containing entries specifying at least the router inputs for the uth and vth ports and the router outputs for the uth and vth ports.
      <br/>
      The router input and router output entries in the matrix image data structure are utilized to refresh the staging RAM of the router.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">This invention relates to improvements in or relating to port switches.</p>
    <p num="2">A port switch includes n bidirectional I/O communication ports, where n&gt;2, each port having at least a first state in which it propagates a signal in a first direction and a second state in which it propagates a signal in a second direction, an addressable latch means having n outputs connected to the ports respectively for establishing the state of each port, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), and a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input.</p>
    <p num="3">A known port switch is described in U.S. Pat. No. 5,751,764, the disclosure of which is hereby incorporated by reference herein.</p>
    <p num="4">
      A television post production facility comprises an ensemble of machines of various types, such as editors, digital video effects devices and video tape recorders (VTRs).
      <br/>
      During an editing session, the producer employs an editor to control the operations (playback, record, etc.) performed by the other machines to produce a final master tape.
      <br/>
      A first video tape recorder may be controlled by the editor when recording source material, and when dubbing the recorded material to a second VTR, the first VTR may control operation of the second VTR.
    </p>
    <p num="5">
      Each machine may have an RS-422 communication port for transmitting and receiving messages relating to operation of the machine.
      <br/>
      RS-422 specifies a 9-pin connection and defines a port that is active as being either controlled or controlling.
      <br/>
      A controlling port receives on pins 2 and 7 and transmits on pins 3 and 8 whereas a controlled port receives on pins 3 and 8 and transmits on pins 2 and 7.
      <br/>
      When a controlling port is connected to a controlled port, forward messages are transmitted from the controlling port to the controlled port on pins 3 and 8 and reverse messages are transmitted from the controlled port to the controlling port on pins 2 and 7.
      <br/>
      Ports of the same type are not connected together.
    </p>
    <p num="6">
      In a given post production facility, several editing sessions, each requiring use of an editor and two or more other machines, may be conducted at any given time, and during a given editing session, the producer might wish to add machines to, and drop machines from, the suite of machines that are being used in the session.
      <br/>
      In order to allow an ensemble of machines to be interconnected in a flexible fashion in different suites, without needing to swap cables whenever a change is desired, the RS-422 ports of the machines may be connected to respective ports of a port switch.
    </p>
    <p num="7">
      The suite might be composed of only two machines, in which case one machine, designated a source machine, transmits command messages over a forward path and the other machine, designated a destination machine, transmits response messages over a reverse path.
      <br/>
      The connection between the source machine and the destination machine is referred to as a non-distributed connection.
      <br/>
      More generally, however, the suite contains at least three machines.
      <br/>
      One source machine transmits command messages to two or more destination machines, which generate response messages.
      <br/>
      In order to prevent a collision of response messages, a single destination machine is designated as the responding machine and the response messages of the other destination machines are blocked.
      <br/>
      Such a connection is referred to as a distributed connection.
    </p>
    <p num="8">
      When a machine in a distributed connection is assigned to a new connection, it is necessary to ensure that all destination machines in the current connection, and not just the responding destination machine, are disconnected in order to avoid undesired operation.
      <br/>
      It is not possible to poll the destination machines, because the response messages from the non-responding destination machines are blocked.
      <br/>
      Therefore it is normal practice to keep track of the current configuration of the suite.
    </p>
    <p num="9">
      U.S. Pat. No. 5,751,764 discloses a method for controlling the ports of a port switch using forward and reverse memories, each having one addressable location for each port of the port switch.
      <br/>
      The contents of the forward memory for a given port indicate whether the port is in use and, if so, whether it is a source or a destination, i.e. whether the port is connected to a source machine or a destination machine, and the contents of the reverse memory for a given port indicate whether the destination is a responding destination or a non-responding destination.
      <br/>
      In order to break down a distributed connection involving a given source machine, it is necessary to check the connection status of every port of the port switch in order to identify all the destination machines that are connected to the source machine.
      <br/>
      This is done by scanning the entire contents of the reverse memory.
      <br/>
      Then, each connection is broken.
      <br/>
      The operation of checking the status of each port is time consuming and imposes restrictions on the speed at which the port switch can be reconfigured.
      <br/>
      In some types of operation, it may be desirable to select a port for only a very short interval, for example a few frames of video material, and then release the port so that the associated machine will be available to other suites.
      <br/>
      This requires that it be possible to reconfigure the port switch at very rapidly, sometimes in as short a time as one vertical interval of a video signal (16.67 ms in the case of signals in the NTSC format).
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="10">According to a first aspect of the present invention there is provided a method of operating a port switch including n bidirectional communication ports, where n&gt;2, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), and a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input, the method comprising creating a source lookup table containing, for each port, an entry specifying the router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying the router output that is connected to that port, and establishing forward and reverse connections between a uth port (1&lt;=u&lt;=n) and a vth port (1&lt;=v&lt;=n) by addressing the source lookup table with addresses associated with the uth and vth ports and reading respective router inputs, addressing the destination lookup table with addresses associated with the uth and vth ports and reading respective router outputs, creating a matrix image data structure containing entries specifying at least the router inputs for the uth and vth ports and the router outputs for the uth and vth ports, and utilizing the router input and router output entries in the matrix image data structure to refresh the addressable register means.</p>
    <p num="11">According to a second aspect of the present invention there is provided a method of operating a port switch including n bidirectional I/O communication ports, where n&gt;2, each port having at least a first state in which it propagates a signal in a first direction and a second state in which it propagates a signal in a second direction, an addressable latch means having n outputs connected to the ports respectively for establishing the state of each port, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), and a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input, the method comprising creating a source lookup table containing, for each port, an entry specifying the router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying the router output that is connected to that port, and establishing a connection between a uth port (1&lt;=u&lt;=n) in a first operating state and a vth port (1&lt;=v&lt;=n) in a second operating state by addressing the source lookup table with an address associated with the uth port and reading a router input, addressing the destination lookup table with an address associated with the destination port and reading a router output, creating a matrix image data structure containing, for the uth port, entries specifying at least the router input for the uth port, the first operating state, and the router output connected to the vth port, and, for the vth port, entries specifying at least the router input for the vth port, the second operating state, and the router output connected to the uth port, and utilizing the operating state entries in the matrix image data structure for the uth and vth ports to refresh the addressable latch means and utilizing the router input and router output entries in the matrix image data structure for the uth and vth ports to refresh the addressable register means.</p>
    <p num="12">According to a third aspect of the present invention there is provided a method of operating a port switch including a plurality of communication ports and a router including an addressable register which can be loaded with data defining a connection between two of said ports for connecting those ports, the method comprising establishing a new connection within a specified time interval by inputting a value specifying a first port, inputting a value specifying a second port, specifying a time interval, creating a data structure containing at least an address for the first port, an address for the second port and the specified time value, measuring lapse of time toward start of the specified time interval, before start of the specified time interval, transferring data from the data structure to a refresh memory means, during the specified time interval, refreshing the addressable register with the contents of the refresh memory means.</p>
    <p num="13">According to a fourth aspect of the present invention there is provided a method of operating a port switch including a plurality of communication ports and a router including an addressable register which can be loaded with data defining a connection between two of said ports for connecting those ports, comprising creating a source lookup table containing, for each port, an entry specifying a router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying a router output that is connected to that port, establishing a connection between a source port and a destination port by addressing the source lookup table with an address associated with the source port, addressing the destination lookup table with an address associated with the destination port, inputting a time stamp value specifying start of a time interval, creating a matrix image data structure containing, for the source port, entries specifying at least the router input for the source port, the state of the port when a pending connection is made, the router output for the destination port, and the time stamp, before the start of the time interval specified by the time stamp value, transferring data from the matrix image to a matrix refresh memory means, and during said time interval, refreshing the crosspoint register with the input and output data from the matrix image.</p>
    <p num="14">According to a fifth aspect of the present invention there is provided a port switch including n bidirectional communication ports, where n&gt;2, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input, and a controller programmed to operate the port switch in accordance with a method which comprises creating a source lookup table containing, for each port, an entry specifying the router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying the router output that is connected to that port, and establishing forward and reverse connections between a uth port (1&lt;=u&lt;=n) and a vth port (1&lt;=v&lt;=n) by addressing the source lookup table with addresses associated with the uth and vth ports and reading respective router inputs, addressing the destination lookup table with addresses associated with the uth and vth ports and reading respective router outputs, creating a matrix image data structure containing entries specifying at least the router inputs for the uth and vth ports and the router outputs for the uth and vth ports, and utilizing the router input and router output entries in the matrix image data structure to refresh the addressable register means.</p>
    <p num="15">According to a sixth aspect of the present invention there is provided a port switch including n bidirectional I/O communication ports, where n&gt;2, each port having at least a first state in which it propagates a signal in a first direction and a second state in which it propagates a signal in a second direction, an addressable latch means having n outputs connected to the ports respectively for establishing the state of each port, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input, and a controller programmed to operate the port switch in accordance with a method comprising creating a source lookup table containing, for each port, an entry specifying the router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying the router output that is connected to that port, and establishing a connection between a uth port (1&lt;=u&lt;=n) in a first operating state and a vth port (1&lt;=v&lt;=n) in a second operating state by addressing the source lookup table with an address associated with the uth port and reading a router input, addressing the destination lookup table with an address associated with the destination port and reading a router output, creating a matrix image data structure containing, for the uth port, entries specifying at least the router input for the uth port, the first operating state, and the router output connected to the vth port, and, for the vth port, entries specifying at least the router input for the vth port, the second operating state, and the router output connected to the uth port, and utilizing the operating state entries in the matrix image data structure for the uth and vth ports to refresh the addressable latch means and utilizing the router input and router output entries in the matrix image data structure for the uth and vth ports to refresh the addressable register means.</p>
    <p num="16">According to a seventh aspect of the present invention there is provided a port switch including a plurality of communication ports, a router including an addressable register which can be loaded with data defining a connection between two of said ports for connecting those ports, and a controller programmed to operate the port switch in accordance with a method which comprises establishing a new connection at a specified time by inputting a value specifying a first port, inputting a value specifying a second port, specifying a time interval, creating a data structure containing at least an address for the first port, an address for the second port and the specified time value, measuring lapse of time toward start of the specified time interval, before start of the specified time interval, transferring the contents of the data structure to a refresh memory means, during the specified time interval, refreshing the addressable register with the contents of the refresh memory means.</p>
    <p num="17">According to an eighth aspect of the present invention there is provided a port switch including a plurality of communication ports, a router including an addressable register which can be loaded with data defining a connection between two of said ports for connecting those ports, an a controller programmed to operate the port switch by a method comprising creating a source lookup table containing, for each port, an entry specifying a router input that is connected to that port, destination lookup table containing, for each port, an entry specifying a router output that is connected to that port, establishing a connection between a source port and a destination port by addressing the source lookup table with an address associated with the source port, addressing the destination lookup table with an address associated with the destination port, inputting a time stamp value specifying start of a time interval, creating a matrix image data structure containing, for the source port, entries specifying at least the router input for the source port, the state of the port when a pending connection is made, the router output for the destination port, and the time stamp, before the start of the time interval specified by the time stamp value, transferring the contents of the matrix image to a matrix refresh memory means, and during said time interval, refreshing the crosspoint register with the input and output data from the matrix image.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="18">
      For a better understanding of the invention, and to show how the same may be carried into effect, reference will now be made, by way of example, to the accompanying drawings, in which
      <br/>
      FIG. 1 is a block diagram of a port switch in accordance with the present invention, including an operator interface and an automation system,
      <br/>
      FIG. 2 is a more detailed block diagram illustrating crosspoint boards and I/O boards of the port switch,
      <br/>
      FIG. 3 illustrates the organization of lookup tables and a matrix image array in the automation system, and
      <br/>
      FIG. 4 illustrates schematically interaction between the matrix image array and refresh RAM on the crosspoint boards and the I/O boards.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="19">
      The illustrated port switch is constructed on an external backplane 10, an internal backplane 14, four I/O boards 18 and four crosspoint boards 22.
      <br/>
      The external backplane carries a rectangular array of 256 9-pin D connectors 24 for connection to respective machines 26, and edge connectors which are engaged by the four I/O boards.
      <br/>
      The external backplane provides an electrical interface between the D connectors and the I/O boards.
      <br/>
      The internal backplane carries a first set of edge connectors which are engaged by the I/O boards and a second set of edge connectors which are engaged by the crosspoint boards.
      <br/>
      The internal backplane provides an electrical interface between the I/O boards and the crosspoint boards.
    </p>
    <p num="20">
      The port switch operates under control of an operator interface 54 which is used to input commands specifying a connection that is to be made and the time at which the connection is to be made relative to a reference time.
      <br/>
      The operator interface also provides status messages to the operator.
    </p>
    <p num="21">
      The operator commands are supplied by the operator interface 54 to an automation system 58 which issues commands to the port switch for executing the operator commands in the desired sequence and at the proper times.
      <br/>
      The automation system establishes a queue of tasks that are to be performed over an interval of up to about 18 minutes.
    </p>
    <p num="22">
      The automation system specifies tasks at time increments that are integer multiples of the vertical interval of the relevant video standard.
      <br/>
      It will be assumed that the relevant video standard is NTSC, in which case the vertical interval is about 16.67 ms. The automation system and the port switch operate under control of a common clock and are synchronized by reference to a count of vertical intervals.
      <br/>
      The automation system and the port switch keep track of the current frame number in a sequence and the automation system provides commands to the port switch to execute various tasks during specified vertical blanking intervals in the future.
    </p>
    <p num="23">
      Referring to FIG. 2, each crosspoint board 22 carries four crosspoint chips 28.
      <br/>
      Each crosspoint chip 28 includes a crosspoint matrix having 64 inputs and 64 outputs.
      <br/>
      The crosspoint chip also includes a staging RAM or control register which has 6-bit address A5-A0 and is able to store 7-bit data words D6-D0.
      <br/>
      Each address A5-A0 specifies an output of the matrix.
      <br/>
      The lower six bits of the data word D6-D0 can specify an input.
      <br/>
      If the bit D6 stored at a given address is 0, the output specified by that address is enabled and the input specified by the bits D5-D0 is connected to that output; and if the bit D6 is 1 and the bit D4 is 0, the output is placed in a high impedance state.
      <br/>
      Such crosspoint chips are commercially available.
    </p>
    <p num="24">
      On a given crosspoint board, the 64 outputs of the four matrixes are bussed together so that the four 64 * 64 matrixes function as a 256 * 64 crosspoint matrix.
      <br/>
      The four matrixes on each board each have 256 inputs and the 256 inputs are bussed together board-by-board.
      <br/>
      Consequently, the 16 crosspoint chips on the four crosspoint boards form a 256 * 256 crosspoint matrix.
      <br/>
      The 256 * 256 crosspoint matrix is referred to herein as the router matrix.
    </p>
    <p num="25">
      The port switch also includes 256 bidirectional serial communication ports 30 mounted on the four I/O boards in groups of 64.
      <br/>
      One of the ports 30 is illustrated in FIG. 2.
      <br/>
      Each port 30 includes two receivers 34A, 34B having a common output node 36 connected to an input of the router matrix and two transmitters 38A, 38B having a common input node 40 connected to an output of the router matrix.
      <br/>
      Each port can operate either as a controlling port or as a controlled port.
      <br/>
      In the controlling state of the port the receiver 34A and the transmitter 38B are enabled and the receiver 34B and transmitter 38A are disabled, and vice versa in the controlled state.
      <br/>
      The receiver 34A has its inverting and non-inverting inputs connected to pins 2 and 7 respectively of one of the 256 D connectors 24 mounted on the external backplane 10 and the transmitter 38B has its inverting and non-inverting outputs connected to pins 8 and 3 respectively.
      <br/>
      The receiver 34B has its inverting and non-inverting inputs connected to pins 8 and 3 and the transmitter 38A has its inverting and non-inverting inputs connected to pins 2 and 7.
      <br/>
      Each port 30 is thus associated with a single connector 24, a single router matrix input and a single router matrix output.
    </p>
    <p num="26">
      Each port 30 has two control terminals ENA and ENB.
      <br/>
      If ENA and ENB are both 0, the port is in a high impedance state (tristate) and is not in use.
      <br/>
      If ENA is 0 and ENB is 1, the port is controlling.
      <br/>
      If ENA is 1 and ENB is 0, the port is controlled.
      <br/>
      The state in which terminals ENA and ENB are both 1 is not allowed.
      <br/>
      Each terminal ENA or ENB of a given port can be specified using a logical address in the range 0-511.
      <br/>
      For a given port, the logical address of the terminal ENB is one greater than the logical address of the terminal ENA.
      <br/>
      Each port 30 can be considered to have a logical address equal to one-half the logical address of the terminal ENA.
    </p>
    <p num="27">
      The 256 D connectors 24 are mounted on the external backplane in a rectangular array.
      <br/>
      In order to facilitate identification of the connectors, each connector is labelled with a number in the range 1-256, the numbers progressing sequentially in rows and columns.
    </p>
    <p num="28">
      The ports are assigned respective numbers in the range 0-255 in accordance with the connectors to which they are respectively connected, i.e. ports 0-255 are connected to connectors 1-256 respectively.
      <br/>
      The 0-based number assigned to a port can be considered to be a physical address of the port.
    </p>
    <p num="29">
      Each router matrix input can be specified by a logical address in the range 0-255, and similarly each router matrix output can be specified by a logical address in the range 0-255.
      <br/>
      It would be convenient if the logical address of a port were the same as its physical address, the common output nodes of ports 0-255 were connected to router matrix inputs 0-255 respectively and the common input nodes of ports 0-255 were connected to router matrix outputs 0-255 respectively, but practical constraints, particularly in the routing of conductor runs on the circuit boards, may prevent connector i=1 (1-based) being connected to the port having the logical address i (0-based), and the common input and output nodes of the port having the logical address i being connected to the router matrix output i and the router matrix input i. For example, port 3 (logical) might be connected to connector 1, router matrix input 5 and router matrix output 4.
      <br/>
      For a given port there is, however, a set of constant offsets (one or more of which might be zero) between the port's logical address, the port's number, and the addresses of the router matrix input and output to which the port's common output and common input nodes are connected.
    </p>
    <p num="30">
      The four crosspoint boards 22 carry respective segments of a matrix refresh RAM 46 (FIG. 4).
      <br/>
      Each segment stores one byte of data for each output of each of the four crosspoint chips 28 on the crosspoint board, i.e. four bytes for each of the 64 bussed outputs of the crosspoint board.
    </p>
    <p num="31">
      At the beginning of the vertical blanking interval of a video signal, the automation system asserts a bank load signal BNKLD in response to the vertical sync signal.
      <br/>
      The bank load signal BNKLD is applied to the crosspoint chips 28 and causes the data currently stored in the crosspoint control registers of the crosspoint chips 28 to be copied to the crosspoints.
      <br/>
      The connection defined by the contents of the control registers takes effect and remains in effect until the bank load signal BNKLD is next asserted.
      <br/>
      The copying of data from the control registers to the crosspoints takes place very rapidly, typically in less than about 100  MU s.
    </p>
    <p num="32">After the data has been copied from the control registers to the crosspoints, the automation system scans the matrix refresh RAM with a 10-bit address and writes the values stored in the matrix refresh RAM to the control registers of the matrix chips 28 in preparation for the next assertion of the bank load signal BNKLD.</p>
    <p num="33">
      The address spaces for the four segments of the matrix refresh RAM 46 are contiguous.
      <br/>
      Bytes 0-63 from the refresh RAM are used to refresh the control register of chip 0 on crosspoint board 0, bytes 64-128 are used to refresh the control register of chip 1 on crosspoint board 0, and so on, bytes 960-1023 being used to refresh the control register of chip 3 on crosspoint board 3.
    </p>
    <p num="34">
      In a practical implementation, the address space of the control registers is not contiguous and there is a gap of 64 addresses between the address ranges for each of the control registers of the crosspoint chips 28.
      <br/>
      Accordingly, when the control register for chip 0 has been refreshed and the contents of the matrix refresh RAM for chip 1 have been read, the address used to address the control registers must be increased by 64 for refreshing the control register of chip 1.
      <br/>
      This is accomplished by including an extra bit in the addresses generated by the automation system.
      <br/>
      Thus, the address generator of the automation system generates an 11-bit address A10-A0.
      <br/>
      The automation system uses bits A10-A7, A5-A0 to address the matrix refresh RAM and uses bits A10 and A9 to select one of the four crosspoint boards, bits A8 and A7 to select one of the four chips on the selected board, and bits A5-A0 to select one of the 64 outputs.
      <br/>
      The sequence of addresses runs from 0 to 2047 but only alternate sets of 64 addresses are used to address the matrix refresh RAM and the control registers of the crosspoint chips 28.
    </p>
    <p num="35">
      The 8 data bits read from an address of the matrix refresh RAM are loaded into the corresponding address of the router's control registers.
      <br/>
      Bit D7 is zero.
      <br/>
      If bit D6 also is zero, bits D5-D0 select one of the 64 inputs of the selected chip on the selected board.
      <br/>
      If bit D6 is 1, the output specified by the address A5-A0 is held in a high impedance state.
      <br/>
      In the commercially available crosspoint chip that is used in the practical implementation of the invention, it is necessary for bit D4 to be zero as well as bit D6 to be 1 in order to place the output in the high impedance state.
    </p>
    <p num="36">
      A given combination of the address A10-A7, A5-A0 specifies an output of the router matrix and a given set of data bits D5-D0 specifies an input of the router matrix (assuming that D6 is zero).
      <br/>
      When the data bits D5-D0 are loaded into the control register address specified by the address A10-A7, A5-A0, the router matrix provides a connection between the router input and the router output.
    </p>
    <p num="37">
      Since each crosspoint chip output is bussed with equivalent outputs of the three other crosspoint chips on the same crosspoint board 22, it is necessary to ensure that if, for example, the address A10-A7, A5-A0 selects output 0 of chip 0 on board 0, output 0 of each of chips 1, 2 and 3 on board 0 will be placed in the high impedance state.
      <br/>
      This can be accomplished by writing data bits 1X0XXXX to each of the other addresses A10-A9, X, X, A5-A0, so that bits D6 and D4 at each of addresses 64, 128 and 192 on board 0 are 1 and 0 respectively.
    </p>
    <p num="38">
      Each I/O board 18 carries two 64 * 64 port configuration crosspoint chips 42, which are identical to the chips 28 on the crosspoint boards 22 but function as 64 bit addressable latches.
      <br/>
      Each chip 42 controls the states of 32 of the ports on the I/O board.
      <br/>
      Thus, the 64 outputs of chip 0 are paired as EN(0-31)A and EN(0-31)B and are connected to the control terminals of the associated ports 0-31 (logical) respectively.
      <br/>
      The 64 outputs of each of the other seven chips 42 are similarly arranged for controlling the states of the other ports.
    </p>
    <p num="39">
      The four I/O boards 18 carry respective segments of a port configuration refresh RAM.
      <br/>
      Each segment stores 2 bytes of data for each port on the I/O board.
    </p>
    <p num="40">
      The procedure for refreshing the control registers of the crosspoint chips 42 using the contents of the port configuration refresh RAM corresponds to the procedure for refreshing the control registers of the crosspoint chips 28 using the contents of the matrix refresh RAM.
      <br/>
      At the beginning of the vertical blanking interval, the automation system applies the bank load signal BNKLD to the crosspoint chips 42 and causes the data currently stored in the crosspoint control registers of the crosspoint chips 42 to be copied to the crosspoints.
      <br/>
      The connection defined by the contents of the control registers takes effect and remains in effect until the bank load signal BNKLD is next asserted.
    </p>
    <p num="41">After the data has been copied from the control registers to the crosspoints of the chips 42, the automation system scans the port configuration refresh RAM with a 9-bit address and writes the values stored in the port configuration refresh RAM to the control registers of the crosspoint chips 42 in preparation for the next assertion of the bank load signal BNKLD.</p>
    <p num="42">
      The address spaces for the four segments of the port configuration refresh RAM are contiguous.
      <br/>
      Bytes 0-63 from the refresh RAM are used to refresh the control register of chip 0 on I/O board 0, bytes 64-128 are used to refresh the control register of chip 1 on I/O board 0, and so on, bytes 448-511 being used to refresh the control register of chip 1 on I/O board 3.
    </p>
    <p num="43">
      In a practical implementation, the address space of the control registers of the crosspoint chips 42 is not contiguous and there is a gap of 64 addresses between the address ranges for each of the control registers of the crosspoint chips 42.
      <br/>
      Accordingly, when the control register for chip 0 has been refreshed and the contents of the port configuration refresh RAM for chip 1 have been read, the address used to address the control registers must be increased by 64 for refreshing the control register of chip 1.
      <br/>
      This is accomplished by including an extra bit in the addresses generated by the automation system.
      <br/>
      Thus, the address generator of the automation system generates an 10-bit address A9-A0.
      <br/>
      The automation system uses bits A9-A7, A5-A0 to address the port configuration refresh RAM and uses bits A9 and A8 to select one of the four I/O boards, bit A7 to select one of the two chips on the selected board, and bits A5-A0 to select one of the 64 outputs.
      <br/>
      The sequence of addresses runs from 0 to 1023 but only alternate sets of 64 addresses are used to address the port configuration refresh RAM and the control registers of the crosspoint chips.
    </p>
    <p num="44">
      The 512 bytes read from the port configuration refresh RAM are loaded into the crosspoint chips' control registers.
      <br/>
      Bit D7 of each byte is zero.
    </p>
    <p num="45">
      Referring to FIG. 3, the automation system includes three flash lookup tables storing a destination map 64, a source map 68 and a port configuration map 72.
      <br/>
      Each map is addressed by an 8-bit word which specifies a port address (physical) and returns a 16-bit word.
      <br/>
      The source map specifies the router matrix input to which the common output node of the port is connected and the destination map specifies the router matrix output to which the common input node of the port is connected.
      <br/>
      Thus, bits 5-0 of the source map contain the data bits D5-D0 and bits 15 and 14 contain the chip select bits A7-A6.
      <br/>
      Bits 5--0 of the destination map contain the address bits A5-A0 and bits 9 and 8 contain the board select bits A9-A8.
    </p>
    <p num="46">The word stored in the port configuration map specifies the logical address of the port.</p>
    <p num="47">It will therefore be seen that the flash look-up tables implicitly contain the offsets between the port's physical address and the port's logical address and the addresses of the router matrix input and output connected to the common output and input nodes respectively of the port.</p>
    <p num="48">
      The automation system includes a random access memory which stores a matrix image array 76.
      <br/>
      The matrix image array is a data structure containing one group of 16 bytes for each of the 256 ports.
      <br/>
      The matrix image contains a complete description of the state of the port switch.
      <br/>
      In each port group:
    </p>
    <p num="49">Byte 0 specifies the current port (physical) (the port that is currently connected to the port to which the group relates).</p>
    <p num="50">Byte 1 specifies the pending port (physical) (the port that will be connected to the port to which the group relates after a time stamp value has been counted down to zero).</p>
    <p num="51">Bytes 2 and 3 contain the time stamp high and low bytes respectively.</p>
    <p num="52">
      Byte 4 is the port tristate count down delay, which is the time (expressed in vertical intervals) after which the pending port will be configured for a new connection.
      <br/>
      The tristate countdown delay is generally uniform over all port groups and specifies the time for which the transmitter at the port will be held in a high impedance state after the current connection has been broken down, to ensure that the outputs are all in known state before the pending connection is made.
    </p>
    <p num="53">
      Byte 5 is port tristate configured delay, which is the time (measured in vertical intervals) for which the port remains in the high impedance state after a change in the connection involving the port.
      <br/>
      The tristate configured delay depends on the particular machine to which the port is connected, as will be explained in further detail below.
    </p>
    <p num="54">Bytes 6 and 7 are the high and low bytes respectively of the port configuration address, which is a 9-bit value specifying an address in the port configuration refresh RAM.</p>
    <p num="55">Bytes 8 and 9 are the port configuration values ENA and ENB respectively for the pending connection.</p>
    <p num="56">Byte 10 contains the board select bits A9-A8 for the pending connection.</p>
    <p num="57">Byte 11 contains the chip select bits A7-A6 and the register address A5-A0 for the pending connection.</p>
    <p num="58">Byte 12 contains the data bits D5-D0 for the pending connection.</p>
    <p num="59">
      Byte 13 contains various flags relating to the pending and current connections.
      <br/>
      The nature and function of the flags are not necessary to an understanding of the invention.
    </p>
    <p num="60">
      Bytes 14 and 15 are the high and low bytes respectively specifying the address of the first entry in a linked list data structure.
      <br/>
      The function of the linked list data structure will be described below in connection with distributed connections.
    </p>
    <p num="61">
      During an initialization sequence, the automation system addresses the port configuration lookup table with the port number and writes the port address into bytes 6 and 7 of the port group for that port.
      <br/>
      The operator supplies a port tristate countdown delay and the automation system writes this value into byte 4 of each port group.
      <br/>
      The operator may also supply a port tristate configured delay for one or more of the ports.
      <br/>
      The value of the port tristate configured delay depends on the machine connected to the port, and the automation system writes this value into byte 5 of the port group.
    </p>
    <p num="62">
      The port tristate configured delay is the time during which the port to which a machine is connected presents a high impedance to the machine following removal of a first connection and before a new connection is made.
      <br/>
      Certain older machines, particularly VTRs, when switching from one controlling machine to another, will enter an initialization sequence before being able to respond to commands, such as for record or play back.
      <br/>
      During the initialization sequence, the VTR may provide information regarding its operating characteristics, such as ballistic information, to the controlling machine so that this information will be available to the controlling machine.
      <br/>
      The port tristate configured delay is sufficient to ensure that the VTR will have completed its initialization sequence before it receives operating commands.
    </p>
    <p num="63">
      The manner of operation of the port switch will now be described with reference to a succession of connections.
      <br/>
      It will be assumed for the purpose of this discussion that the port switch has been initialized but that no connections have yet been made.
      <br/>
      Bytes 0 and 1 of each port group are set to the port value.
      <br/>
      Consequently, the common output node of each port is connected to the common input node of the same port and each port is therefore out of service.
      <br/>
      Bytes 2-5 are 0, bytes 8 and 9 are 4040H, bytes 10-12 are don't care, and bytes 13-15 are 0.
    </p>
    <p num="64">
      In the following discussion, port numbers are the 1-based physical port addresses unless the context indicates otherwise.
      <br/>
      Thus, port 0, for example, is connected to connector 1.
      <br/>
      It should be recognized, however, that in practice the operator will specify connections using 1-based numbers to identify the connectors to which particular machines are connected.
    </p>
    <p num="65">Connection 1--Port 0 to port 1 with reverse connection</p>
    <p num="66">
      Assuming that port 0 is connected to the source machine and port 1 is connected to the destination machine, the operator defines the pending connection by specifying the source machine as 0 and the destination machine as 1 and also specifies the time at which the connection is to be made.
      <br/>
      In this case, the forward connection is port 0 to port 1 and the reverse connection is port 1 to port 0.
      <br/>
      The operator interface supplies commands describing the forward and reverse connections to the automation system.
    </p>
    <p num="67">
      Generally, the port of the source machine will be a controlling port and the port of the destination machine will be a controlled port.
      <br/>
      Consequently, the port connected to the source machine must be configured as a controlled port and the port connected to the destination machine must be configured as a controlling port.
    </p>
    <p num="68">
      The automation system reads bytes 14 and 15 from the port groups 0 and 1 (the port groups for connectors 1 and 2).
      <br/>
      Since no previous connection has been made, these values are zero and do not require further action on the part of the automation system.
    </p>
    <p num="69">
      The automation system loads the port tristate count down delay into bytes 4 and 5 of port groups 0 and 1.
      <br/>
      The automation system also loads the port tristate configured delay for the machine connected to connector 1 into byte 5 of port group 0 and the port tristate configured delay for the machine connected to connector 1 into byte 5 of port group 1.
    </p>
    <p num="70">
      The automation system addresses the source and destination maps for the forward connection using the source address (0) and the destination address (1) respectively.
      <br/>
      The automation system writes the upper byte of the word read from the destination map to byte 10 of port group 0 and writes the lower byte of the word read from the source map to byte 12 of port group 0.
      <br/>
      The automation system ORs the lower byte of the word read from the destination map and the upper byte of the word read from the source map and writes the result into byte 11 of port group 0.
      <br/>
      The automation system writes the port address (physical) for the destination into byte 1 of port group 0.
      <br/>
      The automation system loads the value 4060H into bytes 8 and 9 and the time stamp value into bytes 2 and 3 of port group 0.
    </p>
    <p num="71">
      The automation system then uses the destination address (1) and the source address (0) to address the source and destination maps respectively.
      <br/>
      The automation system writes the upper byte of the word read from the destination map to byte 10 of port group 1 and writes the lower byte of the word read from the source map to byte 12 of port group 1.
      <br/>
      The automation system ORs the lower byte of the word read from the destination map and the upper byte of the word read from the source map.
      <br/>
      The automation system writes the port address (physical) for the source connector into byte 1 of port group 1.
      <br/>
      The automation system loads the value 6040H into bytes 8 and 9 and the time stamp value into bytes 2 and 3 of port group 1.
    </p>
    <p num="72">
      The foregoing sequence of operations sets up the port switch to make the desired connection at the time specified by the time stamp value.
      <br/>
      Using commercially available components and known operating techniques, it is possible to carry out all the necessary operations within the active part of one vertical interval of the NTSC signal, so that the values are available at the start of the vertical blanking interval.
    </p>
    <p num="73">
      At the end of the active part of each vertical interval, the automation system decrements the time stamp value stored in bytes 2 and 3 of each port group.
      <br/>
      When the time stamp stored in bytes 2 and 3 of a given port group reaches zero, the automation system reads bytes 10-12 of that group.
      <br/>
      The automation system adds a bit D6 (equal to zero) to D5-D0 and uses bytes 10 and 11 to generate an address for loading D6-D0 into the matrix map refresh RAM.
      <br/>
      The automation system also uses bytes 10 and 11 to generate three additional addresses, which specify the three addresses in the matrix map refresh RAM that are in the same segment as the address defined by bytes 10 and 11 and are offset from that address by an integer multiple of 64, and loads 1x0xxxx into those addresses.
      <br/>
      For example, if the chip select bits A7, A6 are 1, 0, the automation system writes the bits D6-D0 to the address (A9, A8, 1, 0, A5-A0) and writes 1x0xxxx to each of the addresses (A9, A8, 0, 0, A5-A0), (A9, A8, 0, 1, A5-A0) and (A9, A8, 1, 1, A5-A0).
      <br/>
      The automation system updates the control registers of the chips 28 using the contents of the matrix refresh RAM and on the next occurrence of the signal BNKLD, the contents of the control registers are copied to the matrixes of the chips 28 and the forward and reverse connections are made.
    </p>
    <p num="74">
      After decrementing the time stamp to zero, the automation system then decrements the tristate count down delay stored in byte 4.
      <br/>
      When the tristate count down delay stored in byte 4 of a given port group reaches zero, the automation system copies byte 5 (which may be zero) into byte 4 and then continues to decrement byte 4.
      <br/>
      When byte 4 of a given port group reaches zero, the automation system reads bytes 6-9 of that group.
      <br/>
      The automation system uses bytes 6 and 7 to generate an address for loading bytes 8 and 9 into the port configuration refresh RAM and updates the port configuration refresh RAM accordingly.
      <br/>
      When the signal BNKLD is next asserted, the data stored in the control registers of the crosspoint chips 42 is copied to the crosspoints and the ports connected to the designated inputs and outputs of the router matrix are enabled in the proper respective states.
    </p>
    <p num="75">
      The crosspoint chip 42 has only two active inputs, one of which is at logic 0 and the other at logic 1.
      <br/>
      D5-D0 equal to 40H selects the input at logic 0 and D5-D0 equal to 60H selects the input at logic 1.
    </p>
    <p num="76">The importance of the tristate count down delay will be discussed below.</p>
    <p num="77">The automation system updates the matrix image port groups for ports 0 and 1 by copying the value from byte 1 to byte 0 and clearing bytes 0 and 8-12.</p>
    <p num="78">
      At intervals of 16.67 ms, the automation system refreshes the router control registers and the I/O control registers using the contents of the matrix refresh RAM and the port configuration refresh RAM.
      <br/>
      By refreshing the control registers at the vertical rate, it is ensured that the delay before the registers are refreshed is no more than one vertical interval (16.67 ms).
      <br/>
      Thus, for example, if a crosspoint board is found to be defective and is replaced, the maximum delay between installing the replacement board and configuring the replacement board to reflect the matrix image is 16.67 ms.
    </p>
    <p num="79">Connection 2--port 10 to ports 11 and 12 with reverse connection from port 11 to port 10</p>
    <p num="80">
      The operator defines the pending connection by specifying the source machine as 10, the responding destination machine as 11 and the non-responding destination machine as 12.
      <br/>
      The operator also specifies the time at which the connection is to be made.
    </p>
    <p num="81">Port 10 must be configured as a controlled port and ports 11 and 12 must be configured as controlling ports, with the reverse connection from port 12 to the router input being blocked.</p>
    <p num="82">
      The operations necessary to make connection 2 are the same as those needed for connection 1 except to the extent that connection 2 is a distributed connection.
      <br/>
      Therefore, only the differences necessitated by the fact that connection 2 is a distributed connection will be discussed.
    </p>
    <p num="83">
      Bytes 10-12 of the port group for port 10 are constructed using port 11 as the destination and without reference to port 12.
      <br/>
      Bytes 10-12 of the port group for port 11 are constructed using port 10 as the destination and without reference to port 12.
      <br/>
      Bytes 10-12 of the port group for port 12 are constructed using port 12 as the source and port 10 as the destination and without reference to port 11.
      <br/>
      Port 12 must be configured as a controlling port and therefore the automation system writes 6040H into bytes 8 and 9 of the port group for port 12.
    </p>
    <p num="84">
      In the event that the operator instructs the port switch to make a distributed connection, the automation system constructs a linked list data structure which identifies the destination ports 30 of the port switch, and hence the controlled ports of the machines connected to the port switch.
      <br/>
      Each entry in the linked list data structure has three bytes.
      <br/>
      The first byte of each entry is the number of a destination port and the other two bytes are the high and low bytes of the address of the next entry in the data structure.
      <br/>
      If this address is zero, there are no other entries in the data structure.
      <br/>
      The address of the first entry in the data structure is stored in bytes 14 and 15 of the port group for the source port of the port switch.
    </p>
    <p num="85">
      In the case of connection 2, the automation system determines that ports 11 and 12 are destination ports.
      <br/>
      The automation system therefore constructs a linked list data structure in which the first entry contains the 0 based number of one of the ports, e.g. 11, and the 2-byte address of the second entry in the data structure.
      <br/>
      The second entry contains the value 12 in the first byte.
      <br/>
      Since there are no other destination ports in the distributed connection, the second and third bytes are zero.
      <br/>
      The automation system stores the address of the first entry in the data structure in bytes 14 and 15 of the port group for the source port, i.e. port 10.
    </p>
    <p num="86">Connection 3--port 0 to port 2 without reverse path</p>
    <p num="87">
      The explicit statement that there is to be no reverse path implies that connection 1 is not broken.
      <br/>
      Thus, connection 3 changes connection 1 to a distributed connection.
      <br/>
      Port 0 remains the source, port 1 remains the responding destination and port 2 is a non-responding destination.
    </p>
    <p num="88">Immediately before the command for connection 3 is issued, byte 0 of port group 0 contains the value 1 (for the connection to port 1) and byte 1 contains the value 0, indicating that no pending connection has been defined.</p>
    <p num="89">
      The automation system reads bytes 14 and 15 from the port groups for connectors 0, 1 and 2.
      <br/>
      Since no previous distributed connection has been made involving these ports, these values are zero and do not require further action on the part of the automation system.
    </p>
    <p num="90">The procedure for making the distributed connection of connectors 0, 1 and 2 corresponds to that used in Connection 2 for connectors 10, 11 and 12.</p>
    <p num="91">Connection 4--port 3 to port 2 with reverse path</p>
    <p num="92">The explicit statement that there is to be a reverse path indicates that the current connection of port 2, i.e. Connection 3, is to be undone.</p>
    <p num="93">
      The automation system reads bytes 14 and 15 from each port group involved in the new connection and, in the event that the address stored in bytes 14 and 15 of any port group is not zero, the automation system tracks through the linked lists addressed by the matrix image.
      <br/>
      For each port found in the linked list, the automation system writes values of ENA and ENB into the respective port group for disconnecting the respective ports.
      <br/>
      In this case, the automation system determines from bytes 14 and 15 of port group 0 show that only ports 1 and 2 are destination ports.
    </p>
    <p num="94">
      The automation system breaks down the existing connection of ports 0, 1 and 2 by writing ENA and ENB value of 40H to bytes 8 and 9 of port groups 0, 1 and 2.
      <br/>
      During the active part of the next vertical interval, the values of ENA and ENB are transferred to the appropriate addresses in the port configuration refresh RAM.
      <br/>
      During the next blanking interval, the contents of the port configuration refresh RAM are used to refresh the control registers of the I/O matrix chips and ports 0, 1 and 2 are placed in the high-impedance state.
      <br/>
      The signal paths through the router remain intact.
    </p>
    <p num="95">
      The tristate count down delay stored in byte 4 of the matrix image is the time between undoing the current connection and making the new connection.
      <br/>
      It ensures that the router outputs involved in the current connection are all in a known state before the pending connection is made.
    </p>
    <p num="96">The automation system is then able to make the new distributed connection in similar manner to the connection of ports 10, 11 and 12.</p>
    <p num="97">Connection 5--port 0 to port 1 without reverse path</p>
    <p num="98">By examining the port groups for ports 0 and 1, the automation system determines that ports 1 and 2 are not currently in a connection.</p>
    <p num="99">
      The procedure for making connection 5 is the same as for connection 1 except that the reverse connection from port 1 to port 0 is not made.
      <br/>
      Thus, port group 1 specifies that port 1 is controlling but the byte that is loaded into the I/O control register at the address for selecting port 0 (the return path) has D6 equal to 1 so that router output connected to the common input node of port 0 is in a high-impedance state.
    </p>
    <p num="100">Connection 6--port 0 to port 2 without reverse path</p>
    <p num="101">
      Since port 2 is to be connected to port 1, the current connection of port 2 to port 3 must be undone.
      <br/>
      Port 3 is therefore placed in the high-impedance state, in the manner discussed in connection with connection 2.
    </p>
    <p num="102">
      The connection of port 0 to port 1 is not affected.
      <br/>
      Both port 1 and port 2 are destination, and neither is a responding destination.
    </p>
    <p num="103">The automation system constructs a linked list data structure containing entries pertaining to ports 1 and 2 and stores the address of the first entry in bytes 14 and 15 of the port group for port 0.</p>
    <p num="104">
      Since the lookup tables relate the logical addresses of the ports and the logical addresses of the router inputs and outputs to the physical addresses of the ports, the operator can specify connections by reference to connector numbers and without knowing how the logical addresses of the ports relate to the connector numbers.
      <br/>
      Operation of the port switch is independent of scrambling of the connections between the connectors and the ports and is independent of any offset between the logical port addresses and the addresses of the router inputs and outputs.
    </p>
    <p num="105">
      It will be seen from the foregoing that the method of operation described above allows the port switch to execute a forward and reverse connection at a specified time in the future.
      <br/>
      It is not necessary to scan the entire contents of the matrix image or other memory in order to identify the destinations that are connected to a given source and break down an existing connection.
      <br/>
      On the contrary, the destinations can be identified rapidly by examining bytes 14 and 15 of the port group for the source.
    </p>
    <p num="106">
      It will be appreciated that the invention is not restricted to the particular embodiment that has been described, and that variations may be made therein without departing from the scope of the invention as defined in the appended claims and equivalents thereof.
      <br/>
      For example, although it is convenient to accommodate the possible offsets between the address for a port, the number of the connector associated with the port and the addresses of the router input and output nodes using the look-up tables, the invention is not restricted to this feature.
      <br/>
      By suitably routing conductor runs on the circuit boards, the offsets could be eliminated.
      <br/>
      Further, although the addressable latch is implemented using crosspoint matrix chips, this is for convenience and is not essential to the invention.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11.</claim-text>
      <claim-text>A port switch including n bidirectional communication ports, where n&gt;2, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input, and a controller programmed to operate the port switch in accordance with a method which comprises: creating a source lookup table containing, for each port, an entry specifying the router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying the router output that is connected to that port, and establishing forward and reverse connections between a uth port (1&lt;=u&lt;=n) and a vth port (1&lt;=v&lt;=n) by: - addressing the source lookup table with addresses associated with the uth and vth ports and reading respective router inputs, - addressing the destination lookup table with addresses associated with the uth and vth ports and reading respective router outputs, - creating a matrix image data structure containing entries specifying at least the router inputs for the uth and vth ports and the router outputs for the uth and vth ports, and - utilizing the router input and router output entries in the matrix image data structure to refresh the addressable register means.</claim-text>
      <claim-text>1. A method of operating a port switch including n bidirectional communication ports, where n&gt;2, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), and a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input, the method comprising:</claim-text>
      <claim-text>creating a source lookup table containing, for each port, an entry specifying the router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying the router output that is connected to that port, and establishing forward and reverse connections between a uth port (1&lt;=u&lt;=n) and a vth port (1&lt;=v&lt;=n) by:</claim-text>
      <claim-text>- addressing the source lookup table with addresses associated with the uth and vth ports and reading respective router inputs, - addressing the destination lookup table with addresses associated with the uth and vth ports and reading respective router outputs, - creating a matrix image data structure containing entries specifying at least the router inputs for the uth and vth ports and the router outputs for the uth and vth ports, and - utilizing the router input and router output entries in the matrix image data structure to refresh the addressable register means.</claim-text>
      <claim-text>2. A method according to claim 1, comprising transferring data from the matrix image data structure to a refresh RAM and employing data stored in the refresh RAM to refresh the addressable register means.</claim-text>
      <claim-text>3. A method according to claim 1, wherein the step of creating the matrix image data structure comprises creating a port group for each port, and wherein the port group for the uth port contains entries specifying at least the router input for the uth port and the router output connected to the vth port and the port group for the vth port contains entries specifying at least the router input for the vth port and the router output connected to the uth port.</claim-text>
      <claim-text>4. A method according to claim 1, comprising writing data specifying the router input of the uth port to a refresh RAM using an address derived from the router output for the vth port, writing data specifying the router input of the vth port to the refresh RAM using an address derived from the router output for the uth port, and employing data stored in the refresh RAM to refresh the addressable register means.</claim-text>
      <claim-text>5. A method according to claim 1, including creating a data structure containing a list of ports connected to the vth port and wherein the step of creating the matrix image data structure includes the step of creating an entry specifying a pointer to the list.</claim-text>
      <claim-text>6. A method of operating a port switch including n bidirectional I/O communication ports, where n&gt;2, each port having at least a first state in which it propagates a signal in a first direction and a second state in which it propagates a signal in a second direction, an addressable latch means having n outputs connected to the ports respectively for establishing the state of each port, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), and a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input, the method comprising: creating a source lookup table containing, for each port, an entry specifying the router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying the router output that is connected to that port, and establishing a connection between a uth port (1&lt;=u&lt;=n) in a first operating state and a vth port (1&lt;=v&lt;=n) in a second operating state by: - addressing the source lookup table with an address associated with the uth port and reading a router input, - addressing the destination lookup table with an address associated with the destination port and reading a router output, - creating a matrix image data structure containing, for the uth port, entries specifying at least the router input for the uth port, the first operating state, and the router output connected to the vth port, and, for the vth port, entries specifying at least the router input for the vth port, the second operating state, and the router output connected to the uth port, and - utilizing the operating state entries in the matrix image data structure for the uth and vth ports to refresh the addressable latch means and utilizing the router input and router output entries in the matrix image data structure for the uth and vth ports to refresh the addressable register means.</claim-text>
      <claim-text>7. A method according to claim 6, further comprising: creating a port configuration lookup table containing, for each port, an entry specifying a port address for that port, and wherein the method includes an initialization step of addressing the port configuration lookup table with addresses associated with the ports and reading the port addresses and including the port addresses returned by the port configuration table in the matrix image data structure, and the step of establishing the connection includes utilizing the port addresses for the uth and vth ports to address the addressable latch means and refresh the addressable latch means with the operating states of the ports.</claim-text>
      <claim-text>8. A method according to claim 7, comprising writing data specifying the operating state of the uth port to a refresh RAM using the port address for the uth port, writing data specifying the operating state of the vth port to the refresh RAM using the port address of the vth port, and employing data stored in the refresh RAM to refresh the addressable latch means.</claim-text>
      <claim-text>9. A method of operating a port switch including a plurality of communication ports and a router including an addressable register which can be loaded with data defining a connection between two of said ports for connecting those ports, the method comprising establishing a new connection within a specified time interval by: inputting a value specifying a first port, inputting a value specifying a second port, specifying a time interval, creating a data structure containing at least an address for the first port, an address for the second port and the specified time value, measuring lapse of time toward start of the specified time interval, before start of the specified time interval, transferring data from the data structure to a refresh memory means, during the specified time interval, refreshing the addressable register with the contents of the refresh memory means.</claim-text>
      <claim-text>10. A method of operating a port switch including a plurality of communication ports and a router including an addressable register which can be loaded with data defining a connection between two of said ports for connecting those ports, comprising: creating a source lookup table containing, for each port, an entry specifying a router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying a router output that is connected to that port, establishing a connection between a source port and a destination port by: - addressing the source lookup table with an address associated with the source port, - addressing the destination lookup table with an address associated with the destination port, - inputting a time stamp value specifying start of a time interval, - creating a matrix image data structure containing, for the source port, entries specifying at least the router input for the source port, the state of the port when a pending connection is made, the router output for the destination port, and the time stamp, - before the start of the time interval specified by the time stamp value, transferring data from the matrix image to a matrix refresh memory means, and - during said time interval, refreshing the crosspoint register with the input and output data from the matrix image.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A port switch according to claim 11, comprising a refresh RAM and wherein the controller is programmed to transfer data from the matrix image data structure to the refresh RAM and employ data stored in the refresh RAM to refresh the addressable register means.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A port switch according to claim 11, wherein the controller is programmed to create the matrix image data structure by creating a port group for each port, the port group for the uth port containing entries specifying at least the router input for the uth port and the router output connected to the vth port and the port group for the vth port containing entries specifying at least the router input for the vth port and the router output connected to the uth port.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A port switch according to claim 11, comprising a refresh RAM and wherein the controller is programmed to write data specifying the router input of the uth port to the refresh RAM using an address derived from the router output for the vth port, write data specifying the router input of the vth port to the refresh RAM using an address derived from the router output for the uth port, and employ data stored in the refresh RAM to refresh the addressable register means.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A port switch according to claim 11, wherein the controller is programmed to create a data structure containing a list of ports connected to the vth port and to create the matrix image data structure by creating an entry specifying a pointer to the list.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A port switch including n bidirectional I/O communication ports, where n&gt;2, each port having at least a first state in which it propagates a signal in a first direction and a second state in which it propagates a signal in a second direction, an addressable latch means having n outputs connected to the ports respectively for establishing the state of each port, and a router having n inputs connected to the n ports respectively and n outputs connected to the n ports respectively and including an addressable register means which can be loaded with data defining at least a first connection through the router between the ith router input (1&lt;=i&lt;=n) and the jth router output (1&lt;=j&lt;=n) and a second connection through the router between the kth router input (1&lt;=k&lt;=n and k not identical to i) and the lth router output (1&lt;=l&lt;=n and l not identical to j), a switch means responsive to the data in the addressable register means for connecting the ith router input to the jth router output and for connecting the kth router input to the lth router input, and a controller programmed to operate the port switch in accordance with a method comprising: creating a source lookup table containing, for each port, an entry specifying the router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying the router output that is connected to that port, and establishing a connection between a uth port (1&lt;=u&lt;=n) in a first operating state and a vth port (1&lt;=v&lt;=n) in a second operating state by: - addressing the source lookup table with an address associated with the uth port and reading a router input, - addressing the destination lookup table with an address associated with the destination port and reading a router output, - creating a matrix image data structure containing, for the uth port, entries specifying at least the router input for the uth port, the first operating state, and the router output connected to the vth port, and, for the vth port, entries specifying at least the router input for the vth port, the second operating state, and the router output connected to the uth port, and - utilizing the operating state entries in the matrix image data structure for the uth and vth ports to refresh the addressable latch means and utilizing the router input and router output entries in the matrix image data structure for the uth and vth ports to refresh the addressable register means.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. A port switch according to claim 16, wherein the controller is programmed to create a port configuration lookup table containing, for each port, an entry specifying a port address for that port.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. A port switch according to claim 17, wherein the controller is programmed to initialize the port switch by addressing the port configuration lookup table with addresses associated with the ports and reading the port addresses and including the port addresses returned by the port configuration table in the matrix image data structure, and to perform the step of establishing the connection by utilizing the port addresses for the uth and vth ports to address the addressable latch means and refresh the addressable latch means with the operating states of the ports.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. A port switch including a plurality of communication ports, a router including an addressable register which can be loaded with data defining a connection between two of said ports for connecting those ports, and a controller programmed to operate the port switch in accordance with a method which comprises establishing a new connection at a specified time by: inputting a value specifying a first port, inputting a value specifying a second port, specifying a time interval, creating a data structure containing at least an address for the first port, an address for the second port and the specified time value, measuring lapse of time toward start of the specified time interval, before start of the specified time interval, transferring the contents of the data structure to a refresh memory means, during the specified time interval, refreshing the addressable register with the contents of the refresh memory means.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. A port switch according to claim 19, comprising a refresh RAM and wherein the controller is programmed to write data specifying the operating state of the uth port to the refresh RAM using the port address for the uth port, write data specifying the operating state of the vth port to the refresh RAM using the port address of the vth port, and employ data stored in the refresh RAM to refresh the addressable latch means.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. A port switch including a plurality of communication ports, a router including an addressable register which can be loaded with data defining a connection between two of said ports for connecting those ports, an a controller programmed to operate the port switch by a method comprising: creating a source lookup table containing, for each port, an entry specifying a router input that is connected to that port, creating a destination lookup table containing, for each port, an entry specifying a router output that is connected to that port, establishing a connection between a source port and a destination port by: - addressing the source lookup table with an address associated with the source port, - addressing the destination lookup table with an address associated with the destination port, - inputting a time stamp value specifying start of a time interval, - creating a matrix image data structure containing, for the source port, entries specifying at least the router input for the source port, the state of the port when a pending connection is made, the router output for the destination port, and the time stamp, - before the start of the time interval specified by the time stamp value, transferring the contents of the matrix image to a matrix refresh memory means, and - during said time interval, refreshing the crosspoint register with the input and output data from the matrix image.</claim-text>
    </claim>
  </claims>
</questel-patent-document>