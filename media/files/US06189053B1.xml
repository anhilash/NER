<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06189053B1.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as first publication">
      <document-id>
        <country>US</country>
        <doc-number>06189053</doc-number>
        <kind>B1</kind>
        <date>20010213</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6189053</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B1</original-publication-kind>
    <application-reference family-id="27323609" extended-family-id="21257195">
      <document-id>
        <country>US</country>
        <doc-number>09093396</doc-number>
        <kind>A</kind>
        <date>19980609</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09093396</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43178176</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>9339698</doc-number>
        <kind>A</kind>
        <date>19980609</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09093396</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>JP</country>
        <doc-number>17232592</doc-number>
        <kind>A</kind>
        <date>19920630</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1992JP-0172325</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="3">
        <country>JP</country>
        <doc-number>23091592</doc-number>
        <kind>A</kind>
        <date>19920831</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="3">
        <doc-number>1992JP-0230915</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="4">
        <country>US</country>
        <doc-number>66733696</doc-number>
        <kind>A</kind>
        <date>19960620</date>
        <priority-linkage-type>1</priority-linkage-type>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="4">
        <doc-number>1996US-08667336</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="5">
        <country>US</country>
        <doc-number>7987293</doc-number>
        <kind>A</kind>
        <date>19930623</date>
        <priority-linkage-type>B</priority-linkage-type>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="5">
        <doc-number>1993US-08079872</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010213</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <term-of-grant>
      <disclaimer/>
    </term-of-grant>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  13/12        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>12</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L  12/28        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>28</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04L  12/56        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>56</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>H04L  29/06        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>710052000</text>
        <class>710</class>
        <subclass>052000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>709250000</text>
        <class>709</class>
        <subclass>250000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>710030000</text>
        <class>710</class>
        <subclass>030000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/9047</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>9047</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-013/128</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>128</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-012/2801</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>2801</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/103</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>103</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/351</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>351</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/602</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>602</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/90</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>90</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/901</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>901</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/9042</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>9042</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131026</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="10">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-069/10</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>69</main-group>
        <subgroup>10</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131017</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>11</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>15</number-of-drawing-sheets>
      <number-of-figures>21</number-of-figures>
      <image-key data-format="questel">US6189053</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Communication control system utilizing a shared buffer managed by high and low level protocols</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>YASUE TOSHIKAZU, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5797041</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5797041</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="2">
          <text>FURCHTGOTT DAVID G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4727538</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4727538</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>PETERSEN BRIAN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5299313</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5299313</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>IBM Technical Disclosure Bulletin, "Asynchronous/Queued I/O Processor Architecture", vol. 36, No. 1, Jan. 1993, pp. 265-279.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>IBM Technical Disclosure Bulletin, Method to Provide Direct Memory Access by Processor Device Drivers to Coprocessor Effective Address Space, vol. 29, No. 4, Sep. 1986, pp. 1597.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Kitamura, et al., "Performance Evaluation for High Speed Protocol Processing at Work Station", C&amp;C Systems Research Laboratories, NEC Corporation, date unknown.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Clark, et al., "An Analysis of TCP Processing Overhead", IEEE Communications, pp. 23-29, Jun. 1989.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>Kanakia, et al., "The VMP Network Adapter Board (NAB): High-Performance Network Communication for Multiprocessor", ACM, 1988, pp. 175-187.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>66733696</doc-number>
              <kind>A</kind>
              <date>19960620</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>7987293</doc-number>
              <kind>A</kind>
              <date>19930623</date>
            </document-id>
            <parent-status>ABANDONED</parent-status>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5797041</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </continuation>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Hitachi, Ltd</orgname>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>HITACHI</orgname>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Yasue, Toshikazu</name>
            <address>
              <address-1>Chigasaki, JP</address-1>
              <city>Chigasaki</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Higuchi, Hidemitsu</name>
            <address>
              <address-1>Yokohama, JP</address-1>
              <city>Yokohama</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Shimamoto, Yukio</name>
            <address>
              <address-1>Chigasaki, JP</address-1>
              <city>Chigasaki</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Horimoto, Toru</name>
            <address>
              <address-1>Atsugi, JP</address-1>
              <city>Atsugi</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Antonelli, Terry, Stout&amp;Kraus, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Ellis, Richard L.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A communication control system and a method of implementing a high-speed data transmitting and receiving process uses a communication protocol program, a protocol buffer which is managed by the communication protocol program, a communication controller for controlling a transmission line and a network buffer managed by the communication controller.
      <br/>
      Further, there is provided a shared-buffer which is shared by the protocol buffer and a communication buffer.
      <br/>
      Frame data from a transmission line is shared by the shared-buffer, so that the frame data is directly written to and read from the shared-buffer by means of a shared-buffer control.
      <br/>
      Since the buffer is shared between the transmission line and the protocol, no excessive movement of data is required, thereby improving the throughput of the communication system as a whole.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application is a continuation of application Ser.
      <br/>
      No. 08/667,336, filed on Jun. 20, 1996 now U.S. Pat. No. 5,797,041; which is a continuation of application Ser.
      <br/>
      No. 08/079,872, filed on Jun. 23, 1993, now abandoned.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">The present invention relates generally to high-speed communication control systems, and more particularly to a communication control system which is suitable for use in a local area network (LAN) and a method of controlling the same.</p>
    <p num="3">Heretofore, communication controllers for connecting high-speed transmission lines, such as a LAN to personal computers and workstations have been classified into intelligent and nonintelligent types based on differences in their structure.</p>
    <p num="4">
      The intelligent type communication controller includes a bus controller for connecting the communication controller to a bus to which a system processor and a memory are connected, a network controller for transmitting and receiving frame data while directly controlling the transmission line, a local processor operating in accordance with a low hierarchical protocol, and a local memory for storing communication data.
      <br/>
      The communication controller performs processes relative to, for example, an OSI reference model in a second or lower layer as occasion demands and leaves what is in the third layer or higher to the system processor.
      <br/>
      The transmission line and the system memory are connected via the communication controller and a bus.
      <br/>
      The frame data is stored first in the local memory within the communication controller before being copied by the system processor into the system memory.
      <br/>
      In the case of a high-speed LAN having a transmission capacity as great as 100 Mbps with a FDDI (Fiber Distributed Data Interface), for example, the concentrated load which is applied to the bus can therefore be lightened in comparison with the nonintelligent type of communication controller designed to directly transfer such frame data via the bus to the system memory; consequently, resultant underrun and overrun errors can be prevented.
      <br/>
      Japanese Patent Laid-Open No. 32650/1990, for example, discloses an arrangement as noted above.
    </p>
    <p num="5">
      The nonintelligent type communication controller, which has no local processor, includes a network controller for transmitting and receiving frame data while directly controlling the transmission line, and a local memory for storing communication data.
      <br/>
      The network controller performs processes relative to, for example, the OSI reference models in the first layer (physical layer) and 1.5 layer (media access control) in real time in harmony with the transmission speed of the transmission line.
      <br/>
      The data frame is stored by the network controller first into the local memory before being copied by the system processor into the system memory.
      <br/>
      Consequently, the nonintelligent type of communication controller exhibits superior performance when compared with the intelligent type to the extent that the low hierarchical layer is processed by the local processor and is made less costly since the local processor is not included therein.
      <br/>
      This communication controller has been referred to in, for example, "Performance Evaluation for High Speed Protocol Processing At Workstation" 1992. B-433, Kitamura et al, Collection of Papers at Autumn Meeting of Japan Electronic Data Communication Society, and "An Analysis of TCP Processing Overhead," June, 1989, David D. Clark et al, IEEE Communication Magazine.
    </p>
    <p num="6">Notwithstanding, the need for a data copy operation between the system and local memories degrades the performance efficiency in the prior art and data transfer by means of the system processor also imposes a heavier load on the communication controller.</p>
    <p num="7">
      There also arises another problem which occurs even when the communication controller is used instead of the system processor to copy data from the local memory into the system memory.
      <br/>
      When, for example, the buffer dealt with by the communication controller differs in format from what is dealt with by the protocol program, it is necessary to shift the data to accommodate this difference.
      <br/>
      Taking signal reception as an example, the communication controller transfers data to the buffer provided in the system memory, the data being formatted by the communication controller itself, and then the data is shifted to the buffer dealt with by the protocol program.
      <br/>
      The buffer dealt with by the communication controller is what is specifically used for communication controller hardware in which a predetermined size is assigned to a fixed address, whereas the buffer dealt with by the protocol program is such that a memory is effectively utilized by connecting a plurality of small size areas, for example, by means of a chain and varying the number of areas in accordance with a frame length.
      <br/>
      Consequently, it takes time to effect the buffer-to-buffer transfer of data, thus lowering the performance to a significant extent.
    </p>
    <p num="8">These problems still exist in multi-protocol processing systems for processing a plurality of communication protocols and multi-network control systems for supporting a plurality of networks.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">An object of the present invention is to provide a highspeed communication control system for making possible direct data transfer between communication hardware for controlling a transmission line and software for processing a communication protocol, and a method of controlling the same.</p>
    <p num="10">
      In order to accomplish the above object, a communication control system according to the present invention is provided with a protocol program for use in processing a communication protocol, a protocol buffer which is managed by the protocol program, a communication controller for transmitting and receiving data while controlling a transmission line, and a communication buffer which is managed by the communication controller.
      <br/>
      Further, a system memory is provided with a shared buffer having the functions of the protocol and communication buffers in common so that frame data from the transmission line may be transmitted and received without making useless copies between the communication protocol and the communication controller.
    </p>
    <p num="11">Therefore, no excessive movement of data is required as the functions of the protocol and communication buffers are to be commonly used and high-speed data communication can thus be implemented.</p>
    <p num="12">Another feature of the present invention lies in the fact that the shared buffer is provided with a plurality of areas, whereby it is made possible to transmit and receive frames of data continuously and to divide one frame of data into a plurality of data parts for storage.</p>
    <p num="13">
      The communication controller employed in one embodiment of the present invention is of the nonintelligent type having only a network controller for directly controlling the transmission line and a bus controller for controlling a bus.
      <br/>
      In this case, frame data is directly transferred from the transmission line to a shared buffer of the system memory without buffering it on its way, so that the frame data may be transferred directly from the transmission line to the communication protocol and vice versa.
    </p>
    <p num="14">Such a communication controller may also be of the intelligent type having a local processor and a local memory in addition to a network controller for directly controlling the transmission line and the bus controller for controlling the bus.</p>
    <p num="15">
      The intelligent type communication controller operates first to hold the frame data received from the transmission line in the local memory in the communication controller and then to transfer it to the shared buffer of the system memory.
      <br/>
      Therefore, unlike the nonintelligent type of communication controller, the concentrated load applied to the bus can be lightened and resulting underrun and overrun errors can thus be prevented.
      <br/>
      Moreover, the frame data can be transferred directly from the communication controller to the communication protocol and vice versa.
    </p>
    <p num="16">The present invention also features the structure of the shared buffer, including a data buffer for storing data, a protocol buffer descriptor for use when the communication protocol program is executed to manage the data buffer and a communication buffer descriptor for use when the communication controller is used to manage the data buffer, whereby the protocol and communication buffer descriptors may be used in a queue structure.</p>
    <p num="17">The present invention further features the addition of a means for selecting a protocol to the shared buffer so as to make a plurality of communication protocols processible, whereby the frame data may directly be transferred from the transmission line to the plurality of communication protocols and vice versa.</p>
    <p num="18">The present invention still further features the provision of a plurality of transmission lines and shared buffers and the addition of a means for selecting the transmission line for the communication protocol program so as to make transmission data transferable to the corresponding transmission line.</p>
    <p num="19">With the aforesaid means, the frame data may be transferred directly from the communication protocol to the plurality of transmission lines and vice versa.</p>
    <p num="20">The present invention still further features the utilization of means for selecting the transmission line in a manner that allows the communication protocol program to receive, process or manipulate frame data received from the transmission line, and to send out that data to another transmission line without the buffer-to-buffer movement of the data.</p>
    <p num="21">
      With the aforesaid means, the frame data may be passed through the transmission lines one after another without a useless buffer-to-buffer movement of data.
      <br/>
      A high-speed bridge, router and a gateway can thus be materialized.
    </p>
    <p num="22">The present invention still further features a processor having two processing units A, B operating asynchronously and independently, wherein a shared buffer to be commonly used for two buffers, the one managed by the processing unit A and the other by the processing unit 8, is provided therebetween, so that high-speed data communication is made possible without making useless copies of data in both processing units.</p>
    <p num="23">In the processor above, a buffer is commonly used for two independent processing units and high-speed data communication is made possible as no excessive movement of data is required.</p>
    <p num="24">
      As set forth above, excessive buffer-to-buffer movement of data can be dispensed with as the buffer is shared between the transmission line and the protocol or between the two processing units.
      <br/>
      Therefore, the present invention has the effect of not only improving the throughput of the total communication system, but also decreasing the load of the system processor.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="25">
      FIG. 1 is a block diagram of a communication control system in a first embodiment of the present invention.
      <br/>
      FIG. 2 shows a frame format for use in illustrating processing method according to the present invention.
      <br/>
      FIG. 3 shows a frame format for use in illustrating processing method according to the present invention.
      <br/>
      FIG. 4 shows a frame format for use in illustrating processing method according to the present invention.
      <br/>
      FIG. 5 is a block diagram illustrating the internal structure of a driver according to the present invention.
      <br/>
      FIG. 6 is a schematic diagram illustrating the internal structure of a protocol program according to the present invention.
      <br/>
      FIG. 7 is a schematic diagram illustrating the internal structure of a transmitting queue according to the present invention.
      <br/>
      FIG. 8 is a schematic diagram illustrating the internal structure of a receiving queue according to the present invention.
      <br/>
      FIG. 9 is a flowchart showing the steps in an interrupt process for receiving.
      <br/>
      FIG. 10 is a flowchart showing the steps in a transmitting process.
      <br/>
      FIG. 11 is a flowchart showing the steps in an interrupt process for end of transmitting.
      <br/>
      FIG. 12 is a block diagram illustrating the internal structure of a nonintelligent communication controller according to the present invention.
      <br/>
      FIG. 13 is an exemplary diagram illustrating the operation of receiving a data frame using the nonintelligent communication controller of FIG. 12.
      <br/>
      FIG. 14 is a block diagram illustrating the internal structure of an intelligent communication controller according to the present invention.
      <br/>
      FIG. 15 is an exemplary diagram illustrating the operation of receiving a data frame using the intelligent communication controller of FIG. 14.
      <br/>
      FIG. 16 is a block diagram illustrating the internal structure of another driver in accordance with the present invention.
      <br/>
      FIG. 17 is a conversion table of communication protocol buffers for transmitting data by the driver shown in FIG. 16.
      <br/>
      FIG. 18 is a conversion table of communication protocol buffers for receiving data by the driver shown in FIG. 16.
      <br/>
      FIG. 19 is a flowchart showing the steps in an interrupt process for end of transmitting in the driver shown in FIG. 16.
      <br/>
      FIG. 20 is a flowchart showing the steps in an interrupt process for receiving data in accordance with the present invention.
      <br/>
      FIG. 21 is a flowchart showing the steps in another interrupt process for receiving data in accordance with the present invention.
      <br/>
      FIG. 22 is a block diagram of a communication control system in accordance with the present invention.
      <br/>
      FIG. 23 is a frame header format for use in illustrating a processing method in the system of FIG. 22.
      <br/>
      FIG. 24 is a flowchart showing the steps in an interrupt process for receiving data in the system of FIG. 22.
      <br/>
      FIG. 25 is a block diagram illustrating the internal structure of a protocol program in the system of FIG. 22.
      <br/>
      FIG. 26 is a block diagram illustrating the internal structure of a protocol table in the system of FIG. 22.
      <br/>
      FIG. 27 is a block diagram of a router using the communication control system of FIG. 22.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="26">Referring to the block diagrams and the flowcharts of FIG. 1 through FIG. 15, an embodiment of the present invention will be described.</p>
    <p num="27">
      FIG. 1 is an example of a communication control system embodying the present invention.
      <br/>
      The communication control system comprises a system processor 1 for executing a communication protocol, a system memory 2 and a communication controller 4 for transmitting and receiving data while controlling a transmission line 3.
      <br/>
      A bus 8 which connects these component elements is used for the exchange of information, such as control codes and communication data.
      <br/>
      With this arrangement, the system processor 1 and the system memory 2 are used to communication according to a communication protocol, process data according to an application program and to control the communication control system as a whole.
      <br/>
      The system memory 2 is also utilized to store various program codes to be operated on by the system processor 1 and communication data.
      <br/>
      With respect to programs, there are, as shown in FIG. 1, a driver 21 for controlling the communication controller, a protocol program 22 and an application program 23 for processing the communication protocol, and a buffer manager 25 for managing a protocol buffer to be used by the driver 21 and the protocol program 22.
      <br/>
      As will be described in detail later, the driver 21 is provided with a shared buffer 218.
      <br/>
      In addition, there are provided an operating system and the like; however, a description thereof will be omitted as such features are not directly related to the invention.
    </p>
    <p num="28">A description will be given of the internal structure of the communication controller 4 of FIG. 1 and the data receiving operation thereof, when the controller is of the nonintelligent type.</p>
    <p num="29">
      FIG. 12 illustrates the internal structure of the nonintelligent type communication controller 4.
      <br/>
      While directly controlling the transmission line 3, a network controller 42 transmits and receives data.
      <br/>
      A bus controller 41 is used to connect the network controller 42 to the bus 8 shown in FIG. 1.
      <br/>
      Supposing, for example, that the Am79C900 of the AMD Co. is employed, the bus controller 41 reads the data stored in the system memory 2 via the bus 8 under instructions from the network controller 42 at the time of transmitting.
      <br/>
      At the time of receiving, data from the transmission line 3 is received by the network controller 42, which then instructs the bus controller 41 to transfer the data via the bus 8 to the system memory 2.
      <br/>
      After the end of the transmit-receive operation, the network controller 42 notifies the system processor 1 of the end of the operation via the bus controller 41 by means of an interrupt signal 216 for end of transmitting and an interrupt signal 217 for receiving.
    </p>
    <p num="30">
      FIG. 13 illustrates the operation of receiving data using a nonintelligent type communication controller.
      <br/>
      The driver 21 has a shared-buffer 218 shared between the protocol program 22 and the communication controller 4, and a receiving interrupt control module 213, whereas the protocol program 22 has a protocol receiving queue 222 and a transmit-receive control module 221.
      <br/>
      The receiving operation will briefly be described.
      <br/>
      Initially, there is allocated in the shared-buffer 218 a buffer area representing a free space for receiving data.
      <br/>
      When data is received from the transmission line 3, the communication controller 4 makes use of the successive DMA (Direct Memory Access) function to write via the bus 8 the received data into the allocated buffer the shared-buffer 218 in the system memory 2.
      <br/>
      When data reception is completed, the communication controller 4 outputs an interrupt signal on line 217 for receiving so as to notify the system processor 1 of the data reception, whereby the system processor 1 starts the receiving interrupt control module 213 of the driver 21.
      <br/>
      The receiving interrupt control module 213 takes the-buffer area containing the received data out of the shared-buffer 218, connects the buffer area thus taken out to the protocol receiving queue 222 and starts the transmit-receive control module 221 of the protocol program 22.
      <br/>
      The transmit-receive control module 221 takes the received data out of the protocol receiving queue 222 and after performing the communication protocol process, delivers only application data to the application program 23.
      <br/>
      In order to actually connect the shared-buffer 218 to the protocol receiving queue 222, a pointer indicating the head position of the buffer area of the shared-buffer 218 is set to the protocol receiving queue 222.
      <br/>
      In other words, it does not mean that the received data is transferred.
    </p>
    <p num="31">A description will be given of the internal structure of the communication controller 4 of FIG. 1 and the schematic data receiving operation when the controller is of the intelligent type.</p>
    <p num="32">
      FIG. 14 illustrates the internal structure of the intelligent type communication controller 4.
      <br/>
      The communication controller 4 comprises a network controller 45 for transmitting and receiving data while directly controlling the transmission line 3, a bus controller 43 for connecting the communication controller 4 to the bus 8, a local data memory 44 for storing frame data, a local processor 46 for operating in accordance with a low hierarchical communication protocol and for controlling the communication controller 4 as a whole, and a local memory 47, whereas a bus 48 is used for connecting the local processor 46, the local memory 47, the bus controller 43 and the network controller 45.
      <br/>
      A bus 49 is used for connecting the local data memory 44, the bus controller 43 and the network controller 45, these buses being used for the exchange of information among the elements.
      <br/>
      When data is transmitted, the bus controller 43 reads the data stored in the system memory 2 of FIG. 1 via the bus 8 under instructions from the local processor 46 and initially stores the data thus read in the local data memory 44.
      <br/>
      The local processor 46 adds a network header to the data as occasion demands and assembles the header and data into frame data.
      <br/>
      Then, the network controller 45 sends out the frame data to the transmission line 3 under instructions from the local processor 46.
      <br/>
      When data is received, on the other hand, the processing order is reversed.
      <br/>
      First, the network controller 45 writes the frame data from the transmission line 3 into the local data memory 44 under instructions from the local processor 46 and the local processor 46 removes the network header when necessary.
      <br/>
      Then the bus controller 43 transfers the data via the bus 8 to the system memory 2 under instructions from the local processor 46.
      <br/>
      After the transmit-receive operation is completed, the local processor 46 notifies the system processor 1 of the end of the operation via the bus controller 43 by means of the interrupt signal 216 for end of transmitting and the interrupt signal 217 for receiving.
    </p>
    <p num="33">
      FIG. 15 illustrates the operation of receiving data using the intelligent type communication controller 4.
      <br/>
      The driver 21 and the protocol program 22 are similar to those shown in FIG. 13, and like reference characters are given to like component elements therein.
      <br/>
      The receiving operation will be described briefly.
      <br/>
      First, empty buffers for receiving data are allocated in the local data memory 44 and the shared-buffer 218, respectively.
      <br/>
      When data is sent from the transmission line 3, the network controller 45 successively writes the received data into the local data memory 44.
      <br/>
      When the receiving operation is terminated, the local processor 46 removes the network header from the received data and instructs the bus controller 43 to transfer the remainder to the shared-buffer 218 in the system memory 2.
    </p>
    <p num="34">
      When the data has been transferred, the local processor 46 notifies the system processor 1 of the reception of data via the bus controller 43 by means of the interrupt signal 217 for receiving.
      <br/>
      Then, the system processor 1 starts the receiving interrupt control module 213 of the driver 21.
      <br/>
      The receiving interrupt control module 213 connects the buffer area loaded with the received data in the shared-buffer 218 to the protocol receiving queue 222 and starts the transmit-receive control module 221 of the protocol program 22.
      <br/>
      The transmit-receive control module 221 takes the received data out of the protocol receiving queue 222, performs the communication protocol process and then delivers only application data therein to the application program 23.
      <br/>
      In order to actually connect the allocated buffer area of the shared-buffer 218 to the protocol receiving queue 222, the pointer indicating the head position of the buffer area of the shared buffer 218 is set to the protocol receiving queue 222.
      <br/>
      However, this does not mean that the received data is transferred at that time.
    </p>
    <p num="35">
      In FIGS. 13 and 15, the shared-buffer 218 may be so arranged as to have a plurality of areas.
      <br/>
      In this case, it will be unnecessary to allocate a free area whenever frame data is transmitted or received if the frame data is stored on an area basis.
      <br/>
      Frame data can thus be transmitted and received continuously without committing an error due to buffer insufficiency.
    </p>
    <p num="36">
      The protocol header and the application data may also be stored in the respective buffer areas, so that one frame is accommodated by connecting the buffer areas.
      <br/>
      Hence, the protocol header is readily added and removed by the protocol program 22.
    </p>
    <p num="37">
      Moreover, the shared-buffer 218 is provided with a data buffer for storing data, a protocol buffer descriptor for use when the protocol program 22 manages the data buffer and a communication buffer descriptor for use when the communication controller 4 manages the data buffer, the protocol and communication buffer descriptors having a queue structure.
      <br/>
      The exchange of communication data between the protocol program 22 and the communication controller 4 is thus facilitated.
    </p>
    <p num="38">
      The driver 21 will be described in detail.
      <br/>
      As illustrated in FIGS. 13 and 15, the driver 21 may function in either the nonintelligent or intelligent types, irrespective of the kind of communication controller 4 being employed.
    </p>
    <p num="39">
      FIG. 5 illustrates the internal structure of the driver 21.
      <br/>
      The driver 21 is provided with a program using an interrupt control module 211 for end of transmitting, a transmitting control module 212 and the receiving interrupt control module 213, and a transmitting queue 214 and a receiving queue 215 for linking communication data in a queue.
      <br/>
      The interrupt control module 211 for end of transmitting and the receiving interrupt control module 213 are started by the interrupt signal 216 for end of transmitting and the interrupt signal 217 for receiving from the communication controller 4 shown in FIG. 1, whereas the transmitting control module 212 is started by the protocol program 22.
      <br/>
      The transmitting and receiving queues 214, 215 are formed by linking together the buffers shared between the program in the driver 21 and the communication controller 4.
      <br/>
      In other words, the transmitting and receiving queues 214, 215 are time buffers for linking the protocol which can afford delay in processing and the transmission line 3 operating in asynchronous real time.
      <br/>
      Referring to the flowcharts (FIGS. 11, 10 and 9), the interrupt control module for end of transmitting 211, the operations of the transmitting control module 212 and the receiving interrupt control module 213 will be described in detail later.
    </p>
    <p num="40">
      FIGS. 7 and 8 illustrate the detailed structure of the transmitting and receiving queues 214, 215 of FIG. 5.
      <br/>
      The two queues are formed with a communication buffer descriptor 300 and a protocol buffer 400, respectively.
      <br/>
      The protocol buffer 400 is so structured as to integrally incorporate a buffer descriptor 410 and a data buffer 420 (420A, 420A', 420B, 420C, 420C', 420D) for storing data.
      <br/>
      The data buffer is provided with a plurality of storage areas.
      <br/>
      The communication buffer descriptor 300 is used to store information necessary for the communication controller 4 to gain access to the data buffer 420.
      <br/>
      On the other hand, the protocol buffer 400 is managed by the buffer manager 25 shown in FIG. 1, and it is the buffer dealt with by the driver 21 and the protocol program 22.
    </p>
    <p num="41">
      First, the transmitting queue 214 of FIG. 7 will be described.
      <br/>
      In the example of FIG. 7, there are two frames of data to be transmitted.
      <br/>
      The first frame includes data with a chain of (T * D00+D01) and is stored in the data buffers 420A, 420B.
      <br/>
      The second frame is a single data item with (T * D10) and is stored in the data buffer 420A'.
    </p>
    <p num="42">
      The protocol buffer in the transmitting queue 214, as shown in FIG. 7, is so arranged that its pointer (if-snd) indicates the position of a head buffer TB00.
      <br/>
      The pointer (if-snd) comes to 0, provided no buffer exists.
      <br/>
      Buffers TB00, TB01, T010 have, for example, a 112-byte data storage area and various pieces of buffer managing information, 128 bytes in total being assigned to each.
      <br/>
      Of the buffer managing information, a pointer (m-next) expresses the position of a buffer where the following chain data is stored, offset (m-off) a relative position where the data is stored, data length (m-len) the length of stored data, and a pointer (m-act) the position of a buffer where the following frame data is stored.
      <br/>
      A buffer TB01 secures a data storage area in a page buffer TPG0 by means of the offset (m-off).
      <br/>
      The page buffer TPG0 has a capacity as large as, for example, 4K bytes and is used when a bulk of data is stored.
      <br/>
      The value of the offset (m-off) may reveal whether the page buffer is being used.
      <br/>
      Since the offset (m-off) expresses the relative position ranging from the head of a buffer up to a data entry, the page buffer is employed when the value exceeds the length of the buffer, that is, 128.
    </p>
    <p num="43">
      As shown in FIG. 7, the communication buffer descriptor 300 of the transmitting queue has a collection of descriptors TD00, TD01, TD10 . . . formed with four words, for instance, and is used in the form of a ring.
      <br/>
      Of the descriptors TD00, TD01, TD10, an address (ADR) represents the head address of a buffer in which transmission data is stored and the data length (BCNT) represents the length of data thus stored.
      <br/>
      The data length (BCNT) has the same value as that of the data length (m-len) in the protocol buffer.
      <br/>
      A control flag (DIR) indicates that the descriptor is occupied by the communication controller 4 (DIR=1), the driver 21 or the protocol program 22 (DIR=0).
    </p>
    <p num="44">
      The driver sets the control flag (DIR) to 1 after filling the area designated by the descriptor with data.
      <br/>
      The communication controller 4 clears the control flag to zero after transmitting the contents of the buffer.
      <br/>
      The head flag (ST) and the last flag (EN) are used to represent the head and last buffers of a frame.
      <br/>
      When ST=1, it represents the initial buffer of the frame, and when EN=1, it represents the last buffer of the frame.
      <br/>
      In FIG. 7, the descriptor TD00 and the protocol buffers TB00, TD01 and TB01, TD10 and TB10 all indicate the same area of the same transmitting data.
    </p>
    <p num="45">
      The receiving queue will subsequently be described.
      <br/>
      The receiving queue 215 is, as shown in FIG. 8, basically similar in structure to the transmitting queue 214 shown in FIG. 7.
      <br/>
      Size (LEN) in the descriptor indicates the allocated length of the receiving buffer area.
      <br/>
      When the receiving queue is used to receive data, it is needed to allocate protocol buffers and descriptors for a plurality of frames beforehand.
      <br/>
      When the communication controller 4 receives a frame, it successively stores data in the areas directed by the descriptor and also sets the length (BCNT) of the data received by the descriptor, the head flag (ST), the last flag (EN) and the control flag (DIR).
    </p>
    <p num="46">The operation of the communication control system will be described.</p>
    <p num="47">
      For the sake of convenience, the communication protocols dealt with in this communication control system are TCP/IP (Transmission Control Protocol/Internet Protocol), and low hierarchical protocols IEEE802. 3, IEEE802.2. The data frame flowing through the transmission line 3 has a format of FIG. 2.
      <br/>
      In FIG. 2, the data frame 200 comprises a frame header 201, a protocol header 202, a user data 203 and a frame tailor 204.
      <br/>
      The frame header 201 holds destination address data, and the frame tailor 204 holds check code data for detecting a data error.
      <br/>
      Of the components of FIG. 2, the frame header 201 is generated by the protocol program 22 of FIG. 1 and decoded by the communication controller 4, whereas the protocol header 202 is both generated and decoded by the protocol program 22.
      <br/>
      Moreover, the frame tailor 204 is generated and decoded by the communication controller 4.
      <br/>
      The user data 203 is used by the application program 23 and delivered from the application program 23 to the protocol program 22.
      <br/>
      IP and TCP of the protocol header 202 are arranged as shown in FIGS. 3 and 4, respectively.
    </p>
    <p num="48">
      In FIG. 1, the data frame sent from the transmission line 3 is received as follows.
      <br/>
      A coded frame is decoded by the communication controller 4 before being assembled into byte units.
      <br/>
      The frame header 201, the protocol header 202 and the user data 203 are written via the bus 8 into the receiving queue (420D) shown in FIG. 8.
      <br/>
      At this time, the communication controller 4 examines the frame header 201 and receives only a transmission that has been addressed to its own address.
      <br/>
      Further, the frame tailor 204 checks whether the data is correct or not.
      <br/>
      When the data frame is received, the interrupt signal 217 for receiving from the communication controller 4 is used to interrupt the processor 1, and the receiving interrupt control module 213 of the driver 21 of FIG. 5 is started.
    </p>
    <p num="49">
      FIG. 9 is a flowchart illustrating the operation of the receiving interrupt control module 213.
      <br/>
      At Step 91, the control flag (DIR=0) of the descriptor shown in FIG. 8 is searched to find the protocol buffer for the data that has been received.
      <br/>
      When the buffer is found, it is removed from the receiving queue 215 at Step 92 and then it is connected to the protocol receiving queue 222 of FIG. 6.
      <br/>
      The queue can be removed simply by operating the pointer (m-next), (m-act) of the protocol buffer.
      <br/>
      The structure of the protocol receiving queue 222 shown in FIG. 6 is similar to that of the protocol buffer of FIG. 7 or 8.
      <br/>
      Consequently, no data is transferred as the buffer containing the data is switched over.
      <br/>
      Subsequently, an empty buffer is made available by the buffer manager 25, and then it is connected to the receiving queue 215 at Step 93.
      <br/>
      The descriptor is naturally changed at this time.
      <br/>
      Lastly, the protocol program 22 is started using, for example, software interruption, at Step 94.
    </p>
    <p num="50">
      The protocol program 22 operates as follows.
      <br/>
      First, the data frame is taken out of the protocol receiving queue 222 and the protocol header 202 is processed as shown in FIG. 2.
      <br/>
      Then the frame header 201 and the protocol header 202 are removed, and only the user data 203 is delivered to the application program 23.
    </p>
    <p num="51">
      The transmitting operation is performed in reverse order.
      <br/>
      When data transmission is requested by the application program 23, the protocol program 22 receives the user data from the application program 23, adds the protocol header 202 and the frame header 201 of FIG. 2 and delivers the combination to the transmitting control module 212 of FIG. 5.
      <br/>
      The buffer used by the protocol program 22 is that managed by the buffer manager 25.
    </p>
    <p num="52">
      FIG. 10 is a flowchart illustrating the operation of the transmitting control module 212.
      <br/>
      At Step 101, the buffer received from the protocol program 22 is connected to the rearmost end of the transmitting queue of FIG. 7.
      <br/>
      A descriptor is naturally prepared then.
      <br/>
      Subsequently, the communication controller 4 is started at Step 102.
      <br/>
      Since the communication controller 4 normally sends out the data connected to the transmitting queue to the transmission line 3 in sequence, it is unnecessary to start the communication controller 4 when data frames are continuously transmitted.
      <br/>
      The Step 102 is provided in consideration of a case where the communication controller 4 remains stationary.
    </p>
    <p num="53">
      The communication controller 4 takes data frames on standby at the transmitting queue one after another, changes them into bit strings and sends the encoded data frame to the transmission line 3.
      <br/>
      At this time, the frame tailor of FIG. 2 is added at the end.
      <br/>
      When the transmitting operation is terminated, the communication controller 4 interrupts the processor 1 by means of the interrupt signal 216 for end of transmitting and the interrupt control module 211 for end of transmitting of the driver 21 of FIG. 5 is started.
    </p>
    <p num="54">
      FIG. 11 is a flowchart illustrating the operation of the interrupt control module 211 for end of transmitting.
      <br/>
      At Step 111, the control flag (DIR=0) of the descriptor of FIG. 9 is searched to find the protocol buffer that has terminated the transmitting operation.
      <br/>
      When this buffer is found, it is removed from the queue and returned to the buffer manager 25 at Step 112.
    </p>
    <p num="55">Referring to FIGS. 16-21, a description will subsequently be given of another method of controlling the shared-buffer 218 having the communication buffer descriptor and the protocol buffer shown in FIGS. 7 and 8.</p>
    <p num="56">
      FIG. 17 is a conversion table for the communication protocol buffers for transmitting 1701 for defining the relation between the communication buffer descriptor and the protocol buffer.
      <br/>
      As shown in FIG. 16, the conversion table of the communication protocol buffers for transmitting 1701 is connected to the transmitting control module 212.
    </p>
    <p num="57">
      Each line number in the conversion table of the communication protocol buffers for transmitting 1701 of FIG. 17 corresponds to a descriptor number TD00, TD01 . . . in the communication buffer descriptor shown in FIG. 7.
      <br/>
      The chain flag shows the head of a chain (ST=1) or the end (EN=1).
      <br/>
      The address (virtual address) of the protocol buffer corresponding to the descriptor and the data address (including virtual and real addresses) in the protocol buffer are stored in the respective items.
    </p>
    <p num="58">The virtual address refers to what is accessed by the virtual storage method and used in general programs.</p>
    <p num="59">The real address refers to what is attached to the memory physically and is used by the communication controller as an address of the system memory when the exchange of data is effected between the transmission line and the system memory under DMA (Direct Memory Access).</p>
    <p num="60">
      At the time of transmitting, the communication controller 4 searches the descriptor within the communication buffer descriptor in the system memory 2 and sends out transmitting data with the address of the transmitting buffer registered therein to the transmission line.
      <br/>
      Since the address dealt with by the communication controller 4 is an actual one, the address of the transmit-receive data registered in the descriptor has to be an actual one.
      <br/>
      On the other hand, the protocol program 22 and the driver 21 use the virtual address of the protocol buffer to access the transmitting data.
      <br/>
      Therefore, there arises the necessity of providing a conversion table for use in converting the virtual address of the transmitting data to an actual of this data.
    </p>
    <p num="61">FIG. 20 is a flowchart illustrating the operation of transmitting control module 212 shown in FIG. 16. At Step 2003, the head address (virtual address) of a buffer and that (virtual address) of data received from the protocol program 22 are obtained so as to set a value in the conversion table of the communication protocol buffers for transmitting 1701 corresponding to the number of the transmitting descriptor.</p>
    <p num="62">
      Referring to FIGS. 7 and 17, the virtual addresses T * D00, TPG0, T * D10 of the transmitting data are obtained from the protocol buffers TB00, TB01, Ts10 with respect to the descriptors TD00, TD01, TD10 and, after they are converted to real addresses R_T * D00, R_TPG0, R T * D10, the data are stored in respective line positions corresponding to the respective descriptor numbers (1904).
      <br/>
      Then, the updating of the descriptor is based on the conversion table of the communication protocol buffers for transmitting 1701 (2005) and the communication controller is started (102).
    </p>
    <p num="63">
      FIG. 19 is a flowchart illustrating the operation of the interrupt control module 211 for end of transmitting shown in FIG. 16. The interrupt control module 211 for end of transmitting samples the transmission ended buffer from the descriptor of FIG. 7 (111), obtains the address (virtual address) of the protocol buffer from the descriptor having the corresponding number by means of the conversion table of the communication protocol buffers for transmitting 1701 and returns the address thus obtained to the buffer manager 25 (1910).
      <br/>
      This process is terminated when the conversion table of the communication protocol buffers for transmitting 1701 and the descriptor are updated (1911).
    </p>
    <p num="64">
      FIG. 18 is a conversion table of the communication protocol buffers for receiving 1801 for defining the relation between the communication buffer descriptor and the protocol buffer.
      <br/>
      The conversion table of the communication protocol buffers for receiving 1801 is connected to the receiving control module 213 as shown in FIG. 16 and is provided with items similar to those of the conversion table of the communication protocol buffers for transmitting 1701.
    </p>
    <p num="65">
      FIG. 21 is a flowchart illustrating the operation of the receiving interrupt control module 213 shown in FIG. 16. The receiving interrupt control module 213 started by the interrupt signal 217 for receiving samples the buffer identified by the indication received from the descriptor shown in FIG. 8 and obtains the address of the protocol buffer (virtual address) from the conversion table of communication protocol buffers for receiving 1801 (2102).
      <br/>
      Subsequently, the receiving interrupt control module 213 registers the protocol buffer in the receiving queue in the protocol program 22 and starts the protocol program 22 (94).
      <br/>
      Then, the receiving interrupt control module 213 secures a new receiving protocol buffer from the buffer manager 25 shown in FIG. 1 (2104) and updates the receiving descriptor (2105).
      <br/>
      This receiving interrupt control process is terminated when the address (virtual address) of the protocol buffer and the addresses (virtual and real addresses) of the data are registered in the conversion table of the communication protocol buffers for receiving 1801.
    </p>
    <p num="66">
      FIG. 22 is a block diagram of another communication control system embodying the present invention.
      <br/>
      Although one communication controller, one communication protocol and one application program have been shown for use in FIG. 1, an exemplary communication control system 2201 in FIG. 22 comprises two communication controllers c1, c2, two drivers d1, d2, two protocol programs p1, p2 and three application programs a1, a2, a3.
      <br/>
      The communication control system shown in FIG. 22 is also provided with the system processor 1, the bus 8 and the like; however, the description of these elements will be omitted as they function in the same manner as previously described.
    </p>
    <p num="67">
      The communication controllers c1, c2 transmit and receive data while controlling respective transmission lines n1, n2.
      <br/>
      These communication controllers are similar to what is shown in FIG. 1 and may be either of the intelligent or the nonintelligent types shown in FIGS. 12 and 14. The drivers d1, d2 control the respective communication controllers d1, c2 and mediates exchange of data between the protocol programs p1, p2.
      <br/>
      The protocol programs p1, p2 have the same internal structure, and, as shown in FIG. 25, each comprises a transmit-receive control module 2501, a protocol table and a protocol receiving queue 2502.
    </p>
    <p num="68">
      First, the drivers d1, d2 will be described.
      <br/>
      The internal structure of the drivers d1, d2 is the same as what is shown in FIG. 5, except for the operation of the receiving interrupt control module 213.
      <br/>
      FIG. 24 shows a flowchart illustrating the operation of the receiving interrupt control module 213, wherein steps, excluding Steps 2402 and 2404, are similar to those shown in the operating flowchart of FIG. 9.
      <br/>
      At Step 2401, the protocol buffer having the data frame received is sampled from the receiving queue 215.
      <br/>
      The protocol buffer is provided with the frame header 201, the protocol header 202 and the user data 203 of those ports of the data frame shown in FIG. 1.
      <br/>
      At Step 2302, the frame header 201 of the data frame is examined to determine the kind of the protocol.
    </p>
    <p num="69">
      FIG. 23 shows a format of an IEEE802.3, IEEE802.2 SNAP (Sub Network Access Protocol) frame header.
      <br/>
      The "TYPE" field in the frame header forms a protocol identifier, for example, TYPE=2048 designating TCP/IP and TYPE=2054 ARP (Address Resolution Protocol).
      <br/>
      At Step 2402, the protocol is identified and subsequently the protocol buffer is connected to a protocol receiving queue 2502 in the corresponding protocol program.
      <br/>
      At this time, no data is transferred as the buffer containing the data is switched over.
      <br/>
      Further, an empty buffer is connected to the receiving queue 215 of FIG. 5 at Step 2403, and software interruption, for example, is used to start the corresponding protocol program p1 or p2 shown in FIG. 22 at Step 2404.
    </p>
    <p num="70">
      The receiving operation with the protocol program p1 or p2 will be described.
      <br/>
      The transmit-receive module control 2501 takes the data frame out of the protocol receiving queue 2502, performs the process with respect to the protocol header 202 shown in FIG. 2, removes the frame header 201 and the protocol header 202, and then delivers only the user data 203 to one of the application programs a1, a2, a3 shown in FIG. 22.
    </p>
    <p num="71">
      A protocol table 2503 shown in FIG. 25 is used to select the application program.
      <br/>
      The contents shown in FIG. 26 are registered in the protocol table 2503 beforehand.
      <br/>
      An address refers to a number of a communication window fitted to the system; that is, in the case of receiving, it means "Source Address," "Destination Address." A port number refers to a number of a communication window attached to an application program; that is, in the case of receiving, it means "Source Port," "Destination Port." The addresses, the port numbers, the application program identifier, and a driver identifier corresponding one-to-one to the transmission line to which the destination station has been connected are registered as a set.
      <br/>
      In order to actually select a corresponding application program from the data frame received, "Destination PortH is sampled out of the protocol header first and the corresponding application program identifier is obtained by means of the protocol table of FIG. 26.
    </p>
    <p num="72">
      The transmitting operation with the protocol program p1 or p2 will be described.
      <br/>
      When a request is made to transmit data from one of the application programs a1, a2, a3 shown in FIG. 22, the protocol program p1 or p2 receives user data from the application program at the transmit-receive control module 2501, adds the protocol header 202 and the frame header 201 shown in FIG. 2 thereto, and delivers the combination to either driver d1 or d2 shown in FIG. 22. The protocol table shown in FIG. 25 is used to select the driver.
      <br/>
      Since the transmission line to which the destination application program has been connected, that is, the driver identifier corresponding to the source port number, has been registered in the protocol table 2503, as shown in FIG. 26, the one of the drivers to be used is determined from this driver identifier.
    </p>
    <p num="73">
      FIG. 27 illustrates a router using the communication control system of FIG. 22 according to the present invention.
      <br/>
      The component elements of a communication control system 2701 are similar to those shown in FIG. 22 and like reference characters are given to like and corresponding elements.
      <br/>
      A station 2702 is connected to the transmission line ni and a station 2703 to the transmission line n2.
      <br/>
      FIG. 27 illustrates a case where data is transmitted from the station 2702 on the transmission line n1 via the communication control system 2701 to the station 2703 on a different transmission line n2.
      <br/>
      Data from the station 2702 is passed through the transmission line n1 and the communication controller c1 before being supplied to the shared-buffer in the driver d1 without being buffered halfway in real time.
      <br/>
      The protocol program p1 switches the protocol header for the frame header with respect to the data frame in this buffer and connects the buffer to the shared-buffer in the driver d2.
      <br/>
      The data thus replaced in the shared-buffer is passed through the communication controller c2 and the transmission line n2 before being delivered to the station 2703 in real time.
      <br/>
      As one and the same buffer is used among the driver d1, the protocol program p1 and the driver d2, no useless buffer-to-buffer movement of data is performed.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A communication control system comprising:</claim-text>
      <claim-text>a system processor which processes communication data according to a higher level communication protocol; a system memory which stores programs executed by said system processor and data processed by said system processor; a communication controller, coupled to a transmission line and to said system memory, which transmits and receives a frame including said communication data on said transmission line while controlling said transmission line and processing said frame according to a lower level communication protocol;</claim-text>
      <claim-text>and a shared-buffer which stores said communication data, said shared-buffer being shared by said system processor and said communication controller, wherein said system processor reads out and writes in said communication data from and to said shared buffer according to a first buffer descriptor for managing said shared-buffer, and wherein said communication controller transfers said communication data between said shared-buffer and said transmission line according to a second buffer descriptor for managing said shared-buffer.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A communication control system according to claim 1, wherein said shared memory is provided in said system memory.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A communication control system according to claim 2, wherein said system processor sets an address of said shared-buffer into said second buffer descriptor.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A communication control system according to claim 1, wherein said communication controller notifies said system processor of an end of a communication data transfer between said communication controller and said transmission line in response to a completion of said data transfer.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A communication control system according to claim 1, wherein said system processor accesses said shared-buffer using a virtual address of said shared-buffer and converts said virtual address of said shared-buffer into a real address of said shared-buffer, and wherein said communication controller accesses said shared-buffer using said real address of said shared-buffer converted by said system processor.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A communication control system according to claim 5, wherein said processor sets said real address of said shared-buffer into said second buffer descriptor.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A communication control system according to claim 1, wherein said communication controller include a DMA function and transfers said communication data between said shared-buffer and said transmission line using said DMA function.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A communication control system according to claim 1, wherein said higher level communication protocol is the third layer of an OSI reference model.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A communication control system according to claim 8, wherein said third layer of the OSI reference model is TCP/IP.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A communication control system according to claim 1, wherein said lower level communication protocol is the second layer of an OSI reference model.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A communication control system according to claim 10, wherein said second layer of the OSI reference mode is IEEE 802.3.</claim-text>
    </claim>
  </claims>
</questel-patent-document>