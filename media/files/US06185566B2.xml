<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185566B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185566</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185566</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="22109798" extended-family-id="3899831">
      <document-id>
        <country>US</country>
        <doc-number>09072794</doc-number>
        <kind>A</kind>
        <date>19980505</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09072794</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>4033360</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>7279498</doc-number>
        <kind>A</kind>
        <date>19980505</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09072794</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L  12/24        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>24</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L  12/28        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>28</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <further-classification sequence="1">
        <text>700001000</text>
        <class>700</class>
        <subclass>001000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707999010</text>
        <class>707</class>
        <subclass>999010</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>709201000</text>
        <class>709</class>
        <subclass>201000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04L-041/00</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>41</main-group>
        <subgroup>00</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04L-012/24</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>24</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04L-041/02</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>41</main-group>
        <subgroup>02</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>H04L-043/08C</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>043</main-group>
        <subgroup>08C</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-041/00</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>41</main-group>
        <subgroup>00</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170506</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-012/2803</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>2803</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170506</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-041/02</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>41</main-group>
        <subgroup>02</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170506</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-041/06</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>41</main-group>
        <subgroup>06</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170506</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-043/0811</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>43</main-group>
        <subgroup>0811</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170506</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04L-012/28H</classification-symbol>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04L-041/06</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>25</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>9</number-of-drawing-sheets>
      <number-of-figures>10</number-of-figures>
      <image-key data-format="questel">US6185566</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Network management system having an embedded network database</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>MONSON ROBERT J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5453924</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5453924</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>DOLIN JR ROBERT A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5513324</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5513324</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>Section 7, "LonWorks Programming Model" of Motorola LonWorks Technology Device Data, Rev. 3.1 published in 1997 by Motorola Corporation of Illinois.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Section 8, "LonTalk Protocol" of Motorola LonWorks Technology Device Data, Rev. 3.1 published in 1997 by Motorola Corporation of Illinois.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Appendix A "Neuron Chip Data Structures" of Motorola LonWorks Technology Devie Data, Rev. 3.1 published in 1997 by Motorola Corporation of Illinois.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Appendix B "Network Management and Diagnostic Services" of Motorola LonWorks Technology Device Data, Rev. 3.1 published in 1997 by Motorola Corporation of Illinois.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant app-type="applicant" sequence="1">
          <addressbook lang="en">
            <name>ADAMS ROBERT A.</name>
          </addressbook>
        </applicant>
        <applicant app-type="applicant" sequence="2">
          <addressbook lang="en">
            <name>ALLGOOD OTTIE E.</name>
          </addressbook>
        </applicant>
        <applicant app-type="applicant" sequence="3">
          <addressbook lang="en">
            <name>SAUNDERS ANDREW T.</name>
          </addressbook>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Adams, Robert A.</name>
            <address>
              <address-1>Midlothian, VA, 23112, US</address-1>
              <city>Midlothian</city>
              <state>VA</state>
              <postcode>23112</postcode>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Allgood, Ottie E.</name>
            <address>
              <address-1>Mechanicsville, VA, 23116, US</address-1>
              <city>Mechanicsville</city>
              <state>VA</state>
              <postcode>23116</postcode>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Saunders, Andrew T.</name>
            <address>
              <address-1>Richmond, VA, 23233, US</address-1>
              <city>Richmond</city>
              <state>VA</state>
              <postcode>23233</postcode>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Sampson &amp; Associates</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Alam, Hosain T.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A network management system includes an embedded node, having network database and communications elements, which is coupled locally on an ECHELON network.
      <br/>
      This local coupling provides a relatively high bandwidth connection to accommodate relatively high traffic volume between the network database and nodes for improved system performance relative to prior art configurations.
      <br/>
      Locally coupling the network database to the network eliminates the need to tunnel various messages needed to effect a network service when using a tiered architecture common in the HVAC industry.
      <br/>
      The communications elements include com ports adapted to couple the embedded node to a workstation via a conventional network, and to an ECHELON network.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>APPENDIX</heading>
    <p num="1">
      One microfiche Appendix is included with this application.
      <br/>
      The Appendix is a software code listing comprising a total of 26 pages.
    </p>
    <heading>TECHNICAL FIELD</heading>
    <p num="2">
      The present invention relates, in general, to network management systems.
      <br/>
      In particular, the present invention relates to method and systems for network management in an ECHELON network.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="3">
      The use of computer networking techniques is rapidly growing.
      <br/>
      Computer networks are being used to interconnect a wide variety of devices from industrial control systems to home appliances.
      <br/>
      In these emerging networks, many `embedded` computers are being attached to networks.
      <br/>
      As used herein, the term `embedded` computer refers to a device having a processor within it and in some cases limited user I/O ("input and/or output"), but lacking a complex user interface such as a large display and full keyboard.
      <br/>
      The term `node` refers to a device that is connected to the network and is capable of communicating with other network devices.
      <br/>
      Similarly, the term `embedded node` refers to a device having an embedded computer within it that is connected to a network and is capable of communicating with other network devices or nodes.
      <br/>
      The term `local` or `local coupling` refers to being coupled directly to other network nodes by a communication bus without any intervening devices.
      <br/>
      Conversely, the term `remote` or `remote coupling` refers to being coupled to other nodes indirectly, i.e. through another device, such as by "tunneling" through another network or device, or by modem.
    </p>
    <p num="4">
      Although embedded computers have conducted communications over networks in the past, network management systems supporting them have had various limitations.
      <br/>
      The term `network management` as used herein refers to management of configurations, connections, and other parameters related to the particular network.
      <br/>
      In most instances where network management functionality is required, larger computers (e.g., user workstation) have been used to provide such functionality.
      <br/>
      This is problematic in networking environments where such larger computers are impractical or unfeasible.
      <br/>
      For example, in a small to medium sized HVAC (i.e., heating, ventilation and air-conditioning) system, it is not economically prudent to include a larger computer on the network with the embedded controller.
      <br/>
      Thus, for any network management function to be performed, it is conventional for a technician to arrive with a portable computer and attach it to the network, thereby facilitating certain network management functions.
    </p>
    <p num="5">
      As one networking example, ECHELON networks (developed by Echelon Corporation of Palo Alto, Calif.) are used in a variety of embedded processor applications and are especially well-suited to networking process and environmental control devices.
      <br/>
      As used herein, the term `ECHELON network` refers to a network consisting of devices or nodes that implement a LONTALK protocol.
      <br/>
      LONTALK is a trademark of the aforementioned ECHELON Corporation and refers to a protocol used by applications to communicate with nodes in an ECHELON network.
      <br/>
      An overview of the LONTALK protocol is described in section 8 of Motorola LonWorks Technology Device Data, Rev. 3.1 (hereinafter, "LonWorks Tech.
      <br/>
      Publication") published in 1997 by Motorola Corporation of Palatine, Ill.
      <br/>
      The LONTALK protocol provides a means of exchanging data between devices using Network Variables as described in sections 7.2 and 7.3 of the LonWorks Tech.
      <br/>
      Publication.
      <br/>
      There are various data structures within an Echelon device, which must be correctly configured for the device to function correctly.
      <br/>
      These data structures are described in Appendix A of the LonWorks Tech.
      <br/>
      Publication.
      <br/>
      The messages defined in the LONTALK protocol which are needed to configure these various data structures and otherwise control and monitor the device are described in Appendix B. Sections 7, 8 and Appendices A and B of the LonWorks Tech.
      <br/>
      Publication are fully incorporated by reference herein.
      <br/>
      One example of a prior art network management device for an ECHELON network is the model NSS-10 from Echelon Corp. shown in FIG. 1.
      <br/>
      The NSS-10 includes a hosted ECHELON node (i.e., an ECHELON communication chipset having a processor available for executing user applications) that includes a network database and a single client application locally attached thereto.
      <br/>
      Only a single, local, client application is supported.
      <br/>
      Another example of a prior art network management system for an ECHELON network is the model LNS system from Echelon Corp. shown in FIG. 2.
      <br/>
      LNS is a non-embedded solution and is too expensive and impractical for many ECHELON networks.
      <br/>
      For example, being non-embedded, LNS would have to be coupled remotely to the ECHELON network to support the network architectures common in the HVAC industry, i.e. by "tunneling" through other networks or by serial port modem.
      <br/>
      Such remote coupling generally introduces signal timing and other complexities into the system.
    </p>
    <p num="6">
      Thus, there does not exist a network management system for an ECHELON network that is embeddable, inexpensive and supportive of multiple clients.
      <br/>
      The present invention is a solution to this problem.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="7">
      The subject matter regarded as the present invention is particularly pointed out and distinctly claimed in the concluding portion of the specification. The invention, however, both as to organization and method of practice, together with further objects and advantages thereof, may best be understood by reference to the following detailed description taken in conjunction with the accompanying drawings in which:
      <br/>
      FIGS. 1-2 are prior art network management implementations in ECHELON networks;
      <br/>
      FIGS. 3-5 are system diagrams of components of network management systems in accordance with embodiments of the present invention;
      <br/>
      FIG. 6 is a data-flow diagram of message flow through the network database manager pursuant to an embodiment of the present invention;
      <br/>
      FIG. 7 is a data-flow diagram of message flow through the network service provider according to an embodiment of the present invention;
      <br/>
      FIG. 8 is a session state diagram according to an embodiment of the present invention;
      <br/>
      FIG. 9 is a representation of connection tables according to an embodiment of the present invention; and
      <br/>
      FIG. 10 is a representation of address tables according to an embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT</heading>
    <p num="8">
      Turning to the Figures, various elements of an ECHELON network management system are depicted in accordance with the present invention.
      <br/>
      An important aspect of the present invention is the realization that in an ECHELON network management system, a particularly high volume of signal traffic may be generated between a network database and the nodes when a service is executed.
      <br/>
      The present invention thus includes an embedded node 10, 10', 16 (FIGS. 3, 4 &amp; 5, respectively), including network database and communications elements, which is coupled locally on an ECHELON network 14 (FIGS. 3 &amp; 4).
      <br/>
      This local coupling provides a relatively high bandwidth connection to accommodate the relatively high traffic between the network database and nodes for improved system performance relative to prior art configurations.
      <br/>
      Having the network database locally coupled to the network eliminates the need to tunnel various messages needed to effect a network service when using a tiered architecture which is common in the HVAC industry.
    </p>
    <p num="9">
      More particularly, as shown in FIG. 3, embedded node 10 includes a network database (network dB) 11 coupled to a network database manager (network DBMS) 13.
      <br/>
      A communications layer 31 includes com ports 32 and 33 adapted to couple node 10 to a workstation 12 via conventional network 15, and to an ECHELON network 14, respectively.
      <br/>
      As shown, communications layer 31 serves to connect network DB 11 to these networks via network DBMS 13.
      <br/>
      Network DBMS 13 is responsive to network management messages on ECHELON network 14 or workstation 12 such that network connectivity, variable and other information is maintained in accordance with the LONTALK specification.
    </p>
    <p num="10">In an alternate embodiment shown in FIG. 4, node 10' includes a communications layer 31' which may include a single com port 33, including a LONCOM (trademark of SIEBE Corporation) communication stack 45, coupled to ECHELON network 14, which in turn, is coupled to workstation 12'.</p>
    <p num="11">
      Workstations 12 and 12' include further elements depicted in FIGS. 3 &amp; 4.
      <br/>
      Particularly, one or more application programs 39 communicate with a network service provider (network SP) 35 via a network service provider application programming interface 37 (network SP API).
      <br/>
      Network SP 35 is coupled to a communication layer.
      <br/>
      As shown in FIG. 3, a communication layer 34 may include various communication stacks, such as a BACNET (trademark of `ASHRAE` (the American Society of Heating, Refrigeration and Air Conditioning Engineers)) communication stack 43, a serial communication stack 41, and any other suitable communication stack 44 such that a variety of communication protocols are supported by workstation 12.
      <br/>
      In the embodiment shown in FIG. 4, a communication layer 34' includes a LONCOM communication stack 45 for connecting workstation 12' to ECHELON network 14.
    </p>
    <p num="12">
      Although preferably embedded as discussed herein, in one embodiment of the present invention, network DBMS 13, network DB and network SP may be resident in a single computer, for example, a workstation 16 as depicted in FIG. 5.
      <br/>
      Network DB 11 is coupled through network DBMS 13 to communication layer 31'. Further, as discussed above, communication layer 31' includes LONCOM communication stack 45 for connection to an ECHELON network (not shown).
    </p>
    <p num="13">
      Operationally, FIGS. 6-7 are message flow diagrams corresponding to the network DBMS and the network SP.
      <br/>
      Turning first to FIG. 6, a network DBMS engine 61 includes a queue 63 for handling message flow.
      <br/>
      Messages arrive through two mechanisms, the first being a network database manager receive network message function/procedure 65 (NDBMReceiveNetMsg( )) which is responsible for receiving network DBMS requests and field responses from the communication layer.
      <br/>
      Timeouts for non-received messages/responses are communicated to network DBMS engine 61 through network database manager timeout procedure 67 (NDBMtimeout( )).
      <br/>
      Timeouts are generated by the operating system of the host processor.
      <br/>
      Network DBMS engine 61 sends messages to ECHELON devices using the network DBMS send message function 69 (NDBMSendMsg( )) which communicates through the communication layer.
    </p>
    <p num="14">
      Network SP message flow is depicted in FIG. 7.
      <br/>
      A network SP engine 71 receives messages through a queue 73 from several sources.
      <br/>
      Firstly, incoming responses from local and remote client applications and the network DBMS arrive through the network SP receive field message function/procedure 75 (NSPReceiveFieldMsg( )).
      <br/>
      Service invocations arrive through network service invocation function/procedure 77 (NSPInvokeService( )).
      <br/>
      Service invocations are network management service requests from client applications.
      <br/>
      Further, timeouts for unacknowledged message sent by the network SP arrive (from the Operating System) via network service provider timeout function/procedure 79 (NSPTimeout( )).
    </p>
    <p num="15">
      Outbound messages from network SP engine 71 may take several paths.
      <br/>
      A send field message function/procedure 81 (NSPSendLonMessage( )) handles the sending of network DBMS requests to the network (the network DBMS may be local or remote).
      <br/>
      Service results are returned to clients using a client call back function/procedure 83 (NSPClientCallback( )).
    </p>
    <p num="16">The software structures and function calls used in operation of the network DBMS and network SP are described in detail in the attached Appendix and are summarized hereinbelow.</p>
    <p num="17">
      The NETWORK SERVICE PROVIDER API is referenced in sections 6.n of the Appendix.
      <br/>
      Briefly, the Network SP API is the set of functions which allow applications to access the services of the Network SP and, indirectly, the Network DBMS.
      <br/>
      Beginning in section 6.2.1, the NSPInit( ) function initializes the Network SP.
      <br/>
      This allows multiple instances of the Network SP to be created to handle multiple logical networks.
    </p>
    <p num="18">
      The NSPClose( ) function is described in section 6.2.2. This function writes a terminate me sage to Network SP.
      <br/>
      The Network SP will then cleanup and terminate.
    </p>
    <p num="19">
      Prior to requesting any network management services, an application must register itself as a client with a call to NSPRegisterClient( ) as described in section 6.2.3 and receive a client handle.
      <br/>
      This handle will be called by the Network SP 35 to return responses to service invocations or pass exception messages received from the Network DBMS 13.
      <br/>
      A pointer to a function of type NSP_CLIENT_CALLBACK will also be passed to Network SP.
      <br/>
      This function will be called by the Network SP to return responses to service invocations or forward service pin messages from the Network DBMS.
      <br/>
      Successful registration also adds the client to the list of registered network SP clients.
      <br/>
      Conversely, the NSPDeregisterClient( ) function described in section 6.2.4 removes the client from the list of registered network SP clients.
    </p>
    <p num="20">
      A client invokes a service via the network SP by making a call to the NSPInvokeService( ) function described in section 6.2.5. In response to the invocation, the network SP will direct the request to either the network DBMS, or the network SP will handle it directly.
      <br/>
      Responses are returned from the network SP to the invoking client.
    </p>
    <p num="21">
      Each client application which will invoke network management services will supply a callback function which will process responses to service invocations.
      <br/>
      The call back function will be passed to the Network SP in a call to NSPRegisterClient( ) along with the callback handle.
      <br/>
      These client callback functions are discussed in section 6.2.6.
    </p>
    <p num="22">
      The Network SP is referenced in sections 7.n of the Appendix.
      <br/>
      Briefly described, the Network SP thread is started when the application calls NSPInit( ).
      <br/>
      After initialization, the NSP thread waits for messages to arrive on its queue.
      <br/>
      Messages can arrive as requests from the application (placed on the queue by NSPInvokeService( )), time out indications from the transactions timers, and responses or events from the Network DBMS.
    </p>
    <p num="23">
      As discussed in section 7.3, Network SP initialization starts with the creation of a message queue for receipt and transmission of messages.
      <br/>
      A communications link layer is next initialized, and handles transfer of information from the network SP to a remote network DBMS 13.
      <br/>
      Next, the network DBMS is located, as it may be either local or remote.
      <br/>
      If a network DBMS can not be found, initialization fails.
      <br/>
      Generally, the network DBMS is initialized before initialization of the Network SP.
    </p>
    <p num="24">
      Network SP operation is described in section 7.4. In summary of its operation, the network SP remains idle until a message arrives.
      <br/>
      Then, depending on the type of message, several execution paths are pursued.
      <br/>
      If the message is a service request from an application, then the request is forwarded to the network.
      <br/>
      A timer is started awaiting completion of the request via a confirmation response.
      <br/>
      The timer is configurable and specific wait times depend on the particular configuration.
    </p>
    <p num="25">
      If the message was a response (for example, from a service request), then the response timer is stopped and the response is returned to the application.
      <br/>
      If a time-out occurs (for example, the response timer expires) then a time-out response is returned to the application through client call back function/procedure 83.
    </p>
    <p num="26">
      Various optional Network SP Services which may be used to provide additional functionality to the network SP are set forth in sections 7.5.n. These services include NS_EXTRACT_XIF (section 7.5.1), which may be used to extract the external interface of a node from its self-identification/self documentation data.
      <br/>
      NS_DOWNLOAD_APPLICATION (Section 7.5.2) may be used to download a new application into a node.
      <br/>
      NS_READ_CP, (7.5.3) may be used to read a LonMark (trademark of Echelon Corporation) configuration property value from a node.
      <br/>
      Conversely, NS_WRITE_CP (7.5.4)may be used to write a LonMark configuration property value to a node.
    </p>
    <p num="27">
      Network DBMS operations and function calls are described in sections 8.n of the Appendix.
      <br/>
      Briefly described, the Network DBMS is started with a call to NetDBMInitialize( ).
      <br/>
      It consists of a single thread and two queues: a message queue and a wait queue.
      <br/>
      The wait queue is used to store pending service invocations.
      <br/>
      The message queue will receive service invocations from Network SP, respond to network management commands the Network DBMS (NDBM) has made, transaction time outs and service pin indications.
      <br/>
      The NDBM performs only one service at a time.
      <br/>
      If it is in the process of handling a service and another service invocation arrives, the second and all subsequent invocations will be placed on the wait queue.
      <br/>
      After the first service is complete, the NDBM will remove the second invocation from the wait queue and begin processing it.
    </p>
    <p num="28">
      Beginning at section 8.3, network DBMS initialization is described.
      <br/>
      During initialization, the message queue and a wait queue is created, the communication link layer is opened, and a conflict check is performed to insure the existence of only one network DBMS.
    </p>
    <p num="29">
      Network DBMS operation is described in section 8.4. To summarize the operation, a main loop begins with the network DBMS waiting for messages to arrive on the message queue.
      <br/>
      Depending on a type of message received, different actions are taken.
      <br/>
      If the message is a service invocation, and if a service is currently being executed, the invocation is put on the wait queue.
      <br/>
      If a current service is not being executed the appropriate network database or network action is taken.
      <br/>
      In the event of a network management response, if the subject command is complete, the response is sent to the application, otherwise, the next network management Command is sent.
      <br/>
      Further, one type of message may be a time-out for an unanswered response, or a service pin per the LONTALK standard or protocol.
    </p>
    <p num="30">
      The WHILE state=IDLE will execute once since the state is modified in the subsequent statement.
      <br/>
      There will be some services which require many transactions (i.e. create Echelon Network Management messages to be sent to a node which requires waiting for a response).
      <br/>
      There are also some services which require no transactions and will therefore return the state to IDLE immediately.
      <br/>
      In the latter instance, the WHILE loop, which is within the DO loop, will process another message from the wait queue if one is there.
    </p>
    <p num="31">Appendix sections 8.5 and 8.6 contain network database manager service message formats and network DBMS request/response formats, respectively.</p>
    <p num="32">
      Described in sections 8.6.n are the network database manager function calls used to perform network database services.
      <br/>
      To begin, the NS_ADD_NODE service request adds a node to the node table as described in section 8.6.1. The algorithm for adding a node to the network database begins with checking whether the node already exists in the network database (i.e., to eliminate redundancy).
      <br/>
      Thereafter, the existence of the device on the network is verified and pertinent ECHELON related information is determined.
      <br/>
      The node is then set off-line, configured, and thereafter set on-line.
    </p>
    <p num="33">
      Removing a node is performed using the NS_REMOVE_NODE service request described in section 8.6.2. According to this function, the node is removed from the node table and placed in an unconfigured state.
      <br/>
      In summary, a node is removed by first verifying that it is currently a member of the network database and that it is not a part of any connection.
      <br/>
      Then it is removed from any address groups that it is within, set in an off-line and unconfigured state, and removed from the network database.
    </p>
    <p num="34">
      A node may be replaced with a new device using the NS_REPLACE_NODE service request of section 8.6.3. This service request may be utilized in the event a device fails and must be replaced.
      <br/>
      This allows the new device to be configured as the same node with the same network connections as the failed device.
      <br/>
      Algorithmically, replacing a node is similar to adding a node, however; in addition to setting the new node as on-line and configured, network variables are bound to the new device.
    </p>
    <p num="35">
      The NS_ADD_CONNECTION and NS_REMOVE_CONNECTION network management service requests of section 8.6.4 and 8.6.5 are used to add and remove network variable connections within the LONTALK configuration.
      <br/>
      To add a connection, the nodes between which the connection exists are verified to exist in the network database and to be active.
      <br/>
      Thereafter, variable format matching issues are resolved and address and network variable tables are updated to reflect the added connection.
      <br/>
      Correspondingly, removing a connection includes verifying that the connection exists, unbinding each target, and removing the target's network variables from the network database.
      <br/>
      If all targets within the connection are deleted, then the entire connection is removed from the network database.
    </p>
    <p num="36">
      Explicit creation of address groups is facilitated by the NS_ADD_ADDRESS_GROUP service request of section 8.6.6 and the NS_REMOVE_ADDRESS_GROUP service request of section 8.6.7. The NS_ADD_ADDRESS_GROUP service request may be utilized to add or modify an address group.
      <br/>
      This may be necessary in the event there is an application in any node which needs to send an explicit message using group addressing.
      <br/>
      The NS_REMOVE_ADDRESS_GROUP may be utilized to remove an address group from the Network DB AddressGroup Table.
    </p>
    <p num="37">
      To add an address group, it is initially determined whether the group presently exists.
      <br/>
      If the group does not exist, the group is created in the network database.
      <br/>
      Then, the address table in each affected node is updated.
      <br/>
      In regard to deletion of an address group, it will first be determined that no connections are currently using that group address.
      <br/>
      If not, then the group is removed from the database and the address table in each affected node is updated.
    </p>
    <p num="38">
      On occasion, the network DB will need reconstruction.
      <br/>
      The NS_RECOVER_DATABASE service request described in section 8.6.8 reconstructs the network database through an interrogation of the network topology.
      <br/>
      In short, this function "learns" the network topology and configuration.
      <br/>
      This service request will be invoked when the network database is missing, suspect or a new network has been installed.
      <br/>
      Operationally, the service request broadcasts a network message requesting responses from each node and constructs the node table accordingly.
      <br/>
      Once the node table has been constructed, each node is queried to determine all address tables and binding information.
    </p>
    <p num="39">
      A next group of function calls is used to handle connection descriptions within the network database.
      <br/>
      Firstly, connection descriptions are added using the NS_ADD_CONN_DESC service request of section 8.6.9. This function call first checks if the maximum number of connections has been exceeded, and if not, adds the connection description to the network database.
      <br/>
      The NS_MODIFY_CONN_DESC service request (section 8.6.10) is used to modify a connection description in the network DB.
      <br/>
      The network database is checked to verify that the connection description exists.
      <br/>
      The network database is then modified and all affected nodes are modified.
      <br/>
      Lastly, connection descriptions are removed from the network database using the NS_REMOVE_CONN_DESC service request of section 8.6.11. Functionally, removal includes verifying the connection descriptions existence, checking if it is currently used, and if unused, it is removed from the network database.
    </p>
    <p num="40">
      A next set of commands are used to "get" and "set" properties of objects within the network DB.
      <br/>
      The NS_GET_PROPERTY service routine of section 8.6.12 is used to retrieve a property of an object within the network DB.
      <br/>
      The function call is passed a property description and object identifier, and returns the corresponding property value.
      <br/>
      Conversely, the NS_SET_PROPERTY function call of section 8.6.13 is passed an object, a property and a value to which it sets the object property.
    </p>
    <p num="41">
      On occasion, it may be useful to either import or export the network database.
      <br/>
      This feature is useful for backup purposes, or for moving the network database to another node.
      <br/>
      The NS_EXPORT_DATABASE and NS_IMPORT_DATABASE service request of section 8.6.14 and 8.6.15, respectively, may be used to perform network database export and import.
    </p>
    <p num="42">
      To facilitate communications between the network SP and the network DBMS, the network SP registers with the network DBMS.
      <br/>
      The NS_REGISTER_NSP service request of section 8.6.16 facilitates the network SP registering with, and thereby receiving event notifications (i.e. exceptions) from the network DBMS.
    </p>
    <p num="43">
      Network DBMS exception messages are summarized in section 8.7 of the Appendix.
      <br/>
      These messages are event driven and generated by Network DBMS.
      <br/>
      From the point of view of a Network SP, all other communications are request/response with the SP requesting and NetDBM generating a response/error.
      <br/>
      Two exceptions to these communications are defined.
      <br/>
      The NS_XCP_NETWORK_SP_ADDED exception discussed in 8.7.1 allows all other currently registered NetworkSPs know that there is another user on the network.
      <br/>
      The NS_XCP_SERVICE_PIN exception discussed in 8.7.2 is generated when a service pin is pressed on any node on the wire and the service pin message is received by NetDBM.
    </p>
    <p num="44">
      Internal Software Components are discussed in section 8.8, including the Session/Transaction State Machine described in section 8.8.1. The NetworkDBM must break each service request down to the appropriate modifications to the NetworkDB and make the appropriate changes in the affected nodes.
      <br/>
      Some services will require retrieving information from various nodes before further processing can be done.
      <br/>
      Depending on the complexity of the services a session state machine, such as shown in FIG. 8, will be employed with a number of transactions possibly required for each state.
      <br/>
      In most cases a single transaction will result in a single Echelon Network Management message being sent to a device.
    </p>
    <p num="45">
      Occasionally errors may be generated in the event a modification to a device required to process some NetworkManagement services could not be completed.
      <br/>
      Recovery of such errors is discussed in 8.8.2.
    </p>
    <p num="46">
      Address Table Modifications are set forth in 8.8.3. This function is used to determine the address group for a particular connection.
      <br/>
      The address groups will be scanned for a fit and if not found, an existing group will be modified or a new group will be created.
    </p>
    <p num="47">
      Contained in section 9 is the network database structure.
      <br/>
      Within the network database are four tables, a Node Table, Connection Tables (including HubData and TargetData), and a Group Table.
      <br/>
      The Node Table is described in section 9.2.1 and contains information on the complete network database and information for each managed node which is needed by Network DBMS to process requested services.
    </p>
    <p num="48">
      Information on network binding is contained in two Connection Tables discussed in 9.2.2 and shown in FIG. 9.
      <br/>
      Network bindings can be one to one, one to many, or many to one.
      <br/>
      To represent this a hub is selected which is the end of the connection with only one Network Variable (NV).
      <br/>
      Information on the hub NV is maintained in the ConnectionHub Table or HubData Table 91 and indexed by selector number.
      <br/>
      Information on one or many target NV(s) is maintained in the ConnectionTarget Table or TargetData Table 93.
      <br/>
      The links between these tables are shown in FIG. 9.
    </p>
    <p num="49">
      The Group Table is discussed in 9.2.3 and shown in FIG. 10. The nodes within a given Domain can be organized in up to 255 groups.
      <br/>
      A node may belong to up to 15 groups.
      <br/>
      A group may span multiple subnets.
      <br/>
      A group may consist of a subset of MAX_NUM_NODES nodes.
      <br/>
      For acknowledged LONTALK message services a group is limited to 64 nodes.
      <br/>
      The Address Group information will be stored in two arrays.
      <br/>
      The asAddrGroup�� array 95 will be indexed by address group number and contain the index of the first member of the group in the asGroupMember�� array 97.
      <br/>
      The Group Table will also contain an array of connection descriptions.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>An ECHELON network comprising:</claim-text>
      <claim-text>an embedded node including a network database manager responsive to network management service requests from multiple client applications; at least one ECHELON connection communicably coupled to at least one other node, to said multiple client applications, and to at least one network service provider; said embedded node including a network database having connectivity information for said at least one ECHELON connection; Wherein said at least one network service provider is coupled to said multiple client applications to communicate said network management service requests to and from said network database manager.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The ECHELON network as set forth in claim 1, wherein said at least one other node comprises a workstation.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The ECHELON network as set forth in claim 2, wherein said workstation comprises said multiple clients.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The ECHELON network as set forth in claim 1, further comprising a plurality of ECHELON connections adapted for connection to a plurality of other nodes, said network database having connectivity information for each of said plurality of ECHELON connections.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The ECHELON network as set forth in claim 4, wherein said plurality of other nodes further comprises a plurality of workstations each having at least one client.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The ECHELON network as set forth in claim 1, being adapted for operation alternately with and without said network service provider being coupled thereto.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The ECHELON network as set forth in claim 1, wherein said plurality of clients are integrally coupled to said at least one network service provider and said least one network service provider is adapted for being coupled remotely to said embedded node.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The ECHELON network as set forth in claim 1, further comprising a plurality of ECHELON connections adapted for connection to a plurality of other nodes, said network database having connectivity information for each of said plurality of ECHELON connections.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The ECHELON network as set forth in claim 8, wherein said plurality of other nodes further comprises at least one first node and at least one second node, said at least one first node including said network service provider; said embedded node being coupled to said at least one second node by a network bus;</claim-text>
      <claim-text>and said embedded node adapted for being coupled to said at least one first node by a coupling discrete from said network bus.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The ECHELON network as set forth in claim 9, further comprising a plurality of said first nodes each including a discrete network service provider.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The ECHELON network as set forth in claim 8, wherein said embedded node is coupled to said plurality of other nodes by a network bus.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The ECHELON network as set forth in claim 8, wherein said plurality of other nodes further comprises at least one first node and at least one second node, said at least one first node including said network service provider; said embedded node being locally coupled to said at least one second node so that network traffic between said network database manager and said at least one second node is effected irrespective of a network service provider.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The ECHELON network as set forth in claim 12, wherein said embedded node is adapted for being remotely coupled to said at least one first node.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The ECHELON network as set forth in claim 1, further comprising said at least one other node being connected to said at least one ECHELON connection, said at least one other node including a network service provider and a plurality of clients.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The ECHELON network as set forth in claim 14, wherein said plurality of other nodes further comprises at least one first node and at least one second node, said at least one first node including said network service provider; said embedded node being locally coupled to said at least one second node;</claim-text>
      <claim-text>and said embedded node being remotely coupled to said at least one first node.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The ECHELON network as set forth in claim 1, wherein said embedded node is without a network service provider.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The ECHELON network as set forth in claim 16, wherein said embedded node is adapted for being coupled to a network service provider.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. An embedded node for use in an ECHELON network comprising: a network database manager; a network database coupled to said network database manager; said network database manager responsive to network management service requests from multiple clients that may be disposed on said ECHELON network;</claim-text>
      <claim-text>and said network database including connection tables for maintenance of variable connection for multiple clients within said ECHELON network.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. An ECHELON network including: a first node, said first node being an embedded node and including a network database manager and a network database coupled thereto, said network database manger responsive to network management service requests; a second node, said second node being an operator workstation and including a network service provider adapted to generate said network management service requests;</claim-text>
      <claim-text>and said second node including a plurality of clients adapted to generate said network management services requests; wherein said first node and said second node are communicably coupled through a network connection to facilitate ECHLON network management.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The ECHELON network set forth in claim 19, further comprising a plurality of said second nodes.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The ECHELON network as set forth in claim 20, wherein at least one of said plurality of second nodes is remotely coupled to said first node.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The ECHELON network as set forth in claim 20, wherein at least one of said plurality of second nodes is locally coupled to said first node.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. A method of operation in an ECHELON network said method comprising: executing a plurality of application programs in a first computer; executing a network service provider on said first computer, said network service provider being communicably coupled with said application program in the provision of network management services;</claim-text>
      <claim-text>and executing a network database manager on a second, embedded computer, said network database manager being communicably coupled to said network service provider through said ECHELON network in the provision of network database management to said network service provider.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The method as set forth in claim 23, wherein said embedded node is operated by: creating a message queue; creating a wait queue; receiving network management service request messages; receiving LONTALK messages over said ECHELON network; processing LONTALK messages relating to a current network management service request through said message queue;</claim-text>
      <claim-text>and storing messages relating to other than current network management service requests on said wait queue.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. A method of operation of an ECHELON network including an embedded node and at least two other nodes, said method comprising the steps of: providing said embedded node with a network database containing information relating to said at least two other nodes, and being responsive to communication from multiple clients; said embedded node receiving a first LONTALK message from a first node of said at least two other nodes, said message being a precipitator of a first network database action by said embedded node; said embedded node beginning said network database action resulting from said first LONTALK message;</claim-text>
      <claim-text>and said embedded node receiving a second LONTALK message from a second node of said at least two other nodes, said message being a precipitator of another network database action by said embedded node;</claim-text>
      <claim-text>and said embedded node completing said first network database action prior to acting upon said other network database action.</claim-text>
    </claim>
  </claims>
</questel-patent-document>