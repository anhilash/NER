<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185314B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185314</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185314</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26693044" extended-family-id="42055979">
      <document-id>
        <country>US</country>
        <doc-number>09020113</doc-number>
        <kind>A</kind>
        <date>19980206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09020113</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43153262</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>2011398</doc-number>
        <kind>A</kind>
        <date>19980206</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09020113</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>5097297</doc-number>
        <kind>P</kind>
        <date>19970619</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-60050972</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G01S   3/786       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>01</class>
        <subclass>S</subclass>
        <main-group>3</main-group>
        <subgroup>786</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06T   5/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>5</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06T   7/20        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>7</main-group>
        <subgroup>20</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G08B  13/194       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>08</class>
        <subclass>B</subclass>
        <main-group>13</main-group>
        <subgroup>194</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>382103000</text>
        <class>382</class>
        <subclass>103000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>348169000</text>
        <class>348</class>
        <subclass>169000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>348700000</text>
        <class>348</class>
        <subclass>700000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>382107000</text>
        <class>382</class>
        <subclass>107000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>382220000</text>
        <class>382</class>
        <subclass>220000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06K-009/32</text>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>9</main-group>
        <subgroup>32</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G01S-003/786C1</text>
        <section>G</section>
        <class>01</class>
        <subclass>S</subclass>
        <main-group>003</main-group>
        <subgroup>786C1</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G06K-009/00F3U</text>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>009</main-group>
        <subgroup>00F3U</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>G06T-007/20C</text>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>007</main-group>
        <subgroup>20C</subgroup>
      </classification-ecla>
      <classification-ecla sequence="5">
        <text>G06T-007/20K</text>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>007</main-group>
        <subgroup>20K</subgroup>
      </classification-ecla>
      <classification-ecla sequence="6">
        <text>G08B-013/196A</text>
        <section>G</section>
        <class>08</class>
        <subclass>B</subclass>
        <main-group>013</main-group>
        <subgroup>196A</subgroup>
      </classification-ecla>
      <classification-ecla sequence="7">
        <text>G08B-013/196A3</text>
        <section>G</section>
        <class>08</class>
        <subclass>B</subclass>
        <main-group>013</main-group>
        <subgroup>196A3</subgroup>
      </classification-ecla>
      <classification-ecla sequence="8">
        <text>G08B-013/196S3T</text>
        <section>G</section>
        <class>08</class>
        <subclass>B</subclass>
        <main-group>013</main-group>
        <subgroup>196S3T</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06K-009/32</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>9</main-group>
        <subgroup>32</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170105</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G01S-003/7865</classification-symbol>
        <section>G</section>
        <class>01</class>
        <subclass>S</subclass>
        <main-group>3</main-group>
        <subgroup>7865</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170105</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06K-009/00295</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>K</subclass>
        <main-group>9</main-group>
        <subgroup>00295</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170105</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20170101</date>
        </classification-scheme>
        <classification-symbol>G06T-007/246</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>7</main-group>
        <subgroup>246</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170102</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20170101</date>
        </classification-scheme>
        <classification-symbol>G06T-007/277</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>7</main-group>
        <subgroup>277</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170102</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G08B-013/19602</classification-symbol>
        <section>G</section>
        <class>08</class>
        <subclass>B</subclass>
        <main-group>13</main-group>
        <subgroup>19602</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170105</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G08B-013/19608</classification-symbol>
        <section>G</section>
        <class>08</class>
        <subclass>B</subclass>
        <main-group>13</main-group>
        <subgroup>19608</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170105</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G08B-013/19673</classification-symbol>
        <section>G</section>
        <class>08</class>
        <subclass>B</subclass>
        <main-group>13</main-group>
        <subgroup>19673</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20170105</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>12</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>20</number-of-drawing-sheets>
      <number-of-figures>31</number-of-figures>
      <image-key data-format="questel">US6185314</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">System and method for matching image information to object model information</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>SACKS JACK M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4739401</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4739401</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>TREW TIMOTHY IAN PATERSON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5280530</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5280530</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>JAMES ENOCH, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5285273</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5285273</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>KARA ATSUSHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5323470</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5323470</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>BRADY MARK J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5434927</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5434927</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>BRADY MARK J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5761326</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5761326</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>LE GOUZOUGUEC ANNE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5883969</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5883969</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>TAMIR MICHAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5923365</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5923365</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>MAHALANOBIS ABHIJIT</text>
          <document-id>
            <country>US</country>
            <doc-number>5947413</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5947413</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Cai, et al "Automatic Tracking of Human Motion in Indoor Scenes Across Multiple Synchronized Video Streams", pp. 356-362, IEEE, Jan. 1998.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Munno, et al "Automatic Video Image Moving Target Detection for Wide Area Surveillance", pp. 47-57, IEEE, 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>Lane, et al "Robust Tracking of Multiple Objects in Sector-Scan Sonar Image Sequences Using Optical Flow Motion Estimation", pp. 31-46, IEEE, vol. 23, No. 1, Jan. 1998.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>"Deformable Contours: Modeling, Extraction, Detection and Classification" by Kok Fung Lai, 1994.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>"Vision Tutor" Version 1.1 Lecture Guide Ch. 5-6, from Amerinex Artificial Intelligence, Inc. 1995, pp. 5-1-6-90.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>"Reduction of color space dimensionality by moment-preserving thresholding and its application for edge detection in color images" by Chen-Kuei Yang et al., in Pattern Recognition Letters, 1996, pp. 481-490.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="7">
          <text>"Automatic Feature Point Extraction and Tracking in Image Sequences for Unknown Camera Motion" by Qinfen Zheng and Rama Chellappa, IEEE Proc. 4th International Conference on Computer Vision, 1993, pp. 335-339.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="8">
          <text>"Object Tracking Using Curvilinear Features" by J.G. Landowski and R.S. Loe, SPIE vol. 974 Applications of Digital Image Processing XI (1988), pp. 353-360.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="9">
          <text>"Detection and Tracking of Facial Features by Using Edge Pixel Counting and Deformable Circular Template Matching" by De Silva, Aizawa and Hatori, IEICE Trans. Inf. &amp; Syst. vol. E78-D, No. 9, Sep. 1995, pp. 1195-1207.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/050,972</doc-number>
          <date>19970619</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/050972</doc-number>
          <date>19970619</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>NCR Corporation</orgname>
            <address>
              <address-1>Dayton, OH, US</address-1>
              <city>Dayton</city>
              <state>OH</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>NCR</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Crabtree, Ralph N.</name>
            <address>
              <address-1>Atlanta, GA, US</address-1>
              <city>Atlanta</city>
              <state>GA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Moed, Michael C.</name>
            <address>
              <address-1>Roswell, GA, US</address-1>
              <city>Roswell</city>
              <state>GA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Khosravi, Mehdi</name>
            <address>
              <address-1>Roswell, GA, US</address-1>
              <city>Roswell</city>
              <state>GA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Needle &amp; Rosenberg, P.C.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Tran, Phuoc</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A tracking system and method for evaluating whether image information for a region cluster of a video frame of a scene represents an hypothesis of an object to be tracked, such as a person.
      <br/>
      At least one real-world feature of a region cluster corresponding to an object to be tracked is generated.
      <br/>
      For example, the at least feature is at least one possible location of a predetermined portion of an object represented by the region cluster is determined based on a viewing angle of the scene of the video camera.
      <br/>
      A distance from the video camera to the object corresponding to the region is determined in real-world coordinates for each possible location of the predetermined portion of the region cluster.
      <br/>
      Real-world size and location information for the region cluster is determined based on the distance.
      <br/>
      The real-world size and location information for the region cluster is compared with statistical information for the particular type of object to determine a confidence value representing a measure of confidence that the region cluster represents the particular type of object.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application claims the benefit of U.S. Provisional Application Ser.
      <br/>
      No. 60/050,972 filed Jun. 19, 1997.
    </p>
    <heading>CROSS REFERENCE TO RELATED APPLICATIONS</heading>
    <p num="2">Cross reference is made to the following commonly assigned co-pending applications.</p>
    <p num="3">
      1. U.S. patent application Ser.
      <br/>
      No. 09/019,595, entitled "System And Method For Tracking Movement Of Objects In A Scene Using Correspondence Graphs," filed on even date.
      <br/>
      2. U.S. patent application Ser.
      <br/>
      No. 09/019,989, entitled "System And Method For Determining A Measure Of Correspondence Between Image Regions Representing Objects In A Scene," filed on even date.
      <br/>
      3. U.S. patent application Ser.
      <br/>
      No. 09/020,323, entitled "System and Method For Tracking Movement of Objects In A Scene," filed on even date.
      <br/>
      4. U.S. patent application Ser.
      <br/>
      No. 09/020,202, entitled "Object Tracking System And Methods For Utilizing Tracking Information," filed on even date.
      <br/>
      5. U.S. patent application Ser.
      <br/>
      No. 09/009,167, filed Jan.20, 1998, entitled "System And Method For Multi-Resolution Background Adaptation," the entirety of which is incorporated herein by reference.
      <br/>
      6. U.S. patent application Ser.
      <br/>
      No. 08/998,211, filed Dec. 24, 1997, entitled "System And Method For Segmenting Image Regions From A Scene Likely To Represent Particular Objects In The Scene," the entirety of which is incorporated herein by reference.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="4">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="5">The present invention generally to an image tracking system, and more specifically to a system and method for determining whether image regions correspond to objects to be tracked in a scene, such as persons.</p>
    <p num="6">2. Description of the Related Art</p>
    <p num="7">
      Basic video tracking systems are well known in the art.
      <br/>
      The video tracking systems heretofore known lack certain functional capabilities required for generating accurate and comprehensive tracking information.
    </p>
    <p num="8">
      Celenk et al. in a 1988 IEEE article entitled "Moving Object Tracking Using Local Windows," disclose a simple tracking mechanism that employs frame differencing and centroid generation to track objects in a non-cluttered scene.
      <br/>
      This method is not-likely to be successful because it cannot process information from complex scenes and also cannot handle the movement of objects that split and merge.
    </p>
    <p num="9">
      Tsai et al. in IEEE articles, published in 1981, entitled "Estimating Three-Dimensional Motion Parameters Of A Rigid Planar Patch, and Uniqueness" and "Estimation Of Three-Dimensional Motion Parameters Of Rigid Objects With Curved Surfaces" disclose that only seven points on a rigid object are needed to uniquely find the motion parameters of the object from two images.
      <br/>
      The constraints on the seven points are provided, in order to yield a unique solution.
      <br/>
      While this method provides localized motion information, it is not a robust tracking solution.
    </p>
    <p num="10">
      Liao in a 1994 article entitled "Tracking Human Movements Using Finite Element Methods" discloses the use of a class of contours called Snakes with Finite Element Methods to extract and model the contour of a person as they walk through an environment.
      <br/>
      The method, though accurate, is not very efficient, and techniques for automatically initializing the algorithm must still be determined.
      <br/>
      Although this method might be used as part of a tracking system, it is not sufficiently robust to form a complete solution by itself.
    </p>
    <p num="11">
      Montera et al. in a 1993 SPIE article entitled "Object Tracking Through Adaptive Correlation" disclose the use of correlation templates to identify the location of objects in a scene, and track the object from frame to frame.
      <br/>
      The correlation template can adapt to changing image conditions over time.
      <br/>
      However, the object must maintain a fairly fixed, rigid form in order for correlation techniques to work, and therefore is limited in its application to the general tracking problem.
    </p>
    <p num="12">
      Burt et. al. in a 1989 article entitled "Object Tracking With A Moving Camera" provide a detailed, informative review of the use of "optical flow" for detection and analysis of motion.
      <br/>
      This particular technique is slow and computationally expensive.
    </p>
    <p num="13">
      Sethi et al. in a 1987 article entitled "Finding Trajectories Of Feature Points In A Monocular Image Sequence" describe the use of path coherence and smoothness of motion as a cost measure for corresponding feature points on an object across image sequences.
      <br/>
      The cost measure is optimized on a sequence of frames using a technique called the Greedy Algorithm, which exchanges possible correspondences in order to optimize the cost measure.
      <br/>
      It is likely to work well in scenes in which feature points are easily extracted and maintained.
      <br/>
      However, it will not work well in cases of complex objects, object occlusion, object split and merge, and poor segmentation.
    </p>
    <p num="14">
      Salari et al. in a 1990 article entitled "Feature Point Correspondence In The Presence Of Occlusion" expands upon the previous work of Sethi and Jain by considering objects that are occluded.
      <br/>
      Specifically, the article discloses a set of phantom points which are constructed to represent the feature points missing due to occlusion.
      <br/>
      The Greedy Algorithm is updated to handle the phantom points.
      <br/>
      This method cannot handle complex objects.
    </p>
    <p num="15">
      There is a need for a sophisticated, yet cost effective, tracking system that can be used in many applications.
      <br/>
      For example, it has become desirable to acquire information concerning the activity of people, for example, within a scene of a retail establishment, a bank, automatic teller machines, bank teller windows, to name a few, using data gathered from analysis of video information acquired from the scene.
    </p>
    <p num="16">
      It is desirable to monitor the behavior of consumers in various locations of a retail establishment in order to provide information concerning the sequence of events and decisions that a consumer makes.
      <br/>
      This information is useful in many situations, such as, to adjust the location and features of services provided in a bank, to change merchandising strategies and display arrangements; etc.
      <br/>
      Consequently, it is necessary for the system to differentiate between people in the scene and between people and other stationary and moving objects in the scene.
    </p>
    <p num="17">
      A video tracking system is needed which can track the movement of complex objects, such as people, through a scene which may include complex objects itself.
      <br/>
      Moreover, a video tracking system which can function on an inexpensive computation platform offers significant advantages over the tracking systems heretofore known.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="18">
      Briefly, the present invention is directed to a tracking system and method for evaluating whether image information for a region cluster of a video frame of a scene which are hypotheses of objects to be tracked, such as a person.
      <br/>
      At least one real-world feature of a region cluster corresponding to an object to be tracked is generated.
      <br/>
      For example, the at least one feature is at least one possible location of a predetermined portion of an object represented by the region cluster is determined based on a viewing angle of the scene of the video camera.
      <br/>
      A distance from the video camera to the object corresponding to the region is determined in real-world coordinates for each possible location of the predetermined portion of the region cluster.
      <br/>
      Real-world size and location information for the region cluster is determined based on the distance.
      <br/>
      The real-world size and location information for the region cluster is compared with statistical information for the particular type of object to determine a confidence value representing a measure of confidence that the region cluster represents the particular type of object.
    </p>
    <p num="19">The objects and advantages of the present invention will become more readily apparent when reference is made to the following description taken in conjunction with the accompanying drawings.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="20">
      FIG. 1 is a block diagram showing the hardware components of the tracking system according to the present invention.
      <br/>
      FIG. 2 is a block diagram of a flow chart illustrating the architecture of the tracking system according to the present invention.
      <br/>
      FIG. 3 is a diagram showing an overview of how the tracking system constructs tracks according to the present invention.
      <br/>
      FIGS. 4A and 4B illustrate a flow chart depicting the operation of the object correspondence graph manager.
      <br/>
      FIG. 5 is a pictorial representation of a video frame.
      <br/>
      FIG. 6 is a diagram showing region clusters formed from regions extracted for parts of images from the video frame of FIG. 5.
      <br/>
      FIG. 7 is a block diagram for the model matcher forming a part of the tracking system according to the present invention.
      <br/>
      FIG. 8 is a flow chart depicting the operation of the model matcher.
      <br/>
      FIG. 9 is a pictorial diagram showing orientation result generated by the region corresponder and utilized by the model matcher for the region clusters of FIG. 6.
      <br/>
      FIG. 10 is a block diagram of the region corresponder forming a part of the tracking system according to the present invention.
      <br/>
      FIG. 11 is a flow chart depicting the operation of the region corresponder.
      <br/>
      FIGS. 12 and 13 are diagrams showing the operation of the region corresponder for one person object in the scene.
      <br/>
      FIG. 14 is a block diagram of the trajectory generator forming a part of the tracking system according to the present invention.
      <br/>
      FIG. 15 is a block diagram of the split/merge resolver forming a part of the tracking system according to the present invention.
      <br/>
      FIG. 16 is a flow chart depicting the operation of the split/merge resolver.
      <br/>
      FIG. 17 is a block diagram of the merge corresponder forming a part of the tracking system according to the present invention.
      <br/>
      FIG. 18 is a flow chart depicting the operation of the merge corresponder.
      <br/>
      FIGS. 19-25 are graphical diagrams showing the operation of the track correspondence graph manager.
      <br/>
      FIG. 26 is a block diagram of the occlusion corresponder forming a part of the tracking system according to the present invention.
      <br/>
      FIG. 27 is a graphical diagram showing how the occlusion corresponder generates direction color features for performing occlusion correspondence.
      <br/>
      FIG. 28 is a block diagram of the track supervisor forming a part of the tracking system according to the present invention.
      <br/>
      FIG. 29 is a block diagram of the track manager forming a part of the tracking system according to the present invention.
      <br/>
      FIG. 30 is a block diagram of the view manager forming a part of the tracking system according to the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="21">
      FIG. 1 illustrates the hardware components of the system according to the present invention.
      <br/>
      The hardware components are standard off-the-shelf components, and include one or more video cameras 110, one or more frame grabbers 120, and a processor 130, such as a personal computer (PC), having a memory 135 which stores software programs for controlling the processor 130.
      <br/>
      The combination of the video camera 110 and frame grabber 120 may collectively be referred to as an "image acquisition module" 145.
      <br/>
      The frame grabber 120 receives a standard video signal output by the video camera 110, such as a RS-170, NTSC, CCIR, or PAL video signal, which can be monochrome or color.
      <br/>
      In a preferred embodiment, the video camera(s) 110 are mounted or positioned to view a selected viewing area or scene 150 of interest, such as a checkout lane in a retail establishment, an automated teller machine (ATM), an entrance, an exit, or any other localized area where people or objects may move and/or interact with devices or other people or objects.
    </p>
    <p num="22">
      The frame grabber 120 is embodied, for example, by a Meteor (tm)  Color Frame Grabber, available from Matrox.
      <br/>
      The frame grabber 120 operates to convert the analog video signal into a sequence or stream of digital video frame images that are stored within the memory 135, and processed by the processor 130.
      <br/>
      For example, in one implementation, the frame grabber 120 converts the video signal into a 2 * 2 sub-sampled NTSC image which is 320 * 240 pixels or a 2 * 2 sub-sampled PAL color image which is 384 * 288 pixels, or in general a W * L image defining a single video frame of video information.
      <br/>
      A variety of other digital image formats and resolutions are also suitable, as will be recognized by one of ordinary skill in the art.
      <br/>
      Each pixel of a video frame has a predetermined bit resolution, such as 8 bits, and color data may be used to increase system performance.
      <br/>
      The digital information representing each video frame is stored in the memory 135 asynchronously and in parallel with the various processing functions described below.
    </p>
    <p num="23">
      Turning to FIG. 2, an architectural flow chart of a tracking system is shown.
      <br/>
      The tracking system is represented by reference numeral 200.
      <br/>
      Each block in FIG. 2 represents a function performed by a software program or module stored in the memory 135 and executed by the processor 130.
      <br/>
      The processor 130 is part of an industry standard personal computer (PC) using a standard operating system, such as Windows NT.RTM..
    </p>
    <p num="24">
      The individual functions of the tracking system are preferably implemented by way of a software program that may be installed in the memory 135 from another memory/storage medium, such as a CD-ROM, floppy disk(s), hard disk, etc., or it may be downloaded from an internet site, or from an on-line service for installation into the memory 135.
      <br/>
      The tracking system is implemented by several software programs or modules, each comprising a plurality of executable instructions which, when stored in the memory 135, cause the processor 130 to perform the processes shown and described hereinafter.
      <br/>
      However, one with ordinary skill in the art will appreciate that the region segmentation functionality could be implemented by one or more application specific integrated circuits, a digital signal processor or other suitable signal processing architectures.
    </p>
    <p num="25">
      The tracking system 200 comprises a region segmenter 210 and a background image generator 220.
      <br/>
      Each receives as input video frames representing activity within the scene.
      <br/>
      The region segmenter 210 extracts regions from the video frames that likely correspond to objects to be tracked or identified in the scene.
      <br/>
      The regions are extracted with reference to a background image that is generated by the background image generator 220.
    </p>
    <p num="26">
      There are many ways to generate a background image generator.
      <br/>
      A method and system developed by the assignee of the present application is disclosed in U.S. patent application Ser.
      <br/>
      No. 09/009,167, filed Jan. 20, 1998, entitled "System and Method for Multi-Resolution Background Adaptation".
      <br/>
      Similarly, a method and system for performing region segmentation developed by the assignee of the present invention is disclosed in U.S. patent application Ser.
      <br/>
      No. 08/998,211, filed Dec. 24, 1997, entitled "System and Method for Segmenting Image Regions From a Scene Likely to Represent Particular Objects in the Scene".
      <br/>
      The entirety of these prior applications are incorporated herein by reference.
    </p>
    <p num="27">
      The correspondence graph manager (CGM) 230 receives as input the regions output by the region segmenter 210.
      <br/>
      The output of the CGM 230 are the set of tracks generated for objects as they move through the field of view of the camera.
      <br/>
      The CGM 230 divides the tracking problem into two smaller problems, the generation of highly confident object track segments over a short period of time, and the linking of these highly confident track segments over a long period of time in order to form complete tracks.
      <br/>
      Accordingly, the CGM 230 comprises an object correspondence graph manager (OCGM) 300 and a track correspondence graph manager (TCGM) 400. The OCGM 300 constructs short term track segments.
      <br/>
      These track segments are then forwarded to the TCGM 400 which links track segments to form a complete track.
      <br/>
      The OCGM 300 and TCGM 400 manage two data objects in order to perform the tracking task, a first correspondence graph called an Object Correspondence Graph (OCG) and a second correspondence graph, called a Track Correspondence Graph (TCG).
      <br/>
      The OCGM 300 will be described in greater detail under the heading OBJECT CORRESPONDENCE GRAPH MANAGER and the TCGM 400 will be described in greater detail under the heading TRACK CORRESPONDENCE GRAPH MANAGER.
    </p>
    <p num="28">
      Referring back to FIG. 2, the remainder of the architecture of the tracking system 200 will be described.
      <br/>
      The track supervisor 250 receives tracks and other information from the TCGM 400 in response to certain trigger signals generated by the CGM 230 and outputs real-world object tracking information.
    </p>
    <p num="29">The track manager 260 provides long term storage of tracking information as well as on-line access to current tracking information.</p>
    <p num="30">The view manager 270 uses a priori information about the scene viewed by a video camera and generates real world transformation parameters to assist the track supervisor in outputting real world tracking information.</p>
    <p num="31">
      The tracking system 200 tracks movement of objects through a scene or viewing area.
      <br/>
      In particular, it tracks movement of people through a scene.
      <br/>
      However, the tracking system according to the present invention is not limited to tracking people: it is suitable for tracking vehicles, and other objects through a scene.
      <br/>
      The term "object" is used hereinafter in the description of the tracking system, and it is meant to include people, portions of a person (such as a hand, head, feet, etc.), vehicles, animals, and any other movable thing whose movement is desired to be tracked.
    </p>
    <p num="32">The tracking system operation may be summarized as a method for tracking movement of objects in a scene from a stream of video frames, each video frame comprising image information of the scene at an instant of time, comprising steps of: generating regions in a video frame which potentially represent objects to be tracked in the scene; comparing each region with object model information and generating a confidence value for each region that represents a likelihood that the region represents an object to be tracked; determining a correspondence between regions in consecutive video frames; and constructing tracks of objects through the scene over time based upon the correspondence determined between regions in consecutive video frames.</p>
    <heading>OBJECT CORRESPONDENCE GRAPH MANAGER</heading>
    <p num="33">
      Referring to FIG. 3, the OCG is shown at reference numeral 320.
      <br/>
      The OCG 320 represents the relationship between objects over time.
      <br/>
      The OCG 320 is a directed acyclic graph (DAG).
      <br/>
      The graph is composed of one or more levels, each level representing a moment in time.
      <br/>
      The OCG 320 contains six levels.
      <br/>
      Each graph level contains zero or more nodes, i.e. objects, for a particular moment in time.
      <br/>
      Each node in the OCG 320, called an OCG node 322, represents an object to be tracked.
      <br/>
      In the OCG 320, three OCG nodes, (3,1), (3,2), and (3,3), compose level three in the graph.
      <br/>
      Associated with each OCG node is the likelihood that the object at time t is the particular type of object to be tracked.
      <br/>
      This is determined by invoking a model matcher with the object.
      <br/>
      Each arc 324 in the graph links an object at time t, Ot, to the set of objects at time t+1 that potentially correspond to Ot.
      <br/>
      Each arc in the graph has an associated weight which describes the correspondence, degree of match, between an object at time t and time t+1.
      <br/>
      The weight of each arc is determined by the region corresponder 500 (referred to hereinafter) and/or the split/merge resolver 700 (referred to hereinafter).
    </p>
    <p num="34">
      An OCG track 324 is an ordered set or sequence of nodes from the OCG 320 that represents the path of an object through the camera view for a short period of time, i.e., a track segment.
      <br/>
      The set of OCG tracks are maintained in the OCG Track Table shown in FIG. 3.
      <br/>
      OCG tracks are identified by searching the OCG 320 for sequences of nodes that have high correspondence scores as well as high model match confidence scores.
      <br/>
      Each OCG track 324 maintains a track confidence, a value from 0.0 to 1.0, that represents the overall confidence of the object track.
      <br/>
      Also, each OCG track maintains a list of TCG track links, described in greater detail under the heading TRACK CORRESPONDENCE GRAPH MANAGER, that link OCG tracks to previously generated OCG tracks.
    </p>
    <p num="35">
      The inputs to the OCGM 300 are the set of regions extracted from a video frame by the region segmenter 210.
      <br/>
      The output of the OCGM 300 are short term high confidence tracks generated from the analysis of a predefined number of frames, generally eight to ten.
      <br/>
      OCG tracks 324 are forwarded to the TCGM 400.
      <br/>
      The OCGM 300 calls upon the functions of several other modules, including a region corresponder 500, a model matcher 600, a split/merge resolver 700, a trajectory generator 800 and a merge corresponder 900.
    </p>
    <p num="36">Turning to FIGS. 4A and 4B, the operation of the OCGM 300 will be described.</p>
    <p num="37">Create Region Clusters</p>
    <p num="38">
      The OCGM 300 begins in step 305 by constructing a set of region clusters from the regions output by the region segmenter 210.
      <br/>
      There are many ways to generate the regions, and one way is to compare image information for a video frame with image information for a background image (which is periodically generated).
      <br/>
      Each region cluster comprises one or more regions that are hypotheses of objects in the scene to be detected and/or tracked.
      <br/>
      There are a set of region cluster size constraints that control how regions are grouped into region clusters.
    </p>
    <p num="39">
      1. Width. The bounding box of the region cluster must be greater than a minimum width and less than a maximum width.
      <br/>
      2. Height. The bounding box of the region cluster must be greater than a minimum height and less than a maximum height.
      <br/>
      3. Total pixels.
      <br/>
      The total number of pixels comprising the region cluster must be greater than a minimum number of pixels and less than a maximum number of pixels.
      <br/>
      4. Minimum density.
      <br/>
      The density of a region cluster is calculated by dividing the total number of pixels by the area of the bounding rectangle.
      <br/>
      The bounding rectangle is defined as the minimum rectangle that contains all pixels comprising the region cluster.
      <br/>
      The density must exceed a minimum density value.
      <br/>
      5. Maximum distance.
      <br/>
      The distance between two region clusters can be approximated by the distance between the bounding rectangles.
      <br/>
      This distance must be less than a maximum distance.
    </p>
    <p num="40">All combinations of regions are considered for generating region clusters, within these constraints.</p>
    <p num="41">
      As an example, reference is made to a sample video frame of a scene, shown in FIG. 5.
      <br/>
      It can be seen from the video frame in FIG. 5 that there are several image regions in the scene that potentially represent people, shown at reference numerals 162, 164, 166, 168, 170 and 172.
      <br/>
      FIG. 6 shows the regions generated by the region segmenter 210 corresponding to the people objects at reference numerals 166 and 172 (only these are chosen for explanatory purposes) in the video frame shown in FIG. 5.
      <br/>
      The regions corresponding to these people objects are grouped into region clusters 302 and 306, respectively.
      <br/>
      Small regions may be grouped into a region cluster with larger regions, such as that represented by region cluster 302.
      <br/>
      Larger regions may constitute their own region cluster, such as region cluster 306.
      <br/>
      Thus, a region cluster may consist of one region, or combinations of many regions, which is a hypothesis of an object to be tracked.
    </p>
    <p num="42">Evaluate Region Clusters</p>
    <p num="43">
      Next, in step 310, the OCGM 300 evaluates whether each region cluster is an object to be tracked.
      <br/>
      The OCGM 300 evaluates each region cluster and generates a confidence value, for example, a value between 0.0 and 1.0 that represents the likelihood that the object is a particular object to be tracked, such as a person.
      <br/>
      The confidence value is called TCObject.
      <br/>
      TCObject is computed by the following steps:
      <br/>
      1.
      <br/>
      The model matcher 600 is invoked to evaluate whether each region cluster is an object to be tracked.
      <br/>
      The model matcher 600 evaluates each region cluster and returns a confidence value, for example, a value between 0.0 and 1.0 that represents the likelihood that the object is a particular object to be tracked, such as a person.
      <br/>
      The operation of the model matcher 600 is described hereinafter in conjunction with FIGS. 7-9, under the heading MODEL MATCHER.
      <br/>
      This confidence value is called COject.
      <br/>
      2. The region corresponder 500 is invoked to evaluate the degree of correspondence between an object extracted from the current frame and all objects from the previous frame.
      <br/>
      The maximum correspondence score, called Ccorrespondent, is determined along with the associated best track confidence, called Ctrack, for the corresponding object.
      <br/>
      Ctrack is found by finding the largest track confidence from the set of tracks that contains the maximum corresponding object.
      <br/>
      Also, the maximum length of the associated track is stored in TrackLength.
      <br/>
      The track length includes the OCG track length plus the longest TCG track length, if a TCG links exists.
      <br/>
      3. TCObject =w1 *Cobject +(w1 +(1-2-TrackLength))*w2)*Ccorrespondence *Ctrack where w1 +w2 =1 0 (slashed zero)
    </p>
    <p num="44">
      The weights w1 and w2 determine if the overall object confidence is biased towards the model matcher 600 results or the track confidence.
      <br/>
      In a current embodiment, w1 =0.2. This results in objects that have a high degree of correspondence to a long existing track having a better confidence score than objects with weak correspondence scores.
    </p>
    <p num="45">While the correspondence score has been described as representing a measure of correspondence of region clusters in consecutive video frames, the term "consecutive" is meant to include immediately consecutive video frames as well as every other one, two, three, etc., video frames, such that the image information for every video frame may not be processed.</p>
    <p num="46">
      Now, given the set of region clusters, the OCGM 300 determines the best set of region clusters to retain.
      <br/>
      Regions clusters with the largest confidence, TCObject, will be retained.
      <br/>
      The following steps are performed in order to create the list of region clusters to maintain.
      <br/>
      1. Find the region cluster, region cluster A, with the largest confidence, TCObject.
      <br/>
      2. Discard all region clusters that share a subset of common regions, that is area, with region cluster A that do not meet the following constraints.
      <br/>
      Let TCA be the TCObject of Region Cluster A and let TCB be the TCObject of Region Cluster B, the region cluster in question, then discard Region Cluster B from the set of objects to be tracked if
    </p>
    <p num="47">
      - (a) TCA &gt;TCB, and
      <br/>
      - (b) (TCA -TCB)/ minimum(TCA, TCB)&gt;0.1.
      <br/>
      3. Discard region cluster A and repeat step 1 if
      <br/>
      - (a) TCA &lt;0.1, and
      <br/>
      - (b) Cobject of Region Cluster A&lt;0.1 and the real world width and height of the object, determined by the model matcher 600, both are less than their respective minimum thresholds, Heightmin and Widthmin.
      <br/>
      4. Add region cluster A to the low confidence object list and repeat step 1 if
      <br/>
      - (a) TCA &lt;0.1, and
      <br/>
      - (b) Cobject of Region Cluster A&lt;0.1 and the real world width or height, not both, of the object are less than their respective minimum thresholds, Heightmin and Widthmin.
      <br/>
      5. Add region cluster A to the high confidence object list and repeat step 1.
    </p>
    <p num="48">
      The output of this process are two region cluster lists.
      <br/>
      The high confidence object list contains the set of regions clusters that have a high likelihood of being an object to be tracked.
      <br/>
      The low confidence object list contains region clusters that have a low likelihood of being an object of interest, but may be of use in later processing steps of the OCGM 300.
    </p>
    <p num="49">Insert Regions Clusters on Object Correspondence Graph</p>
    <p num="50">Next, in step 315, region clusters which are generated in step 310 and retained, hereinafter called high confidence region clusters, are inserted into the OCG.</p>
    <p num="51">Determine Correspondence to Nodes in Prior Frame</p>
    <p num="52">
      The association of a node in one frame to a node in a next or previous frame is determined by the region corresponder 500.
      <br/>
      In step 330, the region corresponder 500 is invoked for nodes in the current video frame and nodes in the prior video frame to generate a correspondence score for each possible correspondence between nodes in the current video frame and nodes in the prior video frame.
      <br/>
      The region corresponder 500 will be described in greater detail in conjunction with FIGS. 10-13, under the heading REGION CORRESPONDER.
      <br/>
      The correspondence score is a measure of correspondence between a node (region cluster) in one frame and a node (region cluster) in subsequent or previous frame.
      <br/>
      That is, the correspondence score indicates the likelihood that a region cluster in one frame is the same as the region cluster in a prior or subsequent frame.
    </p>
    <p num="53">Link Nodes to OCG Tracks</p>
    <p num="54">
      In step 335, the nodes for the current video frame are linked to an existing OCG track.
      <br/>
      Linking new OCG nodes to existing OCG tracks involves identifying valid pairings of new OCG nodes with the most current node on each existing OCG track based on correspondence scores and other information.
      <br/>
      OCG nodes are linked to OCG tracks that contain nodes which were obtained in the previous frame.
      <br/>
      If an OCG track has broken (for reasons explained hereinafter), preferably, no attempt is made to link a new OCG node to that track at this stage of the process.
      <br/>
      It is possible that a single OCG may map to multiple OCG nodes and/or that multiple tracks may map to a single OCG node.
    </p>
    <p num="55">
      A new OCG node is linked to an OCG track if the most recent node of the OCG track has a high correspondence score to the new OCG node, and if no other node in the OCG has a significantly higher correspondence score to that same new OCG node.
      <br/>
      The rule is:
      <br/>
      1.
      <br/>
      Assume time t is the current video frame.
      <br/>
      2. Let n1 be the most recent node on an OCG track, T1, and n2 be a new OCG node generated from the current frame.
      <br/>
      3. Let w represent the correspondence score between n1 and n2.
      <br/>
      4. BestScore is the best correspondence score from n1 to any (most recent) node in the OCG, except n2, at time t.
      <br/>
      5. OtherScore is the best correspondence score from n2 to any node in the OCG, except n1, at time t-1.
      <br/>
      6. MinimumDistance is the minimum allowed correspondence score, calculated as
      <br/>
      MinimumDistance=maximum(BestScore-BestOffset, MinimumCS),
    </p>
    <p num="56">
      where MinimumCS is the minimum correspondence score allowed by the OCG.
      <br/>
      7. The new OCG node n2 maps to OCG track T1 if:
      <br/>
      - (a) w is greater than a predetermined minimum correspondence score, MinimumFilter, or
      <br/>
      - (b) w is greater than MinimumDistance and w is greater than (OtherScore-OtherOffset).
    </p>
    <p num="57">
      MinimumFilter results in any pairing of nodes n1 and n2 with a correspondence score exceeding a threshold, the MinimumFilter, being mapped.
      <br/>
      BestOffset and OtherOffset are parameters used to allow multiple links to a single OCG node in order to accommodate inaccuracies in the region corresponder 500.
      <br/>
      As the value BestOffset and OtherOffset increase, the probability of multiple mappings to a single node increases.
    </p>
    <p num="58">
      In the event that a new OCG node cannot be linked to an existing OCG track, based on region corresponder 500 results, the split/merge resolver 700 is invoked to determine if a node can be linked to an existing track based on an alternative correspondence model.
      <br/>
      The split/merge rsolver 700 uses an orthogonal feature set to the region corresponder 500, and is tuned to resolve the splitting and merging of objects.
      <br/>
      Rules 1 through 7 that were previously applied to correspondence scores are now applied to the split/merge resolver 700 correspondence scores.
      <br/>
      If a new OCG node can still not be linked to an existing OCG track, a new OCG track is created beginning with that OCG node.
      <br/>
      The split/merge resolver 700 is explained in conjunction with FIGS. 15 and 16, under the heading SPLIT/MERGE RESOLVER.
    </p>
    <p num="59">
      After the new OCG nodes for a video frame are mapped to OCG tracks, an OCG Track Mapping Table is created that contains the current mappings of nodes to OCG tracks for the OCG.
      <br/>
      A Tracking Table entry consists of a node reference and an OCG Track reference.
      <br/>
      Also, in step 335, the trajectory generator 800 is invoked to determine trajectory information for each track.
      <br/>
      The trajectory generator 800 is described in further detail in conjunction with FIG. 14, under the heading TRAJECTORY GENERATOR.
    </p>
    <p num="60">Identify Bad or Dead OCG Tracks</p>
    <p num="61">
      In step 340, tracks which have a most recent OCG node that is older than a predetermined maximum period of time, called MaxDeadTime, are designated as "dead" tracks.
      <br/>
      Dead tracks are identified by searching the list of active OCG tracks.
      <br/>
      Each dead track is marked with a status of either DEAD or BAD.
      <br/>
      A dead track is a BAD track if it is determined that it has no links to any existing TCG tracks and that it is shorter in length than a minimum dead track length, called MinDeadLength.
      <br/>
      Otherwise, the dead track is simply marked as DEAD.
    </p>
    <p num="62">
      It is important to be able to distinguish DEAD tracks from BAD tracks in order for the TCGM 400 to function properly, as will become apparent hereinafter.
      <br/>
      A BAD track is a track that is erroneously generated and should be discarded by the system.
      <br/>
      A DEAD track is often the completion of an active track, or the complete track of an object in the scene.
      <br/>
      When a track is marked DEAD or BAD, the track information is forwarded to the TCGM 400 so that the TCG can be updated.
      <br/>
      The track is then removed from the active track list managed by the OCGM 300.
    </p>
    <p num="63">Identify Split Tracks</p>
    <p num="64">
      Next, in step 345, split OCG tracks are identified.
      <br/>
      When a single OCG track links to multiple nodes, it is said that the track is split.
      <br/>
      At this stage, the split is not analyzed.
      <br/>
      Split tracks are identified by searching the OCG Track Mapping Table to locate multiple entries for the same OCG track.
      <br/>
      When a duplicate OCG track entry is found, a new track is created that is a copy of the existing track.
      <br/>
      The copy includes the set of all nodes prior to the frame that generated the split, as well as any track specific information, such as the TCG links of the original track, the track trajectory information and the track confidence.
      <br/>
      After the track is duplicated, T1 , the OCG node contained in the OCG Track Mapping Table entry is added to the new track T1 and the new track T1 is added to the OCG active track list.
      <br/>
      The original track and each new track are added to a table, called the Split Cross Reference Table.
      <br/>
      All track entries in the OCG Track Mapping Table for the split track are deleted.
    </p>
    <p num="65">Update OCG Tracks</p>
    <p num="66">
      In step 350, all tracks not updated in step 345 are updated.
      <br/>
      For each entry remaining in the OCG Track Mapping Table, the OCG track is updated with the associated OCG node.
      <br/>
      All entries are deleted from the OCG Track Mapping Table.
    </p>
    <p num="67">
      For each active OCG track, the track confidence is updated.
      <br/>
      The track confidence is computed by the method described in 310, Evaluate Region Clusters.
      <br/>
      The track confidence is set to TCObject, where Ccorrespondence is the correspondence score between the last two nodes in the OCG track and Ctrack is the previous OCG track confidence.
    </p>
    <p num="68">Identify Merged Tracks</p>
    <p num="69">
      Turning to FIG. 4B, in step 355, merged OCG tracks are identified.
      <br/>
      Merged tracks are identified by searching the active track list to locate tracks that share the same most recent node.
      <br/>
      Only tracks that contain a node in the current frame are considered during this search.
      <br/>
      The set of tracks sharing the common node are added to a table called the Merge Cross Reference Table.
      <br/>
      Alternatively, the merge constraint can be relaxed to include tracks that map to two nodes that share common regions.
    </p>
    <p num="70">Detect and Resolve Broken Tracks</p>
    <p num="71">
      In step 360, the OCGM 300 analyzes the set active OCG tracks that do not contain a node from the current frame.
      <br/>
      That is, the set of active tracks that contain a node from the previous frame that do not have an adequate correspondence to a node in the current frame, called the set of broken tracks.
      <br/>
      The region corresponder 500, employed to generate correspondence scores, is very sensitive to changes in global object features.
      <br/>
      In some instances, correspondence failure may be a result of drastic changes in the global feature set.
      <br/>
      To address these potential correspondence failures, the following processing steps are performed.
    </p>
    <p num="72">
      First, for each broken OCG track, Tbroken, determine if there is an existing OCG track, T, that contains a node at time t-1 that shares a significant amount of area with the node at time t-1 in Tbroken.
      <br/>
      The minimum amount of area is an OCGM parameter.
      <br/>
      If such a track is found, add the node at time t from track T to Tbroken.
    </p>
    <p num="73">
      For each track that is still broken, the split/merge resolver 700 is invoked, using as input the node at time t-1 for Tbroken and the set of nodes at time t from the set of active OCG tracks.
      <br/>
      Also, the split/merge resolver 700 is invoked, using as input the node at time t-1 for Tbroken and the set of low confidence objects created by the OCGM 300.
      <br/>
      The split/merge resolver 700 is explained in conjunction with FIGS. 15 and 16, under the heading SPLIT/MERGE RESOLVER.
      <br/>
      Briefly, the split/merge resolver 700 operates on region clusters from a pair of consecutive frames and determines the correspondence between a single region cluster, called the original region cluster, and a plurality of candidate region clusters from the next frame.
      <br/>
      A correspondence confidence value is returned for each candidate region cluster and is used in further analyzing the tracks in the OCG.
    </p>
    <p num="74">
      The information generated by the split/merge resolver 700 is used by the OCGM 300 to do what otherwise could not have been done in step 335 because the region corresponder 500 was not able to return adequate information.
      <br/>
      Based on the results returned from the split/merge resolver 700, if the correspondence value exceeds a minimum split/merge resolve threshold, a track mapping is creating from the broken track Tbroken to the corresponding node.
      <br/>
      If the corresponding node belongs to an active track, T, the OCGM 300 validates that the track confidence of Tbroken is not significantly lower than the confidence of T. This test keeps low confidence tracks from being attached to high confidence tracks.
      <br/>
      If a correspondence is found and the track test is passed, an OCG Track mapping is created for Tbroken and the corresponding node.
    </p>
    <p num="75">
      After all broken tracks have been processed, a new OCG Track Mapping Table has been created.
      <br/>
      Then, steps 345, 350 and 355 are now repeated given the set of updated tracks.
    </p>
    <p num="76">Perform Track Analysis</p>
    <p num="77">
      In step 365, track analysis is performed to reduce the number of active tracks.
      <br/>
      At this point, the track space is searched for tracks that share a large percentage of common nodes that may be the result of errors in region segmentation or ambiguous results from the model matcher 600.
      <br/>
      Situations may be encountered in which there is sporadic creation of multiple object hypotheses for the same object.
      <br/>
      These objects would share the same regions.
      <br/>
      Also, it is possible that high frequency splitting and merging of regions may have occurred from the same object.
    </p>
    <p num="78">
      Since the system is tracking the same object on multiple tracks, the set of common tracks can be consolidated.
      <br/>
      Consolidation of tracks consist of deleting all but one of the common tracks.
      <br/>
      The track to retain is the longest OCG track.
      <br/>
      If two or more tracks are the same length, the track with the largest track confidence is retained.
      <br/>
      When a track is deleted, the track information, such as TCG links, is consolidated in the remaining track.
      <br/>
      Tracks that meet any of the criteria below can be consolidated:
      <br/>
      1.
      <br/>
      A track that is a subset, contains the same set of nodes, as a second track.
      <br/>
      2. Two tracks of a predetermined length (a short term length) share the same start node and end node.
    </p>
    <p num="79">
      Two tracks of a significant length, greater than a predetermined length, share at a minimum every other node in the track.
      <br/>
      This is indicative of a high frequency split or merge. "Shared" in this context means common nodes or two nodes that have a common region, i.e., they overlap.
    </p>
    <p num="80">
      Additional criteria can be added so that tracks are pruned from the track search space early.
      <br/>
      The primary impact is to reduce the search space for ambiguous tracks that is described in the section below.
    </p>
    <p num="81">Process Ambiguous Tracks</p>
    <p num="82">
      In step 370, ambiguous tracks are processed.
      <br/>
      This step is performed to reduce the number of active tracks.
    </p>
    <p num="83">
      First, ambiguous tracks are identified and grouped into sets of ambiguous tracks in the Ambiguous Cross Reference Table.
      <br/>
      Ambiguous tracks are tracks that share one or more common nodes.
      <br/>
      Tracks that are identified as ambiguous are listed in a table called the Ambiguous Cross Reference Table.
      <br/>
      Each table entry contains a list of tracks that are ambiguous, i.e. each track is ambiguous with one or more tracks in the entry.
    </p>
    <p num="84">
      Second, dead ambiguous tracks are deleted.
      <br/>
      A dead ambiguous track is an OCG track that has no TCG links and has been broken for more than a predetermined period of time, represented by an ambiguous dead time frames parameter.
      <br/>
      An ambiguous dead track is a spurious track that was created by the system with no links to other tracks.
      <br/>
      These tracks are immediately deleted from the active track list.
    </p>
    <p num="85">
      Third, the OCGM 300 attempts to delete a subset of the active ambiguous tracks.
      <br/>
      The following steps are performed on each set of ambiguous tracks in order to remove tracks and reduce the number of active tracks.
      <br/>
      1. Find the track with the largest number of TCG links, track A. If two tracks have the same number of TCG links, select the track with the largest track confidence value.
      <br/>
      2. Remove track A from the ambiguous track list.
      <br/>
      3. Validate that the length of track A track exceeds the maximum ambiguous track length or that the dead time exceeds the maximum ambiguous dead time.
      <br/>
      4. If track A is not valid, save track A on the "okTrack" list and go to step 1.
      <br/>
      5. Delete all tracks from the Ambiguous Track Cross Reference table and the active track list that contain a subset of the TCG links contained in track A.
      <br/>
      6. Add track A to the "okTrack" list.
      <br/>
      7. Go to step 1.
    </p>
    <p num="86">
      After processing all tracks, tracks on the "okTrack" list are returned to the ambiguous tracks list to be processed later.
      <br/>
      Any track that is deleted from the track list is also deleted from the Split Cross Reference Table and the Merge Cross Reference Table.
    </p>
    <p num="87">
      Next, merging of shared segments is performed so that ambiguous tracks that are tightly bound to other ambiguous tracks are deleted.
      <br/>
      Shared segments are identified by selecting the longest ambiguous track as the reference track.
      <br/>
      If two tracks are the same length, the track with the greatest track confidence level is selected.
      <br/>
      The reference track must exceed a predetermined length set by a minimum ambiguous shared segment track length parameter.
      <br/>
      Each ambiguous track is then compared with the reference track in order to identify tracks that contain a set of nodes, where each node shares regions with nodes on the reference track.
      <br/>
      In the current embodiment, since ambiguous tracks are based on shared nodes, the track will be a track segment However, the TCG links may differ.
      <br/>
      If a shared segment is found, the shared track is deleted from the active track list.
      <br/>
      TCG links from the shared track are added to the reference track.
      <br/>
      Any track that is deleted from the track list is also deleted from the Split Cross Reference Table and the Merge Cross Reference Table.
    </p>
    <p num="88">
      Finally, the set of tracks that remained ambiguous are analyzed to determine if a split condition has been created by the deletion of tracks.
      <br/>
      In some instances, a split condition may not have been previously detected due to the existence of spurious tracks.
      <br/>
      When the spurious tracks are deleted, the OCGM 300 can then properly detect a split condition.
      <br/>
      A split condition occurs when all tracks in an Ambiguous Cross Reference Table Entry meet the following criteria.
      <br/>
      1. The most recent OCG nodes in the set of ambiguous tracks share less than a predefined maximum amount of common area, called the Maximum Split Area.
      <br/>
      2. The set of ambiguous tracks at some point in the past share the same OCG node.
    </p>
    <p num="89">If this condition exists, the set of ambiguous tracks generating the split condition are added to a Split Cross Reference Table entry.</p>
    <p num="90">Detect Complex Split/Merge Conditions</p>
    <p num="91">
      In some instances, the state of a subset of OCG tracks can become very complex, and the OCGM 300 requires drastic actions to address the situation.
      <br/>
      In step 375, the OCGM 300 searches the Merge Cross Reference Table and the Split Cross Reference Table to identify OCG tracks that are contained on both a Split Cross Reference Table entry and a Merge Cross Reference Table entry.
      <br/>
      If such a track is found, the following steps occur.
      <br/>
      1. Construct a list of tracks, TList, that are contained in the same Split Cross Reference Table entry and Merge Cross Reference Table entry.
      <br/>
      When adding a track T to TList, all other tracks that share a cross reference with T must also be added to Tlist.
      <br/>
      2. Remove cross reference table entries for each track on Tlist.
      <br/>
      3. Construct a new OCG node, Onew, and region cluster that consists of the set of regions that compose all of the region clusters for each node in the current frame for the set of tracks on Tlist.
      <br/>
      4. Add the new OCG node, or object to be tracked, to the OCG if an object consisting of the same set of regions does not exist.
      <br/>
      5. Replace the most recent node of each track on Tlist with Onew.
      <br/>
      6. Perform steps 365 and 370 on Tlist in order to eliminate duplicate and ambiguous tracks that may have been created at step 5.
      <br/>
      7. Create a new Merge Cross Reference Table Entry for the set of tracks on Tlist.
    </p>
    <p num="92">
      The OCG has determined that the results of object creation and region correspondence are not adequate to allow the objects to be properly tracked.
      <br/>
      Therefore, the OCG has created a large object and is forcing a merge condition, which allows the system to resolve the situation when more accurate information is available.
    </p>
    <p num="93">Analyze Merged Tracks</p>
    <p num="94">
      In step 380, the OCGM 300 searches the Merge Cross Reference Table to identify tracks of two or more objects that have been linked to a single object in the current frame.
      <br/>
      It is important to accurately identify a merge so that the merge event and tracks can be reported to the TCGM 400.
      <br/>
      Merge analysis is performed on tracks in the Merge Cross Reference Table.
      <br/>
      The following properties are used to detect a merge:
      <br/>
      1.
      <br/>
      If the tracks are linked to different TCG tracks, a merge exists.
      <br/>
      2. If the two tracks do not contain nodes that share regions, a merge exists.
    </p>
    <p num="95">
      If a merge is successfully detected, each merged track is forwarded to the TCG.
      <br/>
      A new OCG track, Tmerge, is created and linked to the TCG tracks that contains the forwarded OCG tracks.
      <br/>
      The TCG track linking must occur in order to resolve the merge in the future, if a split occurs.
    </p>
    <p num="96">
      In order to track objects while merged, the merge transition stage 910 of the merge corresponder 900 is invoked given the set of region clusters in the OCG tracks prior to the merge and the region cluster creating the merge.
      <br/>
      The results returned from the merge corresponder 900 are then stored in the new OCG track, Tmerge.
      <br/>
      The merge corresponder 900 is explained in more detail hereinafter under the heading MERGE CORRESPONDER, in conjunction with FIGS. 20 and 21.
    </p>
    <p num="97">Analyze Split Tracks</p>
    <p num="98">
      In step 385, the OCGM searches tracks in the Split Cross Reference Table to identify tracks of a single object that have been linked to two or more objects in the current frame.
      <br/>
      It is important to accurately identify a split so that the split event and tracks can be forwarded to the TCG.
      <br/>
      A split condition exists if the most recent OCG nodes in the tracks share less than a predefined maximum amount of common area, called the Maximum Split Area.
    </p>
    <p num="99">
      If a split is successfully detected, the OCGM 300 forwards the split tracks to the TCG.
      <br/>
      New OCG tracks are created for each node in the current frame and linked to the corresponding TCG tracks containing the forwarded OCG tracks.
    </p>
    <p num="100">
      Finally, the split transition phase 930 of the merge corresponder 900 is invoked given the set of region clusters in the new OCG tracks, that is the set of region clusters after the split, and the previous frame merge corresponder 930 results in order to resolve a split/merge situation.
      <br/>
      If the split tracks are not actively performing a split/merge resolution, i.e, a merge did not occur prior to the split, the merge corresponder 900 is not invoked.
      <br/>
      The results, the set of track mappings, are then stored in the new OCG tracks and will processed by the TCG when the OCG tracks are forwarded.
    </p>
    <p num="101">Forward Tracks to TCG</p>
    <p num="102">
      Finally, in step 390, tracks in the OCG are forwarded to the TCG.
      <br/>
      Specifically, high confidence tracks are forwarded to the TCG when:
      <br/>
      1.
      <br/>
      The track length exceeds a predetermined minimum track length set by an OCG forward track length parameter.
      <br/>
      2. The track is not marked as ambiguous.
    </p>
    <p num="103">
      When forwarding a track to the TCG, its trajectory status is also examined.
      <br/>
      If the trajectory status for the track is bad or invalid, then the track is forwarded to the TCG with a BAD status and the track is deleted from the active track list.
      <br/>
      If the track trajectory is valid, then the following occurs:
      <br/>
      1.
      <br/>
      The last node, nLast, is deleted from the track.
      <br/>
      2. A new track is created that contains the single node nlast
      <br/>
      3.
      <br/>
      The track is forwarded to the TCG.
      <br/>
      4. The new track is linked to the TCG track containing the forwarded OCG track.
      <br/>
      5. The new track is added to the active track list.
    </p>
    <p num="104">Track Through A Merge</p>
    <p num="105">
      The final operation of the OCG is to track through a merge in step 395.
      <br/>
      If an active OCG track is performing a track through the merge operation, the merge corresponder 900 must be invoked.
      <br/>
      The track was previously updated with the region cluster from the current frame.
      <br/>
      In order to track objects while merged, the merge tracking stage 920 of the merge corresponder 900 is invoked given the merge cluster results from the previous frame merge corresponder operation and the region cluster from the current frame.
      <br/>
      The results returned from the merge corresponder 900 are then stored in the track.
      <br/>
      The merge corresponder 900 is explained in more detail hereinafter under the heading MERGE CORRESPONDER, in conjunction with FIGS. 17 and 18.
    </p>
    <heading>MODEL MATCHER</heading>
    <p num="106">
      The model matcher 600 examines image information for region clusters (or simply regions) and determines which region clusters have a high likelihood of being an object to be tracked, such as a person.
      <br/>
      The basic principles of the model matcher 600 can be used to detect any type of object.
      <br/>
      In general, the model matcher generates at least one real-world feature for each region cluster, and then compares the at least one real-world feature for each region cluster with real-world feature model (statistical) information.
      <br/>
      As an example, the following describes parameters and procedures suitable for detecting whether a region cluster is a person in the scene.
    </p>
    <p num="107">
      The model matcher 600 described herein generates a confidence value for each region cluster region that implicitly represents the likelihood that the region cluster is a person.
      <br/>
      The model matcher 600 also provides the real-world location in X and Y grid coordinates of the person, as well as the real-world height and width of the person.
      <br/>
      Region clusters, their real-world position and size, and associated confidence value are then used for insertion into the OCG.
    </p>
    <p num="108">With reference to FIG. 7, the model matcher 600 receives as input a set of region clusters from the OCGM 300, object model information or data, and camera calibration parameters for the current scene, including camera position and orientation information.</p>
    <p num="109">
      The camera calibration data includes:
      <br/>
      1.
      <br/>
      The height of the camera above the floor, H.
      <br/>
      2. The offset angle that the camera makes with the ceiling, where 0 degrees indicates that the camera is positioned parallel to the ceiling, and 90 degrees indicates that the camera is perpendicular to the ceiling, 0.
      <br/>
      3. The horizontal viewing angle through the lens,  DELTA .
      <br/>
      4. The vertical viewing angle through the lens,  ALPHA .
      <br/>
      5. The width of the image, in pixels, Iw.
      <br/>
      6. The height of the image, in pixels, Ih,
      <br/>
      7.
      <br/>
      The average ratio of a person's real-world width to their height,  MU .
    </p>
    <p num="110">
      The object model information or data, for a person as an example, includes:
      <br/>
      1.
      <br/>
      Statistical information about the range of valid person heights.
      <br/>
      2. Statistical information about the range of valid person widths.
      <br/>
      3. Statistical information about the range of ratios of valid person heights to valid person widths.
      <br/>
      4. A range of valid person positions.
    </p>
    <p num="111">Turning to FIG. 8, the operation of the model matcher 600 will be described.</p>
    <p num="112">
      In step 605, the obliqueness of the viewing angle of the video scene is determined.
      <br/>
      If the angle,  THETA , is less than approximately 70 degrees, then the view is considered oblique.
      <br/>
      Otherwise, the view is considered to be non-oblique, that is, downward-looking into the scene.
    </p>
    <p num="113">
      In step 610, the possible locations of a predetermined portion of the region cluster, such as feet of a person, are determined.
      <br/>
      In the case of person model matching, determination of the location of the feet determines whether the person is standing in the scene.
      <br/>
      This is performed by the following steps:
      <br/>
      (a) If the camera view is oblique, the feet are assumed to be on the bottom of the region cluster.
      <br/>
      (b) If the camera view is non oblique, the location of the region cluster relative to the center of the view is determined.
      <br/>
      Each region cluster can have one or two possible feet positions depending on the location of the region cluster relative to the center.
      <br/>
      If the region cluster is above the center of the view of the video camera, the feet are assumed to be on the bottom of the region cluster.
      <br/>
      If the region cluster is above and right of the center, the feet can either be at the bottom of the region cluster, or to the left of the region cluster.
      <br/>
      If the region cluster is below and to the left of the center, the feet can either be at the top of the region cluster, or on the left side of the region cluster.
      <br/>
      If the region cluster is within a given small radius of the center of the view, the feet are assumed to be at the centroid of the region cluster.
      <br/>
      (c) Given the possible locations of the feet, the centroid of the region cluster is projected on the corresponding side of the oriented bounding box for the region cluster.
      <br/>
      The oriented bounding box will be described in greater detail under the heading REGION CORRESPONDER.
      <br/>
      For feet that lie at the centroid, this process is not performed.
      <br/>
      The resulting one or two projected points are the possible coordinates of the feet of the person, in image space.
    </p>
    <p num="114">
      Next, in step 615, the distance from the video camera to the object represented by each region cluster is determined, in real-world coordinates.
      <br/>
      This distance is called Yreal.
      <br/>
      The distance Yreal is computed by the following steps:
      <br/>
      (a) Calculating the distance from the image center to the Y location of the feet, called CO.
      <br/>
      (b) Assigning Ch, the value of the oriented bounding box height, which is perpendicular to the position of the feet.
      <br/>
      (c) The angle between the top of the image and the feet is extracted using the formula:
      <br/>
      BETA =ARCTAN((CO * TAN( ALPHA ))/(0.5* Ih)).
      <br/>
      (d) If  THETA - BETA  approaches 90 degrees, then the person is directly below the camera, and has a real world y location, Yreal, of 0 (distance, in inches, from the projection of the camera onto the floor to the position of the person's feet).
      <br/>
      Else, Yreal =H/Tan( THETA - BETA ).
    </p>
    <p num="115">
      In step 620, the real-world height of the object (person) corresponding to each region cluster is determined by the following steps:
      <br/>
      (a) The angle between the person's head and feet is extracted using the formula:
      <br/>
      GAMMA =ARCTAN(((CO +Ch) * TAN( ALPHA ))/(0.5* Ih))
      <br/>
      (b) If  THETA - GAMMA  approaches 90 degrees, then the real height, Hreal =.vertline.Yreal / MU .vertline..
      <br/>
      (c) Else, Hreal =(H-(Yreal * TAN( THETA - GAMMA ))/( MU * TAN ( THETA - GAMMA )).
    </p>
    <p num="116">
      In step 625, the width of each object in real-world scale is determined.
      <br/>
      This is achieved by the following steps:
      <br/>
      (a) Cw is assigned the value of the oriented bounding box width.
      <br/>
      (b) The distance to the person's head from the camera is calculated:
      <br/>
      DH=Yreal2 +L +(H-Hreal2 +L ).
      <br/>
      (c) Wreal =(DH * Cw * TAN( DELTA ))/(0.5 * Iw).
    </p>
    <p num="117">
      In step 630, the real-world X-coordinate of each object is determined by the following steps:
      <br/>
      (a) The X distance from the center of the image to the person's feet are calculated in image coordinates.
      <br/>
      This is represented by Cx.
      <br/>
      (b) Xreal =(DH *(Cx +(0.5 * Cw)) * TAN( DELTA ))/ (0.5 * Iw).
    </p>
    <p num="118">Slight adjustments to the above equations for certain non-oblique views, such as "sign" changes for angles, may be necessary.</p>
    <p num="119">
      FIG. 9 shows the region clusters 302 and 306 and their oriented bounding boxes 632.
      <br/>
      In addition, the possible locations of the feet of each person corresponding to the region clusters are shown at reference numeral 634.
      <br/>
      In some cases there are multiple possible feet locations, and the feet location is either on the oriented bounding box or in the center of the region cluster.
    </p>
    <p num="120">
      Finally, in step 635, the size and location information determined in steps 605-630 for each region cluster is compared with statistical model information to generate a confidence value for each region cluster.
      <br/>
      This comparison process is repeated for each possible feet location for each region cluster and the location with the greater confidence is retained.
      <br/>
      There are several methods for comparing the statistical information with the computed information.
      <br/>
      One method is as follows:
      <br/>
      (a) Minimum, maximum, mean, and standard deviation values for the following three real-world features are provided:
      <br/>
      - (i) height;
      <br/>
      - (ii) width;
      <br/>
      - (iii) ratio of height to width.
      <br/>
      (b) Minimum, maximum, mean, and standard deviation values for the region cluster density (the number of pixels in a region cluster/area in the oriented bounding box) are provided.
      <br/>
      (c) If the calculated real-world location of the region cluster falls outside certain allowable locations then the region cluster is assigned a confidence value of 0, the lowest possible confidence value, and no further confidence value calculation is necessary.
      <br/>
      (d) For a given region cluster, for each feature that falls within the minimum and maximum value, a fixed amount is added to the confidence value.
      <br/>
      (e) For each feature, a Gaussian curve is constructed using the mean and standard deviation information.
      <br/>
      For a given region cluster, the feature value is mapped to a position on the axis, and the corresponding value on the curve is determined.
      <br/>
      This value is multiplied by a small constant and is added to the confidence value.
      <br/>
      (f) The sum of the confidences values for the region cluster is normalized to a value between 0 and 1.
      <br/>
      Thus, the range of confidence values is from 0 to 1, with 1 being the highest confidence value.
    </p>
    <p num="121">
      The output of the model matcher 600 includes real-world X and Y coordinates for a region cluster, real-world heights and widths, a confidence value indicating whether the region cluster is a particular object, i.e., a person, and the location of a predetermined portion of the object, such as a person's feet in image coordinates.
      <br/>
      Another real-world features that is useful in person model matching skin color.
      <br/>
      Skin color may be useful alone, or in combination with size and location information of a region cluster.
    </p>
    <heading>REGION CORRESPONDER</heading>
    <p num="122">
      Turning now to FIG. 10, the region corresponder 500 will be described.
      <br/>
      The region corresponder 500 compares region clusters of a video frame with region clusters of a prior video frame.
      <br/>
      The region corresponder 500 utilizes region features to compare region clusters and generates a correspondence score for each comparison that represents the likelihood that two region clusters match.
      <br/>
      The correspondence score is used by the OCGM 300.
      <br/>
      In general, the region corresponder 500 generates at least one feature (described hereinafter) for each (a first and a second) region cluster to be compared, compares the at least one feature for the two region clusters, and generates a correspondence score representing a measure of correspondence between the first and second region cluster based upon the at least one feature for each of the first and second region clusters.
      <br/>
      The at least one feature may be a moment feature, contour feature or color region.
    </p>
    <p num="123">The inputs to the region corresponder 500 are the image information for the current video frame, the region clusters generated by the OCGM 300 for the current video frame, region clusters generated from the previous video frame, and predetermined parameters used for the correspondence methodology.</p>
    <p num="124">
      FIG. 11 illustrates the two basic steps performed by the region corresponder 500.
      <br/>
      The first step, 510, involves generating features for each region cluster, including moment features, contour features and color features.
      <br/>
      Then, in step 520, pattern classification analysis is performed on the features for region clusters in the current video frame and region clusters in the prior video frame in order to generate a correspondence score representing a measure of correspondence between region clusters.
    </p>
    <p num="125">
      The features extracted for each region cluster is one of three types: moment features, contour features and color features.
      <br/>
      Some of these features may have been extracted by the region segmenter 210 during image segmentation, and others may have been extracted by the model matcher 600.
      <br/>
      That is, the overhead for creation of the some of the features varies, and may be changed to accommodate certain efficiencies in particular applications.
      <br/>
      The features used for region correspondence are preferably single frame features.
    </p>
    <p num="126">
      The moment features are moment invariants, eccentricity (elongation), orientation, oriented bounding box, and area/position/bounding box/ aspect ratios.
      <br/>
      The contour features include compactness, Fourier boundary descriptors and maximum chord length/perpendicular chord ratio.
      <br/>
      The color features include intensity features of the YUV image components.
    </p>
    <p num="127">Moment Features</p>
    <p num="128">Moment Invariants</p>
    <p num="129">
      Moment invariants are certain functions of moments which are invariant to geometric transformations such as translation, scaling, and rotation.
      <br/>
      The following definitions of moments which are invariant under translation are:  (Equation image '1' not included in text)
    </p>
    <p num="130">Experiments have shown that the following types of moments are effective features in a region correspondence algorithm:  (Equation image '2' not included in text)</p>
    <p num="131">
      Feature  MU (2,0) is a measure of variance of the pixel distribution in the horizontal direction.
      <br/>
      Similarly, feature  MU (0,2) is a measure of variance of the pixel distribution in the vertical direction.
      <br/>
      Feature  MU (1,1) represents the covariance of the pixel distribution and contains information about the diagonal distribution of pixels.
      <br/>
      The square root of these moments are used in computing feature distances.
    </p>
    <p num="132">Eccentricity (Elongation)</p>
    <p num="133">
      There are several measures of elongation for a given region.
      <br/>
      The following form is used, which is also called the principle axis of inertia:  (Equation image '3' not included in text)
    </p>
    <p num="134">An advantage of this feature is its low computational complexity because it can be determined from pre-computed moments and area values.</p>
    <p num="135">Orientation</p>
    <p num="136">
      Orientation is a measure of distribution of region pixels in different directions.
      <br/>
      The orientation is found by determining the eigen values of the covariance matrix for the region.
      <br/>
      The covariance matrix is defined as:  (Equation image '4' not included in text)
    </p>
    <p num="137">
      Once the two eigen values, e1 and e2 are found, the corresponding eigen vectors v1 and v2 are extracted.
      <br/>
      The eigen vector corresponding to the larger of the two eigen values is the principal axis of the region, and its angle of orientation is the orientation of the region.
      <br/>
      The eigen vector corresponding to the smaller of the two eigen values is the secondary axis of the region, which is perpendicular to the principal axis.
    </p>
    <p num="138">Oriented Bounding Box</p>
    <p num="139">
      The oriented bounding box is the bounding box of the region that is aligned with the principal axis of the region, as calculated through the orientation.
      <br/>
      FIG. 9 shows an example of an oriented bounding box, at reference numeral 632.
      <br/>
      The oriented bounding box is found by:
      <br/>
      1.
      <br/>
      For each row of pixels in the region:
      <br/>
      - a) Find the endpoints of the row.
      <br/>
      - b) Project the endpoints onto the principal axis.
      <br/>
      - c) Project the endpoints onto the secondary axis.
      <br/>
      2. Determine the two projected points that are the minimum and maximum values on the principal axis.
      <br/>
      3. Determine the two projected points that are the minimum and maximum values of the secondary axis.
      <br/>
      4. Construct a rectangle by intersecting
      <br/>
      - a) a line parallel to the principal axis that passes through the minimum projected value on the secondary axis;
      <br/>
      - b) a line parallel to the principal axis that passes through the maximum projected value on the secondary axis;
      <br/>
      - c) a line parallel to the secondary axis that passes through the minimum projected value on the principal axis;
      <br/>
      - d) a line parallel to the secondary axis that passes through the maximum projected value on the principal axis.
    </p>
    <p num="140">This rectangle is the oriented bounding box.</p>
    <p num="141">Area, position, aspect ratio</p>
    <p num="142">
      Features such as area, position, and aspect ratio (ratio of the short edge to the long edge of the oriented bounding box) of the oriented bounding box do not demand high computational resources.
      <br/>
      These features can be used for an initial estimation of correspondence between two regions.
    </p>
    <p num="143">Contour Features</p>
    <p num="144">Fourier Boundary Descriptors</p>
    <p num="145">
      Each point on the boundary of a region can be represented by a complex number u(n)=x(n)+jy(n).
      <br/>
      For a closed boundary, u(n) is periodic with period Q. The Discrete Fourier Transform (DFT) of the sequence u(n) is given by  (Equation image '5' not included in text)
    </p>
    <p num="146">
      The complex coefficients U(k) are called the Fourier Descriptors (FDs) of the boundary and are used for matching the boundary of similar shapes.
      <br/>
      The advantage of the Fourier Descriptor is that it can provide a distance measure that is invariant under translation, scaling, and rotation.
      <br/>
      To measure the FD distance between two regions R and R' with boundaries u(n) and v(n), the following function is used:  (Equation image '6' not included in text)
    </p>
    <p num="147">
      The shapes of R and R' are similar if the distance d(u0,  ALPHA ,  THETA 0,n0) is small.
      <br/>
      Parameters u0, n0,  ALPHA , and  THETA 0 are chosen to minimize the effects of translation, scaling, starting point, and rotation, respectively.
      <br/>
      When the available computational power is restricted, less complex distance measures based on FD can be used.
    </p>
    <p num="148">Compactness</p>
    <p num="149">Compactness is defined as  (Equation image '7' not included in text)</p>
    <p num="150">
      For a disc-shaped region this parameter takes a value of 1.
      <br/>
      As the region becomes more non-regular, compactness takes on larger values.
    </p>
    <p num="151">Ratio of Maximum Chord Length to Perpendicular Chord</p>
    <p num="152">The ratio of the length of a maximum chord of a region cluster to a chord perpendicular to it is a useful contour matching parameter.</p>
    <p num="153">Color Features</p>
    <p num="154">
      Color is one of the effective features in measuring the degree of correspondence between two objects.
      <br/>
      This is particularly true if objects are located in far frame distances where other features such as moment-based features loose their matching effectiveness.
    </p>
    <p num="155">
      Color features represent the distribution of color and luminance components inside a region.
      <br/>
      In a YUV color coordinate system, histogram components hy (n),hu (n),and hv (n) represent the Y, U, and V distribution of pixel values in a given region.
      <br/>
      A simple form of color features is computed by smoothing hy (n),hu (n), and hv (n) and finding the intensity values fy, fu, and fv that maximize these functions.  (Equation image '8' not included in text)
    </p>
    <p num="156">
      In a single mode color matching approach, only the argmax of the color histograms is extracted as the dominant color feature of an objects.
      <br/>
      This method ignores the remaining color content of objects.
      <br/>
      Most of the time, objects such as moving people in a scene, have more than one strong color component.
      <br/>
      For example, a person with blue shirt and white pants has a bimodal histogram.
      <br/>
      If the sizes of the white and blue areas are comparable, it is possible to have a significant shift in the argmax of the color histograms from one frame to the next one.
      <br/>
      In order to avoid this oversensitivity, one can locate the other modes of the color histogram and use a collective set of histogram features to measure the correspondence between two objects.
    </p>
    <p num="157">
      A natural solution to the mode extraction problem is the use of a clustering algorithm such as k-means or isodata.
      <br/>
      The problem with these methods is their computational complexity since they iteratively visit the histogram values before converging to a final solution.
      <br/>
      Also clustering algorithms tend to average nearby modes and provide inaccurate indications of the peak locations.
    </p>
    <p num="158">
      The approach described herein for the mode-extraction is less expensive than clustering algorithms and leads to more accurate indications of the peak locations.
      <br/>
      The following stages are used in order to extract the histogram peaks.
      <br/>
      1. Filter the histogram with a moving average filter such that the local jitters are smoothed.
      <br/>
      Assuming that h is the input, f is the output, and w is the support of the filter, the moving average filtering operation can be expressed as  (Equation image '9' not included in text)
    </p>
    <p num="159">
      The typical mask size of this filter is 9 to 11 points.
      <br/>
      In order to reduce the complexity of the long moving average filter used for smoothing the color histograms and its derivatives, a FIFO implementation is deployed.
      <br/>
      In this implementation a running sum of samples is computed by adding a new sample value and subtracting the oldest sample value in the buffer.
      <br/>
      With this method, the complexity of filter is reduced from LN to 2N where L is the size of the filter mask and N is the number of data samples.
      <br/>
      2. Take the scaled derivative of the smoothed histogram by computing the difference between the histogram values at the previous and next indexes.
      <br/>
      This operation is described in the following expression.
      <br/>
      f'(i)=f(i+1)-f(i-1)
      <br/>
      3. Filter the scaled derivative with a moving average filter.
      <br/>
      The typical mask size of this filter is about 7 to 9 points.
      <br/>
      4. Find the zero crossing of the filtered version of the scaled derivative by looking for adjacent sign changes of this function.
      <br/>
      5. Select zero crossings corresponding to peak locations.
      <br/>
      6. Compute peak confidences by taking the difference of the histogram values at previous and next zero crossings.
      <br/>
      7. The histogram modes are those peaks with confidences that exceed a predefined threshold.
    </p>
    <p num="160">Classification Methodology</p>
    <p num="161">
      The classification step 520 is based on pattern recognition techniques.
      <br/>
      Given two regions R and R', the region correspondence algorithm measures the degree of similarity between the two regions by computing a distance function D(R, R') from N features f1, f2, . . . fN associated with each of the regions.
      <br/>
      The distance between the ith feature of R and the ith feature of R' is represented by di (R, R').
      <br/>
      The distance value di (R,R') shows how the fi feature of R differs from the same feature of R'.
    </p>
    <p num="162">
      In a pattern classification formulation, the classification algorithm classifies the relationship between the two regions into "regions correspond" or "regions do not correspond" classes.
      <br/>
      With this formulation the N different feature distances are the coordinates of an N-dimensional feature space and use a pattern classification algorithm with a discrimination function D.
    </p>
    <p num="163">
      A trainable pattern classifier is used which iteratively trains the parameters of D from a training set of patterns.
      <br/>
      This training set is generated by ground-truthing a set of segmented test sequences.
      <br/>
      The choice of function D has a significant impact on the accuracy of the correspondence process.
      <br/>
      A simple approach is to use a linear discriminant function of the following form:  (Equation image '10' not included in text)
    </p>
    <p num="164">
      While this linear classifier is suitable for separable pattern classes, it does not yield the best results in the general non-separable case.
      <br/>
      To achieve more robust decision boundaries, a quadratic nonlinear classifier of the following form can be used:  (Equation image '11' not included in text)
    </p>
    <p num="165">
      To determine coefficients wij, an associative unit of intermediate variable sk is defined such that
      <br/>
      di dj =sk where k=i+j
    </p>
    <p num="166">Then D(d1, d2, . . . , dN) which is a nonlinear function of di variables, becomes a linear function of sk variables with the same weighting coefficients  (Equation image '12' not included in text)</p>
    <p num="167">
      With this transformation, the classification procedure has been effectively transformed to a linear representation.
      <br/>
      Although the decision function D can be considered as linear in the M-dimensional space, it retains its general nonlinear properties in the N-dimensional space of the original distance patterns.
    </p>
    <p num="168">Training Methodology</p>
    <p num="169">In order to compute the weighting parameters wij, a training process that is based on a Baysian classification methodology with a multi-dimensional Gaussian distribution model.</p>
    <p num="170">
      The first stage in the training process is to remove all possible redundancies from the training data.
      <br/>
      One source of these redundancies is created by the current version of the ground-truthing tool which generates multiple copies of the training data points.
      <br/>
      After the redundancies are removed, the features are normalized by their maximum values in the training data set such that their values fall in the interval �0,1�. In the next stage, the normalized training data is analyzed to extract its first and second order statistical parameters.
      <br/>
      To perform this analysis, the training data is partitioned into two sets of data points Sc and Snc Sc is the set of data points whose cluster pair were matched from one frame to the next in the ground-truthing process.
      <br/>
      Similarly, Snc corresponds to the set of cluster pairs which did not match in the ground-truthing process.
      <br/>
      After the statistical analysis the following parameters are generated:
      <br/>
      mc : The mean vector of the set Sc.
      <br/>
      mnc : The mean vector of the set Snc.
      <br/>
      md : The mean difference vector.
      <br/>
      md =mc -mnc
      <br/>
      Cc : The covariance matrix of the set Sc.
    </p>
    <p num="171">Cnc : The covariance matrix of the set Snc.</p>
    <p num="172">
      C: The average covariance matrix.  (Equation image '13' not included in text)
      <br/>
      C1 : Inverse of the average covariance matrix.
    </p>
    <p num="173">
      Pc : A priory probability of the correspondence class.
      <br/>
      This parameter is computed by counting the number of correspondence instances in the ground-truthed data.
    </p>
    <p num="174">
      Pnc : A priory probability of the non-correspondence class.
      <br/>
      This parameter is computed by counting the number of non-correspondence instances in the ground-truthed data.
    </p>
    <p num="175">
      The weight vector w is computed as
      <br/>
      w=C-1 Md.
    </p>
    <p num="176">The constant threshold w0 is computed as  (Equation image '14' not included in text)</p>
    <p num="177">Given the weighting vector w and constant w0, the runtime tracking system can check the sign of the following decision function to decide on the correspondence between two clusters.  (Equation image '15' not included in text)</p>
    <p num="178">In order to normalize the correspondence score this function is normalized by the maximum correspondence score and the minimum non-correspondence score such that the result is within the range of -1.0 to 1.0</p>
    <p num="179">
      The region corresponder 500 outputs correspondence scores between region clusters of consecutive frames which are added as information to the OCG, as well as updated and additional region descriptors for the region clusters.
      <br/>
      Correspondence scores which are less than 0 will cause the OCGM 300 not to link a new node to an existing node, whereas all other correspondence scores will cause a link to be added and considered for further processing by the OCGM 300.
    </p>
    <p num="180">
      To illustrate the operation of the region corresponder 500, reference is made to FIGS. 12 and 13. FIG. 12 illustrates the image for person object 166 and person object 166' in consecutive video frames.
      <br/>
      The region cluster corresponding to the person objects 166 and 166' are shown at reference numerals 306 and 306' in FIG. 13.
    </p>
    <p num="181">Set forth below is a list of distances for the various features and a resulting correspondence score between region clusters 306 and 306'. The correspondence value between region clusters 306 and 306' would be 1 0 (slashed zero)</p>
    <heading>TRAJECTORY GENERATOR</heading>
    <p num="182">The trajectory generator 800 is described with reference to FIG. 14. The trajectory generator 800 generates information about the trajectory for a track on the OCG and is invoked in step 335 (FIG. 4A) by the OCGM 300.</p>
    <p num="183">
      The trajectory generator 800 determines trajectory information for a track in a given frame, based on the most recent node (region cluster) for the track in that frame.
      <br/>
      The trajectory parameters include at least one at:
      <br/>
      1.
      <br/>
      Current velocity of the region cluster.
      <br/>
      2. Current acceleration.
      <br/>
      3. Maximum velocity over the course of the trajectory.
      <br/>
      4. Maximum acceleration over the course of the trajectory.
      <br/>
      5. Validity of the trajectory.
      <br/>
      6. The current mass of the region cluster.
    </p>
    <p num="184">
      This information is maintained in a data structure for the track by the OCGM 00.
      <br/>
      A history of trajectory information for each frame in which the track exists is hereby created.
    </p>
    <p num="185">
      The current velocity is computed by dividing the distance from the centers of ass of the region cluster in the two most recent frames of the track by the difference n time between frames.
      <br/>
      The current acceleration is computed by dividing the difference in velocities over the three most recent frames, by the corresponding time between the three frames.
    </p>
    <p num="186">
      The status of the trajectory of a track is based upon the trajectory parameters.
      <br/>
      The trajectory status takes on one of several possible states: Invalid Mass; Invalid Acceleration; Invalid Velocity; and Valid.
    </p>
    <p num="187">
      Invalid Length is assigned to a track that has less than three nodes, which means that the acceleration could not be computed.
      <br/>
      This value is also assigned if any of the last three nodes had a status of Invalid Velocity, Invalid Acceleration, or Invalid Mass.
    </p>
    <p num="188">
      Invalid Mass is assigned to a track if there is a significant difference between the current mass of the region cluster and the mass of the region cluster in the previous frame.
      <br/>
      This indicates that a reliable velocity cannot be computed because the mass has been radically altered.
      <br/>
      The percent difference allowed is a predetermined trajectory parameter.
      <br/>
      The current mass is the number of pixels in the region cluster.
    </p>
    <p num="189">Invalid velocity is assigned to a track that has exceeded a maximum velocity allowed for the scene, set by a predetermined trajectory parameter.</p>
    <p num="190">Invalid acceleration is assigned to a track that has exceeded a maximum acceleration allowed for the scene, set by a predetermined trajectory parameter.</p>
    <p num="191">A Valid trajectory status is assigned to a track if none of the trajectory parameters are determined to be invalid, that is, not within predetermined acceptable limits.</p>
    <p num="192">The output of the trajectory generator includes the current velocity of the region cluster, the current acceleration of the region cluster, the maximum velocity of the region cluster over its entire track, the maximum acceleration of the region cluster over its entire track and the validity of the track as of the current video frame.</p>
    <p num="193">SPLIT/MERGE RESOLVER</p>
    <p num="194">
      The split/merge resolver 700 is described in conjunction with FIGS. 15 and 16. The split/merge resolver 700 is invoked in step 335 and step 360 by the OCGM 300 to track region clusters through merges and splits of OCG objects, when it was not possible to match an object node to a track based on information generated by the region corresponder 500.
      <br/>
      This generally occurs when a region cluster has undergone a radical change in feature characteristics such as size or shape, which often occurs when the original region cluster has split into several smaller regions, or when the original region cluster merges with another region cluster.
    </p>
    <p num="195">
      The split/merge resolver 700 applies a different set of mechanisms than the region corresponder 500 for determining the confidences between the original region cluster and candidates, and is better suited for resolving split and merge situations.
      <br/>
      Among the set of techniques applied by the split/merge resolver 700 are trajectory following and prediction, mass preservation, color matching and position overlap.
    </p>
    <p num="196">
      The split/merge resolver 700 operates on regions from two consecutive frames.
      <br/>
      It receives as input a region cluster, called the original region cluster from a first frame (frame n), the trajectory of the original region cluster, a set of regions called candidate regions from the next frame (frame n+1), the color image for frame n and the color image for frame n+1 .
      <br/>
      It is the responsibility of the split/merge resolver to generate confidence values for each candidate region in frame n+1, where the confidence value indicates the likelihood that the candidate region came from the original region cluster in the previous frame.
    </p>
    <p num="197">
      Trajectory following and prediction means that if a region cluster has been following a smooth, continuous track, then it is likely to continue following this track.
      <br/>
      Therefore, candidate regions that are more likely to have been generated from the original region cluster are located in positions that follow the original region cluster's trajectory.
    </p>
    <p num="198">
      Mass preservation is the concept that the size of a person, in pixels, generally changes little from frame to frame.
      <br/>
      This concept is applied by the split/merge resolver 700 by looking for enough candidate regions to make up a large proportion of the mass of the original region cluster.
    </p>
    <p num="199">
      Color matching is the concept that the color of individual regions in the original region cluster generally does not change much from frame to frame.
      <br/>
      Therefore, a good method of matching regions between frames involves detecting similarities in color between regions.
    </p>
    <p num="200">
      Position overlap is the concept that region clusters may not move much in the scene from frame to frame.
      <br/>
      Therefore, a good matching region clusters between frames involves computing the number of pixels in each region cluster that have the same position in both frames.
    </p>
    <p num="201">
      With reference to FIG. 16, the operation of the split/merge resolver 700 will be described.
      <br/>
      In step 705, it is determined whether the trajectory for the original region cluster exists and is valid.
      <br/>
      If the trajectory of the original region cluster exists and is valid, then in step 710, the position of the original region cluster in the next frame is predicted using velocity and acceleration information generated by the trajectory generator 800.
      <br/>
      The original region cluster is shifted to this predicted position, and this shifted region cluster is called the predicted region cluster.
    </p>
    <p num="202">Then, in step 715, the amount of overlap between each candidate region cluster and the predicted region cluster is determined.</p>
    <p num="203">
      In step 720, for each candidate region that is determined to have some overlap (non-zero overlap) with the predicted region cluster, the degree of color match with the predicted region cluster is determined.
      <br/>
      The degree of color match is determined by one of several methods known in the art.
      <br/>
      For example, the color histogram peaks are compared for the areas of overlap between the predicted region cluster and the candidate region cluster.
      <br/>
      The closer the peaks of the histograms, the better the match.
      <br/>
      Alternatively, the color difference in gray levels is added for each overlapping pixel between the predicted region cluster and the candidate region cluster.
      <br/>
      The smaller the sum, the better the match between the two region clusters.
    </p>
    <p num="204">
      Next, in step 725, a confidence value is generated for each candidate region cluster determined to have non-zero overlap with the predicted region cluster.
      <br/>
      The confidence value is based upon the degree of overlap and the degree of color matching.
      <br/>
      It is possible also that two confidence values are generated, one for the degree of overlap and one for the degree of color matching.
    </p>
    <p num="205">
      In step 730, it is determined whether the overlapping mass of the predicted region cluster is sufficiently large compared to the original region cluster.
      <br/>
      That is, it is determined whether the candidate region clusters that have non-zero overlap with the original region cluster and have confidences that exceed a predetermined threshold have a sufficient amount of overlap to make up a large portion of the original region cluster.
    </p>
    <p num="206">In step 735, if sufficient mass of the original region cluster has been accounted for, then the confidence values for each of the candidate region clusters (which have non-zero overlap with the original region cluster) are returned.</p>
    <p num="207">
      Otherwise, in step 740, if a sufficient mass of the original region cluster has not been accounted for the candidate region clusters determined to have non-zero overlap or the trajectory of the original region cluster is determined to be invalid in step 705, then in step 740, the candidate region clusters that do not overlap with the predicted region cluster are closely examined.
      <br/>
      The color histogram peaks and pixel mass is determined for each connected component of the original region cluster, where each region cluster is made up of one or more regions and each region is made up of one or more connected components.
      <br/>
      A connected component is one of the elements of a highly confidence region set for a particular region, as described in the co-pending application entitled "System and Method for Segmenting Image Regions From a Scene Likely to Represent Particular Objects in the Scene."
    </p>
    <p num="208">In step 745, the set of possible candidate region clusters is reduced by removing candidate region clusters that are too far away from the predicted region cluster, that is, they could not be reached by the original region cluster based on maximum velocities and accelerations possible for the types of objects, such as person, which are tracked.</p>
    <p num="209">In step 750, for the remaining candidate region clusters, the color histogram peaks and pixel mass is determined for each connected component of the region cluster.</p>
    <p num="210">
      In step 755, each connected component of the original region cluster is compared with each connected component for each candidate region cluster.
      <br/>
      Specifically, a confidence value is generated based upon the closeness of the histogram peaks; the similarity in mass; and/or the ratio of the connected component mass to the total mass of the region cluster.
    </p>
    <p num="211">In step 760,the confidence values for every connected component in the region cluster are combined (by addition, selecting a maximum value, or some other method) to form the final confidence for the region cluster.</p>
    <p num="212">
      If at least one candidate region cluster has a confidence that exceeds a predetermined threshold, then in step 765, the confidence values generated for each candidate region cluster in step 760 are returned to the OCGM 300.
      <br/>
      These confidence values are then used by the OCGM 300 to determine the links between nodes in frames n and n+1.
    </p>
    <p num="213">
      If no candidate region cluster has a sufficient confidence, then the position overlap method is executed.
      <br/>
      The confidence score for each candidate region cluster is initialized.
      <br/>
      The location of each pixel in the original region cluster (from frame n) is examined in flame n+1.
      <br/>
      If a candidate region cluster contains a pixel at that location, then the confidence of that candidate region cluster is increased.
      <br/>
      This is repeated for each pixel in the original region cluster.
    </p>
    <p num="214">
      The final confidence for each candidate region cluster is obtained by scaling its current confidence score by the minimum of the total number of pixels in the original region cluster and the candidate region cluster.
      <br/>
      These confidence values are returned to the OCGM 300 and are then used by the OCGM 300 to determine the links between nodes in frames n and n+1.
    </p>
    <heading>MERGE CORRESPONDER</heading>
    <p num="215">
      Referring to FIGS. 17 and 18, the merge corresponder will be described.
      <br/>
      The merge corresponder 900 operates when two or more objects merge in a scene to form a single region cluster.
      <br/>
      Generally, it is difficult to track individual objects once a merge has occurred.
      <br/>
      The merge corresponder 900 tracks objects through the merge condition by extracting more detailed features from the objects before, during, and after the merge.
      <br/>
      The advantage of tracking through a merge condition is that it leads to more reliable tracks than dropping the tracks at the merge and later reassembling them after the merge.
    </p>
    <p num="216">
      The merge corresponder 900 has three stages of operation: a merge transition stage 910, a merge tracking stage 920, and a split transition stage 930.
      <br/>
      Merge transition occurs during the two image frames in which the objects initially merge.
      <br/>
      Merge tracking occurs in all frames in which the merge continues.
      <br/>
      Split transition occurs in the two image frames when the objects once again split into individual region clusters.
    </p>
    <p num="217">
      During the merge transition stage 910, the merge corresponder 900 receives as input:
      <br/>
      1.
      <br/>
      A set of region clusters, called the initial region clusters, each corresponding to a person in frame n.
      <br/>
      2. The color image from frame n.
      <br/>
      3. The merged region cluster from frame n+1.
      <br/>
      4. The color image from frame n+1.
    </p>
    <p num="218">
      In the merge transition stage 910, the following steps are performed.
      <br/>
      1) Each initial region cluster for frame n is resegmented with a stricter threshold to generate a larger set of connected components for that region cluster.
      <br/>
      2) The merged region cluster from frame n+1 is resegmented in a similar fashion.
      <br/>
      3) An enhanced set of features, such as color histogram peaks, are extracted for each connected component in both the initial region cluster set and the merged region cluster.
      <br/>
      4) Each connected component from the initial region cluster set is matched to one or more connected component(s) in the merged region cluster based on similarity of features.
      <br/>
      A confidence value is generated for each match that is a function of the simplicity of the match.
      <br/>
      5) The connected components in the merged region cluster are assigned labels indicating which initial region cluster they most closely match.
      <br/>
      6) The feature enhanced connected components, their assigned labels and confidences are returned.
    </p>
    <p num="219">
      The outputs of the merge transition stage 910 are:
      <br/>
      1.
      <br/>
      A label for each connected component in the merged region cluster, where the label indicates to which region cluster the connected component belongs.
      <br/>
      2. A confidence value for each connected component in the merged region cluster, where the confidence value indicates the likelihood that the label for the merged region cluster has been correctly assigned.
      <br/>
      3. An enhanced set of features for each connected component, that will be used in subsequent stages of the merge corresponder.
    </p>
    <p num="220">
      In the merge tracking stage 920, the merge corresponder 900 receives as input the output of the merge transition stage as well as the merged region cluster from frame n+2 and the color image from frame n+2.
      <br/>
      The merge corresponder may also receive as input additional region clusters from frame n+1.
      <br/>
      These additional region clusters are those that have merged with the existing merged region cluster in frame n+2.
      <br/>
      During the merge tracking stage 920, the following steps are performed.
      <br/>
      1) Each additional region cluster for frame n+1 is resegmented with a stricter threshold to generate a larger set of connected components for that additional region cluster.
      <br/>
      2) An enhanced set of features, such as color histogram peaks, are extracted for each connected component in the additional region cluster set.
      <br/>
      3) The merged region cluster from frame n+2 is resegmented with a stricter threshold to generate a larger set of connected components for that region cluster.
      <br/>
      4) An enhanced set of features, such as color histogram peaks, for each connected component in the merged region cluster from frame n+2.
      <br/>
      5) Each connected component from the merged region cluster from frame n+1 and the additional region cluster set is matched to one or more connected component in the merged region cluster from frame n+2 based on similarity of features.
      <br/>
      6) The connected components in the merged region cluster from frame n+2 are assigned labels indicating which region cluster they most closely match, based on the labels from frame n+1.
      <br/>
      A confidence value is generated for each match that is a function of the similarity of the match.
      <br/>
      7) The feature enhanced connected components from frame n+2 and their assigned labels are returned.
    </p>
    <p num="221">The outputs of the merge tracking stage are:</p>
    <p num="222">
      1.
      <br/>
      A label for each connected component in the merged region cluster from frame n+2, where the label indicates to which region cluster the connected component belongs.
      <br/>
      2. A confidence value for each connected component in the merged region cluster from frame n+2, where the confidence value indicates the likelihood that the label for the merged region cluster has been correctly assigned.
      <br/>
      3. An enhanced set of features for each connected component from frame n+2, that will is used in subsequent stages of the merge corresponder 900.
    </p>
    <p num="223">
      Merge tracking is repeated frame after frame until a region cluster split has been detected.
      <br/>
      Once a split has been detected, the split transition stage 930 is executed.
    </p>
    <p num="224">
      In split transition stage 930, the merge corresponder 900 receives the following input.
      <br/>
      1. A label for each connected component in the merged region cluster from frame n+m, where the label indicates to which region cluster the connected component belongs.
      <br/>
      2. An enhanced set of features for each connected component from frame n+m.
      <br/>
      3. The set of one or more final region clusters from frame n+m+1.
      <br/>
      4. The color image from frame n+m+1.
    </p>
    <p num="225">
      In the split transition stage 930, the following steps are performed.
      <br/>
      1) Each region cluster in the set of final region clusters is resegmented with a stricter threshold to generate a larger set of connected components for that region cluster.
      <br/>
      2) An enhanced set of features is extracted from each connected component in the set of final region clusters.
      <br/>
      3) Each connected components from the merged region cluster from frame n+m is matched to one or more connected component in the set of final region clusters based on similarity of features.
      <br/>
      A confidence value is generated for each match that is a function of the similarity of the match.
      <br/>
      4) The connected components in the set of final region clusters are assigned labels indicating which region clusters they most closely match, based on the labels from frame n+1.
      <br/>
      5) A set of labels is ascertained for each final region cluster based upon the labels of its connected components.
      <br/>
      A confidence is assigned to each label based upon the confidence of labels of the connected components, as well as the mass of the connected components.
      <br/>
      6) A single label is assigned to each final region cluster.
      <br/>
      This single label is the label which contains the maximum confidence from the set of labels.
      <br/>
      However, if the confidence of the maximum label does not exceed a predetermined threshold, the label "unknown" is assigned.
      <br/>
      7) The assigned label for each final region cluster is returned.
    </p>
    <p num="226">The output of the split transition stage 930, and thus the output of the merge corresponder 900, is a label for each final region cluster, and a confidence for that label.</p>
    <heading>TRACK CORRESPONDENCE GRAPH MANAGER</heading>
    <p num="227">The TCGM 400 manages the accumulation of OCG track segments over time in the track correspondence graph (TCG).</p>
    <p num="228">
      Referring back to FIG. 3, the TCG is shown at reference numeral 410.
      <br/>
      The TCG 410 is a list of tree data structures, shown at reference numeral 416, that contain track information about one or more objects.
      <br/>
      A TCG node, shown at reference numeral 412 in FIG. 3, contains information that describes some portion, or all, of an object's path through the camera view.
      <br/>
      Each TCG node references one or more OCG tracks that represent some portion of an object's track through the scene.
      <br/>
      OCG tracks are stored in an ordered list in a TCG node.
      <br/>
      The ordered list of OCG tracks contain path and feature information with respect to the object as it moves through the scene.
      <br/>
      In some instances, one TCG node maintains all of the OCG tracks created for a single object track.
    </p>
    <p num="229">
      Branches in the tree, shown at reference numeral 414, are created when the tracks of two or more objects merge.
      <br/>
      This occurs when the OCGM 300 is unable to uniquely identify two or more objects in the image, resulting in a single OCG track for a set of objects.
      <br/>
      When the objects are identified at some point in the future, the system links OCG tracks prior to the merge with OCG tracks after the merge.
      <br/>
      This is termed a split and merge resolution, and is described in more detail hereinafter.
    </p>
    <p num="230">
      A TCG track is an ordered set or sequence of nodes from the TCG 410 that represents the complete path of an object through the scene or camera view.
      <br/>
      TCG tracks are generated by performing a depth first traversal of the TCG trees on the TCG tree list 416, generating all ordered sets of TCG Nodes.
      <br/>
      In FIG. 3, there are two TCG trees that represent the tracks of three objects.
      <br/>
      The following table contains the three tracks with the set of TCG nodes and OCG tracks that form the object track.
    </p>
    <p num="231">
      --
      <br/>
      --         Objects        TCG Nodes   OCG Tracks
      <br/>
      --         Object 1       4, 1        9, 6, 4, 1
      <br/>
      --         Object 2       4, 2        9, 8, 5, 2
      <br/>
      --         Object 2       3           3
    </p>
    <p num="232">The TCG tree with a root node 4 contains a merged track; OCG tracks 6 and 8 merged and formed track 9.</p>
    <p num="233">
      The inputs to the TCGM 400 are OCG tracks generated by the OCGM 300.
      <br/>
      Output of the TCGM 400 are complete tracks of objects moving through the camera field of view.
      <br/>
      The TCGM 400 calls upon the functions of an occlusion corresponder 1000 in order to manage the TCG 410.
      <br/>
      Turning to FIGS. 19-25, the operation of the TCGM 400 will be described.
    </p>
    <p num="234">TCGM/OCGM Interface</p>
    <p num="235">
      Two interface points exist between the OCGM 300 and the TCGM 400.
      <br/>
      First, the OCG forwards OCG tracks to the TCGM 400 from the OCGM 300 based on criteria described under OBJECT CORRESPONDENCE GRAPH MANAGER.
      <br/>
      Second, after the OCGM 300 has updated all tracks based on the current frame, the TCGM 400 is invoked to perform frame post processing.
      <br/>
      First, OCG track insertion is described, followed by TCGM post processing.
    </p>
    <p num="236">OCG Track Insertion</p>
    <p num="237">
      OCG Tracks that are linked to TCG tracks are processed differently than OCG tracks that are not linked to TCG tracks.
      <br/>
      The following steps are performed by the TCGM 400 when an OCG track with no TCG track links are forwarded to the TCGM 400.
      <br/>
      1. Based on the origination of the OCG track, the TCGM must determine if this track can be linked with existing TCG tracks.
      <br/>
      The origination of the OCG track is the initial location of the object in image coordinate space.
      <br/>
      If the origination of the track is from an egress, determined by queries to the track supervisor 250, described in more detail under the heading TRACK SUPERVISOR, TRACK MANAGER, VIEW MANAGER, then it can be assumed that the OCG track represents a new object entering the scene.
      <br/>
      In this case, a new TCG track is created and the OCG track is added to the TCG track.
      <br/>
      2. If the OCG track does not originate from an egress, then the object track originated from within the camera view.
      <br/>
      This occurs when the object is occluded, image segmentation failed to identify the object for one or more frames, all methods of correspondence failed, or erroneous tracking objects were created for some period of time by the OCGM.
      <br/>
      In this instance, the TCGM attempts to link the OCG track with existing TCG tracks.
      <br/>
      A priority is placed on the order of search and is listed below.
      <br/>
      - (a) search broken TCG tracks first
      <br/>
      - (b) search merged TCG tracks second
    </p>
    <p num="238">
      In order to determine if a track can be reattached to an existing TCG track, the occlusion corresponder 1000 is invoked.
      <br/>
      The TCGM 400 invokes the occlusion corresponder with the oldest node of the OCG track with the most recent of the TCG track.
      <br/>
      The highest ranking match amongst the broken tracks is generated first.
      <br/>
      If the confidence in this match, returned for the occlusion corresponder 1000, exceeds a minimum confidence value threshold, the OCG track is added to the matching TCG track.
      <br/>
      This is done by performing the processing steps for inserting an OCG track with a TCG link.
      <br/>
      If a match is not found, the same search is performed on merged TCG tracks.
    </p>
    <p num="239">
      The following steps are performed by the TCGM 400 when an OCG track with a TCG track link is forwarded to the TCGM 400.
      <br/>
      1. If the OCG Track contains two or more TCG links, a merge situation has been encountered.
      <br/>
      See the description under the heading TCG Merge Processing for a description of the merge process.
      <br/>
      2. If the OCG Track only contains one TCG link, the TCGM 400 determines if a track split is in progress.
      <br/>
      If the TCG node referenced by the OCG track has two or more OCG track references, a split is in progress.
      <br/>
      See the description under the heading TCG Split Processing for a description of the split process.
      <br/>
      3. If a split or merge is not encountered, the OCG track is added to the TCG Node.
    </p>
    <p num="240">
      With further reference to FIGS. 19-23, the process of inserting an OCG track in the TCG during a split or merge will be explained.
      <br/>
      The merge and split process is described below.
    </p>
    <p num="241">TCG Merge Processing</p>
    <p num="242">
      A merge creates an additional layer in the TCG and is explained with reference to FIGS. 19-20. As shown in FIG. 19, prior to the merge, the system has N independent tracks represented by TCG Node 1--TCG Node N. Each track is on the TCG track list.
      <br/>
      A single OCG track has links to each TCG Track, i.e. TCG Node 1--TCG Node N. When the OCG track is forwarded to the TCG, the TCG creates a parent node TCG Node P, that represents the merger of the N object tracks.
      <br/>
      TCG Node P has children nodes TCG Node 1--TCG Node N, which contain individual object tracks prior to the merge.
      <br/>
      The OCG track representing the merge track is added to TCG Node P. In the future, all OCG Tracks will continue to be added to TCG Node P until the composite object splits into one or more constituent objects.
    </p>
    <p num="243">TCG Split Processing</p>
    <p num="244">
      A split creates a branch in an object track, and is explained with reference to FIGS. 21-23. Prior to a split, the system has one TCG track that represents N object tracks.
      <br/>
      Each object track is found by traversing the tree formed at the root node, TCG Node P. Each object has merged, and the merge is represented by TCG Node P, where OCG tracks on Node P are the track of the merged object.
      <br/>
      At some point in the future, the object may break into N individual objects.
      <br/>
      The split operation attempts to link objects prior to the merge with those objects created after the split.
    </p>
    <p num="245">
      FIG. 21 illustrates a logical view of the problem.
      <br/>
      FIG. 22 illustrates the TCG prior to the forwarding of split OCG tracks.
      <br/>
      FIG. 23 illustrates the TCG after the split/merge has been resolved.
      <br/>
      When OCG tracks have been forwarded to the TCGM 400, the TCG builds a new set of nodes, S1 through SN, that represent the object tracks after the split.
      <br/>
      The TCGM 400 then determines which tracks prior to the merge and after the split correspond to the same object.
    </p>
    <p num="246">
      Matching TCG Nodes prior to the merge to TCG Nodes after the split is accomplished by two methods.
      <br/>
      First, if the OCGM 300 successfully tracked an object through the merge, the OCG Track forwarded to the TCG Manager contains an explicit link to the TCG Node prior to the merge.
      <br/>
      If the OCG Track does not contain an explicit link, the TCGM 400 invokes the occlusion corresponder 1000 in order to link the OCG track to the proper TCG Node.
      <br/>
      The occlusion corresponder 1000 is described in more detail hereinafter in conjunction with FIGS. 26 and 27 under the heading OCCLUSION CORRESPONDER.
    </p>
    <p num="247">
      In order to perform occlusion correspondence, the TCGM 400 must identify a set of region clusters on which to perform the correspondence operation.
      <br/>
      The region cluster selected after the split is a region cluster obtained from the OCG track.
      <br/>
      At this time, the oldest region cluster on the OCG track is used.
      <br/>
      Region clusters prior to the merge are selected by traversing the TCG Track tree for nodes that contain less than two children, i.e. no merge.
      <br/>
      The most recent region cluster is selected from these nodes for correspondence.
    </p>
    <p num="248">
      In order to select the best corresponding region cluster, the correspondence algorithm used in step 335 of the OCGM 400 is employed.
      <br/>
      This requires that the complete set of region clusters are available.
      <br/>
      In a split/merge condition, this implies that all objects have split into individual objects before the correspondence operation is performed.
      <br/>
      If more than two objects have merged and split, the system must delay the correspondence step until the last object has been recovered.
      <br/>
      This is accomplished through a TCG Node Resolution Queue.
      <br/>
      As objects split and are recovered, their tracks are added to the TCG Node Resolution Queue.
      <br/>
      When the length of the resolution queue matches the total possible number of tracks for the TCG Node Tree, correspondence is performed and the tracks are resolved by the occlusion corresponder 1000.
    </p>
    <p num="249">
      In some instances, objects may not be recovered.
      <br/>
      This occurs when the merged object exits the camera view, or is a result of errors in segmentation or ambiguity in the model matcher 600.
      <br/>
      In this case, the TCGM 400 forces the resolution of the merge/split when the object track is terminated.
    </p>
    <p num="250">When an object track is resolved, the TCGM creates a new TCG track for the resolved object track as is explained in conjunction with FIGS. 24 and 25. Assume the track resolves to TCG Node 6 in FIG. 24. Initially, the list of TCG nodes that form the complete track is generated, the ordered set &lt;1,2,4,6&gt;. This path is determined by a search of the TCG track tree.</p>
    <p num="251">
      After the track is identified, the object track is removed from the current TCG track tree.
      <br/>
      Since the tracks of other objects are represented in the tree, only those nodes that contain track information for the current object are removed.
      <br/>
      In FIGS. 24 and 25, only node 6 is removed from the tree.
    </p>
    <p num="252">
      The final step is to create a new TCG track that represents the object track.
      <br/>
      This operation is performed by duplicating those nodes that form the complete object track.
      <br/>
      As an example, nodes 1, 3 and 4 are duplicated.
    </p>
    <p num="253">Frame Post Processing</p>
    <p num="254">
      After the OCG and TCG have been updated for the current frame, additional processing steps are performed to update the TCG.
      <br/>
      The following steps are performed.
      <br/>
      1. TCG tracks that contain an OCG track with a BAD status are deleted.
      <br/>
      2. TCG tracks that contain an OCG track with a DEAD status that have ended at an image location that is defined as an egress are deleted and forwarded to the track supervisor 250.
      <br/>
      3. Dead TCG Tracks that have not been updated for greater than the Maximum TCG Dead Time are deleted from the TCG and forwarded to the track supervisor 250.
      <br/>
      This removes tracks that have ended in an area other than an egress that have a low likelihood of being attached to a future OCG track.
    </p>
    <p num="255">
      4. The TCGM searches the TCG for TCG Nodes that contain a merge.
      <br/>
      In some instances, the merge may be a false merge, since the two tracks may be for the same track.
      <br/>
      This typically results when the OCGM 300 generates erroneous tracks.
      <br/>
      To detect this occurrence, the TCGM searches for two TCG tracks, T1 and T2, such that
      <br/>
      - (a) T1 is longer than T2, and
      <br/>
      - (b) all OCG nodes in T2 share area with OCG nodes in T1
    </p>
    <p num="256">If two such TCG tracks are found on a TCG node, track T2 is deleted.</p>
    <heading>OCCLUSION CORRESPONDER</heading>
    <p num="257">
      With reference to FIGS. 26 and 27, the occlusion corresponder 1000 is described.
      <br/>
      The occlusion corresponder 1000 is required to perform correspondence between objects, region clusters, over a long period of time.
      <br/>
      As a simple example, consider two persons P1 and P2 walking together through a scene.
      <br/>
      At time t1 and at point A (in the image space) both of them disappear behind an object (such as a post).
      <br/>
      They reappear as persons P'1 and P'2 at time t2 and in point B. The spatial distance between points A and B and the temporal distance t2 -t1 may be too large to resolve the correspondence by the short term region corresponder.
      <br/>
      The shape features of P1 and P2 may be significantly changed if points A and B are far apart.
    </p>
    <p num="258">
      As another example, consider persons P1 and P2 walking together through the scene.
      <br/>
      At point A (in the image space), they become close to each other such that they are segmented as one person P3.
      <br/>
      They remain merged while they move from point A to point B where they are segmented as persons P'1 and P'2.
      <br/>
      Similar to the first example, P'1 and P'2 may have significantly different shapes when compared to their original counterparts P1 and P2.
    </p>
    <p num="259">
      To resolve the correspondence for situations such as those explained in the above two examples, it is necessary to provide a correspondence algorithm that does not rely on the shape and geometrical features but uses intensity (color) features in a more comprehensive way.
      <br/>
      In order to make the most out of the color information, a process that uses color in correlation with the orientation of the object of interest (e.g., a person) is provided.
      <br/>
      This yields a descriptive feature called directional colors (DC).
      <br/>
      Compared to simpler color features such as the ones based on the global color histogram of the object, directional colors enable analysis of the color information in a number of areas along the principle axis of inertia of the object.
      <br/>
      As an example, consider a person whose top part is blue and bottom part is white.
      <br/>
      Another person whose top part is white with blue on the bottom part will have the same global color features as the first person.
      <br/>
      Therefore, using global color features it is not possible to distinguish these two people whereas the directional color featured can easily resolve such cases of correspondence.
    </p>
    <p num="260">
      Given a region cluster corresponding to a person, two primary pieces of information are necessary to evaluate its directional color features.
      <br/>
      First, the oriented bounding box (OBB) of the region cluster representing the object.
      <br/>
      Second, the direction of the object with respect to the its OBB.
      <br/>
      This directional information may be provided by specifying, for example, the position of the person's feet on the OBB.
    </p>
    <p num="261">
      With reference to FIG. 27, in order to extract the DC features, the object's OBB 1010 is partitioned into a number of analysis slots 1020.
      <br/>
      These slots are constructed along the principle axis of inertia inside the OBB 1010.
      <br/>
      The slots are indexed from 0 to N-1 where N is the number of slots inside the OBB.
      <br/>
      Typical values for N are 2 and 4.
      <br/>
      Slot 0 shares one of its edges with the bottom edge of the OBB.
      <br/>
      The bottom edge of the OBB is the edge that includes the foot position as one of its points
    </p>
    <p num="262">
      Each of the analysis slots contains part of the object's region cluster.
      <br/>
      It is also possible to have an empty slot.
      <br/>
      This occurs if the components of a region cluster are far apart.
      <br/>
      To extract the color information the region cluster is scanned pixel by pixel to compute Y, U, and V color histograms (from a PAL color signal) inside each of the slots.
      <br/>
      These histograms are smoothed and analyzed to extract the dominant color in each of the slots.
      <br/>
      To reduce the computational complexity, the analysis is performed on three one-dimensional histograms rather than a 3-dimensional histogram.
      <br/>
      The histogram analysis involves finding the color value that maximizes the histogram function.
      <br/>
      The analysis results in a point in the YUV color coordinate system that represents the color of the slot.
      <br/>
      Performing the analysis over N slots results in N 3-dimensional points (Yi Ui,Vi) where i ranges from 0 to N-1.
      <br/>
      These N points in the color space represent the DC features of a given object.
      <br/>
      The difference between the DC features and a global color feature scheme is significant.
      <br/>
      It is readily seen that DC features represent the color of a person by an N-entry array of points in the three dimensional color space.
      <br/>
      This is in contrast with a single color representation which yields a single point in the same color space.
    </p>
    <p num="263">
      There are many techniques for computing the color distance between two objects.
      <br/>
      For example, one way of measuring the correspondence between person Pi and P2 is to compute several distance values:  (Equation image '16' not included in text)
    </p>
    <p num="264">The overall distance is computed by taking a weighted average of the three individual distances; i.e., d= ALPHA y dy + ALPHA u du + ALPHA v dv where  ALPHA y,  ALPHA u, and  ALPHA v are the weightings for each of the three color distant components.</p>
    <p num="265">A correspondence score is then generated based on the overall distance value.</p>
    <p num="266">TRACK SUPERVISOR, TRACK MANAGER, VIEW MANAGER</p>
    <p num="267">With reference to FIGS. 28-30, the track supervisor 250, track manager 260 and view manager will be described.</p>
    <p num="268">The track supervisor 250 provides object tracks in real-world coordinates for the view of a scene from a single camera to the track manager 260.</p>
    <p num="269">
      The track supervisor 250 receives highly likely object tracks from the TCGM 400 upon track completion.
      <br/>
      After receiving a track from the TCGM 400, the track supervisor 250 transforms the complete customer path from the image coordinate space to the real-world coordinate space prior to transferring the track to the track manager 260.
      <br/>
      This task is performed using transformation information supplied by the view manager 270.
    </p>
    <p num="270">
      The track supervisor 250 also processes queries from the TCGM 400 in order to determine if an object is exiting the camera view.
      <br/>
      In order to process such queries, the track supervisor 250 must have access to information describing the physical environment and the object track.
      <br/>
      Physical environment information is provided by the view manager 270 as a fringe descriptor in a real-world description database of the physical environment of the scene.
      <br/>
      The object track is provided by the TCGM 400 in the form of a TCG track.
      <br/>
      The track supervisor 250 compares the object location, in image space, to the fringe descriptor to determine if the object is in a fringe area, an egress.
      <br/>
      The track for an object that is in the fringe space can then be removed by the TCGM 400.
    </p>
    <p num="271">
      The track supervisor 250 manages on-line queries from the track manager 260.
      <br/>
      The track supervisor 250 obtains the current state of the tracking system from status information local to the track supervisor 250.
      <br/>
      If the query cannot be satisfied by the local information, the track supervisor 250 queries the CGM 230 for status information from the TCGM 400.
    </p>
    <p num="272">
      In summary, inputs to the track supervisor 250 are the real-world transformation parameters, obtained from the real-world description database, required for track transformation from image space to real-world space, description of camera entry and exit points, and complete TCG tracks.
      <br/>
      Output of the track supervisor 250 are object tracks defined in real-world coordinates, passed to the track manager 260.
    </p>
    <p num="273">The track manager 260 provides long-term storage of object tracks, as well as on-line access to current tracking information.</p>
    <p num="274">
      A track data structure consists of real-world coordinates, time stamps, and an object identifier.
      <br/>
      The track manager 260 receives the list of real-world coordinates and time stamps from the track supervisor 250, in the form of an object track.
      <br/>
      Prior to storing the object track to the track database, an object identifier is assigned to the track and the track is consolidated.
      <br/>
      Consolidation of the track is user configurable.
      <br/>
      For example, it is possible to configure the system to store an object track as a series of locations sampled at five second intervals.
    </p>
    <p num="275">
      The track manager 260 provides on-line access to active track information so that applications can retrieve current tracking information in real-time.
      <br/>
      For example, to support an application that monitors the number of people in a queue so that an alert can be issued when the queue length exceeds a threshold, real-time access to the number of people in a specific area is required.
      <br/>
      On-line queries are directed to the track supervisor 250 for the current state of objects and object tracks in the camera view.
    </p>
    <p num="276">
      The view manager 270 uses a priori information about the viewable world of an individual camera.
      <br/>
      In a single camera system architecture, the only function of the view manager 270 is to provide a priori information about camera entry and exit points, i.e. fringe areas.
      <br/>
      This information is read from the real-world description database and passed to the track supervisor 250.
    </p>
    <heading>USING THE TRACKING INFORMATION</heading>
    <p num="277">
      The tracking system according to the present invention is suitable for many applications.
      <br/>
      One type of application is to track the movement of people through a scene, such as a retain establishment, a bank, etc.
      <br/>
      The tracking system generates information to enable the determination of movement of people through the scene, and particularly, where in the scene people are, when they were there, for how long, and where they move to from certain locations in the scene.
      <br/>
      For each object (person) in the scene, its track and a time stamp information for its path through the scene is provided.
      <br/>
      This spatial and temporal information defines the tracking information of an object, and the tracking information is accumulated for objects in the scene over time.
      <br/>
      In essence, the tracking information identifies each object and all of the places that the object has been in the scene, and the order or path through the scene.
    </p>
    <p num="278">
      This information is useful in designing the physical environment of an establishment.
      <br/>
      For example, the movement of customers in a store, called customer track information, is use useful in designing merchandising strategies, service locations, etc.
      <br/>
      It is also useful in designing security systems for a particular scene.
      <br/>
      This information is stored on the track database.
      <br/>
      Business establishments can use this information to determine the traffic flow in certain areas of a store, bank, etc., and how long people wait in one location, before moving on to other locations.
    </p>
    <p num="279">
      More specifically, the tracking system and method according to the present invention facilitates analyzing the movement of objects through a scene based on video information for video frames of the scene.
      <br/>
      Broadly stated, the method of analyzing the movement of objects comprises two steps.
      <br/>
      First, tracks of objects through the scene are constructed based upon a correspondence between regions representing objects in video frames of the scene.
      <br/>
      This first step is the tracking system and methodology described in the foregoing.
      <br/>
      The second step is the generation of tracking information based on the tracks, wherein the tracking information includes the spatial and temporal location of objects in the scene.
      <br/>
      That is, by constructing the tracks of objects, the spatial and temporal location of objects (moving) in the scene is generated.
      <br/>
      This tracking information may be analyzed or used in an infinite number of ways.
      <br/>
      The following are several examples of the utility of the tracking information.
    </p>
    <p num="280">Compare Tracking Information with Real Scene Floorplan Information</p>
    <p num="281">
      The interaction of objects in the scene with particular portions of the scene may be determined by comparing the tracking information of objects in the scene with real scene floorplan information.
      <br/>
      Specifically, the spatial information contained in the tracking information is compared with spatial or coordinate information for predetermined portions of the scene corresponding to the location of particular objects on the background of the scene.
      <br/>
      This is useful to understand what people, for example, are interacting with, waiting for, or observing in the scene.
      <br/>
      This can also be useful to count the number of customers.
      <br/>
      People objects are counted by counting the number of image regions or region clusters in the scene at a particular period of time (or over a predetermined period of time) that are determined to have a high confidence of being persons based on model information.
    </p>
    <p num="282">Generating Baseline Movement Pattern Information</p>
    <p num="283">
      The tracking information for a plurality of objects in the scene can be accumulated in order to determine basic (baseline or standard) movement behavior patterns information.
      <br/>
      This is useful to analyze the impact of a layout of floorplan on the (position and timing of) movement of people through it.
      <br/>
      Moreover, the tracking information for a particular object (person) can be compared with the basic movement pattern information to determine how far it deviates therefrom.
      <br/>
      In addition, the tracking information for a first object may be compared to the tracking information of a second object, which is also useful in determining whether the first and second objects are forming a queue.
      <br/>
      Detecting the formation of a queue is explained in more detail hereinafter.
    </p>
    <p num="284">Comparing an Object's Path with Transactions in the Scene</p>
    <p num="285">
      The tracking system is useful in comparing the path of an object, such as a person, with transactions of the object in the scene.
      <br/>
      For example, the tracking information is useful in determining the interaction of a person with a banking machine, a help desk, a particular merchandise display, etc.
      <br/>
      One example of this is the subject of commonly assigned U.S. patent application Ser.
      <br/>
      No. 09/020,322, filed on even date, and entitled "Method And Apparatus For Detecting Movement Patterns At A Self-Service Checkout Terminal" and U.S. patent application Ser.
      <br/>
      No. 09/019,880 filed Feb. 6, 1998, and now U.S. Pat. No. 5,965,861, entitled "Method and Apparatus for Enhancing Security in a Self-Service Checkout Terminal," both of which are incorporated herein by reference.
      <br/>
      This is achieved by detecting an occurrence (or non-occurrence) of a transaction between an object in the scene and a particular service point in the scene.
      <br/>
      The term "service point" is meant to include, a banking machine, a particular person, or any other point in the scene where an object may perform some sort of interaction or transaction.
      <br/>
      The tracking information for the object is then correlated with the interaction.
      <br/>
      The object that is tracked may be that of a person, or a portion of a person, such as a hand and items in a hand, feet of a person, etc.
    </p>
    <p num="286">Detecting the Formation of a Queue (Line of Object in the Scene</p>
    <p num="287">
      The tracking information is useful in determining when a queue (line) of objects is formed in the scene.
      <br/>
      For example, a line of customers in a retail establishment may be detected.
      <br/>
      This may be achieved by comparing tracking information for a first object with tracking information for a second object to determine whether the first and second objects are forming a queue in the scene.
      <br/>
      Other techniques of detecting when a queue is formed may be useful based on the tracking information.
      <br/>
      In addition, the number of objects in the queue may be counted.
    </p>
    <p num="288">
      To perform queue analysis, the following steps may be executed:
      <br/>
      1.
      <br/>
      An area of the scene is selected.
      <br/>
      This may be indicated in real-world coordinates or image coordinates.
      <br/>
      This area corresponds to the location of the queue to be analyzed.
      <br/>
      2. For each object track that enters within the specified area, the length of time that the track overlaps the area is calculated.
      <br/>
      3. If the length of time exceeds a predetermined threshold, then the object is said to be in the queue.
      <br/>
      4. The tracks of all objects in the scene can be compared for each time instance to determine the number of objects in the queue at that given time instance.
      <br/>
      This can be done in real-time, while the objects are being tracked.
      <br/>
      Alternatively, it can be executed off-line, from tracking information stored in the track database.
      <br/>
      5. By examining the tracks, the position of objects in the queue area at a given time instance is determined.
      <br/>
      The position information for two or more tracks can be compared to extract the relative order of objects in the queue.
      <br/>
      In this case, relative order is an ordering by size of the distance of the objects to a fixed location in the queue.
      <br/>
      The distance can be extracted in real-world or image coordinates.
      <br/>
      6. By examining the track for any object, it is also possible to determine the length of time that object has spent in the queue area.
      <br/>
      This is accomplished by counting the number of time instances on the track that the individual has spent within the queue area.
    </p>
    <p num="289">
      If desired, one can structure the queue by subdividing the queue area into a number of subareas called "slots".
      <br/>
      Each slot corresponds to the allowable location of an object in the queue.
      <br/>
      Only when an object spends in excess of a predefined amount of time in one of the slots is the object considered to be in the queue area.
    </p>
    <p num="290">Detecting when a Predetermined Temporal and/or Spatial Condition Occurs</p>
    <p num="291">
      The tracking information is useful to determine when a predetermined temporal and/or spatial condition occurs in the scene, and generating an indication, such as a warning signal, etc., representative thereof The predetermined temporal and/or spatial condition may be many types of conditions, such as the entry of an object (person) into a particular portion of a scene, for example, certain "restricted" areas.
      <br/>
      Alternatively, the condition may be the passage of a hand through a scanning region of a scanner which scans items at a check-out terminal.
      <br/>
      In addition, the condition detected may be a predetermined length of a queue formed in the scene.
      <br/>
      The condition is detected by comparing the spatial information contained in the tracking information for a particular track, with spatial information corresponding to the real-world location of the area, and/or comparing the temporal information contained in the tracking information with the real-world temporal information for the particular condition.
    </p>
    <p num="292">Other Tasks</p>
    <p num="293">
      The tracking information is useful to perform other more simpler tasks, such as counting the number of objects (people) in a scene, or more complicated tasks, such as analyzing traffic flow of people, or other objects, such as automobiles, etc. through a predetermined scene.
      <br/>
      It may also be used to measure the amount of time individuals spend in observation of an area of interest, such as a promotional display, an information kiosk, ATM machine, etc.
      <br/>
      This time is called the "dwell time".
      <br/>
      Again, to determine the dwell time, the temporal and spatial information contained in the tracking information of a track is compared with the predetermined coordinate or spatial information for the particular area of interest in the scene.
      <br/>
      The total time that a track of an object spends in that particular area of interest of the scene is accumulated to determine the dwell time.
    </p>
    <p num="294">The above description is intended by way of example only and is not intended to limit the present invention in any way except as set forth in the following claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for evaluating region cluster image information obtained from a scene to determine whether the region cluster represents an object to be tracked, the method comprising steps of:</claim-text>
      <claim-text>generating at least one real-world feature for each region cluster that represents a characteristic of the region cluster in a real-world space comprising steps of:</claim-text>
      <claim-text>(i) determining at least one possible location of a predetermined portion of the region cluster based on a viewing angle of the scene by a video camera which views the scene:</claim-text>
      <claim-text>(ii) determining a distance from the video camera to the object corresponding to the region cluster in real-world coordinates for each possible location of the predetermined portion determined for the region cluster;</claim-text>
      <claim-text>and (iii) generating real-world size and location information for the region cluster based on the distance;</claim-text>
      <claim-text>and comparing the real-world size and location information for the region cluster with statistical information to generate a confidence value for each region cluster that represents a likelihood that the region cluster represents an object to be tracked.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1, wherein the predetermined portion is the feet of a person, and wherein the step of determining possible locations of the predetermined portion comprises steps of determining that the feet are on the bottom of the region cluster if the viewing angle of the video camera is oblique;</claim-text>
      <claim-text>and if the viewing angle of the video camera is not oblique, then determining that the feet are located in at least two possible locations relative to a center of the view of the scene.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 2, wherein if the viewing angle of the video camera is non-oblique, then determining that the feet are located on the bottom of the image region cluster if the image region is above the center of the view;</claim-text>
      <claim-text>at the bottom of the region cluster or to the left of the region cluster if the region cluster is above and right of the center of the view, and at the top of the region cluster or on the left side of the region cluster if the image region is below and left of the center of the view, and at a centroid of the image region if the region cluster is within a predetermined radius of the center of the view.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1, wherein the step of determining the distance from the video camera to the object corresponding to the region cluster in real-world coordinates for each location of the predetermined portion comprises the step of determining a distance from a center of the region cluster to a Y-coordinate of the possible locations of the feet.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 1, wherein the step of generating real-world size and location information comprises a step of computing a height, width and X-coordinate in real-world scale of an object in the scene corresponding to the region cluster.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 1, wherein the step of determining the correspondence comprises determining a correspondence for those region clusters determined to have at least a minimum confidence value.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A system for evaluating region cluster image information obtained from a scene to determine whether the region cluster represents an object to be tracked, comprising: (a) a video camera for viewing a scene; (b) a frame grabber coupled to the video camera for generating video frames representing image information for the scene; (c) a processor coupled to the frame grabber, the processor being programmed to:</claim-text>
      <claim-text>- generate at least one real-world feature for each region cluster that represents a characteristic of the region cluster in a real-world space by (i) determining at least one possible location of a predetermined portion of the region cluster based on a viewing angle of the scene by the video camera;</claim-text>
      <claim-text>(ii) determining a distance from the video camera to the object corresponding to the region cluster in real-world coordinates for each possible location of the predetermined portion determined for the region cluster;</claim-text>
      <claim-text>and (iii) generating real-world size and location information for the region cluster based on the distance;</claim-text>
      <claim-text>and - compare the real-world size and location information for the region cluster with statistical information to determine a confidence value for each region cluster that represents a likelihood that the region cluster represents an object to be tracked.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The system of claim 7, wherein the predetermined portion is the feet of a person, and wherein processor determines possible locations of the predetermined portion by determining that the feet are on the bottom of the region cluster if the viewing angle of the video camera is oblique;</claim-text>
      <claim-text>and if the viewing angle of the video camera is not oblique, the processor determines that the feet are located in at least two possible locations relative to a center of the view of the scene.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The system of claim 8, wherein if the viewing angle of the video camera is non-oblique, then the processor determines that the feet are located on the bottom of the region cluster if the image region is above the center of the view;</claim-text>
      <claim-text>at the bottom of the image region or to the left of the region cluster if the image region is above and right of the center of the view, and at the top of the region cluster or on the left side of the image region if the image region is below and left of the center of the view, and at a centroid of the image region if the region cluster is within a predetermined radius of the center of the view.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The system of claim 1, wherein the processor determines the distance from the video camera to the object corresponding to the region cluster in real-world coordinates for each location of the predetermined portion by determining a distance from a center of the region cluster to a Y-coordinate of the possible locations of the feet.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The system of claim 7, wherein the processor generates real-world size and location information by computing a height, width and X-coordinate in real-world scale of an object in the scene corresponding to the region cluster.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The system of claim 7, wherein processor determines the correspondence for those region clusters determined to have at least a minimum confidence value.</claim-text>
    </claim>
  </claims>
</questel-patent-document>