<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185547B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185547</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185547</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26372700" extended-family-id="21112833">
      <document-id>
        <country>US</country>
        <doc-number>08909830</doc-number>
        <kind>A</kind>
        <date>19970812</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08909830</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>21702551</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>JP</country>
        <doc-number>30827096</doc-number>
        <kind>A</kind>
        <date>19961119</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1996JP-0308270</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>JP</country>
        <doc-number>3392897</doc-number>
        <kind>A</kind>
        <date>19970218</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997JP-0033928</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06N   3/12        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>N</subclass>
        <main-group>3</main-group>
        <subgroup>12</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>706013000</text>
        <class>706</class>
        <subclass>013000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>706045000</text>
        <class>706</class>
        <subclass>045000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707999001</text>
        <class>707</class>
        <subclass>999001</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>707999006</text>
        <class>707</class>
        <subclass>999006</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>707999102</text>
        <class>707</class>
        <subclass>999102</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06N-003/126</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>N</subclass>
        <main-group>3</main-group>
        <subgroup>126</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99931</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99931</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99936</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99936</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99943</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99943</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>31</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>34</number-of-drawing-sheets>
      <number-of-figures>35</number-of-figures>
      <image-key data-format="questel">US6185547</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Fitness function circuit</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>KOZA JOHN R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5148513</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5148513</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>KOZA JOHN R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5343554</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5343554</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>AMADO CARLOS ARMANDO</text>
          <document-id>
            <country>US</country>
            <doc-number>5701400</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5701400</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SHACKLEFORD J BARRY, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5970487</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5970487</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>SINGH PRITPAL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6011379</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6011379</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Beasley et al., "Genetic Algorithm for the Set Covering Problem," European Journal of Operational Research, vol. 94, No. 2, Oct. 25, 1996, pp. 392-404.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Microsoft Press Computer Dictionary: The Comprehensive Standard for Business, School, Library, and home, Microsoft Press-2nd ed., pp. 164 &amp; 181-182, Oct. 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>Sekharan et al., "Manipulating Subpopulations of Feasible and Infeasible Solutions in Genetic Algorithms," Proceedings of the 1993 ACM/SIGAPP Symposium on Applied Computing: States of the Art and Practice, pp. 118-125.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="4">
          <text>Scott et al., "HGA: A Hardware-Based Genetic Algorithm," Proceedings of the 1995 ACM/STGDA Third Int. Symposium on Field Programmable Arrays, pp. 53-59.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="5">
          <text>Sep, "Mineral Cost Set Covering Using Probabilistic Methods," Proceedings of the 1993 ACM/SIGAPP Symposium on Applied Computing: States of the Art and Practice, pp. 157-164.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="6">
          <text>Huang et al., "A Genetic Algorithm Approach for Set Covering Problems," Proceedings for the First IEEE Conference on Evolutionary Computing, Jun. 1994, vol. 2, pp. 569-574</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="7">
          <text>Black et al., "A Comparative Study of a Penalty Function, a Repair Heuristic, and Stochastic Operators with the Set-Covering Problem" Artificial Evolution, Springer, Berlin 1996, pp. 3-20, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="8">
          <text>Horng et al., "A Genetic Algorithm for Database Query Optimization," Proceedings of the First IEEE Conference on Evolutionary Computation, Jun. 1994, vol. 1, pp. 350-355.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="9">
          <text>Kommu et al., "A Genetic Learning Strategy in Constrained Search Spaces," Proceedings of the Twenty-Fifth Hawaii Int. Conference on System Sciences, Jan. 1992, vol. 3, pp. 26-35.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="10">
          <text>Hauser et al., "NERV: A Parallel Processor for Standard Genetic Algorithms," REIHE Informatik, Dec. 1995.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Mitsubishi Denki Kabushiki Kaisha</orgname>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>MITSUBISHI ELECTRIC</orgname>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Shackleford, J. Barry</name>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Okushi, Etsuko</name>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Yasuda, Mitsuhiro</name>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Iwamoto, Takashi</name>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Burns, Doane, Swecker &amp; Mathis, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Hafiz, Tariq R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A fitness function circuit for computing a fitness value for a trial solution to a set covering problem accelerates the execution speed of a genetic algorithm provided with a matrix circuit for outputting a column signal covered by a row signal corresponding to a bit in a chromosome, a column signal counter for counting column signals, a subtractor for calculating a difference between a counted number of column signals and a number of all elements and outputting the difference as a number of uncovered elements, a carry-save-adder for outputting a number of valid row signals as a chromosome cost, an aggregate cost register for holding the number of uncovered elements as a more significant portion of a total cost and the chromosome cost as a less significant portion of the total cost and outputting the total cost, an inverter for inverting a value of the total cost and outputting an inverted value as a fitness value.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">The present invention relates generally to a genetic algorithm machine for executing genetic algorithms and more particularly, to a circuit to compute a problem-specific fitness of a chromosome applied specifically to a set covering problem or optimization problem.</p>
    <p num="3">2. Description of the Related Art</p>
    <p num="4">FIG. 32 shows a conceptual diagram of a conventional genetic algorithm.</p>
    <p num="5">
      Generic algorithms (hereinafter referred to by the initials, GA) were introduced in 1975 by John Holland as a method for finding an optimum solution to complicated problems. (John H. Holland, "Adaptation in Natural and Artificial Systems," University of Michigan Press, 1975; Second edition: MIT Press, 1992.) For example, the GA is a useful method for finding optimum solutions to the Traveling Salesman Problem described by Grefenstette.
      <br/>
      In the GA, an emulated chromosomal data structure is initially designed to represent a candidate or trial solution.
      <br/>
      A plurality of n-bit chromosomes of that data structure are then randomly generated.
      <br/>
      A plurality of generated chromosomes are registered in groups or populations.
      <br/>
      A plurality of parent chromosomes are selected from this population of generated chromosomes according to a given algorithm.
      <br/>
      Each generated chromosome is assigned a unique problem-specific fitness which differs from other chromosomes in the population identifying a solution quality of the chromosome.
      <br/>
      The problem-specific fitness is expressed by a fitness value.
      <br/>
      Chromosomes are selected from the population of chromosomes in proportion to their fitness values with more-fit chromosomes having higher probability of being selected.
      <br/>
      When a pair of parent chromosomes are selected from the population, the parent chromosomes are combined with a probabilistically generated cutpoint.
      <br/>
      In the case of having no cutpoint generated, either of the parent chromosomes is simply copied to provide a new chromosome as a child chromosome.
      <br/>
      Thus, a child chromosome is created and outputted.
      <br/>
      The child chromosome therefore contains portions of each parent or the whole portion of a parent.
      <br/>
      The child chromosome is then mutated.
      <br/>
      The mutation is performed with a low probability.
      <br/>
      The mutation is performed through inversion of a bit in the child chromosome.
      <br/>
      A mutated child chromosome is then evaluated to be assigned its fitness value.
      <br/>
      An evaluated child chromosome along with its fitness value is stored as a member of the next generation in the population.
    </p>
    <p num="6">
      After repeated iteration of this process, the general fitness of chromosomes in the population improves.
      <br/>
      Thus, a solution to the problem emerges In the population.
      <br/>
      A solution to the problem is acquired with highly fit chromosomes concentrated in the population.
    </p>
    <p num="7">A major disadvantage of the conventional GA is that the GA is extremely slow in its execution speed when emulated by software on a conventional general-purpose computer.</p>
    <p num="8">
      Some proposals have been addressed for accelerating the processing speed of a GA.
      <br/>
      Graham, et al. has proposed a hardware implementation of the GA using the Splash 2 machine (Paul Graham and Brent Nelson, "A Hardware Genetic Algorithm for the Traveling Salesman Problem on Splash 2" Field-Programmable Logic and Applications, ed. W. More and W. Luk, pp. 352-361, Springer, Oxford, 1995).
      <br/>
      A similar attempt of hardware implementation of a GA to accelerate the execution speed of the GA has been proposed by Sitkoff et al. (Nathan Sitkoff, Mike Wazlowski, Aaron Smith, and Harvey Silverman, "Implementing a Genetic Algorithm on a Parallel Custom Computing Machine, "Proceedings of IEEE Workshop on FPGAs for Custom Computing Machines, pp. 180-187, 1995).
    </p>
    <p num="9">
      These attempts of the hardware implementation of a GA, however, ended in limited success with the speedup factors of roughly 10 times.
      <br/>
      One reason for their limited gains is copying the original GA proposed by Holland to be implemented on hardware.
      <br/>
      The original GA into the hardware implementation has thus inefficiencies introduced therein.
    </p>
    <p num="10">
      Another reason that greater speed gains are not realized is the underlying hardware architecture being used to implement the GA.
      <br/>
      Graham, et al. employs the Splash 2 machine which is a reconfigurable computer designed to support linear systolic data such as SIMD (single instruction, multiple data) and MIMD (multiple instruction, multiple data).
    </p>
    <p num="11">
      Sitkoff, et al. employs the Armstrong 3 machine which is a loosely-coupled MIMD multicomputer with reconfigurable computing capabilities.
      <br/>
      They achieved only limited gains because they implemented GAs in machines whose hardware architectures are not designed originally or particularly to implement the GAs.
      <br/>
      This can prevent the execution speed of GAs from achieving satisfactory gains.
    </p>
    <p num="12">
      A set covering problem is a problem to be solved by an applied form of a GA.
      <br/>
      The set covering problem is a non-deterministic polynomial hard (NP-hard) problem to be solved through a resource selection from among many resources.
      <br/>
      The applied form of a GA to the set covering problem minimizes the hardware architecture of a logic circuit, for example, with a resultant optimum solution.
      <br/>
      The set covering problem may be defined as follows.
    </p>
    <p num="13">"Given a collection C of finite sets, each with non-negative cost, find a minimum-cost sub-collection C' such that every elements are covered by the respective sets of collection C belongs to at least one set in sub-collection C'."</p>
    <p num="14">A set covering problem is now described with reference to FIGS. 33 through 35.</p>
    <p num="15">
      FIG. 33 shows a simplified diagram of a manufacturing process of DRAM (Direct Random Access Memory) chips composed of DRAM manufacturing line and DRAM test line.
      <br/>
      FIG. 34 shows a partial graph of a failure log illustrating a DRAM testing result of DRAM chips 1 through 5000 by test types 1 through 70, with each one of 5000 DRAM chips tested through the respective 70 tests.
      <br/>
      Each test requires certain time for execution and cost including test devices, etc.
      <br/>
      A typical cost required for DRAM testing amounts as much as some 20 per-cent of the whole DRAM manufacturing cost.
      <br/>
      In the case of 70 test types for each of 5000 DRAM chips of FIG. 34, a 20 per-cent increase in the whole manufacturing cost of DRAM chips is large and therefore reduction in the number of execution of tests is a vital challenge for lowering of DRAM cost if removing one test can save some 150 hundred thousand dollars for example.
      <br/>
      The set covering problem is an effective tool for this challenge.
      <br/>
      In this case, the set covering problem is a problem of finding a minimum-sized test set through which provides the same failure log as that through the practical operation of the whole 70 tests on each chip.
      <br/>
      Thus, the set covering problem finds a minimum-sized combination of test set which can detect or cover all failed chips.
      <br/>
      FIG. 35 shows a graph of a simplified failure log illustrating the set covering problem further in detail.
      <br/>
      The simplified failure log, having DRAM chips 1 through 8 detected all as failed through tests 1 through 7, illustrates the minimum-sized combination of test set which can cover all failed chips.
      <br/>
      Four tests (tests 1, 2, 5, and 6) is enough for detecting all the failed DRAM chips 1 through 8 and thus three out of seven tests can be saved.
      <br/>
      The set covering problem can be explained as follows with reference to this example.
    </p>
    <p num="16">
      A collection C of finite sets indicates tests 1 through 7, each with non-negative cost.
      <br/>
      It may be desirable to assign a test an actual cost required for the test in a practical sense, but it is assumed here that all tests have the same cost of +1 each.
      <br/>
      Now, find a minimum-cost sub-collection such that every one of the failed chips 1 through 8 detected or covered by the tests 1 through 7 belongs to at least one test in the sub-collection.
      <br/>
      In this case, the sub-collection includes tests 1, 2, 5, and 6 with the minimum-cost 4.
    </p>
    <p num="17">
      The set covering problem can be solved through a optimum solution finding approach using a GA.
      <br/>
      This approach aims at attaining an optimum solution through a screening process of candidate or trial solutions created through a GA based upon a fitness evaluation of the candidate solutions.
      <br/>
      In this approach, more-fit candidate solutions are selected with less-fit candidate solutions screened out to concentrate highly fit solutions of chromosomes or genes and in the end to reach an optimum solution.
      <br/>
      In the conventional approach, a GA is emulated by software and the algorithm used for computing the fitness of a GA-based candidate solution to the set covering problem is also emulated by software.
    </p>
    <p num="18">Due to such a software-based emulation on conventional computers, the execution speed of the algorithm for finding an optimum solution to the set covering problem is extremely slow.</p>
    <p num="19">Thus, a major drawback of conventional machines is the slow execution speed of a GA when emulated by software on conventional general-purpose computers.</p>
    <p num="20">A hardware-based implementation of a GA has been addressed for offsetting the drawback but only with a limited success in its execution speed.</p>
    <p num="21">A conventional software-based emulation of a GA for finding an optimum solution to the set covering problem poses a similar drawback of the slow execution speed of a GA and the slow processing speed of algorithms used for computing the fitness evaluation.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="22">
      The present invention is directed to solving the problem posed above.
      <br/>
      One of the objectives of the present inventions is to provide a fitness function circuit which performs a high speed fitness evaluation of candidate solutions generate through a GA.
      <br/>
      Another objective is to provide a fitness function circuit which accelerates the execution speed of a GA.
      <br/>
      Still another objective is to provide a hardware-based fitness function circuit.
      <br/>
      Yet another objective is to provide a fitness function circuit for performing a fitness evaluation of candidate solutions specifically to the set covering problem.
    </p>
    <p num="23">These and other objects are accomplished by the present invention as hereinafter described in further detail.</p>
    <p num="24">According to one aspect of the present invention, a fitness function circuit for an execution of a genetic algorithm (GA), the fitness function circuit inputting a chromosome having n bits and outputting a fitness of the chromosome, the fitness function circuit includes a hardware circuit for calculating a number of elements covered by the chromosome inputted, and calculating the fitness of the chromosome based upon a calculated number of covered elements.</p>
    <p num="25">The hardware circuit may include an aggregate cost calculator for calculating a total cost of the chromosome, and an inverter for inverting a value of the total cost and outputting an inverted value of the total cost as the fitness of the chromosome.</p>
    <p num="26">The fitness is calculated as a solution to a set covering problem.</p>
    <p num="27">The fitness function circuit is mounted on a GA machine for implementing a GA using the chromosome having n bits representing a potential problem solution, wherein the GA machine may include a population memory for storing a population of chromosomes and respective fitness values, a selector for selecting a parent chromosome from among the chromosomes in the population, a crossover module for performing a crossover operation on the parent chromosome and creating a child chromosome, a mutation operator for mutating the child chromosome, a mount whereon the fitness function circuit for evaluating a fitness of the mutated chromosome and outputting a fitness value mounts, and a survival comparator for determining a survival of the mutated chromosome based upon the fitness value; wherein the population memory, selector, crossover module, mutation operator, and survival comparator are respectively implemented by general-purpose circuits which can be used for non-specific problems, and configures a framework of the GA machine through a hardware-based implementation; wherein the GA machine becomes a problem-specific genetic algorithm machine when the fitness function circuit is mounted on the mount.</p>
    <p num="28">
      Further scope of applicability of the present invention will become apparent from the detailed description given hereinafter.
      <br/>
      However, it should be understood that the detailed description and specific examples, while indicating preferred embodiments of the invention, are given by way of illustration only, since various changes and modifications within the spirit and scope of the invention will become apparent to those skilled in the art from this detailed description.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="29">
      The present invention will become more fully understood from the detailed description given hereinbelow and the accompanying drawings which are given by way of illustration only, and thus are not limitative of the present invention, and wherein:
      <br/>
      FIG. 1 shows a conceptual diagram of a GA machine according to the present invention;
      <br/>
      FIG. 2 shows a flowchart illustrating a flow of the GA according to the present invention;
      <br/>
      FIG. 3 shows a population memory 30 of the GA machine of FIG. 1 and its neighboring circuits;
      <br/>
      FIG. 4 shows the population memory 30 and its neighboring circuits of FIG. 3, illustrating that a sequential counter 36 provides an address to the population memory 30 in an initialization mode according to the present invention;
      <br/>
      FIG. 5 shows the population memory 30 and its neighboring circuits of FIG. 3, illustrating that a random number generator 31 provides an address to the population memory 30 in a selection mode according to the present invention;
      <br/>
      FIG. 6 shows the population memory 30 and its neighboring circuits of FIG. 3, illustrating that a least-fit pointer 44 provides an address to the population memory 30 in a survival mode according to the present invention;
      <br/>
      FIG. 7 shows a block diagram of a least-fit chromosome hold register 91 of a selector 40 of FIG. 1 in detail;
      <br/>
      FIG. 8 shows a block diagram of first and second chromosome registers of the selector 40 and neighboring circuits of FIG. 1;
      <br/>
      FIG. 9 shows a block diagram of a crossover module 50 of the GA machine of FIG. 1 in detail;
      <br/>
      FIG. 10 shows a circuit diagram of a crossover template generator 54 of the crossover module 50 of FIG. 9 in detail;
      <br/>
      FIG. 11 shows an alternative counter to a counter of the crossover module 50 of FIG. 9;
      <br/>
      FIG. 12 shows a partial diagram of an alternative crossover template generator to a crossover template generator of the crossover template generator 54 of FIG. 10, illustrating a circuit for forcibly generating a cutpoint-indicating pattern according to the present invention;
      <br/>
      FIG. 13 shows a circuit diagram of a mutation module 68 of a mutation operator 60 of the GA machine of FIG. 1 in detail;
      <br/>
      FIG. 14 shows a circuit diagram of the mutation module 68 of FIG. 13 illustrating its mutation operation;
      <br/>
      FIG. 15 shows a fitness function circuit 70 of the GA machine of FIG. 1;
      <br/>
      FIG. 16 shows a circuit diagram of a survival comparator 80 of the GA machine of FIG. 1 and its neighboring circuits;
      <br/>
      FIG. 17 shows an overall view of the GA machine of FIG. 1 in detail;
      <br/>
      FIG. 18 shows a chart illustrating an overall operation of the GA machine of FIG. 17;
      <br/>
      FIG. 19 shows a circuit diagram illustrating a crossover operation with four chromosomes according to the present invention;
      <br/>
      FIG. 20 shows a table illustrating an operation of a multiplexer of FIG. 19 used for the crossover of four chromosomes according to the present invention;
      <br/>
      FIG. 21 shows a circuit diagram illustrating a crossover operation with three chromosomes according to the present invention;
      <br/>
      FIG. 22 shows a table illustrating the operations of a decoder and a multiplexer of FIG. 21 used for the crossover of three chromosomes according to the present invention;
      <br/>
      FIG. 23 shows a circuit diagram illustrating an alternative initialization circuit to the initialization circuit of FIG. 13;
      <br/>
      FIG. 24 shows an overall view of an alternative GA machine to the GA machine of FIG. 17 illustrating an alternative initialization circuit to the initialization circuit of FIG. 17 or 23;
      <br/>
      FIG. 25 explains the outline of a set covering problem according to the present invention;
      <br/>
      FIG. 26 shows a circuit diagram of a fitness function circuit 110 according to the present invention;
      <br/>
      FIG. 27 shows a circuit diagram of a cross circuit 120 of the fitness function circuit 110 of FIG. 26;
      <br/>
      FIG. 28 shows a partial circuit diagram of the fitness function circuit 110 of FIG. 26 in detail;
      <br/>
      FIG. 29 shows a table illustrating an operation of the fitness function circuit 110 of FIG. 26;
      <br/>
      FIG. 30 shows a circuit diagram of an alternative fitness function circuit 110a to the fitness function circuit 110 of FIG. 26 according to the present invention;
      <br/>
      FIG. 31 shows a block diagram of an alternative fitness function circuit 110a to the fitness function circuit 110 or 110a according to the present invention;
      <br/>
      FIG. 32 shows a conventional GA;
      <br/>
      FIG. 33 shows a block diagram illustrating a set covering problem;
      <br/>
      FIG. 34 shows a failure log illustrating the set covering problem; and
      <br/>
      FIG. 35 shows another failure log illustrating the set covering problem.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="30">Reference will now be made in detail to the present preferred embodiments of the invention, examples of which are illustrated in the accompanying drawings, wherein like reference numerals indicate like elements through out the several views.</p>
    <p num="31">Embodiment 1</p>
    <p num="32">
      FIG. 1 shows a block diagram of a genetic algorithm (GA) machine according to the present Invention.
      <br/>
      A detailed description of the GA machine will be described later.
    </p>
    <p num="33">
      The GA machine of FIG. 1 shows its conceptual view illustrating a framework of a GA machine.
      <br/>
      The term framework here means a non-problem-specific hardware for poviding a processing environment for various problems.
      <br/>
      The hardware here defines any circuit including wired logic circuits and circuits composed of ROM (Read Only Memory), PROM (Programmable ROM), and gate arrays.
    </p>
    <p num="34">
      The non-problem-specific framework applicable to various problems can be implemented in either VLSI (very large scale integrated) technology or FPGA (field-programmable gate array) technology.
      <br/>
      These VLSI and FPGA can be, for example, IC (Integrated Circuit) based synthetic devices.
      <br/>
      Alteration of the bit-width of a memory or register to be used for the framework is possible.
      <br/>
      It may be desirable to prepare several memories and registers in different bit-width size in frequent use as the framework.
      <br/>
      Again as mentioned earlier, this framework can include any circuits composed of ROM, PROM, and gate arrays and wired logic circuits.
    </p>
    <p num="35">The GA framework of FIG. 1 is now described in detail illustrating each of the composing elements of the GA machine of FIG. 1 singly in accordance with an operational sequence of this embodiment.</p>
    <p num="36">
      A population memory 30 is composed of RAM (random-access memory) for example.
      <br/>
      The function of the population memory 30 is to hold a population of n-bit chromosomes along with their respective fitness values.
      <br/>
      Each chromosome is evaluated by a fitness function circuit 70, whose operation will be described later, and assigned an evaluated value of a problem-specific fitness.
      <br/>
      To start the GA machine, the population memory 30 is filled with random n-bit patterns of 1s and 0s as chromosomes together with the corresponding m-bit patterns of problem-specific fitness values.
      <br/>
      An initialization of the population memory 30 will be discussed later.
    </p>
    <p num="37">
      Two chromosomes are selected from among the chromosomes in the population memory 30 at random and then loaded into first and second chromosome registers 41, 42 (one for each parent) as a pair of parent chromosomes 90.
      <br/>
      A least-fit chromosome hold circuit 91 detects a least-fit value of all fitness values 94 of the parent chromosomes 90 loaded in the first chromosome register 41 each time a new parent chromosome is selected and loaded into the first chromosome register 41.
      <br/>
      The least-fit chromosome hold circuit 91 holds the detected least-fit value of a least-fit parent chromosome along with the address of the least-fit parent chromosome in the population memory 30.
      <br/>
      The least-fit value and address are updated upon a detection of the fitness value 94 which is less than the current least-fit value.
    </p>
    <p num="38">
      The first and second chromosome registers 41, 42 are connected in parallel to each other to a crossover module 50.
      <br/>
      The crossover module 50 cuts the two parent chromosomes at the same random point and produces a child chromosome composed of the left-cut portion of a first parent chromosome and the right-cut portion of a second parent chromosome.
      <br/>
      The resultant child chromosome is then subjected to a low-probability (1 per-cent per bit for example) mutation.
      <br/>
      With the mutation being probabilistic, all bits have the same independent chance of mutation, so multiple bit changes in an n-bit chromosome are possible.
      <br/>
      A chromosome is mutated through inversion of 0s inverted to 1s, and vice versa.
      <br/>
      A mutated child chromosome is then evaluated by the fitness function circuit 70 which is mounted on a fitness function circuit mount 95.
      <br/>
      The fitness function circuit 70 is not a member of the composing elements of the GA machine of FIG. 1.
      <br/>
      The fitness function circuit 70 is a removable unit from the GA machine or framework.
      <br/>
      The fitness function circuit 70 is a hardware circuit for problem-specific programming the framework of FIG. 1.
      <br/>
      The fitness function circuit 70 can be implemented in either VLSI technology or FPGA technology for example.
      <br/>
      The fitness function circuit mount 95 can be implemented with a socket carrying a VLSI or FPGA circuit for example.
      <br/>
      Alternatively, the fitness function circuit mount 95 can be a fixer on which the fitness function circuit 70 may be soldered for example.
      <br/>
      The fitness function circuit mount 95 can alternatively be any of connector, carrier, support, etc.
      <br/>
      The fitness function circuit 70 computes the fitness of a child chromosome and outputs its fitness value.
      <br/>
      An evaluated chromosome register 79 stores the child chromosome outputted from a mutation operator 60 and the corresponding fitness value outputted from the fitness function circuit 70.
      <br/>
      A survival comparator 80 receives the fitness value of the child chromosome and the fitness value of the least-fit value held in the least-fit chromosome hold circuit 91 for comparison.
      <br/>
      If the child chromosome is more fit than the least-fit parent chromosome having the least-fit value registered in the least-fit chromosome hold circuit 91, the child chromosome then replaces a chromosome in the population memory 30 corresponding to the least-fit parent chromosome.
      <br/>
      The replaced chromosome by the child chromosome is called a less-fit member 35 of chromosome 32 in the population memory 30 whose fitness is relatively low to those of other chromosomes 32.
    </p>
    <p num="39">By repeating this process the overall fitness of the population is increased, thus increasing the solution quality of the problem being solved by the GA.</p>
    <p num="40">
      The framework of FIG. 1 is characterized by both fast processing speed and efficient utilization of hardware, and further, the GA proposed by Holland is adapted in a revised form for hardware implementation other than in the original form.
      <br/>
      The method of revising the original GA employed here will be discussed hereinafter.
      <br/>
      An operation of a hardware-based GA machine of FIG. 1 is now described with reference to FIG. 2.
      <br/>
      FIG. 2 shows a flowchart of a GA according to the present invention with parent chromosomes P1, P2, a child chromosome C, a mutated child chromosome C', and a fitness value F.
    </p>
    <p num="41">Population Creation Step S1</p>
    <p num="42">Create a population of randomly generated chromosomes, evaluate their respective fitness values and store them as the chromosomes 32 and their fitness values 33 in the population memory 30.</p>
    <p num="43">Parent Selection Step S2</p>
    <p num="44">
      Randomly select a parent chromosome from the population memory 30 and load the first parent chromosome to the first chromosome register 41.
      <br/>
      When a parent chromosome is newly selected, the parent chromosome 90 that was previously in the first chromosome register 41 is transferred to the second chromosome register 42.
      <br/>
      The first chromosome register 41 then receives the newly selected parent chromosome.
      <br/>
      Upon each new parent-chromosome selection and loading into the register 41, the least-fit chromosome hold circuit 91 examines the fitness value 94 of a newly selected parent chromosome 90 to detect a fitness value which is less than the currently holding least-fit value.
      <br/>
      The least-fit chromosome hold circuit 91 holds the least-fit value of all the fitness values 94 of parent chromosomes 90 loaded into the first chromosome register 41 as the less-fit member 35 of chromosomes 32 in the population memory in the end.
      <br/>
      Upon each detection of a fitness value less than a current least-fit value is registered in a MIN HOLD register or least-fit value register 49 (shown in FIG. 17), whose operation will be discussed later, in the least-fit chromosome hold circuit 91.
      <br/>
      The least-fit chromosome hold circuit 91 has a least-fit pointer 44, whose operation will be discussed hereinafter.
      <br/>
      The least-fit pointer 44 is a pointer to the location or address in the population memory 30 of a chromosome corresponding to the least-fit parent chromosome having the least-fit value.
      <br/>
      If the fitness value of a new parent chromosome read out to the first chromosome register 41 is less than the least-fit value of the current least-fit parent chromosome, then the new parent chromosome 90 in the first chromosome register 41 becomes the new least-fit parent chromosome and its address in the population memory 30 is then stored as a pointer (not shown).
    </p>
    <p num="45">Crossover Step S3</p>
    <p num="46">
      Create a child chromosome from the two parent chromosomes residing in the first and second chromosome register 41, 42, through a crossover process in the crossover module 50.
      <br/>
      The simplest form of crossover process is a single-point crossover whereby the first and second chromosome registers 41, 42 are divided, each at the same bit location, and the data to the left of that location in the first chromosome register 41 is used to form the left part of the child chromosome and the data inclusive of the bit and to the right in the second chromosome register 42 is used to form the right part of the child chromosome.
    </p>
    <p num="47">Mutation Step S4</p>
    <p num="48">
      Each bit in the child chromosome is exposed to the possibility of mutation.
      <br/>
      For example, the probability of mutation for each bit is on the order of 1 per-cent.
    </p>
    <p num="49">Fitness Evaluation Step S5</p>
    <p num="50">
      Evaluate the child chromosome in the fitness function circuit 70.
      <br/>
      The fitness function circuit 70 is a reconfigurable circuit which evaluates the problem-specific fitness of a child chromosome.
    </p>
    <p num="51">Survival Determination Step S6</p>
    <p num="52">
      Determine the survival of the child chromosome based upon the fitness value of the child chromosome outputted from the fitness function circuit 70.
      <br/>
      The fitness value of the child chromosome is compared with the least-fit value of the least-fit parent chromosome stored in the least-fit chromosome hold circuit 91.
      <br/>
      If the child chromosome is more fit, then the child chromosome replaces the less-fit member 35 of chromosomes 32 in the population memory 30 corresponding to the least-fit parent chromosome.
      <br/>
      If the child chromosome is less fit, then the child chromosome is simply discarded.
    </p>
    <p num="53">The repetitions of this process including S2 to S6 will improve the quality of candidate solutions toward an optimum solution.</p>
    <p num="54">Now differences are considered between the inventive hardware-based GA machine of this embodiment discussed with reference to FIGS. 1 and 2 and the conventional hardware-based GA.</p>
    <p num="55">(1) Population Memory</p>
    <p num="56">
      In the conventional art, the population is divided into current population and new population.
      <br/>
      The current population contains parent chromosomes, and the new population is the repository of the next generation of child chromosomes created from the parent chromosomes in the current population.
      <br/>
      The child chromosomes is either simply copied of a parent chromosome or mutated.
      <br/>
      Thus the conventional chromosomal generation control including current and new populations requires separate memories for sorting two generations.
      <br/>
      This is disadvantageous to a hardware implementation in that the size of the memory used to implement the population memory must be doubled.
      <br/>
      Whereas this embodiment uses a single population memory in which the chromosomes and their offspring are stored coexisting.
    </p>
    <p num="57">(2) Selection</p>
    <p num="58">
      In the conventional art, the parent chromosomes are selected with a probability proportional to their fitness, with more-fit chromosomes being selected more often.
      <br/>
      This is disadvantageous to a hardware implementation in that a proportional selection of chromosomes to their fitness causes the hardware more complicated.
      <br/>
      With a software implementation, a probabilistic selection of chromosomes in proportional to their fitness requires extra time.
      <br/>
      The intent of probabilistic selection is to allow more-fit chromosomes to have a greater influence of subsequent generations.
      <br/>
      This embodiment accomplishes the same intent by using simple random selection, without regard to fitness.
      <br/>
      This embodiment's replacing approach of least-fit chromosomes by more-fit child chromosomes in a single population memory allows the longer lifetime of the more-fit chromosome.
      <br/>
      More-fit chromosomes can survive longer in the population memory 30.
      <br/>
      This accounts for higher probability of more-fit chromosomes selected more often from the population memory 30 by using simple random selection.
      <br/>
      Thus accomplished the Intent of the more-fit chromosomes having a greater influence of subsequent generations.
    </p>
    <p num="59">(3) Probability of Crossover</p>
    <p num="60">
      In the conventional art, crossover is performed probabilistically, that is, crossover may not be performed in some cases.
      <br/>
      When crossover is not performed, either of the parent chromosomes is simply copied to create a child chromosome.
      <br/>
      The child chromosome of parent's copy is then mutated and stored as the next generation.
      <br/>
      In contrast, this embodiment of the present invention performs crossover on all chromosomes selected from the population memory.
      <br/>
      Since all chromosomes remain in the population memory 30 a period of time proportional to their fitness, there is no need to perform the conventional copy operation to create a child chromosome of parent's copy for creating a member of a new population.
      <br/>
      This, in effect, is an overhead operation that reduces the processing throughput of the GA.
    </p>
    <p num="61">(4) Survival</p>
    <p num="62">
      In the conventional art, all offspring survive to be transferred to the new population.
      <br/>
      In this embodiment, only offspring or child chromosomes that are more-fit than the current least-fit chromosome 35 survive to be transferred into the population memory 30.
      <br/>
      The least-fit chromosome 35 is discarded in the population memory 30.
    </p>
    <p num="63">
      The different aspects (1) through (4) of the GA machine of the present invention from the conventional hardware-based GA machine discussed above are equally applicable to those from the original GA proposed by Holland.
      <br/>
      The GA machine of this embodiment is clearly different from the original GA at least in the aspects (1) though (4).
      <br/>
      The GA machine of the present invention accelerates the executing speed of a GA because of these differences.
      <br/>
      These differences improves the inventive GA machine considerably in its easier and simpler hardware architecture.
    </p>
    <p num="64">
      The GA machine of this embodiment is now described further through a detailed description of the respective composing elements of the machine with reference to FIGS. 3 through 16.
      <br/>
      FIG. 17 is a supplementary diagram of the GA machine of FIG. 1 in detail incorporating all the respective composing elements described singly.
      <br/>
      The respective composing elements of the GA machine operate in synchronization with a machine cycle (not shown) by a clock supplied to the respective elements from a clock generator (not shown) via signal lines (not shown).
    </p>
    <p num="65">1. Population Memory 30</p>
    <p num="66">FIG. 3 shows the population memory 30 and its neighboring circuits of the GA machine of FIG. 17.</p>
    <p num="67">
      The population memory 30 includes random access memory (RAM), whose function is to hold the population of chromosomes 32 (designated by C in FIGS. 3 through 17).
      <br/>
      Each chromosome 32 is a potential problem solution or candidate solution composed of n bits (1 &lt;= n) in a bit string, each bit representing a genetic meaning which can only be identified by the fitness function circuit 70.
      <br/>
      The hardware-based composing elements of the GA machine of FIG. 1 including the population memory 30 engage in storing or processing chromosomes without regard to the meaning of each bit.
      <br/>
      The population memory 30 stores the chromosomes 32 along with their respective fitness values 33 (each designated by F in the figures) each designating the quality of a potential problem solution of the chromosome 32.
      <br/>
      In an optimization problem there are typically many solutions of varying quality.
      <br/>
      If the fitness value 33 of the chromosome 32 is assigned high, then the quality of the potential problem solution represented by the chromosome 32 is considered high next or near to an optimum solution.
    </p>
    <p num="68">The population memory 30 is now described further in terms of its size.</p>
    <p num="69">
      When the bit-width of one word of the population memory 30, i.e. a bit-width for a RAM access, is equal to the sum (n+m bits) of the bit-width or number of composing bits (n bits) of the chromosome 32 and that (m bits) of the fitness value 33.
      <br/>
      This offers the advantage of high-performance of data access in speed to the population memory 30.
      <br/>
      The chromosome 32 along with its fitness value 33 is read out to the first chromosome register 41 on a single machine cycle from the population memory 30, and similarly a child chromosome along with its fitness value is written into the population memory 30 on a single machine cycle.
      <br/>
      On the contrary at the cost, a longer bit-width requires many I/O (input/output) pins and lines for RAM circuits or packages as parts of the population memory 30.
      <br/>
      With n+m bits for a word bit-width, for example, n+m number of I/O pins are required for the RAM package.
    </p>
    <p num="70">
      The chromosome 32 and its fitness value 33 can alternatively be stored separately in the population memory 30.
      <br/>
      The chromosome 32 can be divided into r segments thus reducing the RAM bit-width.
      <br/>
      This requires, however, r words/times of RAM access for a single reading/writing operation of the chromosome 32 along with its fitness value 33 because r machine cycles is required for each reading/writing of a chromosome from/to the population memory 30.
      <br/>
      This approach has the advantage of reduced I/O pins and lines, but at the cost of reduced performance in the execution speed.
    </p>
    <p num="71">The population memory 30 is now described further in terms of addressing.</p>
    <p num="72">There are three address sources of sequential counter 36, random number generator 31, and least-fit chromosome pointer 44 in order to supply addresses to the population memory 30 in three respective modes of the GA machine of FIG. 17: initialization, selection, and survival modes.</p>
    <p num="73">(1) Sequential counter 36</p>
    <p num="74">
      The sequential counter 36 is an address source in the initialization mode for generating an initial random bits in a string of the chromosome 32 to be stored in the population memory 30.
      <br/>
      The sequential counter 36 generates a sequential address, based upon which each random-bit chromosome is written sequentially in the population memory 30.
    </p>
    <p num="75">(2) Random Number Generator 31 (RN1)</p>
    <p num="76">
      The random number generator 31 is an address source in the selection mode for selecting the chromosome 32 as the parent chromosome 90 from the population memory 30.
      <br/>
      The random number generator 31 generates a random number as an address, based upon which the chromosome 32 is selected randomly from the population memory 30.
      <br/>
      The random number generator 31 is part of a selector 40.
    </p>
    <p num="77">(3) Least-fit Chromosome Pointer 44</p>
    <p num="78">
      The least-fit chromosome pointer 44 is an address source in the survival mode for writing a child chromosome into the population memory 30.
      <br/>
      The least-fit chromosome pointer 44 is held in a least-fit pointer register 45, whose operation will be discussed hereinafter, provided in the least-fit chromosome hold circuit 91.
      <br/>
      The least-fit chromosome pointer 44 indicates the address of the population memory 30 of the least-fit parent chromosome corresponding to the less-fit member 35 of the chromosomes 32 for which a new child chromosome is replaced.
    </p>
    <p num="79">
      FIG. 4 shows an address supply operation from the sequential counter 36 to the population memory 30 in the initialization mode.
      <br/>
      Bold lines in the figure designate effective signals.
      <br/>
      When the mode of the GA machine changes to the initialization mode, an initialization mode signal turns ON, which turns a second multiplexer 38 ON to select an address input from the sequential counter 36.
      <br/>
      The address from the sequential counter 36 is then inputted to the population memory 30 at an address A. The initialization mode signal also opens a gate G1 of the population memory 30 via a third multiplexer 39 selecting an input of an initialization write signal, whereby the population memory 30 turns write-enable.
      <br/>
      Meanwhile data to be written into the population memory 30 are transferred to the population memory 30 at an input 1AD from the evaluated chromosome register 79 whose operation will be discussed in detail hereinafter.
    </p>
    <p num="80">
      FIG. 5 shows an address supply operation from the random number generator 31 (RN1) to the population memory 30 in the selection mode involving a first multiplexer 37 and the second multiplexer 38 in the selector 40.
      <br/>
      Bold lines in the figure designate effective signals.
    </p>
    <p num="81">
      During the selection mode with no mode signal inputs of survival and initialization, a random number generated by the random number generator 31 is passed through the first multiplexer 37 and then second multiplexer 38 to be supplied to the population memory 30 at the address A. The random number generated by the random number generator 31 specifies an address among a limited number of addresses available in a certain memory area of the population memory 30.
      <br/>
      The population memory 30 selects one of the chromosomes 32 at the supplied address of the random number and outputs the chromosome 32 along with its fitness value 33 to the first chromosome register 41.
    </p>
    <p num="82">
      FIG. 6 shows an address supply operation from the least-fit pointer 44 to the population memory 30 in the survival mode.
      <br/>
      Bold lines in the figure designate effective signals.
      <br/>
      When the mode changes from selection to survival, the survival signal turns ON whereby the first multiplexer 37 selects an address input from the least-fit pointer 44.
      <br/>
      Thus, the address of the less-fit member 35 of chromosomes 32 indicated by the least-fit pointer 44 is passed through the first and second multiplexers 37, 38 to be supplied to the population memory 30 at the address A. The survival signal also opens the gate G1 of the population memory 30 via the third multiplexer 39, whereby the population memory 30 turns write-enable.
      <br/>
      Meanwhile, the population memory 30 receives a new child chromosome to be written for replacement at the input 1AD transferred from the evaluated chromosome register 79.
    </p>
    <p num="83">2. Selector 40</p>
    <p num="84">
      The selector 40 selects chromosomes at random from among chromosomes 32 in the population memory 30.
      <br/>
      In the conventional art, chromosomes are selected with a probability proportional to their fitness.
      <br/>
      Since the random selection method employed in this embodiment does not require any special calculation based upon the individual chromosome's fitness in relation to the aggregate population fitness, the implementation is easier and cheaper and the processing speed is faster than in the prior art.
    </p>
    <p num="85">3. Least-fit chromosome hold circuit 91</p>
    <p num="86">FIG. 7 shows a block diagram of the least-fit chromosome hold circuit 91 as part of the selector 40 in detail.</p>
    <p num="87">
      The least-fit chromosome pointer 91 is a pointer indicating which chromosome among chromosomes 32 in the population memory 30 is to be replaced by a newly created child chromosome whose fitness is better than the fitness of the least-fit parent chromosome.
      <br/>
      The least-fit pointer 44 held in the least-fit pointer register 45 holds the address of the least-fit parent chromosome whose fitness is the least of all the fitnesses 94 of the parent chromosomes 90 read out to the first chromosome register 41.
      <br/>
      Therefore the least-fit pointer 44 holds the address of the less-fit member 35 of chromosomes 32 but that of the least-fit chromosome in the population memory 30.
      <br/>
      Suppose that the least-fit pointer 44 holds the address of the least-fit chromosome in the population memory 30 and the least-fit chromosome is replaced by a new child chromosome, then an extra circuit or sorting/searching operation for finding a next least-fit chromosome is required.
      <br/>
      Since a chromosome replacement in the population memory 30 is performed between a newly created child chromosome and the less-fit member 35 of chromosomes 32 and not the least-fit chromosome of the chromosome 32 in this embodiment, no extra circuit or operation is required for detecting a second least-fit chromosome in the population which allows the selector 40 simplified in architecture.
    </p>
    <p num="88">
      The fitness value 94 of the least-fit parent chromosome 90 is loaded in the least-fit value register 49 as a least-fit value 48.
      <br/>
      On every parent selection cycle, the least-fit value register 49 compares the fitness value 94 of the parent chromosome 90 loaded in the first chromosome register 41 with the current least-fit value 48 and automatically retains any value at its input that is less than the value it is presently storing.
      <br/>
      In synchronization with the least-fit value register 49 updating the least-fit value 48, the least-fit pointer register 45 updates the least-fit pointer 44.
      <br/>
      A population memory address register 43 holds the address of the parent chromosome 90 read out to the first chromosome register 41 on each parent selection cycle.
      <br/>
      When the least-fit value register 49 updates the least-fit value 48, the address loaded in the population memory address register 43 is automatically transferred to the least-fit pointer register 45 and a least-fit pointer-valid flip-flop 52 is set.
      <br/>
      The setting of the least-fit pointer-valid flip-flop 52 indicates that the least-fit value 48 retained in the least-fit value register 49 and the least-fit pointer 44 held in the least-fit pointer register 45 are validated.
      <br/>
      The least-fit pointer-valid flip-flop 52 is reset upon a write of a new child chromosome into the population memory 30 in the survival mode.
      <br/>
      With signs S and R� in the least-fit pointer-valid flip-flop 52 of FIG. 7 indicating set and reset signals, respectively, the mark � of R� indicates that the reset signal is prioritized over the set signal in the event that the set and reset signals are validated both at the same time.
      <br/>
      The least-fit value 48 of the least-fit value register 49 is set to a maximum value upon the initialization of the selection mode and soon after a write operation of a child chromosome to the population memory 30 in the survival mode.
      <br/>
      With the least-fit value register 49 having the loading capacity of 10 bits, for example, a value 1023, the maximum value of 10, is set.
      <br/>
      If a newly selected parent chromosome 90 from the population memory 30 into the first chromosome register 41 has the fitness value 94 less than the current least-fit value 48, the least-fit value register 49 updates the current least-fit value 48 by the fitness value 94 of the new parent chromosome 90 as the least-fit parent chromosome.
      <br/>
      At the same time, the address of the least-fit parent chromosome is set in the least-fit pointer register 45 and the pointer-valid flip-flop 52 is set.
    </p>
    <p num="89">4. First and Second Chromosome Registers 41, 42</p>
    <p num="90">FIG. 8 shows a block diagram of the first and second chromosome registers 41, 42 both as parts of the selector 40.</p>
    <p num="91">
      The selector 40 includes the first and second parent chromosome registers 41 for temporally storing a selected parent chromosome from the population memory 30.
      <br/>
      The first and second chromosome registers 41, 42 are cascaded in series for passing a parent chromosome from the first chromosome register 41 to the second chromosome register 42 so that a parent chromosome outputted from the population memory 30 is transferred first to the first chromosome register 41 and then to the second chromosome register 42.
      <br/>
      The first and second chromosome registers 41, 42 output the respective received parent chromosomes in parallel to each other concurrently to the crossover module 50 so that the crossover module 50 receives two parent chromosomes at the same time from the first and second chromosome registers 41, 42.
      <br/>
      The input of the first chromosome register 41 is connected to the output of the population memory 30 for inputting the chromosome 32 and its fitness value 33.
      <br/>
      The input of the second chromosome register 42 is connected to a chromosome output of the first chromosome register 41 for inputting the chromosome 32 only.
      <br/>
      In this manner, once a chromosome has been selected, the chromosome will serve first as the first parent chromosome on a certain cycle and then as the second parent chromosome on the subsequent cycle.
      <br/>
      This allows the crossover module 50 to perform a crossover operation on every cycle so that a crossover operation is performed on every selection cycle having a parent chromosome selected from the population memory 30.
      <br/>
      Upon a write of a new child chromosome into the population memory 30 in the survival mode, all the parent selection related operation is suspended in the selector 40.
      <br/>
      The loading of parent chromosomes in the first and second chromosome registers 41, 42 is suspended.
      <br/>
      With no loading of parent chromosomes the contents of the first and second chromosome registers 41, 42 remain unchanged from the previous stage.
      <br/>
      In the survival mode, however, the crossover module 50 performs a crossover operation by using the same parent chromosomes as those used in the previous crossover operation.
      <br/>
      With the same parent chromosomes, a child chromosome can be created different from that created in the previous crossover operation in the crossover module 50.
      <br/>
      On every crossover cycle a different cutpoint is used for crossover and a different bit position is used for mutation so that the probability of creating identical child chromosomes is lessened.
    </p>
    <p num="92">5. Crossover module 50</p>
    <p num="93">FIG. 9 shows a block diagram of the crossover module 50 in detail.</p>
    <p num="94">
      The function of the crossover module 50 is to produce a new child chromosome.
      <br/>
      With a single-point crossover having a single cutpoint, the crossover module 50 disassembles the parent chromosomes and then recombines them, taking the left part of one parent chromosome and the right part of the other parent chromosome, to make a new child chromosome.
      <br/>
      Other forms of crossover, such as those using two, three or more cutpoints, are possible.
      <br/>
      When multiple cutpoints are used, selection switches between two or more parent chromosomes as cutpoints are encountered.
      <br/>
      For example, a two-cutpoint crossover process would first select chromosome data from the first parent chromosome, then after the first cutpoint, select chromosome data from the second parent chromosome, and finally after the second cutpoint, select chromosome data from the first parent chromosome again.
    </p>
    <p num="95">
      The crossover module 50 shows a single-cutpoint crossover including a crossover template generator 54, a crossover template shift register 55, and n number of multiplexers 59.
      <br/>
      The single-cutpoint crossover is illustrated with parent chromosomes P1, P2, a child chromosome C, and bits 1 through n P11 -P1n in the bit string of the parent chromosome P1, bits 1 through n P21 -P2n in the bit string of the parent chromosome P2, and bits 1 through n C1 -Cn in the bit string of the child chromosome C. The crossover template generator 54 generates a base serial pattern of a crossover template.
      <br/>
      The crossover template shift register 55 inputs the serial pattern, shifts the pattern bit by bit and outputs an n-bit crossover template.
      <br/>
      The multiplexer 59 performs a crossover operation on a parent chromosome based upon the crossover template.
    </p>
    <p num="96">The crossover template generator 54 is now described in detail.</p>
    <p num="97">
      FIG. 10 shows the crossover template generator 54 of the crossover module of FIG. 9 in detail.
      <br/>
      The crossover template generator 54 generates the crossover template indicating a cutpoint to regulate the participation of the two parent chromosomes in the crossover process.
      <br/>
      This participation is regulated by supplying a serial pattern of binary 1s and 0s in the crossover template to the crossover template shift register 55.
      <br/>
      A cutpoint is represented by a 10 or 01 data pattern so that a cutpoint can be acknowledged by that pattern appearing in the serial pattern.
      <br/>
      The desired number of cutpoints can be obtained in the template based upon an externally supplied parameter (identified by "CUTPOINTS" in FIG.
    </p>
    <p num="98">
      10).
      <br/>
      A Cutpoint Generation is Performed probabilistically controlled by the following four elements.
    </p>
    <p num="99">
      (1) externally supplied parameter (CUTPOINTS) indicating the number of crosspoints,
      <br/>
      (2) number of cutpoints currently in the crossover template shift register 55,
      <br/>
      (3) random number stream generated by a random number generator RN2, and
      <br/>
      (4) current threshold value held in a threshold counter 26.
    </p>
    <p num="100">An operation of the crossover template generator 54 is now described with reference to FIG. 10.</p>
    <p num="101">
      Starting with the existing serial pattern in the crossover template shift register 55, the current cutpoints are detected by a plurality of n-1 number of XOR gates 29.
      <br/>
      Since the cutpoint is defined to be either a binary 01 or a 10 pattern as mentioned hereinbefore, the XOR gates 29 detecting either of these patterns output 1s.
      <br/>
      The XOR gates 29 when not detecting these patterns output 0s.
      <br/>
      The aggregate of XOR gate outputs is connected to a carry-save-adder 28 which sums the number of inputs that are 1.
      <br/>
      This provides a binary number representing the number of cutpoints currently in the serial pattern in the crossover template shift register 55.
    </p>
    <p num="102">
      A similar cutpoint counting as that discussed above can be performed through an alternative counter of FIG. 11 instead of the counter including the XOR gates 29 and the carry-save-adder 28 of FIG. 10. With this alternative counter, the crossover template shift register 55 is reset to 0 and an up/down counter 20 is set to zero prior to a start operation of the machine.
      <br/>
      When the serial pattern is inputted to the crossover template register 55 from the crossover template generator 54 and then shifted, the up/down counter 20 increments the value of the counter if detecting either of the binary 01 and 10 patterns indicating a cutpoint.
      <br/>
      When the serial pattern is shifted out of the crossover template register 55, the up/down counter 20 decrements the value of the counter if detecting either of the binary 01 and 10 patterns.
      <br/>
      Thus, the number of cutpoints currently in the crossover template shift register 55 can be detected by the up/down counter 20.
    </p>
    <p num="103">
      The number of cutpoints outputted from the counter (the carry-save-adder 28 or the up/down counter 20) is inputted to a cutpoint number comparator 27 where the number of cutpoints from the counter is compared with another input of the desired number of cutpoints represented by the external CUTPOINTS parameter.
      <br/>
      If the number of cutpoints from the counter is greater than the externally supplied desired number of cutpoints, a decrement signal is sent to a threshold counter 26 in order to decrease a threshold value.
      <br/>
      If the current number of cutpoints from the counter is less than the desired, an increment signal is sent for incrementing the current threshold value in the threshold counter 26.
    </p>
    <p num="104">
      The serial pattern of the crossover template is generated by a toggle flip-flop 21 whose input is connected to the output of a threshold comparator 25 via an OR gate 22.
      <br/>
      A first input to the threshold comparator comes a threshold value from the threshold counter 26, and a second input is a random number from the random number generator RN2.
      <br/>
      The random number generator RN2 generates a random number independent from all other random numbers generated by other random number generators used in the machine.
      <br/>
      A threshold comparator output is a 1 when the random number is less than the threshold value which causes in turn the toggle flip-flop 21 to change the state of its output.
      <br/>
      Thus the toggle flip-flop 21 outputs the pattern indicating a cutpoint into the crossover template shift register 55.
      <br/>
      The process of generating the crossover template provided for the crossover template shift register 55 is thus probabilistically self-regulating.
      <br/>
      When the number of cutpoints is too many, the threshold value of cutpoint generation is lowered, decreasing the probability of cutpoint generation.
      <br/>
      When the number of cutpoints is too few, the threshold value is raised, increasing the probability of cutpoint generation.
      <br/>
      The crossover template generator 54 thus generates the pattern of the crossover template automatically in such a manner that the current number of cutpoints complies with the desired number of cutpoints supplied externally.
    </p>
    <p num="105">An operation of the comparator 24 and AND gates 23 of FIG. 10 is now described.</p>
    <p num="106">
      The AND gate 23 and the comparator 24 compose a circuit for generating a cutpoint pattern in the crossover template in case of no cutpoints provided in the template.
      <br/>
      If there are no cutpoints in the crossover template in the conventional art, either parent could be potentially copied back into the population memory 30, which reduces the genetic diversity or evolution of the population.
      <br/>
      This is, in general, disadvantageous to the performance of a GA.
      <br/>
      This embodiment guarantees that there is always at least one cutpoint in the crossover template.
      <br/>
      The output of the XOR gate 29 connected to bits n-1 and n is inputted to the AND gate 23.
      <br/>
      The comparator 24 detects whether the current number of cutpoints outputted from the carry-save-adder 28 is 1.
      <br/>
      When the comparator detects 1 and also the output of the XOR gate 29 connected to bits n-1 and n is ON, the AND gate outputs 1.
      <br/>
      The output of the AND gate 23 turns ON only when there is only a single cutpoint locating between bits n-1 and n in the n-bit pattern of the crossover template in the crossover template shift register 55.
      <br/>
      This indicates there will be no cutpoint in the crossover template shift register 55 in the next cycle or next shift.
      <br/>
      When detecting such a situation, the circuit composed of the AND gate 23 and the comparator 24 causes to generate the cutpoint pattern in the toggle flip-flop 21 via the OR gate 22.
      <br/>
      Thus, the cutpoint pattern appears locating between bits 1 and 2 in the crossover template pattern register 55 in the next shift.
    </p>
    <p num="107">
      FIG. 12 shows the AND gate 23 and comparator 24 detecting the crossover template shift register 55 outputting the last cutpoint.
      <br/>
      In this situation, the toggle flip-flop 21 generates the pattern indicating a new cutpoint to appear on the next cycle.
    </p>
    <p num="108">The crossover module 50 is now described more in detail further with reference to FIG. 9.</p>
    <p num="109">
      The crossover template generated by the crossover template generator 54 is inputted sequentially to the crossover template shift register 55 and then objected to a bit-by-bit shifting.
      <br/>
      A bit-based shifting operation of the crossover template can provide diversity of bit position of the cutpoint in the template, which is essential to the operation of a GA.
      <br/>
      As the crossover template is shifted one bit to the right in the crossover template shift register 55, a new serial pattern generated by the toggle flip-flop 21 is inputted sequentially at the left-most position of the crossover template shift register 55.
    </p>
    <p num="110">
      The crossover module 50 includes n number of multiplexers 59 corresponding to the respective bits in the n-bit chromosome.
      <br/>
      Each multiplexers 59, consisting of two inputs (Input 0 and Input 1) and a single address A, selects an input 0 when the value of address A is 0, and selects an input 1 when the value of address A is 1.
      <br/>
      Address A of the multiplexer 59 is connected to a corresponding bit in the crossover template shift register 55.
      <br/>
      When an output signal of the crossover template shift register 55 is a binary 0, data at the corresponding bit position is selected from the first parent chromosome register 41.
      <br/>
      Conversely, when an output signal of the crossover template shift register 55 is a binary 1, data at the corresponding bit position is selected from the second parent chromosome register 42.
    </p>
    <p num="111">6. Mutator 60</p>
    <p num="112">FIG. 13 shows a block diagram of the mutation operator 60 in detail.</p>
    <p num="113">A mutation operation is described with bits 1 through n C1 -Cn in the bit string of a child chromosome C and bits 1 through n C'1 -C'n in the bit string of a mutated child chromosome C' in FIG. 13.</p>
    <p num="114">
      If the crossover module 50 is the primary operator of a GA, then the mutation operator 60 is a secondary genetic operator.
      <br/>
      The mutation operator's primary purpose is to provide genetic diversity at a given bit position.
      <br/>
      According to this embodiment, the mutation is performed on all bits in the child chromosome independently, probabilistically and simultaneously.
      <br/>
      Mutation is performed through inversion of a bit value, i.e., a 1 changes to a 0 and a 0 changes to a 1.
      <br/>
      The mutation is performed at a low probability rate typically with 1 per-cent or less.
      <br/>
      In a hardware implementation of a GA it is desirable that the mutation operation be performed rapidly.
      <br/>
      In the conventional art, the mutation operation is applied to bits in the chromosome in consideration of the values of all bits in the chromosome or of mutated state of other bits in the chromosome.
      <br/>
      This hinders the speed of the mutation operation.
      <br/>
      In this embodiment, all bits are considered in parallel.
      <br/>
      This allows the mutation operation to be performed in a single machine cycle.
    </p>
    <p num="115">
      The mutation operator 60 includes a mutation module 68 and a mutated chromosome register 69.
      <br/>
      The mutation module 68 includes a first pulse stream generator 84. a second pulse stream generator 85, n number of AND gates 63, and n number of XOR gates 62.
      <br/>
      The first pulse stream generator 84 includes a random number generator RN3, a first shift register 64, and an absolute value comparator 66.
      <br/>
      The second pulse stream generator 85 includes a random number generator RN4, a second shift register 65, and an absolute value comparator 67.
      <br/>
      In this embodiment, a random pulse stream is generated respectively from the first and second pulse stream generators 84, 85 based upon two uncorrelated random numbers.
      <br/>
      The absolute value comparator 66 inputs a random number stream from the random number generator RN3 and compares the random number stream with an externally supplied value representing a given pulse density p, which will be referred to by a PDF (pulse-density-function) parameter hereinafter.
      <br/>
      The pulse density p represents the probability of 1 in the bit stream of 1s and 0s.
      <br/>
      For example, when the random number generator RN3 generates random numbers from 1 to 100 together with the pulse density p=10%, the value of the PDF parameter is 10.
      <br/>
      When the random number is less than a PDF parameter value, an absolute value comparator output is a 1.
      <br/>
      In other case, an absolute value comparator output is a 0.
      <br/>
      A bit stream of 1s and 0s outputted from the absolute value comparator 66 has a 10 per-cent probability of 1s in the stream.
      <br/>
      The pulse density p is the ratio of a PDF parameter value to the maximum possible value generated by the random number generator RN3.
      <br/>
      The output of the absolute value comparator 66 is inputted sequentially to the first shift register 64, The first shift register 64 shifts an absolute value comparator output from left to right.
      <br/>
      A similar operation is performed by the second pulse stream generator 85 and the random number generator RN4, the absolute value comparator 67 and the second shift register 65.
      <br/>
      Random numbers inputted to the absolute value comparators 66, 67 have no correlation, and therefore, bit stream patterns retained in the first and second shift registers 64, 65 have no correlation.
    </p>
    <p num="116">FIG. 14 shows an operation of the mutation module 68 of the mutation operator 60.</p>
    <p num="117">
      Bits in the first and second shift registers 64, 65 are connected to n AND gates 63, with each gate's inputs connected to similar bit positions in each of the shift registers 64, 65.
      <br/>
      Each AND gate 63 thus inputs bit values, ANDs the bits, and outputs a 1 only when the inputted bit values at the similar bit position in the shift registers 64, 65 are 1s.
      <br/>
      In FIG. 14, the second AND gate 63 from the left outputs a 1 when inputting values 1s at the second bit positions from the left in the respective shift registers 64, 65.
      <br/>
      The resultant pulse density of the AND gate output is a product p2 of the pulse densities of the two pulse streams generated by the respective absolute value comparators 66, 67.
      <br/>
      For example, when the pulse density p is 10 per-cent, the product of the pulse densities p2 of the two pulse streams is one per-cent (10% * 10%=1%).
      <br/>
      Outputs from the AND gate 63 together with outputs from the crossover module 50 are inputted to the n XOR gates 62, where the child chromosome datum at a specific bit position is mutated.
      <br/>
      When the output of the AND gate 63 is a 1, the XOR gate 62 performs a mutation.
      <br/>
      In FIG. 14, only with the second XOR gate 62 from the left mutation is performed on the second bit from the left.
      <br/>
      The XOR gate 62, when inputting a 1 from the AND gate 63, inverts a bit of the child chromosome data pattern in the corresponding bit position to the AND gate 63.
      <br/>
      When inputting a 0 from the AND gate 63, the XOR gate 62 outputs the corresponding bit of the child chromosome bit pattern with no inversion.
      <br/>
      A child chromosome having an inverted bit is outputted from the XOR gates 62 and inputted to the mutated chromosome register 69 for temporary storage.
    </p>
    <p num="118">
      The mutated chromosome register 69 has two input types, parallel input and serial input, controlled by the gate G1.
      <br/>
      Normally with selection mode, the parallel input is selected.
      <br/>
      In the initialization mode, serial input is selected so that data are inputted sequentially from a private absolute value comparator 98 to the mutated chromosome register 69 and then shifted bit by bit.
      <br/>
      The serial input will be described in detail hereinafter.
    </p>
    <p num="119">Thus, the XOR gates 62 mutate the respective bits of a child chromosome independently in parallel with no correlation between the bits.</p>
    <p num="120">7. Fitness Function Circuit 70</p>
    <p num="121">FIG. 15 shows the fitness function circuit 70 in detail.</p>
    <p num="122">
      The fitness function circuit 70 of FIG. 15 is applied specifically to a knapsack problem.
      <br/>
      The knapsack problem proposes that there are n items of various weights and values and the objective is to fill a knapsack with the maximum value collection of items without exceeding the weight limit of the knapsack.
      <br/>
      With the knapsack problem as an exemplary problem the fitness function circuit is described here.
    </p>
    <p num="123">
      For the chromosome's data structure a single bit in the chromosome is assigned to each of n number of items.
      <br/>
      If an item's bit in the chromosome is a 1, then it is selected for inclusion in the knapsack, if it is a 0, then it is to be left out.
    </p>
    <p num="124">As a fitness used here the total value of items in the knapsack with the restriction that if the weight exceeds the weight limit, the value will be set to zero.</p>
    <p num="125">
      The fitness function circuit 70 of FIG. 15 sums the weight of selected items in the knapsack and outputs a summed value as the fitness value of the chromosome.
      <br/>
      The fitness function circuit 70 of FIG. 15 includes a plurality of n multiplexers 71.
      <br/>
      An address A of each multiplexer 71 is connected to its corresponding bit in the n-bit chromosome.
      <br/>
      If the corresponding bit is a 0, then the multiplexer 71 selects 0 as its output value.
      <br/>
      This means that there is no item selected and therefore weight 0 is outputted.
      <br/>
      If the corresponding bit is a 1, then the multiplexer 71 outputs the weight of the item selected.
      <br/>
      Outputs of all of the multiplexers 71 are inputted to a carry-save-adder 72 which sums the weight of all items.
      <br/>
      A weight comparator 73 compares the total weight outputted from the carry-save-adder 72 to the weight limit of the knapsack (identified by WEIGHT LIMIT in FIG. 15).
      <br/>
      As long as it is equal to or less than the weight limit of the knapsack then the weight comparator 73 outputs a 1.
    </p>
    <p num="126">
      The fitness function circuit 70 also includes a plurality of n multiplexers 74 and carry-save-adder 75 arranged therein in the same manner as the plurality of multiplexers 71 and the carry-save-adder 72.
      <br/>
      The multiplexers 74 outputs the values of selected items and then the carry-save-adder 75 outputs the total value of all selected items in the knapsack.
      <br/>
      A multiplexer 76 outputs a 0 as a fitness value 78 when the total weight is more than the weight limit, and otherwise, outputs the total value outputted from the carry-save-adder 75 as the fitness value 78.
    </p>
    <p num="127">
      The fitness function circuit 70 of FIG. 15 is designed specifically to solve the knapsack problem.
      <br/>
      There are other problems to be solved by GAs through other types of problem-specific fitness function circuits than the fitness function circuit 70.
      <br/>
      The fitness function circuit 70 generally includes reconfigurable IC based synthetic devices of VLSI or FPGA, etc.
      <br/>
      The fitness function circuit 70 is a removable device which can be mounted on the fitness function circuit mount 95.
      <br/>
      Alternatively, the fitness function circuit 70 can be fixed soldered, for example, on the fitness function circuit mount 95.
      <br/>
      By applying other possible evaluation approaches to the fitness function circuit 70, the GA machine of this invention can easily become a multi-functional or multi-purpose machine applicable to various problems.
    </p>
    <p num="128">8. Survival Comparator 80</p>
    <p num="129">
      The survival comparator 80 is provided for storing a newly generated child chromosome in the population memory 30.
      <br/>
      The survival comparator 80 detects whether the fitness of a newly generated child chromosome is greater than the fitness of any chromosome in the population memory 30.
      <br/>
      In this embodiment as mentioned earlier, the least-fit chromosome of all parent chromosomes in the first chromosome register 41 is replaced by a newly generated child chromosome.
    </p>
    <p num="130">FIG. 16 shows the survival comparator 80 and its neighboring circuits.</p>
    <p num="131">
      One input of the survival comparator 80 is connected to the output of the fitness value 78 of the evaluated chromosome register 79 and the other input is connected to the least-fit value register 49.
      <br/>
      The least-fit value register 49 holds the least-fit value 48 which is the fitness value 94 of the parent chromosome 90 whose fitness is the least of all fitness values 94 of the parent chromosomes 90 loaded in the first chromosome register 41 after the previous update of a chromosome by a child chromosome in the population memory 30 in the previous survival mode.
      <br/>
      The evaluated chromosome register 79 holds a mutated chromosome outputted from the mutated chromosome register 69 as an evaluated chromosome 77 when the fitness of the mutated chromosome is evaluated in the fitness function circuit 70.
      <br/>
      If the fitness value 78 of the evaluated chromosome is greater than the least-fit value 48 in the least-fit value register 49, then the output of the survival comparator 80 is a 1.
      <br/>
      This survival comparator's output is a survival signal to generate the survival mode.
      <br/>
      If the least-fit pointer 44 in the least-fit pointer register 45 is valid, then the evaluated chromosome 77 and its fitness value 78 in the evaluated chromosome register 79 are transferred to the population memory 30 at the address specified by the least-fit pointer 44.
      <br/>
      If the fitness value 78 is less than the least-fit value 48 in the least-fit value register 49, then the evaluated chromosome 77 and its fitness value 78 are ignored and discarded.
      <br/>
      If the value of the least-fit pointer 44 identified by an AND gate 53 is invalid, then the evaluated chromosome 77 and its fitness value 78 are also ignored and discarded.
    </p>
    <p num="132">9. Overall Configuration</p>
    <p num="133">FIG. 17 shows the overall view of the GA machine of FIG. 1 in detail putting all composing elements of the GA machine described singly hereinbefore and the fitness function circuit 70 together.</p>
    <p num="134">The execution process of a GA of this embodiment is summarized as follows.</p>
    <p num="135">
      (1) initialization of the population memory 30,
      <br/>
      (2) selection of parent chromosomes,
      <br/>
      (3) crossover,
      <br/>
      (4) mutation,
      <br/>
      (5) fitness evaluation, and
      <br/>
      (6) survival determination.
    </p>
    <p num="136">
      These respective operations are repeated until no new or improved solution is generated or a predetermined period or predetermined times is exceeded.
      <br/>
      Typically, many solution attempts can be made for a single problem with various conditions such as:
      <br/>
      (1) the density of 1s in the random pattern of chromosome of 0s and 1s in the initialization of the population memory 30,
      <br/>
      (2) the number of cutpoints, and
      <br/>
      (3) the mutation rate being varied with each attempt in a plurality of attempts made for a single problem, and even, the mutation rate being varied dynamically within the attempt.
    </p>
    <p num="137">
      These parameters can be provided by an external source such as an operator and any computer.
      <br/>
      The external source is not considered in this embodiment and not claimed as part of this invention because the external source is not particularly significant or relevant to the subject of this invention.
      <br/>
      Likewise, not claimed is the random number generators whose implementations such as external supply of parameters and random number generation are various and would be apparent to those who are skilled in the art of digital system design.
      <br/>
      The only significant feature of the random number generators here is the generation of uncorrelated random numbers.
    </p>
    <p num="138">10. Initialization Circuit</p>
    <p num="139">
      To begin the process in the machine, the population memory 30 must be initialized as mentioned hereinbefore.
      <br/>
      The initialization is to fill the population memory 30 with a randomly generated population of chromosomes and their respective fitnesses.
    </p>
    <p num="140">
      The initialization circuit of this embodiment utilizes the mutated chromosome register 69, fitness function circuit 70, evaluated chromosome register 79, etc.
      <br/>
      The mutated chromosome register 69 in FIG. 13 has parallel and serial data input modes.
      <br/>
      When the initialization mode signal is OFF, the mutated chromosome register 69 inputs the outputs of the respective n XOR gates 62 in parallel.
      <br/>
      When the initialization mode signal is ON, the mutated chromosome register 69 inputs a serial pattern outputted sequentially from the absolute value comparator 98 is inputted and then shifts the incoming bit stream of the serial pattern bit by bit from the left to the right.
      <br/>
      Especially in the initialization mode, a threshold (TH) parameter representing the density of 1s of a random chromosome bit pattern of 0s and is is inputted to the absolute value comparator 98.
      <br/>
      The operation of the absolute value comparator 98 is similar to that of the absolute value comparator 66.
      <br/>
      By varying the value of the threshold (TH) parameter different types of random bit streams can be generated.
    </p>
    <p num="141">
      When a random bit stream is inputted in serial to the mutated chromosome register 69 in such a manner, the fitness function circuit 70 evaluates the random pattern in the mutated chromosome register 69 and outputs its evaluated value in every machine cycle.
      <br/>
      The evaluated chromosome register 79 retains the evaluated chromosome 77 and its fitness value 78 in such a manner described hereinbefore.
      <br/>
      The value of the least-fit value 48 in the survival comparator 80 is cleared to zero in the initialization mode when the initialization mode signal is inputted to the least-fit value register 49 via the OR gate 86.
      <br/>
      This generates the survival mode as a comparison result of the survival comparator 80.
      <br/>
      Then the evaluated chromosome 77 and its fitness value 78 in the evaluated chromosome register 79 are written into the population memory 30.
    </p>
    <p num="142">
      With reference to FIG. 4, when the machine is set to the initialization mode, the sequential counter 36 is set to zero.
      <br/>
      Random data will then be shifted into the mutated chromosome register 69 until it is filled.
      <br/>
      Once it is filled, an initial write signal is generated at the write enable timing of the evaluated chromosome 77 and its fitness value 78 into the population memory 30 from the survival comparator 80.
      <br/>
      The evaluated random chromosome 77 and its fitness value 78 is written into the population memory 30, at the address specified by the sequential counter 36.
      <br/>
      The sequential counter 36 specifies the address of the adjacent consecutive space for a new chromosome to be written by incrementing its value by a 1 in every writing of chromosome into the population memory 30.
      <br/>
      In this embodiment, a new chromosome is written into the population memory 30 in every bit-by-bit right shift of data in the mutated chromosome register 69.
      <br/>
      This provides high speed initialization process of the population memory 30, which is an essential part of a GA.
      <br/>
      In this embodiment, an initialization period is proportional to the number of words in the population memory 30 as opposed to the number of bits in the population memory 30 from which the initialization period is independent.
      <br/>
      It is possible to wait for the mutated chromosome register 69 to be completely refilled with new random data of n-bit stream before the new chromosome is written into the population memory 30.
      <br/>
      But the initialization speed of this method is n times slower than the bit-by bit shift initialization method discussed hereinbefore to write a chromosome into the population memory 30.
      <br/>
      In this embodiment, one chromosome is generated in every machine cycle.
      <br/>
      This is advantageous to improve the initialization speed.
      <br/>
      The initialization process ends when the population memory 30 becomes full with child chromosomes.
      <br/>
      The machine is now ready to begin processing the selection mode operation.
    </p>
    <p num="143">FIG. 18 shows a chart illustrating an overall operation of the GA machine of this embodiment.</p>
    <p num="144">The chart is drawn with each units of the GA machine vertically and horizontally with machine cycles from the beginning of the selection mode upon leaving initialization mode.</p>
    <p num="145">
      In the chart of FIG. 18, parent chromosomes are designated by P1 through P10, child chromosomes by C1 through C9, and mutated chromosomes by C'1 through C'7.
      <br/>
      The addresses of the parent chromosomes P1 through P10 are designated respectively by P1A through P10A and numerals in the chart indicate the fitness values of the respective chromosomes.
    </p>
    <p num="146">
      On a first cycle -1, the random number generator 31 is selected as an address source to supply an address to the population memory 30.
      <br/>
      Then the parent chromosome P1 at the address supplied by the random number generator 31 is read out to the first chromosome register 41 and the address P1A of the parent chromosome P1 is transferred to the population memory address register 43 to be retained.
    </p>
    <p num="147">
      On a second cycle -2, the parent chromosome P1 in the first chromosome register 41 is transferred to the second chromosome register 42.
      <br/>
      The fitness value 94 (value 100) in the first chromosome register 41 is compared with the least-fit value 48 in the least-fit value register 49.
      <br/>
      The value of the least-fit value register 49 is to be initialized to all is upon leaving initialization mode.
      <br/>
      In FIG. 18, the value is set to the maximum value 1023.
      <br/>
      Therefore, the fitness value 94 (value 100) in the first chromosome register 41 is transferred to the least-fit register 49.
      <br/>
      Whenever a new value is set, the least-fit value register 49 generates a pulse.
      <br/>
      The pulse is outputted to the least-fit pointer register 45 where the least-fit pointer 44 is set thereupon.
      <br/>
      The address held in the population memory address register 43 is loaded into the least-fit pointer register 45 to set the least-fit pointer 44.
      <br/>
      The population memory address register 43 holds the address of the parent chromosome 90 that was previously in the first chromosome register 41.
    </p>
    <p num="148">Further on cycle -2, the least-fit pointer-valid flip-flop 52 is reset and the new parent chromosome P2 is read out to the first chromosome register 41.</p>
    <p num="149">
      Still further on cycle -2, the crossover is performed on parent chromosomes P1 and P2 to create a child chromosome C1.
      <br/>
      The resultant child chromosome C1 is then passed on to the mutation operator 60 for mutation.
    </p>
    <p num="150">
      On a third cycle -3, the resultant mutated child chromosome C'1 is loaded into the mutated chromosome register 69 from the mutation module 68.
      <br/>
      The mutated child chromosome C'1 is then evaluated by the fitness function circuit 70.
      <br/>
      On cycle -3, the previous value 100 of the least-fit value register 49 is replaced by a new value 99.
    </p>
    <p num="151">
      On a fourth cycle -4, the evaluated chromosome 77 along with its fitness value 78 (value 10) is loaded into the evaluated chromosome register 79 where the fitness value 78 (value 10) is compared with the fitness value (value 99) of the least-fit chromosome 35 in the least-fit value register 49.
      <br/>
      If the child chromosome is more fit, the child chromosome is written into the population memory 30 at the location supplied by the least-fit pointer 44 in the least-fit pointer register 45.
    </p>
    <p num="152">
      In FIG. 18, on the fourth cycle -4 through a seventh cycle -7, the fitness values 78 (values 10, 20, 30, 40) of the mutated child chromosomes C'1 through C'4 are less than the fitness values 48 (values 99, 98, 70) in the least-fit value register 49.
      <br/>
      In this case, the mutated child chromosomes C'1 through C'4 are discarded with no mode change to survival.
      <br/>
      Next on an eighth cycle -8, the fitness value 78 (value 150) of the mutated child chromosome C'5 is more than the least-fit value 48 (value 70), then the survival comparator 80 outputs a 1 as the survival signal.
    </p>
    <p num="153">
      Next on a ninth cycle -9 with the survival signal 1, the mode turns to survival.
      <br/>
      When a child chromosome C'5 is written into the population memory 30, the first and second chromosome registers 41, 42 suspend their reading operations.
      <br/>
      The least-fit pointer-valid flip-flop 52 is reset, which resets the value in the least-fit value register 49 to be initialized to the maximum value 1023.
      <br/>
      The reset of the least-fit pointer-valid flip-flop 52 invalidates the least-fit pointer 44 in the least-fit pointer register 45, although the content of the least-fit pointer 44 remains unchanged.
    </p>
    <p num="154">
      On cycle -9, crossover and mutation are performed with the first and second chromosome registers 41, 42 suspending their reading operation and their contents unchanged.
      <br/>
      With the same parent chromosomes P7, P8 used as those in the previous operation, a child chromosome is created different from that in the previous operation because the cutpoint for crossover varies and the bit location for mutation varies.
      <br/>
      With reference to the chart of FIG. 18, a child chromosome Ca7 is created using parent chromosomes P7, P8 on cycle -8 and on cycle -9, a child Cb7 is created using the same parent chromosomes P7, P8.
      <br/>
      The child chromosomes Ca7, Cb7 are mutated to become mutated child chromosomes Ca'7, Cb'7 respectively.
      <br/>
      Thus, a new child chromosome can be constantly created on each cycle even with the first and second chromosome registers 41, 42 suspending their reading.
    </p>
    <p num="155">
      The GA machine described in this embodiment can be varied within the scope of the present invention.
      <br/>
      The following is the proposal of a possible variation of the population memory 30.
    </p>
    <p num="156">
      The population memory 30 is not necessarily be centralized having a single large memory space but be decentralized having a plurality of memory spaces distributed in the region.
      <br/>
      The decentralized type of the population memory may have the disadvantage of complicated addressing circuit but the advantage of flexible data storage and easy implementation of additional memory spaces when necessary.
    </p>
    <p num="157">An alternative selector to the selector 40 is now discussed.</p>
    <p num="158">
      In this embodiment, a relative least-fit value of the least-fit value 48 in the least-fit value register 49 is used for the survival comparison.
      <br/>
      The selector 40 detects the least-fit chromosome of all selected parent chromosomes loaded in the first chromosome register 41 which corresponds to the less-fit member 35 of the chromosomes 32 in the population.
      <br/>
      In contrast to the relative least-fit value, an absolute least-fit value of the least-fit chromosome of all chromosomes 32 in the population may be used instead with an alternative selector.
      <br/>
      The alternative selector detects an absolute least-fit value of all fitness values 33 of chromosomes 32 through implementation of a hardware circuit or sort algorithm, etc. designed specifically to detect and store the absolute least-fit value.
    </p>
    <p num="159">
      Another alternative selector to the selector 40 may be a selector which selects a parent chromosome based upon its priority, instead of the random parent selection of this embodiment.
      <br/>
      The selection priority of chromosome is decided based upon the fitness value 33 of the chromosome 32.
      <br/>
      The priority-based selection allows parent chromosomes to be selected with various rates of probability.
    </p>
    <p num="160">An alternative crossover module to the crossover module 50 of FIG. 9 is now discussed with reference to FIG. 19.</p>
    <p num="161">FIG. 19 shows a crossover module 50a which performs a crossover operation using four parent chromosomes.</p>
    <p num="162">In FIG. 19, the first chromosome register 41 is connected to an input 0 of a multiplexer 59a.</p>
    <p num="163">The second chromosome register 42 is connected to an input 1 of the multiplexer 59a.</p>
    <p num="164">A third chromosome register 88 is connected to an input 2 of the multiplexer 59a.</p>
    <p num="165">A fourth chromosome register 89 is connected to an input 3 of the multiplexer 59a.</p>
    <p num="166">
      A plurality of n number of multiplexers 59a input two n-bit crossover templates respectively at respective addresses A1, A2 and select any one of four input ports 0 through 3 according to a rule of FIG. 20. A child chromosome is thus created by selecting one of the four chromosome registers 41, 42, 88, 89.
      <br/>
      Thus the crossover operation can be performed on a plurality of parent chromosomes through a similar process described with the crossover module of FIG. 19.
    </p>
    <p num="167">
      FIG. 21 shows another alternative crossover module for a crossover operation with three parent chromosomes.
      <br/>
      The crossover operation is performed through n number of multiplexers 59b, one for each bit in the chromosome, each including three gates G0, G1, G2 and three input ports 0, 1, 2.
      <br/>
      Each multiplexer 59b selects one of the input ports 0, 1, 2, controlled by a gate input of the gates G1, G2, G3 according to a rule of FIG. 22. A plurality of n decoders 87 input two n-bit crossover templates, each decoder 87 inputting the two templates respectively at addresses A1, A2, and then selecting one of four output ports 0, 1, 2, 3 according to the rule of FIG. 22. The output ports 2, 3 are connected to the gate G2 of the multiplexer 59b via a corresponding one of n number of OR gates 99.
      <br/>
      A three-parent crossover is thus performed using the rule of FIG. 22.
    </p>
    <p num="168">
      In a similar manner, a crossover operation can be performed with five or more parent chromosomes, the operation of which is not shown in the figure.
      <br/>
      If q (q &gt;= 2) number of parent chromosomes are used for crossover, log2q (decimals raised to the next whole number) number of crossover template shift registers 55 are required.
      <br/>
      In this case, values outputted from the respective crossover template shift registers 55 decide which chromosomes among q parent chromosomes should be used for a crossover operation to create a child chromosome.
    </p>
    <p num="169">Other possible alternative crossover modules to the crossover module 50 are now considered.</p>
    <p num="170">
      A crossover module may perform a multi-cutpoint crossover instead of the single-cutpoint crossover described hereinbefore.
      <br/>
      A child chromosome can be copied from either of parent chromosomes when required, instead of being created through a cutpoint generation in case of no cutpoint available discussed hereinbefore.
    </p>
    <p num="171">An alternative mutation operator to the mutation operator 60 is now discussed.</p>
    <p num="172">
      Mutation may not always be a must as the 1-bit mutation discussed hereinbefore.
      <br/>
      A child chromosome created by the crossover module 50 can be transferred directly to the mutated chromosome register 79 for a fitness evaluation.
    </p>
    <p num="173">An alternative initialization circuit to the initialization circuit of FIG. 13 is now discussed with reference to FIGS. 23 and 24.</p>
    <p num="174">FIG. 23 shows an alternative initialization circuit according to this embodiment.</p>
    <p num="175">FIG. 24 shows an overall view of a GA machine with the replacement of the initialization circuit of FIG. 23 for the initialization circuit of FIG. 13 in the GA machine of FIG. 17.</p>
    <p num="176">
      With the alternative initialization circuit the mutated chromosome register 69 receives the random serial pattern from the absolute value comparator 66 of the mutation module 68 instead of the private absolute value comparator 98 for the random chromosome generation.
      <br/>
      Thus the absolute value comparator 66 can be shared by the mutation module 68 and the mutated chromosome register 69.
      <br/>
      The density of 1s in the random pattern can be controlled by the externally supplied PDF parameter.
      <br/>
      To achieve this alternative approach, the externally supplied PDF parameter is set to an initialization value in the initialization mode.
    </p>
    <p num="177">An alternative GA machine framework to those described hereinbefore is now discussed.</p>
    <p num="178">
      The composing elements of the GA machine or framework of this invention, i.e., population memory, selector, crossover module, mutation operator, survival comparator, fitness function circuit, described singly hereinbefore are all physically associated one another within the machine and do not exist independently from others.
      <br/>
      The present invention is characterized by the hardware implementation of the functions of those elements in that hardware-based elements are designed to implement a GA so that the physical composition or packaging of a GA machine is least significant here.
    </p>
    <p num="179">
      In contrast to the non-problem-specific aspect of the GA framework including general-purpose elements of population memory, selector, crossover module, mutation operator, and survival comparator which are all applicable to any problems, one or more of these elements may be designed problem-specific.
      <br/>
      Otherwise in an alternate form, all of those elements may be problem-specific like the fitness function circuit 70.
      <br/>
      The hardware implementation of those elements (and the fitness function circuit) of this invention is further characterized by the acceleration of the execution speed of a GA with the hardware-based elements designed to implement the GA.
      <br/>
      In the conventional art, a GA is executed on general-purpose or reconfigurable computers, whereas the present invention employs the hardware-based elements (including the fitness function circuit) designed to operate in synchronization with a machine cycle in order to accelerate the execution speed of a GA.
      <br/>
      Thus the GA machine of the present invention accelerates the execution speed of a GA by 100 or 1000 times quicker than that with the conventional GA machine.
    </p>
    <p num="180">Embodiment 2</p>
    <p num="181">Another embodiment of the present invention is a problem-specific fitness function circuit for solving a set covering problem.</p>
    <p num="182">
      The fitness function circuit is embodied here on the assumption that the GA framework described in the previous embodiment is the environment in which the fitness function circuit is implemented.
      <br/>
      The detailed description of the composing elements of the GA framework will not be reiterated here.
      <br/>
      The fitness function circuit inputs n-bit chromosomes and outputs their evaluated values of fitness.
      <br/>
      The purpose of the fitness function circuit of this embodiment is the reduction of DRAM testing to a minimum which was discussed in the conventional art with reference to FIGS. 33 through 35.
      <br/>
      The inventive feature of the fitness function circuit is illustrated with reference to a simple example of DRAM testing having ten chips detected through seven tests in order to make the explanation simpler here.
    </p>
    <p num="183">
      FIG. 25 shows a table of a failure log with the rows representing tests 1 though 7 and the columns representing the failed chips 1 through 10.
      <br/>
      Each row or test represents a set within a collection C. Each column represents the elements within the sets.
      <br/>
      Ten elements of chips 1 through 10 are detected failed through seven sets of tests 1 through 7.
      <br/>
      If an element is detected failed by a set, the element is said to be covered by the set.
      <br/>
      If chip 1 is detected failed through test 1, for example, column 1 is said to be covered by row 1.
      <br/>
      Similarly, columns 4 and 7 is said to be covered by row 1.
      <br/>
      According to the table of FIG. 25, the set covering problem is said to be solved by finding a minimum number of rows which covers all columns.
      <br/>
      In this embodiment, all sets, i.e., rows in the table, have the same cost (+1).
      <br/>
      Thus with all sets or rows having the same cost, to find a minimum cost is allowed to be equated to find a subset of rows in a minimum number.
    </p>
    <p num="184">
      The table of FIG. 25 shows seven-bit chromosomes as test sets with each bit corresponding to the respective seven tests.
      <br/>
      Bit values of 1s an 0s in the seven-bit chromosome represent the execution of tests.
      <br/>
      If the bit is 1, the bit is objected to a test.
      <br/>
      If the bit is not objected to a test, the bit is 0.
      <br/>
      If the seven-bit chromosome is objected to tests 2 and 5, for example, then the bit pattern of the chromosome is "0100100".
      <br/>
      The table of FIG. 25 illustrates three seven-bit chromosomes trial-a, trial-b, and trial-c.
      <br/>
      These chromosomes are inputted bit by bit sequentially to the fitness function circuit on each machine cycle.
      <br/>
      The cost of each trial is simply the number of 1s in the chromosome.
      <br/>
      Trial-a has a low cost of only 2 with two tests of rows 2 and 5, but is an illegal solution because the trial only covers 4 of the 10 columns as indicated by a coverage vector of FIG. 25. Trial-b covers all columns with four tests of rows 1, 2, 3, and 4, but with a cost of 4.
      <br/>
      Trial-c covers all columns with three tests of rows 1, 4, and 6, and has a cost of 3.
      <br/>
      This shows that trial-c achieves a minimumcost solution of the three.
    </p>
    <p num="185">
      With reference to the illegal trial-a chromosome failing to cover all columns, the fitness of solution must consider both the legality, i.e., the coverage of all columns, and cost of the trial solution.
      <br/>
      One option for an illegal solution is to assign a fitness of 0.
      <br/>
      This, however, has the disadvantage of not providing an evolutionary gradient of chromosomes stored in the population memory in the case of 0 fitness with which a chromosome cannot survive.
      <br/>
      To evolve all chromosomes in the population memory into legal solutions, the number of covered rows should be included in the fitness value.
      <br/>
      The fitness function circuit for computing a problem-specific fitness applicable specifically to the set covering problem is described as follows in detail with reference to FIGS. 26 through 28.
    </p>
    <p num="186">FIG. 26 shows a fitness function circuit 110 according to the second embodiment of the present invention.</p>
    <p num="187">FIG. 27 shows a cross circuit 120 of the fitness function circuit 110.</p>
    <p num="188">FIG. 28 shows the fitness function circuit 110 in detail.</p>
    <p num="189">
      The fitness function circuit 110 inputs seven-bit chromosomes and outputs their fitness values as candidate solutions to the set covering problem.
      <br/>
      The fitness function circuit 110 is a hardware circuit for calculating the number of elements covered by a chromosome and computing the fitness value of the chromosome based upon the calculated number of covered elements.
    </p>
    <p num="190">The fitness function circuit 110 includes an aggregate cost calculator 111 for calculating the aggregate cost of a chromosome and an inverter 112 for inverting the value of the aggregated cost calculated in the aggregate cost calculator 111 and outputting an inverted value as a fitness value.</p>
    <p num="191">The aggregate cost calculator 111 includes an is uncovered element counter 113 for counting the number of elements which are not covered by a chromosome and a chromosome cost calculator 114 for calculating a chromosome cost of the chromosome.</p>
    <p num="192">
      The uncovered element counter 113 includes a matrix circuit 115 having a matrix of order seven (rows) x ten (columns) and a column signal counter 116.
      <br/>
      The matrix circuit 115 inputs row signals representing the respective bit values of the seven-bit chromosome, associates each element or column with each row, and outputs column signals for distinguishing elements between covered and uncovered by the respective row signals.
    </p>
    <p num="193">
      The matrix circuit 115 includes a plurality of cross circuits 120 and ten OR gates 121 connected to the respective ten columns.
      <br/>
      The cross circuit 120 validates a column signal corresponding to an element covered by a bit in a chromosome which corresponds to a row signal when the row signal is valid.
      <br/>
      When inputting a valid row signal, the cross circuit 120 outputs a valid column signal represented by a 1.
      <br/>
      The OR gates 121 inputs the column signals outputted from the plurality of the cross circuits 120.
    </p>
    <p num="194">
      The column signal counter 116 includes a carry-save-adder 131 for calculating column signals and a subtractor 132.
      <br/>
      The carry-save-adder 131 inputs the column signals outputted from the OR gates 121, counts the number of valid column signals of 1s and outputs the number of counted columns or elements.
      <br/>
      The subtractor 132 calculates a difference between the number counted by the carry-save-adder 131 and the number (ten) of all elements or chips and outputs the difference as the number of uncovered elements.
    </p>
    <p num="195">
      The chromosome cost calculator 114 includes seven cross circuits 120 corresponding to the respective seven rows, and a carry-save-adder 133 for calculating the chromosome cost.
      <br/>
      The carry-save-adder 133 for chromosome cost inputs the respective row signals from the cross circuits 120 and outputs the number of valid row signals as the chromosome cost.
    </p>
    <p num="196">The aggregate cost calculator 111 further includes an aggregate cost register 134 for concatenating the number of uncovered elements as the more significant portion with the number of the chromosome cost as the less significant portion and outputting concatenated numbers as a total cost.</p>
    <p num="197">An operation of the fitness function circuit 110 is now described with reference to FIGS. 25 through 28.</p>
    <p num="198">
      The function of the matrix circuit 115 is to output column signals of covered chips by the respective rows of an n-bit chromosome as FIG. 28 illustrates.
      <br/>
      An input row signal is changed to a column signal at a cross circuit 122 and inputted to the OR gate 121.
      <br/>
      An output set of column signals from the OR gates 121 forms a coverage vector shown in FIG. 25. The carry-save-adder 131 for column signal counts the bit number of 1s in the coverage vector.
      <br/>
      The subtractor 132 calculates a difference between the number of covered columns outputted from the carry-save-adder 131 and the number (10) of all elements and outputs the difference as the number of uncovered elements to the aggregate cost register 134.
      <br/>
      The carry-save-adder 133 for chromosome cost sums the bit values of ls in an n-bit chromosome and outputs an added value to the aggregate cost register 134 as the chromosome cost.
      <br/>
      The aggregate cost register 134 retains the total cost including the number of uncovered elements as the more significant portion and the chromosome cost outputted from the carry-save-adder 133 for chromosome cost as the less significant portion.
      <br/>
      The inverter 112 inverts the value of the total cost retained in the aggregate cost register 134.
      <br/>
      This inversion is the calculation of 1's complement, i.e., each bit value is simply inverted.
      <br/>
      This causes the most significant four bits to be all is when all columns are covered.
      <br/>
      The less significant three bits, indicating the 1's complement of the number of 1-bits in the chromosome, increase their values when the chromosome cost is smaller.
    </p>
    <p num="199">FIG. 29 shows a table of an operation of the fitness function circuit 110 using the three trails of FIG. 25.</p>
    <p num="200">
      With trial-a, the number of covered elements outputted from the carry-save-adder 131 for column signal is 4.
      <br/>
      The number of uncovered elements outputted from the subtractor 132 is 6.
      <br/>
      The chromosome cost outputted from the carry-save-adder 133 for chromosome cost is 2.
      <br/>
      Thus, the total cost retained in the aggregate cost register 134 is 0110010.
      <br/>
      The total cost is inverted in the inverter 112 to 1001101 (77 in decimal number), which is outputted as the fitness value of chromosome trial-a.
      <br/>
      Similarly, the fitness values 123 and 124 in decimal number respectively of chromosomes trial-b and trial-c are outputted.
      <br/>
      This shows that the more-fit chromosome is trial-c having the highest fitness value of the three.
    </p>
    <p num="201">FIG. 30 shows an alternative fitness function circuit 110a to the fitness function circuit 110 of FIG. 26.</p>
    <p num="202">
      The fitness function circuit 110a is characterized by the column signal counter 116a outputting the number of covered elements, which is different from the fitness function circuit 110 in that the number of uncovered elements is outputted from the column signal counter 116.
      <br/>
      The fitness function circuit 110a outputs an output of the carry-save-adder 131 for column signal straight to the aggregate cost register 134.
      <br/>
      The aggregate cost register 134 receives an inverted value of an output from the chromosome cost calculator 114.
      <br/>
      The chromosome cost outputted from the carry-save-adder 133 for chromosome cost is inverted by an inverter 176 before being inputted to the aggregate cost register 134.
      <br/>
      Consequently, the aggregate cost register 134 outputs the fitness value directly.
      <br/>
      In this case, no inversion is required with an output value from the aggregate cost register 134.
    </p>
    <p num="203">FIG. 31 shows another alternative fitness function circuit 110b to the fitness function circuit 110.</p>
    <p num="204">The fitness function circuit 110b is designed to compute fitness in such a situation that all rows do not have the same cost.</p>
    <p num="205">
      The fitness function circuit 110b employs the uncovered element counter 113 of FIG. 26 and a chromosome cost calculator 114a.
      <br/>
      The chromosome cost calculator 114a includes a plurality of multiplexers 174 and an adder 175.
      <br/>
      The chromosome cost calculator 114a calculates a chromosome cost with different cost values c1 through cn corresponding to tests 1 through n. The multiplexers 174 selects either of input 0 and input 1 based upon the bit value of the n-bit chromosome.
      <br/>
      When a bit value in the chromosome is a 1, the cost is selected and a value 1 is outputted.
      <br/>
      The adder 175 sums 1s outputted from the multiplexers 174 and outputs a summed value to the aggregate cost register 134.
      <br/>
      The following operations are similar to those discussed with reference to FIG. 26 and will not be reiterated here.
    </p>
    <p num="206">
      The invention being thus described, it will be obvious that the same may be varied in many ways.
      <br/>
      Such variations are not to be regarded as a departure from the spirit and scope of the invention, and all such modifications as would be obvious to one skilled in the art are intended to be included within the scope of the following claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A fitness function circuit for an execution of a genetic algorithm (GA), said fitness function circuit inputting a chromosome having n bits and outputting a fitness value of the chromosome, said fitness function circuit comprising:</claim-text>
      <claim-text>a hardware circuit for calculating a number of elements covered by the chromosome inputted, said chromosome selected from a population memory comprising a plurality of chromosomes, and calculating the fitness value of the chromosome based upon a calculated number of covered elements, such that all cromosomes in said population memory are evolved into legal solutions, wherein said hardware circuit includes an aggregate cost calculator for calculating a total cost of the chromosome, said aggregate cost calculator including an aggregate cost register for concatenating and then retaining the number of uncovered elements as a more significant portion and the chromosome cost as a less significant portion and outputting a concatenated value as the total cost.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The fitness function circuit of claim 1, wherein said hardware circuit further includes an inverter for inverting a value of the total cost and outputting an inverted value of the total cost as the fitness value of the chromosome.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The fitness function circuit of claim 2, wherein said aggregate cost calculator includes, an uncovered element counter for counting a number of uncovered elements by the chromosome, and a chromosome cost calculator for calculating a chromosome cost of the chromosome.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The fitness function circuit of claim 3, wherein the fitness value of the chromosome is calculated with the number of the uncovered elements prioritized over the chromosome cost.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The fitness finction circuit of claim 4, wherein said uncovered element counter includes a matrix circuit having a matrix of order n (rows) x e (columns), said matrix circuit inputting, to each of said rows, a row signal representing a bit in the n bits of the chromosome and outputting, from each of said columns, a column signal for distinguishing an element corresponding to the column between covered and uncovered by said row signals.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The fitness function circuit of claim 5, wherein said uncovered element counter further includes a column signal counter for inputting column signals outputted from said matrix circuit, counting a number of valid column signals, and outputting a counted number as the number of uncovered elements.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The fitness function circuit of claim 6, wherein said matrix circuit includes cross circuits for validating the column signal corresponding to an element covered by a bit in the chromosome corresponding to the row signal when the row signal is valid.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The fitness function circuit of claim 7, wherein said cross circuit validates the column signal by outputting a valid row signal as the column signal, wherein the matrix circuit further includes OR gates coupled to the respective columns for inputting the column signals outputted by said cross circuits.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The fitness function circuit of claim 6, wherein said column signal counter includes a first carry-save-adder for inputting the column signals and counting a number of valid column signals.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The fitness function circuit of claim 9, wherein said column signal counter further includes a subtractor for calculating a difference between the number of valid column signals and a number of elements and outputting the number of uncovered elements.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The fitness function circuit of claim 10, wherein said chromosome cost calculator includes a second carry-save-adder for inputting the row signals and outputting a number of valid row signals.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The fitness finction circuit of claim 2, wherein said inverter outputs said fitness value by inverting each bit of said total cost.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The fitness function circuit of claim 1, wherein the fitness value is calculated as a solution to a set covering problem.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The fitness function circuit of claim 1, wherein said fitness function circuit is mounted on a GA machine for implementing a GA using the chromosome having n bits representing a potential problem solution, wherein said GA machine includes, said population memory for storing a population of chromosomes and respective fitness values, a selector for selecting a parent chromosome from among the chromosomes in the population, a crossover module for performing a crossover operation on the parent chromosome and creating a child chromosome, a mutation operator for mutating the child chromosome, a mount wherein said fitness function circuit for evaluating a fitness of the mutated chromosome and outputting a fitness value, and a survival comparator for determining a survival of the mutated chromosome based upon the fitness value, wherein the population memory, selector, crossover module, mutation operator, and survival comparator are respectively implemented by general-purpose circuits which can be used for non-specific problems, and configures a framework of said GA machine through a hardware-based implementation, wherein said GA machine becomes a problem-specific genetic algorithm machine when said fitness function circuit is mounted on said mount.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The fitness function circuit of claim 14, wherein said selector selects said parent chromosome at random from among all the chromosomes in the population memory.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The fitness function circuit of claim 14, wherein said crossover module comprises: a crossover template generator for generating a base serial pattern of a crossover template; a crossover template shift register for inputting the serial pattern, shifing the pattern bit by bit, and outputting an n-bit crossover template;</claim-text>
      <claim-text>and at least one multiplexor for performing the crossover operation on the parent chromosome based upon the n-bit crossover template.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The fitness function circuit of claim 16, wherein said crossover module comprises a circuit for generating a cutpoint pattern in the crossover template in case of no cutpoints provided in the template.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The fitness function circuit of claim 14, wherein said mutation operator performs mutation on all bits in the child chromosome independently, probabilistically and in parallel with one another.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The fitness function circuit of claim 14, wherein said population memory stores parent chromosomes and surviving mutated chromosomes.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The fitness function circuit of claim 14, wherein said survivor comparator determines that a mutated chromosome will survive when it is more fit than a current least-fit chromosome, and wherein the surviving mutated chromosome is transferred into said population memory.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The fitness function circuit of claim 14, wherein said population memory, said selector, said crossover module, said mutation operator, said fitness function circuit, and said survival comparator are designed to operate in synchronization with a machine cycle to accelerate the execution speed of said GA machine.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A fitness function circuit for an execution of a genetic algorithm (GA), said fitness function circuit inputting a chromosome having n bits and outputting a fitness value of the chromosome, said fitness function circuit comprising: a hardware circuit for calculating a number of elements covered by the chromosome inputted, and calculating the fitness value of the chromosome based upon a calculated number of covered elements, said hardware circuit including an aggregate cost calculator for calculating the fitness value of the chromosome and wherein said aggregate cost calculator includes</claim-text>
      <claim-text>- a chromosome cost calculator for calculating a chromosome cost of the chromosome; - an inverter for receiving an output from said chromosome cost calculator and outputting an inverted chromosome cost value;</claim-text>
      <claim-text>and - an aggregate cost register for concatenating and then retaining the number of covered elements as a more significant portion and the inverted chromosome cost value as a less significant portion and outputting a concatenated value as the fitness value.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The fitness function circuit of claim 22, wherein said aggregate cost calculator further includes a covered element counter for counting a number of covered elements by the chromosome.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The fitness function circuit of claim 23, wherein said covered element counter includes a matrix circuit having a matrix of order n (rows) x e (columns), said matrix circuit inputting, to each of said rows, a row signal representing a bit in the n bits of the chromosome and outputting, from each of said columns, a column signal for distinguishing an element corresponding to the column between covered and uncovered by said row signals.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The fitness function of claim 24, wherein said covered element counter further includes a column signal counter for inputting column signals outputted from said matrix circuit, counting a number of valid column signals, and outputting a counted number as the number of covered elements.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The fitness function of claim 25, wherein said column signal counter includes a first carry-save-adder for inputting the column signals and counting a number of valid column signals.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The fitness function of claim 26, wherein said chromosome cost calculator includes a second carry-save-adder for inputting the row signals and outputting a number of valid row signals.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The fitness function circuit of claim 22, wherein said fitness function circuit is mounted on a GA machine for implementing a GA using the chromosome having n bits representing a potential problem solution, wherein said GA machine includes, a population memory for storing a population of chromosomes and respective fitness values, a selector for selecting a parent chromosome from among the chromosomes in the population, a crossover module for performing a crossover operation on the parent chromosome and creating a child chromosome, a mutation operator for mutating the child chromosome, a mount wherein said fitness finction circuit for evaluating a fitness of the mutated chromosome and outputting a fitness value, and a survival comparator for determining a survival of the mutated chromosome based upon the fitness value, wherein the population memory, selector, crossover module, mutation operator, and survival comparator are respectively implemented by general-purpose circuits which can be used for non-specific problems, and configures a framework of said GA machine through a hardware-based implementation, wherein said GA machine becomes a problem-specific genetic algorithm machine when said fitness fuinction circuit is mounted on said mount.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. A fitness function circuit for an execution of a genetic algorithm (GA), said fitness function circuit inputting a chromosome having n bits and outputting a fitness of the chromosome, said fitness function circuit comprising: a hardware circuit, which assigns an even cost to each of the n bits, for counting a number of elements covered by the chromosome inputted, counting a number of valid bits of the n bits and deciding the fitness of the chromosome by inverting a counted number of covered elements and a counted number of valid bits, wherein said hardware circuit includes an aggregate cost calculator for calculating a total cost of the chromosome, and said aggregate cost calculator includes a chromosome cost calculator for calculating a chromosome cost of the chromosome; an inverter for receiving an output from said chromosome cost calculator and outputting an inverted chromosome cost value;</claim-text>
      <claim-text>and an aggregate cost register for concatenating and then retaining the number of covered elements as a more significant portion and the inverted chromosome cost value as a less significant portion and outputting a concatenated value as the fitness value.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. A fitness function circuit for an execution of a genetic algorithm (GA), said fitness function circuit inputting a chromosome having n bits and outputting a fitness of the chromosome, said fitness function circuit comprising: a hardware circuit for calculating a number of elements covered by the chromosome inputted, and calculating the fitness of the chromosome based upon a calculated number of covered elements, wherein said hardware circuit includes an aggregate cost calculator for calculating a total cost of the chromosome, and said aggregate cost calculator includes - a chromosome cost calculator for calculating a chromosome cost of the chromosome; - an inverter for receiving an output from said chromosome cost calculator and outputting an inverted chromosome cost value;</claim-text>
      <claim-text>and - an aggregate cost register for concatenating and then retaining the number of covered elements as a more significant portion and the inverted chromosome cost value as a less significant portion and outputting a concatenated value as the fitness value and wherein the hardware circuit is mounted on a mount to work with a non-problem-specific general purpose hardware circuit to form a problem-specific GA machine.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. A fitness function circuit for an execution of a genetic algorithm (GA), said fitness function circuit inputting a chromosome having n bits and outputting a fitness value of the chromosome, said fitness function circuit comprising: a hardware circuit for calculating a number of elements covered by the chromosome inputted, and calculating the fitness value of the chromosome based upon a calculated number of covered elements, wherein said hardware circuit includes an aggregate cost calculator for calculating a total cost of the chromosome, and wherein said aggregate cost calculator includes, - a covered element counter for counting a number of covered elements by the chromosome, and - a chromosome cost calculator for calculating a chromosome cost of the chromosome, wherein said covered element counter includes a matrix circuit having a matrix of order n (rows) x e (columns), said matrix circuit inputting, to each of said rows, a row signal representing a bit in the n bits of the chromosome and outputting, from each of said columns, a column signal for distinguishing an element corresponding to the column between covered and uncovered by said row signals, and a column signal counter for inputting column signals outputted from said matrix circuit, counting a number of valid column signals, and outputting a counted number as the number of covered elements, wherein said column signal counter includes a first carry-save-adder for inputting the column signals and counting a number of valid column signals, wherein said chromosome cost calculator includes a second carry-save-adder for inputting the row signals and outputting a member of valid row signals, and wherein said aggregate cost calculator includes - an inverter for receiving an output from said second carry-save-adder of said chromosome cost calculator and outputting an inverted chromosome cost value, and - an aggregate cost register for concatenating and then retaining the number of covered elements as a more significant portion and the inverted chromosome cost value as a less significant portion and outputting a concatenated value as the total cost.</claim-text>
    </claim>
  </claims>
</questel-patent-document>