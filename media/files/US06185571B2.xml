<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185571B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185571</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185571</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="46255948" extended-family-id="42058612">
      <document-id>
        <country>US</country>
        <doc-number>09062216</doc-number>
        <kind>A</kind>
        <date>19980417</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09062216</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43096395</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>6221698</doc-number>
        <kind>A</kind>
        <date>19980417</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09062216</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>89944497</doc-number>
        <kind>A</kind>
        <date>19970723</date>
        <priority-linkage-type>2</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-08899444</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   9/44        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>44</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>717124000</text>
        <class>717</class>
        <subclass>124000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>707999003</text>
        <class>707</class>
        <subclass>999003</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707999006</text>
        <class>707</class>
        <subclass>999006</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>707999101</text>
        <class>707</class>
        <subclass>999101</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>717141000</text>
        <class>717</class>
        <subclass>141000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-008/78</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>78</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99933</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99933</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99936</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99936</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99942</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99942</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>16</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>2</number-of-drawing-sheets>
      <number-of-figures>2</number-of-figures>
      <image-key data-format="questel">US6185571</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Compiler-assisted or interpreter-assisted solution to the year 2000 problem with flagging option for computer programs</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>EISEN IVAN R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5307498</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5307498</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>ALTER HARVEY</text>
          <document-id>
            <country>US</country>
            <doc-number>5600836</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5600836</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>CANADY DENNIS MARK, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5742828</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5742828</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>BRADY JAMES T</text>
          <document-id>
            <country>US</country>
            <doc-number>5758336</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5758336</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>BAIRD WILLIAM J</text>
          <document-id>
            <country>US</country>
            <doc-number>5758346</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5758346</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>MASIELLO JOSEPH A</text>
          <document-id>
            <country>US</country>
            <doc-number>5765145</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5765145</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>BURGESS ALLEN G</text>
          <document-id>
            <country>US</country>
            <doc-number>5808889</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5808889</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>NOLAN DANIEL A</text>
          <document-id>
            <country>US</country>
            <doc-number>5809500</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5809500</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>ALTER HARVEY</text>
          <document-id>
            <country>US</country>
            <doc-number>5835909</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5835909</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>COLIZZA VINCENT</text>
          <document-id>
            <country>US</country>
            <doc-number>5845286</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5845286</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>BROWN ROGER W</text>
          <document-id>
            <country>US</country>
            <doc-number>5852824</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5852824</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>ROTH YEHUDA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5878422</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5878422</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>NOLAN DANIEL A</text>
          <document-id>
            <country>US</country>
            <doc-number>5897633</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5897633</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>FRIDMAN NATALIO S</text>
          <document-id>
            <country>US</country>
            <doc-number>5926814</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5926814</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>BIELER ROMAN</text>
          <document-id>
            <country>US</country>
            <doc-number>5930506</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5930506</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="16">
          <text>SHAUGHNESSY DANIEL P</text>
          <document-id>
            <country>US</country>
            <doc-number>5930782</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5930782</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="17">
          <text>BEAM WILLIAM N</text>
          <document-id>
            <country>US</country>
            <doc-number>5950197</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5950197</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="18">
          <text>NICHOLAS RONALD M</text>
          <document-id>
            <country>US</country>
            <doc-number>5956510</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5956510</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="19">
          <text>CARTER WILLIAM AUGUSTUS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6002873</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6002873</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="20">
          <text>NILSEN KELVIN D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6081665</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6081665</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="21">
          <text>SHAUGHNESSY DANIEL P</text>
          <document-id>
            <country>US</country>
            <doc-number>5630118</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5630118</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="22">
          <text>SOEDER THOMAS B</text>
          <document-id>
            <country>US</country>
            <doc-number>5644762</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5644762</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="23">
          <text>RICOH KK</text>
          <document-id>
            <country>JP</country>
            <doc-number>H0351894</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP03051894</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="24">
          <text>EZEL INC</text>
          <document-id>
            <country>JP</country>
            <doc-number>H03177982</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP03177982</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="25">
          <text>HITACHI LTD, et al</text>
          <document-id>
            <country>JP</country>
            <doc-number>H086925</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP08006925</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Millennium Dynamics, Inc. (MDI), "Vantage YR2000, Summary of Products and Services", 580 Walnut Street, Cincinnati, Ohio 45202, Aug. 31, 1995, pp. 1-10.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Eaken, Wanda et al., "Year 2000 Impact on Automated Testing", IEEE Aerospace and Electronics Systems Magazine, Jul. 1999, vol. 14, Issue 7, pp. 5-8.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>Schumacher, Martin, "Year 2000, Y2K, millennium bug", IEEE Power Engineering Society Summer Meeting, Jul. 18-22, 1999, vol. 2, pp. 971-975.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="4">
          <text>Sellink, Alex et al., "Generation of Software Renovation Factories from Compilers", Proceedings of the IEEE International Conference on Software Maintenance, 1999. (ICSM '99), Aug. 30-Sep. 3, 1999, pp. 245-255.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>News Release: MatriDigm(TM) Corporation, 1999 Broadway, Suite 3900, Denver, CO 80202, Tel: 303, 383-7600, http://www.matridigmusa.com, "MatriDigm(TM) Announces Key Patent Filings," 3 pp., Oct. 29, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>Brochure: Millennium Dynamics, Inc., 580 Walnut Street, P. O. Box 2575, Cincinnati, Ohio 45202, "Vantage YR2000(TM), Summary of Products and Services", pp., 1-10 (undated).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="7">
          <text>Brochure: Micro Focus, 2465 East Bayshore Road, Palo Alto, CA 94303, Tel.: 800/872-6265, "Micro Focus Challenge 2000", 6 pp., 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="8">
          <text>Teodoro, Dr. Emma, President, STA Inc., "Automated Year 2000 Conversion of COBOL Programs", pp. 1-27 (undated).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="9">
          <text>Brochure: STA America, 790 San Mateo Drive, San Mateo, C A 94401, Tel. 415-6851-1900, www.staa.com, "FIELDEX: The Indispensable Time &amp; Money Saving Software Tool For Century Change Projects", 8 pp. 1997-2000.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="10">
          <text>Brochure: Data Integrity, Inc., 228 Highland Avenue, West Newton, MA 02165, Tel: 617/964-1977, "Solutions for year 2000 computing problems", 6 pp. (undated).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="11">
          <text>Brochure: Prepared by Marilyn Frankel (Edge Information Group, 1218 Old Country Road, Elmsford, New York 10523, Tel.: 914/592-3145, e-mail: mfrankel@edge-information.com) and Carl Gehr, (Edge Information Group, 8556 Wyoming Club Drive, Cincinnati, OH 45215-4243, Tel: 513-948-8906, e-mail cgehr@edge-information.com., "Guide International Survey of Year 2000 Tools", pp. I-viii, 1-107, Apr. 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="12">
          <text>Cayenne Software's Cayenne 2000 and Intersolv's "Manage2000", pp. 1-7, Dec. 1996, Dialog database.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="13">
          <text>"Seec Inc. of US Launches Year 2000 Software in India" Newsbytes, pNEW 1029004, Oct. 29, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="14">
          <text>Deborah Schwartz, "DB-Net moves into the new millennium," HP Professional, vol. 10, No. 7, pp. 22(1) Jul. 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="15">
          <text>Kathleen Golden, "The millennium mess (Year 2000 conversion project)" Wall Street &amp; Technology, vol. 14, No. 1, p. 50(2), Jan. 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="16">
          <text>Edmund C. Arranga, "Countdown To The Year 2000-Object-oriented Cobol may help solve the legacy problem that programmers will face in the coming millennium," Informationweek, No. 588, PGAD08, pp. 1-5, Jul. 15, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="17">
          <text>C. Lawrence Meador, "Technology Overview-Solving The Year 2000 Problem-Various products and services can help you plan and manage the project" Informationweek, No. 565, PG44, pp. 1-6, Feb. 5, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="18">
          <text>Robert L. Scheier, "Everybody knows about the year 2000 problem, but The Equitable decided to . . . " Computerworld, p. 83, Mar. 25, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="19">
          <text>"Year 2000 Software Solution Patent Application Filed by International Veronex Resources" Newswire, filed by International Veronex Resources, pp. 1-3, Aug. 13, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="20">
          <text>"B-Tree Systems (TM) Inc. Answers Year 2000 Problem for Embedded Applications," Newswire, pp. 4-6, Aug. 11, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="21">
          <text>"MCI Systemhouse Aligns With Intersolv to Extend Comprehensive Year 2000 Solutions for Business," Newswire, pp. 7-9, Aug. 4, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="22">
          <text>"EDS Offers solutions to Y2K conversion," PC Week, vol. 14, No. 31, pp. 88(1), Jul. 21, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="23">
          <text>"Reasoning partners with EDS to provide comprehensive Year 2000 solutions and services; Reasoning expands global alliances and delivers second-generation Year 2000 solutions for EDS' growing Year 2000 business" Newswire, pp. 14-16, Jun. 23, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="24">
          <text>Ted S. Bowen, et al., "Tool Vendors Search For Ways To East Year-2000 Solutions At Software Productivity Group Year-2000 Conference," InfoWorld, vol. 18, No. 26, p. 43(2), Jun. 30, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="25">
          <text>"CA Announces CA-FIX/2000 To Provide Automated Remediation Of COBOL Applications For New Millenium," Business Wire, pp. 17-19, Jun. 23, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="26">
          <text>"Computer Horizons Now Offers Licenses Independent of Services for Signautre 2000 Software Toolset," Business Wire, pp. 20-22, Jun. 26, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="27">
          <text>"NeoMedia Adds Year 2000 Tools for IBM VSE Market," Business Wire, pp. 23-25, Jun. 13, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="28">
          <text>"NeoMedia Opens European Office to Market Year 2000 Legacy Products," Business Wire, pp. 26-27, Jun. 30, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="29">
          <text>Gary M. Ross, "Management Issues For Year 2000 System Conversions," Enterprise Systems Journal, vol. 12, No. 4, p. 22(5), Apr. 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="30">
          <text>Fred Schuff, "Year 2000 Analysis: Gaining Maximum Value From The Process," Enterprise Systems Journal, vol. 12, No. 3, p. 8(7) Mar. 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="31">
          <text>Research Disclosure: Derwent Info Ltd, Disclosed anonymously, "Date Adjustment at Turn of Century", 2 pp., May, 1980.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation-in-part>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>89944497</doc-number>
              <kind>A</kind>
              <date>19970723</date>
            </document-id>
          </parent-doc>
        </relation>
      </continuation-in-part>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Carter, William Augustus</name>
            <address>
              <address-1>Georgetown, KY, US</address-1>
              <city>Georgetown</city>
              <state>KY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Elderon, Alan Roeder</name>
            <address>
              <address-1>Mountain View, CA, US</address-1>
              <city>Mountain View</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Magee, Timothy David</name>
            <address>
              <address-1>Lexington, KY, US</address-1>
              <city>Lexington</city>
              <state>KY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Nicholas, Mark David</name>
            <address>
              <address-1>Georgetown, KY, US</address-1>
              <city>Georgetown</city>
              <state>KY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Saade, Henry Y.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="6">
          <addressbook lang="en">
            <name>Sutherland, Grant</name>
            <address>
              <address-1>Cottesloe, AU</address-1>
              <city>Cottesloe</city>
              <country>AU</country>
            </address>
          </addressbook>
          <nationality>
            <country>AU</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="7">
          <addressbook lang="en">
            <name>Tindall, William Nicholas John</name>
            <address>
              <address-1>San Martin, CA, US</address-1>
              <city>San Martin</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="8">
          <addressbook lang="en">
            <name>Urs, Jeffrey Ramesh</name>
            <address>
              <address-1>Nicholasville, KY, US</address-1>
              <city>Nicholasville</city>
              <state>KY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="9">
          <addressbook lang="en">
            <name>Weinmann, Timothy Edward</name>
            <address>
              <address-1>Lexington, KY, US</address-1>
              <city>Lexington</city>
              <state>KY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="10">
          <addressbook lang="en">
            <name>Wheatley, Michael Thomas</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Pretty &amp; Schroeder, P.C.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Amsbury, Wayne</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method, apparatus, and article for solving the year 2000 problem involves limited modifications in the data definition portions of the source code and compiler support for processing the modified source code.
      <br/>
      Fields in the source code that contain a year or date values are identified and, for each such field, the user selects an appropriate technique (for example, expansion, compression or windowing).
      <br/>
      The user modifies the data definition for each identified field, by adding new attributes to request the selected technique.
      <br/>
      The user then compiles the program and resolves any ambiguous references to the variables whose definitions were modified.
      <br/>
      This procedure is applied, module by module, and each processed module is merged into production, after testing, by using a compiler option to disable the use of the new attributes.
      <br/>
      A compiler option provides for the generation of debugger hooks for each statement that has been affected by modified declarations, which may be used with a suitably equipped debugger or other run-time analysis tool.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>CONTINUATION</heading>
    <p num="1">
      This invention is a Continuation-In-Part (CIP) of co-pending, commonly-assigned patent application, with application Ser.
      <br/>
      No. 08/899,444, entitled "COMPILER-ASSISTED SOLUTION TO THE YEAR 2000 PROBLEM FOR COMPUTER PROGRAMS," filed on Jul. 23, 1997, by William A. Carter, et al., and the contents of this application are incorporated by reference herein.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="3">The present invention relates generally to computer-implemented compilers or interpreters for high-level programming languages and their associated run-time environments, and in preferred embodiments, to a computer-implemented method, apparatus, and article of manufacture for solving the Year 2000 problem using a compiler or interpreter.</p>
    <p num="4">2. Description of the Related Art</p>
    <p num="5">
      Computer systems used in various processing applications, such as, for example, processing insurance information, account information, inventory information, investment information, retirement information, as well as many other applications, often operate with records and data containing date-dependent information.
      <br/>
      In many computing systems, date information relating to years has typically been represented applications, often operate with records and data containing date-dependent information.
      <br/>
      In many computing systems, date information relating to years has typically been represented in two-digit year formats, where two digits represent a year between 1900 and 1999.
      <br/>
      Thus, for example, the two digits "97" would represent the year 1997.
      <br/>
      Popular usage of this simplified date information format throughout the computer industry has resulted in an industry-recognized problem, often referred to as "the year 2000 problem."
    </p>
    <p num="6">
      More specifically, as a result of this simplification of date information, upon the turn of the century (i.e., upon the year 2000), two-digit year information intended to represent a year within the 21st century will, instead, be indistinguishable by computer systems from a year within the 20th century (i.e., between 1900 and 1999).
      <br/>
      Thus, for example, a two-digit year value of "08" which is intended to represent the year 2008 will be indistinguishable from the year 1908 by such computer systems.
    </p>
    <p num="7">
      Various solutions to the "year 2000 problem" have been suggested.
      <br/>
      However, previously proposed manners of implementing such solutions have been tedious, expensive and error-prone, rendering such implementations economically impractical in many contexts.
    </p>
    <p num="8">
      For example, three widely recognized techniques to address the year 2000 problem are: expansion, windowing, and compression.
      <br/>
      The expansion technique, in general, involves a conversion of 2-digit years to 4-digit years.
      <br/>
      This solves the problem of ambiguity.
      <br/>
      However, because the size of the field is larger after expansion, prior proposals to implement this technique have required modifications to application logic, data files, and databases, etc. (including backup copies).
      <br/>
      In addition, processing routines involving date information would have to be rewritten to accommodate four-digit year data.
      <br/>
      The costs and conversion time associated with such modifications can eliminate this as a practical option.
    </p>
    <p num="9">
      According to the windowing technique, a 2-digit year field is interpreted as a year within a 100 year window of time.
      <br/>
      In the past, the year values, ranging from 0 to 99, were interpreted within the 100 year window of 1900 to 1999.
      <br/>
      The windowing technique simply allows the programmer to specify a window with a set of values different than from 1900 to 1999, for example, from 1960 to 2059.
      <br/>
      In the simple form of this technique, a single window is used for all windowed items in the executable module.
    </p>
    <p num="10">
      In addition to this "single" window technique, multiple windows may be supported by allowing different window values to be defined for each program variable in the source module.
      <br/>
      For example, values representing birth dates ranging from 1920 to the present may coexist in a module with values representing retirement dates ranging from 1960 to 2059.
      <br/>
      Multiple windows provide a significant additional capability in terms of flexibility and power.
    </p>
    <p num="11">
      This fixed windowing technique can be extended to a "sliding" window concept.
      <br/>
      In this implementation, the window is defined as an offset from the current year.
      <br/>
      For example, an item could be defined as windowed from 30 years prior to the current year to 69 years after the current year so that in 1997 the window would be from 1967 to 2066.
      <br/>
      Another windowing technique involves a "variable window" which may be changed each time a program is run, rather than fixed when the program is compiled.
      <br/>
      Windowing does not require changes to date data in databases and in other recorded media.
      <br/>
      However, prior windowing proposals required changes to program logic (typically in source programs) which, in the past, was accomplished by modifying each instance in a source code in which date information is used.
      <br/>
      Tools, such as Vantage YR2000 (tm)  from Millennium Dynamics, FIELDEX (tm)  from STA America and 2000-Resolve (tm)  from Micro Focus, have been developed to help analyze and modify source code statements.
      <br/>
      However, such source code modifications tend to increase the complexity of the source code, make debugging operations more difficult and, in some cases, increase the propensity for errors.
    </p>
    <p num="12">
      According to compression techniques, values greater than 99 are stored in the same space previously used to store two-digit year values.
      <br/>
      One previous manner proposed for implementing this function involved changing the datatype, for example, from character to binary, thus allowing values as large as 32,767 in the same two-byte field.
      <br/>
      However, such prior proposals require changing all recorded data to the new datatype, as well as changing program data declarations and, in some cases, program logic.
      <br/>
      Procedures for effecting such changes can be relatively complex, time consuming and error prone.
    </p>
    <p num="13">Therefore, although techniques have been developed for addressing the year 2000 problem, there is still a need in the art for a method which allows the problem to be addressed in an economical and practical manner.</p>
    <p num="14">
      As discussed in more detail below, embodiments of the present invention relate to a manner of addressing the year 2000 problem, using a compiler.
      <br/>
      A compiler is a computer program that translates a source program into an equivalent object program.
      <br/>
      The source language is typically a high-level language like COBOL, PL/I, C++, and the object language is the assembly language or machine language of some computer.
      <br/>
      The translation of the source program into the object program occurs at compile time; the actual execution of the object program occurs at run-time.
    </p>
    <p num="15">
      A compiler must perform an analysis of the source program and then it must perform a synthesis of the object program, wherein it first decomposes the source program into its basic parts, and then builds the equivalent object program parts from the source program parts.
      <br/>
      As a source program is analyzed, information is obtained from declarations and procedural statements, such as loops and file I/O statements.
    </p>
    <p num="16">
      Compilers for the COBOL, PL/I, and C++ programming languages are well known in the art.
      <br/>
      In addition, run-time environments for COBOL, PL/I, or C++ based computer programs are also well known in the art.
    </p>
    <p num="17">
      Further embodiments of the present invention relate to a manner of addressing the year 2000 problem, using an interpreter, as opposed to a compiler.
      <br/>
      An interpreter is a program that interprets source code and, with the computer, performs computations directly, as opposed to a compiler that processes the source code and turns it into object or compiled code, that in turn performs computations when it is subsequently executed.
    </p>
    <heading>SUMMARY OF THE DISCLOSURE</heading>
    <p num="18">The present invention relates generally to a method, apparatus, and article of manufacture for solving the year 2000 problem using a compiler or interpreter, and computer systems employing the same.</p>
    <p num="19">It is an object of preferred embodiments of the present invention to provide such a method, apparatus, and article of manufacture, in which required modifications to the source code are minimized.</p>
    <p num="20">It is an object of further preferred embodiments to provide such a method, apparatus and article, which may utilize windowing, field expansion and compression techniques.</p>
    <p num="21">It is an object of yet further preferred embodiments to allow a flexible and comprehensive mixing of windowing, expansion and compression techniques within a program.</p>
    <p num="22">
      It is an object of yet further preferred embodiments to ease the implementation of the windowing, expansion and compression techniques by limiting, in the majority of cases, the modifications required in the source code to only modifications of data definition statements.
      <br/>
      These data definitions, suitably modified, make it possible in yet further preferred embodiments, for the compiler to generate the desired code, in most situations, and to flag ambiguous statements where they occur.
      <br/>
      In further preferred embodiments, the compiler flags every statement that has been affected by the modified definitions, to provide the programmer with additional information on the resulting changes and the ability to insert other directives, functions, or code modifications, if desired.
    </p>
    <p num="23">In yet further preferred embodiments, similar functions are performed by an interpreter that interprets the source code (or a tokenized form of the source code) and performs the computations requested by the source code modifications directly, as opposed to generating an object code that in turn performs the requested computations when it is subsequently executed.</p>
    <p num="24">
      It is an object of yet further preferred embodiments to provide a run-time analysis capability that can be used, in conjunction with a debugger or other run-time analysis tool, to track the actual run-time usage of data items whose definition has been modified to address the year 2000 problem.
      <br/>
      This analysis could be used to identify usage patterns, masks, etc. which may not be obvious from static analysis techniques.
    </p>
    <p num="25">It is an object of yet further embodiments to minimize the testing impact by minimizing user changes to program logic.</p>
    <p num="26">It is an object of yet further embodiments to provide the capability to convert existing code to be year 2000 capable, while, at the same time, maintaining and enhancing this code for normal day-to-day operations.</p>
    <p num="27">It is an object of yet further embodiments to provide a "disable" option, so that required changes can be made piecemeal, and disabled, so that the code may execute as it had prior to the conversion process, until conversion and testing is completed.</p>
    <p num="28">It is an object of yet further embodiments to provide a size error option, for handling events that involve storing year or date data that is larger than or otherwise incompatible with the field allotted for the data.</p>
    <p num="29">It is an object of yet further embodiments to provide an enhanced compiler or interpreter with a set of intrinsic functions (COBOL) or built-in functions (PL/I) which may be used by a programmer to resolve ambiguous statements or operate the program in a prescribed manner.</p>
    <p num="30">These and other objects are accomplished according to preferred embodiments, wherein a method, apparatus, and article of manufacture for solving the year 2000 problem involves limited source code modifications in the data definition portions of the code and compiler or interpreter support for processing the modified source code.</p>
    <p num="31">
      Minimizing the source code modifications to, primarily, data definitions statements (or declarations) can significantly reduce the cost, conversion time and error rate typically associated with the implementation of a year 2000 solution.
      <br/>
      Indeed, such limited source code modifications may be made with the aid of conventional analysis tools to identify fields in the source code that contain a year value.
      <br/>
      For each of these fields, the programmer selects an appropriate technique (for example, expansion or windowing).
      <br/>
      The data definition for each identified field is then modified, by adding new attributes to request the selected technique.
      <br/>
      The program is then compiled (or interpreted), using a set of desired compiler (or interpreter) options, and any ambiguous references to the variables whose definitions were modified in the previous step are identified and/or flagged.
    </p>
    <p num="32">In preferred embodiments, this process is applied on a module by module basis and each processed module is merged into production, after minimal testing, by using a compiler (or interpreter) option to disable the use of the new attributes.</p>
    <p num="33">
      In yet further preferred embodiments, additional run-time analysis may be conducted to validate the decisions and identify possible run-time conflicts.
      <br/>
      Thus, according to such preferred embodiments, a compiler (or interpreter) option provides for the generation of debug hooks for each statement that has been affected by the modifications to the data definition statements, thus allowing use of a debugger or other analysis tool at run-time to assist with run-time analysis and validation of the application.
    </p>
    <p num="34">In yet further preferred embodiments, a compiler (or interpreter) option allows the user to selectively enable or disable the new attributes, to test the modified program while disabling the new attributes, or to compile (or process with an interpreter) and test any executable with full Year 2000 support by enabling the use of the new attributes.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="35">
      Referring now to the drawings in which like reference numbers represent corresponding parts throughout:
      <br/>
      FIG. 1 is an exemplary hardware environment used to implement the preferred embodiment of the invention; and
      <br/>
      FIG. 2 is a flowchart that illustrates a general process for implementing a year 2000 solution in accordance with a preferred embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="36">
      In the following description, reference is made to the accompanying drawings which form a part hereof, and which are shown, by way of illustration, several embodiments of the present invention.
      <br/>
      It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.
    </p>
    <heading>OVERVIEW</heading>
    <p num="37">The present invention relates to a method, apparatus, and article of manufacture for solving the year 2000 problem in computer programs using, in preferred embodiments, compiler directives and options, decorated data definition statements, a set of intrinsic functions and a set of compiler and run-time library enhancements.</p>
    <heading>HARDWARE ENVIRONMENT</heading>
    <p num="38">
      FIG. 1 is an exemplary hardware environment used to implement preferred embodiments of the invention.
      <br/>
      Embodiments of the present invention may be implemented using a computer 100, which generally includes, inter alia, a processor 102, random access memory (RAM) 104, data storage devices 106 (e.g., hard, floppy, and/or CD-ROM disk drives, etc.), data communications devices 108 (e.g., modems, network interfaces, etc.), monitor 110 (e.g., CRT, LCD display, etc.), mouse pointing device 112 and keyboard 114.
      <br/>
      It is envisioned that, attached to the computer 100 may be other devices such as read only memory (ROM), a video card, bus interface, printers, etc.
      <br/>
      Those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with the computer 100.
    </p>
    <p num="39">
      The computer 100 usually operates under the control of an operating system 116, such as OS/2 (tm) , Windows95 (tm) , AIX (tm) , UNIX (tm) , DOS (tm) , MVS (tm)  etc. A preferred embodiment of the present invention is generally implemented using a compiler program 118 executed under the control of the operating system 116.
      <br/>
      In the preferred embodiment, the compiler 118 conforms to ANSI COBOL or PL/I language conventions, although those skilled in the art will recognize that the compiler 118 could also conform to other language conventions without departing from the scope of the present invention.
    </p>
    <p num="40">
      The compiler 118 performs an analysis of a source program 120 containing source code in the form of source language statements, wherein the source program 120 is generally stored in a text file on one or more of the data storage devices 106 or is read from one or more of the data communications devices 108 or is entered interactively by a programmer from the keyboard 114.
      <br/>
      The compiler 120 then synthesizes an object program 122 from the source language statements in the source program 120.
    </p>
    <p num="41">In yet further preferred embodiments, an interpreter is employed instead of a compiler, wherein the interpreter interprets the source code (or a tokenized form of the source code) and performs the computations requested in the source code and modified source code statements directly, as opposed to generating an object code that in turn performs the requested computations when it is subsequently executed.</p>
    <p num="42">
      As discussed in more detail below, according to preferred embodiments of the present invention, a programmer (or user) may use extensions built into standard language conventions to enter source language statements into the source program 120 that specify a solution to the year 2000 problem.
      <br/>
      In preferred embodiments, these source language extensions comprise extensions or modifications to certain data definition statements existing in the source program 120.
      <br/>
      These source language extensions, when recognized by the compiler 120, result in the generation of an object program 122 containing instructions for performing data comparisons and computations in a manner that avoids the year 2000 problem.
    </p>
    <p num="43">
      As described above, the source code may be processed in is accordance with further preferred embodiments of the invention, by an interpreter, as opposed to a compiler.
      <br/>
      Such further embodiments preferably function similar to compiler embodiments, except that an interpreter performs computations requested in the source code directly, rather than first converting the source code into object or compiled code that performs the requested computations when it is subsequently executed.
      <br/>
      However, for purposes of simplifying the present disclosure, embodiments are described herein primarily with reference to compiler-based systems.
      <br/>
      One skilled in the art will understand that, where appropriate, the descriptions herein relating to compiler systems, compiler options and compiler functions and operations are applicable to interpreter systems, options, functions and operations as well.
    </p>
    <p num="44">
      Generally, the operating system 116, compiler 118, source program 120, and object program 122, which contribute to the implementation of the preferred embodiment of the invention, are embodied in, or readable from, a computer-readable medium or carrier, e.g., one or more of the fixed and/or removable data storage data devices 106 and/or data communications devices 108 connected to the computer 100.
      <br/>
      Under control of operating system 116, the compiler 118, source program 120, and object program 122 may be loaded from the data storage devices 106 or data communications devices 108 into the memory 104 of computer 100.
      <br/>
      Further, the operating system 116, compiler 118, and object program 122 comprise instructions which, when read and executed by computer 100, cause the computer 100 to perform the steps necessary to execute the steps or elements of the present invention.
    </p>
    <p num="45">
      According to preferred embodiments of the present invention, certain data declaration statements for year data and date data fields in the source program 120 are configured to include extensions requesting a particular year 2000 solution technique.
      <br/>
      In addition, the compiler 118 is configured to process year values in date fields of the source code, in accordance with the technique requested by the extensions to the declaration statements.
      <br/>
      More specifically, the compiler 118 is configured to recognize such extensions to a declaration and generate an object program 122 containing instructions for performing operations on the data fields associated with the declaration, in the manner that employs the requested technique for avoiding the year 2000 problem.
      <br/>
      Thus, preferred embodiments involve both compiler configurations and source code configurations, either or both of which are preferably achieved by minimal modifications to existing source programs and compilers.
    </p>
    <p num="46">
      Those skilled in the art will recognize that the exemplary environment illustrated in FIG. 1 is not intended to limit the present invention.
      <br/>
      Indeed, those skilled in the art will recognize that other alternative hardware environments may be used without departing from the scope of the present invention.
    </p>
    <heading>SOURCE PROGRAM ENHANCEMENTS</heading>
    <p num="47">
      As noted above, embodiments of the present invention involve source code extensions to declaration statements which may be written as part of an original source program.
      <br/>
      However, in preferred embodiments, the source code configurations employed with the present invention involve minimal modifications to existing source programs made, for example, by a programmer, preferably using standard analysis and editing tools.
    </p>
    <p num="48">
      More specifically, certain data declaration statements in the source code are modified, using standard language conventions, to add extensions which specify a selected solution to the year 2000 problem.
      <br/>
      The selected solution may be, for example, any of the above-discussed windowing, compression or expansion techniques.
      <br/>
      However, other suitable techniques may be similarly specified.
      <br/>
      In preferred embodiments, no further modifications to the source code, and no modifications to the application logic or data files are typically necessary.
      <br/>
      Limiting the programmer-required modifications to, primarily, data definitions statements (or declarations) in the source code can minimize the complexity, cost, conversion time and error rate associated with the implementation of a year 2000 solution.
      <br/>
      Indeed, such limited source code modifications may be made with the aid of conventional analysis tools.
      <br/>
      In addition, the use of data definition statements renders it possible for the compiler to readily generate the desired code in most situations and flag ambiguous statements when they occur.
    </p>
    <p num="49">
      An example procedure for effecting such source code modifications in accordance with a preferred embodiment of the invention, is shown in FIG. 2.
      <br/>
      In particular, the procedure illustrated in FIG. 2 involves a step 200 of identifying the fields in the source code that contain year and date values.
      <br/>
      Preferably, this step is carried out by the programmer, using standard, conventional analysis tools, including, but not limited to the compiler 118.
    </p>
    <p num="50">
      In step 202, for each field identified in step 200, the programmer determines and selects an appropriate technique for addressing the year 2000 problem, such as expansion, windowing or compression.
      <br/>
      The selection may be based on the programmer's preference and/or may be dictated by the constraints of the program, hardware or environment of use.
    </p>
    <p num="51">
      Once an appropriate technique has been selected for a particular field, the programmer modifies the data declaration for that field.
      <br/>
      The modification involves "decorating" the declaration by the addition of new attributes to the data definition, to identify the type of date field and to request the selected technique.
      <br/>
      In this manner, as shown as step 204, the declaration statement associated with each field identified in step 200 is modified (or decorated) with new attributes associated with a selected technique, such as windowing, compression, expansion, etc.
    </p>
    <p num="52">
      Thereafter, as shown in step 206, the compiler 118 compiles the source program, with the modifications made thereto.
      <br/>
      Any ambiguous references may be resolved at this stage.
      <br/>
      For example, during compilation, the compiler 118 identifies potential ambiguities relating to date fields, such as, for example, comparisons, additions or multiplications of date field information with information or values that are not date fields.
    </p>
    <p num="53">
      In preferred embodiments, the compiler 118 includes a routine or set of preset rules for identifying such potential ambiguities and, upon identification, for notifying the programmer of such potential ambiguities (e.g., using the monitor 110 or other suitable visual or audible means).
      <br/>
      In further preferred embodiments, the compiler 118 makes assumptions and modifications relating to the potential ambiguities based on the preset rules.
    </p>
    <p num="54">
      The step of notifying the programmer of the potential ambiguities allows the programmer to make further appropriate modifications to the related field, if necessary, to resolve the ambiguity.
      <br/>
      Alternatively, the programmer may determine that the potentially ambiguous statement (or an assumption and modification made by the compiler 118) is, actually, proper and, therefore, may choose to ignore the compiler's potential ambiguity notification.
      <br/>
      In typical applications, the number of potential ambiguities should be minimal.
      <br/>
      Thus, in preferred embodiments, an additional set of intrinsic functions (or built-in functions) along with the compiler, may be used by the programmer to facilitate corrections of ambiguous or erroneous statements.
    </p>
    <p num="55">Once the potential ambiguities are resolved (or ignored) pursuant to step 206, the source program 120 may then be tested (step 208) and moved into production in its normal operating environment (step 210).</p>
    <p num="56">
      The compiler preferably provides facilities, controlled by a compiler option, to flag not only ambiguous statements, but all statements that have been affected by the source code modifications made in accordance with the present process.
      <br/>
      More specifically, according to such further embodiments, a compiler option is provided to request the generation of informational, warning, and/or error messages for each source statement affected by the addition of new attributes to the data declaration statements made in accordance with the present process.
      <br/>
      These messages provide the programmer with additional information useful in understanding the effects of modifications made to the program.
    </p>
    <p num="57">
      The testing step 208 (or, alternatively, the compile and resolve step 206) may include an analysis process carried out with the use of debugger hooks, or the like, inserted by the compiler into the generated code, to allow user-verification of all affected statements in the source code.
      <br/>
      The compiled program with debugger hooks inserted may be run in conjunction with a debugger or other run-time analysis tool to facilitate testing.
    </p>
    <p num="58">
      The testing step 208 may involve additional run-time analysis to validate the decisions and identify possible run-time conflicts.
      <br/>
      For example, if it is known that a particular variable uses a particular value as a flag, run-time analysis can be done to check for places where the variable is compared to this value or set to this value when the value is not a constant but is contained in another variable.
    </p>
    <p num="59">
      In preferred embodiments, the process of FIG. 2 is conducted on a source program 120 (FIG. 1), on a module-by-module basis.
      <br/>
      For example, a source program may be composed of a plurality of modules, and the modules may be processed, one at a time, in any desirable sequence.
      <br/>
      In such an embodiment, for each module, step 210 involves merging the module back into the source program, after processing and testing of the module in accordance with steps 200-208.
    </p>
    <p num="60">
      Moreover, in further preferred embodiments the compiler is provided with a disabling option which allows a programmer to disable the use of the new attributes added in step 206.
      <br/>
      In accordance with such embodiments, each module may be modified and tested individually as noted above, and then the program may be recompiled with the disable compiler option to disable the use of the new attributes.
      <br/>
      As each module is processed, it may then be merged into production, with the usage of the new attributes disabled.
      <br/>
      This feature also allows a programmer to modify the source program in portions, e.g., module by module, while allowing the overall source program to remain operational.
      <br/>
      Thus, the source program may remain operational by controlling the compiler routine to disable the new modifications during the periods of time in which some portions of the source program have been modified and merged back into the program, while other portions have not yet been modified.
      <br/>
      As a result, the conversion time necessary for making the above-noted modifications to the source program may be minimized.
    </p>
    <p num="61">
      As a further feature of preferred embodiments employing a windowing technique, an option is provided for setting a default window (or for setting all of the individual windows, in a multiple window program) with a setting of 1900 to 1999.
      <br/>
      This, allows the program to run with the window(s) set to correspond to the period for which the source program was intended to operate prior to modifications (i.e., prior to the turn of the century).
      <br/>
      This procedure allows the programmer to test the operability of the modified source program, by comparing the results obtained from running the modified program with the window(s) set at the 1900 to 1999 values, with the results obtained from running the pre-modified program.
      <br/>
      The results should be the same for both runs.
      <br/>
      After such comparison, the window(s) may be changed from the 1900 to 1999 setting to the appropriate setting selected by the programmer.
    </p>
    <p num="62">
      Thus, the 1900 to 1999 setting allows the programmer to, for example, test the operability of the modified source program, after modifications have been added thereto.
      <br/>
      In addition, this feature allows a programmer to operate the modified source program (in effect, without modifying the result, with respect to the result that would be obtained with the source program prior to modification) until it is desirable to begin using the modified version (e.g., when date fields in the original source program will begin to be affected by the year 2000 problem).
      <br/>
      At that time, the programmer need only specify a new window (or multiple new windows for multiple window programs).
    </p>
    <heading>SOURCE LANGUAGE ENHANCEMENTS</heading>
    <p num="63">
      As representative examples, various source language extensions for requesting year 2000 solution techniques are described herein.
      <br/>
      Although preferred embodiments of the present invention may incorporate any or all of the above-noted standard year 2000 techniques, the description herein will, for simplicity, concentrate primarily on extensions using fixed and multiple windowing and expansion.
      <br/>
      Similarly, while preferred embodiments of the present invention may be implemented for a variety of computer languages such as, but not limited to, COBOL, PL/I, and C++, for simplicity, the description herein and examples provided will use a syntax consistent with an extended standard COBOL language syntax.
    </p>
    <p num="64">
      In accordance with preferred embodiments of the present invention, extensions are provided to the existing standard source language, for example, COBOL or PL/I.
      <br/>
      These source language extensions provide the syntax used to decorate data declaration statements that define date related data items.
    </p>
    <p num="65">
      As a representative example, a DATE-FORMAT attribute with values chosen from the set YYMMDD, YYYYMMDD, YYDDD, YYYYDDD, YY, and YYYY is provided with the source language extensions of the present invention to allow the programmer to specify the format of date related data fields.
      <br/>
      DATE-FORMAT IS YYMMDD, for example, specifies that the associated data item contains a date item (sometimes referred to as a calendar date) with a 2-digit year, a 2-digit month, and a 2-digit day; YYYYDDD specifies that the associated data item contains a date item (sometimes referred to as an ordinal date) with a 4-digit year and a 3-digit day-of-year; and YY specifies that the associated data item contains a date data item consisting only of a 2-digit year.
    </p>
    <p num="66">
      Those skilled in the art will recognize that the examples quoted above are not intended to limit the present invention.
      <br/>
      Indeed, those skilled in the art will recognize that other date formats and syntaxes for representing date formats may be used without departing from the scope and spirit of the present invention.
      <br/>
      Furthermore, time attributes, for example, hours, minutes, seconds may also be included in additional date formats.
    </p>
    <p num="67">
      In addition to the DATE-FORMAT attribute for date data items, a WINDOW attribute is also provided in preferred embodiments of the present invention to allow specification of fixed window values associated with individual date data items that contain 2-digit years.
      <br/>
      The WINDOW attribute uses a syntax of WINDOW(low-value, high-value), where low-value specifies the first year in the 100 year fixed window and high-value specifies the last.
      <br/>
      For example, the following data declaration:
    </p>
    <p num="68">01 BIRTH-DAY PIC 9(6) DATE-FORMAT IS YYMMDD,</p>
    <p num="69">- WINDOW(1920, 2019).</p>
    <p num="70">
      declares a field called BIRTH-DAY that contains six numeric digits: 2 year digits, 2 month digits, and 2 day digits.
      <br/>
      The year digits in the BIRTH-DATE field are to be interpreted within the fixed window of 1920 to 2019.
    </p>
    <p num="71">
      The DATE-FORMAT and WINDOW attributes may be applied to any data item which contains a digital representation of a date including but not limited to data items encoded using BINARY, DISPLAY, and PACKED-DECIMAL data formats.
      <br/>
      Those skilled in the art will recognize that other date representations and data formats may be used without departing from the scope of the present invention.
    </p>
    <p num="72">As a further example of how a COBOL program might be enabled for the year 2000, using the compiler-assisted techniques described herein, consider the following COBOL program fragment:</p>
    <p num="73">
      --
      <br/>
      --  01 PERIOD PIC 99.
      <br/>
      --  01 TODAYS-DATE.
      <br/>
      --   05 TODAY-YY PIC 99.
      <br/>
      --   05 TODAY-MM PIC 99.
      <br/>
      --   05 TODAY-DD PIC 99.
      <br/>
      --  01 POLICY-RECORD.
      <br/>
      --  . . .
      <br/>
      --   05 MATURITY-DATE.
      <br/>
      --    10 MATURITY-YY PIC 99.
      <br/>
      --    10 MATURITY-MM PIC 99.
      <br/>
      --    10 MATURITY-DD PIC 99.
      <br/>
      --  . . .
      <br/>
      --  * If policy is mature, update benefits record. . .
      <br/>
      --  ACCEPT TODAYS-DATE FROM DATE
      <br/>
      --  IF MATURITY-DATE IS GREATER THAN OR
      <br/>
      --  EQUAL TO TODAYS-DATE
      <br/>
      -- DISPLAY "Policy maturity date: 19" MATURITY-YY
      <br/>
      --  SUBTRACT MATURITY-YY FROM TODAY-YY GIVING PERIOD
      <br/>
      --  . . .
    </p>
    <p num="74">
      Based on the source program modifications discussed herein, the following steps are used to convert the program fragment above.
      <br/>
      First, in accordance with step 200 in FIG. 2, standard static analysis tools are used to determine that the data items, PERIOD, TODAYS-DATE, TODAY-YY, MATURITY-DATE and MATURITY-YY, are date impacted.
      <br/>
      Inspection of the date impacted program statements also shows that the DISPLAY statement explicitly assumes that the current date is in the twentieth century, so that, even in the year 2002, it would print, "Policy maturity date: 1902"
    </p>
    <p num="75">
      In accordance with step 202 in FIG. 2, the same tools may then be used to determine that a reasonable solution would be to use windowing for the existing date data items, and introduce a new, expanded data item for correctly displaying the current year.
      <br/>
      Next, in accordance with step 204 of FIG. 2, the date and year attributes are added and the code is modified as follows:
    </p>
    <p num="76">
      --
      <br/>
      -- 1.  01 THIS-YEAR PIC 9999 DATE-FORMAT YYYY WINDOW(1950,2049).
      <br/>
      --     01 PERIOD PIC 99.
      <br/>
      -- 2.  01 TODAYS-DATE DATE-FORMAT YYMMDD WINDOW(1950,2049).
      <br/>
      -- 2.   05 TODAY-YY PIC 99 DATE-FORMAT YY WINDOW(1950,2049).
      <br/>
      --      05 TODAY-MM PIC 99.
      <br/>
      --      05 TODAY-DD PIC 99.
      <br/>
      --     01 POLICY-RECORD.
      <br/>
      --    . . .
      <br/>
      -- 2.   05 MATURITY-DATE DATE-FORMAT YYMMDD WINDOW(1950,2049).
      <br/>
      -- 2.    10 MATURITY-YY PIC 99 DATE-FORMAT YY WINDOW(1950,2049).
      <br/>
      --       10 MATURITY-MM PIC 99.
      <br/>
      --      10 MATURITY-DD PIC 99.
      <br/>
      --    . . .
      <br/>
      --     * If policy is mature, update benefits record. . .
      <br/>
      --      ACCEPT TODAYS-DATE FROM DATE
      <br/>
      -- 3.   IF MATURITY-DATE IS GREATER THAN OR EQUAL TO TODAYS-DATE
      <br/>
      -- 4.    MOVE TODAYS-YY TO THIS-YEAR
      <br/>
      --       DISPLAY "Policy maturity date: " THIS-YEAR
      <br/>
      -- 5.  SUBTRACT MATURITY-YY FROM TODAY-YY GIVING PERIOD
      <br/>
      --    . . .
    </p>
    <p num="77">
      Refer to the numbered keys in the modified program fragment above, representing the steps by which the modification was made, and assume that the single, fixed window for the program is from 1950 through 2049, inclusive.
      <br/>
      In step 1, a new, expanded data item THIS-YEAR is introduced, so that the current year can be correctly displayed.
      <br/>
      In step 2, the existing data items are decorated with the appropriate date attributes.
      <br/>
      In step 3, the comparison of the decorated dates proceeds as if the year components of both dates were in the range 1950 through 2049, such that a year value of 2 would be interpreted as 2002, rather than as 1902 in the unmodified program.
      <br/>
      In step 4, TODAYS-DATE is correctly expanded to a four-digit year.
      <br/>
      In step 5, the difference between the two windowed year values, TODAY-YY and MATURITY-YY, is computed as if data values from 0 through 49 were augmented by 100, and processed as 100 through 149.
    </p>
    <p num="78">
      As noted above, the compiler 118 preferably conforms to ANSI COBOL or PL/I language conventions, although those skilled in the art will recognize that the compiler 118 could also conform to other language conventions without departing from the scope of the present invention.
      <br/>
      In addition, section A below is a COBOL specification document which describes further details relating to preferred embodiments implemented with COBOL compilers, and section B hereto is a PL/I specification document which describes further details relating to preferred embodiments implemented with PL/I compilers.
    </p>
    <heading>COMPILER OPTIONS EXTENSIONS</heading>
    <p num="79">
      As representative examples, various compiler options extensions for requesting year 2000 solution techniques are described herein.
      <br/>
      Although preferred embodiments of the present invention may incorporate any or all of the above-noted standard year 2000 techniques, the description herein will, for simplicity, concentrate primarily on extensions using fixed and multiple windowing and expansion.
      <br/>
      Similarly, while preferred embodiments of the present invention may be implemented for a variety of computer languages such as, but not limited to, COBOL, PL/I, and C++, for simplicity, the description herein and examples provided will use a syntax consistent with extensions to existing COBOL compiler options.
    </p>
    <p num="80">Implementation of the preferred embodiments of the present invention, for example, in a COBOL or PL/I compiler and run-time library requires enhancements to provide support for new compiler options to allow specification of a default window, specification of the types of messages that should be produced as a result of the insertion of enhanced data definition attributes in the source code, and the ability to enable or disable the processing of the enhanced data definition attributes in the source program.</p>
    <p num="81">
      The new compiler option YEARWINDOW(low-value, high-value) is used to specify a default fixed window for date data items in the source program which are recorded with a 2-digit year format and where no WINDOW attribute is specified for the data item.
      <br/>
      For example,
      <br/>
      01 BIRTH-DAY PIC 9(6) DATE-FORMAT IS YYMMDD.
    </p>
    <p num="82">
      defines a date data item which contains a 2-digit year.
      <br/>
      However, since no WINDOW attribute is specified in the data declaration, the necessary low and high values for the window are obtained from the values provided in the YEARWINDOW compiler option, assuming it is specified.
      <br/>
      If the YEARWINDOW compiler option is not specified, or if a NOYEARWINDOW compiler option is specified, then statements such as the one shown above are flagged by the compiler as an error because no window value is provided.
    </p>
    <p num="83">If WINDOW attributes are left off all date data declaration statements in a source program, use of the YEARWINDOW compiler option allows specification of a single fixed window to be used for all date data items with 2-digit years.</p>
    <p num="84">
      The new compiler options FLAGDATE and NOFLAGDATE specify that the compiler is to produce or omit informational and/or warning messages for each statement in the compilation unit that uses or is affected by the year 2000 language extensions.
      <br/>
      Error messages flagging incorrect source language statements detected by the compiler are produced irrespective of the specification of the FLAGDATE/NOFLAGDATE compiler options.
    </p>
    <p num="85">The new compiler options DEBUGDATE and NODEBUGDATE specify that the compiler is to produce or omit debug hooks in the generated code for each source statement in the compilation unit that uses or is affected by the year 2000 language extensions.</p>
    <p num="86">
      Those skilled in the art will recognize that the examples of compiler options described above are not intended to limit the present invention.
      <br/>
      Indeed, those skilled in the art will recognize that additional and alternative compiler options may be used without departing from the scope of the invention.
    </p>
    <heading>COMPILER SUPPORT</heading>
    <p num="87">
      In accordance with preferred embodiments of the present invention, compiler support is provided for recognizing and processing the above-noted extension statements and other instructions, such as instructions for disabling data definition attribute extensions (as discussed above with respect to the "disabling" option), instructions for setting a default window (as discussed above with respect to the "YEARWINDOW" option), instructions for a debugger routine as discussed above, etc.
      <br/>
      These support features may be written as part of a compiler program and run-time library specifically designed to support the original language and these enhancements.
      <br/>
      However, in preferred embodiments, existing compiler programs and run-time libraries will be upgraded or enhanced to support the recognition and processing of these source language enhancements and other instructions in a manner discussed herein.
    </p>
    <p num="88">
      Implementation of the preferred embodiments of the present invention, for example, in a COBOL or PL/I compiler and run-time library preferably involves enhancements to provide support for new compiler options, support for new data declaration date attributes, support for new intrinsic or built-in functions, enhanced code generation facilities to support the extended semantics and debug hooks, new or enhanced run-time library routines, and new or enhanced intrinsic functions.
      <br/>
      Enhancements to a COBOL or PL/I compiler to provide support for these functions may be readily implemented, using standard programming techniques.
    </p>
    <p num="89">With regard to the support for new compiler options, the YEARWINDOW/NOYEARWINDOW, FLAGDATE/NOFLAGDATE, and DEBUGDATE/NODEBUGDATE compiler options as described above, may be readily implemented by one skilled in the art of compiler implementation.</p>
    <p num="90">
      With regard to the new data declaration date attributes, typical implementation in a COBOL or PL/I compiler includes recognition of the new syntax, recognition and reporting of syntactic and semantic errors resulting from the introduction of the new attributes, and recording the new data attributes in the program symbol table.
      <br/>
      Such processing is consistent with the introduction of a new data type into the language or the introduction of new attributes for existing data types and is well known to those skilled in the art of compiler implementation.
    </p>
    <p num="91">
      With respect to the enhanced code generation facilities and new or enhanced run-time library routines, source program statements which involve the processing of date data items can be recognized by the compiler using the new attribute information recorded in the program symbol table.
      <br/>
      When an affected data item is referenced in the body of a program for the purpose of carrying out a computation, its value is accessed and converted to a representation suitable for the specified computation.
      <br/>
      For example, if the computation specifies a comparison between a windowed date and an expanded date (with a 4-digit year), the windowed date, when accessed, could be expanded to a date with a 4-digit year so the comparison may be carried out using that representation as a common format.
      <br/>
      Similarly, if the source program specifies a date data item to be stored in a windowed date field (for example in a data move or as the result of a computation), the date data is converted to a format suitable for the receiving field using the window parameters for the receiving field as specified in the symbol table.
      <br/>
      In the process of converting the date data to the desired result format, if error handling (in COBOL, "ON SIZE ERROR") was specified, code is preferably generated to determine whether an error had occurred (that is, whether the converted date was outside the valid range of valid dates for the windowed receiving field), and if it had occurred, an appropriate error handling routine is preferably invoked.
    </p>
    <p num="92">
      These examples illustrate a few of a variety of techniques that could be used by those skilled in the art of compiler implementation to implement the necessary enhancements to the code generation and run-time library facilities in support of the new function.
      <br/>
      Additional examples are described in the attached appendices.
    </p>
    <p num="93">
      The compiler is also provided with support for new intrinsic functions (or built-in functions, in the case of PL/I).
      <br/>
      Examples of such functions and appropriate implementations are described in section A and section B below.
    </p>
    <heading>OTHER TECHNIQUES</heading>
    <p num="94">
      Approaches as discussed above may be readily implemented with a "sliding window" technique, with minimal extensions to the basic technique.
      <br/>
      In this implementation, the window is defined as an offset from the current year.
      <br/>
      For example, a data item could be defined as windowed from 30 years prior to the current year to 69 years after the current year.
      <br/>
      Thus, for such an example, the sliding window technique may be implemented, as discussed above, by extending the syntax for the operand of the WINDOW attribute as follows:
      <br/>
      DATE-FORMAT IS YY WINDOW(*-30,+69)
    </p>
    <p num="95">
      In addition, the run-time initialization changes to save the value of the current year minus 1900 at the start of execution. (Assume that this value is saved in Start Year.) Furthermore, the sliding window technique requires codification of the algorithm used to convert a 2-digit year value into a form suitable for computations in conjunction with other date data items.
      <br/>
      In this case, the algorithm used for fixed windows (if value&lt;lowrange) is still used but the "low-value" is now the value saved during initialization (described in the previous step) minus the delta specified in the WINDOW attribute.
    </p>
    <p num="96">
      The basic approaches described herein may also be expanded to variable window techniques.
      <br/>
      According to the variable window technique, a window is specified when the program is run, rather than when it is compiled.
      <br/>
      In this regard, a new window may be specified each time the program is run.
    </p>
    <p num="97">
      A compression technique could also be easily supported with a few extensions to the basic technique.
      <br/>
      Any of the popular compression algorithms could be used in conjunction with the technique.
      <br/>
      However, for purposes of simplifying the present disclosure, it is assumed that the selected compression algorithm operates to compress values which are treated as offsets from 1900 and compresses values in the range of 0 to 499.
      <br/>
      Compression algorithms which do not adhere to these restrictions could also be handled with further modifications to the basic approach.
    </p>
    <p num="98">
      Additional support for implementing a compression technique would include a new modifier for the YY attribute, to indicate that compression is to be used instead of windowing.
      <br/>
      For example, the following modifier may by used:
    </p>
    <heading>DATE-FORMAT YY COMPRESSED</heading>
    <p num="99">
      If it were desirable to support more than one compression algorithm, support could be implemented, for example, by extending the basic compression syntax to allow the selection of a specific compression algorithm.
      <br/>
      For example:
    </p>
    <p num="100">DATE-FORMAT YY COMPRESSED(algorithm).</p>
    <p num="101">
      The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description.
      <br/>
      It is not intended to be exhaustive or to limit the invention to the precise form disclosed.
      <br/>
      Many modifications and variations are possible in light of the above teaching.
      <br/>
      It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto.       (Vertical spacing image '1' not included in text)  (Vertical spacing image '2' not included in text)  (Vertical spacing image '3' not included in text)  (Vertical spacing image '4' not included in text)  (Vertical spacing image '5' not included in text)  (Vertical spacing image '6' not included in text)  (Vertical spacing image '7' not included in text)  (Vertical spacing image '8' not included in text)  (Vertical spacing image '9' not included in text)  (Vertical spacing image '10' not included in text)  (Vertical spacing image '11' not included in text)  (Vertical spacing image '12' not included in text)  (Vertical spacing image '13' not included in text)  (Vertical spacing image '14' not included in text)  (Vertical spacing image '15' not included in text)  (Vertical spacing image '16' not included in text)  (Vertical spacing image '17' not included in text)  (Vertical spacing image '18' not included in text)  (Vertical spacing image '19' not included in text)  (Vertical spacing image '20' not included in text)  (Vertical spacing image '21' not included in text)  (Vertical spacing image '22' not included in text)  (Vertical spacing image '23' not included in text)  (Vertical spacing image '24' not included in text)  (Vertical spacing image '25' not included in text)  (Vertical spacing image '26' not included in text)  (Vertical spacing image '27' not included in text)  (Vertical spacing image '28' not included in text)  (Vertical spacing image '29' not included in text)  (Vertical spacing image '30' not included in text)  (Vertical spacing image '31' not included in text)  (Vertical spacing image '32' not included in text)  (Vertical spacing image '33' not included in text)  (Vertical spacing image '34' not included in text)  (Vertical spacing image '35' not included in text)  (Vertical spacing image '36' not included in text)  (Vertical spacing image '37' not included in text)  (Vertical spacing image '38' not included in text)  (Vertical spacing image '39' not included in text)  (Vertical spacing image '40' not included in text)
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method of processing a computer source program, comprising the steps of:</claim-text>
      <claim-text>(a) receiving a plurality of programming language statements comprising a source program into a memory of a computer, wherein at least one of the received statements comprises a data declaration extension requesting a Year 2000 solution and wherein the data declaration extension comprises an attribute to identify which one of a plurality of Year 2000 solutions has been requested;</claim-text>
      <claim-text>and (b) compiling the source program into an object program in the memory of the computer, wherein the object program includes instructions for processing and/or invoking procedures on a data field associated with the extended data declaration according to the Year 2000 solution requested in the data declaration; (c) wherein said step of compiling comprises the steps of receiving at least one of a compiler option or compiler directive and, in response thereto, flagging each modified statement and generating a message for each source statement in the compilation that uses or is affected by a Year 2000 data declaration extension.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A method as recited in claim 1, wherein said compiler option or compiler directive comprises a flag attribute and wherein said flag attribute comprises: FLAGDATE.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A method as recited in claim 1, wherein said step of receiving comprises the steps of: (a) identifying data declaration statements relating to year values in date fields of the source program; (b) modifying at least one identified data declaration statement of the source program to add an extension defining an attribute referencing a Year 2000 solution technique;</claim-text>
      <claim-text>and (c) storing the modified source program language statements in the memory of the computer.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A method as recited in claim 1, wherein said step of generating a message comprises generating a message from the group consisting of informational messages, warning messages, and error messages, wherein an informational message comprises a information regarding the use or affect of a data declaration extension on a source statement, wherein a warning message comprises an indication of a potential error resulting from a source statement using or affected by a data declaration extension and, wherein an error message comprises an indication of an error resulting from a source statement using or affected by a data declaration extension.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A method of processing a computer source program, comprising the steps of: (a) receiving a plurality of programming language statements comprising a source program into a memory of a computer, wherein at least one of the received statements comprises a data declaration extension requesting a Year 2000 solution and wherein the data declaration extension comprises an attribute to identify which one of a plurality of Year 2000 solutions has been requested;</claim-text>
      <claim-text>and (b) processing the source program with an interpreter, including invoking procedures on a data field associated with the extended data declaration according to the Year 2000 solution requested in the data declaration; (c) wherein at least one of said steps of processing and receiving comprises the steps of receiving at least one of an interpreter option or interpreter directive and, in response thereto, flagging each modified statement and generating a message for each source statement in the source program that uses or is affected by a Year 2000 data declaration extension.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A computer programming apparatus, comprising: (a) a computer having a memory; (b) means, performed by the computer, for receiving a series of programming language statements comprising a source program into a memory of the computer, wherein at least one of the received statements comprises a data declaration extension requesting a Year 2000 solution and wherein the data declaration extension comprises an attribute to identify which one of a plurality of Year 2000 solutions has been requested;</claim-text>
      <claim-text>and (c) means, performed by the computer, for compiling the source program into an object program in the memory of the computer, wherein the object program includes instructions for processing and/or invoking the procedures on a data field associated with the extended data declaration according to the Year 2000 solution requested in the declaration; (d) wherein said means for compiling comprises means, performed by the computer, for receiving at least one of a compiler option or compiler directive and, means responsive to the receipt of the compiler option or compiler directive, for flagging each modified statement and generating a message for each source statement in the compilation that uses or is affected by a Year 2000 data declaration extension.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. Apparatus as recited in claim 6, wherein said compiler option or compiler directive comprises a flag attribute wherein said flag attribute comprises: FLAGDATE.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. Apparatus as recited in claim 6, wherein said means for receiving comprises: (a) means, performed by the computer, for identifying data declaration statements relating to year values in date fields of the source program; (b) means, performed by the computer, for modifying at least one identified data declaration statement to add an extension defining an attribute referencing a Year 2000 solution technique;</claim-text>
      <claim-text>and (c) means, performed by the computer, for storing the modified statements in the memory of the computer.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. Apparatus as recited in claim 6, wherein said means for flagging and generating a message comprises generating a message from the group consisting of informational messages, warning messages, and error messages, wherein an informational message comprises a information regarding the use or affect of a data declaration extension on a source statement, wherein a warning message comprises an indication of a potential error resulting from a source statement using or affected by a data declaration extension and, wherein an error message comprises an indication of an error resulting from a source statement using or affected by a data declaration extension.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A computer programming apparatus, comprising: (a) a computer having a memory; (b) means, performed by the computer, for receiving a series of programming language statements comprising a source program into a memory of the computer, wherein at least one of the received statements comprises a data declaration extension requesting a Year 2000 solution and wherein the data declaration extension comprises an attribute to identify which one of a plurality of Year 2000 solutions has been requested;</claim-text>
      <claim-text>and (c) means, performed by the computer, for processing the source program with an interpreter, including invoking the procedures on a data field associated with the extended data declaration according to the Year 2000 solution requested in the declaration; (d) wherein said means for processing comprises means, performed by the computer, for receiving at least one of an interpreter option or interpreter directive and, means responsive to the receipt of the interpreter option or interpreter directive, for flagging each modified statement and generating a message for each source statement that uses or is affected by a Year 2000 data declaration extension.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. An article of manufacture comprising a computer program carrier readable by a computer and embodying one or more instructions executable by the computer to perform method steps of programming a computer, the method comprising the steps of: (a) receiving a series of programming language statements comprising a source program into a memory of the computer, wherein at least one of the received statements comprises a data declaration extension requesting a Year 2000 solution and wherein the data declaration extension comprises an attribute to identify which one of a plurality of Year 2000 solutions has been requested;</claim-text>
      <claim-text>and (b) compiling the source program into an object program in the memory of the computer, wherein the object program includes instructions for processing and/or invoking the Year 2000 solution requested in the data declaration; (c) wherein said step of compiling comprises the steps of receiving at least one of a compiler option or compiler directive and, in response thereto, flagging each modified statement and generating a message for each source statement in the compilation that uses or is affected by a Year 2000 data declaration extension.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. An article as recited in claim 11, wherein said compiler option or compiler directive comprises a flag attribute wherein said flat attribute comprises: FLAGDATE.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. An article as recited in claim 11, wherein said step of receiving comprises the steps of: (a) identifying data declaration statements relating to year values in date fields of the source program; (b) modifying at least one identified data declaration statement of the source program to add an extension defining an attribute referencing a Year 2000 solution technique;</claim-text>
      <claim-text>and (c) storing the modified source program language statements in the memory of the computer.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. An article as recited in claim 13, wherein said compiler option or compiler directive comprises a flag attribute and wherein said flag attribute comprises: FLAGDATE.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. An article as recited in claim 11, wherein said step of generating a message comprises generating a message from the group consisting of informational messages, warning messages, and error messages, wherein an informational message comprises a information regarding the use or affect of a data declaration extension on a source statement, wherein a warning message comprises an indication of a potential error resulting from a source statement using or affected by a data declaration extension and, wherein an error message comprises an indication of an error resulting from a source statement using or affected by a data declaration extension.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. An article of manufacture comprising a computer program carrier readable by a computer and embodying one or more instructions executable by the computer to perform method steps of programming a computer, the method comprising the steps of: (a) receiving a series of programming language statements comprising a source program into a memory of the computer, wherein at least one of the received statements comprises a data declaration extension requesting a Year 2000 solution and wherein the data declaration extension comprises an attribute to identify which one of a plurality of Year 2000 solutions has been requested;</claim-text>
      <claim-text>and (b) processing the source program with an interpreter, including invoking the Year 2000 solution requested in the data declaration; (c) wherein said step of processing comprises the steps of receiving at least one of an interpreter option or interpreter directive and, in response thereto, flagging each modified statement and generating a message for each source statement that uses or is affected by a Year 2000 data declaration extension.</claim-text>
    </claim>
  </claims>
</questel-patent-document>