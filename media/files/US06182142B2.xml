<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182142B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182142</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182142</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="22350479" extended-family-id="42104632">
      <document-id>
        <country>US</country>
        <doc-number>09113609</doc-number>
        <kind>A</kind>
        <date>19980710</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09113609</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43159843</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>11360998</doc-number>
        <kind>A</kind>
        <date>19980710</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09113609</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  21/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L  29/06        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>709229000</text>
        <class>709</class>
        <subclass>229000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>709219000</text>
        <class>709</class>
        <subclass>219000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>709227000</text>
        <class>709</class>
        <subclass>227000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>726004000</text>
        <class>726</class>
        <subclass>004000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-063/067</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>63</main-group>
        <subgroup>067</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131028</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-019/00</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>19</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20180430</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-021/604</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>604</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131028</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-021/6218</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>21</main-group>
        <subgroup>6218</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131028</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-063/105</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>63</main-group>
        <subgroup>105</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131028</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-067/306</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>67</main-group>
        <subgroup>306</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131017</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>34</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>18</number-of-drawing-sheets>
      <number-of-figures>18</number-of-figures>
      <image-key data-format="questel">US6182142</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Distributed access management of information resources</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>RONEN YZHAK</text>
          <document-id>
            <country>US</country>
            <doc-number>5845267</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5845267</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>MIGHDOLL LEE S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5918013</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5918013</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>HE JINGSHA</text>
          <document-id>
            <country>US</country>
            <doc-number>5944824</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5944824</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>HELLAND PATRICK JAMES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6014666</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6014666</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>HOFFMAN RICHARD D</text>
          <document-id>
            <country>US</country>
            <doc-number>5261102</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5261102</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>enCommerce, Inc.</orgname>
            <address>
              <address-1>Santa Clara, CA, US</address-1>
              <city>Santa Clara</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>ENTRUST</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Win, Teresa</name>
            <address>
              <address-1>Sunnyvale, CA, US</address-1>
              <city>Sunnyvale</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Belmonte, Emilio</name>
            <address>
              <address-1>San Francisco, CA, US</address-1>
              <city>San Francisco</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Hickman Palermo Truong &amp; Becker, LLP</orgname>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Palermo, Christopher J.</name>
          </addressbook>
        </agent>
        <agent sequence="3" rep-type="agent">
          <addressbook lang="en">
            <name>Bingham, Marcel K.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Vu, Viet D.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      Using a method for controlling access to information resources, a single secure sign-on gives the user access to authorized resources, based on the user's role in the organization.
      <br/>
      The information resources are stored on a protected server.
      <br/>
      A user of a client or browser logs in to the system.
      <br/>
      A runtime module on the protected server receives the login request and intercepts all other request by the client to use a resource.
      <br/>
      The runtime module connects to an access server that can determine whether a particular user is authentic and which resources the user is authorized to access.
      <br/>
      User information is associated with roles and functional groups of an organization to which the user belongs; the roles are associated with access privileges.
      <br/>
      The access server connects to a registry server that stores information about users, roles, functional groups, resources, and associations among them.
      <br/>
      The access server and registry server exchange encrypted information that authorized the user to use the resource.
      <br/>
      The access server passes encrypted tokens that define the user's roles and authorization rights to the browser or client, which stores the tokens in memory.
      <br/>
      The user is presented with a customized display showing only those resources that the user may access.
      <br/>
      Thereafter, the access server can resolve requests to use other resources based on the tokens without contacting the registry server.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">
      This invention generally relates to methods of controlling access to protected information resources in a network environment.
      <br/>
      The invention relates more specifically to methods, apparatus, and products for facilitating secure and selective access to network resources based on a role of a user of the resources.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      Computer networks have become ubiquitous in business, industry, and education.
      <br/>
      In one approach, a network is configured with one or more user accounts, each of which is uniquely associated with a human network user or host computer.
      <br/>
      The network also has one or more resources, such as application programs that provide various computing functions, which are available to all users.
      <br/>
      In this approach, a user logs into his or her user account, selects a desired application.
      <br/>
      A disadvantage of this approach is that every user has the same rights to access any of the network resources.
    </p>
    <p num="3">
      Development of the globally accessible, packet-switched network known as the Internet has enabled network resources, accounts and applications to become available worldwide.
      <br/>
      Development of hypertext protocols that implement the World Wide Web ("The Web") is enabling networks to serve as a platform for global electronic commerce.
      <br/>
      In particular, the Web is enabling the easy exchange of information between businesses and their customers, suppliers and partners.
    </p>
    <p num="4">
      Businesses are rushing to publish information on the Web and just as quickly stumbling into several roadblocks.
      <br/>
      For example, some information is valuable and sensitive, and needs to be made available only to selected users.
      <br/>
      Thus, there is a need to provide selective access to network resources and information over the Web.
    </p>
    <p num="5">
      This need exists in the context of internal Web networks that are available to employees of an organization, called Intranets, as well as Web networks and resources that are available to external customers, suppliers and partners of the organization, called extranets.
      <br/>
      Extranet users may require information from a large number of diverse sources, for example, product catalogs, customer databases, or inventory systems.
      <br/>
      There may be millions of potential users, the number of which grows dramatically as an organization prospers.
      <br/>
      Thus, there is a need for a large-scale system that can provide selective access to a large number of information sources for a large number of users.
    </p>
    <p num="6">Because some of the information sources are sensitive, there is a need to provide secure access to the information.</p>
    <p num="7">
      Current networks and Web systems, including Intranets and extranets, are expensive and complex to implement.
      <br/>
      These technologies also change rapidly.
      <br/>
      There is a need for any information access method or system to integrate with and use existing equipment, software and systems.
      <br/>
      There is also a need for method and system that is flexible or adaptable to changing technologies and standards.
    </p>
    <p num="8">
      One approach to some of the foregoing problems and needs has been to provide each network resource or application program with a separate access control list.
      <br/>
      The access control list identifies users or hosts that are authorized to access a particular application.
      <br/>
      As new users or hosts are added to the network, the access control lists grow, making security management more complicated and difficult.
      <br/>
      Use of a large number of separate lists also makes the user experience tedious and unsatisfactory.
    </p>
    <p num="9">
      Another disadvantage of the foregoing approaches is duplication of management processes.
      <br/>
      To add new users to the system, a network administrator must repeat similar access processes for each application or resource to be made available to the new users.
      <br/>
      The redundancy of these processes, combined with rapid growth in the number of users, can make the cost of deploying, managing and supporting a system unacceptably high.
    </p>
    <p num="10">Thus, there is a need for a mechanism to govern access to one or more information resources in which selective access is given to particular users.</p>
    <p num="11">There is also a need for such a mechanism that is equally adaptable to an internal network environment and to an external network environment.</p>
    <p num="12">There is a further need for such a mechanism that is easy to configure and re-search configure as new users and resources become part of the system.</p>
    <p num="13">There is still another need for such a mechanism that is simple to administer.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="14">The foregoing needs, and other needs and objectives that will become apparent from the description herein, are achieved by the present invention, which comprises, in one aspect, a method of controlling access to one or more information resources stored on a first server, the method comprising the steps of receiving information describing a user at the first server; identifying, at a second server coupled to the first server, a subset of the resources that the user is authorized to access, based on one or more roles that are stored in association with user identifying information; communicating information defining the subset to the first server; storing first information defining the subset, and second information defining the roles, in one or more tokens; communicating the tokens to a client that is associated with the user; and thereafter resolving requests to use the resources at the first server based on the tokens.</p>
    <p num="15">
      One feature of this aspect is the steps of defining a role of the user; and storing an association of the user to the role at the second server.
      <br/>
      A related feature is the steps of defining one or more roles and functional groups of an organization to which the user belongs; storing information describing the roles and functional groups in association with information describing the user; and determining whether the user may access the resource based on the information describing the roles and functional groups.
    </p>
    <p num="16">
      According to another feature, the identifying step further comprises the steps of connecting the first server to the second server, in which the second server stores information describing the user, one or more roles, one or more functional groups, the resources, and associations among them; and communicating a request for a profile of the user from the first server to the second server.
      <br/>
      In another feature, the receiving step further comprises the steps of receiving the information describing the user at a runtime module on the first server that also intercepts requests to access the resource.
      <br/>
      In yet another feature, the step of identifying further comprises the step of determining whether the user is authentic.
      <br/>
      A related feature is that the step of identifying further comprises the steps of communicating encrypted information between the first server and the second server describing resources that the user is authorized to use.
    </p>
    <p num="17">
      In another feature, the steps of communicating further comprise the steps of passing one or more encrypted tokens that define the user's roles and authorization rights from the second server to the first server.
      <br/>
      Another feature is that the steps of communicating further comprise the steps of passing one or more encrypted tokens that define the user's roles and authorization rights from the second server to the client; and storing the tokens in a memory of the client.
    </p>
    <p num="18">
      Another feature involves the steps of communicating, from the first server to the client, a customized display identifying only those resources that the user may access, whereby a single secure sign-on gives a user access to one or more of the resources.
      <br/>
      Still another feature involves the steps of communicating, from the first server to the client, information describing a customized display that identifies only those resources that the user may access.
    </p>
    <p num="19">
      In another aspect, the invention provides a method of controlling access to one or more information resources stored on a protected server, the method comprising the steps of receiving, at the protected server, login information describing a user who desires to access one of the resources; determining that the user is authentic and permitted to access one of the resources; identifying, at a second server coupled to the protected server, a subset of the resources that the user is authorized to access, based on at least one role that is stored in association with user information; communicating information defining the subset to the protected server; storing first information defining the subset, and second information defining the roles, in one or more tokens; communicating the tokens to a client that is associated with the user; and thereafter resolving requests to use the resources at the protected server based on the tokens, whereby a single secure sign-on gives the user access to the one of the resources.
      <br/>
      One feature of this aspect is the steps of receiving a request from the client to access one of the resources; determining, based on the one or more tokens, whether the client is authorized to use the one of the resources; and granting access to the one of the resources to the client.
      <br/>
      A related feature is the steps of intercepting the request from the client at a runtime module of the protected server.
      <br/>
      Yet another related feature involves the steps of granting access to the resource only when the roles associated with the user satisfy an access rule.
      <br/>
      Another feature involves the steps of defining the access rule, associated with the user, as a Boolean expression that includes one or more roles.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="20">
      The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:
      <br/>
      FIG. 1 is a block diagram of an information access system;
      <br/>
      FIG. 2 is a block diagram of a protected server and its connections to the system of FIG. 1;
      <br/>
      FIG. 3A is a state diagram showing actions carried out by a protected server;
      <br/>
      FIG. 3B is a state diagram showing a process of opening a protected resource;
      <br/>
      FIG. 3C is a state diagram showing a process of authorizing access to a restricted resource;
      <br/>
      FIG. 4 is a block diagram of an access server used in the system of FIG. 1;
      <br/>
      FIG. 5A is a state diagram showing steps carried out in a user verification process;
      <br/>
      FIG. 5B is a state diagram showing steps carried out in a login process;
      <br/>
      FIG. 5C is a state diagram showing steps carried out in generating user profile information;
      <br/>
      FIG. 5D is a state diagram showing steps carried out in a logout process;
      <br/>
      FIG. 5E is a state diagram showing steps carried out in a process of generating a personalized menu;
      <br/>
      FIG. 6 is a block diagram of a registry server used in the system of FIG. 1;
      <br/>
      FIG. 7 is a block diagram of the system of FIG. 1 showing details of an administrative application;
      <br/>
      FIG. 8 is a block diagram of the system of FIG. 1 showing security features;
      <br/>
      FIG. 9 is a block diagram of a computer system with which aspects of the invention may be implemented;
      <br/>
      FIG. 10A is a block diagram of a resource administration user interface display;
      <br/>
      FIG. 10B is a block diagram of a role assignment user interface display;
      <br/>
      FIG. 10C is a block diagram of a user interface display generated to facilitate working with groups of users.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="21">
      A method and apparatus for controlling access to protected information resources is described.
      <br/>
      In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention.
      <br/>
      It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details.
      <br/>
      In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.
    </p>
    <p num="22">Overview of Preferred Embodiment</p>
    <p num="23">
      FIG. 1 is a block diagram of main elements of an information access system 2 according to a preferred embodiment.
      <br/>
      Generally, an information access system 2 comprises a plurality of components including an Access Server 106, Registry Server 108, Administration Application 114, and Integration Tools 115.
      <br/>
      The foregoing components cooperate to control access to resources stored on one or more Protected Servers 104, 112.
      <br/>
      Generally, each Protected Server is a Web server.
      <br/>
      Each component comprises one or more modules.
      <br/>
      Each module provides one or more services to users of the system 2 and administrators.
      <br/>
      There may be any number of Protected Servers 104.
      <br/>
      Users are individuals who have a relationship with an organization and play various roles, and are registered in the system 2.
      <br/>
      Users may be members of an organization, or may be customers, suppliers, or business partners of the organization.
      <br/>
      Administrators control the system.
    </p>
    <p num="24">
      In one embodiment, all the components are stored on and executed by one physical server or computer.
      <br/>
      In alternate embodiments, one ore more components are installed on separate computers; this approach may improve security and performance.
      <br/>
      For example, Registry Server 108 may be part of a secure Intranet that is protected using a firewall 118, and Access Server 106 may be located on an extranet for access by users inside and outside the enterprise.
      <br/>
      Further, there may be more than one Registry Server 108 in a mirrored or replicated configuration.
      <br/>
      Each Access Server 106 may be coupled to more than one Registry Server 108, so that a particular Access Server 106 can communicate with a second Registry Server 108 if a first one is busy or unavailable.
      <br/>
      Each Registry Server 108 may be coupled to or support more than one Access Server 106.
      <br/>
      Each Registry Server 108 may execute operations using multiple execution threads, in which access of each thread to Registry Repository 110 is managed by the Access Control Library.
    </p>
    <p num="25">
      A browser 100 is coupled by a communication link to a network 102.
      <br/>
      The block shown for browser 100 represents a terminal, workstation computer, or an equivalent that executes a standard Web browser program or an equivalent, such as Netscape Navigator, Internet Explorer, or NCSA Mosaic.
      <br/>
      Network 102 is a compatible information communication network, preferably the Internet.
      <br/>
      In alternate embodiments, the browser 100 is a client process or client workstation of any convenient type, and the network 102 is a data communication network that can transfer information between the client and a server that is also coupled to the network.
    </p>
    <p num="26">
      The system 2 enables organizations to register information sources or Resources and register Users of the information in a central repository.
      <br/>
      A Resource is a source of information, identified by a Uniform Resource Locator (URL) and published by a Web server either in a static file formatted using Hypertext Markup Language (HTML) or in a dynamically generated page created by a CGI-based program.
      <br/>
      Examples of resources include a Web page, a complete Web site, a Web-enabled database, and an applet.
    </p>
    <p num="27">
      The system 2 enables administrators to implement access rules by defining Roles that Users play when working for an organization or doing business with an enterprise.
      <br/>
      A Role may reflect a relationship of a User to the organization (employee, customer, distributor, supplier), their department within an organization (sales, marketing, engineering) or any other affiliation or function (member of quality task force, hotline staff member) that defines their information needs and thus their access rights or privileges.
      <br/>
      Thus, examples of Roles include Employee, Customer, Distributor, Supplier, Sales, Marketing, Engineering, and Hotline Staff.
    </p>
    <p num="28">
      Roles are defined by information identifying a name of a role and by a functional group in which the role resides.
      <br/>
      A functional group is often a department in which similar functions exist.
      <br/>
      Examples of functional groups are Marketing, Sales, Engineering, Human Resources, and Operations.
    </p>
    <p num="29">In some embodiments, the term User Type or Person Type refers to employees, directors, officers, contractors, customers, distributors, etc., and Role refers to a job function such as sales representative, financial analyst, etc.</p>
    <p num="30">
      Roles determine what resources a User can access.
      <br/>
      Further, each role may require a unique set of information that is available in resources.
      <br/>
      For example, a User who is an Employee in the Marketing department could access Price List and New Products Resources.
      <br/>
      Thus, system 2 enables the creation of resource profiles by assigning roles to resources, and user profiles by assigning roles to users to generate access rights.
      <br/>
      System 2 automatically links a user profile to the resources profiles that have been assigned the same roles, so that deployment of new resources may occur rapidly.
    </p>
    <p num="31">Roles and resources are owned by Functional Groups within the organization.</p>
    <p num="32">
      The system 2 makes managing access simple because it is based on an additive data model.
      <br/>
      Assigning a role to a user or deleting a role from a user can add or delete access to all resources with that role.
      <br/>
      Similarly, adding a role to a resource or removing a role from a resource can give or take away access to that resource from all users with that role.
      <br/>
      The system 2 allows administrators to make such changes in a simple manner, resulting in significant administration time savings.
    </p>
    <p num="33">
      The system 2 also enables Users to log-in to the system once, and thereafter access one or more Resources during an authenticated session.
      <br/>
      Users may log in either with a digital certificate or by opening a login page URL with a web browser and entering a name and password.
      <br/>
      In the past, users have had to log in individually to each Web application that they are authorized to use.
      <br/>
      In the preferred embodiment, users always access the same login page regardless of the number of resources to which they need access.
      <br/>
      Thus, the system provides a mechanism of single secure log-in to Web resources.
    </p>
    <p num="34">
      If the login attempt is successful, the system 2 presents the User with a Personalized Menu that assists the User in identifying and selecting a Resource.
      <br/>
      In one embodiment, a Personalized Menu is an HTML page containing a list of authorized Resources.
      <br/>
      The Personalized Menu displays only Resources to which the User has access.
      <br/>
      The User can then select and access a Resource.
    </p>
    <p num="35">Protected Server 104 is coupled to the network 102 logically separate from browser 100.</p>
    <p num="36">
      The Registry Server 108 is coupled to a Registry Repository 110 that stores information about users, resources and roles of the users.
      <br/>
      Registry Server 108 is coupled by a secure communication link 109 to Access Server 106, which is coupled to network 102.
      <br/>
      Registry Server 108 has an Authentication Server Module that manages concurrent access of multiple users or browsers 100 to Registry Repository 110.
    </p>
    <p num="37">
      A Protected Server 112 is coupled to Registry Server 108.
      <br/>
      The Protected Server 112 executes or supervises execution of an Administration Application 114, which functions to register and manage users, resources and roles by reading and writing information to or from Registry Repository 110.
    </p>
    <p num="38">
      Integration Tools 115 are selectively executed on Protected Server 112 and function to customize the particular configuration of the foregoing components.
      <br/>
      For example, Integration Tools 115 are use to customize the form or content of screen displays presented to browser 100 for user login and logout, or to enforce password selection rules.
      <br/>
      Integration Tools 115 also function to integrate resources with the foregoing components and to integrate data stores or directories with Registry Repository 110.
    </p>
    <p num="39">
      Access Server 106 stores a log-in page, Authentication Client Module and Access Menu Module.
      <br/>
      The Authentication Client Module authenticates a user by verifying the name and password with the Registry Server 108.
      <br/>
      If the name and password are correct, the Authentication Client Module reads the user's roles from the Registry Server 108.
      <br/>
      It then encrypts and sends this information in a "cookie" to the user's browser.
      <br/>
      A "cookie" is a packet of data sent by web servers to web browsers.
      <br/>
      Each cookie is saved by browser 100 until the cookie expires.
      <br/>
      Cookies received from a web server in a specific domain are returned to web servers in that same domain during open URL requests.
      <br/>
      A cookie returned by the Authentication Client Module is required for access to resources protected by the system 2.
    </p>
    <p num="40">Once a user has been authenticated, the Access Menu Module of the Access Server returns a Personalized Menu of the type described above.</p>
    <p num="41">
      When the user selects a resource, the browser sends an open URL request and cookie to a Protected Web Server.
      <br/>
      A Protected Web Server is a web server with resources protected by the Runtime Module.
      <br/>
      The Runtime Module decrypts information in the cookie and uses it to verify that the user is authorized to access the resource.
      <br/>
      The cookie is also used by the resource to return information that is customized based on the user's name and roles.
    </p>
    <p num="42">
      The Registry Server contains an Authentication Server Module and a Registry Repository.
      <br/>
      The Authentication Server Module is structured as a Java server.
      <br/>
      The Registry Repository is structured as a database.
      <br/>
      For example, the Registry Repository may be an SQL Server relational database management system, the Oracle7.RTM. database, etc.
      <br/>
      The Registry Server also contains an Access Control Library that is structured as a Java library.
    </p>
    <p num="43">
      The Administration Application contains Administration Application Modules, a Runtime Module, and an Access Control Library.
      <br/>
      The Administration Application Modules are structured as one or more HTML pages, CGI-based Java programs, or applets.
      <br/>
      The Runtime Module is structured as a C/C++ web server plug-in.
    </p>
    <p num="44">
      The Integration Tools comprise an Access Control Library, and sample program source code.
      <br/>
      Preferably, the source code is written in the Java.RTM. language.
    </p>
    <p num="45">
      The Access Server comprises an Authentication Client Module, Access Menu Module, Runtime Module, and an Access Control Library Lite.
      <br/>
      The Authentication Client Module and Access Menu Module are structured as one or more HTML pages or CGI-based Java programs.
      <br/>
      The Access Control Library Lite is one or more software components that interact to control access to the Access Server and its resources.
      <br/>
      The term "Lite" indicates that the access control components provide more limited functions, and are therefore more secure, than an Access Control Library.
    </p>
    <p num="46">The Protected Web Server comprises a Runtime Module and an Access Control Library.</p>
    <p num="47">The Runtime Module and Access Control Library are reused by several components, for example, the Runtime Module is used to protect resources on Protected Web Servers and system resources in the Access Server and Administration Application.</p>
    <p num="48">Protected Server</p>
    <p num="49">
      A Protected Server 104 preferably is a World Wide Web server that stores one or more resources 208 that are protected by a Runtime Module 206.
      <br/>
      In the preferred embodiment, Runtime Module 206 provides one or more functional services.
      <br/>
      For example, the Runtime Module functions to provide a Remote Configuration Service, an Authentication Verification Service, and an Authorization Verification Service.
      <br/>
      Each service is structured as a C/C++ web server plug-in.
      <br/>
      The Access Control Library 210 of the Protected Web Server functions to provide access to the Registry Server 108.
    </p>
    <p num="50">
      To associate a Protected Server 104 with system 2, the Administration Application 114 is used to enter information about the Protected Server.
      <br/>
      The information is stored in the Registry Repository 110.
      <br/>
      In the preferred embodiment, Administration Application 114 displays a Servers Administration screen.
      <br/>
      An administrator enters, for each Protected Server 104, an identifier; a name; a protocol; a port; a description; the location of an authentication server; URLs that identify pages displayed upon logout, upon login, and where restricted resources are encountered; the Protected Server on which cookies are stored; and the default time in minutes after which a cookie expires.
      <br/>
      The information is stored in Registry Repository 110.
    </p>
    <p num="51">
      When the Runtime Module 206 is initialized, it reads a configuration file and caches a list of all the resources 208 on the Protected Server 104 that need to be protected.
      <br/>
      Configuration changes, for example adding resources 208 to the Protected Server 104, are made using the Administration Application 114.
      <br/>
      When the Runtime Module 206 is notified of a change by the Administration Application 114, a Remote Configuration Service of the Runtime Module 206 uses the Access Control Library 210 to read updated information from the Registry Server 108.
    </p>
    <p num="52">
      The Protected Server 104 executes an HTTP Server 202 that sends and receives requests or messages conforming to Hypertext Transfer Protocol (HTTP).
      <br/>
      An example of the HTTP Server 202 is the public domain Apache Web server.
    </p>
    <p num="53">
      FIG. 3A is a state diagram showing certain actions carried out by Protected Server 104.
      <br/>
      As shown by state 302, a browser 100 issues an HTTP request, such as "Open the Resource designated by this URL," and provides a URL as a parameter.
      <br/>
      For every HTTP request that is received, HTTP Server 202 sets a Web server environment variable "REMOTE_ADDR" equal to the Internet Protocol (IP) address of the requesting client or server.
      <br/>
      As shown by state 304, the HTTP Server 202 then calls the Runtime Module 206, which runs in the same process space as the HTTP Server, and passes it the browser's request.
      <br/>
      Runtime Module 206 determines whether the requested URL is a protected resource.
      <br/>
      If the requested URL is not a protected resource, then as shown by state 306, the Runtime Module takes no further action and passes control back to HTTP Server 202.
      <br/>
      As shown by state 308, the in response the HTTP Server 202 provides one or more Web pages containing the requested resource to the browser 100.
    </p>
    <p num="54">
      FIG. 3B is a state diagram showing processes carried out when the URL is a protected resource.
      <br/>
      As shown by state 312, Runtime Module 206 calls the Authentication Verification Service to check whether an authenticated user is making the request.
      <br/>
      An authenticated user is one who has successfully logged into the system.
      <br/>
      A user is considered authenticated if the request contains a "user cookie" that can be decrypted, and the request's IP address matches that in the cookie.
      <br/>
      If the conditions are not satisfied, then the user cannot be authenticated, and as shown in state 314, Runtime Module 206 returns a redirection to the Login URL.
      <br/>
      As shown by state 316, HTTP Server 202 returns the redirection to the Login URL to the browser 100.
    </p>
    <p num="55">
      FIG. 3C is a state diagram showing processes carried out when the URL is a protected resource and the user is authenticated.
      <br/>
      After the user has been authenticated in state 312, Runtime Module 206 calls the Authorization Verification Service to check that the user has the right to access the protected resource.
      <br/>
      All authenticated users have the right to access "public" resources.
      <br/>
      In state 318, the Runtime Module 206 tests whether the resource is a public resource.
      <br/>
      If so, then Runtime Module 206 returns a direction to one or more resource pages, and HTTP Server 202 returns the redirection to browser 100, as shown by state 308.
    </p>
    <p num="56">
      If the resource is not a public resource, then a user is allowed access only if the user is authorized, as shown by state 320.
      <br/>
      In the preferred embodiment, state 320 involves testing whether the request from browser 100 contains a "roles cookie" that can be decrypted, and the user has one or more roles, in a combination defined by an Access Rule.
      <br/>
      Each Access Rule is a Boolean expression of one or more roles.
      <br/>
      In an alternate embodiment, state 320 involves testing whether the user has at least one role needed to access the resource.
      <br/>
      If these conditions are satisfied, then the user is deemed authorized.
      <br/>
      If these conditions are not satisfied, the user does not have authorization and the Runtime Module returns a redirection to a pre-defined URL, as shown by state 322.
      <br/>
      Preferably, the pre-defined URL identifies a Web page that displays the message "Access Restricted," or an equivalent warning that informs the user that it cannot access the requested resource.
    </p>
    <p num="57">
      If the user is authorized to view or use the protected resource, then as shown in state 324, Runtime Module 206 sets certain environment variables and passes control to the protected resource 208.
      <br/>
      In the preferred environment, a REMOTE_USER environment variable is set to the user's login name.
      <br/>
      A HTTP_LOCALE environment variable is set to the user's language code.
      <br/>
      A HTTP_ROLES environment variable contains the user's roles for this resource.
      <br/>
      The environment variables are set so that the protected resource 208 may display different information or behave differently depending upon the values of the environment variables.
      <br/>
      If the protected resource 208 is a static HTML page, then HTTP Server 202 passes the page directly to the browser 100.
      <br/>
      If the protected resource 208 is a CGI-based program, it can dynamically generate and return a custom HTML page based on the user's name and roles.
    </p>
    <p num="58">Access Server</p>
    <p num="59">
      FIG. 4 is a block diagram of Access Server 106.
      <br/>
      An Access Server 106 is a Web server that authenticates users of the access system 2.
      <br/>
      In the preferred embodiment, Access Server 106 comprises an HTTP Server 402, Server Application Programming Interface (API) 404, an Authentication Client Module 414, Access Menu Module 412, Runtime Module 406, and Access Control Library 410.
    </p>
    <p num="60">
      HTTP Server 402 sends and receives messages and requests that conform to the HTTP protocol.
      <br/>
      Server API 404 enables external programs and processes to access functions of the HTTP Server 402.
      <br/>
      The Authentication Client Module 414 functions to provide an Authentication Service, Login Tracking Service, Profile Management Service, Authorization Service, and Logout Service.
      <br/>
      Each service is structured as one or more HTML pages, or CGI-based Java programs.
      <br/>
      The Access Menu Module 412 provides a Personalized Menu Service.
      <br/>
      It is also structured as one or more HTML pages or CGI-based Java programs.
      <br/>
      The Access Control Library 410 protects system resources and provides access to the Registry Server.
    </p>
    <p num="61">
      The Authentication Client Module 414 enables users to begin and end authenticated sessions and change their account profiles.
      <br/>
      The Authentication Service of Authentication Client Module 414 is invoked when a user opens the login page URL of the system 2.
      <br/>
      The Authentication Service is also invoked, as described above in connection with FIG. 2, FIG. 3A, FIG. 3B, and FIG. 3C, when a user tries to access a protected resource 208 without first logging in.
    </p>
    <p num="62">
      FIG. 5A is a state diagram of steps carried out by Access Server 106 in a preferred embodiment.
      <br/>
      As shown by state 502, browser 100 opens the URL of a login page.
      <br/>
      The login page prompts the user for a name and password, as shown in state 504.
      <br/>
      Preferably, a single login page is provided, regardless of the number of Web applications to which the user has access.
      <br/>
      Thus, the system 2 provides single secure log-in to Intranet or Extranet Web applications.
      <br/>
      The login page provides a single universal point of access to authorized applications and content.
    </p>
    <p num="63">
      The user enters the name and password into the login page using browser 100, which provides the name and password to Access Server 106.
      <br/>
      A user is considered authenticated if the name and password matches information stored in the Registry Server, as indicated by state 508.
      <br/>
      The Registry Server 108 returns the result of the verification step to Access Server 106, as shown by state 510.
      <br/>
      If the name and password cannot be authenticated or the account is marked inactive, then as shown by state 512, Access Server 106 returns an error message to browser 100.
    </p>
    <p num="64">
      For each login attempt, the Login Tracking Service logs the user's login activity.
      <br/>
      It saves the time of last successful and unsuccessful logins and number of consecutive, unsuccessful login attempts.
      <br/>
      The last successful and unsuccessful login times are displayed to the user after each successful login.
      <br/>
      Users can thus detect if someone else has attempted to use their account.
    </p>
    <p num="65">
      In the preferred embodiment, Administration Application 114 has a Login Monitoring function that displays a Login Monitoring data entry screen.
      <br/>
      An administrator may enter values that define the maximum consecutive unsuccessful login attempts allowed for a single user, and the number of minutes to lock an account when the maximum is reached.
      <br/>
      For multiple users, the Login Monitoring data entry screen accepts values for the maximum number of unsuccessful login attempts to track and the number of minutes during which unsuccessful login attempts are tracked.
      <br/>
      The administrator may also enable or disable email notification, and define a list of users who are notified when the system appears to be under attack.
    </p>
    <p num="66">
      FIG. 5B is a state diagram showing steps carried out in the Login Tracking Service.
      <br/>
      As shown by state 502, state 504, state 506, state 508, and state 510, the foregoing user login steps are carried out.
      <br/>
      After Registry Server 108 returns the result of verifying the user's name and password, Access Server 106 requests Registry Server 108 to record a login attempt, as shown in state 514.
      <br/>
      In state 516, Registry Server 108 informs Access Server 106 that a login attempt has been recorded in persistent storage in Registry Server 108.
      <br/>
      If the user is an authenticated user, then as shown in step 518, the date and time of the user's last successful and unsuccessful login are returned by Access Server 106 to browser 100, which may display the date and time information.
    </p>
    <p num="67">
      If the number of consecutive unsuccessful login attempts by a user exceeds a pre-determined number, which may be set by the administrator set amount, then Registry Server 108 and Access Server 106 cooperate to disable the user's account for a pre-determined period of time.
      <br/>
      The pre-determined period of time may be configured by the administrator.
    </p>
    <p num="68">
      Registry Server 108 also stores a count of the total number of unsuccessful login attempts made by any registered or unregistered user within a pre-determined period of time, which may be set by the administrator.
      <br/>
      The value of this number may indicate that someone is trying to break into user accounts.
      <br/>
      Registry Server 108 automatically notifies the administrator of such suspicious activity by electronic mail.
    </p>
    <p num="69">
      FIG. 5C is a state diagram of actions taken by the browser, Registry Server 108, and Access Server 106 when a user is authenticated.
      <br/>
      After a user is authenticated, the Authentication Client module 414 calls the Authorization service of Access Server 106.
      <br/>
      In response, the Authorization service requests profile information about the user from the Registry Server 108, as shown by state 520.
      <br/>
      In state 522, Registry Server 108 returns the profile information to Access Server 106.
      <br/>
      The profile information may comprise the user's name, locale information, IP address, and information defining roles held by the user.
      <br/>
      The Authorization service creates a "user cookie" 528 and "roles cookie" 530, which are used to convey profile information to browser 100.
      <br/>
      The "user cookie" contains a subset of the user profile information.
      <br/>
      The "roles cookie" contains a list of the user's roles.
    </p>
    <p num="70">
      As shown by state 524, cookie 528 and cookie 530 are encrypted and returned to the browser 100.
      <br/>
      Alternatively, state 524 may involve digitally signing cookie 528 and cookie 530 using a digital signature algorithm.
      <br/>
      Preferably, the cookies are encrypted rather than digitally signed because encryption is faster and produces a smaller cookie.
      <br/>
      Each of the cookies 528, 530 is marked with or contains an expiration date value.
    </p>
    <p num="71">
      Cookie 528 and cookie 530 are saved in memory by the browser 100 indefinitely, unless either of the cookies expires, i.e., the system clock becomes equal to or greater than the expiration date value.
      <br/>
      The cookies 528, 530 are passed to each Web server that the user accesses and that is within the same domain as the Access Server 106.
      <br/>
      When a user quits the browser 100, cookies that have not expired are saved on a mass storage device associated with the browser 100, such as a disk drive located at the user's client machine or terminal.
      <br/>
      Cookies that have an expiration date value of 0 are never saved on disk.
      <br/>
      Administrators can apply security policies to the system by setting cookie expiration times based on their organization's security policies.
    </p>
    <p num="72">
      FIG. 5D is a state diagram of steps carried out in logging a user out of the system 2.
      <br/>
      After accessing protected resources, users can logout by opening the URL of the system's logout page, as shown by state 532.
      <br/>
      In response, a Logout service of Access Server 106 returns encrypted cookies in the same manner as the Authorization service, as shown by state 534.
      <br/>
      The cookies returned in state 534, however, are invalid because their expiration time is in the past.
      <br/>
      Accordingly, as shown by state 536, browser 100 discards the expired cookies, and thereafter the user can access only pages that have been cached by the browser.
    </p>
    <p num="73">
      The Profile Management Service of Authentication Client module 414 enables a user to update the user's profile by changing password or locale information.
      <br/>
      Preferably, all passwords must have a number of characters that is equal to or greater than a pre-determined minimum length.
      <br/>
      The system administrator may set the minimum length.
      <br/>
      The system default minimum is six (6) characters and the maximum is 32 characters.
      <br/>
      Administrators may also define the time after which a user is prompted to change the user's password.
      <br/>
      This period can be set system wide or for each individual user.
      <br/>
      The system ensures that passwords are not reused.
    </p>
    <p num="74">
      Using a Localization Service of Runtime Module 206 of Access Server 106, a user can select the time zone, date format and the language in which the user wants to interact with resources.
      <br/>
      At run time, the Localization Service detects the user's locale settings based on information passed in HTTP requests from browser 100 to Access Server 106.
      <br/>
      The Localization Service uses the locale information to display messages in the user's language and display dates and times based on the user's time zone and selected date format.
    </p>
    <p num="75">
      FIG. 5E is a state diagram of a method delivering a role-specific access menu to a network user.
      <br/>
      In the preferred embodiment, after the Authorization service of Authentication Client module 414 has looked up a user's roles from the Registry Server 108, Access Menu Module 412 uses a Personalized Menu Service to build a list of resources 208 that are available to the user.
      <br/>
      As shown by state 538, Access Server 106 determines that the user is authentic, using the steps described above, and requests Registry Server 108 to return a profile of the user.
      <br/>
      In state 540, Registry Server 108 returns profile information for the user to Access Server 106.
      <br/>
      In response, the Personalized Menu Service constructs a personalized menu of resources showing only those resources that the user is authorized to access according to the user's profile information, including the user's roles and privileges.
      <br/>
      Each resource is identified by an icon, or graphic button that accesses a URL, or by an icon and a text hyperlink.
      <br/>
      The text string is taken from the name of the resource in the Registry Server.
      <br/>
      As shown by state 542, the personalized menu is returned to the browser 100 in the form of a Web page or HTML document.
      <br/>
      In state 544, the user or browser 100 selects one of the resources listed in the personalized menu.
    </p>
    <p num="76">Significantly, in this configuration, after the personalized menu is returned to the browser, no additional login is required to access additional resources in the personalized menu, until the user logs off, quits the browser 100, or until the expiration time of the cookies is reached.</p>
    <p num="77">
      The format of the personalized menu is determined by an HTML template stored in Access Server 106.
      <br/>
      An application programmer or developer may further customize the look of personalized menus for a particular installation by editing a template or by using the Access Control Library to create custom code.
    </p>
    <p num="78">Registry Server</p>
    <p num="79">
      The Registry Server manages access to the Registry Repository.
      <br/>
      FIG. 6 is a block diagram of a preferred embodiment of Registry Server 108, which comprises an Authentication Server Module 606, a Registry Repository 110, and an Access Control Library 610.
      <br/>
      Authentication Server Module 606 provides access to the Registry Repository 110, which stores User, Resource, and Role information.
      <br/>
      Access Control Library 610 also provides access to the Registry Repository.
    </p>
    <p num="80">
      Preferably, Authentication Server Module 606 is a multi-threaded Java server that handles remote procedure calls from the Access Server 106, Administration Application 114 and Runtime Module 206.
      <br/>
      The remote procedure calls are made using the API of Access Control Library 610, which preferably uses HTTP/SSL transactions that are encrypted for privacy.
      <br/>
      Authentication Server Module 606 accepts incoming remote procedure requests and uses Access Control Library 610 to make local procedure calls to read and write information in the Registry Repository 110.
      <br/>
      In this configuration, Authentication Server Module 606 can carry out HTTP communications with other elements of the system.
    </p>
    <p num="81">
      Registry Repository 110 is the primary data store for the system 2.
      <br/>
      It contains data on Users, Resources and Roles and configuration information required for the system 2 to function.
      <br/>
      Selected data, for example, passwords, are stored in Registry Repository 110 in encrypted form.
      <br/>
      The data about Users, Resources and Roles stored in Registry Repository 110 represents the structure of an enterprise or organization that has protected resources.
      <br/>
      Data in Registry Repository 110 is managed using Administration Application 114.
    </p>
    <p num="82">
      Preferably, Registry Repository 110 is implemented using a relational database with a stored procedure interface.
      <br/>
      Examples of suitable databases that can be used as the Registry Repository are the Oracle.RTM. database system or Microsoft SQL Server.
      <br/>
      Registry Repository 110 preferably is modular in order to enable support of Java Naming and Directory Interface (JNDI), Lightweight Directory Access Protocol (LDAP) and repositories from other vendors.
      <br/>
      Stored procedures increase performance because they are pre-compiled queries that are cached in memory by the database management system.
      <br/>
      In addition, a stored procedure can execute several database operations as one atomic operation and then commit or rollback the entire transaction.
    </p>
    <p num="83">Administration Application</p>
    <p num="84">
      Administration Application 114 is used by administrators to configure server components of the system, to set up user and resource records, assign roles to users and resources and manage changes to the system.
      <br/>
      The Administration Application provides these services by reading and writing information in Registry Server 108.
    </p>
    <p num="85">
      FIG. 7 is a block diagram of a preferred embodiment of Administration Application 114 incorporated in an administrator workstation 700.
      <br/>
      Administrators use a standard web browser 100 to invoke the Administration Application.
      <br/>
      Preferably, browser 100 has frames, JavaScript and Java support.
      <br/>
      In the preferred embodiment, Administration Application 114 (also called Administration Application Module) is coupled to a Runtime Module 706, and an Access Control Library 710.
      <br/>
      Administration Application 114 can create, delete, modify and records in the Registry Repository 110; assign roles; perform bulk operations; generate reports; and configure the system.
      <br/>
      Also preferably, Administration Application 114 is structured as one or more HTML pages, CGI-based Java programs, or applets.
    </p>
    <p num="86">
      Using Administration Application 114, an administrator may find, list, create, delete and modify user, resource and role records.
      <br/>
      Each role record contains a name string, unique identifier, description string and additional fields or attributes.
      <br/>
      Each user record stores profile information.
      <br/>
      For example, the user record profile information includes the user's first and last names, email address, login name, password, locale, whether the account is active or inactive, and when the password or account will expire.
    </p>
    <p num="87">
      Administration Application 114 also enables an administrator to assign roles to users and resources and specify dates within which a role is effective.
      <br/>
      A user is authorized to access a resource if the user and resource share a role and the type of access is implicit in the role.
    </p>
    <p num="88">
      Administration Application 114 can also carry out operations on a set of users, for example add or delete roles or change their account status.
      <br/>
      The operations can be performed on all users or sets of users, for example those with a specific Role.
      <br/>
      Administration Application 114 can generate reports on users, resources and roles.
      <br/>
      Reports may list resources accessible to particular users, roles and users that can access particular resources or users and resources that have been assigned particular roles.
      <br/>
      A short report is returned as an HTML page to be displayed by browser 100.
      <br/>
      Longer reports are processed in the background and saved in a tab-delimited file.
      <br/>
      The URL of the report file is sent to the administrator by electronic mail.
    </p>
    <p num="89">Administration Application 114 can configure system wide parameters, for example, set URLs for system Login, Logout and Access Restricted pages and configure servers, for example, list server names, protocols and ports.</p>
    <p num="90">Establishing Groups, Roles, Resources, and Associations</p>
    <p num="91">
      Using the Administration Application to establish a system for controlling access to protected information resources involves making an inventory of the resources, defining roles, and creating profiles for roles and persons.
      <br/>
      The inventory step involves listing all existing and planned resources for which protection and controlled access is desired.
      <br/>
      For each resource, access privileges, roles, and functional groups are identified.
      <br/>
      These steps are carried out once initially to establish system 2, and may be repeated at any desired time to integrate additional roles, user types, and resources into the system.
      <br/>
      From the following discussion, a preferred arrangement of database tables and forms will become apparent.
    </p>
    <p num="92">Defining Roles</p>
    <p num="93">
      Defining roles involves identifying role names, identifying functional groups, and defining user types.
      <br/>
      It may also involve associating roles to user types.
      <br/>
      Roles are developed by listing functions or capacities in which a person might act when they access Web resources and their functional group, department, or organizational unit.
      <br/>
      Roles should accurately represent the actual work roles carried out by individuals in the organization and the current kinds and levels of access that are appropriate for the resources of the organization.
      <br/>
      As a list of roles is developed, duplicates are eliminated, and duplicate roles are combined.
      <br/>
      As a result, a normalized list of roles is created.
      <br/>
      Developing the list of roles may also involve eliminating roles that are really user types.
      <br/>
      User types are then defined.
    </p>
    <p num="94">Creating profiles involves associating roles with resources and users, as well as associating user types with users.</p>
    <p num="95">Defining Functional Groups</p>
    <p num="96">
      Preferably, the Administration Application 114 can display a Functional Group Administration data entry form that accepts information defining a functional group.
      <br/>
      An administrator may complete and submit the data entry form for each fumctional group to be defined.
      <br/>
      In response, Registry Server 108 stores information defining the functional group in the Registry Repository 110.
      <br/>
      Each functional group is defined by an identifier value, a name, and a description.
      <br/>
      The identifier value uniquely identifies a particular functional group.
      <br/>
      The name value is displayed to users and administrators working with the functional group, and need not be unique.
      <br/>
      The description value is any information about the functional group that would be useful to administrators.
    </p>
    <p num="97">Defining Roles</p>
    <p num="98">
      The Administration Application 114 can display a Roles Administration data entry form that accepts information defining a role.
      <br/>
      An administrator may complete and submit the data entry form for each role to be defined.
      <br/>
      In response, Registry Server 108 stores information defining the role in the Registry Repository 110.
      <br/>
      Each role is defined by a role identifier value, a role name, an associated functional group value, and a description.
      <br/>
      The role identifier value uniquely identifies a particular role, and is used internally only.
      <br/>
      The role name value is displayed to users and administrators working with the role, and need not be unique.
      <br/>
      The associated functional group value is one of the previously defined functional groups in which the current role belongs.
      <br/>
      Each role may be assigned to only one functional group.
      <br/>
      The description value is any information about the role that would be useful to administrators.
    </p>
    <p num="99">Defining Resources</p>
    <p num="100">
      The Administration Application 114 can display a Resource Administration data entry form that accepts information defining a role.
      <br/>
      An administrator may complete and submit the data entry form for each resource to be defined in the system 2 and protected by the system.
      <br/>
      In response, Registry Server 108 stores information defining the resource in the Registry Repository 110.
      <br/>
      Each resource is defined by a resource identifier value, a resource name, a description, a Web server, a Relative URL, and a list of protected resources.
    </p>
    <p num="101">
      The resource identifier value uniquely identifies a particular resource, and is used internally only.
      <br/>
      An example of a resource ID is "qsres".
      <br/>
      The resource name value is displayed to users and administrators working with the resource, and need not be unique.
      <br/>
      An example of a resource name is "Query String Resource".
      <br/>
      The description value is any information about the resource that would be useful to administrators.
      <br/>
      The Web server value identifies the server on which the resource exists, by global top-level domain, primary domain name, secondary domain name, and (optionally) port.
      <br/>
      An example of a Web server value is "montana.encommerce.com:80".
    </p>
    <p num="102">
      The Relative URL value identifies a location of the resource relative to an HTML directory of the Web server identified by the Web server value.
      <br/>
      An example of a Relative URL value is "/cgi-bin/salesreport.exe?project=sales&amp;report=quarterlystatus".
    </p>
    <p num="103">
      The list of protected resources identifies one or more locations of resources for which access control is desired when a user attempts to connect to the specified Web server and Relative URL.
      <br/>
      The list of protected resources may identify resources by a literal name, such as a file name of an executable program, or by a name that includes one or more wildcard characters.
      <br/>
      When a name with wildcard characters is specified, the system can protect an entire directory, subdirectory, group of files or documents, etc., using a single resource identifier.In the preferred embodiment, the foregoing information is entered in a Create Resource screen, i.e., a Web page form that an administrator fills in and submits to system 2, e.g., by pressing a SAVE button.
      <br/>
      Preferably, to facilitate construction of the list of protected resources, the Create Resource screen displays a scrollable list of the protected resources, a resource name text field, an ADD button, REPLACE button, REMOVE button, and a CLEAR ENTRY button.
      <br/>
      The list of protected resources is prepared by entering a text string in the resource name field and selecting the ADD button, which adds the string to the list.
      <br/>
      Alternatively, selecting the REPLACE button causes the string to replace a previously entered resource name.
      <br/>
      Selecting the REMOVE button, after selecting a previously entered resource name, deletes that name from the list.
      <br/>
      Selecting the CLEAR ENTRY button resets the list to a null state, so that no resource names are displayed or stored in association with the current resource identifier.
    </p>
    <p num="104">Defining User Types or Person Types</p>
    <p num="105">
      The Administration Application 114 can display a User Type or Person Type Administration data entry form that accepts information defining a user type.
      <br/>
      An administrator may complete and submit the data entry form for each user type to be defined in the system 2 and protected by the system.
      <br/>
      In response, Registry Server 108 stores information defining the user type in the Registry Repository 110.
      <br/>
      Each resource is defined by a user type identifier value and a description value.
      <br/>
      The user type identifier value uniquely identifies a particular user type, and is used internally only.
      <br/>
      The description value is any information about the resource that would be useful to administrators.
    </p>
    <p num="106">Defining Users</p>
    <p num="107">
      Preferably, the Administration Application 114 can display a User Administration data entry form that accepts information defining a user.
      <br/>
      An administrator may complete and submit the data entry form for each individual user to be defined.
      <br/>
      In response, Registry Server 108 stores information defining the user in the Registry Repository 110.
      <br/>
      Each user is defined by personal information, login and password information, and account information.
    </p>
    <p num="108">
      Preferably, the personal information comprises a first name value, a last name value, an email address value, and a user type value.
      <br/>
      The first name value, last name value, and email address correspond to the name and address of the individual user.
      <br/>
      The user type value is one of the previously defined user type values stored in the Registry Repository 110.
      <br/>
      The login and password information preferably comprises a login name and password value for the user.
    </p>
    <p num="109">
      The account information comprises a Change Password value, an Account Status value, an Account Expiration Date value, a Locale value, a Time Zone value, and a Date Format value.
      <br/>
      The Change Password value is the number of days after which a user must change the user's password.
      <br/>
      The Account Status value indicates whether the user's account is active, suspended, or permanently inactive.
      <br/>
      The Account Expiration Date value identifies a date on which the user's account expires and becomes invalid.
      <br/>
      The Locale value identifies a language and a country or geographic region associated with the user, such as "English--United States" or "French--Canada." The Time Zone value identifies a world time zone in which the user is physically located.
      <br/>
      The Date Format value specifies how date and time values are to be displayed at the browser 100.
    </p>
    <p num="110">Defining Administrative Roles to Delegate Administration Functions</p>
    <p num="111">
      In many contexts, centralized administration of a system is undesirable.
      <br/>
      To overcome this problem, Administration Application 114 can delegate administration of users, roles, servers or the system to other administrators.
      <br/>
      The system 2 defines a special type of role, called an Admin Role.
      <br/>
      When the Admin Role is assigned to a user, that user has the right to perform administrative functions.
      <br/>
      An example of an Admin Role is "Help Desk Administrator." An enterprise might have a dozen such administrators located at various sites of the enterprise.
    </p>
    <p num="112">Each Admin Role is defined by an Administrative Role ID value, an Administrative Role Name, a Functional Group value, a Description, an Administrative Privilege, and a Server Configuration value.</p>
    <p num="113">
      The Administrative Role ID value uniquely identifies the Admin Role.
      <br/>
      The Administrative Role Name value is the name of the Admin Role that is displayed to users and administrators working with the Admin Role.
      <br/>
      The Functional Group value identifies one of the functional groups that is associated with the Admin Role.
      <br/>
      Each Admin Role may be assigned to only one functional group.
      <br/>
      In one embodiment, the Administrative Privilege value has one of the four exemplary values set forth in Table 1, which describes the administrative functions that can be carried out by each of the privilege levels.
      <br/>
      The Server Configuration value indicates whether this Admin Role can modify server configuration information.
    </p>
    <p num="114">
      -- TABLE 1
      <br/>
      -- ADMINISTRATIVE FUNCTIONS
      <br/>
      --                       ADMINISTRATION PRIVILEGE LEVEL
      <br/>
      --                       Help    Role      User
      <br/>
      -- FUNCTION              Desk    Admin     Admin     System
      <br/>
      -- find, view a user record YES     YES       YES       YES
      <br/>
      -- reset user's password YES     NO        YES       YES
      <br/>
      -- view user's roles YES     YES       YES       YES
      <br/>
      -- assign, remove particular NO      YES       YES       YES
      <br/>
      -- roles from user records
      <br/>
      -- create, delete, modify user NO      NO        YES       YES
      <br/>
      -- records
      <br/>
      -- all administrative functions NO      NO        NO        YES
      <br/>
      -- except those defined by the
      <br/>
      -- configuration privilege
    </p>
    <p num="115">
      For example, consider a user who is defined in the Registry Repository as having a Record Type of User, a Record Name of Harvey, and a Role of Hotline Staff.
      <br/>
      A field in the Admin Role record specifies whether that user is assigned the "configuration privilege".
      <br/>
      This privilege allows an administrator to configure and maintain servers in the system.
      <br/>
      For example, the Registry Repository contains a record having a Record Type of Admin Role, a Record Name of Hotline Staff, a Configuration Privilege of No, and an Administration Privilege of HelpDesk Admin.
      <br/>
      Another field in the Admin Role record specifies the set of administrative functions that may be performed.
    </p>
    <p num="116">
      The Help Desk privilege may be delegated to hotline staff to allow them to handle the most common support questions.
      <br/>
      For example, hotline staff can help users who have forgotten their account passwords by resetting their passwords.
    </p>
    <p num="117">
      The Role Admin privilege may be delegated to owners of a particular resource, for example the technical support database.
      <br/>
      Administrators in the Technical Support Department would be able to control who has access to that resource by assigning or removing roles associated with that resource from user accounts.
      <br/>
      The list of roles that may be managed by an administrator with this privilege is limited to the roles that have been assigned to their associated Admin Role record.
    </p>
    <p num="118">
      For example, consider a user described in the Registry Repository 110 having a Record Type of User, a Record Name of Terry, and Roles described as TechSupport Administrator.
      <br/>
      There can be an administrative role described by a record of Registry Repository 110 having a Record Type of Admin Role, a Record Name of TechSupport Administrator, a Configuration Privilege of No, an Administration Privilege of Role Admin, and having Roles of TechSupport Manager, TechSupport Staff.
    </p>
    <p num="119">
      The system is installed with a "super user" or "SuperUser Administrator" account that is assigned an Admin Role with Configuration Privileges and System Administration Privileges.
      <br/>
      The super user account can be used to configure, populate and maintain a system.
      <br/>
      In particular, the super user account can be used to delegate administration by creating Admin Role records and assigning them to user records.
      <br/>
      In the preferred embodiment, the super user account is described in the Registry Repository 110 as having a Record Type of User, a Record Name of "websecadm," and Roles of SuperUser Administrator.
      <br/>
      There is also a record having a Record Type of Admin Role, a Record Name of SuperUser Administrator, a Configuration Privilege of Yes, and an Administration Privilege of System.
    </p>
    <p num="120">
      In other embodiments, the privilege levels may be user-defined.
      <br/>
      For example, an administrator may specify a name for a privilege level, and selectively assign or un-assign each of the Functions identified in the table above.
      <br/>
      In still another embodiment, an administrator may specify aspects of the functions as well.
      <br/>
      In yet another embodiment, the administrator may specify how a user having each privilege level is authenticated, for example, using a username and password as well as a digital certificate, secure token, one-time password card, etc.
    </p>
    <p num="121">Modifying Functional Groups, Roles, Resources, and Users</p>
    <p num="122">
      In the preferred embodiment, each of the data entry forms and screens described above further comprises a Create button, a Modify button, and a Delete button.
      <br/>
      The Create button is used to create a new record using the above-described forms, to enter new data, and to save the data that is entered.
      <br/>
      The Modify button is used to access an existing record of one of the forms, to modify the data or enter new data, and to save the modified data.
      <br/>
      The Delete button is used to retrieve and review an existing record and command system 2 to delete that record.
      <br/>
      These functions of the Create, Modify, and Delete button are implemented in the Administration Application.
    </p>
    <p num="123">
      FIG. 10A is a simplified block diagram of an exemplary screen display or HTML, page 1002 that is generated by Administration Application 114 for display by browser 100 when a Resource Administration function is selected.
      <br/>
      Page 1002 comprises a Find field 1004, a list 1006 of existing resources 1008a-1008n, a Create button 1010, a Modify button 1012, a Delete button 1014, and an Assign Roles button 1016.
      <br/>
      When the list 1006 is long, it may be difficult to locate an existing resource.
      <br/>
      A user may enter keywords describing a resource in the Find field 1004 and then select or click on one of the buttons 1010, 1012, 1014.
      <br/>
      In response, Administration Application 114 will attempt to find and display existing information about the resource from Registry Repository 110.
      <br/>
      The Create button 1010, Modify button 1012, and Delete button 1014 are used to access create, modify, and delete functions as described above.
    </p>
    <p num="124">Associating Roles with Resources</p>
    <p num="125">
      An administrator may create an association of a role with one or more resources, in Registry Repository 110, by selecting one of the resources 1008a-1008n from the list 1006 and then selecting the Assign Roles button 1016 shown in FIG. 10A. In response, Administration Application displays a role assignment display for the selected resource.
      <br/>
      FIG. 10B is a simplified block diagram of a role assignment display 1020.
      <br/>
      The display 1020 preferably comprises a Find field 1022, a search domain field 1023, a list 1026 of available roles 1028a-1028n, an assigned roles list 1024, an Assign button 1036, an Unassign button 1034, a Save button 1027, a Cancel button 1030, and a Reset button 1032.
    </p>
    <p num="126">
      The title of display 1020, "Assigning Roles to National Sales Report," indicates that the user selected the resource "National Sales Report" 1008b from the list 1006 of FIG. 10A. To create an association of a role to the selected resource, a user selects one of the roles 1028a-1028n from the list 1026 and selects the Assign button 1036.
      <br/>
      In response, Administration Application 114 displays the selected role (such as "Sales Manager") in the assigned roles list 1024.
      <br/>
      The user or administrator may make the displayed association persistent in the Registry Repository 110 by selecting the Save button 1027.
      <br/>
      In response, Administration Application creates an association of the "Sales Manager" role to the "National Sales Report" resource and stores the association in the database.
    </p>
    <p num="127">
      By these actions, the user specifies that persons having the role of "Sales Manager" are authorized to view or use the "National Sales Report" resource.
      <br/>
      Any user who is assigned the role of "Sales Manager" in the future will automatically have access to the "National Sales Report" resource.
      <br/>
      If the administrator later un-assigns "Sales Manager" from the "National Sales Report" resource, then all users associated with the "Sales Manager" role will automatically lose access to the resource.
    </p>
    <p num="128">
      The administrator may cancel the displayed association by pressing the Unassign button 1034.
      <br/>
      If multiple roles are displayed in the assigned roles list 1024, and the administrator wishes to remove all of them, the administrator may either press the Unassign button 1034 multiple times until all roles are un-assigned.
      <br/>
      Alternatively, the administrator may press the Reset button 1032, which clears the assigned roles list 1024.
    </p>
    <p num="129">
      When the list 1026 of roles 1028a-1028n is long, it may be difficult to locate a particular role for assignment.
      <br/>
      A user may enter one or more keywords describing a role in the Find field 1022 and then select or click on a "Find" activation button or graphic.
      <br/>
      In response, Administration Application 114 will attempt to find and display existing information from the domain indicated in the search domain field 1023, from Registry Repository 110, and display or highlight the role in the list 1026.
      <br/>
      Roles may be defined and stored in one or more searchable domains.
      <br/>
      The administrator may select a domain of information as the source of role information by selecting the desired domain from a pull-down list displayed in the search domain field 1023.
      <br/>
      Examples of domains that may serve as a source of assigned information include Roles, Resources, and Functional Groups.
    </p>
    <p num="130">Working With Groups of Users</p>
    <p num="131">
      FIG. 10C is a simplified block diagram of a user interface display 1040 that is generated by Administration Application 114 to enable operations to be carried out for a group of users.
      <br/>
      In the preferred embodiment, when Administration Application 114 is invoked by an administrator using browser 100, it generates a top-level menu for display by the browser.
      <br/>
      The top-level menu includes a Groups button.
      <br/>
      The display 1040 is generated in response to selection of the Groups button.
      <br/>
      Alternatively, the display 1040 is displayed in a frame of a Users screen of the Administration Application.
    </p>
    <p num="132">Display 1040 preferably comprises a Find field 1042, a user parameter pull-down list 1043, a list 1046 of available users 1048a-1048n, a list 1044 of users who are assigned to a group, an Assign button 1047, an Unassign button 1045, a Reset button 1054, an Add Roles button 1056, a Remove Roles button 1052, and a Change Status button 1050.</p>
    <p num="133">
      To create a set of users to work with, an administrator or other authorized user selects one of the users 1048a-1048n from the list 1046 and selects the Assign button 1047.
      <br/>
      In response, Administration Application 114 displays the selected user, such as user "Bruce Ward" 1048n in the example of FIG. 10C, in the assigned users list 1044.
      <br/>
      The user or administrator may add as many users as desired.
      <br/>
      When the user determines that the group is complete, the user selects the Add Roles button 1056, Remove Roles button 1052, or Change Status button 1050 according to the function that the user desires to carry out for the group.
      <br/>
      In response, Administration Application displays an appropriate data entry screen, receives data entered by the user, and stores the data in the Registry Repository 110 in association with each user in the group.
    </p>
    <p num="134">
      The administrator may remove a user from the group by pressing the Unassign button 1045.
      <br/>
      If multiple roles are displayed in the list 1044, and the administrator wishes to remove all of them, the administrator may either press the Unassign button 1045 multiple times until all roles are un-assigned.
      <br/>
      Alternatively, the administrator may press the Reset button 1054, which clears the assigned roles list 1044.
    </p>
    <p num="135">
      When the list 1046 of users 1048a-1048n is long, it may be difficult to locate a particular role for assignment.
      <br/>
      A user may enter one or more keywords describing a user in the Find field 1042 and then select or click on a "Find" activation button or graphic.
      <br/>
      In response, Administration Application 114 will attempt to find and display existing information about the user from Registry Repository 110 and display or highlight the user in the list 1046.
      <br/>
      The Find function may be carried out based upon a user name or other user information.
      <br/>
      The administrator may select a value as the basis of the Find function by selecting the desired parameter from pull-down list 1043.
    </p>
    <p num="136">
      The foregoing example describes creating a set or group of users based upon names of the users.
      <br/>
      Alternatively, users may be selected and added to a group by role or user type.
    </p>
    <p num="137">Access Control Library</p>
    <p num="138">
      Access Server and Administration Application use the Access Control Library (ACL) to make remote procedure calls to Registry Server 108.
      <br/>
      Authentication Server Module of the Registry Server 108 uses the ACL to make local procedure calls to the Registry Repository 110.
    </p>
    <p num="139">
      Remote procedure calls to Registry Server 108 are authenticated using digital certificates, encrypted, and encapsulated within HTTP transactions.
      <br/>
      If a target Registry Server 108 does not respond to a remote procedure call, the call is automatically re-routed to an alternative Registry Server.
      <br/>
      This results in increased performance due to load balancing and increased reliability due to redundant operations.
    </p>
    <p num="140">
      Preferably, each Registry Server 108 is installed within a secure network or Intranet.
      <br/>
      Each Access Server 106, however, may be installed in a relatively less secure network or extranet.
      <br/>
      A subset of the Access Control Library is installed on Access Servers 106 so that if security is compromised on that server, the Access Control Library cannot be used to damage information in the Registry Repository 110.
    </p>
    <p num="141">
      Preferably, local procedure calls to the Registry Repository 110 are made using a JDBC driver.
      <br/>
      The driver uses an RDBMS network protocol to read and write information in the Registry Repository 110.
      <br/>
      For example, the RDBMS network protocol is SQL*Net v2.0 which is used to access an Oracle database.
      <br/>
      For encryption, the libraries commercially available from RSA Data Security of San Mateo, Calif. are preferred.
    </p>
    <p num="142">
      The Access Control Library also includes a Public API that enables application programmers or developers to customize the system 2.
      <br/>
      For example, in the preferred embodiment, the ACL exports Java.RTM. classes called UserResourceMenu and UserAPI, which may be used by developers to provide several services.
      <br/>
      As an example, the classes can be used to customize the look of a personalized menu; the developer edits a template and specifies the background, banner and buttons.
      <br/>
      The developer can further customize a personalized menu by extending the UserResourceMenu class to provide additional functionality, for example, to display a hierarchy of resources that a user may navigate.
      <br/>
      The developer may enable resources to read custom fields in a User's profile, for example a User's date of birth.
      <br/>
      For security reasons, user password cannot be read or written.
      <br/>
      Further, the developer may configure import/export utilities to synchronize User records in the Registry Repository 110 with records in other data stores.
    </p>
    <p num="143">A detailed description of the Access Control Library Public API is set forth in APPENDIX 1 to this document.</p>
    <p num="144">Integration Tools</p>
    <p num="145">
      In the preferred embodiment, system 2 includes templates and sample code, collectively designated as Integration Tools 115 of FIG. 1, which may be used by developers to customize the system and integrate resources into the system.
      <br/>
      For example, Integration Tools 115 enable developers to customize the look of Personalized Menus, implement custom self-registration policies and add custom fields to user records.
    </p>
    <p num="146">
      The system provides a central repository for user information in the form of Registry Repository 110, but enterprises may have existing stored information about users of other information systems.
      <br/>
      For example, an enterprise may have resources with proprietary authentication and authorization data stores.
      <br/>
      It is desirable to batch load user information from such data stores.
      <br/>
      In order to co-exist with multiple data stores, the Access Control Library (Public API) may be used to import, export and synchronize information with other data stores using, for example, LDAP or JNDI.
      <br/>
      For security reasons, user passwords may not be read or written.
    </p>
    <p num="147">
      The system 2 simplifies the development and deployment of new web resources by allowing developers to leverage its authentication and authorization services while focusing on core application functionality.
      <br/>
      When an authenticated user selects the resource, Runtime module 206 will set environment variables and pass control to the resource.
      <br/>
      The resource may read the user's name and roles from REMOTE_USER and HTTP_ROLES and additional attributes from Registry Server 108.
      <br/>
      The resource may then return information in HTML pages, customized, based on the individual user.
    </p>
    <p num="148">
      Such "legacy" resources generally have their own proprietary client applications, client-server protocols and data stores containing authentication and authorization information.
      <br/>
      In order to integrate with system 2, such resources must be Web-enabled and have the ability to export information in HTML pages.
      <br/>
      Generally, such resources are provided with one or more CGI-based programs that accept browser requests to a Web server and return information from the legacy data store, formatted in dynamically generated HTML pages.
      <br/>
      Alternatively, the legacy data may be integrated with an intelligent front end, such as Apple.RTM. WebObjects.RTM..
    </p>
    <p num="149">
      Before a legacy resource can service the request, the user must be authenticated and authorized.
      <br/>
      This may be done in several different ways.
      <br/>
      As one example, the resource may assume that all requests to it have been authenticated and authorized.
      <br/>
      It can disable legacy authentication and authorization services and use environment variables.
      <br/>
      As a second example, the resource may assume that the request is authenticated but may not be able to use system roles.
      <br/>
      It may have to lookup authorization attributes from the legacy data store.
      <br/>
      The resource may get the user's name from REMOTE_USER or it may have to map REMOTE_USER to a name in the legacy data store.
      <br/>
      It may look for this mapping in the Registry Server using the Access Control Library (Public API).
    </p>
    <p num="150">
      As a third example, assume the resource cannot be modified and the CGI program must imitate the proprietary client application.
      <br/>
      In this case, the CGI program may have to use REMOTE_USER to get the user's name and password in the legacy system from the Registry Server.
      <br/>
      It can then use this information to login and access the legacy resource.
    </p>
    <p num="151">Customization</p>
    <p num="152">
      As described above, in the preferred embodiment, system 2 comprises a plurality of templates stored in association with Access Server 106.
      <br/>
      Each template is an HTML file that generates and is associated with a particular page or display generated by the system.
      <br/>
      An administrator may customize the appearance of displays of system 2 by modifying one or more of the templates.
    </p>
    <p num="153">
      Also preferably, some settings of system 2 are stored in one or more configuration files.
      <br/>
      Settings of system 2 can be customized by modifying the configuration files and the settings in them.
      <br/>
      A list of settings that can be customized, and an explanation of their values and the effect upon the system caused by changing them, is set forth in APPENDIX 2.
    </p>
    <p num="154">Security</p>
    <p num="155">
      The system 2 provides authentication and authorization services with several levels of security.
      <br/>
      The system 2 is based on security features at the network, session and transaction levels.
    </p>
    <p num="156">Network Security</p>
    <p num="157">
      FIG. 8 is a block diagram of the system 2 of FIG. 1 showing preferred security structures and functions.
      <br/>
      Preferably, system 2 uses one or more firewalls to protect components of the system while providing secure access to users from inside and outside the enterprise.
      <br/>
      A firewall filters network traffic and controls access to network services.
      <br/>
      Packets may be filtered based on various criteria, including network protocol, source IP address and destination application.
    </p>
    <p num="158">
      For example, a soft firewall 802 is logically interposed between network 102, which may be the Internet, and Access Server 106.
      <br/>
      A hard firewall 804 separates Registry Server 108 from Access Server 106, the network 102, and other elements of the system.
      <br/>
      A soft firewall is a screening router which blocks certain protocols and prevents IP spoofing.
      <br/>
      A hard firewall is a router and gateway that blocks all packets, except those between specified applications, for example the Access Server and the Registry Server.
    </p>
    <p num="159">
      Further, Access Server 106 and Registry Server 108 are coupled by an encrypted link 109.
      <br/>
      Communications between Access Server 106 and browser 100 over network 102 use encrypted cookies for security.
    </p>
    <p num="160">
      In this context, the Internet is that part of the network that is considered untrusted.
      <br/>
      The extranet is the network between the soft and hard firewalls and the Intranet is the most secure part of the network, located behind the hard firewall.
      <br/>
      A company's public access web server will generally be placed on the Internet.
      <br/>
      Services accessible to users inside and outside the enterprise, for example protected resources and the Access Server should be placed on the more secure Extranet while internal services and the Registry Server should be secured in the Intranet.
    </p>
    <p num="161">Session Security</p>
    <p num="162">
      All transactions between components in the system are made using HTTP over SSL sessions.
      <br/>
      For example, browser 100 initiates an SSL session with a handshake during which it negotiates a hash function and session encryption key with HTTP Server 402 of Access Server 106.
      <br/>
      Once the session is established, all data exchanged between browser 100 and HTTP server 402 is encrypted.
    </p>
    <p num="163">
      The SSL hash function is used to ensure data integrity, that is, to ensure that transactions are not tampered with or altered in any way.
      <br/>
      SSL encryption is used to ensure that each transaction is private and confidential.
      <br/>
      This means that no one can wiretap or eavesdrop and read the contents of transactions.
      <br/>
      Thus no one can intercept names, passwords and cookies.
    </p>
    <p num="164">Transaction Security</p>
    <p num="165">
      System 2 enforces transaction-level security in several different ways.
      <br/>
      For example, a user logs into the system by opening a login page and typing in a name and password, in the manner described above in connection with FIG. 5B. As the user types in the password, the system displays a "*" for each character typed so that another person cannot discover the password as it is being typed in.
      <br/>
      The name and password are sent to the Access Server 106 in an HTTP transaction over an SSL session.
      <br/>
      Since the session is encrypted, the transaction is private and confidential.
    </p>
    <p num="166">
      Access Server 106 and Registry Server 108 exchange digital certificates over encrypted link 109.
      <br/>
      The digital certificates are used during the SSL handshake for mutual authentication.
      <br/>
      Remote procedure calls from Access Server 106 to Registry Server 108 are then sent over an encrypted HTTP/SSL session.
    </p>
    <p num="167">
      Access Server 106 asks Registry Server 108 to verify the user's password.
      <br/>
      Passwords are stored in the Registry Server 108 in an encrypted format.
      <br/>
      The Registry Server 108 compares passwords and returns the result.
      <br/>
      If the password is correct, Access Server 106 encrypts data in a User cookie 528 and Roles cookie 530.
      <br/>
      Cookies are encrypted rather than digitally signed because encryption is faster and produces a smaller cookie, both factors that result in better performance.
    </p>
    <p num="168">
      Cookies are passed from the Access Server 106 to the browser 100.
      <br/>
      The browser passes the cookies to every web server that it contacts that is in the same domain as the Access Server 106.
      <br/>
      Browser 100 discards the cookies when they expire or when the user logs off.
      <br/>
      Cookies that have not expired when the browser is closed are saved on disk while cookies with an expiration time of 0 are never saved.
      <br/>
      Cookies are passed to the Protected Server 104 over an encrypted HTTP/SSL session.
    </p>
    <p num="169">
      If the Runtime Module 206 on a Protected Server 104 can decrypt the cookies successfully, it knows that they must have been created by an Access Server 106 in the same installation.
      <br/>
      It therefore knows that the request comes from an authenticated user.
    </p>
    <p num="170">
      To ensure that the cookies are not replayed, the Runtime Module 206 checks that the IP address of the request matches the IP address in the cookie.
      <br/>
      Thus cookies cannot be intercepted on a user's computer and reused from another computer.
      <br/>
      The risk of cookies being replayed is further reduced if administrators set the expiration period to 0.
      <br/>
      In this case, the browser will not save the cookies to disk.
    </p>
    <p num="171">
      System 2 requires resources to enforce access rights implicit in roles.
      <br/>
      Resources must take a user's roles into account before returning appropriate information.
    </p>
    <p num="172">
      System 2 does not assume full cooperation from users, but it cannot protect from user actions like disclosing passwords or leaving workstations untended with authenticated browser sessions open.
      <br/>
      System 2 seeks to minimize the impact of these actions by automatically expiring passwords and sessions using administrator defined expiration periods.
    </p>
    <p num="173">Reports</p>
    <p num="174">
      In the preferred embodiment, Administration Application 114 can generate reports that list information stored in Registry Repository 110.
      <br/>
      For example, Administration Application 114 generates a Roles By Resource report that lists roles that are supported by specified resources.
      <br/>
      Administration Application 114 generates a Users By Resource report that lists users having access to specific resources, and the users' roles.
      <br/>
      Administration Application 114 generates a Resources By Role report that lists resources assigned to specific roles.
      <br/>
      Administration Application 114 generates a Users By Role report that lists users assigned to specific roles.
    </p>
    <p num="175">
      Administration Application 114 generates a Users By Temporary Role report that lists users assigned to temporary roles.
      <br/>
      Administration Application 114 generates a User Profile report that lists roles and resources associated with specific users.
      <br/>
      Administration Application 114 generates a User type report that lists all user types and their default roles.
      <br/>
      Administration Application 114 generates a Functional Group report that lists all functional groups and associated roles.
    </p>
    <p num="176">
      Preferably, the top-level menu generated by Administration Application 114 has a Reports button.
      <br/>
      An administrator or other authorized user may access reports by selecting the Reports button.
      <br/>
      In response, Administration Application 114 displays a list of available reports.
      <br/>
      The user selects a desired report and then selects a "Run" button.
      <br/>
      In response, Administration Application 114 generates the selected report.
      <br/>
      Reports that do not exceed the capacity of browser 100 are displayed as HTML pages at the browser.
      <br/>
      Longer reports are generated in the form of a text file that can be downloaded.
    </p>
    <p num="177">Log Files</p>
    <p num="178">Preferably, system 2 generates a runtime log file and a registry log file that report changes in the configuration of elements of the system, and errors.</p>
    <p num="179">
      The runtime log file is generated by Runtime Module 206 and reports possible errors that occur during initialization of the Runtime Module.
      <br/>
      The runtime log file also reports possible misuse of cookies, for example, a user attempting to use a cookie file copied or stolen from another user or machine.
    </p>
    <p num="180">
      The registry log file reports startup parameters of the Authentication Server module 606.
      <br/>
      The startup parameters include default time zone, whether SSL protocol is enabled, number of threads, etc.
      <br/>
      The registry log file also reports information about whether the Registry Server 108 started correctly.
    </p>
    <p num="181">Scalability</p>
    <p num="182">
      The system was designed to handle a large number of users accessing a large number of resources, resulting in thousands of login transactions per day and a large number of concurrent transactions.
      <br/>
      Such scalability is achieved in several ways.
      <br/>
      For example, there are no logical limits on the number of users or resources.
      <br/>
      The Registry Repository 110 is implemented using a high-capacity database that can hold a large number of records.
      <br/>
      The system is optimized for minimal network traffic.
    </p>
    <p num="183">
      Users only log in once during a authenticated session.
      <br/>
      No further transactions are required between servers and users or resources.
      <br/>
      The system has a distributed architecture.
      <br/>
      Components and protected resources can be installed on a single web server platform as long as it has adequate storage capacity and computing power.
    </p>
    <p num="184">
      Components may be moved to different servers and replicated on multiple servers to handle an increasing number of concurrent users.
      <br/>
      Users may login to any Access Server and Domain Name Servers may load balance by returning Access Server address using a round robin scheme.
      <br/>
      Access Servers in turn may use an alternate Registry Server if a target server does not respond.
    </p>
    <p num="185">
      Multiple servers increase system performance by reducing login transaction times and increase system reliability by providing redundancy and increased availability.
      <br/>
      Further, the system is based on an additive data model in which higher levels of user authorization are constructed by incrementally adding privileges and rights to roles that have restrictions on user action.
      <br/>
      Roles specify which resources a user may access.
      <br/>
      Assigning a role to a user or deleting a role from a user can add or delete access to all resources with that role.
      <br/>
      Similarly, adding a role to a resource or removing a role from a resource can give or take away access to that resource from all users with that role.
      <br/>
      The Administration Application allows administrators to make such changes with a single click, resulting in significant administration time savings.
    </p>
    <p num="186">
      The system enables administrators to delegate administration.
      <br/>
      Large-scale systems typically generate constant changes and a decentralized administration model enables faster deployment of changes.
      <br/>
      For example, Help Desk functions may be delegated to hotline personnel and the implementation of access policies to departmental resources may be delegated to departmental administrators.
    </p>
    <p num="187">Preferred Supporting System Elements</p>
    <p num="188">
      In the preferred embodiment, the browser 100 used by end users may be any Web browser having cookie support.
      <br/>
      JavaScript support is optional but recommended.
      <br/>
      Administrators may use any Web browser with support for frames, JavaScript and execution of Java.RTM. applets.
      <br/>
      In the preferred embodiment, end users and administrators may use the Netscape Navigator browser or the Microsoft Internet Explorer browser.
      <br/>
      In one embodiment, the browser used by end users may have fewer capabilities than the browser used by administrators.
    </p>
    <p num="189">
      The Protected Web Server, Access Server and Administration Application use the Runtime Module, which runs on web servers with HTTP 1.1 or higher and Web server APIs, such as Netscape's NSAPI or Microsoft's IISAPI.
      <br/>
      In addition, server components of the system use SSL v2.0 or higher, the Java Virtual Machine and JDBC driver v2.3.2 from WebLogic.
    </p>
    <p num="190">
      In the preferred embodiment, the server components of the system may be implemented using (1) SunSoft Solaris v2.5 or higher on Sun SPARC servers, and Netscape Enterprise Server v2.0 or higher; (2) Microsoft Windows NT v4.0 or higher on Pentium/Pentium Pro servers and Microsoft Internet Information Server v3.0 or higher; or (3) HP/UX v10.20 or higher with Netscape Enterprise Server v2.0 or higher.
      <br/>
      In Sun or HP systems, the Registry Repository may be the Oracle7.RTM. database server, version 7.3.2 or later, with SQL*NET v2.0, and Microsoft server systems may additionally use MS SQL-Server v6.5 as the Registry Repository.
    </p>
    <p num="191">The system may be developed and implemented using C/C++, Java.RTM., JavaScript, PL/SQL, Microsoft.RTM. Visual C++, Symantec.RTM. Visual Cafe and Oracle.RTM. CASE Designer 2000.</p>
    <p num="192">Hardware Overview</p>
    <p num="193">
      FIG. 9 is a block diagram that illustrates a computer system 900 upon which an embodiment of the invention may be implemented.
      <br/>
      Computer system 900 includes a bus 902 or other communication mechanism for communicating information, and a processor 904 coupled with bus 902 for processing information.
      <br/>
      Computer system 900 also includes a main memory 906, such as a random access memory (RAM) or other dynamic storage device, coupled to bus 902 for storing information and instructions to be executed by processor 904.
      <br/>
      Main memory 906 also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor 904.
      <br/>
      Computer system 900 further includes a read only memory (ROM) 908 or other static storage device coupled to bus 902 for storing static information and instructions for processor 904.
      <br/>
      A storage device 910, such as a magnetic disk or optical disk, is provided and coupled to bus 902 for storing information and instructions.
    </p>
    <p num="194">
      Computer system 900 may be coupled via bus 902 to a display 912, such as a cathode ray tube (CRT), for displaying information to a computer user.
      <br/>
      An input device 914, including alphanumeric and other keys, is coupled to bus 902 for communicating information and command selections to processor 904.
      <br/>
      Another type of user input device is cursor control 916, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor 904 and for controlling cursor movement on display 912.
      <br/>
      This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.
    </p>
    <p num="195">
      The invention is related to the use of computer system 900 for controlling access to protected information resources.
      <br/>
      According to one embodiment of the invention, controlling access to protected information resources is provided by computer system 900 in response to processor 904 executing one or more sequences of one or more instructions contained in main memory 906.
      <br/>
      Such instructions may be read into main memory 906 from another computer-readable medium, such as storage device 910.
      <br/>
      Execution of the sequences of instructions contained in main memory 906 causes processor 904 to perform the process steps described herein.
      <br/>
      In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention.
      <br/>
      Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.
    </p>
    <p num="196">
      The term "computer-readable medium" as used herein refers to any medium that participates in providing instructions to processor 904 for execution.
      <br/>
      Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media.
      <br/>
      Non-volatile media includes, for example, optical or magnetic disks, such as storage device 910.
      <br/>
      Volatile media includes dynamic memory, such as main memory 906.
      <br/>
      Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus 902.
      <br/>
      Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.
    </p>
    <p num="197">Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.</p>
    <p num="198">
      Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor 904 for execution.
      <br/>
      For example, the instructions may initially be carried on a magnetic disk of a remote computer.
      <br/>
      The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem.
      <br/>
      A modem local to computer system 900 can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal.
      <br/>
      An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus 902.
      <br/>
      Bus 902 carries the data to main memory 906, from which processor 904 retrieves and executes the instructions.
      <br/>
      The instructions received by main memory 906 may optionally be stored on storage device 910 either before or after execution by processor 904.
    </p>
    <p num="199">
      Computer system 900 also includes a communication interface 918 coupled to bus 902.
      <br/>
      Communication interface 918 provides a two-way data communication coupling to a network link 920 that is connected to a local network 922.
      <br/>
      For example, communication interface 918 may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line.
      <br/>
      As another example, communication interface 918 may be a local area network (LAN) card to provide a data communication connection to a compatible LAN.
      <br/>
      Wireless links may also be implemented.
      <br/>
      In any such implementation, communication interface 918 sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.
    </p>
    <p num="200">
      Network link 920 typically provides data communication through one or more networks to other data devices.
      <br/>
      For example, network link 920 may provide a connection through local network 922 to a host computer 924 or to data equipment operated by an Internet Service Provider (ISP) 926. ISP 926 in turn provides data communication services through the world wide packet data communication network now commonly referred to as the "Internet" 928.
      <br/>
      Local network 922 and Internet 928 both use electrical, electromagnetic or optical signals that carry digital data streams.
      <br/>
      The signals through the various networks and the signals on network link 920 and through communication interface 918, which carry the digital data to and from computer system 900, are exemplary forms of carrier waves transporting the information.
    </p>
    <p num="201">
      Computer system 900 can send messages and receive data, including program code, through the network(s), network link 920 and communication interface 918.
      <br/>
      In the Internet example, a server 930 might transmit a requested code for an application program through Internet 928, ISP 926, local network 922 and communication interface 918.
      <br/>
      In accordance with the invention, one such downloaded application provides for controlling access to protected information resources as described herein.
    </p>
    <p num="202">
      The received code may be executed by processor 904 as it is received, and/or stored in storage device 910, or other non-volatile storage for later execution.
      <br/>
      In this manner, computer system 900 may obtain application code in the form of a carrier wave.
    </p>
    <p num="203">Alternatives, Variations, Advantages</p>
    <p num="204">
      In the foregoing specification, the invention has been described with reference to specific embodiments thereof.
      <br/>
      It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention.
      <br/>
      The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.
    </p>
    <p num="205">
      It will be apparent that the approaches and system described herein has numerous advantages over prior approaches.
      <br/>
      For example, the system is secure, simple to use, simple to administer, scalable to support a large number of users, easily customized by each installation and easily integrated with web resources.
      <br/>
      The system assumes that users may use a standard web browser so that they do not have to buy or learn a new application and administrators do not have to maintain an additional application.
    </p>
    <p num="206">
      The design uses a non-proprietary, standards-based approach that allows customers to buy products and services from any vendor.
      <br/>
      This approach facilitates the reuse of existing infrastructure components and simplifies the development of new web-enabled resources.
      <br/>
      The system uses Internet and de facto industry standards for transport and encryption services and focuses on the development of authentication and authorization services.
      <br/>
      The system was designed as a modular system with well-defined components, services and interfaces.
      <br/>
      Thus, the system may add new functionality and adopt new technologies quickly, for example, add support for authentication mechanisms like hardware tokens or add support for LDAP directories.
    </p>
    <p num="207">
      In addition to being modular, the system is open, with a published API.
      <br/>
      This makes integration with Web resources easy and enables developers to customize the system, for example, to implement custom self-registration policies so that users can setup their own accounts and access resources without administrator intervention.
    </p>
    <p num="208">
      The system is internationalized to support multiple languages using two-byte character codes.
      <br/>
      Users may specify a native language, their local time zone and preferred date format.
      <br/>
      The system will then present information in their preferred language and format.
    </p>
    <p num="209">
      Security is a fundamental design principle behind the architecture and implementation of this system.
      <br/>
      The system ensures that users are authentic, that is, they are who they claim to be and that users are authorized, that is, have the right to access a resource.
      <br/>
      The system ensures end to end security by using firewalls for network level security and SSL with encryption for session level security.
      <br/>
      The authentication and authorization scheme uses encrypted cookies so that they can be read and written only by system components.
    </p>
    <p num="210">
      Scalability is another fundamental design principle.
      <br/>
      The system was designed to handle a large number of users and resources and service a large number of concurrent transactions.
      <br/>
      No logical limit is placed on the number of users, resources or roles.
      <br/>
      The only limits are due to processing power and disk space.
      <br/>
      A distributed architecture allows an organization to increase capacity by installing components of the system on different servers and replicating components on multiple servers.
    </p>
    <p num="211">
      The system is able to efficiently manage access because it is based on an additive, Roles-based data model.
      <br/>
      With a single click, administrators can assign a role to a user and give access to all resources with that role.
      <br/>
      Similarly, adding a role to a resource can give access to all users with that role.
    </p>
    <p num="212">
      Since large scale systems typically require constant changes, the system implements a delegated administration model so that changes can be made quickly, in a decentralized manner.
      <br/>
      For example, hotline staff can help users with common requests like forgotten passwords and resource owners can decide who may access their resource.       (Vertical spacing image '1' not included in text)  (Vertical spacing image '2' not included in text)  (Vertical spacing image '3' not included in text)  (Vertical spacing image '4' not included in text)  (Vertical spacing image '5' not included in text)  (Vertical spacing image '6' not included in text)  (Vertical spacing image '7' not included in text)  (Vertical spacing image '8' not included in text)  (Vertical spacing image '9' not included in text)  (Vertical spacing image '10' not included in text)  (Vertical spacing image '11' not included in text)  (Vertical spacing image '12' not included in text)  (Vertical spacing image '13' not included in text)  (Vertical spacing image '14' not included in text)  (Vertical spacing image '15' not included in text)  (Vertical spacing image '16' not included in text)  (Vertical spacing image '17' not included in text)  (Vertical spacing image '18' not included in text)  (Vertical spacing image '19' not included in text)  (Vertical spacing image '20' not included in text)  (Vertical spacing image '21' not included in text)  (Vertical spacing image '22' not included in text)  (Vertical spacing image '23' not included in text)  (Vertical spacing image '24' not included in text)  (Vertical spacing image '25' not included in text)  (Vertical spacing image '26' not included in text)  (Vertical spacing image '27' not included in text)  (Vertical spacing image '28' not included in text)  (Vertical spacing image '29' not included in text)  (Vertical spacing image '30' not included in text)  (Vertical spacing image '31' not included in text)  (Vertical spacing image '32' not included in text)  (Vertical spacing image '33' not included in text)  (Vertical spacing image '34' not included in text)  (Vertical spacing image '35' not included in text)  (Vertical spacing image '36' not included in text)  (Vertical spacing image '37' not included in text)  (Vertical spacing image '38' not included in text)  (Vertical spacing image '39' not included in text)  (Vertical spacing image '40' not included in text)  (Vertical spacing image '41' not included in text)  (Vertical spacing image '42' not included in text)  (Vertical spacing image '43' not included in text)  (Vertical spacing image '44' not included in text)  (Vertical spacing image '45' not included in text)
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method of controlling access to one or more information resources stored on a first server, the method comprising the steps of:</claim-text>
      <claim-text>receiving information describing a user at the first server; identifying, at a second server coupled to the first server, a subset of the resources that the user is authorized to access, based on one or more roles that are stored in association with user identifying information; communicating information defining the subset to the first server; storing first information defining the sub set, and second information defining the rules, in one or more tokens; communicating the one or more tokens to a client that is associated with the user;</claim-text>
      <claim-text>and thereafter resolving requests to use the resources at the first server by performing, for each request of said requests to use the resources at the first server, one or more steps that include examining one or more copies of said one or more tokens.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method recited in claim 1, further comprising the steps of: defining a role of the user;</claim-text>
      <claim-text>and storing an association of the user to the role at the second server.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method recited in claim 1, further comprising the steps of: defining one or more roles and functional groups of an organization to which the user belongs; storing information describing the roles and functional groups in association with information describing the user;</claim-text>
      <claim-text>and determining whether the user may access the resource based on the information describing the roles and functional groups.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method recited in claim 1, in which the identifying step further comprises the steps of: connecting the first server to the second server, in which the second server stores information describing the user, one or more roles, one or more functional groups, the resources, and associations among them;</claim-text>
      <claim-text>and communicating a request for a profile of the user from the first server to the second server.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method recited in claim 1, wherein the receiving step further comprises the step of: receiving the information describing the user at a runtime module on the first server that also intercepts requests to access the resource.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method recited in claim 1, in which the step of identifying further comprises the step of determining whether the user is authentic.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method recited in claim 1, in which the step of identifying further comprises the step of communicating encrypted information between the first server and the second server describing resources that the user is authorized to use.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method recited in claim 7, in which the step of communicating further comprises the step of passing one or more encrypted tokens that define the user's roles and authorization rights from the second server to the first server.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method recited in claim 7, in which the step of communicating further comprises the steps of: passing one or more encrypted tokens that define the user's roles and authorization rights from the second server to the client; storing the tokens in a memory of the client.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method recited in claim 1, further comprising the steps of: communicating, from the first server to the client, a customized display identifying only those resources that the user may access, whereby a single secure sign-on gives a user access to one or more of the resources.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method recited in claim 1, further comprising the step of: communicating, from the first server to the client, information describing a customized display that identifies only those resources that the user may access.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A method of controlling access to one or more information resources stored on a protected server, the method comprising the steps of: receiving, at the protected server, login information describing a user who desires to access one of the resources; determining that the user is authentic and permitted to access one of the resources; identifying, at a second server coupled to the protected server, a subset of the resources that the user is authorized to access, based on at least one role that is stored in association with user information; communicating information defining the subset to the protected server; storing first information defining the subset, and second information defining the roles, in one or more tokens; communicating the one or more tokens to a client that is associated with the user;</claim-text>
      <claim-text>and thereafter resolving requests to use the resources at the protected server based on the one or more tokens by performing, for each request of said requests to use the resources at the protected server, one or more steps that include examining one or more copies of said one or more tokens, whereby a single secure sign-on gives the user access to the one of the resources.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method recited in claim 12, further comprising the steps of: receiving a request from the client to access one of the resources; determining, based on the one or more tokens, whether the client is authorized to use the one of the resources;</claim-text>
      <claim-text>and granting access to the one of the resources to the client.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method recited in claim 12, further comprising the step of intercepting the request from the client at a runtime module of the protected server.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method recited in claim 1, further comprising the step of granting access to the resource only when the roles associated with the user satisfy an access rule.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method recited in claim 15, further comprising the steps of defining the access rule, associated with the user, as a Boolean expression that includes one or more roles.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. An apparatus for controlling access to an information resource, comprising: a first server at which the information resource is stored and having an element that intercepts a request of a client to use the information resource; a second server, coupled to the first server, having an element that generates a customized access menu in response to the request, and an element that determines whether the client is authentic and may access the resource;</claim-text>
      <claim-text>and a third server, coupled to the second server, having a data store that defines at least one role of the user and that defines whether the user may use the resource based on the role.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The apparatus recited in claim 17, further comprising a plurality of information resources stored in the first server; one or more tokens that score first information defining a subset of the plurality of information resources that the user may access, and second information defining the at least one role; means for communicating the one or more tokens to a client that is associated with the user;</claim-text>
      <claim-text>and means for resolving requests to use the information resources at the first server by performing, for each request of said requests to use the information resources, one or more steps that include examining one or more copies of said one or more tokens.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. A computer-readable medium carrying one or more sequences of instructions for controlling access to information resources, wherein execution of the one or more sequences of instructions by one or more processors causes the one or more processors to perform the steps of: receiving information describing a user at the first server; identifying, at a second server coupled to the first server, a subset of the resources that the user is authorized to access, based on one or more roles that are stored in association with user identifying information; communicating information defining the subset to the first server; storing first information defining the subset, and second information defining the roles, in one or more tokens; communicating the tokens to a client that is associated with the user;</claim-text>
      <claim-text>and thereafter resolving requests to use the resources at the first server based on the tokens.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The computer-readable medium recited in claim 19, further comprising sequences of instructions for performing the steps of granting access to the resource only when the roles associated with the user satisfy an access rule.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The computer-readable medium recited in claim 20, further comprising sequences of instructions for performing the steps of defining the access rule, associated with the user, as a Boolean expression that includes one or more roles.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The computer-readable media recited in claim 19, further comprising sequences of instructions for performing the steps of: defining a role of the user;</claim-text>
      <claim-text>and storing an association of the user to the role at the second server.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The computer-readable media recited in claim 19, further comprising sequences of instructions for performing the steps of: defining one or more roles and functional groups of an organization to which the user belongs; storing information describing the roles and functional groups in association with information describing the user;</claim-text>
      <claim-text>and determining whether the user may access the resource based on the information describing the roles and functional groups.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The computer-readable media recited in claim 19, in which the identifying step further comprises the steps of: connecting the first server to the second server, in which the second server stores information describing the user, one or more roles, one or more functional groups, the resources, and associations among them;</claim-text>
      <claim-text>and communicating a request for a profile of the user from the first server to the second server.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The computer-readable media recited in claim 19, wherein the receiving step further comprises the step of: receiving the information describing the user at a runtime module on the first server that also intercepts request to access the resource.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The computer-readable media recited in claim 19, in which the step of identifying further comprises the step of determining whether the user is authentic.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The computer-readable media recited in claim 19, in which the step of identifying further comprises the step communicating encrypted information between the first server and the second server describing resources that the user is authorized to use.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The computer-readable media recited in claim 27, in which the step of communicating further comprises the step of passing one or more encrypted tokens that define the user's roles and authorization rights from the second server to the first server.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The computer-readable media recited in claim 27, in which the step of communicating further comprises the steps of: passing one or more encrypted tokens that define the user's roles and authorization rights from the second server to the client; storing the tokens in a memory of the client.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The computer-readable media recited in claim 19, further comprising sequences of instructions for performing the steps: communicating, from the first server to the client, a customized display identifying only those resources that the user may access, whereby a single secure sign-on gives a user access to one or more of the resources.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. The computer-readable media recited in claim 19, further comprising sequences of instructions for performing the step of: communicating, from the first server to the client, information describing a customized display that identifies only those resources that the user may access.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. A computer-readable carrying one or more sequences of instructions for controlling access to one or more information resources stored on a protected server, wherein execution of the one or more sequences of instructions by one or more processors causes the one or more processors to perform the steps of: receiving, at the protected server, login information describing a user who desires to access one of the resources; determining that the user is authentic and permitted to access one of the resources; identifying, at a second server coupled to the protected server, a subset of the resources that the user is authorized to access, based on at least one role that is stored in association with user information; communicating information defining the subset to the protected server; storing first information defining the subset and second information defining the roles, in one or more tokens; communicating the one or more tokens to a client that is associated with the user;</claim-text>
      <claim-text>and thereafter resolving requests to use the resources at the protected server based on the one or more tokens by performing, for each request of said requests to use the information resources, one or more steps that include examining one or more copies of said one or more tokens, whereby a single secure sign-on gives the user access to the one of the resources.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The computer-readable media recited in claim 32, further comprising sequences of instructions for performing the steps of: receiving a request from the client to access one of the resources; determining, based on the one tokens, whether the client is authorized to use the one of the resources;</claim-text>
      <claim-text>and granting access to the one of the resources to the client.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The computer-readable media recited in claim 32, further comprising sequences of instructions for performing the step of intercepting the request from the client at a runtime module of the protected server.</claim-text>
    </claim>
  </claims>
</questel-patent-document>