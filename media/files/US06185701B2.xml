<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185701B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185701</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185701</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25523932" extended-family-id="42113811">
      <document-id>
        <country>US</country>
        <doc-number>08976263</doc-number>
        <kind>A</kind>
        <date>19971121</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08976263</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43172180</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>97626397</doc-number>
        <kind>A</kind>
        <date>19971121</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08976263</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  11/00        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  17/30        20060101A I20070721RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20070721</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>714038140</text>
        <class>714</class>
        <subclass>038140</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>707E17116</text>
        <class>707</class>
        <subclass>E17116</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>709219000</text>
        <class>709</class>
        <subclass>219000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>717124000</text>
        <class>717</class>
        <subclass>124000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-017/30W7</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>017</main-group>
        <subgroup>30W7</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/3089</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>3089</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>12</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>28</number-of-drawing-sheets>
      <number-of-figures>29</number-of-figures>
      <image-key data-format="questel">US6185701</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Automated client-based web application URL link extraction tool for use in testing and verification of internet web servers and associated applications executing thereon</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>SCHWALLER PETER JAMES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5838919</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5838919</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>HORADAN PETER H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5842211</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5842211</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>SCHWALLER PETER JAMES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5881237</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5881237</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>DUGGAN JOSEPH C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6002871</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6002871</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>MARULLO FRANK ROBERT, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6044398</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6044398</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>SONNENFELD BRUCE</text>
          <document-id>
            <country>US</country>
            <doc-number>6112049</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6112049</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Marullo, Frank Robert</name>
            <address>
              <address-1>Georgetown, TX, US</address-1>
              <city>Georgetown</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Randall, Jr., Donald Husted</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Carwell, Robert M.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Beausoliel, Jr., Robert W.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A get request employing TCPIP sockets is issued which obtains requested HTML pages associated with the application from the web server.
      <br/>
      A search is executed extracting all links on the page automatically.
      <br/>
      The links are optionally sorted as designated in an input file or command line in random order so as to generate a typical access paths through the web server application during testing and verification thereof.
      <br/>
      The retrieved and extracted data is formatted and output in a common format employable in an input file by multiple test application tools which request, capture, store, verify data returned from, and stress the web servers and associated applications.In a preferred embodiment, server port, and server name specified by host name or address, may be designated either in the input file or command line.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>TECHNICAL FIELD</heading>
    <p num="1">This invention relates to Internet testing tools and, more particularly, to systems and methods for client-based web server application verification and testing.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      In the early stages of the phenomenal growth of the Internet, fairly simplistic web sites predominated, permitting the web "surfer" to simply and quickly access information displayed on a graphical user interface screen, and then log off.
      <br/>
      Such early web sites were relatively unsophisticated.
      <br/>
      However, as the richness and utility of the Internet began to cause its well-chronicled and explosive growth, the potential of the Internet began to be recognized by web site designers, and commercial enterprises.
      <br/>
      Thus, not only did web sites increase in complexity in terms of such things as hot links and nesting of pages, but additional richer features began to appear, such as the ability to post and get data downloaded to files and the dynamic changing of the web site as a function of user interaction or profiles whereby custom web pages would appear.
    </p>
    <p num="3">
      As the complexity and need for dependability of applications running on web servers increased (such as with the advent of commercial on-line banking and shopping transactions), the need arose to be able to rigorously test these more complex applications for their integrity and robustness.
      <br/>
      Turning to FIG. 1, depicted therein is a simplified view of the Internet environment in which such an application resides, including the mechanisms typically utilized prior to the subject invention for effecting such testing and verification of the Internet application.
      <br/>
      Typically a web server 10 is provided on which one or more web applications such as the banking application 12 are running.
      <br/>
      The web server 10 is interconnected to end users 16 and a core controller 14, the latter, in turn facilitating access to information, for example, of a financial institution 18 reposing on its respective databases 20.
      <br/>
      In such a typical Internet application as the illustrated banking application, this system thereby enables huge numbers of end users to quickly, efficiently, and in a secured fashion, transact their financial business with the financial institution over the Internet.
    </p>
    <p num="4">
      With the advent of these more serious and complex applications of the Internet and with the corresponding increasingly dire consequences which might arise from misbehavior of the various components of FIG. 1 and, in particular, those consequences arising from faults with the application 12 and server 10, a need arose to rigorously test these web server applications 12.
      <br/>
      One can readily appreciate the disaster awaiting a commercial concern such as an airline ticket reservation company or bank handling large volumes of transactions and dollar amounts on a daily business, should it be found that various logical program design flaws exist in the application 12.
      <br/>
      It is precisely for these reasons, that a great deal of research and technology development was directed at ways to test these applications for integrity prior to their introduction as a live application into the Internet.
      <br/>
      The prior manner of doing so is further illustrated in FIG. 1.
      <br/>
      In effecting such testing, it was conventional to provide for one or more testers 22 who would manually exercise the given application 12, often employing "screen scrapers" so as to capture and store in storage 24, various screen images delivered to the tester 22 from the application 12 as the tester(s) traversed the various links of the application.
    </p>
    <p num="5">
      Several problems are associated with this approach to testing of web server applications.
      <br/>
      First, the process was extremely slow due to the associated screen draws and saving of GUI data as well as the manual nature of the process.
      <br/>
      This manual aspect of the testing further led to failure to fully test the application due to links missed either by mistake or the sheer number of such links involved, failure to exhaust all possibilities of data input/output, inability to retest and compare data, and the like.
    </p>
    <p num="6">
      Attempts to automate the screen scraping tasks yielded some improvement but did not address even more serious flaws with the approach to validating Internet applications.
      <br/>
      The data which was being tested and saved often was browser dependent and really resulted in merely testing the browser front end and the images being returned thereby.
      <br/>
      However, what was really needed was an efficient and thorough way to exercise all of the APIs and code itself of the application running on the web server.
      <br/>
      In a typical application such as a banking application there may be literally hundreds of APIs and reference pages associated therewith for performing various functions such as login, account summaries, and so forth.
      <br/>
      This "back-end" of a given web server application therefore has associated with it an immense amount of program logic and data "gets" and "puts" such that it would be extremely desirable to be able to test and verify not only whether images from a particular browser are as expected, but that this data being entered and returned as a result of traversing the web site and its associated links was in fact correct.
      <br/>
      Thus a system was needed which, in an automated fashion, could test and verify the logic and data and associated myriad permutations and combinations of APIs and reference pages associated with a web server application rather than merely testing and debugging the browser and associated GUIs per se.
      <br/>
      Such a system was needed which, unlike the prior systems, could avoid saving data such as these GUI images which were not critical to testing this "back-end" logic and information developed by the server application.
    </p>
    <p num="7">
      As the sophistication of web server applications increased, yet an additional problem surface in facilitating the testing of the web applications.
      <br/>
      The ability to fashion dynamically configuring web server application pages soon developed in the maturation of the web which could build HTML pages on the fly.
      <br/>
      While it was known in the art to fashion static test cases to test web pages either in a manual or automated fashion, a difficulty arose in essentially providing for dynamic test cases which could test these changing web pages.
      <br/>
      Even in a static sense, making changes from a prior test (such as adding fields, changing fonts, moving images, resizing screens, etc.) would break test pages, and necessitate the rewriting of such tests.
      <br/>
      Moreover, when these changes could occur in a dynamic way as is currently the state of the art, this even compounded further the ability to test and verify web server applications in a meaningful way.
    </p>
    <p num="8">
      A related problem to this dynamic nature of web pages is that it was highly desirable to perform repeated tests on server applications whereby comparisons could be made to prior data.
      <br/>
      However, in the case of prior art, the data which was being saved (e.g., screens) was not the data critical to testing of the integrity of the underlying data.
      <br/>
      Rather, it was associated with the browser per se and thus was not the data and logic of paramount importance in verifying the web application itself.
      <br/>
      Thus, it was highly desirable to provide a mechanism for verifying data from repeat visits by comparison to previously acquired data.
    </p>
    <p num="9">
      In summary then, a need existed to be able to efficiently and automatically request, capture, store, and verify data returned from web servers disassociated from the particular browser itself, wherein such data related more importantly to the actual underlying data and logic of the server application.
      <br/>
      An ability was needed to run in an automated fashion to avoid errors and lack of thoroughness associated with manual traversal of web sites.
      <br/>
      Further, an ability was needed to discard data now critical to such verification and testing.
      <br/>
      Moreover, an option was highly desired for saving and reusing this returned data for the testing of subsequent transactions.
      <br/>
      Still further, it was highly desirable to avoid use of a conventional browser per se, so as to avoid the browser interfering with the tests which were of real interest (due to compatibility issues and the adverse affect on application performance attributable solely to the browser).
      <br/>
      A web server application testing mechanism was further needed which could accept links automatically from a data file as well as from a GUI edit field, save the returned pages, and further have the ability to verify these pages automatically and tally the results--all without user intervention.
    </p>
    <p num="10">
      In achieving the foregoing advancements, mention has already been made one inherent downside to the prior art technique of manual traversal of web sites, namely that due to the sometimes incredible number of permutations and combinations of links provided in web applications, it was frequently virtually impossible for any such manual traversal to exhaust, particularly in a reliable manner, the number of such links.
      <br/>
      Thus, a serious associated problem with providing for the aforementioned automated web server application verification and testing was the problem of devising a mechanism for extracting all known links on a given plurality of HTML pages in an automated fashion, and to format such link data so that it might subsequently used in the verification and testing of the application.
    </p>
    <p num="11">
      As will be hereinafter detailed, not only was it highly desirable to provide the aforementioned automated verification and testing of web server applications, but further to do so in a manner in which the particular web server and associated application could be stressed.
      <br/>
      It was necessary to invoke multiple instances of such testing so as to simulate real world conditions of multiple users accessing a web application in the same timeframe.
      <br/>
      Not only did the prior art fail to provide an efficient mechanism for extracting all such known links, but there was further no known comprehensive way to employ these automatically generated links in a common input which could be employed in combination by both (1) the web application verification and testing as well as (2) the web straining functionality just described.
    </p>
    <p num="12">
      In addition to the need for an efficient and reliable means for extracting links to be utilized for the aforementioned testing and verification, a need existed for a way to employ such links in a manner whereby they might be readily used and formatted in a manner so as to facilitate the testing of the transactions in question.
      <br/>
      Previously it was known to manually write test cases for various transactions of interest and further to manually transform these into HTML or Javascript pages which could thereafter be utilized in such testing.
    </p>
    <p num="13">
      However, due to the complexity of the links and transactions, such efforts were often futile, error prone, and not comprehensive.
      <br/>
      This complexity taught away from the possibility of an automated mechanism now made possible by the invention to traverse a large group of web transactions so as to build a cohesive set of HTML/Javascript pages which could in fact be employed in testing such transactions.
      <br/>
      Test cases were needed for testing transactions which could be stored in a definition file and run in conjunction with a tool to create web pages with all data needed to run tests and create setup files which could in turn be utilized by the other aforementioned automated tools for exercising the application APIs and straining the web server with replications of the virtual browser testing the web application and web server in question.
    </p>
    <p num="14">
      Yet an additional problem remained in providing a technology for testing a web server and associated web application in a realistic manner so as to know in advance in the real world how they will perform.
      <br/>
      Not only was there the problem of acquiring all relevant links, efficiently fashioning them into a format that could be utilized to test the server and application, and thereafter providing the mechanism for doing so which could test for the integrity of the real data of interest (rather than merely capturing GUIs, testing for browser inadequacies, and the like), but it was further necessary to ensure in the testing that the server was being tested in a realistic manner as might be expected in a real environment.
      <br/>
      In the prior art, test vehicles most assuredly existed for simulating a user's traversal of a web site.
      <br/>
      However, the actual behavior of a web site in real world conditions, wherein multiple users might be hitting the server in the same time interval, was such that the behavior characteristics of such a server and corresponding application might differ radically from the case in which the server/application are being tested by a single test program.
    </p>
    <p num="15">
      A conventional solution to this problem of more realistically simulating the real world environment in server-application testing was to, in a brute force manner, simply provide in real time for a multiplicity of human test users who, at the same time, might access the same server/application in order to "stress" it.
      <br/>
      Obvious limitations in availability of trained test personnel resulted in inadequate testing by a number of simultaneous users far less than might be expected in real world conditions.
      <br/>
      This thereby resulted in unreliable test results not mirroring what was to be expected in the actual environment in which the server/application would reside.
    </p>
    <p num="16">
      Accordingly, a more effective technology was sorely needed which could provide the ability to stress and exercise a web server by simulating multiple users accessing the server simultaneously or in a staggered fashion.
      <br/>
      This need included the ability to perform such web stressing employing fast, non-stop posts and gets from the web server, such a requirement not being met by conventional browsers which would require up to perhaps 50 or more manual users.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="17">
      A get request employing TCPIP sockets is issued which obtains requested HTML pages associated with the application from the web server.
      <br/>
      A search is executed extracting all links on the page automatically.
      <br/>
      The links are optionally sorted as designated in an input file or command line in random order so as to generate atypical access paths through the web server application during testing and verification thereof.
      <br/>
      The retrieved and extracted data is formatted and output in a common format employable in an input file by multiple test application tools which request, capture, store, verify data returned from, and stress the web servers and associated applications.
      <br/>
      In a preferred embodiment, server port, and server name specified by host name or address, may be designated either in the input file or command line.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="18">
      FIG. 1 is an overview of an Internet System, including a web server and representative banking application depicting the prior art system for application testing and verification;
      <br/>
      FIG. 2 is a functional block diagram overview of the system of the invention;
      <br/>
      FIG. 3 is a more detailed functional block diagram of the webrunner subsystem of the system depicted in FIG. 2;
      <br/>
      FIG. 4 is a representative user interface screen for selecting webrunner options similar to those of the GUI edit field options depicted in Table 1 for the web runner subsystem of the system of FIG. 1;
      <br/>
      FIG. 5 is a representative user interface screen depicting a typical summary status output of the webrunner subsystem of FIG. 1;
      <br/>
      FIG. 6 is a more detailed functional block diagram of the getlinks subsystem of the system depicted in FIG. 2;
      <br/>
      FIG. 7 is a more detailed functional block diagram of the genautoAPI function subsystem of the system depicted in FIG. 2;
      <br/>
      FIG. 8 is a representative user interface screen from the genautoAPI subsystem in the form of a web page depicting the four output components of the autoAPI test subsystem of FIG. 7, including autoAPI test cases, CWAPLET test cases, webrunner data, and reports;
      <br/>
      FIGS. 9A and 9B are a representative user interface screen of autoAPI test cases of FIG. 8 sorted by Javascript transaction;
      <br/>
      FIGS. 10A and 10B are a representative user interface screen of a balance inquiry (BALINQ) transaction instance of the autoAPI test cases shown in the screen of FIGS. 9A and 9B;
      <br/>
      FIGS. 11A and 11B are a similar screen of an account history transaction instance of the autoAPI test cases shown in the screen of FIGS. 9A and 9B;
      <br/>
      FIGS. 12A and 12B are a representative user interface screen depicting the CWAPLET test cases of FIG. 8 in more detail;
      <br/>
      FIGS. 13A and 13B are the Javascript file for one of the test cases "CHOP" depicted in FIGS. 12A and 12B;
      <br/>
      FIGS. 14A and 14B are a representative user interface screen depicting details of the genautoAPI report of FIG. 8;
      <br/>
      FIG. 15 is a more detailed functional block diagram overview of the webstrain subsystem of the system depicted in FIG. 2.
      <br/>
      FIGS. 16A-16C is a flow diagram illustrating the sequence of operation of the webrunner subsystem depicted in FIG. 2;
      <br/>
      FIGS. 17A-17B is a flow diagram illustrating the sequence of operation of the getlinks subsystem depicted in FIG. 2;
      <br/>
      FIG. 18 is a flow diagram illustrating the sequence of operation of the genautoAPI subsystem of FIG. 2;
      <br/>
      FIGS. 19A-19B is a flow diagram illustrating the sequence of operation of the webstrain subsystem of FIG. 2.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="19">
      Turning first to FIG. 2, depicted therein is a functional block diagram overview of the system of the invention.
      <br/>
      It is assumed that one or more Internet applications such as the banking application 32, executing on a customizable web server 54, is desired to be tested for performance and integrity of the application in terms of the data delivered to a client from a financial institution and conversely data delivered to the financial institution 64, from the client.
      <br/>
      It is assumed that a communication path is established from the server(s) 54, to the institution 64 through a core controller 62.
      <br/>
      It is further assumed that the institution has a vast amount of information stored representatively in one or more databases 66 from which data to the client is to be retrieved in an accurate manner or updated in response to client interaction with the web application 32.
    </p>
    <p num="20">
      It will be recalled from the background discussion that an automated client-based web server application verification tool (hereinafter generically referred to for convenience as "webrunner") was needed.
      <br/>
      More particularly the need existed to provide the ability to request, capture, store, and verify data returned from web servers 54 (and, of course, ultimately from the financial institution 64).
      <br/>
      More importantly, however, due to the inadequacies of manual testing, a system was further needed that provided the ability to run in an automated fashion, discarding data which was not critical to the testing (such as the aforementioned graphics data of conventional screen scrapers), and which provided the option of saving and reusing returned data for subsequent transaction use and testing.
    </p>
    <p num="21">
      As previously discussed, prior art solutions of employing conventional browsers were unacceptable due to the compatibility and performance issues they introduced, as well as the drawbacks to driving the transactions to be test by recording user input and mouse movements.
      <br/>
      For enhanced utility, a web server application tool was needed versatile enough to accept links from a GUI edit field or a data file in the alternative, save the returned pages from the application 32, and moreover provide the ability to verify such pages, and tally the results, all without user intervention.
      <br/>
      Such functionality is provided by the webrunner 30 subsystem to be hereinafter described in greater detail.
    </p>
    <p num="22">
      It will be noted in passing that although, in the embodiment herein depicted, a banking application is illustrated for interaction with a financial institution 64, the invention is not intended to be so limited and admits to application to any of a wide variety of website applications interfacing with appropriate corresponding data residing in databases 66.
      <br/>
      It was simply felt that the complexity associated with banking transactions in terms of the sheer volumes of data and permutations, the seriousness of such applications dictating incredibly high standards of reliability and opportunities for failure, most appropriately highlighted the applicability of the invention in such demanding environments.
    </p>
    <p num="23">
      Still referring to FIG. 2, it will further be recalled that in order to vigorously exercise all of the permutations and combinations of interactions possible with such a web server application 32, a need existed to extract all known links on a given HTML page, as well as to extract this data from a plurality of nested and linked such HTML pages.
      <br/>
      Moreover, in order to effect a practical solution to the requirements of a web server application verification tool such as the webrunner, a further need was to format such data comprised of these links so that it may be used by the other subsystems of the verification system, such as the aforementioned webrunner and/or the "webstrain" (to be hereinafter described) test tools.
      <br/>
      Accordingly, an additional subsystem hereinafter referred to generically as "getlinks", 60, is provided to effectuate such requirements.
    </p>
    <p num="24">
      Still referring to FIG. 2, in order to implement a generic practical automated web server application verification and test functionality, it was not only necessary to provide a function such as that delivered by the getlinks subsystem 60 to automatically glean known links associated with such a server application 32, but to provide some form of automated mechanism which could traverse a large group of web banking transactions so as to build a cohesive set of HTML/Javascript pages that could be employed to test the transactions.
      <br/>
      Thus, an additional subsystem hereinafter generically referred to as "genautoAPI", 58, is provided.
      <br/>
      Although this subsystem will be described hereinafter in greater detail, for the present purpose it is sufficient to note that test cases may be written for the banking transaction and stored in a definition file.
      <br/>
      The function of the genautoAPI subsystem 58 tool is to, upon execution, create web pages employing the definition file, with such pages including all of the data necessary to run the aforementioned necessary tests on the web application 32, and specifically to create a setup file which may be used by the previously noted webrunner 30 and webstrain 68 automated tools, as well as any other automated tools as may be required.
      <br/>
      It is a feature of the genautoAPI subsystem 58, of particular utility that such setup file may be genericized so as to be utilized both by the webrunner 30, webstrain 68 subsystems, as well as any other automated tools as may be desired.
    </p>
    <p num="25">
      Finally, and still referring to FIG. 2, and as also noted briefly in the Background of the Invention, merely testing a web server application 32 by a single instance of a testing vehicle such as the webrunner subsystem 30 would not necessarily provide an accurate indication of the performance of the application 32 in real world conditions.
      <br/>
      This is because in the actual Internet environment wherein such an application resides, it is well known that multiple users will be accessing the application 32 at various times.
      <br/>
      Accordingly, a need further arose to provide an ability to more closely emulate this multiple user environment.
      <br/>
      The previously noted webstrain subsystem 68 is thus further provided to perform the function of stressing and exercising the web server 54 by simulating in an automated fashion multiple users accessing the server 54 simultaneously.
      <br/>
      As will be more readily understood hereinafter in a more detailed description of this subsystem, essentially a facility was needed to be provided which would employ fast, non-stop posts and gets from the server 54 which could not be effected by employing conventional browsers with up to 50 or more manual user/testers.
    </p>
    <p num="26">Now that an overview has been provided of the system of FIG. 2, the various subsystems, namely the webrunner subsystem 30, webstrain subsystem 68, genautoAPI subsystem 58, and getlinks subsystem 60 will be hereinafter described in greater detail.</p>
    <p num="27">Webrunner Subsystem</p>
    <p num="28">
      Turning now to FIG. 3, depicted therein is a functional block diagram illustrating the webrunner subsystem and its respective components.
      <br/>
      The webrunner functionality 30 may be thought of as a virtual dynamic web browser for performing automated web server application verification and testing.
      <br/>
      The application 30 exercises and verifies web server applications 32 and scripts by simulating a web browser using, in a conventional application, TCPIP sockets.
    </p>
    <p num="29">
      In operation, the webrunner subsystem 30 may receive input either from an input data file 34 or alternatively from a user/tester employing GUI edit field input 36.
      <br/>
      The webrunner subsystem is highly flexible, allowing port, server, logging levels, screen messaging levels, and the ability to store requested data in user-specified individual unique files for later verification, such storage being depicted functionally by storage 40.
      <br/>
      The webrunner subsystem 30 provides a mechanism for verifying this saved data by a comparison, shown functionally by comparator 42 of the known or saved result(s) of previous traversal of the web application, represented as reference numeral 43, with a current request for data from the server application 32, depicted in FIG. 3 as reference numeral 45.
    </p>
    <p num="30">
      Repeat features are definable in order to loop through the input data 47, schematically depicted as loop 44, for as many iterations as specified in the input data, including a "repeat indefinitely" option for reliability testing purposes as desired.
      <br/>
      A log file, shown representationally as storage 46 is provided wherein each actual request, arising from the input data 47, the number of bytes received, the time of transaction, the result of the compares from comparator 42, and the like may be stored in the log file 46.
    </p>
    <p num="31">
      In addition, the webrunner subsystem 30 will also store in storage 40 the data returned, including header information into individual unique files.
      <br/>
      A verify option eliminates manual verification with all its deficiencies well known in the prior art, by providing a pass/fail status for each request, and a total pass/fail count for all requested pages.
      <br/>
      Timing mechanisms are provided in the webrunner subsystem 30 to record transfer time, for example up to resolutions of 1/100th of a second or otherwise as desired.
      <br/>
      The subsystem 30 further provides for support of Posts and Gets 48, to and from the server application 32, with standards being defined for each.
      <br/>
      A byte count for each such request, and total number of bytes transferred are logged in the log file 46, as is total throughput calculated at termination time.
    </p>
    <p num="32">
      A smart fail function 51, is further provided which keeps track of requests that failed previously, and further updates, in the log file 46, the number of fails it contributed to the total.
      <br/>
      Critical requests (logon) etc., may be labelled and must be successful to continue.
      <br/>
      Sleep values 52 may be specified between requests to simulate actual users, test session timeouts, and the like.
      <br/>
      The servers 54 may be accessed by either host name or dot address and accessed through the port specified.
      <br/>
      GUI edit field options 36 are provided to override server and port definitions, thereby allowing for testing of different servers and ports without necessitating changing the input data files 34.
      <br/>
      The GUI edit field option 36 further provides for an option to terminate after a specified number of errors, to specify the number of retries on communication errors, and to set levels of messaging for the log file 46.
    </p>
    <p num="33">The format in a representational embodiment of the webrunner subsystem for the input data file(s) 34 are as follows:</p>
    <p num="34">Format of Input Data File to Webrunner/Webstrain</p>
    <p num="35">
      --
      <br/>
      -- The format of the input file defined by the -d can include the
      <br/>
      -- following:
      <br/>
      -- &lt;Server&gt;name - name of server to access ( supports Hostbyname and
      <br/>
      -- HostbyAddress )
      <br/>
      -- &lt;Port&gt;port number - port to access server through
      <br/>
      -- &lt;Sleep&gt;number - time to sleep between transactions
      <br/>
      -- POST&amp;:.filespec/file&amp;:.data - data to POST to filespec/file
      <br/>
      -- &lt;Prereq&gt;filespec/file - identifies this as a prerequisite
      <br/>
      -- transaction.
      <br/>
      -- filespec/file1 - file to GET data from
      <br/>
      -- - comments - additional requests below
      <br/>
      -- filespec/file2 - additional files to GET data from
      <br/>
      -- Uilespec/file3 - additional files to GET data from
      <br/>
      -- NOTE: Server must be specified either in input data or on command
      <br/>
      -- line
      <br/>
      -- -Use Server Webbank, port 10005
      <br/>
      -- -
      <br/>
      -- &lt;Server&gt;Webbank
      <br/>
      -- &lt;Port&gt;10005
      <br/>
      -- - Identify this a s a prerequisite, if we can't logon exit.
      <br/>
      -- -
      <br/>
      -- &lt;Prereq&gt; POST:/logon/userid=FRANK&amp;password=12345
      <br/>
      -- - Request wbmain.html from the server webbank2
      <br/>
      -- - in the directory pages.
      <br/>
      -- -
      <br/>
      -- pages/wbmain.html
      <br/>
      -- -
      <br/>
      -- - Requests wblogo.gif from the server webbank2
      <br/>
      -- - in the directory pics
      <br/>
      -- -
      <br/>
      -- pics/wblogo.gif
      <br/>
      -- -
      <br/>
      -- - Requests index.html (default) from the
      <br/>
      -- - server webbank2 in the in the directory pages.
      <br/>
      -- -
      <br/>
      -- webbank2/pages
      <br/>
      -- - Sleep for 30 seconds, then continue
      <br/>
      -- &lt;Sleep&gt;30
      <br/>
      -- webbank2/pages1
    </p>
    <p num="36">An actual input data file instance for the webrunner subsystem in the implementation of the invention presently under discussion may be seen as follows:</p>
    <p num="37">Input Data File for Webrunner</p>
    <p num="38">
      --
      <br/>
      -- &lt;Server&gt;wbank1.pals.austin.ibm.com
      <br/>
      -- &lt;Port&gt;10005
      <br/>
      -- - WebRunner/WebStrain data generated by GenAutoAPI Version 1.10 on
      <br/>
      -- Thu Jun 12 11:03:41 CDT 1997
      <br/>
      -- - Data is for MQWeb- Valid/Invalid testcases
      <br/>
      -- /logon/
      <br/>
      -- &lt;Prereq&gt;POST:/proclogin.ns:UserID=AIF01&amp;Pin=PIN01&amp;Password=
      <br/>
      -- PASSWD01&amp;PageGood=/fvtref/registerc.html
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=
      <br/>
      -- 907&amp;arg4=915&amp;arg5=908&amp;arg6=round
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=
      <br/>
      -- 908&amp;arg4=9&amp;arg5=98&amp;arg6=Austin&amp;a
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=
      <br/>
      -- 909&amp;arg4=95&amp;arg5=900&amp;arg6=BocaRa
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=
      <br/>
      -- 1107&amp;arg4=9150&amp;arg5=9080&amp;arg6=ro
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=
      <br/>
      -- 7&amp;arg4=15&amp;arg5=8&amp;arg6=karachi&amp;ar
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=
      <br/>
      -- 1&amp;arg4=1&amp;arg5=2&amp;arg6=2&amp;arg7=1&amp;ar
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=
      <br/>
      -- 2&amp;arg4=2&amp;arg5=2&amp;arg6=2&amp;arg7=2&amp;ar
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=1&amp;arg4=
      <br/>
      -- 1&amp;arg5=1&amp;arg6=1&amp;arg7=1&amp;arg8=
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=1&amp;arg4=
      <br/>
      -- 1&amp;arg5=2&amp;arg6=2&amp;arg7=1&amp;arg8=
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=
      <br/>
      -- 1&amp;arg5=2&amp;arg6=2&amp;arg7=1&amp;ar
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=null&amp;arg4=
      <br/>
      -- null
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=1
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=0&amp;arg4=1
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=2&amp;arg4=3
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=0&amp;arg4=2
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=4&amp;arg4=5
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=0&amp;arg4=0
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /proclogoff.ns
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /logon/exit.html?Status_Code=0
    </p>
    <p num="39">A sample of data generated by the webrunner illustrating such data files for use by the webrunner subsystem may be seen depicted in FIG. 5.</p>
    <p num="40">Subsystem may be seen as follows:</p>
    <p num="41">
      --
      <br/>
      -- &lt;Server&gt;internet.test.ibm.com
      <br/>
      -- &lt;Port&gt;1080
      <br/>
      -- &lt;SSL&gt;3
      <br/>
      -- - WebRunner/WebStrain data generated by GenAutoAPI Version 1.22 on
      <br/>
      -- Wed
      <br/>
      -- Aug 6 13:11:27 CDT 1997
      <br/>
      -- - Data is for default MQWeb - Valid/Invalid testcases
      <br/>
      -- &lt;Prereq&gt;POST:/proclogin.ns:UserID=ID01&amp;Pin=PIN01&amp;Password=
      <br/>
      -- PASSWD01&amp;PageGood=/fvtref/registerc.html
      <br/>
      -- /
      <br/>
      -- fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=907&amp;arg4=
      <br/>
      -- 915&amp;arg5=908&amp;arg6=roundrock&amp;arg7=texas&amp;arg8=78664&amp;arg9=
      <br/>
      -- 2468031&amp;arg10=null&amp;arg11=null&amp;arg12=null&amp;arg13=23&amp;arg14=
      <br/>
      -- 2&amp;arg15=2&amp;arg16=123456&amp;arg17=2&amp;arg18=null&amp;arg19=null&amp;arg20=
      <br/>
      -- null&amp;arg21=2&amp;arg22=2&amp;arg23=null&amp;arg24=null&amp;arg25=null&amp;arg26=
      <br/>
      -- null&amp;arg27=null&amp;arg28=2
      <br/>
      -- /fvtref/�tfring_test--L
      <br/>
      --  fvt.html?arg1=1&amp;arg2=null&amp;arg3=12&amp;arg4=5&amp;arg5=2&amp;
      <br/>
      -- arg6=1/15/96&amp;arg7=12/25/96&amp;arg8=50&amp;arg9=500
      <br/>
      -- /fvtref/�blring_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=6&amp;arg4=
      <br/>
      -- IRS&amp;arg5=907DuolbeFileTR&amp;arg6=908Double
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=null&amp;arg4=null
      <br/>
      -- /fvtref/�payeedt1_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=2
      <br/>
      -- /fvtref/�payeeing_test_fv
      <br/>
      -- t.html?arg1=1&amp;arg2=null&amp;arg3=2&amp;arg4=1&amp;arg5=2&amp;arg6=2
      <br/>
      -- /fvtref/�paying_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=
      <br/>
      -- 2&amp;arg5=3&amp;arg6=4&amp;arg7=5&amp;arg8=6&amp;arg9=7&amp;arg10=8&amp;arg11=9&amp;arg12=
      <br/>
      -- 10&amp;arg13=11&amp;arg14=12&amp;arg15=13&amp;arg16=14&amp;arg17=15&amp;arg18=
      <br/>
      -- 16&amp;arg19=17&amp;arg20=1&amp;arg21=null&amp;arg22=null&amp;arg23=null&amp;arg24=
      <br/>
      -- null&amp;arg25=null&amp;arg26=null&amp;arg27=null&amp;arg28=null&amp;arg29=
      <br/>
      -- null&amp;arg30=1&amp;arg31=null&amp;arg32=null&amp;arg33=null&amp;arg34=
      <br/>
      -- null&amp;arg35=null
      <br/>
      -- /fvtref/�pydefing_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=
      <br/>
      -- 2&amp;arg5=2&amp;arg6=1&amp;arg7=1&amp;arg8=1&amp;arg9=1&amp;arg10=2&amp;arg11=2
      <br/>
      -- /fvtref/�chpyinst_test_fvt.html?arg1=1&amp;arg2=
      <br/>
      -- null&amp;arg3=1&amp;arg4=2&amp;arg5=1&amp;arg6=1&amp;arg7=1&amp;arg8=1&amp;arg9=
      <br/>
      -- 2&amp;arg10=3&amp;arg11=2&amp;arg12=1&amp;arg13=1&amp;arg14=1&amp;arg15=
      <br/>
      -- $100.00&amp;arg16=1997/01/01&amp;arg17=1
      <br/>
      -- /fvtref/�depyinst_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=2
      <br/>
      -- /fvtref/�addacct_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=2
      <br/>
      -- /fvtref/�nickname_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=IRS
      <br/>
      -- /fvtref/�acctdt1_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1
      <br/>
      -- /fvtref/�baling_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=0
      <br/>
      -- /proclogoff.ns
    </p>
    <p num="42">An actual representative log file 46 which may be produced by an instance of the webrunner subsystem 30 executing would appear as follows:</p>
    <p num="43">Log File of Webrunner</p>
    <p num="44">
      --
      <br/>
      -- TESTLOG Version 2.04.00 (13 Jun 1994)
      <br/>
      -- WBRUNNER( 5DA) starting at 12:01:11 on 06/27/1997
      <br/>
      -- WBRUNNER( 5DA  2)-0000 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - URL =
      <br/>
      -- /logon/
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 5.vertline.
      <br/>
      Variation 0001 starting
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 Buflen =144
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 SENDING:
      <br/>
      -- GET /logon/ HTTP/1.0
      <br/>
      -- Connection: Keep-Alive
      <br/>
      -- User-Agent: WebRunner /1.61(OS/2)
      <br/>
      -- Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - No
      <br/>
      -- Content length:
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - recv( )
      <br/>
      -- 1452, so far = 1567
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - recv( )
      <br/>
      -- 1411, so far = 2978
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - recv( ) 0,
      <br/>
      -- so far = 2978
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - Done
      <br/>
      -- Receive 2978 bytes
      <br/>
      -- WBRUNNER( 5DA  2)-0001 0000 5.vertline.
      <br/>
      Variation 0001 PASS
      <br/>
      -- WBRUNNER( 5DA  2)-0000 0000 5.vertline.
      <br/>
      Output file = WBRUNNER.0
      <br/>
      -- WBRUNNER( 5DA  2)-0000 0000 5.vertline.
      <br/>
      Time for transaction = 0 min, 0.32
      <br/>
      -- seconds
      <br/>
      -- WBRUNNER( 5DA  2)-0000 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - URL =
      <br/>
      -- &lt;Prereq&gt;POST:/proclogin.ns:UserID=AIF01&amp;Pin=PIN01&amp;Password=PASSWD01&amp;P
      <br/>
      -- ageGood=/fvtref/registerc.html
      <br/>
      -- WBRUNNER( 5DA  2)-0002 0000 5.vertline.
      <br/>
      Variation 0002 starting
      <br/>
      -- WBRUNNER( 5DA  2)-0002 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 Buflen =290
      <br/>
      -- WBRUNNER( 5DA  2)-0002 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 SENDING:
      <br/>
      -- POST /proclogin.ns HTTP/1.0
      <br/>
      -- Connection: Keep-Alive
      <br/>
      -- User-Agent: WebRunner /1.61(OS/2)
      <br/>
      -- Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
      <br/>
      -- Content-type: application/x-www-form-urlencoded
      <br/>
      -- Content-length: 72
      <br/>
      -- WBRUNNER( 5DA  2)-0039 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - No
      <br/>
      -- Content length:
      <br/>
      -- WBRUNNER( 5DA  2)-0039 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - recv( )
      <br/>
      -- 1451, so far = 1566
      <br/>
      -- WBRUNNER( 5DA  2)-0039 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - recv( ) 0,
      <br/>
      -- so far = 1566
      <br/>
      -- WBRUNNER( 5DA  2)-0039 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.WBRUNNER00 - Done
      <br/>
      -- Receive 1566 bytes
      <br/>
      -- WBRUNNER( 5DA  2)-0039 0000 5.vertline.
      <br/>
      Variation 0039 PASS
      <br/>
      -- WBRUNNER( 5DA  2)-0000 0000 5.vertline.
      <br/>
      Output file = WBRUNNER.38
      <br/>
      -- WBRUNNER( 5DA  2)-0000 0000 5.vertline.
      <br/>
      Time for transaction = 0 min, 0.60
      <br/>
      -- seconds
      <br/>
      -- WBRUNNER( 5DA  1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.WBRUNNER00 Bytes
      <br/>
      -- Recd: 35733
      <br/>
      -- WBRUNNER( 5DA  1)-0000 0000 5.vertline.
      <br/>
      Total Bytes Recd =35733
      <br/>
      -- WBRUNNER( 5DA  1)-0000 0000 5.vertline.
      <br/>
      Total Transfer Time =0:3:18.56
      <br/>
      -- WBRUNNER( 5DA  1)-0000 0000 5.vertline.
      <br/>
      Server Output = 179 bytes per
      <br/>
      --  second
      <br/>
      -- WBRUNNER( 5DA  1)-0000 0000 5.vertline.
      <br/>
      Total Receive Errors: 0
      <br/>
      -- WBRUNNER( 5DA)          PASS.vertline.
      <br/>
      WBRUNNER.EXE done
      <br/>
      -- WBRUNNER( 5DA) stopping at 12:04:41 on 06/27/1997
      <br/>
      -- Variations 39 Run 39 Pass 39 Fail 0 (100%)
      <br/>
      -- STATUS WBRUNNER AUTO BASE RUN 39 PASS 39 FAIL 0 AUTOFAIL 0
    </p>
    <p num="45">An example of an output file in the storage 40 of the webrunner subsystem would appear as follows:</p>
    <p num="46">Output File of Webrunner</p>
    <p num="47">
      --
      <br/>
      -- HTTP/1.0 200 OK
      <br/>
      -- Server: Netscape-Enterprise/2.01
      <br/>
      -- Date: Mon, 30 Jun 1997 17:56:56 GMT
      <br/>
      -- Content-type: text/html
      <br/>
      -- &lt;HTML&gt;
      <br/>
      -- &lt;HEAD&gt;
      <br/>
      -- &lt;�--
      <br/>
      -- Licensed Materials - Property of IBM
      <br/>
      --              5648-A06
      <br/>
      --              .COPYRGT. Copyright IBM Corp. 1996 All Rights Reserved
      <br/>
      --              US Government Users Restricted Rights - Use, duplication
      <br/>
      --              or disclosure restricted by GSA ADP Schedule Contract
      <br/>
      --             with IBM
      <br/>
      -- --&gt;
      <br/>
      --      &lt;TITLE&gt;
      <br/>
      --          WebBank Interactive Banking: Logon and Connect
      <br/>
      --         &lt;/TITLE&gt;
      <br/>
      --         HTML PAGE WOULD APPEAR HERE ...
      <br/>
      -- &lt;/BODY&gt;
      <br/>
      -- &lt;/HTML&gt;
    </p>
    <p num="48">A sample output summary status of execution of the webrunner subsystem may be seen in the representative user interface screen depicted in FIG. 5.</p>
    <p num="49">
      From the foregoing, it will be readily appreciated that the webrunner subsystem 30 provides for a virtual browser for testing of web servers and associated applications without the dependency upon an actual web browser such as the Netscape Navigator or Internet Explorer of the Netscape and Microsoft Corporations, respectively.
      <br/>
      By avoiding such dependency on real browsers, the capturing of data from the web server application may be accomplished in minutes automatically without the necessity for manually navigating through pages, thereby reducing time and errors.
    </p>
    <p num="50">Getlinks Subsystem</p>
    <p num="51">
      FIG. 6 depicts an overview functional block diagram of the getlinks subsystem or application 60 of FIGS. 2 and 3.
      <br/>
      It will be recalled that given the richness of typical server applications 32 these days in terms of their hotspots and links to other links applications, that the prior art methods of manually attempting to extract known links became unfeasible and fraught with error.
      <br/>
      Accordingly, a subsystem was needed which could format data so that it could be utilized, preferably in a common format, by the webrunner virtual browser 30 and the webstrain application 68 to provide multiple instances of the webrunner in order to stress the server application 32 and server 54.
    </p>
    <p num="52">With the foregoing in mind, a getlinks subsystem or application 60 is provided as shown in FIG. 6 employing, in a preferred embodiment, TCPIP sockets, which can perform the get function 48 to obtain requested HTML pages 70 from the web server 52, and search through these pages so as to extract all of the links 76 found on each individual such page, such as the page representationally shown at reference numeral 72.</p>
    <p num="53">
      Options are incorporated in the getlinks subsystem 60 of FIG. 6 so as to cause the links to be sorted in a random order in order to create non-typical access paths through the web server application 32.
      <br/>
      As was the case with the webrunner tool 30, the server 52 name can be specified in employing the getlinks subsystem 60, both in terms of host name or host address, and supplied either in an input data file 74 or through the vehicle of a GUI edit field input 36.
      <br/>
      The server port is preferably overrideable from such GUI edit field input 36 (the default port in the preferred embodiment being 80) with the specification of this port preferably being incorporatable into the input data file 74.
      <br/>
      It is a feature of the getlinks subsystem 60 to provide the output data file 76 in a format such that it may ultimately be utilized as input 75 to both the webrunner subsystem 30 as well as the webstrain subsystem application 68.
    </p>
    <p num="54">
      By providing for the aforementioned automated client-based web universal resource (link) extraction tool, such automation avoids the inadequacies associated with user testing and intervention wherein manual users might otherwise be required to request pages, view document source, and document all of the links (assuming they were found without error) associated with the HTML pages 70.
      <br/>
      The getlinks subsystem accordingly automatically finds all links 76 on each page 72, and moreover formats the output data 73 (e.g., links found) for use by the other test tools, e.g., the webrunner and webstrain applications 30 and 68, respectively.
    </p>
    <p num="55">A representative getlinks output data file 76 would appear as follows:</p>
    <p num="56">Getlinks Output Data File</p>
    <p num="57">
      --
      <br/>
      -- &lt;Server&gt;webbank2
      <br/>
      -- /gmref/�addacct_doc.html
      <br/>
      -- /gmref/�addacct_test.html?arg1=1&amp;arg2=2
      <br/>
      -- /gmref/�addacct_test.html?arg1=2&amp;arg2=1
      <br/>
      -- /gmref/�baling_doc.html
      <br/>
      -- /gmref/�baling_test.html?arg1=1
      <br/>
      -- /gmref/�baling_test.html?arg1=2
      <br/>
      -- /gmref/�baling_test.html?arg1=3
      <br/>
      -- /gmref/�acctdt1_doc.html
      <br/>
      -- /gmref/�acctdt1_test.html?arg1=1
      <br/>
      -- /gmref/�acctdt1_test.html?arg1=2
      <br/>
      -- /gmref/�acctdt1_test.html?arg1=3
      <br/>
      -- /gmref/�accthist_doc.html
      <br/>
      -- /gmref/�accthist_test.html?arg1=1&amp;arg2=7/20/96&amp;arg3=12/20/96&amp;arg4=
      <br/>
      -- 100&amp;arg5=200&amp;a
      <br/>
      -- /gmref/�accthist_test.html?arg1=1&amp;arg2=7/20/96&amp;arg3=12/20/96&amp;arg4=
      <br/>
      -- 200&amp;arg5=500&amp;a
      <br/>
      -- /gmref/�accthist_test.html?arg1=1&amp;arg2=7/20/96&amp;arg3=12/20/96&amp;arg4=
      <br/>
      -- 300&amp;arg5=1000&amp;
      <br/>
      -- /gmref/�nickname_doc.html
      <br/>
      -- /gmref/�nickname_test.html?arg1=1
      <br/>
      -- /gmref/�nickname_test.html?arg1=2
      <br/>
      -- /gmref/�nickname_test.html?arg1=3
      <br/>
      -- /gmref/�remacct_doc.html
      <br/>
      -- /gmref/�remacct_test.html?arg1=1&amp;arg2=2
      <br/>
      -- /gmref/�remacct_test.html?arg1=2&amp;arg2=1
      <br/>
      -- &lt;Server&gt;webbank2
      <br/>
      -- /gmref/-addacct_doc.html
      <br/>
      -- /gmref/-addacct_test.html?arg1=1,arg2=2
      <br/>
      -- /gmref/-addacct_test.html?arg1=2,arg2=1
      <br/>
      -- /gmref/-baling_doc.html
      <br/>
      -- /gmref/-baling_test.html?arg1=1
    </p>
    <p num="58">GenautoAPI Subsystem</p>
    <p num="59">
      It will be recalled that in addition to a need for automatic extraction of links from HTML pages of a web server application provided by the getlinks subsystem 60 of FIG. 6, there was a need for a more efficient manner of using such information and test case data so as to effect an automatic generation of Internet test data which could then be employed to exercise the web server application 32 by means of the webrunner application tool 30 and the webstrain application tool 68.
      <br/>
      More particularly, an automated mechanism was needed to traverse a large number of web transactions such as the banking transactions under consideration, and to build a cohesive set of HTML/Javascript pages which could test these transactions.
    </p>
    <p num="60">
      In accordance with this genautoAPI subsystem 80, test cases may accordingly be written for the transactions under considerations such as banking transactions and stored in a definition file to be hereinafter described.
      <br/>
      This genautoAPI subsystem tool will then execute and create web pages with all of the data required to run the tests, and also will create setup files which may be utilized by the webrunner, webstrain, and other automated tools.
    </p>
    <p num="61">
      Turning now to FIG. 7, depicted therein is a functional block diagram of components of a representative such genautoAPI subsystem.
      <br/>
      The genautoAPI process 80, FIG. 7, is employed to automatically generate Internet test data and, more particularly, to build an automated set of web pages which permits the system to test all of the web application APIs such as those of banking application 32.
    </p>
    <p num="62">
      Referring back to FIG. 2, the interface between such HTML pages 82, FIG. 2, and the customizable web server 54 which communicates with the financial institution 64, is for purposes of this disclosure termed a customizable web service (CWS) API 86, FIG. 2.
      <br/>
      The function of this CWS API 86 is to make every unique data element in a Gold business data definition to be hereinafter described available in its atomic form to the HTML pages 82.
    </p>
    <p num="63">
      In the banking industry under consideration, the industry has defined a programming standard and set of APIs referred to as the "Gold Message Standard" which defines messages and transactions embodying a standard common complete set of banking functions.
      <br/>
      Details of this standard may be obtained from the web site URL HTTP//WWW.INTEGRION.COM/GOLD/INDEX.HTML. A relationship further will exist between Javascript objects associated with web application pages, Gold Manager Requests, and Gold Transactions as follows.
      <br/>
      The execution of Javascript objects will result in Gold manager (GM) requests to a Gold Manager which in turn will manage Gold Transaction messages between the Gold Manager and the financial institution.
      <br/>
      An autoAPI process 88, FIG. 7, is a Livewire application, provided such that HTML pages may be automatically generated by invoking the genautoAPI subsystem based upon Gold Manager Request files 90 and test cases 92 that may be written by individuals familiar with functional verification test procedures.
      <br/>
      The autoAPI process 88 permits one to test any transactions such as those associated with the banking application 32 independently of customized pages being available.
      <br/>
      These Gold Manager Request files 90 will contain functional verification test arguments &lt;FVTArgs&gt;) tags 92, which define test cases 93 for the particular CWS API transaction.
      <br/>
      The genautoAPI program 80 is essentially an automation tool that builds all of the autoAPI HTML pages 94, webrunner input data 96, and documentation based upon the test data in the Cold Manager Request files 90 and the test files 93 built for CWAPLET testing.
    </p>
    <p num="64">
      As in the case of the webrunner, webstrainer, and getlink subsystems, a GUI edit field option 36 may be provided for user definition of options from a keyboard.
      <br/>
      The following is a representative list of such GUI edit field options for the genautoAPI subsystem.
    </p>
    <p num="65">Command Line Options for GenautoAPI</p>
    <p num="66">
      --
      <br/>
      -- Configuration setting can be found in the FVTInit file.
      <br/>
      -- The following optional parameters will override the defaults.
      <br/>
      --  -s &lt;server&gt; Override the default server name
      <br/>
      --  -b &lt;build&gt; Override the default build location
      <br/>
      --  -h &lt;http/https&gt; Override the default http/https protocol
      <br/>
      --  -p &lt;port&gt; Override the default port
      <br/>
      --  -d &lt;driver&gt; Override the latest driver name (specify driver)
      <br/>
      --  -t &lt;option&gt; Build tables options can be CNT, GMR, or ALL
      <br/>
      --  -c       Override the no copy option (copy latest build)
      <br/>
      --  -g       Combine the FVT GMR testcases with the master gmr
      <br/>
      -- files
      <br/>
      --  -g+ First restore the original GMR files then combine
      <br/>
      --                 the FVT GMR testcases with the master gmr files
      <br/>
      --  -fast    Run as fast a possible, no statistics, no CWAPLETS,
      <br/>
      --                 and no WebRunner data generation
      <br/>
      --  -runlog  Generate the Runlog file for automated testcase
      <br/>
      --                 tracking
      <br/>
      --  -? Help information
    </p>
    <p num="67">The following is the result of a typical run of the genautoAPI subsystem.</p>
    <p num="68">Run of GenautoAPI</p>
    <p num="69">
      --
      <br/>
      -- Environment
      <br/>
      --      Fast Option:         N
      <br/>
      --      Program Name:        GenAutoAPI
      <br/>
      --      Program Version:     1.20
      <br/>
      --      Run Date/Time:       Thu Jun 26 21:02:07 CDT 1997
      <br/>
      --      Run By UserId:       drandall
      <br/>
      --      Run On Machine:      wbank0.pals.austin.ibm.com
      <br/>
      -- Settings
      <br/>
      --      Installation Option: Copying d262.15 from master build location
      <br/>
      --      Server Name:         wbank0.pals.austin.ibm.com
      <br/>
      --      Server Directory:    /usr/ns-home/https-drandall
      <br/>
      --      http/https:          http (Non-SSL)
      <br/>
      --      Port:                10022
      <br/>
      --      Build Location:      /afs/austin/u5/psparch/webbank/bld
      <br/>
      --      Table Options:       Count=N  GMR=N
      <br/>
      --      Generate Runlog Data: No
      <br/>
      --      FVT Directory (base):
      <br/>
      -- /usr/ns-home/https-drandall/cws/docs/fvt/test-suites/au
      <br/>
      --      FVT LogonFVT LW App:
      <br/>
      -- http://wbank0.pals.austin.ibm.com:10022/logonfvt
      <br/>
      --      FVT LogonFVT LW Comp:   (base)/mklogweb
      <br/>
      --      FVT AutoAPI LW App:
      <br/>
      -- http://wbank0.pals.austin.ibm.com:10022/fvtref
      <br/>
      --      FVT AutoAPI LW Comp:    (base)/mkfvtweb
      <br/>
      --      FVT CWAPLETS LW App:
      <br/>
      -- http://wbank0.pals.austin.ibm.com:10022/cwaref
      <br/>
      --      FVT CWAPLETS LW Comp:   (base)/cwaplets/mkcwaweb
      <br/>
      --      Report File:            (base)/autoapi-report.html
      <br/>
      --      WebRunner Files:
      <br/>
      -- /usr/ns-home/https-drandall/cws/docs/fvt/test-suites/au
      <br/>
      --      WebRunner Sleep:     Random (Min=5, Max=20)
      <br/>
      --      CWAPLETS Sleep:      Random (Min=5, Max=20)
      <br/>
      --      FVT Copied Gold Loc: (base)/goldmgr
      <br/>
      --      Gold Descriptions File: /tmp/drandall-GenAutoAPI-name.dat
      <br/>
      --      Gold JSClasses File: /tmp/drandall-GenAutoAPI-js.dat
      <br/>
      --      Gold Transactions File: /tmp/drandall-GenAutoAPI-txn.dat
      <br/>
      --      Gold Groups File:    /tmp/drandall-GenAutoAPI-group.dat
      <br/>
      -- GMRCombine version 1.20 Details:
      <br/>
      --      -  I: Combined 949 testcase(s) found in 69 gmr file(s)
      <br/>
      -- Gold Manager Request files (*.gmr) Error Details:
      <br/>
      --      -  I: No errors found in the Gold Manager Request files (*.gmr)
    </p>
    <p num="70">
      -- Gold Manager Request files (*.gmr) Statistics
      <br/>
      --      Total MQWeb   Tests:        0442
      <br/>
      --      Total MQWeb   Valid Tests:  0340
      <br/>
      --      Total MQWeb   Invalid Tests: 0102
      <br/>
      --      Total CBSF    Tests:        0237
      <br/>
      --      Total CBSF    Valid Tests:  0191
      <br/>
      --      Total CBSF    Invalid Tests: 0046
      <br/>
      --      Total Generic Tests:        0270
      <br/>
      --      Total Generic Valid Tests:  0002
      <br/>
      --      Total Generic Invalid Tests: 0268
      <br/>
      --      Total of ALL  Tests:        0949
      <br/>
      --      Total of ALL  Valid Tests:  0533
      <br/>
      --      Total of ALL  Invalid Tests: 0416
      <br/>
      --      Total of ALL  Errors:       0000
      <br/>
      -- Gold Manager Request files (*.gmr) Counts
      <br/>
      --      Total Files (*.gmr): 155
      <br/>
      --      Total Files Ignored: 0
      <br/>
      --      Total Name Ok:       79
      <br/>
      --      Total Name Blank:    76
      <br/>
      --      Total JSClass Ok:    68
      <br/>
      --      Total JSClass Blank: 87
      <br/>
      --      Total GoldTxn Ok:    155
      <br/>
      --      Total GoldTxn Blank: 0
      <br/>
      -- WAMI/PRO Statistics:
      <br/>
      --      WAMI Statements: 0063
      <br/>
      --      PRO Statements:  0053
      <br/>
      -- GenCWAPLETS version 1.20 Details:
      <br/>
      -- cwaref Livewire Compile Results:
      <br/>
      -- Livewire Compiler Version 14.4
      <br/>
      -- Copyright .COPYRGT.  Netscape Communications Corporation 1996
      <br/>
      -- All rights reserved
      <br/>
      -- Reading file
      <br/>
      -- /usr/ns-home/https-drandall/cws/docs/fvt/test-suites/autoapi/goldmg
      <br/>
      -- Compiling file
      <br/>
      -- /usr/ns-home/https-drandall/cws/docs/fvt/test-suites/autoapi/gold
      <br/>
      -- Reading file Include_Constants_test.html
      <br/>
      -- Compiling file cwaref.html
      <br/>
      -- Reading file cwaref2.html
      <br/>
      -- Compiling file cwaref2.html
      <br/>
      -- Writing .web file
      <br/>
      --      -  I: Compile successful of cwaref.web
      <br/>
      -- logonfvt LiveWire Compile Results:
      <br/>
      -- Livewire Compiler Version 14.4
      <br/>
      -- Copyright .COPYRGT.  Netscape Communications Corporation 1996
      <br/>
      -- All rights reserved
      <br/>
      -- Reading file logonfvt.html
      <br/>
      -- Compiling file logonfvt.html
      <br/>
      -- Compiling file macr_obj.js
      <br/>
      -- Reading file �js_macro_methods.js
      <br/>
      -- Compiling file �js_macro_methods.js
      <br/>
      -- Writing .web file
      <br/>
      --      -  I: Compile successful of logonfvt.web
      <br/>
      -- fvtref LiveWire Compile Results:
      <br/>
      -- Livewire Compiler Version 14.4
      <br/>
      -- Copyright .COPYRGT.  Netscape Communications Corporation 1996
      <br/>
      -- All rights reserved
      <br/>
      -- Reading file �ifssobj.js
      <br/>
      -- Compiling file �ifssobj.js
      <br/>
      -- Reading file util.js
      <br/>
      -- Compiling file �gettcat_test_fvt.html
      <br/>
      -- Reading file �gettcalg_test_fvt.html
      <br/>
      -- Compiling file �gettcalg_test_fvt.html
      <br/>
      -- Reading file registerc.html
      <br/>
      -- Compiling file registerc.html
      <br/>
      -- Writing .web file
      <br/>
      --      -  I: Compile successful of gm.web
      <br/>
      -- IMPORTANT: If the Netscape Enterprise Server is currently running,
      <br/>
      -- you need to restart the following Livewire applications at
      <br/>
      -- http://wbank0.pals.austin.ibm.com:10022/appmgr:
      <br/>
      --      -  I: FVT LiveWire application cwaref
      <br/>
      --      -  I: FVT LiveWire application logonfvt
      <br/>
      --      -  I: FVT LiveWire application fvtref
      <br/>
      -- CheckLiveWire version 1.20 Details:
      <br/>
      --      -  I: LiveWire configuration file valid
      <br/>
      -- (/usr/ns-home/https-drandall/config/liv
      <br/>
      --      -  Clean run: 0 warnings, 0 errors, 0 compile problems
      <br/>
      -- Execution Timestamps:
      <br/>
      --      -  I: Started at Thu Jun 26 21:02:07 CDT 1997
      <br/>
      --      -  I: Finished at Thu Jun 26 21:15:07 CDT 1997
    </p>
    <p num="71">
      In FIG. 8 there is depicted a representative user interface screen output resulting from execution of the genautoAPI susbystem 80.
      <br/>
      It will be noted from FIG. 8 that such output will include a listing of autoAPI test cases sorted in various manners, CWAPLET test cases, webrunner data, and genautoAPI reports and statistics.
    </p>
    <p num="72">
      A representative user interface screen providing a more detailed listing of autoAPI test cases sorted by Javascript transaction, for example (and shown at reference numeral 110 of FIG. 8) may be seen in FIGS. 9A and 9B. A representative user interface screen showing the CWAPLET test cases 112, of FIG. 8, may be seen in greater detail in FIGS. 12A and 12B.
      <br/>
      Similarly, a user interface screen detailing the reports 114 of genautoAPI, FIG. 8, may be seen in greater detail in FIGS. 14A and 14B.
    </p>
    <p num="73">
      Referring briefly to FIGS. 9A and 9B, which lists representative autoAPI test cases resulting from execution of the genautoAPI subsystem, two representative such test cases have been selected, namely a balance inquiry transaction 116, and an account history transaction 118.
      <br/>
      Representative user interface screens detailing these balance inquiry and account history transactions, 116 and 118, respectively in FIG. 9A, may be seen in greater detail in the user interface screens of FIGS. 11A and B and 12A and B, respectively.
    </p>
    <p num="74">
      As previously noted, in FIGS. 12A and 12B, a representative user interface screen is depicted therein showing the CWAPLET test cases 112 of FIG. 8.
      <br/>
      A representative such CWAPLET function, ("Chop", 120) appearing in FIG. 12A, has been selected and a more detailed user interface screen showing such Chop CWAPLET test case, 120, may be seen depicted in the user interface screen in FIGS. 13A and 13B.
    </p>
    <p num="75">Finally, a representative genautoAPI report 114 of FIG. 8 resulting from the execution of the genautoAPI subsystem, may be seen in greater detail in the representative user interface screen of such genautoAPI report 114 as depicted in FIGS. 14A and 14B.</p>
    <p num="76">In summary, this genautoAPI subsystem and program 80 will build documentation and test data for the CWS autoAPI test program 95.</p>
    <p num="77">Webstrain Subsystem</p>
    <p num="78">Notwithstanding that the getlinks subsystem 60 provides a way to automatically extract URL links from the application 32, and that the genautoAPI subsystem 58 further provides a way to automatically generate necessary Internet test data which may be utilized by the webrunner subsystem for testing and verification of the application 32, it will be recalled from the foregoing discussion that these subsystems alone may not provide for a testing of the application operation in a real world environment wherein the application and server are stressed by multiple hits by a plurality of users within the same timeframe--a phenomenon well known in the art.</p>
    <p num="79">
      A web application and server may be well behaved in a conventional modest test of their capabilities.
      <br/>
      However, without an ability to stress them in a manner experienced in real life Internet environments, it is all too common to find that such applications and servers crash, behave erratically, and experience problems with data integrity when more robust testing procedures have not been carried out.
      <br/>
      Accordingly, an ability was needed to stress and exercise the web server and corresponding application by automatically simulating multiple users accessing the server simultaneously.
      <br/>
      It was further found that it was highly desirable to do so, employing fast non-stop posts and gets (reference numeral 48, FIG. 3) to and from the web server 54.
      <br/>
      These requirements meant that a conventional Internet browser could not perform these needs and, moreover, even if such a browser was capable of doing so, up to 50 or more manual users/testers would be required to stress the server in a manner which might be experienced in real life conditions.
    </p>
    <p num="80">
      Accordingly, the subject webstrain application subsystem has been provided, which is essentially an automated client-based web server stress tool.
      <br/>
      A functional block diagram overview of such a subsystem may be seen depicted in FIG. 15 which is employed to start multiple user-defined threads 100, each of which is in itself a virtual browser 106 in the manner of the webrunner application 30.
      <br/>
      These individual virtual browsers 106 get and post data, 48 of FIG. 3, to the server 54 under test at a rapid rate.
      <br/>
      The time of each transaction and the result (e.g., requested page found and returned) is logged in an appropriate log file 102.
      <br/>
      The actual returned data in the case of the webstrain subsystem, unlike with the webrunner application, is not saved, as the purpose of this webstrain application is to stress and strain the server 54 executing the application 32.
      <br/>
      This is to be contrasted with the webrunner subsystem, whose purpose in part is to store, examine, and compare returned data (in the data storage 40).
    </p>
    <p num="81">
      In the implementation of the webstrain subsystem under consideration, it was highly desirable to provide for a flexible subsystem.
      <br/>
      Accordingly, the webstrain subsystem in the implementation herein described, permits users to specify the particular server 54 and port in an input data file 104, and also to allow selected items in the data file to be overridden as desired by the user/tester through the user of GUI edit field options 36, similarly as in the case of the previously described other subsystems.
      <br/>
      A repeat option permits the webstrain subsystem to loop, shown schematically as loop 108, through the input file 104 data as many times as specified, including an option to repeat indefinitely.
      <br/>
      Sleep values may further be specified to slow down requests to simulate the delay associated with actual real-life users if desired.
      <br/>
      Still further, a wait option is provided, creating a semaphore which causes all of the threads 100 to wait on the semaphore until all of the threads are created.
      <br/>
      Once created, these threads 100 begin execution simultaneously so as to simulate a severe hit on the server.
      <br/>
      This option moreover may be disabled, allowing the threads to begin execution as soon as they are created, for a staggered approach so as to more accurately simulate yet another mode in which such a server 54 may be stressed in real life environments.
    </p>
    <p num="82">
      Still a further significant feature and benefit of the webstrain subsystem is that the input data files 104 are intentionally designed and defined so as to be shared and common with the data files 34 (FIG. 3) employed by the webrunner subsystem, thereby providing a more efficient web testing and verification system.
      <br/>
      It is significant that due to the functionality provided by the aforementioned webstrain subsystem, the subsystem is fully automated and may run without user intervention, thereby freeing testers up to perform other duties and reducing the chances of human error.
      <br/>
      Also, as previously noted, without these features, testing which could more accurately reflect real life conditions would entail use the undesirable use of a large number of testers to duplicate the number of requests per minute if conventional browsers were employed.
    </p>
    <p num="83">An illustration of the previously noted options 36 for the webstrain subsystem which may be user-specified in the GUI edit field will be seen as follows in FIG. 4.</p>
    <p num="84">An example of the previously noted input data file for the webstrain subsystem is as follows:</p>
    <p num="85">Input Data File for Webstrain</p>
    <p num="86">
      --
      <br/>
      -- &lt;Server&gt;wbank1.pals.austin.ibm.com
      <br/>
      -- &lt;Port&gt;10005
      <br/>
      -- - WebRunner/WebStrain data generated by GenAutoAPI Version 1.10 on
      <br/>
      -- Thu Jun 12 11:03:41 CDT 1997
      <br/>
      -- - Data is for MQWeb Valid/Invalid testcases
      <br/>
      -- /logon/
      <br/>
      -- &lt;Prereq&gt;POST:/proclogin.ns:UserID=AIF01&amp;Pin=PIN01&amp;Password=
      <br/>
      -- PASSWD01&amp;PageGood=/fvtref/registerc.html
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=907&amp;arg4=
      <br/>
      -- 915&amp;arg5=908&amp;arg6=round
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=908&amp;arg4=
      <br/>
      -- 9&amp;arg5=98&amp;arg6=Austin&amp;a
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=909&amp;arg4=
      <br/>
      -- 95&amp;arg5=900&amp;arg6=BocaRa
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1107&amp;arg4=
      <br/>
      -- 9150&amp;arg5=9080&amp;arg6=ro
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�addpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=7&amp;arg4=
      <br/>
      -- 15&amp;arg5=8&amp;arg6=karachi&amp;ar
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=
      <br/>
      -- 1&amp;arg5=2&amp;arg6=2&amp;arg7=1&amp;ar
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=2&amp;arg4=
      <br/>
      -- 2&amp;arg5=2&amp;arg6=2&amp;arg7=2&amp;ar
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=1&amp;arg4=1&amp;arg5=
      <br/>
      -- 1&amp;arg6=1&amp;arg7=1&amp;arg8=
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=1&amp;arg4=1&amp;arg5=
      <br/>
      -- 2&amp;arg6=2&amp;arg7=1&amp;arg8=
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�chgpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=
      <br/>
      -- 1&amp;arg5=2&amp;arg6=2&amp;arg7=1&amp;ar
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=null&amp;arg4=null
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=1&amp;arg4=1
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=0&amp;arg4=1
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=2&amp;arg4=3
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=0&amp;arg4=2
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=null&amp;arg3=4&amp;arg4=5
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /fvtref/�delpayee_test_fvt.html?arg1=1&amp;arg2=0&amp;arg3=0&amp;arg4=0
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /proclogoff.ns
      <br/>
      -- &lt;Sleep&gt;10
      <br/>
      -- /logon/exit.html?Status_Code=0
    </p>
    <p num="87">An excerpted example of the previously noted log file 102 is as follows.</p>
    <p num="88">Log File of Webstrain</p>
    <p num="89">
      --
      <br/>
      -- TESTLOG Version 3.14.00 (10 Jun 1996), OS/2 Version 2.30
      <br/>
      -- .COPYRGT.  Copyright IBM Corporation 1994, 1996.
      <br/>
      -- WBSTRAIN( 5CA) starting at 10:03:58.47 on 06/27/1997
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 7.vertline.
      <br/>
      Overriding Server, now
      <br/>
      -- wbank1.pals.austin.ibm.com
      <br/>
      -- was wbank1.pals.austin.ibm.com
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 7.vertline. overriding Server Port, now
      <br/>
      --  10005,
      <br/>
      -- was 80
      <br/>
      -- WBSTRAIN( 5CA     2)-0000 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.00 - URL = /logon/
      <br/>
      -- WBSTRAIN( 5CA     3)-0000 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.01 - URL = /logon/
      <br/>
      -- WBSTRAIN( 5CA     4)-0000 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.02 - URL = /logon/
      <br/>
      -- WBSTRAIN( 5CA     5)-0000 0000 7.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.03 - URL = /logon/
      <br/>
      -- WBSTRAIN( 5CA     2)-0000 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.00 SENDING:
      <br/>
      -- GET /logon/ HTTP/1.0
      <br/>
      -- Connection: Keep-Alive
      <br/>
      -- User-Agent: Webstrain /1.61 (OS/2)
      <br/>
      -- Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
      <br/>
      -- WBSTRAIN( 5CA     3)-0000 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.01 SENDING:
      <br/>
      -- GET /logon/ HTTP/1.0
      <br/>
      -- Connection: Keep-Alive
      <br/>
      -- User-Agent: Webstrain /1.61 (OS/2)
      <br/>
      -- Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
      <br/>
      -- WBSTRAIN(STARTING )-0000 0000 5.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.00 - Starting
      <br/>
      -- Variation 1
      <br/>
      -- WBSTRAIN( 5CA     3)-0000 0000 5.vertline.
      <br/>
      -- WBSTRAIN(STARTING ) -0000 0000 5.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.01 - Starting
      <br/>
      -- Variation 2
      <br/>
      -- WBSTRAIN( 5CA     4)-0000 0000 5.vertline.
      <br/>
      -- WBSTRAIN(STARTING ) -0000 0000 5.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.02 - Starting
      <br/>
      -- Variation 3
      <br/>
      -- WBSTRAIN( 5CA     5) -0000 0000 5.vertline.
      <br/>
      -- WBSTRAIN(STARTING )-0000 0000 5.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.03 - Starting
      <br/>
      -- Variation 4
      <br/>
      -- WBSTRAIN( 5CA     6)-0000 0000 5.vertline.
      <br/>
      -- WBSTRAIN(PASS+++++) -0000 0000 5.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.07 - PASS: Variation
      <br/>
      -- 2098
      <br/>
      -- WBSTRAIN( 5CA     B)-0000 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.09 - Done Receive 1566
      <br/>
      -- bytes
      <br/>
      -- WBSTRAIN( 5CA     A)-0000 0000 9.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.08 - Done Receive 1566
      <br/>
      -- bytes
      <br/>
      -- WBSTRAIN( 5CA     B)-0000 0000 5.vertline.
      <br/>
      -- WBSTRAIN(PASS+++++) -0000 0000 5.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.09 - PASS: Variation
      <br/>
      -- 2099
      <br/>
      -- WBSTRAIN( 5CA     A) -0000 0000 5.vertline.
      <br/>
      -- WBSTRAIN(PASS+++++)-0000 0000 5.vertline.
      <br/>
      Thread
      <br/>
      --  .backslash.SEM32.backslash.08 - PASS: Variation
      <br/>
      -- 2100
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.00 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2013 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.01 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2014 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.02 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2013 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.03 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2016 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.04 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2017 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.05 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2015 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.06 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2016 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.07 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2017 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.08 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2017 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      --  Thread:.backslash.SEM32.backslash.09 Bytes Recd: 357330,
      <br/>
      -- Elapsed Time: 2017 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      Total Bytes Recd =3573300
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      Total Time =2018 (seconds)
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      Server Output = 1770 bytes
      <br/>
      --  per
      <br/>
      -- second
      <br/>
      -- WBSTRAIN( 5CA     1)-0000 0000 5.vertline.
      <br/>
      -- STATUS Variation Run: 2100, Pass: 2100, Fail 0
      <br/>
      -- Success = 1
      <br/>
      -- WBSTRAIN( 5CA)            .vertline.
      <br/>
      WBSTRAIN.EXE done
      <br/>
      -- WBSTRAIN( 5CA) stopping at 10:37:39.10 on 06/27/1997
      <br/>
      -- The above output file demonstrates 10 threads running, each thread
      <br/>
      -- receiving 357,330 bytes, total 3,573,300, with a total time of 2018
      <br/>
      -- seconds. 2100 test variations (transactions) were performed, all
      <br/>
      -- requested data were returned without errors.
    </p>
    <p num="90">Now that an overview has been provided of the operation of the webrunner, getlinks, genautoAPI, and webstrain subsystems, a more detailed description of the sequence of operation of each subsystem will hereinafter be provided with reference to FIGS. 16A-16 C, 17A-17B, 18, and 19A-19B, respectively.</p>
    <p num="91">
      Turning now to the description of the flow diagram for the webrunner subsystem illustrated in FIGS. 16A-16C, first a query will be made of whether an input file has been supplied from a command line, e.g., a user-specified GUI field, 120.
      <br/>
      If not, a display file dialog box is displayed, 122.
      <br/>
      If the input file has been supplied in response to a query, 124, it is determined whether or not to open the input file, 126.
      <br/>
      If not, the process is exited but if the input file is opened, as indicated by path 128, the input file is parsed for options and build requests 130 and flow continues to block 134.
      <br/>
      If it is not an input file as determined by query 124, GUI items are deactivated, 132, and an option panel is displayed, 134.
      <br/>
      A query is next made of whether selected options are valid, 136.
      <br/>
      If not, the process loops back to block 134.
      <br/>
      If yes, it is determined whether SSL is required, 138.
      <br/>
      If yes, SSI cipher/version timeouts are initialized, 140, a keyring file is opened 142, followed by a query of whether client certification is required, 144.
      <br/>
      If certification is not required, the process exits to the left of the decision box 144.
      <br/>
      If certification is required, a certification flag is set, 146.
    </p>
    <p num="92">
      If either SSL is not required, as determined at box 138, or the certification flag is set, 146, or no certification is required, a thread is thereby created 148, the TCPIP connection is initialized, 150, time is noted, 152, and the request line is parsed for the desired server/URL 154.
      <br/>
      In response to a query of whether the name/address has been resolved, 156, if not, the process exits to the right and a query is made of whether the name has been resolved, 158.
      <br/>
      If not, a query is made of whether the address has been resolved, 160.
      <br/>
      If neither the name or address have been resolved, the process exits to the right along path 162 to FIG. 16C. If the name/address has already been resolved as determined at block 156 or the name has been resolved at 158, or address resolved at 160, the process continues to block 164 to determine whether any prerequisites are required, 164.
      <br/>
      If so, a prerequisite flag is set, 166.
      <br/>
      If not, a query is made of whether post data is required, 168.
      <br/>
      If so, a build post message is displayed, 170.
      <br/>
      If not, the process exits along path 172 to FIG. 16B and a determination is made of whether a parameter replacement option is set, 174 (top of FIG. 16B).
      <br/>
      If set, stored data associated with the parameter is retrieved, 176.
      <br/>
      Next, a query is made of whether a sleep time has been specified, 178.
      <br/>
      If so, the process sleeps for the specified amount of time, 180.
      <br/>
      Upon completion of the sleep time or if the sleep option has not been set, a query is next made of whether the WAMI option has been set, 182.
      <br/>
      If yes, the WAMI flag is set, 184.
    </p>
    <p num="93">
      Continuing with FIG. 16B, if the WAMI option has not been specified at block 182 or the WAMI flag set at block 184, a client socket is next opened 186.
      <br/>
      An SSL flag query is then made, 188.
      <br/>
      If the SSL flag has previously been set as determined at decision block 188, a query is made of whether the certification flag was set at 146, as determined at block 190.
      <br/>
      If the flag has been set, a distinguished name in a keyfile is located, 192, and a remote secure socket obtained at 194.
      <br/>
      This socket is also obtained if the response to the certification flag query 190 is negative.
    </p>
    <p num="94">
      Next, a get/post request is sent to the server if the SSL flag has not been set, 188 or the remote secure socket has been obtained, 194, this sending of the get/post request being depicted at 196.
      <br/>
      Next, a determination is made at decision block 200 of whether a receive response is in the buffer.
      <br/>
      If not, a query is made of whether receive errors have been met 198.
      <br/>
      If yes, the process exits at path 201 to FIG. 16C. If not, the process loops back to block 196, whereupon a next get/post request is sent to the server.
      <br/>
      If, in response to the receive response into buffer request 200, the result is affirmative, a query is made of whether more data is to be received, 202.
      <br/>
      If yes, the process loops back to block 196 to send additional get/post requests.
      <br/>
      If no more data is to be received, the process exits decision block 202 and the time is noted at 204, whereupon a query is made of whether the WAMI flag is set, 206.
      <br/>
      If set, a query is then made of whether data is to be saved, 208.
      <br/>
      If yes, data is stored in a specified element, 210.
      <br/>
      Data in a buffer is modified to a generic "*" 212, if data is not to be saved or after it has been stored per block 210 in a specified element.
      <br/>
      This modification of data is shown at block 212.
    </p>
    <p num="95">
      Continuing with FIG. 16B, if in response to the WAMI flag set query 206, no such flag has been detected, a query is made of whether the system is in the verify mode, 214.
      <br/>
      If so, or after modification of data 212, a known file is opened 216, compared to the memory buffer 218, and a query is made of whether there is a match between the thus-opened file and the memory buffer at 220.
      <br/>
      If the verify mode is not set as determined at block 214, the file is written, 222, and the process continues along path 224.
    </p>
    <p num="96">
      Turning to FIG. 16C, a query is then made of whether a failure of the comparison has been made before, 230.
      <br/>
      If so, a smart/fail count is incremented, 232, and flow continues to the pass block 234.
      <br/>
      If a failure has not occurred before, the process exits to the left of decision block 230 to fail block 236.
      <br/>
      The process is in a pass state, 234, in response to flow along path 224 or, as just described, if the smart/fail count has been incremented at 232, in which case the status is updated, 238, the logs are updated, 240, and a query is made of whether more requests for gets/posts are present, 242.
      <br/>
      If more requests are present, the process exits to the left of the decision box 242 along path 244.
    </p>
    <p num="97">
      The process is in a fail state as shown at block 236 if the process has proceeded along path 162 from FIG. 16C (e.g., neither the name or address have been resolved), if there has been no previous failure as determined at block 230, or if receive errors have been met and the process is flowing along path 201.
      <br/>
      In this fail state, flow continues out of the fail block 236 to again update status, 238, update logs 240, and query if more requests are present at 242.
      <br/>
      If so, the process exits as previously described along path 244 to return to block 152 of FIG. 16A. If no more requests are present, the process exits, 246, totals are updated, 248, and the process ends, 250.
    </p>
    <p num="98">
      Turning now to FIG. 17A, depicted therein is the subsystem flow for the getlinks subsystem.
      <br/>
      It will be noted that through the sleep decision box 178 in the webrunner subsystem of FIG. 16B, the flow for the getlinks subsystem of FIG. 17A is essentially identical.
    </p>
    <p num="99">
      First a query will be made of whether an input file has been supplied from a command line, e.g., a user-specified GUI field, 250.
      <br/>
      If not, a file dialog box is displayed, 252.
      <br/>
      If the input file has been supplied in response to a query of whether an input file is selected, 254, if yes, it is determined whether or not to open the input file, 256.
      <br/>
      If not, the process is exited but if the input file is opened, as indicated by path 258, the input file is parsed for options and build requests 260.
      <br/>
      If it is not an input file as determined by query 254, GUI items are deactivated, 262, and an option panel is displayed, 264.
      <br/>
      If the panel is displayed, a query is made of whether options are valid, 266.
      <br/>
      If so, it is determined whether SSL is required, 268.
      <br/>
      If so, SSI cipher/version timeouts are initialized, 270, a keyring file is opened 272, followed by a query of whether client certification is required, 276.
      <br/>
      If not, the process exits to the left of the decision box 276.
      <br/>
      If certification is required, a certification flag is set, 274.
      <br/>
      If either SSL is not required, as determined at box 268, or the certification flag is set, 274, threads are thereby created 278, the TCPIP connection is initialized, 280, time is noted, 282, and the request line is parsed for the server/URL 284.
      <br/>
      In response to a query of whether the name/address has been resolved, 286, if not, the process exits to the right and a query is made of whether the name has been resolved, 288.
      <br/>
      If not, a query is made of whether the address has been resolved, 290.
      <br/>
      If neither the name or address have been resolved, the process exits to the right along path 292 to FIG. 17B. If the name/address has already been resolved as determined at block 294 or the name has been resolved at 288, or address resolved at 290, the process continues to block 294 to determine whether any prerequisites are required.
      <br/>
      If so, a prerequisite flag is set, 296.
      <br/>
      If not, a query is made of whether post data is required, 298.
      <br/>
      If so, a build post message is displayed, 300 and the process continues along 303 to FIG. 17B. If not, the process exits below block 298 along line 303 to FIG. 17B and a determination is made of whether a parameter replacement option is set, 302.
      <br/>
      If set, stored data associated with the parameter is retrieved, 304.
      <br/>
      Next, a query is made of whether a sleep time has been specified, 306.
      <br/>
      If so, the process sleeps for the specified amount of time, 308 and the process continues along path 310 of FIG. 17B.
    </p>
    <p num="100">
      Continuing with the description of the getlinks subsystem flow and FIG. 17B, a client socket is opened, 312, whereupon a query is made of whether an SSL flag has been set, 314.
      <br/>
      If so, a next query is made of whether a certification flag has been set, 316.
      <br/>
      If so, the distinguished name in the keyfile is located, 318, whereupon either in response to a certification flag not being set or it being set and the name located, a remote secure socket is obtained, 320.
    </p>
    <p num="101">
      If an SSL flag has not been set or a remote secure socket has been obtained, flow continues at block 322, whereupon a get/post request is sent to the server.
      <br/>
      Next, a query is made of whether a receive response is in the buffer, 324.
      <br/>
      If not, a query is made of whether receive errors have been met, 326.
      <br/>
      If not met, the process loops back to block 3 to send a next get/post request to the server.
      <br/>
      If receive errors have been met, the process is in a failed status and exits block 326 along path 323 to fail block 325.
      <br/>
      If the receive response is in the buffer the process continues out the bottom of decision block 324 to a query of whether more data is to be received, 328.
      <br/>
      If so, the process loops back to block 3 to send a next get/post request to the server.
      <br/>
      If no more data is to be received, the time is noted, 330, links are extracted from the HTML, 332, and a query is made of whether with respect to each link it has been found before, 334.
      <br/>
      If not, the link is added to the request list, 336, the subsystem is in the pass state as indicated by block 338, whereupon the status is updated, 340, the logs are updated, 342, and a query is finally made of whether more requests exist, 344.
      <br/>
      If affirmative, flow exits along path 346 back to block 282 of FIG. 17A, whereupon the time is noted and the process continues.
      <br/>
      If no more requests are present, flow exits out the bottom of decision block 344, totals are updated, 348, and the process ends at 350.
      <br/>
      It will be noted that when the system is in a fail status, 325, the previously described steps of updating status and logs, 340 and 342, respectively, and the subsequent steps will transpire in like manner.
    </p>
    <p num="102">
      Turning now to FIG. 18, depicted therein is a flow diagram of the genautoAPI subsystem for generating customizable web server pages to test Internet business transactions.
      <br/>
      After the environment is determined and/or set up, 354, by means of an input data file and/or user interaction through the GUI edit field so as to specify server, port, and the like hereinbefore previously described, the system will begin retrieving stored API details and test cases, 352, previously discussed (with reference to GMR files 90, test case files 93, etc.) and will build the desired HTML pages, 94, FIG. 7, as shown at step 360.
      <br/>
      It will be recalled that for a given web application a plurality of APIs will exist such as a transaction for adding a fixed amount or an account history as previously described.
      <br/>
      Accordingly, in FIG. 18, a loop 358 is shown, indicating that the process for each Internet application transaction API 356 will be repeated, cycling through all the desired API details and transactions until all of the necessary web pages are constructed, 360 necessary to test the desired Internet application 32.
    </p>
    <p num="103">
      Turning finally to FIG. 19A-19B, depicted therein is a flow diagram of the webstrain subsystem flow.
      <br/>
      It, as with the getlinks subsystem flow of FIG. 17A-17B, will bear a resemblance to the webrunner subsystem of FIG. 16A-16C which is to be expected inasmuch as the webstrain is to some extent multiple instances of the webrunner virtual browser of FIG. 16A-16C.
    </p>
    <p num="104">
      Turning now to the description of the flow diagram for the webstrain subsystem illustrated in FIGS. 19A-19B, first a query will be made of whether an input file has been supplied from a command line, e.g., a user-specified GUI field, 362.
      <br/>
      If not, a file dialog box is displayed, 364.
      <br/>
      If the input file has been supplied in response to a query of whether it is in fact an input file, 370, if yes, it is determined whether or not to open the input file, 368.
      <br/>
      If not okay, the process is exited, 366, but if the input file is opened, as indicated by path 374, the input file is parsed for options and build requests 371.
      <br/>
      If there is no input file as determined by query 370, GUI items are deactivated, 378, and an option panel is displayed, 372.
      <br/>
      If the panel is displayed, a query is made of whether options are valid, 374.
      <br/>
      If not, the option panel is again displayed, 372.
      <br/>
      If so, it is determined whether SSL is required, 376.
      <br/>
      If so, SSI cipher/version timeouts are initialized, 378, a keyring file is opened 380, followed by a query of whether client certification is required, 384.
      <br/>
      If not, the process exits to the left of the decision box 384.
      <br/>
      If certification is required, a certification flag is set, 382.
      <br/>
      If either SSL is not required, as determined at box 376, or the certification flag is set, 382, or chart certification is not required, 384, a thread is thereby created, 386, the TCPIP connection is initialized, 388, time is noted, 370, and the request line is parsed for the server/URL 372.
      <br/>
      In response to a query of whether the name/address has been resolved, 374, if not, the process exits to the right and a query is made of whether the name has been resolved, 376.
      <br/>
      If not, a query is made of whether the address has been resolved, 380.
      <br/>
      If neither the name or address have been resolved, the process exits to the right along path 382 to FIG. 19B. If the name/address has already been resolved as determined at block 374 or the name has been resolved at 376, or address resolved at 378, the process continues to block 384 to determine whether any prerequisites are required.
      <br/>
      If so, a prerequisite flag is set, 386.
      <br/>
      If not, a query is made of whether post data is required, 388.
      <br/>
      If so, a build post message is displayed, 400.
      <br/>
      If not, the process exits below block 388401 to FIG. 19B and a determination is made of whether a parameter replacement option is set, 402.
      <br/>
      If set, stored data associated with the parameter is retrieved, 404.
      <br/>
      Next, a query is made of whether a sleep time has been specified, 406.
      <br/>
      If so, the process sleeps for the specified amount of time, 408, and the process continues along path 410 to FIG. 19B.
    </p>
    <p num="105">
      Continuing with FIG. 19B, a client socket is then opened, 414, as a result of flow along path 410.
      <br/>
      A query is made whether an SSL flag has been set, 416.
      <br/>
      If so, a next query is made whether a certification flag has been set, 418.
      <br/>
      If so, the distinguished name is located in the keyfile 420.
      <br/>
      If the certification flag has not been set or the distinguished name has been located, a remote secure socket is obtained, 4.
      <br/>
      Next, a get/post request is sent to the web site server, 424, after a secure socket has been obtained at block 4 or indication has been received that an SSL flag at block 416 has not been set.
    </p>
    <p num="106">
      After the get/post request is sent, a query is made of whether a receive response has been placed into a buffer at decision block 428.
      <br/>
      If not, a query is then made of whether receive errors have been met, 426.
      <br/>
      If not, the process loops back to block 424 to send another get/post request.
      <br/>
      If the receive errors have been met as determined by the decision block 426, the system is in a fail state 436.
      <br/>
      If in response to the query at block 428, a receive response is in the buffer, a next query at 430 determines whether more data is available to be received.
      <br/>
      If so, the process loops back to block 424 to send a next get/post request to the server.
      <br/>
      If there is no more data to receive, the flow drops through block 430 to block 432 whereupon the time is noted, the system is in a pass state as indicated by block 434 and the status is updated, 438, as well as the logs being updated, 440.
      <br/>
      Next a determination is made, 442, whether more requests exist, in which case the process loops back on path 412 to FIG. 19A, whereupon the time is noted, 370, and the process continues.
      <br/>
      If no more requests are existent, the process drops down from block 442, the totals are updated, block 446, and the process ends, 448.
      <br/>
      If the process had failed at block 436 or at block 380 as a result of no name or address being resolved, flow continues along path 382 of FIG. 19A and 19B, whereupon again, the status is updated, 438, and the previously described additional process steps associated with blocks 440-448 transpire.
    </p>
    <p num="107">While the invention has been shown and described with reference to particular embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for extracting links from an Internet application executing on a web site server and having a plurality of web pages, each of said pages including links for use by an automated web server test and/or strain tool in testing and/or straining said application, comprising:</claim-text>
      <claim-text>generating a get request for a first of at least one of said pages from said application; automatically extracting substantially all of said links from said first of said pages; storing said extracted links in a format receivable by said test and/or strain tool; retrieving said stored extracted links; sorting said retrieved extracted links;</claim-text>
      <claim-text>and transferring said sorted extracted links to said test and/or strain tool.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 wherein said format is in a form receivable by both said test and said strain tools.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 1 further including: generating a next get request for a next at least one of said pages from said application; automatically extracting substantially all of said links from said next at least one of said pages from said application;</claim-text>
      <claim-text>and storing said extracted links from said next at least one of said pages.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 1 wherein said sorting is for creating non-typical access paths through said application.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 4 comprising: automatically repeating in order said steps of</claim-text>
      <claim-text>- generating a next get request; - automatically extracting substantially all of said links from said next at least one of said pages;</claim-text>
      <claim-text>and - storing said extracted links from said next at least one of said pages;</claim-text>
      <claim-text>for successive next ones of said at least one of said pages until all of said links for said plurality of web pages are extracted and stored.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 5 further including: retrieving all of said extracted links; sorting said all of said extracted links;</claim-text>
      <claim-text>and transferring said all of said sorted extracted links to said test and/or strain tool.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. An apparatus for extracting links from an Internet application executing on a web site server, and having a plurality of web pages, each of said pages including links for use by an automated web server test and/or strain tool in testing and/or straining said application, comprising: means for generating a get request for a first of at least one of said pages from said application; means for automatically extracting substantially all of said links from said first of said pages; means for storing said extracted links in a format receivable by said test and/or strain tool; means for retrieving said stored extracted links; means for sorting said retrieved extracted links;</claim-text>
      <claim-text>and means for transferring said sorted extracted links to said test and/or strain tool.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The apparatus of claim 7 wherein said format is in a form receivable by both said test and said strain tools.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The apparatus of claim 8 further including: means for generating a next get request for a next at least one of said pages said application; means for automatically extracting substantially all of said links from said next at least one of said pages from said application;</claim-text>
      <claim-text>and means for storing said extracted links from said next at least one of said pages.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The apparatus of claim 7 wherein said means for sorting is for creating non-typical access paths through said application.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The apparatus of claim 10 comprising: means for automatically repeating in order said steps of - repeating in order said steps of generating a next get request; - automatically extracting substantially all of said links from said next at least one of said pages;</claim-text>
      <claim-text>and - for storing said extracted links from said next at least one of said pages;</claim-text>
      <claim-text>for successive next ones of said at least one of said pages until all of said links for said plurality of web pages are extracted and stored.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The apparatus of claim 11 further including: means for retrieving all of said extracted links; means for sorting said all of said extracted links;</claim-text>
      <claim-text>and means for transferring said all of said sorted extracted links to said test and/or strain tool.</claim-text>
    </claim>
  </claims>
</questel-patent-document>