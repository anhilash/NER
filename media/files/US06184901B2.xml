<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06184901B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06184901</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6184901</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="26699310" extended-family-id="42052403">
      <document-id>
        <country>US</country>
        <doc-number>09001848</doc-number>
        <kind>A</kind>
        <date>19971231</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-09001848</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43087513</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>184897</doc-number>
        <kind>A</kind>
        <date>19971231</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-09001848</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>90382697</doc-number>
        <kind>A</kind>
        <date>19970731</date>
        <priority-linkage-type>1</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-08903826</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="3">
        <country>US</country>
        <doc-number>2511796</doc-number>
        <kind>P</kind>
        <date>19960802</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="3">
        <doc-number>1996US-60025117</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <term-of-grant>
      <disclaimer/>
    </term-of-grant>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   3/033       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>033</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   3/048       20060101A I20070721RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>048</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20070721</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06T  13/20        20110101A I20110409RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>13</main-group>
        <subgroup>20</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20110409</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06T  15/00        20110101A I20110122RMEP</text>
        <ipc-version-indicator>
          <date>20110101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>15</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20110122</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>G06T  17/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>17</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>345474000</text>
        <class>345</class>
        <subclass>474000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>345420000</text>
        <class>345</class>
        <subclass>420000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-003/0481</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>0481</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-003/0484P</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>003</main-group>
        <subgroup>0484P</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>G06T-013/20</text>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>13</main-group>
        <subgroup>20</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>G06T-015/00</text>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>15</main-group>
        <subgroup>00</subgroup>
      </classification-ecla>
      <classification-ecla sequence="5">
        <text>G06T-017/00</text>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>17</main-group>
        <subgroup>00</subgroup>
      </classification-ecla>
      <classification-ecla sequence="6">
        <text>G06T-019/00</text>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>19</main-group>
        <subgroup>00</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-003/0481</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>0481</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131212</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-003/04847</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>3</main-group>
        <subgroup>04847</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131212</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06T-013/20</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>13</main-group>
        <subgroup>20</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131212</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06T-019/20</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>19</main-group>
        <subgroup>20</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131210</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06T-2200/24</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>2200</main-group>
        <subgroup>24</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131212</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06T-2219/2021</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>T</subclass>
        <main-group>2219</main-group>
        <subgroup>2021</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131212</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06T-200/24</classification-symbol>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06T-219/2021</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>38</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>14</number-of-drawing-sheets>
      <number-of-figures>14</number-of-figures>
      <image-key data-format="questel">US6184901</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Three dimensional modeling and animation system</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>TAKEUCHI RYOZO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5267154</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5267154</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>WANG JOHN S</text>
          <document-id>
            <country>US</country>
            <doc-number>5511157</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5511157</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>GIRARD MICHAEL</text>
          <document-id>
            <country>US</country>
            <doc-number>5731821</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5731821</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>CHAININI DEVINDRA S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5760788</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5760788</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>KIMURA SHIN</text>
          <document-id>
            <country>US</country>
            <doc-number>5767861</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5767861</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>"Inside 3D Studio Max", espinosa-aguilar et al., New Riders Publishing, Chapter 19, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>"3D Studio Max Applied", Clayton et al., Advanstar Communications, pp. 9-14, 63-67, 119-120, 280-282, 310-315, 346-351, 393-395 and 470-476, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>3D Studio Max User's Guide, vol. 1 and 2 and Tutorials, Kinetix, Autodesk Inc., pp. 1-2, 1-14, 1-15, 15-7 through 15-9, Chapters 6 and 13 and tutorial pp. 6-10 through 6-12, Mar. 1996.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>90382697</doc-number>
              <kind>A</kind>
              <date>19970731</date>
            </document-id>
          </parent-doc>
        </relation>
      </continuation>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/025,117</doc-number>
          <date>19960802</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/025117</doc-number>
          <date>19960802</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Autodesk, Inc.</orgname>
            <address>
              <address-1>San Rafael, CA, US</address-1>
              <city>San Rafael</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>AUTODESK</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Silva, Daniel David</name>
            <address>
              <address-1>San Rafael, CA, US</address-1>
              <city>San Rafael</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Berteig, Rolf Walter</name>
            <address>
              <address-1>Seattle, WA, US</address-1>
              <city>Seattle</city>
              <state>WA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Brittain, Donald Lee</name>
            <address>
              <address-1>Santa Barbara, CA, US</address-1>
              <city>Santa Barbara</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Hudson, Thomas Dene</name>
            <address>
              <address-1>Port Washington, WI, US</address-1>
              <city>Port Washington</city>
              <state>WI</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Yost, Gary S.</name>
            <address>
              <address-1>San Francisco, CA, US</address-1>
              <city>San Francisco</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Hickman Palermo Truong &amp; Becker, LLP</orgname>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Palermo, Christopher J.</name>
          </addressbook>
        </agent>
        <agent sequence="3" rep-type="agent">
          <addressbook lang="en">
            <name>Bingham, Marcel K.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Zimmerman, Mark K.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A three dimensional (3D) modeling system for generating a 3D representation of a modeled object on a display device of a computer system.
      <br/>
      The modeled object is represented by an initial definition of an object and a set of modifiers.
      <br/>
      Each modifier modifies some portion of the definition of an object that may result in a change in appearance of the object when rendered.
      <br/>
      The modifiers are ordered so that the first modifier modifies some portion of the initial definition of the object and produces a modified definition.
      <br/>
      The next modifier modifies the results of the previous modifier.
      <br/>
      The results of the last modifier are then used in rendering processes to generate the 3D representation.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>RELATED APPLICATIONS</heading>
    <p num="1">
      This application is a continuation of Ser.
      <br/>
      No. 08/903,826 now U.S. Pat. No. 6,034,695, entitled Interpolating Frames Logically Located Between Key Frames In A Three Dimensional Modeling System filed on Jul. 31, 1997, which is incorporated herein by reference.
    </p>
    <p num="2">This application claims the benefit of U.S. provisional patent application No. 60/025,117, entitled, "Three Dimensional Modeling and Animation System," filed Aug. 2, 1996, by inventors Rolf Walter Berteig, Daniel David Silva, Donald Lee Brittain, Thomas Dene Hudson, and Gary S. Yost, which is incorporated herein by reference.</p>
    <heading>COPYRIGHT DISCLAIMER</heading>
    <p num="3">
      A portion of the disclosure of this patent document contains material which is subject to copyright protection.
      <br/>
      The copyright owner has no objection to the facsimile reproduction by anyone of the patent disclosure, as its appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="4">
      A.
      <br/>
      Field of the Invention
    </p>
    <p num="5">
      The invention relates generally to the field of three dimensional modeling and animation.
      <br/>
      In particular, the invention relates to an improved three dimensional modeling and animation system having an object oriented architecture.
    </p>
    <p num="6">B. Related Art</p>
    <p num="7">
      Three dimensional modeling systems allow users to generate models of three dimensional objects using computers.
      <br/>
      In previous systems, a user defines a simple three dimensional (3D) object and then applies various transformations and manipulations (e.g., stretch, bend) to that object.
      <br/>
      The transformations and manipulations change the way the object looks.
      <br/>
      However, the modifications, once made, are difficult to change.
      <br/>
      For example, a user first defines a shape such as a sphere.
      <br/>
      To change the look of the sphere, the user applies some type of function to that sphere.
      <br/>
      For example, the user might stretch the sphere in one direction by scaling the sphere.
      <br/>
      Similarly, the user might apply some type of twisting function to the sphere.
      <br/>
      If the user wanted to change the amount of stretching, the user first undoes the twist, undoes the stretch (removes the scaling), and then re-scales the sphere.
      <br/>
      The user must then reapply the twist.
      <br/>
      Thus, it is difficult for the user to change the scaling of the sphere without affecting the twisting operation.
    </p>
    <p num="8">Therefore, it is desirable to have a 3D modeling system that is simpler for the user to use by allowing the user to make changes to a modification of an object without having to undo all of the modifications made subsequent to the modification of interest.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">
      One embodiment of the invention includes a method of generating a three dimensional (3D) representation of a modeled object on a display device of a computer system.
      <br/>
      The modeled object is represented by an initial definition of an object and a set of modifiers.
      <br/>
      Each modifier modifies some portion of the definition of an object that may result in a change in appearance of the object when rendered.
      <br/>
      The modifiers are ordered so that the first modifier modifies some portion of the initial definition of the object and produces a modified definition.
      <br/>
      The next modifier modifies the results of the previous modifier.
      <br/>
      The results of the last modifier are then used in rendering processes to generate the 3D representation.
    </p>
    <p num="10">
      In one embodiment, the modifiers are easily shared, the order of the modifiers is easily changed, and the values associated with the modifiers are also easily changed.
      <br/>
      These features provide the user with great flexibility in modeling and animation.
    </p>
    <p num="11">In one embodiment, the modifiers are associated with three dimensional visual representations that allow a user to better visualize and change the effect of a particular modifier.</p>
    <p num="12">
      In one embodiment, intermediate channel results created during the generation of a representation of an object are cached thereby increasing the speed of this embodiment.
      <br/>
      In particular, the representation of the object is generated in multiple channels, each channel representing some portion of that representation.
      <br/>
      Intermediate channel results are generated in each channel by elements in that object's list of modifiers.
      <br/>
      Depending on for how long these intermediate channel results are valid, the intermediate channel results may or may not be cached.
      <br/>
      In particular, in one embodiment, if it is determined that one set of intermediate channel results will be valid for a predetermined period of time, while the next intermediate channel results in that channel will not be valid for a predetermined period of time, then the intermediate channel results are cached.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="13">
      These and other features and advantages of the invention will become more apparent to those skilled in the art from the following detailed description in conjunction with the appended drawings in which:
      <br/>
      FIG. 1 illustrates a 3D modeling and animation system according to one embodiment of the invention.
      <br/>
      FIG. 2 illustrates a how objects are rendered in the 3D modeling and animation system of FIG. 1.
      <br/>
      FIG. 3 illustrates an object.
      <br/>
      FIG. 4 illustrates an object having an object space modifier and corresponding gizmo.
      <br/>
      FIG. 5 illustrates a second object space modifier applied to the object of FIG. 4
      <br/>
      FIG. 6 illustrates changes to the modifier stack of the object of FIG. 5.
      <br/>
      FIG. 7 illustrates further changes to the modifier stack of the object of FIG. 5.
      <br/>
      FIG. 8 illustrates a key frame and the start of an animation sequence.
      <br/>
      FIG. 9 illustrates a "between frame" of the animation sequence.
      <br/>
      FIG. 10 illustrates a second key frame of the animation sequence.
      <br/>
      FIG. 11 illustrates a third key frame of the animation sequence.
      <br/>
      FIG. 12 illustrates an example of the use of channels in generating a derived object's representation.
      <br/>
      FIG. 13 illustrates one embodiment of a method of caching.
      <br/>
      FIG. 14 illustrates an example of caching.
    </p>
    <p num="14">
      The figures illustrate the invention by way of example, and not limitation.
      <br/>
      In the figures, like references indicate similar elements.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="15">
      A.
      <br/>
      Terminology
    </p>
    <p num="16">
      In this description, the term "instance" means an instance of class as in an object oriented programming language.
      <br/>
      In particular, "instance" does not mean an instance as defined in the 3D Studio Max (tm)  User Guide, Volume 1 and 2, unless specifically noted.
      <br/>
      Also note that an "instance" in the object oriented sense can also be an "instance" in the 3D Studio Max (tm)  application sense.
    </p>
    <p num="17">The term "reference" generally means a reference created through the use of the ReferenceTarget and ReferenceMaker classes, or the like, as described below.</p>
    <p num="18">B. System Overview</p>
    <p num="19">
      One embodiment of the invention includes an apparatus and method of generating a three dimensional (3D) representation of a modeled object on a display device of a computer system.
      <br/>
      The description of specific applications is provided only as examples.
      <br/>
      Various modifications to the preferred embodiments will be readily apparent, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention.
      <br/>
      Thus, the invention is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.
    </p>
    <p num="20">C. Computer System</p>
    <p num="21">
      FIG. 1 illustrates a computer system 100 that can be used to implement the one embodiment of the invention.
      <br/>
      FIG. 1 also illustrates an example of a tube as modeled by one embodiment of the invention.
      <br/>
      The following describes the elements of FIG. 1 and then their operation.
    </p>
    <p num="22">
      The computer system 100 comprises a processor 110, a memory 140, an input device 120 and a display device 130.
      <br/>
      These components can communicate with each other via a bus 150.
      <br/>
      The memory 140 includes software such as the 3D modeling and animation application 145.
      <br/>
      The 3D modeling and animation application 145 includes, among other things, a scene 142.
      <br/>
      The scene 142 includes at least a first node 144, a corresponding derived tube 146 and a tube modifier stack 199.
      <br/>
      The tube modifier stack 199 includes a tube master 190, a bend modifier 192, and a twist modifier 194.
      <br/>
      The display device 130 displays the 3D modeling and animation interface 135 which shows a 3D representation of the derived tube 146 and the corresponding tube modifier stack 199.
    </p>
    <p num="23">
      The computer system 100 includes an IBM compatible personal computer, available from Hewlett-Packard, Inc. of Mountain View, Calif.
      <br/>
      In another embodiment, the computer system 100 includes one of a Macintosh (tm)  computer, available from Apple Computer, Inc. of Cupertino, Calif., a SparcStation (tm)  workstation, available from Sun Microsystems, Inc., of Mountain View, Calif., and a workstation from Silicon Graphics, Inc. of Mountain View, Calif.
      <br/>
      In one embodiment, the computer system 100 executes an operating system such as Windows 95 (tm)  or Windows NT (tm) , available from Microsoft, Inc. of Redmond, Wash.
    </p>
    <p num="24">
      The computer system 100 need only have some type of processor 110 for executing instructions and manipulating data.
      <br/>
      In one embodiment, the processor 110 includes a distributed processing system such that processing is done by a number of networked microprocessors.
    </p>
    <p num="25">
      The memory 140 stores data and instructions.
      <br/>
      The memory 140 includes one or more of: a random access memory, a read only memory and a hard disk memory.
    </p>
    <p num="26">
      The input device 120 allows the user to interact with the 3D modeling and animation application 145.
      <br/>
      The input device 120 includes one or more of a keyboard, a mouse, and a trackball.
      <br/>
      Importantly, the input device 120 includes some device allowing the user to interact with the 3D modeling and animation application 145.
    </p>
    <p num="27">
      The display device 130 displays the 3D modeling and animation interface 135.
      <br/>
      The display device 130 includes a cathode ray tube (CRT) display, flat panel display, or some other display device.
      <br/>
      In the example of FIG. 1, the 3D representation of the scene 142 is shown in a perspective view 132.
    </p>
    <p num="28">
      The 3D modeling and animation application 145 includes data and instructions for creating 3D models, photo-realistic still images, and film quality animation.
      <br/>
      The 3D modeling and animation application 145 uses a process called "rendering" to determine the correct display device 130 representation of the scene 142.
      <br/>
      One embodiment of the invention includes the application 3D Studio Max (tm) , available from Autodesk, Inc. of San Rafael, Calif.
    </p>
    <p num="29">
      The scene 142 includes all the objects to be displayed in the 3D modeling and animation interface 135.
      <br/>
      An object is thus something in a scene 142.
      <br/>
      Further, an object is a model of a physical object, such as a cylinder, tube, box or teapot, or an object is a non-physical object used in modeling other objects, such as a wave, a bomb, or a deflector.
      <br/>
      Each object corresponds to an graphical representation in the 3D modeling and animation interface 135.
      <br/>
      Of course, some objects may not be displayed because, for example, the display options in the 3D modeling and animation interface 135 do not allow that particular object to be displayed, because one object is blocking another object, or because the user has requested that the object not be displayed.
      <br/>
      Objects are described in greater detail below.
    </p>
    <p num="30">
      The scene 142 is made up of a number of nodes, such as node 144.
      <br/>
      Each node is associated with some object.
      <br/>
      In the example of FIG. 1, the node 144 is associated with a derived tube 146 object.
      <br/>
      The derived tube 146 is a model of a physical object; in this case, a tube that has been bent and twisted.
      <br/>
      The bent and twisted tube is shown as the derived tube's graphical representation 134.
      <br/>
      Note the invention allows for much more visually complex objects to be rendered, but for FIG. 1, an example of a relatively simple object is described.
    </p>
    <p num="31">
      The derived tube 146 has a modifier stack, labeled as tube modifier stack 199.
      <br/>
      The tube modifier stack 199 is a simplified example of a modifier stack.
      <br/>
      The modifier stack is described in greater detail below.
      <br/>
      The tube modifier stack 199 includes the tube master 190 (a parametric object), the bend modifier 192 and the twist modifier 194.
      <br/>
      The tube master 190 includes a parametric definition of a tube, e.g. a tube has an inner radius, an outer radius and a height.
      <br/>
      The bend modifier 192 modifies the definition of the tube so that the tube will appear bent.
      <br/>
      The twist modifier 194 modifies the definition of the bent tube so that the bent tube is also twisted.
      <br/>
      How the modifiers work in connection with the master objects is described in greater detail below.
      <br/>
      However, importantly, the use of modifier stacks, in one embodiment of the invention, provides the user with previously unequaled ease of use and flexibility in 3D modeling and animation.
    </p>
    <p num="32">
      The following describes the general operations in the computer system 100 used in the rendering process.
      <br/>
      The computer system 100, using the processor 110 and the memory 140, executes the 3D modeling and animation application 145 which renders a three-dimensional (3D) representation of the scene 142 on the display device 130.
      <br/>
      As part of the rendering process, the derived tube 146 provides a parametric definition of a bent and twisted tube for use by the 3D modeling and animation application 145.
      <br/>
      In this step, the derived tube 146 accesses the tube modifier stack 199 to generate the parametric definition of the bent and twisted tube.
      <br/>
      The 3D modeling and animation application 145 uses the parametric definition and various rendering techniques to generate the derived tube's graphical representation 134.
      <br/>
      The 3D modeling and animation application 145 then causes the display device to display the perspective view 132, including the derived tube's graphical representation 134.
      <br/>
      Thus, given a scene with a derived object, the computer system 100 can render a representation of that object.
    </p>
    <p num="33">
      The above has described an overview of a computer system that supports 3D modeling and animation using modifier stacks.
      <br/>
      The next section describes the class hierarchy used in the 3D modeling and animation application 145 that enable the use of modifier stacks.
      <br/>
      Following the next section is a description of the how these classes are used together in the application.
    </p>
    <p num="34">D. Objects and Their Relation to Scenes</p>
    <p num="35">
      In one embodiment of the invention, the 3D modeling and animation application 145 has an object oriented design.
      <br/>
      Thus, the application has a class hierarchy that supports inheritance.
      <br/>
      This section describes the class hierarchy used to create modifier stacks.
      <br/>
      Table 1 illustrates the class hierarchy in one embodiment of the 3D modeling and animation application 145.
      <br/>
      Each of the classes is described below.
    </p>
    <p num="36">
      --      TABLE 1
      <br/>
      --      Animatable
      <br/>
      --        ReferenceMaker
      <br/>
      --        ReferenceTarget
      <br/>
      --        BaseObject
      <br/>
      --        Modifier
      <br/>
      --        Object
      <br/>
      --        GeometricObject
      <br/>
      --        TriObject
      <br/>
      --        SimpleObject
      <br/>
      --        PatchObject
      <br/>
      --        ParticleObject
      <br/>
      --        SimpleParticle
      <br/>
      --        ShapeObject
      <br/>
      --        SplineShape
      <br/>
      --        SimpleSpline
      <br/>
      --        LinearShape
      <br/>
      --        SimpleShape
      <br/>
      --        WorldSpaceModifierObject
      <br/>
      --        SimpleWorldSpaceModifierObject
    </p>
    <p num="37">
      i.
      <br/>
      Animatable Class
    </p>
    <p num="38">
      The Animatable class is the superclass of all the animatable classes.
      <br/>
      Although no instances of Animatable are used, instances of the Animatable's subclasses include methods that support the animation of an instance of that particular subclass.
      <br/>
      Also, the Animatable class includes a class identifier and associated properties.
    </p>
    <p num="39">ii. ReferenceMaker &amp; ReferenceTarget</p>
    <p num="40">
      The ReferenceMaker class and the ReferenceTarget classes work together to support references between objects in a scene.
      <br/>
      A reference within a scene occurs when one object depends upon another object for rendering.
      <br/>
      For example, one embodiment of the invention allows different objects (e.g. two derived tubes) to share the same master object.
      <br/>
      In this example, the master object becomes the target of references from the objects.
      <br/>
      The reference allows a scene to be rendered and allows for the use of modifiers by multiple objects.
      <br/>
      As is described below, this use feature provides a user with significant benefits over previous systems.
      <br/>
      The reference also allows changes in the master object to be broadcast to any objects that are referring to that master object.
      <br/>
      The ReferenceMaker class includes the methods for indicating that a particular instance depends on another instance.
      <br/>
      The ReferenceMaker class also includes methods for receiving messages from reference target objects when changes are made to that reference target object.
      <br/>
      The ReferenceTarget class includes the methods for indicating that a particular instance is target of a reference.
      <br/>
      The ReferenceTarget class supports the broadcast of messages to all referring reference maker objects about changes to that reference target object.
      <br/>
      As with the Animatable class, no instances of ReferenceMaker or ReferenceTarget are used in the application, instances of these classes' subclasses are used instead.
    </p>
    <p num="41">
      In one embodiment of the invention, references support a technique called lazy evaluation.
      <br/>
      Lazy evaluation increases the performance of the 3D modeling and animation application 145.
      <br/>
      The purpose of lazy evaluation is to reduce the number of unnecessary calculations by not performing any evaluations until specifically requested.
    </p>
    <p num="42">
      The following describes an example of lazy evaluation.
      <br/>
      Assume that to properly render a first object, that first object must receive data from a second object (e.g., the first object includes an instance of a LinkedXForm which uses the local coordinate space of the second object to scale the first object.
      <br/>
      LinkedXForms are described below).
      <br/>
      This relationship is established via a reference from the first object to the second object.
      <br/>
      If the data in the second object is changed, then the second object will broadcast the change to the first object.
      <br/>
      In lazy evaluation, the first object does not recalculate any changed values (e.g., its geometry parameters) until the first object is specifically requested (e.g., a request to provide a derived object representation, described below).
      <br/>
      In lazy evaluation, the first object merely marks its dependent values as no longer valid.
      <br/>
      Thus, the first object does not precompute the new values until it needs to provide these values.
    </p>
    <p num="43">iii. BaseObject</p>
    <p num="44">
      The BaseObject class includes the methods for providing a three dimensional graphical representation of an object on the display device 130.
      <br/>
      The BaseObject class includes methods for providing different display methods (e.g., bounding box, wireframe) for each of its subclasses.
      <br/>
      In one embodiment, these display methods are overridden by equivalently named methods in the BaseObject's subclasses.
    </p>
    <p num="45">iv. Modifier</p>
    <p num="46">
      The Modifier class includes the methods for modifying objects during the rendering process.
      <br/>
      Instances of the Modifier's subclasses provide a set of very powerful and flexible features that greatly enhance the usability of the 3D modeling and animation application 145.
      <br/>
      Each instance of a Modifier subclass has methods for causing a particular modification of an object, such as a bend or a twist.
      <br/>
      Modifiers change the look of an object by, for example, changing the object's vertices or the object's topology.
      <br/>
      Modifiers can be stacked together so that the output of one modifier is fed into the input of another modifier.
      <br/>
      This provides a user with a virtually endless number of combinations.
      <br/>
      Modifiers can also be shared through references.
    </p>
    <p num="47">
      In one embodiment, each Modifier subclass modifies only specific types of objects.
      <br/>
      For example, in this embodiment, instances of the Bend class can modify geometric objects and shape objects while instances of the EditSpline class can only modify shape objects.
    </p>
    <p num="48">
      There are two main subclasses of Modifier: ObjectSpaceModifier and WorldSpaceModifier.
      <br/>
      These classes are described next.
    </p>
    <p num="49">V. ObjectSpaceModifier</p>
    <p num="50">
      The ObjectSpaceModifier class is a subclass of the Modifier class.
      <br/>
      The ObjectSpaceModifier class is the superclass of the object space modifier classes.
      <br/>
      Before further describing the class, the various coordinate spaces relevant to one embodiment of the invention are described.
    </p>
    <p num="51">
      Different spaces are used in one embodiment of the invention to differentiate different sets of spatial coordinate systems.
      <br/>
      In one embodiment of the invention there are two relevant spatial coordinate systems, object space and world space.
    </p>
    <p num="52">
      Object space is the coordinate system unique to each object in the scene 142.
      <br/>
      In one embodiment, every object has a local center and coordinate system defined by the location and orientation of the object's pivot point.
      <br/>
      The local center and coordinate system of an object combine to define that object's object space.
    </p>
    <p num="53">
      World space is the universal coordinate system used to track objects in a scene 142.
      <br/>
      World space relates the coordinates defining an object to the other objects in the scene 142.
      <br/>
      An object in a scene is located in world space by that object's position, rotation and scale (its transforms).
    </p>
    <p num="54">
      Returning to the description of the ObjectSpaceModifier class, instances of the subclasses of ObjectSpaceModifier modify an object in object space.
      <br/>
      For example, a bend is an object space modifier that causes an object's definition to change so that some portion of the object is bent relative to some other portion of that object.
    </p>
    <p num="55">
      The following describes the types of object space modifiers available in one embodiment of the invention.
      <br/>
      Object space modifiers can be divided into general, specialized and edit shape modifiers.
      <br/>
      The general object space modifiers have real-world equivalents and are relatively simple to understand.
      <br/>
      In one embodiment, the general object space modifiers include: bends, ripples, skews, tapers, twists, and waves.
      <br/>
      In this embodiment, the special modifiers include: displace, noise, and optimize.
      <br/>
      Also in this embodiment, the edit shape modifiers include edit splines, extrudes and lathes.
      <br/>
      In one embodiment, Bend, Ripple, Skew, Taper, Twist, Wave, Displace, Noise, Optimize, XForm, LinkedXForm, VolumeSelection, EditSpline, Extrude and Lathe are all subclasses of the superclass ObjectSpaceModifier.
    </p>
    <p num="56">
      Bend--produces a uniform bend in an object's geometry.
      <br/>
      The angle and direction of the bend is set as well as the bend axis.
      <br/>
      The bend modifier has a limit value that limits the bend to a particular section of an object's geometry.
    </p>
    <p num="57">
      Ripple--produces a concentric rippling effect in an object's geometry.
      <br/>
      The size of the waves of the ripple are set.
      <br/>
      Ripple has a corresponding modifier in the world space.
    </p>
    <p num="58">
      Wave--produces a wave effect in an object's geometry.
      <br/>
      The size and phase of the wave is set.
      <br/>
      One embodiment of the invention supports a decay value that decreases or increases the size of the wave.
      <br/>
      Wave also has a corresponding world space modifier.
    </p>
    <p num="59">
      Skew--produces a uniform offset in an object's geometry.
      <br/>
      The amount and direction are set for each instance of skew.
      <br/>
      A skew's effect can also be limited so that only a portion of an object is skewed.
    </p>
    <p num="60">
      Taper--produces a tapered contour by scaling one end of an object's geometry.
      <br/>
      Each taper instance has values for the amount of tapes and curve of the taper on two sets of axes.
      <br/>
      The taper's effect can also be limited to a section of the object's geometry.
    </p>
    <p num="61">
      Twist--produces a twist like a screw's thread in an object's geometry.
      <br/>
      Each instance of Twist has values for the angle of the twist on any of three axes, and a bias that compresses the threads relative to the pivot point of the object.
      <br/>
      The twist's effect can also be limited to a section of the object's geometry.
    </p>
    <p num="62">
      Displace--reshapes the geometry with a variable force.
      <br/>
      One embodiment of the invention has a corresponding Displace class that is a subclass of WorldSpaceModifier.
    </p>
    <p num="63">
      Noise--simulates random motion in an animated object.
      <br/>
      Noise also produces fractal effects that are useful in creating terrain features, for example.
    </p>
    <p num="64">
      Optimize--reduces the number of faces and vertices in an object.
      <br/>
      The purpose of Optimize is to simplify the geometry and increase the speed of rendering while maintaining an acceptable image.
    </p>
    <p num="65">
      XForm--acts as a transform for all or a portion of an object but is evaluated as a modifier.
      <br/>
      The importance of the order of execution of modifiers and transforms is described in greater detail below.
    </p>
    <p num="66">LinkedXForm--works in the same way as XForm except that the LinkedXForm uses the coordinate system of another object.</p>
    <p num="67">
      EditSpline--changes the splines, segments and vertices of a shape object.
      <br/>
      Shape objects are described below in conjunction with the description of the Object class.
    </p>
    <p num="68">Extrude--creates a 3D object by sweeping a shape along a straight line.</p>
    <p num="69">Lathe--creates a 3D object by revolving a shape along an axis.</p>
    <p num="70">(1) Manipulating Object Space Modifiers</p>
    <p num="71">
      Before describing world space modifiers, a description of a method of interacting with object space modifiers is described.
      <br/>
      One embodiment of the invention not only allows a user to change the parameters of an object space modifier by directly entering the values of the parameters, but also allows the user to manipulate a 3D representation of the modifier.
    </p>
    <p num="72">
      In one embodiment, the 3D representation of the modifier is called a gizmo.
      <br/>
      The gizmo is a wireframe representation of that gizmo's modifier.
      <br/>
      A gizmo acts like a mechanical apparatus that the transfers the modification to the object that gizmo is attached to.
      <br/>
      That is, by changing the gizmo, the user is changing the values of the parameters of the modifier.
      <br/>
      A user can move, scale and rotate a gizmo as is done with any other object.
    </p>
    <p num="73">
      In one embodiment, the gizmo represents parameters of a modifier that are not otherwise easily definable and/or accessible by a user.
      <br/>
      For example, a modifier may have a center, defined by an +x, y, z} coordinate, a scale along each axis, and a rotation along each axis.
      <br/>
      This is a great deal of information.
      <br/>
      However, by providing the user with a three dimensional representation of this modifier information, the user can quickly visualize this information and change it, thereby changing these values and in turn changing the effect of the modifier on the object.
    </p>
    <p num="74">
      In one embodiment, world space modifiers also have gizmos.
      <br/>
      In another embodiment, an instance of a world space modifier uses a world space modifier object to change the parameters of the world space modifier.
    </p>
    <p num="75">vi. World Space Modifier</p>
    <p num="76">
      Like instances of the ObjectSpaceModifier class, instances of the WorldSpaceModifier class affect the appearance of other objects.
      <br/>
      The difference being that world space modifiers affect objects in world space coordinates.
      <br/>
      Also like the ObjectSpaceModifier class, WorldSpaceModifier has a number of subclasses that can be instanced to modify objects in different ways.
    </p>
    <p num="77">
      One or more objects are modified by a world space modifier by binding those objects to the world space modifier.
      <br/>
      In one embodiment, the binding process is performed by creating a reference between the world space modifier and each object that is bound to that world space modifier.
      <br/>
      A world space modifier has no effect on an object in a scene 142 that is not bound to the world space modifier.
      <br/>
      Importantly, when multiple objects are bound to the same world space modifier, the world space modifier's parameters affects all the objects equally.
      <br/>
      However, each object's distance from, and spatial orientation to, the world space modifier can change the world space modifier's effect.
      <br/>
      Because of this spatial effect, simply moving an object through the world space can change the world space modifier's effect.
      <br/>
      This last feature provides a user with a powerful tool in animations.
      <br/>
      For example, to show a dolphin swimming, a user need only model the dolphin and then bind the dolphin to an instance of a Wave world space modifier.
      <br/>
      As the dolphin object translates through the world space, the dolphin will be modified by the wave to appear to be swimming.
      <br/>
      Additionally, an object can be bound to multiple world space modifiers.
    </p>
    <p num="78">
      In one embodiment, each world space modifier includes a graphical representation of itself.
      <br/>
      As noted above, this graphical representation is a gizmo in one embodiment, and in another embodiment, this graphical representation is an instance of a subclass of the Object class.
    </p>
    <p num="79">The following is a list of subclasses of WorldSpaceModifier, in one embodiment:</p>
    <p num="80">
      Bomb--explodes a geometric object into individual faces that over time become disjoint in space.
      <br/>
      Thus, the Bomb subclass is particularly useful in animations.
    </p>
    <p num="81">
      Deflector--acts as a shield to repel the particles generated by a particle system object.
      <br/>
      A deflector can be used to simulate pavement being struck by rain, or a rock in the middle of a waterfall.
    </p>
    <p num="82">Displace--acts much like the ObjectSpaceModifier Displace class except the effect is in world space.</p>
    <p num="83">
      Gravity--simulates the effects of gravity on particles generated by a particle system object.
      <br/>
      Gravity instances are directional.
      <br/>
      To create a waterfall with a rock in the middle, instances of Gravity and Deflector classes can be combined.
    </p>
    <p num="84">Ripple--acts much like the ObjectSpaceModifier Ripple class except the effect is in world space.</p>
    <p num="85">Wave--acts much like the ObjectSpaceModifier Wave class except the effect is in world space.</p>
    <p num="86">Wind--simulates the effect of wind blowing particles generated by a particle system object.</p>
    <p num="87">
      As noted above, each Modifier subclass knows which objects it can modify.
      <br/>
      In the above embodiment, the Bomb, Display, Gravity, Ripple and Wave classes modify geometric objects.
      <br/>
      The Deflector, Displace, Gravity and Wind modifiers modify particle system objects.
    </p>
    <p num="88">One embodiment of the invention includes a plug-in architecture that allows additional object space and world space modifiers to be added to the 3D modeling and animation application 145.</p>
    <p num="89">vii. Object</p>
    <p num="90">
      As noted above, the term object refers to something in the scene 142.
      <br/>
      In one embodiment, all objects are defined by three general properties: a collection of creation parameters, a pivot point, and a bounding box.
      <br/>
      The properties describe the form, local origin, initial orientation, and the extent of an object.
    </p>
    <p num="91">
      The Object class is the superclass of all the different types of objects in a scene.
      <br/>
      In one embodiment, the Object class has the following subclasses: GeomObject (geometry object), ShapeObject, WorldSpaceModifierObject, and DerivedObject.
    </p>
    <p num="92">
      The GeomObject class is the superclass of basic renderable objects, such as tubes, cylinders, boxes, polyhedra, spheres, torus, and cones.
      <br/>
      One embodiment of the invention includes the following geometric object categories.
    </p>
    <p num="93">Standard Primitives--are 3D geometric objects such as Box, Sphere, and Cylinder.</p>
    <p num="94">Patch Grids--are 2D surfaces.</p>
    <p num="95">Particle Systems--are animated objects that simulate rain, snow, dust and similar collections of small objects.</p>
    <p num="96">
      Shapes--include 2D objects line lines and donuts and 3D spline-based shapes like a helix.
      <br/>
      Shape objects are not directly renderable in one embodiment.
      <br/>
      The shape objects need to first be modified before they are renderable.
    </p>
    <p num="97">
      World Space Modifier Object--is not a renderable object, but is still visible to the user.
      <br/>
      A world space modifier object is like a gizmo for an object space modifier.
      <br/>
      The world space modifier object provides a visual representation of a world space modifier that allows the user to bind an object to the corresponding world space modifier.
    </p>
    <p num="98">
      Derived Object--includes a list of modifier objects and a pointer to the master object.
      <br/>
      In rendering a scene, a user always sees a derived object, even if no modifiers are applied to an object.
      <br/>
      The reason for this is that the derived object not only ensures that a particular object is correctly rendered, but also that an appropriate cache is maintained for that particular object.
      <br/>
      The caching abilities of the derived objects is an important performance enhancing feature of one embodiment of the invention and is described in greater detail below.
    </p>
    <p num="99">
      The above class hierarchy illustrates only one class hierarchy.
      <br/>
      Other embodiments include other class hierarchies.
      <br/>
      For example, in one embodiment, the classes under the ShapeObject are moved under the GeometricObject class.
      <br/>
      In another embodiment, the methods in the Animatable, ReferenceMaker and ReferenceTarget classes are combined into the BaseObject class.
      <br/>
      In another embodiment, the ReferenceTarget is a superclass of the ReferenceMaker.
      <br/>
      In another embodiment written in a language that supports multiple inheritance, ReferenceMaker does not inherit from Animatable, nor does BaseObject inherit directly from ReferenceTarget, however the Modifier class and the Object class multiply inherit from the Animatable, ReferenceTarget and BaseObject.
    </p>
    <p num="100">E. Pipeline for Rendering</p>
    <p num="101">
      FIG. 2 and the following describe how objects in a scene 142 are rendered in one embodiment of the 3D modeling and animation application 145.
      <br/>
      So as not to obscure this embodiment of the invention, FIG. 2 has been simplified.
      <br/>
      The following first describes the elements of FIG. 2 and then the operation of those elements.
    </p>
    <p num="102">
      FIG. 2 includes an application control module 200, a derived object 270, a modifier stack 280, a master object 210, an object space modifier 220, a transform 230, a world space modifier 240, a rendering pipeline 250 and a display buffer 260.
      <br/>
      These elements work together to render a graphical representation of the derived object onto the display device 130.
    </p>
    <p num="103">
      The application control 200 controls the operation and interaction between the elements of FIG. 2.
      <br/>
      In one embodiment, the application control 200 includes the 3D Studio Max (tm)  core software architecture.
      <br/>
      However, what is important is that there is some method of controlling the various elements in FIG. 2.
    </p>
    <p num="104">
      The derived object 270 is part of a scene 142 (not shown) and is responsible for ensuring that a modified object is properly rendered.
      <br/>
      The derived object is an instance of the DerivedObject class.
      <br/>
      The derived object instance is created when a user creates an object in a scene.
    </p>
    <p num="105">
      In one embodiment, each derived object 270 maintains a modifier stack 280.
      <br/>
      In one embodiment, the modifier stack 280 includes a list of modifiers (e.g. object space modifier 220 and world space modifier 240), a transform, and a pointer to a master object 210.
      <br/>
      In another embodiment, the derived object 270 maintains a reference to the master object 210, a reference to the transform 230, and a list of modifiers.
      <br/>
      However, what is important is that the derived object 270 maintains the information necessary to generate a description of a modified object (labeled as the derived object representation 246).
    </p>
    <p num="106">
      A more detailed description of the elements in the modifier stack 280 is now provided.
      <br/>
      The master object 210 includes a parametric definition of an instance of a subclass of Object (e.g. the topology (e.g., mesh, direction of faces) and geometry (e.g., vertices and edges)).
      <br/>
      Importantly, the user does not see the master object 210 but sees the rendered result of the modifiers and transform identified by the derived object 270.
      <br/>
      The object space modifier 220 is an instance of a subclass of the class ObjectSpaceModifier.
      <br/>
      The transform 230 is responsible for transforming points in the object space coordinate system to corresponding points in the world space coordinate system.
      <br/>
      Unlike modifiers, the transform 230 is independent of an object's internal structure.
      <br/>
      The transform 230 acts directly on the object's local coordinate system.
      <br/>
      The local coordinate system for an object can be expressed as a matrix of values that specify the following information in world space: position of the object's center, rotation of the object in world space, and the scale of the object along its local axes.
      <br/>
      The world space modifier 240 is an instance of a subclass of the class WorldSpaceModifier.
      <br/>
      The modifier stack 280 includes zero or more object space modifiers and world space modifiers.
    </p>
    <p num="107">
      In response to a request for a representation of itself, the derived object 270 provides the application control 200 with a derived object representation 246.
      <br/>
      Depending on the type of rendering being done and the type of master object 210, the derived object 270 will provide a bounding box, topology, geometry and/or texture map description of the modified and transformed master object 210.
      <br/>
      How the derived object 270 creates the derived object representation 246 is described below.
    </p>
    <p num="108">
      The derived object representation 246 is then used by the rendering pipeline 250 to create a bit pixel data 256 representation of the modified and transformed object.
      <br/>
      The rendering pipeline 250 includes processes for converting the parameter information in the derived object representation 246 into pixel data.
      <br/>
      In one embodiment, the rendering pipeline includes rendering processes such as smoothing, highlighting, facets, lit wireframe, wireframe and bounding box.
      <br/>
      In one embodiment, known rendering techniques are used in the rendering pipeline 250.
      <br/>
      The pixel data 256 includes the pixel information for display on display device 130.
      <br/>
      The display buffer 260 holds the pixel data for display by the display device 130.
    </p>
    <p num="109">
      How the derived object 270 creates the derived object representation 246 is now described.
      <br/>
      When a derived object 270 is asked by the application control 200 to provide a renderable description of itself, the derived object 270 evaluates the master object 210, then any object space modifiers, the transform, and then any world space modifiers, to generate the derived object representation 246.
      <br/>
      That is the master object 210 provides the basic description of the object.
      <br/>
      This basic description is then provided to the first object space modifier in the modifier stack 280.
      <br/>
      The object space modifier modifies this basic description to generate a modified description.
      <br/>
      The next object space modifier is then evaluated to modify the previous modified description.
      <br/>
      This process continues until each object space modifier has been evaluated.
      <br/>
      Importantly, the object space modifiers are evaluated in the order they appear in the object modifier stack 280.
      <br/>
      Next the transform 230 is evaluated.
      <br/>
      Each derived object 270 has only a single transform 230 and that transform is always evaluated after the object space modifiers 220.
      <br/>
      If a user wishes to apply a transform before one or more object space modifiers, the user can use an instance of the XForm object space modifier class.
      <br/>
      After the transform 230, the world space modifiers 240 are evaluated.
      <br/>
      The world space modifiers are evaluated in a manner similar to the object space modifiers.
      <br/>
      In particular, the world space modifiers 240 are evaluated in the order that they are added to the modifier stack 280.
    </p>
    <p num="110">
      As noted above, the modifier stack 280 makes modeling and animation significantly easier for the user.
      <br/>
      Some advantages of having the modifier stack 280 are described below.
    </p>
    <p num="111">F. Using the Modifier Stack</p>
    <p num="112">
      This section describes how to use the modifier stack 280 and provides examples of using the modifier stack for modeling and animation.
      <br/>
      FIG. 3 through FIG. 7 illustrate an example of creating and modifying a tube using a modifier stack 280.
      <br/>
      FIG. 8 through FIG. 11 illustrate an example of animating a cylinder using a modifier stack 280.
    </p>
    <p num="113">i. Modeling and the Modifier Stack</p>
    <p num="114">
      Each time a new object is instantiated by a user, a derived object 270 is created.
      <br/>
      In the example of FIG. 3, a tube 300 is created and rendered to the 3D modeling and animation interface 135.
      <br/>
      To the right of the interface, the parameters defining the tube are shown in the tube definition 310.
      <br/>
      At this point, the modifier stack 280 only includes the reference to the tube master object 210 and the transform 230 for the tube.
    </p>
    <p num="115">
      FIG. 4 illustrates a bend modifier as it is applied to the tube 300.
      <br/>
      When the tube 300 is selected, the 3D modeling and animation interface displays the modifier stack interface 420 for the tube 300.
      <br/>
      The modifier stack interface 420 shows that the bend modifier has been selected for display.
      <br/>
      Because the bend is selected, the bend definition 410 appears.
      <br/>
      The bend definition 410 shows the parameters for the bend.
      <br/>
      In this case, the angle of the bend is ninety degrees and the direction is ninety degrees, both along the Z axis.
    </p>
    <p num="116">
      Also shown in FIG. 4 is an example of a gizmo, the bend gizmo 430.
      <br/>
      The bend gizmo allows the user to change the values of the bend modifier without having to enter the values directly into the bend definition 410 interface.
    </p>
    <p num="117">
      FIG. 5 illustrates an additional twist modifier as it is applied to the bent tube 300.
      <br/>
      The modifier stack edit window 520 is also displayed.
      <br/>
      The modifier stack edit window 520 shows that the tube 300 has a bend applied first and then a twist.
      <br/>
      Importantly, the modifier stack 280 allows a user to easily add modifiers to an object and view not only the results of the new modifiers but also view a list of all the modifiers that apply to an object.
    </p>
    <p num="118">
      The modifier stack 280 also allows a user to edit modifiers that are anywhere in the modifier stack 280.
      <br/>
      For example, the user can change the values of the bend modifier without having to "undo" the twist modifier first.
    </p>
    <p num="119">
      In one embodiment, the user can change the order of the modifiers.
      <br/>
      As noted above the order of evaluation of the modifiers is important for some modifiers.
      <br/>
      For example, applying a bend before a twist can have a significantly different look than applying a twist before the bend.
    </p>
    <p num="120">
      Additionally, the user can disable a particular modifier, but keep the modifier in the modifier stack 280.
      <br/>
      FIG. 6 illustrates an example of this feature.
      <br/>
      The tube with the bend and twist 600 is the same tube as is illustrated in FIG. 5.
      <br/>
      The tube with the bend disabled 610 shows the same modified object except that the bend modifier has been disabled in this tube's modifier stack.
      <br/>
      The bend disabled indicator 630 indicates that the bend modifier for the tube 610 has been disabled.
      <br/>
      In one embodiment, to enable the bend, the user need only select the bend disabled indicator 630.
    </p>
    <p num="121">
      FIG. 7 illustrates the tube with a bend and twist 600 as well as a tube with a bend disabled and a transform modifier 710.
      <br/>
      The modifier stack of the tube with the bend disabled and the transform modifier 730 is also shown.
      <br/>
      Importantly, the user was able to easily change the order of the twist and bend, keep the bend disabled, and insert an XForm instance between the two modifiers.
    </p>
    <p num="122">ii. Animation and the Modifier Stack</p>
    <p num="123">
      As noted above, in addition to helping in modeling, the modifier stack 280 is helpful in animating a model.
      <br/>
      Before describing the examples of FIG. 8 through FIG. 11, it is helpful to describe the animation process first.
    </p>
    <p num="124">
      The user creates key frames that record values of various parameters at the beginning and end of each animated sequence.
      <br/>
      The values at the keyframes are called keys.
      <br/>
      The 3D modeling and animation application 145 determines the interpolated values between each key to produce "between frames" that complete the animation.
      <br/>
      The 3D modeling and animation application 145 can animate many parameters in a scene 142.
      <br/>
      For example, modifier parameters can be animated such as a bend angle, and a taper amount.
    </p>
    <p num="125">Note that other embodiments of the invention allow the user to create an animation by not using key frames but by using controllers which are not key based, e.g., noise.</p>
    <p num="126">
      FIG. 8 illustrates the beginning of a thirty frame animation sequence (frame zero is shown in the frame indicator 840).
      <br/>
      FIG. 9 illustrates results of the animation at frame fifteen.
      <br/>
      FIG. 10 illustrates the results of the animation at frame twenty.
      <br/>
      FIG. 11 illustrates the end of the animation sequence at frame thirty.
    </p>
    <p num="127">
      The elements in FIG. 8 through FIG. 11 are: the bound cylinder 810, the wave world space modifier 800 and the box 850.
      <br/>
      The bound cylinder 810 is bound to the wave world space modifier 800.
    </p>
    <p num="128">
      FIG. 8 shows the bound cylinder 810 rendered to the left side of the perspective view.
      <br/>
      The box 850 is relatively short.
      <br/>
      FIG. 8 is a key frame that defines the position, size, rotation, and the effects of any modifiers on the bound cylinder 810 and the box 850 at frame zero of the animation.
    </p>
    <p num="129">
      FIG. 9 shows the bound cylinder 810 partly translated to the fight.
      <br/>
      FIG. 9 is not a key frame, but an interpolated frame from the values defined in the frame zero key frame and the key frame at frame twenty.
      <br/>
      Note that the wave world space modifier 800 has modified the look of the bound cylinder 810.
      <br/>
      Also shown in FIG. 9 is that the box is now taller than in FIG. 8.
    </p>
    <p num="130">
      FIG. 10 shows the key frame where the bound cylinder 810 has completed its translation across the screen.
      <br/>
      To create this key frame, the user accessed the modifier stack 280 of the bound cylinder at frame twenty and changed the position of the bound cylinder 810 by modifying the values of the transform 230 for the bound cylinder 810.
      <br/>
      The 3D modeling and animation application 145 interpolated the values of the transform at the key frame zero and the key frame twenty to create the between frames including the between frame shown in FIG. 9.
    </p>
    <p num="131">
      FIG. 11 shows the last key frame in the sequence, frame thirty.
      <br/>
      In this frame, the bound cylinder 810 has not changed location because after frame twenty, there were no more key frames that affected the bound cylinder 810.
      <br/>
      However, frame thirty has a key value for the box 850.
      <br/>
      Thus, the box 850 has continued to grow in size from frame twenty.
      <br/>
      Again to enable the box to grow until frame thirty, the user had previously changed the value of the transform in the modifier stack 280 of the box 850 at frame thirty.
    </p>
    <p num="132">
      Importantly, the user can animate many of the parameters in the modifier stacks 280 of the objects in a scene.
      <br/>
      Thus, the animation of objects is much easier than in previous systems.
    </p>
    <p num="133">G. Caching</p>
    <p num="134">
      As noted above, one embodiment of the invention provides a significant speed increase over prior systems.
      <br/>
      This embodiment of the invention achieves the speed increase by caching portions of the derived object representation 246 within each derived object 270.
      <br/>
      The following describes how the values of the derived object representation 246 are determined and then how these values are cached.
    </p>
    <p num="135">i. Channels</p>
    <p num="136">
      In one embodiment of the invention, each derived object 270 provides the derived object representation 246 in response to a request to provide that information.
      <br/>
      However, the contents of that information may vary depending on the type of request.
      <br/>
      For example, a bounding box representation need not have the same detailed information as a smoothed representation.
      <br/>
      Additionally, during an animation, for example, only part of a derived object representation 246 may change.
      <br/>
      For example, as shown in the FIG. 8 through FIG. 11 during the animation, the topology of the bound cylinder does not change, but the geometry does change.
      <br/>
      Therefore, even though the same request may be made of the derived cylinder (e.g., wireframe representation request), only the geometry values are changing in each frame of the animation.
      <br/>
      Given that different types of data may need to generated because of the different types of messages, and that even for the same request only some of the data may change in the next frame, one embodiment of the invention divides the derived object representation 246 creation into value generating channels.
    </p>
    <p num="137">
      A channel corresponds to a different portion of a derived object representation 246.
      <br/>
      Each channel is responsible for generating its own portion of the derived object representation 246.
      <br/>
      Each element in the modifier stack 280 affects values in one or more of the channels.
      <br/>
      The results of an evaluation of a modifier in a channel is called an channel intermediate result.
      <br/>
      In one embodiment, providing a derived object representation 246 includes determining which channels need to be accessed.
      <br/>
      Next, evaluating the elements in the modifier stack 280 that affect the values in those channels are evaluated.
      <br/>
      Evaluating the elements affecting that channel involves generating a series of channel intermediate results until the last element is evaluated.
      <br/>
      The results of evaluating the last element in the modifier stack is that channel's portion of the derived object representation 246.
    </p>
    <p num="138">
      For example, the transform 230 affects values in at least the geometry channel in the derived object representation 246.
      <br/>
      Therefore, an evaluation of the transform 230 in the geometry channel generates a set of geometry channel intermediate results.
      <br/>
      These intermediate results can then Be passed onto the next element in the modifier stack 280 that effects the geometry channel.
      <br/>
      When the last element is evaluated, the geometry values are included in the derived object representation 246.
    </p>
    <p num="139">
      As shown in FIG. 12, one embodiment supports a topology channel 1210, a geometry channel 1220, a texture map channel 1230, a selection set channel 1230, a subcell type channel 1250 and a display selection channel 1260.
      <br/>
      The topology channel 1210 determines the topology (e.g., the normal direction of the faces of an object) of the derived object 270.
      <br/>
      The geometry channel 1220 determines the geometry (e.g., vertices) of the derived object 270.
      <br/>
      Most modifiers modify the geometry of the derived object 270.
      <br/>
      The texture map channel 1230 determines the texture mapping coordinates of any texture mapped to the derived object 270.
      <br/>
      The selection set channel 1240 determines an array of bits indicating which vertices are selected by a selection modifier.
      <br/>
      The subcell type channel 1250 determines the type of selection (e.g., for a mesh object, the selection type can be an edge or a vertex).
      <br/>
      The display selection channel 1260 determines how parts of the derived object are to be displayed (e.g., are vertices ticks to be displayed for the derived object 270).
      <br/>
      Not every derived object 270 needs all of these channels.
      <br/>
      For example, if no texture map is mapped onto an object, the texture map channel 1240 is not needed by the derived object 270.
    </p>
    <p num="140">ii. Caching in Channels</p>
    <p num="141">
      One embodiment of the invention includes the caching of the intermediate channel results.
      <br/>
      This embodiment of the invention not only includes determining the intermediate channel results, but also determining a time period for which those results are valid.
      <br/>
      This time period is called the validity interval.
      <br/>
      An example of a validity interval is where, for frame nineteen of the animation in FIG. 8 through FIG. 11, the bound cylinder 810 has a geometry channel 1220 validity interval, for the wave world space modifier 800, of frame twenty to frame infinity.
      <br/>
      Because the length of time an intermediate result of the derived object 270 is known to be valid, the validity interval helps optimize the caching of the intermediate channel results.
    </p>
    <p num="142">
      As shown in FIG. 12, each element in the modifier stack 280 has an associated validity interval in each topology channel.
      <br/>
      For example, the object space modifier 220 has a validity interval 1213 for the topology channel 1210, a validity interval 1223 for the geometry channel 1220, a validity interval 1233 for the texture map channel 1230, a validity interval 1243 for the selection set channel 1240, a validity interval 1253 for the subcell type channel 1250 and a validity interval 1263 for the display selection channel 1260.
    </p>
    <p num="143">
      In conjunction with FIG. 13, the following describes how the validity interval is used in the caching process.
      <br/>
      FIG. 13 illustrates the process of determining what to cache during the evaluation of elements for a specific channel of a derived object 270.
    </p>
    <p num="144">
      Prior to the first step in FIG. 13, the derived object 270 has received a request to provide a corresponding derived object representation 246.
      <br/>
      The derived object 270 then determines which channels need to be evaluated.
      <br/>
      The derived object 270 also is aware of the time (e.g., which frame) the request is being made for.
    </p>
    <p num="145">
      At step 1310, a test is made to determine whether each element in the modifier stack 280 has been processed.
      <br/>
      If all the elements have been processed, then step 1360 is performed.
      <br/>
      Otherwise, step 1320 is performed.
      <br/>
      In one embodiment, this includes testing whether the "present element" is the last element in the modifier stack 1280.
    </p>
    <p num="146">At step 1320, the next element in the modifier stack 1280, now identified as the "present element", generates a corresponding set of intermediate channel results for that particular element and channel.</p>
    <p num="147">
      At step 1330, the validity interval is determined, if not already determined from the last execution of these steps, for the present element.
      <br/>
      The present element's validity interval is tested to determine whether the present element is valid for the next X frames. (In another embodiment, the validity interval is tested to determine whether the present element's intermediate results are valid for a predetermined time period, a number of frames being only one example of the time period.) In one embodiment, X is ten.
      <br/>
      If the present element's validity interval is valid for the next X frames, then step 1340 is executed.
      <br/>
      Otherwise, step 1310 is executed.
    </p>
    <p num="148">
      At step 1340, the validity interval for the next element after the present element in the modifier stack 280 is generated.
      <br/>
      This validity interval is tested to determine whether the intermediate results generated by the next element are valid for a predetermined period of time (e.g., the next frame, or the next five frames).
      <br/>
      If the next element is the top of the modifier stack, then this test returns false.
      <br/>
      The next elements validity interval is stored in one embodiment for use in step 1330 during the next iteration of these steps.
      <br/>
      If the next element's validity interval is not valid for the predetermined period of time, then the step 1350 is executed.
      <br/>
      Otherwise, step 1310 is executed.
    </p>
    <p num="149">
      At step 1350, the intermediate channel results generated in step 1310 are stored in a cache for this derived object.
      <br/>
      Because of the tests performed in step 1330 and step 1340, the system knows that the data in the cache is valid for at least the next X frames.
      <br/>
      Therefore, the next time this channel is evaluated (e.g., the next frame), rather than evaluating all of the elements in the modifier stack 280 below the present element, the derived object need only begin the evaluation at the next element in the modifier stack 280 for this channel.
    </p>
    <p num="150">
      At step 1360, the results of evaluating the last element in the modifier stack 280 are cached.
      <br/>
      The results of the last element in the modifier stack 280 represent that channel's portion of the derived object 270.
      <br/>
      Therefore, in one embodiment, if a derived object 270 is requested to provide its derived object representation 246, with nothing changed in the derived object 270, that derived object 270 need only provide the cached value.
      <br/>
      This greatly reduces the number of evaluations performed in the system.
    </p>
    <p num="151">
      FIG. 14 illustrates one example of the caching performed for the bound cylinder 810.
      <br/>
      In the example of FIG. 14, the cache is shown for frame nineteen of the animation.
      <br/>
      Also, in this example, only the topology channel 1210 and the geometry channel 1220 are shown.
      <br/>
      The following describes how the steps of FIG. 13 are used to cache intermediate results in the topology channel 1210 and the geometry channel for the bound cylinder 810.
      <br/>
      The value for "X" in step 1330 is ten in this example.
    </p>
    <p num="152">
      For the topology channel 1210, first step 1310 is executed which leads to step 1320.
      <br/>
      At step 1320, the cylinder master object is accessed (the present element of the bound cylinder's modifier stack) and the intermediate topology channel results are generated.
      <br/>
      In this case, the intermediate topology channel results are the GeometricObject instance topology definition with no modifications.
      <br/>
      At step 1330, the topology channel validity interval 1411 for the cylinder master object is determined to be zero to infinity.
      <br/>
      Also at step 1330, the validity interval 1411 is determined to be greater than ten frames; therefore, step 1340 is executed.
      <br/>
      At step 1340, the validity interval 1415 for the transform 230 is determined to also be zero to infinity.
      <br/>
      Therefore, the intermediate topology channel results for the cylinder master object are not cached.
    </p>
    <p num="153">
      Step 1310 through step 1350 are repeated for each of the transform and the wave world space modifier 800.
      <br/>
      Because step 1340 evaluates as false during the processing of the elements effecting the topology channel 1210, no intermediate channel results are cached during these steps.
      <br/>
      However, at step 1360, the final results for the topology channel are stored in the world space modifier topology channel cache 1467.
      <br/>
      Thus, the results in the cache 1467 are valid for at least the next ten frames of an animation.
    </p>
    <p num="154">
      Step 1310 through step 1360 are then executed for all the elements that affect the geometry channel 1210.
      <br/>
      Note that during the processing of the transform element 230, at step 1340, the interval level 1227 for the next element indicates that the intermediate channel results generated for the next element will not be valid in the next frame of the animation.
      <br/>
      Thus, step 1350 is executed resulting in the caching of the intermediate channel results in the transform geometry channel cache 1475.
      <br/>
      Therefore, in the next animation frame, the bound cylinder need only begin evaluating the geometry channel 1220 from the intermediate channel results in the cache 1475 instead of from the cylinder master object 1410 intermediate channel results.
      <br/>
      Where an object has many modifiers, being able to use the intermediate channel results from a modifier, greatly improves the speed of the system because many calculations are saved.
      <br/>
      At step 1360, the geometry channel 1220 portion of the derived cylinder representation 1446 is stored in the WSM geometry channel cache 1477.
    </p>
    <p num="155">
      Note also that the combination of lazy evaluation and the caching in the channels further improve the speed of the system.
      <br/>
      Lazy evaluation of the channels further reduces the number of unnecessary calculations because the entire derived object representation may not be needed to be recalculated in response to a broadcast of changes through a reference from another object.
      <br/>
      That is, only certain channels may be affected by a set of changes therefore only the caches in these channels need be invalidated.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method of displaying 3D modeling and animation information in a computer system, said method comprising:</claim-text>
      <claim-text>accessing a description of a 3D model, said 3D model including a set of objects defining said 3D model; displaying a hierarchic representation of said description;</claim-text>
      <claim-text>and displaying one or more graphical representations of modifiers of the objects that affect appearances of the objects in world space coordinates, in which each graphical representation indicates how the appearance of each corresponding object is animated over time.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method recited in claim 1, further comprising the steps of: modifying the appearances of the objects by binding each of the objects to a corresponding modifier;</claim-text>
      <claim-text>and displaying the objects using the modified appearances.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method recited in claim 1, further comprising the steps of: modifying the appearances of the objects by binding each of the objects to a corresponding modifier by creating a reference between the modifier and each object that is bound to that modifier;</claim-text>
      <claim-text>and displaying an animated display of the objects using the modified appearances.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method recited in claim 1, further comprising the steps of: modifying the appearances of the objects by binding each of the objects to a corresponding modifier; further modifying the appearances of the objects according to each object's distance from or spatial orientation to its corresponding modifier;</claim-text>
      <claim-text>and displaying the objects using the further modified appearances.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method recited in claim 1, wherein displaying one or more graphical representations of modifiers comprises the step of displaying one or more gizmos that correspond to the world space modifiers, in which each of the gizmos comprises a wireframe grid representation of a translation of the world space coordinates.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method recited in claim 1, wherein accessing a description of a 3D model comprises the steps of accessing a description of a 3D model that comprises a set of object classes that define a 3D graphical object that forms a part of the 3D model;</claim-text>
      <claim-text>and wherein displaying one or more graphical representations of modifiers comprises the step of displaying one or more instances of a subclass of one of the object classes that corresponds to the world space modifiers.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method recited in claim 1, wherein displaying one or more graphical representations of modifiers comprises the steps of displaying one or more graphical representations of modifiers of the objects that affect appearances of the objects in world space coordinates, in which each graphical representation indicates how each corresponding object is animated over time, and in which each of the modifiers corresponds to a particular change in appearance in world space.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method recited in claim 1, further comprising the steps of: modifying the appearances of the objects by binding each of the objects to a plurality of the modifiers; further modifying the appearances of the objects in a plurality of ways according to each of the modifiers that is bound to each of the objects;</claim-text>
      <claim-text>and displaying the objects using the further modified appearances.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A method of facilitating modification of a graphical model that is displayed by a graphical modeling system on a graphical display device, the method comprising the computer-implemented steps of: storing a plurality of object descriptions in memory device, wherein each object description defines a portion of the model; storing, in association with each of the object descriptions, an ordered list of objects, in which each of the objects defines a successive modification to an appearance of the graphical model; displaying a graphical display of the list of the objects in order of the successive modifications; displaying the graphical model by successively applying each of the objects within one of the object descriptions according to the order of the list; receiving a changed value for a first one of the objects; displaying a first modified graphical model based on the changed value, without undoing the successive modifications that are defined by the objects that are ordered in the list after the first one of the objects;</claim-text>
      <claim-text>and updating the graphical display of the list to reflect the changed value.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method recited in claim 9, further comprising: receiving user input that defines an additional object to be associated with one of the object descriptions;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is modified according to the additional object.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method recited in claim 9, further comprising: displaying a list of all the objects and all the object descriptions that apply to the portion of the model.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method recited in claim 9, further comprising: displaying an edit window superimposed over the graphical model, in which the edit window lists all the objects and all the object descriptions that apply to the portion of the model;</claim-text>
      <claim-text>and wherein the step of receiving user input that defines a changed value for a first one of the objects includes the steps of receiving a first user input that defines a selection of one of the objects and receiving a second user input that defines a parameter of the objects to which the changed value is to be applied.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method recited in claim 9, further comprising: receiving user input that defines a re-ordering of the list of objects;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is modified according to the re-ordered list of objects.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method recited in claim 9, further comprising: disabling one of the objects within the list of objects;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is displayed without giving effect to the disabled object.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method recited in claim 9, further comprising: disabling one of the objects within the list of objects; displaying a second modified graphical model in which the first modified graphical model is displayed without giving effect to the disabled object; displaying a list of all the objects and all the object descriptions that apply to the portion of the model;</claim-text>
      <claim-text>and displaying a "disabled" indicator in the list in association with information that identifies the disabled object.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method recited in claim 15, further comprising: selecting the "disabled" indicator; re-enabling the disabled object;</claim-text>
      <claim-text>and displaying a third modified graphical model in which the second modified graphical model is displayed and gives effect to the disabled object.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. A computer-readable medium carrying one or more sequences of instructions for facilitating modification of a graphical model that is displayed by a graphical modeling system on a graphical display device, wherein execution of the one or more sequences of instructions by one or more processors causes the one or more processors to perform the steps of: storing a plurality of object descriptions in a memory device, wherein each object description defines a portion of the model; storing, in association with each of the object descriptions, an ordered list of objects, in which each of the objects defines a successive modification to an appearance of the graphical model; displaying a graphical display of the list of the objects in order of the successive modifications; displaying the graphical model by successively applying each of the objects within one of the object descriptions according to the order of the list; receiving user input that defines a changed value for a first one of the objects; displaying a first modified graphical model based on the changed value, without undoing the successive modifications that are defined by the objects that are ordered in the list after the first one of the objects;</claim-text>
      <claim-text>and updating the graphical display to reflect the changed value.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The computer-readable medium recited in claim 17, the steps further comprising: receiving user input that defines an additional object to be associated with one of the object descriptions;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is modified according to the additional object.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The computer-readable medium recited in claim 17, the steps further comprising: displaying a list of all the objects and all the object descriptions that apply to the portion of the model.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The computer-readable medium recited in claim 17, the steps further comprising: displaying an edit window superimposed over the graphical model, in which the edit window lists all the objects and all the object descriptions that apply to the portion of the model;</claim-text>
      <claim-text>and and wherein the step of receiving user input that defines a changed value for a first one of the objects includes the steps of receiving a first user input that defines a selection of one of the objects and receiving a second user input that defines a parameter of the objects to which the changed value is to be applied.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The computer-readable medium recited in claim 17, the steps further comprising: receiving user input that defines a re-ordering of the list of objects;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is modified according to the re-ordered list of objects.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The computer-readable medium recited in claim 17, the steps further comprising: disabling one of the objects within the list of objects;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is displayed without giving effect to the disabled object.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The computer-readable medium recited in claim 17, the steps further comprising: disabling one of the objects within the list of objects; displaying a second modified graphical model in which the first modified graphical model is displayed without giving effect to the disabled object; displaying a list of all the objects and all the object descriptions that apply to the portion of the model;</claim-text>
      <claim-text>and displaying a "disabled" indicator in the list in association with information that identifies the disabled object.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The computer-readable medium recited in claim 23, the steps further comprising: selecting the "disabled" indicator; re-enabling the disabled object;</claim-text>
      <claim-text>and displaying a third modified graphical model in which the second modified graphical model is displayed and gives effect to the disabled object.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. A method of facilitating modification of a graphical model that is displayed by a graphical modeling system on a graphical display device, the method comprising the computer-implemented steps of: storing a plurality of object descriptions in a memory device, wherein each object description defines a portion of the model; storing, in association with each of the object descriptions, an ordered stack of modifiers, in which each of the modifiers defines a successive modification to an appearance of the graphical model; displaying the graphical model by successively applying each of the modifiers within one of the object descriptions according to the order of the stack; receiving user input that defines a changed value for a first one of the modifiers;</claim-text>
      <claim-text>and displaying a first modified graphical model based on the changed value, without undoing the successive modifications that are defined by the modifiers that are ordered in the stack after the first one of the modifiers.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The method recited in claim 25, further comprising: receiving user input that defines an additional modifier to be added to the stack associated with one of the object descriptions;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is modified according to the additional modifier.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The method recited in claim 25, further comprising: disabling one of the modifiers within the stack;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is displayed without giving effect to the disabled modifier.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. A computer-readable medium carrying one or more sequences of one or more instructions for facilitating modification of a graphical model that is displayed by a graphical modeling system on a graphical display device, the one or more sequences of one or more instructions including instructions which, when executed by one or more processors, cause the one or more processors to perform the steps of: storing a plurality of object descriptions in a memory device, wherein each object description defines a portion of the model; storing, in association with each of the object descriptions, an ordered stack of modifiers, in which each of the modifiers defines a successive modification to an appearance of the graphical model; displaying the graphical model by successively applying each of the modifiers within one of the object descriptions according to the order of the stack; receiving user input that defines a changed value for a first one of the modifiers;</claim-text>
      <claim-text>and displaying a first modified graphical model based on the changed value, without undoing the successive modifications that are defined by the modifiers that are ordered in the stack after the first one of the modifiers.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The computer-readable media recited in claim 28, further comprising: receiving user input that defines an additional modifier to be added to the stack associated with one of the object descriptions;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is modified according to the additional modifier.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The computer-readable media recited in claim 28, further comprising: disabling one of the modifiers within the stack;</claim-text>
      <claim-text>and displaying a second modified graphical model in which the first modified graphical model is displayed without giving effect to the disabled modifier.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. A computer-readable medium carrying one or more sequences of one or more instructions for displaying 3D modeling and animation information, the one or more sequences of one or more instructions including instructions which, when executed by one or more processors, cause the one or more processors to perform the steps of: accessing a description of a 3D model, said 3D model including a set of objects defining said 3D model; displaying a hierarchic representation of said description;</claim-text>
      <claim-text>and displaying one or more graphical representations of modifiers of the objects that affect appearances of the objects in world space coordinates, in which each graphical representation indicates how the appearance of each corresponding object is animated over time.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The computer-readable media recited in claim 31, the steps further comprising: modifying the appearances of the objects by binding each of the objects to a corresponding modifier;</claim-text>
      <claim-text>and displaying the objects using the modified appearances.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The computer-readable media recited in claim 31, the steps further comprising: modifying the appearances of the objects by binding each of the objects to a corresponding modifier by creating a reference between the modifier and each object that is bound to that modifier;</claim-text>
      <claim-text>and displaying an animated display of the objects using the modified appearances.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The computer-readable media recited in claim 31, the steps further comprising: modifying the appearances of the objects by binding each of the objects to a corresponding modifier; further modifying the appearances of the objects according to each object's distance from or spatial orientation to its corresponding modifier;</claim-text>
      <claim-text>and displaying the objects using the further modified appearances.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. The computer-readable media recited in claim 31, wherein displaying one or more graphical representations of modifiers comprises the step of displaying one or more gizmos that correspond to the world space modifiers, in which each of the gizmos comprises a wireframe grid representation of a translation of the world space coordinates.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. The computer-readable media recited in claim 31, wherein accessing a description of a 3D model comprises the steps of accessing a description of a 3D model that comprises a set of object classes that define a 3D graphical object that forms a part of the 3D model;</claim-text>
      <claim-text>and wherein displaying one or more graphical representations of modifiers comprises the step of displaying one or more instances of a subclass of one of the object classes that corresponds to the world space modifiers.</claim-text>
    </claim>
    <claim num="37">
      <claim-text>37. The computer-readable media recited in claim 31, wherein displaying one or more graphical representations of modifiers comprises the steps of displaying one or more graphical representations of modifiers of the objects that affect appearances of the objects in world space coordinates, in which each graphical representation indicates how each corresponding object is animated over time, and in which each of the modifiers corresponds to a particular change in appearance in world space.</claim-text>
    </claim>
    <claim num="38">
      <claim-text>38. The computer-readable media recited in claim 31, the steps further comprising: modifying the appearances of the objects by binding each of the objects to a plurality of the modifiers; further modifying the appearances of the objects in a plurality of ways according to each of the modifiers that is bound to each of the objects;</claim-text>
      <claim-text>and displaying the objects using the further modified appearances.</claim-text>
    </claim>
  </claims>
</questel-patent-document>