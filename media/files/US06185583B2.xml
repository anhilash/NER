<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185583B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185583</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185583</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22744624" extended-family-id="42113635">
      <document-id>
        <country>US</country>
        <doc-number>09201135</doc-number>
        <kind>A</kind>
        <date>19981130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09201135</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43171930</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>20113598</doc-number>
        <kind>A</kind>
        <date>19981130</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09201135</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/24        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>24</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>715210000</text>
        <class>715</class>
        <subclass>210000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>715234000</text>
        <class>715</class>
        <subclass>234000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>715260000</text>
        <class>715</class>
        <subclass>260000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>715853000</text>
        <class>715</class>
        <subclass>853000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-017/24F</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>017</main-group>
        <subgroup>24F</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/243</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>243</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>16</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>7</number-of-drawing-sheets>
      <number-of-figures>8</number-of-figures>
      <image-key data-format="questel">US6185583</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Parallel rule-based processing of forms</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>APTROOT-SOLOWAY BERNARD</text>
          <document-id>
            <country>US</country>
            <doc-number>3974496</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US3974496</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>GROSSKOPF JOSEPH R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5546574</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5546574</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>WRIGHT JR GERALD V</text>
          <document-id>
            <country>US</country>
            <doc-number>5704029</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5704029</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>DANIELS TRACY J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5758126</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5758126</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>RISHE NAPHTALI DAVID, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5920857</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5920857</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>Forgy, Charles L. "Rete: A Fast Algorithm for the Many Pattern/ Many Object Pattern Match Problem" Artificial Intelligence, vol. 19, pp. 17-32, 1982.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>GTE Laboratories Incorporated</orgname>
            <address>
              <address-1>Waltman, MA, US</address-1>
              <city>Waltman</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>GTE LABORATORIES</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Blando, Luis R.</name>
            <address>
              <address-1>Shrewsbury, MA, US</address-1>
              <city>Shrewsbury</city>
              <state>MA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Suchyta, Leonard Charles</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Lintz, Paul R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>GRANTED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      System and method for verifying data in forms.
      <br/>
      Each form has a corresponding one or more rule sets each with rules that designate a structure, format, or data type for fields in the form.
      <br/>
      The rule sets are verified in parallel.
      <br/>
      Rules within a rule set may also be verified in parallel when the processor determines it is beneficial such as for time consuming rule validation.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">The present invention relates to systems for validating forms and more particularly, to a system and method that validates forms using rules to check data provided on the forms.</p>
    <p num="3">2. Discussion of the Related Art</p>
    <p num="4">
      Many businesses process forms to gather information about customers or sales.
      <br/>
      Each form typically includes multiple data fields.
      <br/>
      The data is reviewed either manually or by a computerized system.
      <br/>
      Additional examination may also be performed to confirm that the type of data entered into the fields is correct.
      <br/>
      For example, a date field should contain an alphanumeric string, while a name field should include only an alphabetic string.
    </p>
    <p num="5">
      Traditionally, forms are examined using validation statements that are included in the base application program that processes the forms and written in the same language as the application program, for example C or COBOL.
      <br/>
      All form examinations are included in this base application program.
      <br/>
      Therefore, when any form examination is added, the base application program must be rewritten, recompiled, and retested.
      <br/>
      A programmer must enter all rule changes.
      <br/>
      Therefore, it is desirable to have a system that stores rules separate from the base application program so that a more simple rule language may be used by a non-programmer.
    </p>
    <p num="6">
      Many current rule systems use a standard Rete algorithm that is not fit to validate rules in parallel due to inherent architecture and processing limitations.
      <br/>
      The Rete algorithm is described in "Rete: A Fast Algorithm for the Many Pattern/Many Object Pattern Match Problem", Artificial Intelligence, Vol. 19, pp 17-37, 1982.
      <br/>
      Using the Rete algorithm current rule systems perform rule checks on a form serially and do not verify more than one rule at a time or more than one rule set at a time,
    </p>
    <p num="7">Accordingly, it is desirable to have a system that validates a form using more than one rule in parallel.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="8">
      Systems and methods consistent with the principles of the present invention receive forms for validation.
      <br/>
      A memory stores program instructions performed by a processor to validate the forms.
      <br/>
      The processor operates responsive to the program instructions to receive a form and select rules that are associated with the form.
      <br/>
      The processor determines whether the form meets the requirements of each rule associated with the form, wherein at least two of the rules are validated in parallel.
    </p>
    <p num="9">
      In one embodiment, each form has associated rule sets where each rule set has a plurality of rules.
      <br/>
      The processor validates rules in each rule set in parallel.
      <br/>
      The processor may also process rules within a single rule set in parallel when, for example, the validation of a rule is expected to be time consuming.
      <br/>
      In this case, a separate thread is generated to check the time consuming rule.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="10">The accompanying drawings, which are incorporated in and constitute a part of this specification illustrate an embodiment of the invention and, together with the description, explain the objects, advantages and principals of the invention:</p>
    <p num="11">In the drawings,</p>
    <p num="12">FIG. 1 is a block diagram of the overall validation system consistent with the present invention;</p>
    <p num="13">FIG. 2 is an example form from the point of view of a user;</p>
    <p num="14">FIG. 3 is an example rule truth table chart;</p>
    <p num="15">FIG. 4A is a block diagram of the overall flow of the validation system;</p>
    <p num="16">FIG. 4B is a block diagram of the validation engine;</p>
    <p num="17">FIG. 5 is a flow chart showing steps for processing a received order and comparing the order to expected order types;</p>
    <p num="18">FIG. 6A is a flow chart showing the steps for processing an order and comparing the order to rules associated with a determined order type; and</p>
    <p num="19">FIG. 6B is a flow chart that continues the steps from FIG. 6A to process an order and compare the order to rules in parallel.</p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="20">The following detailed description of the invention refers to the accompanying drawings.</p>
    <p num="21">
      The same reference numbers in different drawings identify the same or similar elements.
      <br/>
      Also, the following detailed description does not limit the invention.
      <br/>
      Instead, the scope of the invention is defined by the appended claims and equivalents.
    </p>
    <p num="22">
      Methods and systems consistent with the present invention automatically examine received forms using rule sets associated with different forms.
      <br/>
      A form may represent, for example, an order for a service such as a telecommunications service and may arrive at an order validation system configured in accordance with the principles of the present invention via facsimile, electronic mail, or other transmission mode or facility.
      <br/>
      When a form is received, the system validates the form by making sure it complies with standards and specific validation rules.
      <br/>
      Each portion of the order has an associated rule set that includes a plurality of rules with which the form data must comply to be valid.
      <br/>
      In general, the system examines each form for compliance with syntactic, semantic, and domain requirements.
      <br/>
      Each of these types is described below.
    </p>
    <p num="23">
      FIG. 1 shows a validation system 100 having a central processing unit (CPU) 110, an input device 115, a memory 120, a display 125, a forms database 130, received forms database 135, edit engine instructions 140, rules database 150, error table 160, error codes 170, and form instructions 180.
      <br/>
      Forms enter into the validation system 100 through network 190.
      <br/>
      Forms database 130 holds predefined forms along with field identifiers.
      <br/>
      Field identifiers represent data fields in the forms, such as a name field or an address field.
      <br/>
      Each form type has associated rules that dictate the type of data and placement of data in the fields.
      <br/>
      Rules database 150 holds rule objects where each rule object holds instructions for verifying various requirements in forms.
      <br/>
      Edit engine instructions 140 are instructions to be carried out by the CPU 110 to validate received forms.
      <br/>
      Error table 160 stores information to generate errors and stores lists of generated errors for output to a user at display 125.
    </p>
    <p num="24">
      FIG. 2 illustrates an example form 200, which in this case represents an order for a delivery, although other types of forms may be used without departing from the scope of the invention.
      <br/>
      Form 200 includes a name field 210, an address field 220, a class field 230, a due date 240, a schedule time 250, and a type of service 260.
      <br/>
      Data is entered into the example form 200 and sent to the validation system 100.
    </p>
    <p num="25">
      In one embodiment, the type of rules used to process forms in a manner consistent with the present invention are precondition-post condition rules expressed as follows: if (pre-cond) is true then if (post-cond) is true then rule is true, if (pre-cond) is false then rule is true, and if (pre-cond) is true then if (post-cond) is false then rule is false.
      <br/>
      The truth table 300 corresponding to this expression is shown in FIG. 3.
      <br/>
      First, the pre-condition is checked for the field designated in the rule and, if true, the post-condition is checked and the result of True or False returned.
      <br/>
      For example, a rule may state that when a character in a type field is "A" then a year in a date field must be "98." The validation system 100 will check whether an "A" is in the type field, and if so will check that the date field is "98." If "A" is not in the type field or if there is an "A" and a "98" in the date field, then no error is generated.
      <br/>
      If there is an "A" in the type field and "98" is not in the date field an error message is generated.
    </p>
    <p num="26">
      FIG. 4A is an overall block diagram of the flow of forms in the present invention.
      <br/>
      Form 400 is input to validation system 100 which processes the form and outputs the form and any errors.
      <br/>
      FIG. 4B is a block diagram showing modules associated with the validity system 100 in FIG. 1 and the general processing flow between several of the modules.
    </p>
    <p num="27">
      Form 400 is input from network 190 to validation system 100.
      <br/>
      CPU 110, using form instructions 180, parses the form and inserts each field into queue 125.
      <br/>
      CPU 110 using the edit engine instructions 140 retrieves each field from the queue 125 for processing.
      <br/>
      Checker 155 represents a program module stored as instructions in the edit engine instructions 140 that is carried out by CPU 110.
    </p>
    <p num="28">
      Checker 155 uses one of the rule sets stored in rule sets 165 to process the form fields 125.
      <br/>
      Each rule set includes one or more rules.
      <br/>
      Rule sets 165 include code for processing fields in form 400 to confirm accuracy of the associated field data.
      <br/>
      The results of carrying out the rules in rule sets 165 is the generation of errors, if there are any, using error codes 170 which store the information needed to generate an error such as an error code and text.
      <br/>
      The resulting generated errors are stored in error table 160 and the forms and errors are output 410.
    </p>
    <p num="29">
      Each rule set in rule sets 165 is a thread.
      <br/>
      A thread is a part of a program that can execute independently of other parts of the program.
      <br/>
      By using threads, operating systems that support multithreading allow for threads to execute concurrently.
      <br/>
      The present invention allows for validating rules in parallel by using multithreading.
      <br/>
      Rules in rule sets 165 may either be programs that are called by a checker 155 or may be independent threads which are created when the rule set is called by the checker 155 and is extinguished after completion.
      <br/>
      Rules return error information to the checker 155.
    </p>
    <p num="30">
      Although FIG. 4B shows only one checker module 155, a validation system 100 can include more than one checker where the incoming form includes an identifier that identifies the appropriate checker to use to evaluate that form.
      <br/>
      For example different versions of the form may require using different checkers.
    </p>
    <p num="31">
      FIGS. 5 and 6 show the steps for validating an order having more than one form received from display 125.
      <br/>
      First, an order is received at the validation system 100 and stored in received forms database 135 (step 500).
      <br/>
      CPU 110 determines a type of the order received by comparing a request type field and activity code field included in the form to valid types of orders in rules database 150 (step 510).
      <br/>
      CPU 110 determines whether the received order type is valid (step 520) and if not, an error message is generated (step 530).
      <br/>
      Otherwise, CPU 110 searches rules database 150 for all rules related to this order type (step 540).
      <br/>
      Rules database 150 includes rules that specify the forms that must be present with any specified type of request.
      <br/>
      CPU 110 determines, from the found rules, which forms correspond to this particular order type based on the information stored in rules database 150 (step 550).
      <br/>
      CPU 110 checks the received order for the presence of all forms corresponding to the order type (step 560).
    </p>
    <p num="32">
      As shown in FIG. 6A, if CPU 110 determines that all corresponding forms are not included in the order (step 600), then CPU 110 generates an appropriate error message in accordance with error tables 170 (step 610).
      <br/>
      Otherwise, if all corresponding forms are included in the order (step 600), CPU 110 simultaneously accesses the rule sets associated with each form in rules database 150 (step 620).
      <br/>
      In parallel, CPU 110 compares each rule in each rule set to the received order, beginning with the first rule from each rule set, to validate the rule requirements (step 630).
      <br/>
      Not only are the rule sets executed in parallel but rules within a rule set may be executed in parallel at the direction of the edit engine instructions 140.
      <br/>
      CPU 110 processes each rule in a particular rule set one-by-one (step 634).
      <br/>
      As shown in FIG. 6B, if CPU 110 determines that a particular rule will take a lot of time, such as an external rule (step 636), then the CPU 110 will generate an independent thread to process that rule (step 638).
      <br/>
      CPU 110 will continue to process other rules in a current rule set in parallel with the independent threads.
      <br/>
      After generating the thread, or determining that a rule is not time consuming, CPU 110 determines whether the rules are followed for each rule by seeing whether any of the rule requirements are violated (step 640).
      <br/>
      If a rule is violated, then CPU 110 generates an error message using the errors in error table 160 and stores the same in a section of error tables 170 (step 650).
      <br/>
      CPU 110 determines whether there are any more rules in the rule sets to be evaluated (step 660), and if so, the next rule in each rule set is read (step 670) and evaluated beginning with step 640.
      <br/>
      CPU 110 waits for all the checking of all rules in parallel and collects the output of each in a single error code list (step 680).
      <br/>
      CPU 110 saves the error codes in a single file in error tables 170 for sending to the display 125 (step 690).
      <br/>
      Each rule is tested before the error codes are output so that one complete report is received by a user at display 125.
    </p>
    <p num="33">
      Steps 630-640 carry out all validations required by the rules.
      <br/>
      There are many types of checks.
      <br/>
      One type of check is a syntactic check.
      <br/>
      Syntactic checks are performed at a field level using the field data in the forms.
      <br/>
      For example, if only numeric values are allowed in a certain field of the form, then the system checks whether the data in the field is numeric.
      <br/>
      Another type of check is semantic checks which confirm field dependencies.
      <br/>
      For instance, "if field1=A then field2 must be present" or "if ACT=2 then REFNUM should be 1, 2, or 3." Another type of check is a domain check that checks for errors that cannot be found just by looking at the form, but involve looking at outside data.
      <br/>
      For example, checking that the name entered in a customer field is a valid customer by searching a list of valid customers.
      <br/>
      In another embodiment, domain checks may be performed directly by the rules by providing code in the rules for requesting data from back end systems instead of requiring the validity system 100 to initiate the request while validating the rule.
    </p>
    <p num="34">
      In an alternative embodiment, the system may process local service orders (LSO) or local service requests (LSR) that include a plurality of forms.
      <br/>
      Each form in the order or request must be processed separately to determine if it is valid.
      <br/>
      In addition, the order or request may be examiner to ensure that all required forms are included.
    </p>
    <p num="35">
      The foregoing description of embodiments of the present invention provides illustration and description, but is not intended to be exhaustive or to limit the invention in the precise form disclosed.
      <br/>
      Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention.
      <br/>
      The scope of the invention is defined by the claims and their equivalents.
      <br/>
      Although systems and methods consistent with the present invention are described as using various known protocols, other protocols may exist or may be created that may also be used.
      <br/>
      Additionally, although other aspects of the present invention are described as being stored in the database, one of ordinary skill in the art will appreciate that this data may be stored in many different forms and on many different mediums including a memory, computer readable media, hard disk, floppy disk, or a compact disk reader.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A system for processing forms, comprising:</claim-text>
      <claim-text>a memory including program instructions;</claim-text>
      <claim-text>and a processor operating responsive to the program instructions to:</claim-text>
      <claim-text>- receive a form; - select rules associated with the form;</claim-text>
      <claim-text>and - apply at least two rules to the form in parallel.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The system of claim 1 wherein the form has more than one associated rule set having a plurality of rules and the processor further operates responsive to the program instructions to: determine in parallel whether the form meets the requirements of a first rule in the more than one associated rule set, and determine in parallel whether the form meets the requirements of a second rule in the more than one associated rule sets.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The system of claim 1 wherein the processor further operates responsive to the rule instructions to: search an external system for information to validate data in a field of the form based on one of the rules.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The system according to claim 3 wherein the processor further operates responsive to the rule instructions to: generate a thread to carry out the search.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The system of claim 1 wherein each rule including a plurality of rule instructions in an independent module and the processor further operates responsive to the rule instructions to: determine a relationship between fields based on the rules; determine whether a relationship between fields requires data entry in a dependent field;</claim-text>
      <claim-text>and generate an error message when the dependent field does not contain data.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The system of claim 1 wherein each rule including a plurality of rule instructions in an independent module and the processor further operates responsive to the rule instructions to: compare a type of data in at least one field of the received form to a predetermined type of data for the field as designated by a rule;</claim-text>
      <claim-text>and generate an error message when the field types do not match.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The system of claim 1 wherein the processor further operates responsive to the program instructions to: receive an order including a plurality of forms; determine the forms that correspond to a type of the order;</claim-text>
      <claim-text>and determine whether all corresponding forms are present in the order.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The system of claim 7 wherein the processor further operates responsive to the program instructions to: generate an error message if each of the corresponding forms is not present in the order.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A method for processing forms, comprising the steps of: receiving a form; selecting rules associated with the form;</claim-text>
      <claim-text>and applying two rules to the form in parallel.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 9 wherein the form has more than one associated rule set having a plurality of rules, said method further including the steps of: determining in parallel whether the form meets the requirements of a first rule in the more than one associated rule set, and determining in parallel whether the form meets the requirements of a second rule in the more than one associated rule sets.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 9 further including the steps of: searching an external system for information to validate data in a field of the form based on one of the rules.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method according to claim 11 further including the steps of: generating a thread to carry out the search.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 9 wherein each rule including a plurality of rule instructions in an independent module, said method further including the steps of: determining a relationship between fields based on the rules; determining whether a relationship between fields requires data entry in a dependent field;</claim-text>
      <claim-text>and generating an error message when the dependent field does not contain data.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 9 wherein each rule including a plurality of rule instructions in an independent module, said method further including the steps of: comparing a type of data in at least one field of the received form to a predetermined type of data for the field as designated by a rule;</claim-text>
      <claim-text>and generating an error message when the field types do not match.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 9 further including the steps of: receiving an order including a plurality of forms; determining the forms that correspond to a type of the order;</claim-text>
      <claim-text>and determining whether all corresponding forms are present in the order.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 15 further including the steps of: generating an error message if each of the corresponding forms is not present in the order.</claim-text>
    </claim>
  </claims>
</questel-patent-document>