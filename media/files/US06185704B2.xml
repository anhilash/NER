<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185704B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185704</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185704</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26720686" extended-family-id="28426346">
      <document-id>
        <country>US</country>
        <doc-number>09058000</doc-number>
        <kind>A</kind>
        <date>19980409</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09058000</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>29081624</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>5800098</doc-number>
        <kind>A</kind>
        <date>19980409</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09058000</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>4366397</doc-number>
        <kind>P</kind>
        <date>19970411</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-60043663</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="3">
        <country>US</country>
        <doc-number>4995697</doc-number>
        <kind>P</kind>
        <date>19970617</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="3">
        <doc-number>1997US-60049956</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G11C  29/00        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>29</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  15/16        20060101AFI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>16</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F  12/06        20060101ALI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>06</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F  15/177       20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>177</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>G11C   5/00        20060101ALI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>5</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>G11C  11/401       20060101ALI20060310RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>11</main-group>
        <subgroup>401</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20060310</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>714719000</text>
        <class>714</class>
        <subclass>719000</subclass>
      </main-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-012/06K6</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>012</main-group>
        <subgroup>06K6</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G11C-005/04</text>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>5</main-group>
        <subgroup>04</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-012/0684</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>0684</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G11C-005/04</classification-symbol>
        <section>G</section>
        <class>11</class>
        <subclass>C</subclass>
        <main-group>5</main-group>
        <subgroup>04</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>42</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>17</number-of-drawing-sheets>
      <number-of-figures>37</number-of-figures>
      <image-key data-format="questel">US6185704</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">System signaling schemes for processor and memory module</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>TOMISAWA NAOKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5043984</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5043984</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="2">
          <text>DODDINGTON GEORGE D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5500828</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5500828</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>DODDINGTON GEORGE R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5528549</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5528549</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>PAWATE BASAVARAJ I, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5638530</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5638530</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>PAWATE BASAVARAJ I, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5678021</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5678021</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/043,663</doc-number>
          <date>19970411</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/049,956</doc-number>
          <date>19970617</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/043663</doc-number>
          <date>19970411</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/049956</doc-number>
          <date>19970617</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Texas Instruments Incorporated</orgname>
            <address>
              <address-1>Dallas, TX, US</address-1>
              <city>Dallas</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>TEXAS INSTRUMENTS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Pawate, Basavaraj I.</name>
            <address>
              <address-1>Ibaraki, JP</address-1>
              <city>Ibaraki</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Woolsey, Matthew A.</name>
            <address>
              <address-1>Princeton, TX, US</address-1>
              <city>Princeton</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Mahlum, Douglas L.</name>
            <address>
              <address-1>Allen, TX, US</address-1>
              <city>Allen</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Reuter, Fred J.</name>
            <address>
              <address-1>Plano, TX, US</address-1>
              <city>Plano</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Iwata, Yoshihide</name>
            <address>
              <address-1>Ibaraki-ken, JP</address-1>
              <city>Ibaraki-ken</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="6">
          <addressbook lang="en">
            <name>Heape, Judd E.</name>
            <address>
              <address-1>Dallas, TX, US</address-1>
              <city>Dallas</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Troike, Robert L.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Telecky, Jr., Frederick J.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Chung, Phung M.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A computer system includes a main processing unit (12) coupled to a DSP/memory module (40).
      <br/>
      The DSP/memory module (40) includes semiconductor memory (42) and digital signal processor circuitry (44) including one or more digital signal processors (56).
      <br/>
      The DSP/memory module (40) may be placed in standard main memory sockets, such as a SIMM or DIMM sockets, and used as conventional main memory.
      <br/>
      The memory module can also be used in a smart mode, wherein the digital signal processor (56) performs operations on data for retrieval by the main processing unit (12).
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application claims priority under 35 USC .sctn.119(e)(1) of Pawate et al. "Processor and Memory Module", provisional application Ser.
      <br/>
      No. 60/043,663, filed on Apr. 11, 1997 and Heape et al. "System Signaling Schemes for Processor and Memory Module", provisional application Ser.
      <br/>
      No. 60/049,956, filed on Jun. 17, 1997.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      1.
      <br/>
      Technical Field
    </p>
    <p num="3">This invention relates in general to computers and, more particularly, to computer memory modules.</p>
    <p num="4">2. Description of the Related Art</p>
    <p num="5">
      Over the last few years, the operation of the personal computer has become more oriented toward multimedia operation.
      <br/>
      Multimedia computers typically include a mass storage device with a replaceable medium, such as a CD-ROM (compact disk read only memory) or a DVD (digital versatile disk), a sound card with a FM synthesis or wave table generation processor, real-time video capabilities and three dimensional graphics.
      <br/>
      Other multimedia capabilities, such as speech synthesis and voice recognition, are becoming more mainstream as the power of the computers increase.
    </p>
    <p num="6">
      Multimedia capabilities such as sound, video, fax, modem, compression and decompression, however, are resource intensive.
      <br/>
      Some features are bandwidth limited, meaning that the features cannot be expanded without increasing the bandwidth of the system buses.
      <br/>
      In a typical IBM-compatible PC, the ISA (industry standard architecture) bus runs at eight megahertz (16 bits) while the PCI (Peripheral Connect Interface) bus runs at thirty-three megahertz (32 bits).
      <br/>
      Other features are processor limited.
      <br/>
      In a multitasking computer system, the main processor can be responsible for a number of activities.
      <br/>
      Therefore, multimedia features which require a large number of processor instruction cycles can slow down the system or not execute properly.
      <br/>
      Still other multimedia features are memory limited.
      <br/>
      These features require a large amount of memory in order to execute.
      <br/>
      Large memories lead to increased system cost.
    </p>
    <p num="7">
      For example, modem features like V.34bis are primarily processor limited.
      <br/>
      Wavetable synthesis requires large amounts of memory and is memory-limited.
      <br/>
      Decompression feature like MPEG2 is compute-limited as well as bandwidth limited.
      <br/>
      With increasing clock-speeds of Intel CPUs, some of these can be executed on the host CPU.
      <br/>
      But this loads the host CPU with fewer MIPS (million instructions per second) available for the user application.
      <br/>
      Increased clock speeds also lead to increased power consumption and reduced battery life.
    </p>
    <p num="8">
      One popular approach is to provide these functions in a desktop computer using multiple add-in ISA or local bus cards.
      <br/>
      These add-in cards are host dependent and cannot be used on multiple platforms.
      <br/>
      For example, an ISA card cannot work on a Sun workstation or a Macintosh.
      <br/>
      Notebook computers, palmtops and PDAs (personal digital assistants) have no space for such ISA cards.
      <br/>
      And they all suffer from the classic Von Neumann bottleneck--the CPU-Memory bandwidth limitation.
    </p>
    <p num="9">
      Processor technology has focused on improving raw processing speed.
      <br/>
      As an example, the instruction cycle time of a recent digital signal processor design in the TMS320 family, by Texas Instruments Incorporated of Dallas, Texas, is 5 ns (nanoseconds), as compared to the cycle time of 200 ns in the first generation.
      <br/>
      As long as the computations are on-chip, these devices provide adequate throughput.
      <br/>
      But several applications in speech, signal and image processing are memory intensive and the gain in raw processing speed is lost when the processor has to fetch and process data from slower off-chip memories.
      <br/>
      The combined effect of decreasing cycle time of processors and increasing density of memory devices is further aggravating the CPU-to-memory bandwidth--a paramount issue in computer system design.
    </p>
    <p num="10">
      As computers evolve from desktop size to laptop, notebook and palmtop sizes, form factor and power consumption become critical.
      <br/>
      Laptops are expected to have the capability of a desktop as users demand more functionality.
    </p>
    <p num="11">
      Multiprocessing promises great potential for increasing the throughput of systems as the limits of decreasing the cycle time of uniprocessor systems are approached.
      <br/>
      But multiprocessing has not yet proliferated, primarily because of the "processor-driven" approaches and the difficulty in designing systems, developing communication protocols, and designing software support routines.
      <br/>
      Application partitioning is a major problem because it requires a detailed understanding of the application that is being accelerated.
      <br/>
      Software development methodologies and partitioning tools are still in their infancy.
      <br/>
      In addition, there is no standard way of connecting two or more processors.
    </p>
    <p num="12">Accordingly, a need has arisen for a method and apparatus for providing flexible, compatible processing for multimedia and other resource intensive features.</p>
    <heading>BRIEF SUMMARY OF THE INVENTION</heading>
    <p num="13">
      In accordance with one embodiment of the present invention, the present invention provides a memory module comprising a semiconductor memory and one or more processors coupled to the semiconductor memory on an integrated module.
      <br/>
      Circuitry on the integrated module provides communications between system processing circuitry and the processor, such that said system processing circuitry can access the semiconductor memory as main memory and can instruct the processor to transform data and store transformed data in said semiconductor memory for access by the system processing circuitry.
    </p>
    <p num="14">
      The invention provides significant advantages over the prior art.
      <br/>
      Adding a digital signal processor to a computer system to enable enhanced functions is as easy as expanding the memory of a MPU (main processing unit).
      <br/>
      The memory module can use a form factor of the type standardized by organizations like IEEE, JEDEC, and so on, such as a SIMM (single in-line memory module) or DIMM (dual in-line memory module) form factor.
    </p>
    <p num="15">
      Different applications may be downloaded by the MPU to the memory module for local execution.
      <br/>
      The memory module therefore supports multiple functionality, i.e., downloadable, multiple functions under software control of the MPU.
    </p>
    <p num="16">
      The DSP/memory module offers the highest possible bandwidth between the MPU and coprocessor at any given time and technology.
      <br/>
      The DSP/memory module is both bus-independent, and host-independent, for use with PCs (personal computers), PDAs (personal digital assistants), workstations and other computer systems.
    </p>
    <p num="17">The DSP/memory module reduces system cost by sharing system memory over a number of multimedia functions.</p>
    <p num="18">The module provides a framework for easily scaling up the processing power of a computer system; an existing single processor system can be transformed into a scaleable, multiprocessing system simply by adding a memory module</p>
    <p num="19">
      Users do not have to change their product platforms in order to get/offer new, value-added functions.
      <br/>
      Adding the DSP/memory module and software can allow users to increase the capability of their computers.
    </p>
    <p num="20">
      In accordance with other embodiments of the present invention, implementation of the memory module with the interrupt request, IREQ, and WAIT signals are described further in this application.
      <br/>
      Six options are presented in accordance with other embodiments describing how to implement these signals (including their timing and relation to the host memory controller).
    </p>
    <heading>BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
    <p num="21">
      For a more complete understanding of the present invention, and the advantages thereof, reference is now made to the following descriptions taken in conjunction with the accompanying drawings, in which:
      <br/>
      FIG. 1 illustrates a prior art computer architecture;
      <br/>
      FIG. 2 illustrates a DSP/memory module;
      <br/>
      FIG. 3 illustrates the organization of memory space between the system MPU and the DSP on the DSP/memory module;
      <br/>
      FIGS. 4a, 4b, 4c and 4d illustrate definitions of control words used to control the operation of the DSP/memory module;
      <br/>
      FIG. 5 illustrates a flow chart describing the operation of a hunting protocol for determining whether a DSP/memory module is located in the main memory of a computer;
      <br/>
      FIG. 6 illustrates a memory map in standard mode;
      <br/>
      FIG. 7 illustrates a memory map in smart-local mode;
      <br/>
      FIG. 8 illustrate a memory map in smart-shared mode;
      <br/>
      FIG. 9 illustrates a first embodiment of the DSP/memory module;
      <br/>
      FIG. 10 illustrates a second embodiment of the DSP/memory module;
      <br/>
      FIG. 11 illustrates a third embodiment of the DSP/memory module;
      <br/>
      FIG. 12 illustrates a DSP/memory module in a computer system using an analog front end directly connected to the module;
      <br/>
      FIG. 13 illustrates a DS/memory module in a computer system using an analog front end coupled to the memory module via a local bus card;
      <br/>
      FIG. 14 illustrates the memory module(s) to host controller block diagram as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 1";
      <br/>
      FIG. 15 illustrates the timing for the WAIT signal for FPM or EDO DRAM as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 1";
      <br/>
      FIG. 16 illustrates the timing for the WAIT signal for DDR-S/S DRAM, eligibility option 1, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 1";
      <br/>
      FIG. 17 illustrates the timing for the WAIT signal for DDR-S/S DRAM, eligibility option 2, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 1";
      <br/>
      FIG. 18 illustrates the timing for the WAIT signal for DDR-S/S DRAM, eligibility option 3, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 1";
      <br/>
      FIG. 19 illustrates the memory module(s) to host controller block diagram as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 2";
      <br/>
      FIG. 20 illustrates the timing for the WAIT signal for FPM or EDO DRAM as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 2";
      <br/>
      FIG. 21 illustrates the timing for the WAIT signal for DDR-S/S DRAM, eligibility option 1, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 2";
      <br/>
      FIG. 22 illustrates the timing for the WAIT signal for DDR-S/S DRAM, eligibility option 2, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 2";
      <br/>
      FIG. 23 illustrates the timing for the WAIT signal for DDR-S/S DRAM, eligibility option 3, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 2";
      <br/>
      FIG. 24 illustrates the memory module(s) to host controller block diagram as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 3";
      <br/>
      FIG. 25 illustrates the timing for the WAIT and IREQ signals for FPM or EDO DRAM as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 3";
      <br/>
      FIG. 26 illustrates the timing for the WAIT and IREQ signals for DDR-S/S DRAM, eligibility option 1, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 3";
      <br/>
      FIG. 27 illustrates the timing for the WAIT and IREQ signals for DDR-S/S DRAM, eligibility option 2, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 3";
      <br/>
      FIG. 28 illustrates the timing for the WAIT and IREQ signals for DDR-S/S DRAM, eligibility option 3, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 3";
      <br/>
      FIG. 29 illustrates the memory module(s) to host controller block diagram as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 4";
      <br/>
      FIG. 30 illustrates the memory module(s) to host controller block diagram as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 5";
      <br/>
      FIG. 31 illustrates the timing for the WAIT and IREQ signals for DDR-S/S DRAM, eligibility option 1, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 5";
      <br/>
      FIG. 32 illustrates the timing for the WAIT and IREQ signals for DDR-S/S DRAM, eligibility option 2, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 5";
      <br/>
      FIG. 33 illustrates the timing for the WAIT and IREQ signals for DDR-S/S DRAM, eligibility option 3, as discussed in "IMPLEMENTATION OF IREQ AND WAIT SIGNALS: OPTION 5"; and
      <br/>
      FIG. 34 illustrates a possible solution for module-to-module communication via a 2 wire bus.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="22">The present invention is best understood in relation to FIGS. 1-12 of the drawings, like numerals being used for like elements of the various drawings.</p>
    <p num="23">
      FIG. 1 illustrates a prior art computer system 10.
      <br/>
      A main processor (hereinafter MPU) 12 communicates with other electronic devices over one or more paths.
      <br/>
      In FIG. 1, the MPU 12 is coupled to a memory management unit (MMU) 14, a PCI bridge 16, an AT interface unit 18 and a PCMCIA (Personal Computer Memory Card International Association) b ridge 20.
      <br/>
      The MMU 14 couples the MPU 12 to main memory 22 via a memory bus 24, which is typically a vendor specified bus.
      <br/>
      The main memory 22 is typically formed of a plurality of memory modules 26 packaged in a standard form factor.
      <br/>
      The most popular form factor is currently the SIMM module, although DIMM modules are gaining in popularity.
    </p>
    <p num="24">
      The PCI Bridge 16 couples the MPU 12 to a PCI local bus 28.
      <br/>
      The PCI local bus provides slots for one or more peripheral cards 30.
      <br/>
      Because the PCI bus is faster than the AT bus, it is generally used for higher speed peripherals such as the video/graphics card.
    </p>
    <p num="25">
      The AT interface unit 18 couples the MPU 12 with the AT bus 32 (also known as the ISA--industry standard architecture--bus).
      <br/>
      The AT bus 32 can receive one or more peripheral cards 34.
      <br/>
      The PCMCIA bridge 20 is coupled to the AT interface unit and provides a PCMCIA bus 36 to support externally replaceable peripherals 38 (also known under the name "PC Cards") which are commonly used in notebook computers.
    </p>
    <p num="26">
      A card having one or more processors can be added to an existing PC platform via the ISA bus 32 or, more recently, the PCI bus 28.
      <br/>
      The ISA bus 32 was developed several years ago and many popular peripheral cards subscribe to this standard.
      <br/>
      However, the bandwidth between the MPU and a processor on a ISA card is limited to 8 MHz*16 bits per second.
      <br/>
      There are several sound applications today that cannot run due to this bandwidth limitation.
      <br/>
      Later, the PCI bus was proposed as a standard bus; its bandwidth is limited to 33 MHz*32 bits per second.
      <br/>
      In either case, the technology has developed faster than the bus technology.
    </p>
    <p num="27">
      In order to reduce bus traffic somewhat, MMX technology is currently available.
      <br/>
      While MMX technology allows the MPU to perform some multimedia functions through an enhanced instruction set, it has significant disadvantages.
      <br/>
      Data must be moved from main memory to the MPU 12 for processing.
      <br/>
      This results in significant bus traffic, loads the MPU 12 and demands faster and faster processor speeds.
      <br/>
      For example, it is estimated that MPEG2 video and audio decoding in real-time at a rate of thirty frames per second requires a 225 MHz Pentium processor.
      <br/>
      In order to provide the MMX instructions, the MPU 12 must switch between floating point mode and fixed point mode.
      <br/>
      There is a significant overhead in switching between modes and switching can be frequent in multitasking systems where both floating point applications (such as a spreadsheet) and fixed point applications are being used.
    </p>
    <p num="28">
      FIG. 2 illustrates a DSP/memory module which provides a solution to many of the problems associated with the architecture shown in FIG. 1, using a concept referred to herein as "Basava" technology.
      <br/>
      The DSP/memory module 40 includes one or more memory circuits 42 and DSP circuitry 44 disposed on a substrate 46.
      <br/>
      A plurality of contacts 48 are formed on substrate 46 to electrically connect the DSP/memory module 40 to the system board which houses the MPU 12.
      <br/>
      In the preferred embodiment, the DSP/memory module 40 is inserted into a standard memory slot, such as a SIMM slot or a DIMM slot.
    </p>
    <p num="29">
      In operation, the DSP/memory module 40 is placed onto the system board of the computer in a slot connected to the memory bus 24.
      <br/>
      The DSP functions of the DSP/memory module 40 are initially transparent to the MPU 12; the DSP/memory module 40 operates as a standard memory module 26 until the DSP features are enabled.
      <br/>
      Once enabled (discussed in greater detail hereinbelow), the MPU 12 can control the DSP circuitry 44 through a plurality of control registers and pass data to and from the DSP circuitry 44 using some or all of the memory circuits 42.
    </p>
    <p num="30">
      Many applications in digital signal processing, speech, and image processing are structured and lend themselves to be partitioned and concurrently executed.
      <br/>
      With adequate on-chip memory, several self-contained tasks can be executed in parallel.
      <br/>
      Typically, there are small routines or operations that are applied to a very large set of data.
      <br/>
      For example, in speech or image recognition, the unknown input vector is compared against several stored reference vectors.
      <br/>
      Typically, a Euclidean distance is used as a similarity measure between the unknown vector and the known reference vector.
      <br/>
      This calculation involves fetching the reference vectors from memory to the MPU 12 where the unknown input vector is kept, performing the Euclidean distance calculation, and writing the computed result back to memory.
      <br/>
      Moving the large number of reference vectors to the MPU 12 increases the traffic of data on the bus.
      <br/>
      However, using the DSP/memory module 40, the input vector can be moved to the memory storing the reference vectors, previously loaded on the DSP/memory module 40, performing the Euclidean calculation locally, and storing the results locally.
      <br/>
      Now, the MPU 12 need only fetch the results from the DSP/memory module 40.
      <br/>
      This leads to several benefits.
      <br/>
      First, the data traffic on the buses is reduced since the MPU 12 must read only the compared results.
      <br/>
      Second, the MPU is free to perform other tasks while the DSP/memory module 40 performs the cycle intensive Euclidean computation.
      <br/>
      Third, due to reduced bus traffic, power consumption is reduced leading to increased battery life--an important feature for portable system users.
    </p>
    <p num="31">With the density of DRAM increasing, memory intensive applications, such as a voice dialing application, which typically requires a megabit of memory, can easily be supported on the DSP/memory module 40.</p>
    <p num="32">
      FIG. 3 illustrates a diagram showing the interaction between the MPU 12, memory circuits 42 and the DSP circuitry 44.
      <br/>
      The main memory of the computer system is generally divided into "banks," with each bank 50 comprising one or more memory modules.
      <br/>
      In the computer system of FIG. 3, four banks are shown, BANK0, BANK1, BANK2 AND BANK3.
      <br/>
      BANK3 contains the DSP/memory module 40 (although any bank could contain the module); in another instance, all the banks 50 may contain a DSP/memory module 40.
    </p>
    <p num="33">
      Each bank 50 has an associated address space, through which the MPU 12 addresses the memory (via the MMU 14).
      <br/>
      For a Pentium type processor, the address range is from 0 to 4 gigabytes.
      <br/>
      Typically, the actual memory addresses are in a much smaller range, for example, between 0 and 64 megabytes.
      <br/>
      Within the address space associated with BANK3, a certain range of addresses are allocated for control registers 52 associated with the DSP circuitry 44, used when the DSP circuitry is enabled.
      <br/>
      These control registers are described in further detail hereinbelow.
      <br/>
      Further, a portion of the memory can be designated as shared memory 54, i.e., for use with both the MPU 12 and the DSP 56 (multiple DSPs could also be used on a single module).
      <br/>
      DSP 56 is typically a digital signal processor, but could alternatively be any type of programmable processor.
      <br/>
      In addition to the main memory, the DSP circuitry 44 also has a local memory 58 (preferably a static random access memory) for temporary storage of information.
    </p>
    <p num="34">
      When the DSP circuitry 44 is not enabled ("standard mode"), the DSP/memory module 40 operates as a standard memory module.
      <br/>
      In the diagram of FIG. 3, the MPU 12 would have sole access to the entire memory address space of BANK3, just as it would any other memory bank 50.
      <br/>
      When the DSP/memory module 40 has its DSP circuitry 44 enabled ("smart mode"), the MPU 12 can write to the control registers 52 to control the DSP functions and can transfer data to and from the DSP circuitry 44 via the shared memory.
    </p>
    <p num="35">
      In a third mode, configuration mode, the MPU 12 can access the control registers 52 and local memory 54 present on the DSP/memory module 40, via the Index and Data registers that are in the memory space of the DSP/memory module 40.
      <br/>
      On powerup, these control registers 52 are located at the base of the address space of the DSP/memory module 40.
      <br/>
      The intent of the configuration mode is two fold.
      <br/>
      First, configuration mode enables the MPU 12 to read specific information regarding the DSP/memory module 40, referred to as the Module Information Structure (MIS).
      <br/>
      MIS contains information regarding the size of memory available on the DSP/memory module 40, size of the local memories, and the type of processor(s) available.
      <br/>
      The MPU 12 accesses this MIS and stores this information in its registry for future reference and actions.
      <br/>
      The MIS is typically stored in slow memories like ROM and the MPU 12 must poll the status bits in the DSPSR register before reading from the data register.
      <br/>
      The specific bits are explained further below.
      <br/>
      Second, the configuration mode is used to relocate the base address of the control registers 52 and the shared memory 54 to a desired address location within the boundary of the module.
      <br/>
      Note that the default base address is zero, i.e., the control registers are located at the starting address of the bank 50.
    </p>
    <p num="36">
      The following provides a preferred procedure for switching between modes.
      <br/>
      To switch from standard mode to configuration mode, the MPU 12 writes a signature pattern, n times, in succession, to the signature register (SIGR) located in its address space.
      <br/>
      This signature pattern is written a certain number of times, without doing any other accesses.
      <br/>
      For example, a signature pattern, "A320", could be written four times in succession to the SIGR register to enter configuration mode.
    </p>
    <p num="37">
      To switch from configuration mode to standard mode, the MPU 12 writes to the DSPLOC register the "relocation address" to which it wishes to relocate the control register's base address to be relocated.
      <br/>
      If it does not wish to relocate the control registers, a "0" is written to the DSPLOC registers.
      <br/>
      After writing the relocation address, the MPU 12 writes the signature pattern to the SIGR/Index register.
    </p>
    <p num="38">
      To switch from standard mode to smart mode, the MPU 12 writes a signature pattern (n+1) times, in succession, to the signature register (SIGR) located in its address space.
      <br/>
      This signature pattern is written a certain number of times, without doing any other accesses.
      <br/>
      For example, the signature pattern, "A320", is written five times in succession to the SIGR register.
    </p>
    <p num="39">
      If for any reason, the computer is reset, or shut-down, the driver in the OS will switch the module back to the standard mode before allowing the computer to shutdown.
      <br/>
      Alternatively, on power-up, the boot sequence might always force the module to be in standard mode.
    </p>
    <p num="40">Control Registers</p>
    <p num="41">
      Control of the module's operating mode is accomplished via the signature, control, status, and communication registers defined in the module controller, shown in connection with FIGS. 9-11. Some of these are accessible only by the MPU 12, some only by the DSP 56, and some by both MPU 12 and DSP 56.
      <br/>
      Some of these registers are mapped in the memory space of the MPU 12 and I/O space of the DSP 56.
      <br/>
      Note that for both MPU 12 and DSP, some of these registers are "Reserved" as marked.
      <br/>
      In the standard mode, only the Signature Register (SIGR) is accessible to the MPU 12.
      <br/>
      Other registers exist only when the DSP/memory module 40 is in the configuration or smart mode of operation.
    </p>
    <p num="42">Initially, these registers are mapped into the first 32 bytes of the associated bank 50.</p>
    <heading>-- TABLE I</heading>
    <p num="43">
      -- Control Registers in Standard Mode
      <br/>
      --                                         Default
      <br/>
      -- Register Name Memory Address            Value   Access
      <br/>
      --               MPU Memory    DSP I/O Space         MPU    DSP
      <br/>
      -- SIGR          0000h         --       XXXXh   R/W    --
    </p>
    <heading>-- TABLE II</heading>
    <p num="44">
      -- Control Registers in Configuration Mode or Smart Mode
      <br/>
      --                                         Default
      <br/>
      -- Register Name Memory Address            Value   Access
      <br/>
      --               MPU Memory    DSP I/O Space         MPU    DSP
      <br/>
      -- SIGR/INDEX    0000h         --       XXXXh   R/W    --
      <br/>
      -- DATA          0007h         --       XXXXh   R/W    --
    </p>
    <heading>-- TABLE III</heading>
    <p num="45">
      -- Control Registers in Configuration and Smart Modes,
      <br/>
      -- accessible via Index &amp; Data Registers.
      <br/>
      --                                        Default
      <br/>
      -- Register Name    Memory Address        Value   Access
      <br/>
      --                                DSP
      <br/>
      --                  MPU Memory    I/O Space         MPU    DSP
      <br/>
      -- DSPLOC           Via Index &amp; --   0000h   R/W    --
      <br/>
      --                  Data registers
      <br/>
      -- DSCR             Via Index &amp; --   XXXXh   R/W    --
      <br/>
      --                  Data registers
      <br/>
      -- DSPSR            Via Index &amp; --   XXXXh   R      --
      <br/>
      --                  Data registers
      <br/>
      -- DSPTxD           Via Index &amp; 0050h     0000h   R      W
      <br/>
      --                  Data registers
      <br/>
      -- DSPRxD           Via Index &amp; 0051h     0000h   W      R
      <br/>
      --                  Data registers
      <br/>
      -- LM_RW_ADDR       Via Index &amp; --   0000h   R/W    --
      <br/>
      --                  Data registers
      <br/>
      -- LM_RW_DATA       Via Index &amp; --   0000h   R/W    --
      <br/>
      --                  Data registers
      <br/>
      -- LM_AD_OFFSET     Via Index &amp; --   0000h   R/W    --
      <br/>
      --                  Data registers
    </p>
    <p num="46">SIGR Register</p>
    <p num="47">
      The Signature (SIGR) register is defined only in the standard mode.
      <br/>
      The DSP/memory module 40 monitors all MPU writes to this location for valid signature pattern (while it writes to the standard memory typically available on the module).
      <br/>
      When the module operates in the configuration mode, this register is redefined as the Index Register.
      <br/>
      The module still monitors for a write of a signature pattern (for example, "A320") and if this occurs after a write to the DSPLOC register, then the module is switched back to the Standard mode.
      <br/>
      During the smart mode, this register is redefined as the Index Register.
    </p>
    <p num="48">Index Register</p>
    <p num="49">
      The Index Register which is available in the configuration and smart modes enables access to other registers like DSPCR, etc.
      <br/>
      The MPU 12 must write the address of the control registers that it wishes to access to this register.
    </p>
    <p num="50">Data Register</p>
    <p num="51">
      The Data register is a read/write register available in the Configuration and Smart modes.
      <br/>
      The MPU 12 writes the data to this register which is transferred by the module to the appropriate control register 52 whose address has been previously setup in the Index register.
    </p>
    <p num="52">
      The Index and Data registers have been defined to facilitate ease of hardware circuit implementation; since meeting the tight memory-access timings in Fast-Page mode are difficult to meet.
      <br/>
      Ideally all control registers 52 could be directly accessible by the host MPU 12.
    </p>
    <p num="53">DSPLOC Register</p>
    <p num="54">The DSPLOC is a 16-bit R/W register that allows the MPU 12 to relocate the base of the control registers 52 to another address in the MPU's address space, but still within the boundary of the module's address limits.</p>
    <p num="55">DSP Control Register (DSPCR)</p>
    <p num="56">
      The DSPCR, shown in FIG. 4a, is a 16 bit R/W register used to control DSP operation, interrupt of the MPU, memory bus arbitration, standard-smart mode switching, and level interrupt clear.
      <br/>
      Definition of individual bits are as follows.
    </p>
    <p num="57">
      Note that with the DSP specific bits, though some protections have been included, the operation is not fully automated.
      <br/>
      Thus, the user must program DSPCR while taking into consideration DSP operation.
      <br/>
      The DSPCR bits are explained in the following Table IV.
    </p>
    <heading>-- TABLE IV</heading>
    <p num="58">
      -- DSPCR Operation
      <br/>
      -- Bit0 DSP RESET: Writing a 0 to this bit resets the DSP 56.
      <br/>
      The MPU 12 must
      <br/>
      --  set this bit to 1 to start
      <br/>
      --      DSP operation.
      <br/>
      When doing this, at least two writes to DSPCR should
      <br/>
      --  occur.
      <br/>
      The first should write
      <br/>
      --      the appropriate configuration with RESET=0.
      <br/>
      The second write should do
      <br/>
      --  the same with
      <br/>
      --      RESET=1.
      <br/>
      The Default value is 0.
      <br/>
      -- Bit1 SHARED MEM IN USE: This is a semaphore used in arbitrating access to
      <br/>
      --  shared memory.
      <br/>
      -- Bit2 DSP CLKMD1: This bit selects the DSP master clock source and
      <br/>
      --  corresponds to the DSP CLKMD1
      <br/>
      --      bit only (since CLKMD0 is tied low).
      <br/>
      The DSP RESET bit must be 0 when
      <br/>
      --  this bit is changed.
      <br/>
      --      When this bit is set to 0, CLKMD1 = 0 and the DSP is in divide-by-two
      <br/>
      --  mode so DSP's clock input
      <br/>
      --      is driven by the clock divider output (in SYSCFG) at a minimum
      <br/>
      --  instruction cycle of 100 ns.
      <br/>
      --      When this bit is set to 1, CLKMD1 = 1 and the DSP is in
      <br/>
      --  multiply-by-two mode so the DSP's clock
      <br/>
      --      input is the oscillator output with an instruction cycle time of 25
      <br/>
      --  ns.
      <br/>
      The DSP should not be taken
      <br/>
      --      out of reset on the same write cycle that the clock is turned on;
      <br/>
      --  instead, two writes should be used.
      <br/>
      --      Note that in the 25 ns mode, the clock can only be turned off if the
      <br/>
      --  part is in IDLE2.
      <br/>
      The default is
      <br/>
      --      value for this bit is 0.
      <br/>
      -- Bit3 DSP MP/-MC: This bit corresponds to the DSP MP/-MC pin.
      <br/>
      When it equals
      <br/>
      --  1 and the DSP is taken
      <br/>
      --      out of reset, the DSP is in microprocessor mode and begins running out
      <br/>
      --  of external memory.
      <br/>
      --      Setting this bit to 0 sets the DSP MPI-MC pin = 0, thus allowing the
      <br/>
      --  part to be bootloaded when the
      <br/>
      --      DSP is taken out of reset.
      <br/>
      This means the DSP is brought up in
      <br/>
      --  microcomputer mode that causes
      <br/>
      --      the part to bootload code in from global data memory.
      <br/>
      The DSP can only
      <br/>
      --  bootload out of page 0
      <br/>
      --      of global data memory.
      <br/>
      The default value is 1.
      <br/>
      After bootload, this
      <br/>
      --  bit must be set to 1.
      <br/>
      The MP/-
      <br/>
      --      MC is multiplexed with -INT1 pin and this must be done for DSP
      <br/>
      --  interrupts to work correctly.
      <br/>
      -- Bit4 TXINTEN: This bit is used by the MPU 12 to receive an interrupt when
      <br/>
      --  DSPTXD is written to by the
      <br/>
      --      DSP.
      <br/>
      When TXINTEN is set (1), TXFULL condition in the DSPSR will
      <br/>
      --  generate an interrupt to
      <br/>
      --      the MPU 12 allowing interrupt driven communications with the DSP.
      <br/>
      --  Writing a 0 will disable, but
      <br/>
      --      not clear the interrupt.
      <br/>
      The default value of this bit is 0.
      <br/>
      -- Bit5 RXINTEN: This bit is used by the MPU 12 to receive an interrupt when
      <br/>
      --  DSPRXD is read by the DSP.
      <br/>
      --      When RXINTEN is set (1), RXEMPTY condition in the DSPSR will generate
      <br/>
      --  an interrupt to the
      <br/>
      --      MPU 12 allowing interrupt driven communications with the DSP.
      <br/>
      Writing
      <br/>
      --  a 0 will disable, but not
      <br/>
      --      clear the interrupt.
      <br/>
      The default value of this bit is 0.
      <br/>
      -- Bit6 RESERVED: Local Memory Read/Write control flag. 0 = READ; 1 = WRITE;
      <br/>
      --  Default = 0
      <br/>
      -- Bit7 DEVBUSYINTEN: This bit is used by the MPU 12 to receive an interrupt
      <br/>
      --  when MPU memory access
      <br/>
      --      timeout occurs.
      <br/>
      When DEVBUSYINTEN is set (1), DEVBUSYINT condition in
      <br/>
      --  the DSPSR will
      <br/>
      --      generate an interrupt to the MPU 12.
      <br/>
      This is an error condition and
      <br/>
      --  described.
      <br/>
      Writing a 0 will
      <br/>
      --      clear the interrupt.
      <br/>
      The default value for this bit is 0.
      <br/>
      -- Bit8 MANUAL HOLD: Writing a 0 to this bit will set the -HOLD line to the
      <br/>
      --  DSP to 0.
      <br/>
      This keeps the
      <br/>
      --      DSP off the memory bus so that the MPU 12 may have uncontested, fully
      <br/>
      --  optimized access to the
      <br/>
      --      memory/DSP bus with no arbitration delay.
      <br/>
      The actual value of -HOLDA
      <br/>
      --  may be polled in
      <br/>
      --      DSPSR.
      <br/>
      This mode is good for block accesses of data to the memory/DSP
      <br/>
      --  bus.
      <br/>
      Default value for
      <br/>
      --      this bit is 1. (Note that when the DSP/memory module 40 is in standard
      <br/>
      --  mode, -HOLD = 0.)
      <br/>
      -- Bit10-9 LM_ADR_CTRL: Local Memory address modification control after access
      <br/>
      --  to DATA register;
      <br/>
      --      00 = No change; 01 = increment LM_RW_ADDR register by +1; 10 =
      <br/>
      --  decrement LM_RW_ADDR
      <br/>
      --      register by -1; 11 = use value in LM_AD_OFFSET to modify LM_RW_ADDR
      <br/>
      --  register.
      <br/>
      The
      <br/>
      --      default value is 00.
      <br/>
      -- Bit 11 MAXOD (Maximum Overdrive): Writing a 0 to this bit causes any MPU 12
      <br/>
      --  access to the module
      <br/>
      --      controller to -HOLD the DSP.
      <br/>
      This will of course slow down DSP
      <br/>
      --  operation, but guarantee no bus
      <br/>
      --      arbitration conflicts.
      <br/>
      Writing a 1 to this bit turns on the bus
      <br/>
      --  arbitration optimization that allows
      <br/>
      --      DSP and MPU 12 to access the module controller concurrently.
      <br/>
      When this
      <br/>
      --  bit is active any access
      <br/>
      --      to the module controller will NOT cause the DSP -HOLD signal to be
      <br/>
      --  applied low.
      <br/>
      The default
      <br/>
      --      value for this bit is 0.
      <br/>
      -- Bit 12 IREQSERV (IREQ Service): In the case of either pulse or level
      <br/>
      --  interrupts, this bit must be cleared
      <br/>
      --      AND primed.
      <br/>
      This means that when MPU 12 is servicing an interrupt, a 1
      <br/>
      --  must be written to this
      <br/>
      --      bit to clear it.
      <br/>
      And then a 0 MUST be written to this bit to prime it
      <br/>
      --  for the next interrupt.
      <br/>
      --      Otherwise -IREQ will not toggle again.
      <br/>
      This puts the time between
      <br/>
      --  IREQ's (and pulsed interrupts
      <br/>
      --      will pulse only once) fully in control of the MPU 12 programmer.
      <br/>
      -- Bit14-13 LM_SPACE_SELECT: Local Memory space select.
      <br/>
      These two bits specify
      <br/>
      --  which space in the
      <br/>
      --      local memory space of the module should be selected.
      <br/>
      At present,
      <br/>
      --  Module Information
      <br/>
      --      Space(MIS), DSP Program Space(DSP_PM), and DSP Data Space(DSP_DM) are
      <br/>
      --  supported.
      <br/>
      --      00 = MIS; 01 = DSP_PM; 10 = DSP_DM; 11 = not defined.
      <br/>
      Default is 00.
      <br/>
      -- Bit 15 MODCTL: When the MPU 12 switches the DSP/memory module 40 to smart
      <br/>
      --  mode by writing the
      <br/>
      --      signature to SIGR, this bit will be set to 1. (Note that it will not
      <br/>
      --  be latched until a write occurs to
      <br/>
      --      DSPCR).
      <br/>
      Writing a 0 to this bit will reset the smart mode and force
      <br/>
      --  the DSP/memory module 40
      <br/>
      --      to the standard mode.
      <br/>
      When writing to this register, always be sure to
      <br/>
      --  write 1 to this bit or that
      <br/>
      --      DSP/memory module 40 will switch to standard mode.
      <br/>
      Also note that
      <br/>
      --  writing 0 will not take the
      <br/>
      --      DSP/memory module 40 out of smart mode if MODE bit in the COR's is 1.
      <br/>
      --  Default value for this
      <br/>
      --      bit is 0.
    </p>
    <p num="59">DSP Status Register</p>
    <p num="60">
      The DSPSR, shown in FIG. 4b, is a read-only, 16-bit register.
      <br/>
      It is used to monitor DSP operation, module interrupt of the MPU 12, and memory/DSP bus arbitration.
      <br/>
      Definition of individual bits are as follows in Table V:
    </p>
    <heading>-- TABLE V</heading>
    <p num="61">
      -- DSPCR Bit Operation
      <br/>
      -- Bit1-0 RESERVED: These bits are reserved and may reflect any value that has
      <br/>
      --  no relevance to the
      <br/>
      --      operation of the DSP/memory module 40.
      <br/>
      -- Bit2 DSP CLKMD1: This bit indicates the value of the DSP CLKMD1 line.
      <br/>
      When
      <br/>
      --  CLKMD1 = 1, the DSP
      <br/>
      --      is in multiply-by-two mode.
      <br/>
      When CLKMD1 = 0, the DSP is in
      <br/>
      --  divide-by-two mode.
      <br/>
      Note that
      <br/>
      --      CLKMD1 may only be changed when -RS = 0.
      <br/>
      -- Bit3 RESERVED: This bit is reserved and may reflect any value that has no
      <br/>
      --  relevance to the operation of
      <br/>
      --      the DSP/memory module 40.
      <br/>
      -- Bit4 TXFULL: This bit is set to 1 when DSP writes a new data value to the
      <br/>
      --  DSPTXD.
      <br/>
      This bit is cleared
      <br/>
      --      (0) when MPU 12 completes a read from the DSPTXD.
      <br/>
      DSP should only
      <br/>
      --  write to DSPTXD when
      <br/>
      --      TXEMPTY is set (to 1) in the PCSR.
      <br/>
      This bit is set to 0 (cleared) at
      <br/>
      --  power up.
      <br/>
      -- Bit5 RXEMPTY: This bit is set to 1 after DSP reads from DSPRXD.
      <br/>
      It is
      <br/>
      --  cleared when MPU 12 writes
      <br/>
      --      new data to DSPRXD.
      <br/>
      MPU 12 should only write to DSPRXD when RXEMPTY is
      <br/>
      --  0.
      <br/>
      If MPU 12
      <br/>
      --      writes to DSPRXD when RXEMPTY is 0 previous data in DSPRXD will be
      <br/>
      --  overwritten.
      <br/>
      Its
      <br/>
      --      default value is 1.
      <br/>
      -- Bit6 LM_DATA_RDY: This bit is used to flag when the data register is ready
      <br/>
      --  to be accessed by the MPU.
      <br/>
      --      This bit is set to 1 by the hardware circuitry when LM_RW_DATA
      <br/>
      --  register is ready to be
      <br/>
      --      accessed(Read or Write); it is automatically set to 0 when the
      <br/>
      --  LM_RW_DATA register is
      <br/>
      --      accessed.
      <br/>
      This bit is defined to support access to slow local memory
      <br/>
      --  chips, such as Flash, which
      <br/>
      --      may have speeds that are slower than the MPU access speeds to the
      <br/>
      --  module.
      <br/>
      Default is 0.
      <br/>
      -- Bit7 DEVBUSYINT (Device Busy Interrupt): This bit is set to 1 after MPU 12
      <br/>
      --  requests access the
      <br/>
      --      memory bus and does not receive access proper access.
      <br/>
      This is an error
      <br/>
      --  condition and thus data
      <br/>
      --      read is invalid and data written is unsuccessful.
      <br/>
      This bit is reset at
      <br/>
      --  the beginning of every
      <br/>
      --      memory/DSP bus access and set to one if a timeout occurs.
      <br/>
      It should be
      <br/>
      --  read after a questioned
      <br/>
      --      access.
      <br/>
      Thus after an invalid access, the only way to clear this bit
      <br/>
      --  to 0 is to get a valid access or
      <br/>
      --      reset the module controller.
      <br/>
      This operation is necessitated by the
      <br/>
      --  DSP's operation of -HOLD, -
      <br/>
      --      HOLDA, and READY.
      <br/>
      The default is 0.
      <br/>
      Note that the use of a long
      <br/>
      --  software wait state on the
      <br/>
      --      MPU 12 side will cause this bit to go active.
      <br/>
      -- Bit8 DSP -HOLDA: This bit reflects the value of the -HOLDA (Hold
      <br/>
      --  Acknowledge pin) of the DSP.
      <br/>
      -- Bits10-9 RESERVED: These bits are reserved and may reflect any value that
      <br/>
      --  has no relevance to the
      <br/>
      --      operation of the DSP/memory module 40.
      <br/>
      -- Bit11 PDH (Please Don't Hold Me): This bit is a direct copy of the PDR bit
      <br/>
      --  in the DSP SYSCFG register.
      <br/>
      --      When PDH = 1, the DSP is requesting the MPU 12 not to access the
      <br/>
      --  memory bus.
      <br/>
      The MPU 12
      <br/>
      --      may ignore the request and access the memory bus at the risk of
      <br/>
      --  slowing down the DSP's code
      <br/>
      --      execution.
      <br/>
      Note that according to round robin bus arbitration
      <br/>
      --  operation, the DSP will have to
      <br/>
      --      finish any started bus cycles when accessing DSPSMMR's and global data
      <br/>
      --  memory before the
      <br/>
      --      MPU 12 can begin access.
      <br/>
      The only way to guarantee MPU access is to
      <br/>
      --  assert -HOLD to the DSP
      <br/>
      --      either by MANUAL HOLD = 0 or MAXOD = 0.
      <br/>
      -- Bit15-12 RESERVED: These bits are reserved and may reflect any value that
      <br/>
      --  has no relevance to the
      <br/>
      --      operation of the DSP/memory module 40.
    </p>
    <p num="62">DSP Data Transmit Register</p>
    <p num="63">
      DSPTXD is a 16 bit register used by the DSP to communicate to the host MPU 12.
      <br/>
      The MPU 12 has only read access to this register and any MPU write to this register is ignored.
      <br/>
      The DSP has only write access to this register and any DSP read from this register causes invalid data to be read.
      <br/>
      A DSP write to this register generates a TXFULL interrupt to the MPU 12 if enabled.
      <br/>
      Similarly, an MPU 12 read from this register generates a TXEMPTY interrupt to the DSP if enabled.
    </p>
    <p num="64">DSP Data Receive Register</p>
    <p num="65">
      DSPRXD is a 16 bit register used by the MPU 12 to communicate to the DSP.
      <br/>
      The MPU 12 has only write access to this register and any MPU 12 read from this register causes invalid data to be read.
      <br/>
      The DSP has only read access to this register and any DSP write to this register is ignored.
      <br/>
      A DSP read from this register generates a RXEMPTY interrupt to the MPU 12 enabled.
      <br/>
      Similarly a MPU 12 write to this register generates a RXFULL interrupt to the DSP if enabled.
    </p>
    <p num="66">MPU 12 Status Register</p>
    <p num="67">
      The PCSR, shown in FIG. 4c, is a 16 bit read-only register to the DSP located at I/O address 0052h when the DSP/memory module 40 is in smart mode.
      <br/>
      It is used by the DSP space to determine status of the host communication registers.
      <br/>
      Its bits are defined in Table VI.
    </p>
    <heading>-- TABLE VI</heading>
    <p num="68">
      -- PCSR Bit Operation
      <br/>
      -- Bit0 TXEMPTY: This bit is set to 1 after MPU 12 reads new data from DSPTXD.
      <br/>
      --  It is cleared (0) when
      <br/>
      --      DSP writes new data to DSPTXD indicating new data is available for MPU
      <br/>
      --  12.
      <br/>
      This bit directly
      <br/>
      --      drives the -INT4 pin of the DSP generating a communication transmit
      <br/>
      --  interrupt to the DSP.
      <br/>
      The
      <br/>
      --      default value for this bit is 1.
      <br/>
      -- Bit1 RXFULL: This bit is set to 1 when MPU 12 writes new data to the
      <br/>
      --  DSPRXD.
      <br/>
      This bit is cleared (0)
      <br/>
      --      when DSP completes a read from the DSPRXD.
      <br/>
      MPU 12 should only write
      <br/>
      --  new data to DSPRXD
      <br/>
      --      when RXEMPTY in the DSPSR is clear (0).
      <br/>
      This bit directly drives the
      <br/>
      --  -INT4 pin of the DSP
      <br/>
      --      generating a communication receive interrupt to the DSP.
      <br/>
      The default
      <br/>
      --  value for this bit is 0.
      <br/>
      Note
      <br/>
      --      that if DSP MP/-MC bit must be equal to 1.
    </p>
    <p num="69">Bit I/O Register (Reserved)</p>
    <p num="70">
      The BIOR is a 16 bit read/write.vertline..vertline.read-only register to the DSP located at I/O address 0053h when the DSP/memory module 40 is in Smart Mode.
      <br/>
      BIOR receives information from an analog front end (described in connection with FIG. 12) so that the DSP/memory module 40 can receive information through external signals, such as a line-in/out, microphone input, telephone line or cellular connection.
    </p>
    <p num="71">System Configuration Register</p>
    <p num="72">
      The SYSCFG register, shown in FIG. 4d, is a 16 bit read/write register to the DSP located at I/O address 0054h when the DSP/memory module 40 is in Smart Mode.
      <br/>
      It is used by the DSP to control the frequency of the clock input to the DSP when CLKMD1=0, bus arbitration, Global Data paging, external memory configuration and paging.
    </p>
    <heading>-- TABLE VII</heading>
    <p num="73">
      -- SYSCFG Bit Operation
      <br/>
      -- Bit1-0 CLKD0-CLKD1: The clock divider select bits 1-0 selects the divider
      <br/>
      --  for the 50 ns clock (when
      <br/>
      -- CLKMD1 = 0) as follows:
      <br/>
      -- CLKD1-CLKD0 VALUE                     DIVIDER   CLKOUT1 VALUE
      <br/>
      -- 00                                    1         100 ns
      <br/>
      -- 01                                    2         200 ns
      <br/>
      -- 10                                    4         400 ns
      <br/>
      -- 11                                    8         800 ns
      <br/>
      -- Bit2 DSPTXDINTEN: This bit is used by the DSP to receive an interrupt when
      <br/>
      --  DSPTXD is read by the
      <br/>
      --      MPU 12.
      <br/>
      When DSPRXDINTEN is set (1), TXEMPTY condition in the PCSR
      <br/>
      --  will generate an
      <br/>
      --      interrupt to the DSP allowing interrupt driven communications with the
      <br/>
      --  MPU 12.
      <br/>
      Writing a 0 will
      <br/>
      --      disable, but not clear the interrupt.
      <br/>
      The default value of this bit is
      <br/>
      --  0.
      <br/>
      -- Bit3 PDH (Please Don't Hold Me): This bit is reflected as the PDH bit in
      <br/>
      --  the DSPSR register that
      <br/>
      --      requests the MPU 12 not to access the memory bus when PDH = 1.
      <br/>
      The MPU
      <br/>
      --  12 may ignore the
      <br/>
      --      request and access the memory bus at the risk of slowing down the
      <br/>
      --  DSP's code execution.
      <br/>
      Note
      <br/>
      --      that due to DSP bus arbitration operation, the DSP will have priority
      <br/>
      --  to SMM registers and global
      <br/>
      --      data memory.
      <br/>
      The only way to guarantee MPU 12 access is -HOLD the DSP.
      <br/>
      -- Bit5-4 RESERVED: 0 should always be written to these bits or unknown
      <br/>
      --  conditions may occur.
      <br/>
      -- Bit6 DSPRXDINTEN: This bit is used by the DSP to receive an interrupt when
      <br/>
      --  DSPRXD is written to by
      <br/>
      --      the MPU 12.
      <br/>
      When DSPRXDINTEN is set (1), RXFULL condition in the PCSR
      <br/>
      --  will generate an
      <br/>
      --      interrupt to the DSP allowing interrupt driven communications with the
      <br/>
      --  MPU 12.
      <br/>
      Writing a 0 will
      <br/>
      --      disable, but not clear the interrupt.
      <br/>
      The default value of this bit is
      <br/>
      --  0.
      <br/>
      -- Bit7 RESERVED: 1 should always be written to this bit or unknown operation
      <br/>
      --  may occur.
      <br/>
      -- Bit11-8 RESERVED: 0 should always be written to these bits or unknown
      <br/>
      --  conditions may occur.
      <br/>
      -- Bit15-12 RESERVED: 0 should always be written to these bits or unknown
      <br/>
      --  conditions may occur.
    </p>
    <p num="74">Hunting Protocol</p>
    <p num="75">
      If the appropriate driver is installed before the DSP/memory module 40 is plugged in, when the system power is cycled, the driver is invoked, and it automatically searches the entire-space to identify where the DSP/memory module 40 located.
      <br/>
      The protocol and procedure for identifying where the DSP/memory module 40 is located is referred to as the hunting protocol.
      <br/>
      The MPU 12, under control of the driver, locates the DSP/memory module 40 as shown in FIG. 5.
    </p>
    <p num="76">
      In blocks 60 and 62, MPU 12 writes a signature or fixed pattern, e.g. A320, n times to each memory location starting from one end of the memory space and working upwards(or downwards). n is a number that is typically 4, but could be any other number; however, it has to be specified in the driver which is decided by the hardware.
      <br/>
      This fixed pattern is referred to as the signature pattern.
    </p>
    <p num="77">
      In block 64, MPU 12 reads the memory location where it wrote the fixed pattern.
      <br/>
      If, in decision block 66, the value read is identical to the value that was written, then the MPU 12 increments the address counter and proceeds to repeat the above process for the next consecutive memory location (blocks 68 and 70).
    </p>
    <p num="78">
      If the value read is not identical to the value just written in decision block 66, and if it is equal to a predetermined response value (for example, the complement of the signature) in decision block 72, the driver assumes it has located the DSP/memory mode 40.
      <br/>
      This address value is the address of the Signature Register (SIGR).
      <br/>
      The driver remembers this address for future reference.
      <br/>
      If the data read is not equal to the response value in decision block 72, then an error has occurred.
    </p>
    <p num="79">Memory Mapping</p>
    <p num="80">Configuration Mode</p>
    <p num="81">
      FIG. 6 illustrates the memory map as seen by the MPU 12 when the DSP/memory module 40 is in configuration mode.
      <br/>
      As described above, when the MPU 12 decides to use the DSP circuitry 44 on the DSP/memory module 40, it writes the signature pattern, n times, to the SIGR register directly.
      <br/>
      This switches the module to the configuration mode.
      <br/>
      The DSP 56 on the module is still not powered .
      <br/>
      The MPU 12 can access several addresses following the SIGR register to obtain information regarding the module.
      <br/>
      This can be in the form of a header that is several bytes long stored in a module information structure (MIS) memory 72.
      <br/>
      This header will specify the type of DSP(s) on the DSP/memory module 40, whether the DSP/memory module 40 is a 32-bit or 16-bit processor, the size of local memory 58 associated with the DSP, the size of the memory on the DSP/memory module 40, and other related information.
      <br/>
      The driver saves this Configuration Header for future reference. (And if for some reason the power is recycled on the PC, then the DSP/memory module 40 should always boot-up in the standard mode.)
    </p>
    <p num="82">Using the appropriate control registers 52 that are now available, following the SIGR register, the MPU 12 downloads program and data to the DSP's local memory 58. (This means that the local memory associated with the DSP 56 must be powered up, but the DSP 56 should still be off).</p>
    <p num="83">
      The DSPLOC register, available in the configuration mode, allows the MPU 12 to relocate the SIGR and other control registers to another location on the DSP/memory module 40.
      <br/>
      Even if the MPU 12 decides not to relocate the control registers 52 to a new address, it must still write a zero to the DSPLOC registers.
      <br/>
      The MPU 12 now writes the signature pattern, A320, to the SIGR register to switch the module from configuration mode back to standard mode.
    </p>
    <p num="84">Smart Mode</p>
    <p num="85">
      When the MPU 12 invokes the power of the DSP 56 on the DSP/memory module 40, it will first determine if there is memory available on the module.
      <br/>
      Some current application programs may have allocated memory in the address space of the DSP/memory module 40.
      <br/>
      Hence, the MPU 12 will move any existing application memories to new locations.
      <br/>
      Alternatively, the MPU 12 may decide to relocate the control registers to another address on the DSP/memory module 40.
      <br/>
      In order to relocate the address of the control registers 52, the MPU 12 enters the configuration mode of the DSP/memory module 40, described above.
      <br/>
      The DSPLOC register in the configuration mode allows the MPU 12 to relocate the SIGR register and other shared registers to another location on the DSP/memory module 40; this flexibility is required since the MPU 12 may have previously allocated an application on the DSP/memory module 40 which has memory allocated that overlaps on the SIGR register.
      <br/>
      Then the MPU 12 will switch from configuration mode to standard mode and from standard mode to smart mode.
      <br/>
      In smart mode, the MPU 12 will download the necessary digital signal processing program(s) and data to the local memory 58 of the DSP 56.
      <br/>
      By writing to the control register, the MPU 12 can start the DSP 56.
    </p>
    <p num="86">
      In addition to writing to the base register, the MPU 12 writes to a Shared Memory Size register on the SRAM associated with the DSP, which specifies the amount of shared memory between the host MPU 12 and the DSP 56.
      <br/>
      Shared memory is accessible by both the MPU 12 as well as the DSP 56.
    </p>
    <p num="87">
      If the shared memory was specified by the MPU as zero, then the DSP/memory module 40 is said to be in the smart-local mode.
      <br/>
      In this case, only the control registers 52 are accessible by the MPU.
      <br/>
      A diagram of the memory map seen by MPU 12 in smart-local mode is shown in FIG. 7.
      <br/>
      In this mode, the MPU can read and write from the control registers 52.
      <br/>
      Through the control registers 52, the MPU can access the MIS 72 and local memory 58 (DSP_PM is the DSP's local program memory and DSP_DM is the DSP's local data memory) through control registers LM_RW_ADDR, LM_RW_DATA and LM_ADR_OFFSET, and the MPU 12 can access the I/O registers 74 of the DSP 56 through control registers DSPTxD and DSPRxD.
    </p>
    <p num="88">
      However, if the shared memory was specified by the MPU as a non-zero value, then the mode is referred to as the smart-shared mode.
      <br/>
      In this mode the specified amount of memory is available as shared memory 54 between the MPU and the DSP(s).
      <br/>
      FIG. 8 illustrates the memory map seen by the MPU 12 in smart-shared mode.
    </p>
    <p num="89">
      In smart-shared mode, the MPU 12 first reads the semaphore bit, tests it to decide if the shared memory is currently being accessed by the DSP, and if it is not being used, the MPU 12 will set the semaphore bit prior to accessing the shared memory (and return the bit to "0" once the access is complete).
      <br/>
      However if the semaphore bit is already set, indicating that the DSP 56 is currently accessing the shared memory 54, MPU 12 can write a "1" to the Shared Memory request bit (referred to as Manual Hold bit in the DSPCR register).
      <br/>
      This write is detected by the hardware module on the DSP/memory module 40.
      <br/>
      The module controller now does the appropriate actions to put the DSP 56 on hold; i.e., the module controller will stop the DSP's access to the shared memory 54, and return the access of the shared memory 54 to the MPU 12.
      <br/>
      The Shared Memory Request bit therefore allows the MPU to demand access to the shared memory, even though it is being used by the DSP 56.
    </p>
    <p num="90">
      Alternatively, this protocol can be avoided to speed accesses to the shared memory 54.
      <br/>
      However, avoiding the protocol requires hardware which can switch quickly enough to respond to MPU shared memory requests or the use of dual port DRAMs.
    </p>
    <p num="91">Module Implementations</p>
    <p num="92">
      FIGS. 9-12 illustrate different embodiments for the DSP/memory module 40 and DSP circuitry 44.
      <br/>
      In FIG. 9 an embodiment is shown where the data and address buses 75 from MMU 14 (see FIG. 1) are received by module controller 76.
      <br/>
      The memory and address buses 75 are also connected to one or more DRAMs (dynamic random access memories) 78 which form the conventional memory on the DSP/memory module 40.
      <br/>
      In addition, one or more DPRAMs (dual ported random access memories) 80 are coupled to the module controller.
      <br/>
      The DPRAMs are mapped by the module controller 76 to the address specified as the shared memory.
      <br/>
      The outputs of the DPRAMs 80 are coupled to a DSP local bus 82 connecting the module controller 76 with the DSP(s) 56, shared memory 58 and (optionally) a CODEC (compressor/decompressor) 84.
    </p>
    <p num="93">
      This module has the standard memory bus signals coming into it from the MMU.
      <br/>
      For example there are address lines, data lines, and control lines that are typically found in a SIMM, DIMM, or other memory expansion modules found in notebook computers, PCs and PDAs.
      <br/>
      This prototype supports the standard, configuration and smart modes of operation as discussed above.
    </p>
    <p num="94">
      In operation, the DRAM 78 on the module is not shared between the MPU 12 and the DSP(s) 56. In standard mode, the MPU 12 reads and writes to the DRAM 78 which spans the entire memory space of the DSP/memory module 40.
      <br/>
      In smart mode, however, the module controller 76 passes reads and writes by the MPU 12 to the shared memory 54 to the DPRAMs 80, instead of to the corresponding locations in the DRAMs 78.
      <br/>
      The DSP 56 can read and write only to the DPRAMs 80, not to the DRAMs 78.
      <br/>
      This architecture reduces memory access conflicts between the MPU 12 and the DSP 56.
    </p>
    <p num="95">The control registers 42 and the MIS 72 could be implemented within the module controller 76.</p>
    <p num="96">
      In FIG. 10, a second embodiment of the DSP/memory module 40 is shown, wherein the module controller 76 switches access to the DRAMs 78 between the data and address bus 75 and the DSP local bus 82 through switch 86.
      <br/>
      In this embodiment, the DSP 56 can read and write to the DRAMs 78.
      <br/>
      However, the MPU 12 has a higher priority to the shared addresses in the DRAMs 78; when both the DSP 56 and MPU 12 try to access the DRAM 78 simultaneously, the module controller puts the DSP 56 on hold and switches to the MPU memory bus 75.
    </p>
    <p num="97">
      The MPU memory bus 75 is a typical memory bus consisting of the usual data, address, and control lines.
      <br/>
      The MPU's access to the DRAMs 58 is transparent, i.e., the module controller 76 accomplishes the switch such that the MPU 12 does not incur any delays.
      <br/>
      As far as the MPU 12 is concerned, it incurs the same delay in accessing the DRAM 78 if the module were to contain only the DRAM 78 as in a normal memory expansion module.
    </p>
    <p num="98">
      In order to provide transparent switching, it may be necessary to use DRAMs 78 which are of a higher speed rating than the stated speed rating of the DSP/memory module 40.
      <br/>
      For example, in order to provide a 70 ns DSP/memory module 40, it may be necessary to use 60 ns DRAMs 78 to compensate for the slight switching delay.
    </p>
    <p num="99">
      FIG. 11 illustrates a third embodiment of the DSP/memory module 40.
      <br/>
      In this embodiment, because of delays in switching between the MPU memory bus 75 and the DSP local bus 82, a WAIT signal is provided.
      <br/>
      This signal can be asserted during a switch between buses to hold the MPU access while the switch is occurring.
      <br/>
      The WAIT signal may be implemented by using an additional line or by using a combination of the existing standard memory bus signals, e.g., a unique combination of the refresh and write enable signals which would notify the MMU, and the MPU 12, that a WAIT had been asserted.
      <br/>
      Alternatively, a separate signal line or pin may be allocated in future standard memory modules.
    </p>
    <p num="100">
      In addition, this embodiment also supports an Interrupt Request Signal (IREQ) that allows the module to send an interrupt to the external device such as an MPU 12.
      <br/>
      The interrupt may be used, for example, to notify the MPU 12 that the DSP has completed its demanded task.
      <br/>
      For instance, the MPU 12 could place data in shared memory for translation to wavetable sounds, and the DSP could interrupt the MPU when the operation was complete, in order to allow the MPU 12 to work on other tasks while the transformation was being performed by the DSP 56.
      <br/>
      The IREQ signal may be implemented by using a combination of the existing standard memory bus signals, e.g., a combination of the refresh and write enable signals may be used to signal the host of a pending service request.
      <br/>
      Alternatively, a separate signal line or pin may be allocated in a future standard memory module design.
    </p>
    <p num="101">
      The following sections describe ways to implement the WAIT and IREQ signals.
      <br/>
      Six options are discussed, showing how these signals may be connected and handled by a host controller. (The host controller is also referred to as the memory controller 76 in this document.) We discuss these signals for memory modules (MMs) 98; in the examples shown below, we have considered Dual-in-line memory-modules(DIMMs) with either Fast Page Mode (FPM), Extended Data Output (EDO), Synchronous (S) or Double Data Rate Synchronous (DDR-S) Dynamic Random Access Memories (DRAMs).
      <br/>
      However these teachings are applicable to other types of memory/memory modules as well.
      <br/>
      Each of these DIMMs 98 have two or more banks of memory.
    </p>
    <p num="102">Implementation of IREQ and Wait Signals Option 1: One Wait Signal and One Interrupt Signal for Each Bank</p>
    <p num="103">DIMM Impact</p>
    <p num="104">This option shall add 4 signals to each DIMM module 98, /MWAIT0 signal 101, MWAIT1 signal 102, /MIRQ0 signal 103, and /MIRQ1 signal 104.</p>
    <p num="105">See the block diagram in FIG. 14.</p>
    <p num="106">Memory Controller Impact</p>
    <p num="107">
      The memory controller shall have one /MWAITn signal (101 or 102) and one /MIRQn signal (103 or 104) added for each of n banks.
      <br/>
      Thus 2n extra pins are needed where n is the total number of memory banks.
    </p>
    <p num="108">The memory controller 76 shall include the necessary logic to comprehend the added signals above.</p>
    <p num="109">The memory controller 76 shall include setup registers 76a (if needed).</p>
    <p num="110">See the block diagram in FIG. 14.</p>
    <p num="111">Signal List and Description</p>
    <heading>-- TABLE VIII</heading>
    <p num="112">
      -- Signal List and Description (EDO/FPM DRAM)
      <br/>
      -- /MWAIT0: Memory WAIT flag for DIMM bank 0.
      <br/>
      This is an active-low signal
      <br/>
      --  driven by the MM
      <br/>
      --      indicating that this bank of DRAM is temporarily busy.
      <br/>
      After the
      <br/>
      --  falling edge of /RAS0 (row
      <br/>
      --      address strobe), the memory controller 76 must begin to sample
      <br/>
      --  /MWAIT0.
      <br/>
      If low, then
      <br/>
      --      /MWAIT0 will be driven high shortly after the falling edge of /RAS0,
      <br/>
      --  indicating that the MM has
      <br/>
      --      relinquished the shared memory back to the controller.
      <br/>
      At this point,
      <br/>
      --  the controller may assert
      <br/>
      --      /CAS (column address strobe).
      <br/>
      The MM may only initiate a falling edge
      <br/>
      --  on /MWAIT0 when
      <br/>
      --      /RAS0 is high, thus further accesses to the same page of this bank
      <br/>
      --  will incur no wait.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
      <br/>
      See FIG. 15 for signal timing.
      <br/>
      -- /MWAIT1: Memory WMT flag for DIMM bank 1.
      <br/>
      This is an active-low signal
      <br/>
      --  driven by the MM
      <br/>
      --      indicating that this bank of DRAM is temporarily busy.
      <br/>
      After the
      <br/>
      --  falling edge of /RAS1, the
      <br/>
      --      memory controller must begin to sample /MWAIT1.
      <br/>
      If low, then /MWAIT1
      <br/>
      --  will be driven high
      <br/>
      --      shortly after the falling edge of /RAS1, indicating that the MM has
      <br/>
      --  relinquished the shared memory
      <br/>
      --      back to the controller.
      <br/>
      At this point, the controller may assert /CAS.
      <br/>
      --  The MM may only initiate a
      <br/>
      --      falling edge on /MWAIT1 when /RAS1 is high, thus further accesses to
      <br/>
      --  the same page of this bank
      <br/>
      --      will incur no wait.
      <br/>
      For compatibility with MMs that do not drive this
      <br/>
      --  signal, it shall be pulled up
      <br/>
      --      on the host PCB or in the host controller.
      <br/>
      See FIG. 15 for signal
      <br/>
      --  timing.
      <br/>
      -- /MIRQ0: Memory Interrupt ReQuest for DIMM bank 0.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
      <br/>
      -- /MIRQ1: Memory Interrupt ReQuest for DIMM bank 1.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
    </p>
    <heading>-- TABLE IX</heading>
    <p num="113">
      -- Signal List and Description (DDR-S/SDRAM)
      <br/>
      -- /MWAIT0: Memory WAIT flag for DIMM bank 0.
      <br/>
      This is an active-low signal
      <br/>
      --  synchronous with the
      <br/>
      --      memory bus clock.
      <br/>
      It is driven by the MM to the memory controller
      <br/>
      --  indicating that this bank of
      <br/>
      --      SDRAM is temporarily busy.
      <br/>
      The MM may only initiate a falling edge on
      <br/>
      --  /MWAIT0 when the
      <br/>
      --      SDRAM in this particular bank is eligible for DSP access.
      <br/>
      A falling
      <br/>
      --  edge on the /S0 input will
      <br/>
      --      always end the period of eligibility, requesting host access of the
      <br/>
      --  memory.
      <br/>
      If the /S0 input is
      <br/>
      --      driven low while /MWAIT0 is low, then /MWAIT0 will be driven high
      <br/>
      --  shortly after this point,
      <br/>
      --      indicating that the MM has relinquished the shared memory back to the
      <br/>
      --  controller.
      <br/>
      At this point,
      <br/>
      --      the controller may continue (or begin) a memory cycle with no further
      <br/>
      --  delay.
      <br/>
      See the "eligibility"
      <br/>
      --      section and FIGS. 16-18. For compatibility with MMs that do not drive
      <br/>
      --  this signal, it shall be
      <br/>
      --      pulled up on the host PCB or in the host controller.
      <br/>
      -- /MWAIT1: Memory WAIT flag for DIMM bank 1.
      <br/>
      This is an active-low signal
      <br/>
      --  synchronous with the
      <br/>
      --      memory bus clock.
      <br/>
      It is driven by the MM to the memory controller
      <br/>
      --  indicating that this bank of
      <br/>
      --      SDRAM is temporarily busy.
      <br/>
      The MM may only initiate a falling edge on
      <br/>
      --  /MWAIT1 when the
      <br/>
      --      SDRAM in this particular bank is eligible for DSP access.
      <br/>
      A falling
      <br/>
      --  edge on the /S1 input will
      <br/>
      --      always end the period of eligibility, requesting host access of the
      <br/>
      --  memory.
      <br/>
      If the /S1 input is
      <br/>
      --      driven low while /MWAIT1 is low, then /MWAIT1 will be driven high
      <br/>
      --  shortly after this point,
      <br/>
      --      indicating that the MM has relinquished the shared memory back to the
      <br/>
      --  controller.
      <br/>
      At this point,
      <br/>
      --      the controller may continue (or begin) a memory cycle with no further
      <br/>
      --  delay.
      <br/>
      See the "eligibility"
      <br/>
      --      section and FIGS. 16-18. For compatibility with MMs that do not drive
      <br/>
      --  this signal, it shall be
      <br/>
      --      pulled up on the host PCB or in the host controller.
      <br/>
      -- /MIRQ0: Memory Interrupt ReQuest for DIMM bank 0.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
      <br/>
      -- /MIRQ1: Memory Interrupt ReQuest for DIMM bank 1.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
    </p>
    <p num="114">Memory Eligibility for DSP Access (DDR-S/SDRAM Only)</p>
    <p num="115">
      Unlike conventional DRAMs, synchronous DRAMS have 2 or 4 internal banks.
      <br/>
      Because of this feature, the memory controller has the ability to open 2 or 4 pages at a time and instantly switch between them for read and write access.
      <br/>
      This feature makes the eligibility of DSP access to the memory slightly more complicated than with conventional DRAMs.
      <br/>
      A set of rules for eligibility must be defined.
    </p>
    <p num="116">
      Option 1: The shared SDRAM is only eligible for DSP access when all pages are known to be closed (after a PALL command).
      <br/>
      This will ensure that there are no page conflicts between the host and the DSP.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      The ACTV command can then be asserted in the cycle following the cycle where /MWAITn is sampled as high.
      <br/>
      This option would work most efficiently if the host controller closed all pages at the end of every memory access.
      <br/>
      This option treats the SDRAM much like a (single bank) standard DRAM.
      <br/>
      See FIG. 16.
    </p>
    <p num="117">
      Option 2: The memory is eligible for DSP access on a bank-by-bank basis after the host controller executes a READA, WRITEA, or PRE command for the specific bank that the DSP wishes to access.
      <br/>
      This approach is slightly less straightforward and would require the DSP to monitor the bank that the host controller is currently accessing.
      <br/>
      Also, the DSP may not gain access to the memory directly after one of these three commands, for the host controller may choose to immediately execute a WRITE or READ command on a different internal bank.
      <br/>
      When the desired bank is known to be precharged, the memory is eligible for DSP access after a burst read or write is complete, and the /Sn input is high, or after a pre-defined number of clock cycles without memory activity.
      <br/>
      Because other pages may still be open, however, it is possible that the host controller may incur several waits during a same page access.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      The ACTV, WRITE or READ commands can then be asserted in the cycle following the cycle where /MWAITn is sampled as high.
      <br/>
      See FIG. 17.
    </p>
    <p num="118">
      Option 3: The memory is eligible for DSP access at any time.
      <br/>
      This option would allow the DSP to break pages, accessing the memory whenever the host controller is not currently busy with a memory transaction.
      <br/>
      The memory will be eligible for DSP access after any burst read or write is complete, and the /Sn input is high, or after a pre-defined number of clock cycles without memory activity.
      <br/>
      The DSP, after gaining access to the memory would be responsible for issuing a precharge for all banks that it wishes to access via a PALL or one or more PRE command(s).
      <br/>
      After precharging is complete, the DSP may issue an ACTV command for its desired row.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      If /MWAITn is sampled to be low, then the controller must re-open the page with a new ACTV command.
      <br/>
      See FIG. 18.
    </p>
    <p num="119">At the end of a non-interrupted DSP access, the DSP has two options:</p>
    <p num="120">
      - a) The DSP precharges its accessed banks and re-opens the distrusted pages (via an ACTV command) and drives the /MWAITn signal back high. (This of course would require the DSP to register the last host controller page address.)
      <br/>
      - b) The DSP precharges its accessed banks and continues to drive the /MWAITn signal low, indicating to the controller that any desired page(s) must be re-opened via an ACTV command.
    </p>
    <p num="121">Memory Controller Setup Registers</p>
    <p num="122">
      It may be helpful to add n register bits to the memory controller to pre-define which of n banks will drive the /MWAITn signal.
      <br/>
      Access to memory banks that do not drive the /MWAITn signal need not suffer the possible controller latency associated with sampling the /MWAITn signal for each memory access.
    </p>
    <p num="123">Implementation of IREQ and Wait Signals Option 2: One Global Wait Signal for all DIMMS, and One Interrupt Signal for Each Bank</p>
    <p num="124">DIMM Impact</p>
    <p num="125">This option shall add 3 signals to each DIMM module 98, /MWAIT signal 105, MIRQ0 signal 103, and /MIRQ1 signal 104.</p>
    <p num="126">See the block diagram in FIG. 19.</p>
    <p num="127">Memory Controller Impact</p>
    <p num="128">
      The memory controller shall have one /MIRQn signal (103 or 104) added for each of n banks.
      <br/>
      The memory controller shall have one and only one /MWAIT signal (105) added.
      <br/>
      Thus (1+n) extra pins are needed where n is the total number of memory banks.
    </p>
    <p num="129">The memory controller shall include the necessary logic to comprehend the added signals above.</p>
    <p num="130">The memory controller shall include setup registers (if needed).</p>
    <p num="131">See the block diagram in FIG. 19.</p>
    <p num="132">Signal List and Description</p>
    <heading>-- TABLE X</heading>
    <p num="133">
      -- Signal List and Description (EDO/FPM DRAM)
      <br/>
      -- /MWAIT: Memory WAIT flag for all DIMMs.
      <br/>
      This is an active-low signal driven
      <br/>
      --  by the currently
      <br/>
      --      accessed MM indicating that the accessed bank of DRAM is temporarily
      <br/>
      --  busy.
      <br/>
      The memory
      <br/>
      --      controller must begin to sample this signal directly after each
      <br/>
      --  falling edge of /RASn to determine if
      <br/>
      --      bank "n" currently accessed is busy.
      <br/>
      If the currently accessed bank is
      <br/>
      --  busy, then the memory
      <br/>
      --      controller must wait a short amount of time until this flag is driven
      <br/>
      --  back high indicating that the
      <br/>
      --      MM has relinquished the shared memory back to the controller.
      <br/>
      At this
      <br/>
      --  point, the controller may
      <br/>
      --      assert /CAS.
      <br/>
      The MM may only begin to use the shared memory when /RASn
      <br/>
      --  is high, thus further
      <br/>
      --      accesses to the same page of this bank will incur no wait.
      <br/>
      If all
      <br/>
      --  /RASn signals to the MM are high,
      <br/>
      --      then the MM shall tristate the /MWAIT signal.
      <br/>
      For compatibility with
      <br/>
      --  MMs that do not drive this
      <br/>
      --      signal, it shall be pulled up on the host PCB or in the host
      <br/>
      --  controller.
      <br/>
      See FIG. 20 for signal
      <br/>
      --      timing.
      <br/>
      -- /MIRQ0: Memory Interrupt ReQuest for DIMM Bank 0.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
      <br/>
      -- /MIRQ1: Memory Interrupt ReQuest for DIMM Bank 1.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
    </p>
    <heading>-- TABLE XI</heading>
    <p num="134">
      -- Signal List and Description (DDR-S/SDRAM)
      <br/>
      -- /MWAIT: Memory WAIT flag for all DIMMs.
      <br/>
      This is an active-low signal
      <br/>
      --  synchronous with the memory
      <br/>
      --      bus clock.
      <br/>
      It is driven only by the currently accessed MM to the
      <br/>
      --  memory controller indicating that
      <br/>
      --      this bank of SDRAM is temporarily busy.
      <br/>
      A bank "n" of SDRAM may only
      <br/>
      --  become busy when it
      <br/>
      --      is eligible for DSP access.
      <br/>
      A falling edge on the corresponding /Sn
      <br/>
      --  input will always end the
      <br/>
      --      period of eligibility, requesting host access of the memory.
      <br/>
      The
      <br/>
      --  memory controller must begin to
      <br/>
      --      sample the /MWAIT signal in the cycle following the falling edge of
      <br/>
      --  /Sn.
      <br/>
      If /MWAIT is sampled
      <br/>
      --      as low, then /MWAIT will be driven high shortly after this point,
      <br/>
      --  indicating that the MM has
      <br/>
      --      relinquished the shared memory back to the controller.
      <br/>
      At this point,
      <br/>
      --  the controller may continue
      <br/>
      --      (or begin) a memory cycle with no further delay.
      <br/>
      See the "eligibility"
      <br/>
      --  section and FIGS. 21-23.
      <br/>
      --      If all /Sn inputs are high, the module shall tristate the /MWAIT
      <br/>
      --  signal.
      <br/>
      For compatibility with
      <br/>
      --      MMs that do not drive this signal, it shall be pulled up on the host
      <br/>
      --  PCB or in the host controller.
      <br/>
      -- /MIRQ0: Memory Interrupt ReQuest for DIMM Bank 0.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
      <br/>
      -- /MIRQ1: Memory Interrupt ReQuest for DIMM Bank 1.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
    </p>
    <p num="135">Memory Eligibility for DSP Access (DDR-S/SDRAM Only)</p>
    <p num="136">
      Unlike conventional DRAMs, synchronous DRAMS have 2 or 4 internal banks.
      <br/>
      Because of this feature, the memory controller has the ability to open 2 or 4 pages at a time and instantly switch between them for read and write access.
      <br/>
      This feature makes the eligibility of DSP access to the memory slightly more complicated than with conventional DRAMs.
      <br/>
      A set of rules for eligibility must be defined.
    </p>
    <p num="137">
      Option 1: The shared SDRAM is only eligible for DSP access when all pages are known to be closed (after a PALL command).
      <br/>
      This will ensure that there are no page conflicts between the host and the DSP.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      The ACTV command can then be asserted in the cycle following the cycle where /MWAIT is sampled as high.
      <br/>
      This option would work most efficiently if the host controller closed all pages at the end of every memory access.
      <br/>
      This option treats the SDRAM much like a (single bank) standard DRAM.
      <br/>
      See FIG. 21.
    </p>
    <p num="138">
      Option 2: The memory is eligible for DSP access on a bank-by-bank basis after the host controller executes a READA, WRITEA, or PRE command for the specific bank that the DSP wishes to access.
      <br/>
      This approach is slightly less straightforward and would require the DSP to monitor the bank that the host controller is currently accessing.
      <br/>
      Also, the DSP may not gain access to the memory directly after one of these three commands, for the host controller may choose to immediately execute a WRITE or READ command on a different internal bank.
      <br/>
      When the desired bank is known to be precharged, the memory is eligible for DSP access after a burst read or write is complete, and the /Sn input is high, or after a pre-defined number of clock cycles without memory activity.
      <br/>
      Because other pages may still be open, however, it is possible that the host controller may incur several waits during a same page access.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      The ACTV, WRITE or READ commands can then be asserted in the cycle following the cycle where /MWAIT is sampled as high.
      <br/>
      See FIG. 22.
    </p>
    <p num="139">
      Option 3: The memory is eligible for DSP access at any time.
      <br/>
      This option would allow the DSP to break pages, accessing the memory whenever the host controller is not currently busy with a memory transaction.
      <br/>
      The memory will be eligible for DSP access after any burst read or write is complete, and the /Sn input is high, or after a pre-defined number of clock cycles without memory activity.
      <br/>
      The DSP, after gaining access to the memory would be responsible for issuing a precharge for all banks that it wishes to access via a PALL or one or more PRE command(s).
      <br/>
      After precharging is complete, the DSP may issue an ACTV command for its desired row.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      If /MWAIT is sampled to be low, then the controller must re-open the page with a new ACTV command.
      <br/>
      See FIG. 23.
    </p>
    <p num="140">
      At the end of a non-interrupted DSP access, the DSP has two options:
      <br/>
      - a) The DSP precharges its accessed banks and re-opens the distrusted pages (via an ACTV command).
      <br/>
      The next time that /Sn is driven low, /MWAIT will respond as high. (This of course would require the DSP to register the last host controller page address.)
      <br/>
      - b) The DSP precharges its accessed banks.
      <br/>
      The next time that /Sn is driven low, /MWAIT will respond as low, indicating to the controller that any desired page(s) must be re-opened via an ACTV command.
    </p>
    <p num="141">Memory Controller Setup Registers</p>
    <p num="142">
      It may be helpful to add n register bits to the memory controller to pre-define which of n banks will drive the /MWAIT signal.
      <br/>
      Access to memory banks that do not drive the /MWAIT signal need not suffer the possible controller latency associated with sampling, the /MWAIT signal for each memory access.
    </p>
    <p num="143">Implementation of IREQ and Wait Signals Option 3: One Multiplexed Wait/Interrupt Signal for Each Bank</p>
    <p num="144">Impact to DIMM</p>
    <p num="145">This option shall add 2 signals to each DIMM module 98, /M0WAIT/IRQ signal 107, and /M1WAIT/IRQ signal 108.</p>
    <p num="146">See the block diagram in FIG. 24.</p>
    <p num="147">Impact to Memory Controller</p>
    <p num="148">
      The memory controller shall have one MnWAIT/IRQ signal (107 or 108) added for each of n banks.
      <br/>
      Thus n extra pins are needed where n is the total number of memory banks.
    </p>
    <p num="149">The memory controller shall include necessary logic to comprehend the added signals above.</p>
    <p num="150">The memory controller shall include setup registers (if needed).</p>
    <p num="151">See the block diagram in FIG. 24.</p>
    <p num="152">Signal List and Description</p>
    <heading>-- TABLE XII</heading>
    <p num="153">
      -- Signal List and Description (FPM/EDO DRAM)
      <br/>
      -- /M0WAIT/IRQ: Memory WAIT flag/Interrupt ReQuest for DIMM bank 0.
      <br/>
      This is a
      <br/>
      --  signal driven by the
      <br/>
      --      MM indicating that this bank of DRAM is busy or wishes to interrupt
      <br/>
      --  the host.
      <br/>
      When /RAS0 is
      <br/>
      --      driven high to begin precharge of the memory, /M0WAIT/IRQ will respond
      <br/>
      --  with the interrupt
      <br/>
      --      status of the DSP located in bank 0.
      <br/>
      The interrupt status shall be
      <br/>
      --  sampled by the memory
      <br/>
      --      controller at a specific point after the rising edge of /RAS0.
      <br/>
      When
      <br/>
      --  /RAS0 is driven low to begin
      <br/>
      --      memory access, /M0WAIT/IRQ will respond with the wait status of the
      <br/>
      --  memory in bank 0.
      <br/>
      The
      <br/>
      --      wait status shall be sampled by the memory controller starting at a
      <br/>
      --  specific point after the falling
      <br/>
      --      edge of /RAS0. /CAS may then be asserted after /M0WAIT/IRQ is driven
      <br/>
      --  high.
      <br/>
      For compatibility
      <br/>
      --      with MMs that do not drive this signal, it shall be pulled up on the
      <br/>
      --  host PCB or in the host
      <br/>
      --      controller.
      <br/>
      See FIG. 25 for signal timing.
      <br/>
      -- /M1WAIT/IRQ: Memory WAIT flag/Interrupt ReQuest for DIMM bank 1.
      <br/>
      This is a
      <br/>
      --  signal driven by the
      <br/>
      --      MM indicating that this bank of DRAM is busy or wishes to interrupt
      <br/>
      --  the host.
      <br/>
      When /RAS1 is
      <br/>
      --      driven high to begin precharge of the memory, /M1WAIT/IRQ will respond
      <br/>
      --  with the interrupt
      <br/>
      --      status of the DSP located in bank 1.
      <br/>
      The interrupt status shall be
      <br/>
      --  sampled by the memory
    </p>
    <p num="154">
      --      controller at a specific point after the rising edge of /RAS1.
      <br/>
      When
      <br/>
      --  /RAS1 is driven low to begin
      <br/>
      --      memory access, /M1WAIT/IRQ will respond with the wait status of the
      <br/>
      --  memory in bank 1.
      <br/>
      The
      <br/>
      --      wait status shall be sampled by the memory controller starting at a
      <br/>
      --  specific point after the falling
      <br/>
      --      edge of /RAS1. /CAS may then be asserted after /M1WAIT/IRQ is driven
      <br/>
      --  high.
      <br/>
      For compatibility
      <br/>
      --      with MMs that do not drive this signal, it shall be pulled up on the
      <br/>
      --  host PCB or in the host
      <br/>
      --      controller.
      <br/>
      See FIG. 25 for signal timing.
    </p>
    <heading>-- TABLE XIII</heading>
    <p num="155">
      -- Signal List and Description (DDR-S/SDRAM)
      <br/>
      -- /M0WAIT/IRQ: Memory WAIT flag/Interrupt ReQuest for DIMM bank 0 This is a
      <br/>
      --  signal driven by the
      <br/>
      --      MM indicating that this bank of SDRAM is busy or wishes to interrupt
      <br/>
      --  the host.
      <br/>
      This signal is
      <br/>
      --      synchronous with the memory bus clock.
      <br/>
      If /S0 is low, then the
      <br/>
      --  /M0WAIT/IRQ signal will convey
      <br/>
      --      the wait status in the next cycle.
      <br/>
      If /S0 is high, then the
      <br/>
      --  /M0WAIT/IRQ signal will convey the
      <br/>
      --      interrupt status in the next cycle.
      <br/>
      This bank of SDRAM may only become
      <br/>
      --  busy when it is eligible
      <br/>
      --      for DSP access.
      <br/>
      A falling edge on the /S0 input will always end the
      <br/>
      --  period of eligibility, requesting
      <br/>
      --      host access of the memory.
      <br/>
      If /M0WAIT/IRQ is sampled as low after /S0
      <br/>
      --  goes low, then
      <br/>
      --      /M0WAIT/IRQ will be driven high shortly after this point, indicating
      <br/>
      --  that the MM has relinquished
      <br/>
      --      the shared memory back to the controller.
      <br/>
      At this point, the
      <br/>
      --  controller may continue (or begin) a
      <br/>
      --      memory cycle with no further delay.
      <br/>
      See the "eligibility" section and
      <br/>
      --  FIGS. 26-28. For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
      <br/>
      -- /M1WAIT/IRQ: Memory WAIT flag/Interrupt ReQuest for DIMM bank 1.
      <br/>
      This is a
      <br/>
      --  signal driven by the
      <br/>
      --      MM indicating that this bank of SDRAM is busy or wishes to interrupt
      <br/>
      --  the host.
      <br/>
      This signal is
      <br/>
      --      synchronous with the memory bus clock, If /S1 is low, then the
      <br/>
      --  /M1WAIT/IRQ signal will convey
      <br/>
      --      the wait status in the next cycle.
      <br/>
      If /S1 is high, then the
      <br/>
      --  /M1WAIT/IRQ signal will convey the
      <br/>
      --      interrupt status in the next cycle.
      <br/>
      This bank of SDRAM may only become
      <br/>
      --  busy when it is eligible
      <br/>
      --      for DSP access.
      <br/>
      A falling edge on the /S1 input will always end the
      <br/>
      --  period of eligibility, requesting
      <br/>
      --      host access of the memory.
      <br/>
      If /M1WAIT/IRQ is sampled as low after /S1
      <br/>
      --  goes low, then
      <br/>
      --      /M1WAIT/IRQ will be driven high shortly after this point, indicating
      <br/>
      --  that the MM has relinquished
      <br/>
      --      the shared memory back to the controller.
      <br/>
      At this point, the
      <br/>
      --  controller may continue (or begin) a
      <br/>
      --      memory cycle with no further delay.
      <br/>
      See the "eligibility" section and
      <br/>
      --  FIGS. 26-28. For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
    </p>
    <p num="156">Memory Eligibility for DSP Access (DDR-S/SDRAM Only)</p>
    <p num="157">
      Unlike conventional DRAMs, synchronous DRAMS have 2 or 4 internal banks.
      <br/>
      Because of this feature, the memory controller has the ability to open 2 or 4 pages at a time and instantly switch between them for read and write access.
      <br/>
      This feature makes the eligibility of DSP access to the memory slightly more complicated than with conventional DRAMs.
      <br/>
      A set of rules for eligibility must be defined.
    </p>
    <p num="158">
      Option 1: The shared SDRAM is only eligible for DSP access when all pages are known to be closed (after a PALL command).
      <br/>
      This will ensure that there are no page conflicts between the host and the DSP.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      The ACTV command can then be asserted in the cycle following the cycle where /MnWAIT/IRQ is sampled as high.
      <br/>
      This option would work most efficiently if the host controller closed all pages at the end of every memory access.
      <br/>
      This option treats the SDRAM much like a (single bank) standard DRAM.
      <br/>
      See FIG. 26.
    </p>
    <p num="159">
      Option 2: The memory is eligible for DSP access on a bank-by-bank basis after the host controller executes a READA, WRITEA, or PRE command for the specific bank that the DSP wishes to access.
      <br/>
      This approach is slightly less straightforward and would require the DSP to monitor the bank that the host controller is currently accessing.
      <br/>
      Also, the DSP may not gain access to the memory directly after one of these three commands, for the host controller may choose to immediately execute a WRITE or READ command on a different internal bank.
      <br/>
      When the desired bank is known to be precharged, the memory is eligible for DSP access after a burst read or write is complete, and the /Sn input is high, or after a pre-defined number of clock cycles without memory activity.
      <br/>
      Because other pages may still be open, however, it is possible that the host controller may incur several waits during a same page access.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      The ACTV, WRITE or READ commands can then be asserted in the cycle following the cycle where /MnWAIT/IRQ is sampled as high.
      <br/>
      See FIG. 27.
    </p>
    <p num="160">
      Option 3: The memory is eligible for DSP access at any time.
      <br/>
      This option would allow the DSP to break pages, accessing the memory whenever the host controller is not currently busy with a memory transaction.
      <br/>
      The memory will be eligible for DSP access after any burst read or write is complete, and the /Sn input is high, or after a pre-defined number of clock cycles without memory activity.
      <br/>
      The DSP, after gaining access to the memory would be responsible for issuing a precharge for all banks that it wishes to access via a PALL or one or more PRE command(s).
      <br/>
      After precharging is complete, the DSP may issue an ACTV command for its desired row.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      If /MnWAIT/IRQ is sampled to be low, then the controller must re-open the page with a new ACTV command.
      <br/>
      See FIG. 28.
    </p>
    <p num="161">
      At the end of a non-interrupted DSP access, the DSP has two options:
      <br/>
      - a) The DSP precharges its accessed banks and re-opens the distrusted pages (via an ACTV command).
      <br/>
      The next time that /Sn is driven low, /MnWAIT/IRQ will respond as high. (This of course would require the DSP to register the last host controller page address.)
      <br/>
      - b) The DSP precharges its accessed banks.
      <br/>
      The next time that /Sn is driven low, /MnWAIT/IRQ will respond as low, indicating to the controller that any desired page(s) must be re-opened via an ACTV command.
    </p>
    <p num="162">Memory Controller Setup Registers</p>
    <p num="163">
      It may be helpful to add n register bits to the memory controller to pre-define which of n banks will drive the /MnWAIT/IRQ signal.
      <br/>
      Access to memory banks that do not drive the /MnWAIT/IRQ signal need not suffer the possible controller latency associated with sampling the /MnWAIT/IRQ signal for each memory access.
    </p>
    <p num="164">Implementation of IREQ and Wait Signals Option 4: No Wait Signal(s), One Interrupt Signal for Each Bank</p>
    <p num="165">Impact to DIMM</p>
    <p num="166">This option shall add 2 signals to each DIMM module 98, /MIRQ0 signal 103 and /MIRQ1 signal 104.</p>
    <p num="167">See the block diagram in FIG. 29.</p>
    <p num="168">Impact to Memory Controller</p>
    <p num="169">
      The memory controller shall have one /MIRQn signal (103 or 104) added for each of n banks.
      <br/>
      The implementation of the wait function is described in the section 2.4.6 below.
      <br/>
      Thus n extra pins are needed where n is the total number of memory banks.
    </p>
    <p num="170">The memory controller shall include the necessary logic to comprehend the added signals above.</p>
    <p num="171">The memory controller shall include the appropriate setup registers and logic to implement the WAIT function.</p>
    <p num="172">See the block diagram in FIG. 29.</p>
    <p num="173">Signal List and Description</p>
    <heading>-- TABLE XIV</heading>
    <p num="174">
      -- Signal List and Description
      <br/>
      -- /MIRQ0: Memory Interrupt ReQuest for DIMM bank 0.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
      <br/>
      -- /MIRQ1: Memory Interrupt ReQuest for DIMM bank 1.
      <br/>
      This is a signal
      <br/>
      --  indicating that this bank is
      <br/>
      --      requesting an interrupt of the host.
      <br/>
      A falling edge on this signal
      <br/>
      --  indicates an interrupt request.
      <br/>
      For
      <br/>
      --      compatibility with MMs that do not drive this signal, it shall be
      <br/>
      --  pulled up on the host PCB or in the
      <br/>
      --      host controller.
    </p>
    <p num="175">Memory Eligibility for DSP Access (DDR-S/SDRAM Only)</p>
    <p num="176">
      Unlike conventional DRAMs, synchronous DRAMS have 2 or 4 internal banks.
      <br/>
      Because of this feature, the memory controller has the ability to open 2 or 4 pages at a time and instantly switch between them for read and write access.
      <br/>
      This feature makes the eligibility of DSP access to the memory slightly more complicated than with conventional DRAMs.
      <br/>
      A set of rules for eligibility must be defined.
    </p>
    <p num="177">
      For this option, the shared SDRAM shall only be eligible for DSP access when all pages are known to be closed (after a PALL command).
      <br/>
      This greatly simplifies the memory controller design, making it easy for the controller to determine where the region of eligibility begins.
      <br/>
      This will ensure that there are no page conflicts between the host and the DSP.
      <br/>
      This option would work most efficiently if the host controller closed all pages at the end of every memory access.
      <br/>
      This option treats the SDRAM much like a (single bank) standard DRAM.
    </p>
    <p num="178">Memory Controller Setup Registers</p>
    <p num="179">
      When the MM is placed in "smart mode", a RAS-to-CAS delay of memory access is necessary because the (S)DRAM in the selected bank will be shared.
      <br/>
      In the case of FPM or EDO DRAM, RAS-to-CAS delay refers to the time from the falling edge of RAS to the falling edge of /CAS.
      <br/>
      When using SDRAM, RAS-to-CAS delay refers to the number of memory clock cycles between a ROW ACTIVE and READ or WRITE command.
      <br/>
      All other timing after the first falling edge of /CAS may proceed as normal.
    </p>
    <p num="180">
      In order to implement this delay (or wait) function, it is necessary to add n registers to the memory controller to pre-define the RAS-to-CAS wait time for each of n banks.
      <br/>
      Many controllers have this feature today, but only on a global (not bank-by-bank) basis.
      <br/>
      The controller must also be capable of extending the RAS-to-CAS delay to a value greater than the time required for the MM to release the shared memory back to the controller.
      <br/>
      Generally, this time shall be no less than tRC (read or write cycle time) for the particular DRAM used on the MM.
      <br/>
      Since in this option, there is no feedback from the MM to indicate when the memory is available, the RAS-to-CAS delay time must be set to a "safe" value greater than tRC +tMM-- BUS-- SWITCH, or the total time required to completely guarantee that the shared memory may be accessed by the memory controller.
    </p>
    <p num="181">
      Access to memory banks that are not pre-defined to need extended cycles shall be set at power-up to operate normally.
      <br/>
      Accesses to registers corresponding to banks with DSPs shall be done dynamically, not just at power-up.
      <br/>
      This will allow the wait length time to be changed "on the fly" when the MM is placed into and out of smart mode.
    </p>
    <p num="182">When the MM is not in the "Smart Mode," the selected bank of the MM shall operate normally, as standard DRAM.</p>
    <p num="183">Implementation of IREQ and Wait Signals Option 5: One Multiplexed &amp; Vectorized Wait/Interrupt Signal for Each Module (DDR-S/SDRAM Only)</p>
    <p num="184">Impact to DIMM</p>
    <p num="185">This option shall add 1 signal to each DIMM module 98, /MWAIT/IRQ signal 109.</p>
    <p num="186">See the block diagram in FIG. 30.</p>
    <p num="187">Impact to Memory Controller</p>
    <p num="188">
      The memory controller shall have one MWAIT/IRQ signal 109 added for each MM (containing 2 banks).
      <br/>
      Thus n/2 extra pins are needed where n is the total number of memory banks.
    </p>
    <p num="189">The memory controller shall include necessary logic to comprehend the added signals above.</p>
    <p num="190">The memory controller shall include setup registers (if needed).</p>
    <p num="191">See the block diagram in FIG. 30.</p>
    <p num="192">Signal List and Description</p>
    <heading>-- TABLE XV</heading>
    <p num="193">
      -- Signal List and Description
      <br/>
      -- /MWAIT/IRQ: Memory WAIT flag/Interrupt ReQuest for a particular DIMM.
      <br/>
      This
      <br/>
      --  is a signal driven by
      <br/>
      --      the MM indicating that the currently accessed bank of SDRAM is busy or
      <br/>
      --  that a specific DSP
      <br/>
      --      wishes to interrupt the host.
      <br/>
      This signal is synchronous with the
      <br/>
      --  memory bus clock.
      <br/>
      If an /Sn input
      <br/>
      --      is low, then the /MWAIT/IRQ signal will convey the wait status of bank
      <br/>
      --  "n" in the next cycle.
      <br/>
      If
      <br/>
      --      all /Sn inputs are driven high, then the /MWAIT/IRQ signal will begin
      <br/>
      --  to transmit the interrupt
      <br/>
      --      status vector starting in the next cycle.
      <br/>
      A bank of SDRAM may only
      <br/>
      --  become busy when it is
      <br/>
      --      eligible for DSP access.
      <br/>
      A falling edge on an /Sn input will always
      <br/>
      --  end the period of eligibility,
      <br/>
      --      abort the transmission of the interrupt status vector (if one is in
      <br/>
      --  progress), and request host access
      <br/>
      --      of the memory.
      <br/>
      If /MWAIT/IRQ is sampled as low after /Sn goes low,
      <br/>
      --  then /MWAIT/IRQ will be
      <br/>
      --      driven high shortly after this point, indicating that the MM has
      <br/>
      --  relinquished bank "n" of the shared
      <br/>
      --      memory back to the controller.
      <br/>
      At this point, the controller may
      <br/>
      --  continue (or begin) a memory
      <br/>
      --      cycle with no further delay.
      <br/>
      See the "eligibility" section and FIGS
      <br/>
      --  31-33.
      <br/>
      For compatibility with
      <br/>
      --      MMs that do not drive this signal, it shall be pulled up on the host
      <br/>
      --  PCB or in the host controller.
    </p>
    <p num="194">
      Unlike conventional DRAMs, synchronous DRAMS have 2 or 4 internal banks.
      <br/>
      Because of this feature, the memory controller has the ability to open 2 or 4 pages at a time and instantly switch between them for read and write access.
      <br/>
      This feature makes the eligibility of DSP access to the memory slightly more complicated than with conventional DRAMs.
      <br/>
      A set of rules for eligibility must be defined.
    </p>
    <p num="195">
      Option 1: The shared SDRAM is only eligible for DSP access when all pages are known to be closed (after a PALL command).
      <br/>
      This will ensure that there are no page conflicts between the host and the DSP.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      The ACTV command can then be asserted in the cycle following the cycle where /MWAIT/IRQ is sampled as high.
      <br/>
      This option would work most efficiently if the host controller closed all pages at the end of every memory access.
      <br/>
      This option treats the SDRAM much like a (single bank) standard DRAM.
      <br/>
      See FIG. 31.
    </p>
    <p num="196">
      Option 2: The memory is eligible for DSP access on a bank-by-bank basis after the host controller executes a READA, WRITEA, or PRE command for the specific bank that the DSP wishes to access.
      <br/>
      This approach is slightly less straightforward and would require the DSP to monitor the bank that the host controller is currently accessing.
      <br/>
      Also, the DSP may not gain access to the memory directly after one of these three commands, for the host controller may choose to immediately execute a WRITE or READ command on a different internal bank.
      <br/>
      When the desired bank is known to be precharged, the memory is eligible for DSP access after a burst read or write is complete, and the /Sn input is high, or after a pre-defined number of clock cycles without memory activity.
      <br/>
      Because other pages may still be open, however, it is possible that the host controller may incur several waits during a same page access.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      The ACTV, WRITE or READ commands can then be asserted in the cycle following the cycle where /MWAIT/IRQ is sampled as high.
      <br/>
      See FIG. 32.
    </p>
    <p num="197">
      Option 3: The memory is eligible for DSP access at any time.
      <br/>
      This option would allow the DSP to break pages, accessing the memory whenever the host controller is not currently busy with a memory transaction.
      <br/>
      The memory will be eligible for DSP access after any burst read or write is complete, and the /Sn input is high, or after a pre-defined number of clock cycles without memory activity.
      <br/>
      The DSP, after gaining access to the memory would be responsible for issuing a precharge for all banks that it wishes to access via a PALL or one or more PRE command(s).
      <br/>
      After precharging is complete, the DSP may issue an ACTV command for its desired row.
      <br/>
      After the point of memory eligibility, the host controller must drive /Sn low and monitor the wait signal before issuing any new commands.
      <br/>
      If /MWAIT/IRQ is sampled to be low, then the controller must re-open the page with a new ACTV command.
      <br/>
      See FIG. 33.
    </p>
    <p num="198">
      At the end of a non-interrupted DSP access, the DSP has two options:
      <br/>
      - a) The DSP precharges its accessed banks and re-opens the distrusted pages (via an ACTV command).
      <br/>
      The next time that /Sn is driven low, /MWAIT/IRQ will respond as high. (This of course would require the DSP to register the last host controller page address.)
      <br/>
      - b) The DSP precharges its accessed banks.
      <br/>
      The next time that /Sn is driven low, /MWAIT will respond as low, indicating to the controller that any desired page(s) must be re-opened via an ACTV command.
    </p>
    <p num="199">Memory Controller Setup Registers</p>
    <p num="200">
      It may be helpful to add n register bits to the memory controller to pre-define which of n banks will drive the /MWAIT/IRQ signal.
      <br/>
      Access to memory banks that do not drive the /MWAIT/IRQ signal need not suffer the possible controller latency associated with sampling the /MWAIT/IRQ signal for each memory access.
    </p>
    <p num="201">Implementation of IREQ and Wait Signals Option 6: No New Signal(s), No Interrupt Lines, 1 Semaphore Bit</p>
    <p num="202">Impact to DIMM</p>
    <p num="203">None.</p>
    <p num="204">Impact to Memory Controller</p>
    <p num="205">The memory controller shall include the necessary logic to implement the wait function by accessing the semaphore bit memory location before accessing any of the shared memory.</p>
    <p num="206">The memory controller shall include setup registers to pre-define which bank(s) shall be populated with shared memory.</p>
    <p num="207">Signal List and Description</p>
    <p num="208">No extra signals are required.</p>
    <p num="209">Block Diagram</p>
    <p num="210">DIMM and Memory Controller pinouts remain the same.</p>
    <p num="211">Memory Controller Setup Registers</p>
    <p num="212">In order to implement the wait function, it is necessary to add n bits of registers to the memory controller to pre-define which banks shall contain shared memory.</p>
    <p num="213">Implementation of IREQ and Wait Signals Miscellaneous Topics</p>
    <p num="214">
      SSTL vs.
      <br/>
      TTL
    </p>
    <p num="215">Since all wait and interrupt signals proposed above use only the rising edge of the system memory clock (DDR-S/SDRAM case), they shall be implemented with standard TTL or LVTTL.</p>
    <p num="216">Refresh Handling</p>
    <p num="217">
      While in smart mode, refresh can be handled 1 of 2 ways:
      <br/>
      Option 1: When the memory controller requests a CBR (or /RAS only for EDO &amp; FPM DRAMs) refresh, the MM shall detect this command and execute it immediately (if not busy), or "buffer up" the refresh commands and execute them at a later time when the DSP is not accessing the memory.
    </p>
    <p num="218">
      Option 2: When the memory controller requests a refresh, and the DSP is accessing the shared memory, the same wait protocol defined in the options above shall be implemented.
      <br/>
      The controller must wait until the MM relinquishes the memory to complete the refresh operation.
    </p>
    <p num="219">Memory Bus Capacitance/Memory Access Time</p>
    <p num="220">
      With the high speed of today's DRAMs and SDRAMs, and the promise of even higher speed for DDR-SDRAMS for tomorrow, bus loading must be considered very carefully in MM design.
      <br/>
      The memory access time, tac, is also a very important parameter which cannot be violated.
    </p>
    <p num="221">
      For bus isolation on the Basava Memory Module, bus switches (crossbars) shall be used.
      <br/>
      This allows switchable connection to the PC's memory bus while only introducing a maximum of 0.25 ns propagation delay.
      <br/>
      Switches of this type add anywhere from 4 to 8 pF of capacitance to the lines that they are connected to, so it will be important that the design of the MM is properly within specification for the driving logic.
    </p>
    <p num="222">Module-to-Module Communication</p>
    <p num="223">
      If multiple MMs containing DSPs are placed in one system, it may be advantageous that the DSPs be able to communicate with one another.
      <br/>
      It is not necessary that motherboard connection pins be allocated on the DIMM module for this purpose, for a separate connector may be defined for this purpose.
    </p>
    <p num="224">
      The interface bus shall consist of 2 or 3 wires.
      <br/>
      A protocol shall be defined that allows all DSPs to communicate with one another without having to define a master/slave relationship.
      <br/>
      Actual details on this concept will soon be defined.
      <br/>
      FIG. 34 shows this concept.
    </p>
    <p num="225">Implementation of IREQ and Wait Signals Conclusion</p>
    <p num="226">The following table summarizes the five options above.</p>
    <heading>-- TABLE XVI</heading>
    <p num="227">
      -- Implementation Option Comparison
      <br/>
      --             Option 1       Option 2       Option 3       Option 4
      <br/>
      --  Option 5       Option 6
      <br/>
      -- Interrupt   1 SIGNAL PER   1 SIGNAL PER   1 SIGNAL PER   1 SIGNAL PER   1
      <br/>
      --  SIGNAL PER   NONE
      <br/>
      -- Function    BANK           BANK           BANK           BANK
      <br/>
      --  MODULE
      <br/>
      -- Wait        1 SIGNAL PER   1 GLOBAL       MULTIPLEXED    CONTROLLER
      <br/>
      --  MULTIPLEX'D SEMAPHORE
      <br/>
      -- Function    BANK           SIGNAL         WAIT &amp; INT REGISTERS
      <br/>
      --  VECTORIZED     BIT
      <br/>
      -- New pins    4              3              2              2              1
      <br/>
      --             --
      <br/>
      -- required on
      <br/>
      -- DIMM
      <br/>
      -- New pins    2n             1 + n     n              n              n/2
      <br/>
      --        --
      <br/>
      -- required on
      <br/>
      -- Controller
      <br/>
      -- Comment     High pin count Most versatile Somewhat       Easy
      <br/>
      --  Super-low pin  No extra pins
      <br/>
      --                                           complicated    implementation,
      <br/>
      --  count, but     required.
      <br/>
      --                                           protocol       but only 1
      <br/>
      --  supports       Poor
      <br/>
      --                                                          SDRAM
      <br/>
      --  SDRAM only     performance.
      <br/>
      --                                                          eligibility option
      <br/>
      --  (requires clock
      <br/>
      --                                                                         for
      <br/>
      --  vector)
      <br/>
      -- Editor's 2              1              3              5              4
      <br/>
      --          6
      <br/>
      -- Preference
      <br/>
      -- n = total number of memory banks.
      <br/>
      Memory Modules are assumed to have 2
      <br/>
      --  banks.
    </p>
    <p num="228">Although Option 1 is by far the easiest for the MM design, it carries a high DIMM and Memory Controller pinout.</p>
    <p num="229">Option 2 is the best trade-off between versatility and pins, allowing full feedback from the MM for the wait function, while only using 1+n controller pins.</p>
    <p num="230">
      Option 3 cuts the DIMM pin and controller pin by one, but requires a complicated protocol.
      <br/>
      Option 4 is far easier to implement and boasts the same low pinout as Option 3.
    </p>
    <p num="231">Option 4, however limits the DSP's accessibility to SDRAM.</p>
    <p num="232">
      Option 5 shall be used if pins on the MM are in short supply.
      <br/>
      Option 5 supports SDRAM or DDR-SDRAM operation only.
    </p>
    <p num="233">Option 6 shall only be used as a last resort if no pins are available for use on the DIMM.</p>
    <p num="234">Implementation Examples</p>
    <p num="235">
      FIG. 12 illustrates the DSP/memory module 40 in a typical computer architecture.
      <br/>
      In addition to the elements shown in FIG. 1, a secondary cache 90, keyboard controller 92 and external AFE (Analog Front End) are shown.
      <br/>
      The analog front end may be used to connect to the CODEC 84 on the DSP/memory module 40 to receive external data, such as voice data or video data.
      <br/>
      Typical memory expansion modules 26 have only one connector for the memory bus 24.
      <br/>
      However, in this case, in order to support direct access to external devices by the DSP 56, an AFE 94 is provided.
      <br/>
      The AFE 94 could connect to connectors on the other side of the substrate 46 (see FIG. 2) to make connection with the DSP and communicate using direct memory access, while maintaining compatibility with standard SIMMs.
      <br/>
      This AFE supports sound, modem, wireless applications.
    </p>
    <p num="236">
      The DSP/memory module 40 can be used in many application to increase the speed of multimedia features and reduce the load on the MPU 12.
      <br/>
      In a first example, modem information could come from a telephone line to the CODEC 84.
      <br/>
      Using the local SRAM 58, the DSP 56 could translate the data and place it in the shared memory 54.
      <br/>
      The MPU 12 would then retrieve the translated data from the shared memory 54.
      <br/>
      This is an example of an application which would otherwise require many instruction cycles of the MPU 12, but can be accomplished with very little MPU interaction using the DSP/memory module 40.
    </p>
    <p num="237">
      In a second example, the MPU 12 could open a file on a DVD (digital versatile disk) which has compressed audio or video.
      <br/>
      The MPU 12 would pass the data directly to the shared memory 54 and instruct the DSP 56 to decompress the data.
      <br/>
      As the data was decompressed, it would be returned to the shared memory, where the MPU 12 would retrieve the decompressed data and pass the data to the frame buffer of the video/graphics card for display.
      <br/>
      This is an example of an application which would require excessive bandwidth if the data had to be passes over the ISA bus 32 or PCI bus 28, but can be accomplished at high speed using the faster memory bus 24 and the DSP/memory module 40.
    </p>
    <p num="238">
      A third example uses the DSP/memory module 40 to perform wavetable synthesis.
      <br/>
      In this example, the shared memory 54 can be used to store the wavetable sounds, which normally require a large memory.
      <br/>
      The DSP 56 can use the wavetable data to perform the synthesis.
      <br/>
      Normally, a separate card would be required, along with its own memory for storing the wavetable data (typically on the order of two to four megabytes).
      <br/>
      Thus, the DSP/memory module 40 saves system costs by using the main memory to perform wavetable synthesis.
    </p>
    <p num="239">
      FIG. 13 illustrates a variation of the computer system of FIG. 12 wherein an AFE card 96 is connected to the PCI bus 28.
      <br/>
      The AFE card 96 would include the CODEC and would provide connections to external analog sources such as a line-in/out, microphone input, telephone line or cellular connection.
      <br/>
      In this implementation, the AFE card 96 can send data directly to the DSP/memory module 40, since the PCI bus has bus mastering capability, whereas the ISA bus does not.
      <br/>
      Similarly, the AFE card 96 could be connected to any bus which has the ability to write directly to the main memory.
    </p>
    <p num="240">
      In addition to providing connections to an external analog source, the AFE card 96 could poll a status register on the DSP/memory module 40 (if polling was necessary to determine whether a task had been completed by the DSP/memory module 40) at fairly high speeds.
      <br/>
      With current day processors, it is estimated that polling should be performed at intervals on the order of 20 milliseconds for optimum performance.
      <br/>
      A card in the PCI bus could poll the DSP/memory module 40 at greater speed, on the order of five milliseconds or less without degradation of performance.
    </p>
    <p num="241">
      The invention provides significant advantages over the prior art.
      <br/>
      Adding a digital signal processor to a computer system to enable enhanced functions is as easy as expanding the memory of a MPU.
      <br/>
      The memory module can use a form factor of the type standardized by organizations like IEEE, JEDEC, and so on, such as a SIMM (single in-line memory module) or DIMM (dual in-line memory module) form factor.
    </p>
    <p num="242">
      Different applications may be downloaded by the MPU to the memory module for local execution.
      <br/>
      The memory module therefore supports multiple functionality, i.e., downloadable, multiple functions under software control of the MPU.
    </p>
    <p num="243">
      The DSP/memory module offers the highest possible bandwidth between the MPU and coprocessor at any given time and technology.
      <br/>
      The DSP/memory module is both bus-independent, and host-independent, for use with PCs (personal computers), PDAs (personal digital assistants), workstations and other computer systems.
    </p>
    <p num="244">The DSP/memory module reduces system cost by sharing system memory over a number of multimedia functions.</p>
    <p num="245">The module provides a framework for easily scaling up the processing power of a computer system; an existing single processor system can be transformed into a scaleable, multiprocessing system simply by adding a memory module.</p>
    <p num="246">
      Users do not have to change their product platforms in order to get/offer new, value-added functions.
      <br/>
      Adding the DSP/memory module and software can allow users to increase the capability of their computers.
    </p>
    <p num="247">
      While the DSP/memory module 40 has been shown with a single DSP on each module, multiple DSPs could be provided.
      <br/>
      Additionally, a DSP/memory module 40 could be used in each memory bank 50 to provide multiple DSPs 54 under control of the MPU 12.
    </p>
    <p num="248">
      Although the Detailed Description of the invention has been directed to certain exemplary embodiments, various modifications of these embodiments, as well as alternative embodiments, will be suggested to those skilled in the art.
      <br/>
      The invention encompasses any modifications or alternative embodiments that fall within the scope of the claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A computer system comprising:</claim-text>
      <claim-text>system processing circuitry; a processor/memory module coupled to said system processing circuitry comprising:</claim-text>
      <claim-text>- semiconductor memory; - a processor coupled to said semiconductor memory;</claim-text>
      <claim-text>and - control circuitry for providing communications between said system processing circuitry and said processor such that said system processing circuitry can access said semiconductor memory as main memory and can instruct said processor to transform data and store transformed data in said semiconductor memory for access by said system processing circuitry, said system processing circuitry determines whether a processor/memory module is installed in the system by successively writing signature data to a memory location for a predetermined number of times and reading the data stored in the location to see if it matches an expected response.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The computer system of claim 1 wherein said processor comprises a programmable general purpose processor.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The computer system of claim 1 wherein said processor comprises a digital signal processor.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The computer system of claim 1 wherein said processor/memory module further includes local memory coupled to said processor for storing data and instructions.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The computer system of claim 1 wherein said expected response is the complement of the signature data.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The computer system of claim 1 wherein said memory location is a current location and further comprising the step of reading a next location in memory if the data read from said current location does not match said expected response.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The computer system of claim 6 wherein said step of reading from said next location is repeated until there are no more locations to be read or said expected response is read.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The computer system of claim 1 wherein said processor/memory module has an associated address range for communicating with the system processing circuitry.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The computer system of claim 8 wherein said system processing circuitry can change said associated address range to a desired address range.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A computer comprising: system processing circuitry; a memory bus;</claim-text>
      <claim-text>and a processor/memory module coupled to said processing circuitry via said memory bus comprising: - semiconductor memory; - one or more processors coupled to said semiconductor memory;</claim-text>
      <claim-text>and - control circuitry for providing communications between said system processing circuitry and said processor such that said system processing circuitry can access said semiconductor memory as main memory and can instruct said processor to transform data and store transformed data in said semiconductor memory for access by said system processing circuitry, said system processing circuitry determines whether a processor/memory module is installed in the system by successively writing signature data to a memory location for a predetermined number of times and reading the data stored in the location to see if it matches an expected response.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The computer system of claim 10 wherein said processor comprises a programmable general purpose processor.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The computer system of claim 10 wherein said processor comprises a digital signal processor.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The computer system of claim 10 wherein said processor/memory module further includes local memory coupled to said processor for storing data and instructions.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The computer system of claim 10 wherein said expected response is the complement of the signature data.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The computer system of claim 10 wherein said memory location is a current location and further comprising the step of reading a next location in memory if the data read from said current location does not match said expected response.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The computer system of claim 15 wherein said step of reading from said next location is repeated until there are no more locations to be read or said expected response is read.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The computer system of claim 10 wherein said processor/memory module has an associated address range for communicating with the system processing circuitry.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The computer system of claim 17 wherein said system processing circuitry can change said associated address range to a desired address range.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The computer system of claim 10 wherein said processor memory module further comprises circuitry for processing analog signals.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The computer system of claim 10 wherein said circuitry for processing analog signals comprises a CODEC.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The computer system of claim 20 and further comprising and analog front end for receiving said external analog signals and transmitting said external analog signals to said circuitry for processing analog signals.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The computer system of claim 10 wherein said computer system further comprises: a bus coupled to said system processing circuitry and having a connection to said memory bus which bypasses said system processing circuitry;</claim-text>
      <claim-text>and analog signal processing circuitry coupled said bus.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The computer system of claim 22 wherein said analog processing circuitry includes circuitry for polling said processor/memory module via said memory bus to determine when a task has been completed.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The computer system of claim 10 wherein said control circuitry further comprises a switch for switching access to said semiconductor memory from said one or more processors and said system processing circuitry.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The computer system of claim 10 wherein said semiconductor memory includes single ported memory and dual ported memory.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The computer system of claim 10 wherein said control circuitry includes circuitry for generating a signal to said system processing circuitry upon completion of a task by said one or more processors.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The computer system of claim 10 wherein said control circuitry further includes circuitry for generating a wait signal to said system processing circuitry when said one or more processors are accessing said semiconductor memory.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The computer system of claim 10 wherein said processor/memory module is formed on a SIMM.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The computer system of claim 10 wherein said processor/memory module is formed on a DIMM.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. A method of processing data in a computer system, comprising the steps of: processing a first set of instructions using system processing circuitry; processing a second set of instructions using one or more processors coupled to said system processing circuitry via a memory bus;</claim-text>
      <claim-text>and sharing semiconductor memory on said memory bus between said processing circuitry and said processor; and determining whether a processor is coupled to the memory bus by successively writing signature data to a memory location for a predetermined number of times and reading the data stored in the location to see if it matches an expected response.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. The method of claim 30 wherein said step of processing said second set of instructions comprises the step of processing said second set of instruction using one or more programmable general purpose processors.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The method of claim 30 wherein said step of processing said second set of instructions comprises the step of processing said second set of instruction using one or more programmable digital signal processors.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The method of claim 30 wherein said step of processing said second step of instructions includes the step of storing instructions in a local memory coupled to said one or more processors.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The method of claim 30 wherein said step of processing said second step of instructions includes the step of storing data in a local memory coupled to said one or more processors.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. The method of claim 30 and further comprising the step of selectably assigning an address range for said processor.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. The method of claim 30 and further comprising the step of processing analog signals with an analog signal processor coupled to said one or more processors.</claim-text>
    </claim>
    <claim num="37">
      <claim-text>37. The method of claim 30 and further comprising the step of processing analog signals with an analog signal processor coupled to a peripheral bus which may communicate with the memory bus without intervention of said system processing circuitry.</claim-text>
    </claim>
    <claim num="38">
      <claim-text>38. The method of claim 37 and further comprising the step of polling said one or more processors with said analog signal processor to determine whether a task has been completed.</claim-text>
    </claim>
    <claim num="39">
      <claim-text>39. The method of claim 30 wherein said system processing circuitry polls said one or more processors to determine whether a task has been completed.</claim-text>
    </claim>
    <claim num="40">
      <claim-text>40. The method of claim 30 wherein said one or more processors signal said system processing circuitry when a task is complete.</claim-text>
    </claim>
    <claim num="41">
      <claim-text>41. The method of claim 30 and further comprising the step of switching access to said semiconductor memory between said system processing circuitry and said one or more processors.</claim-text>
    </claim>
    <claim num="42">
      <claim-text>42. The method of claim 30 and further comprising the step of signaling said system processing circuitry when said one or more of said digital signal processors are accessing said semiconductor memory.</claim-text>
    </claim>
  </claims>
</questel-patent-document>