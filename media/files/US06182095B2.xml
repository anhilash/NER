<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182095B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182095</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182095</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22094360" extended-family-id="42108890">
      <document-id>
        <country>US</country>
        <doc-number>09070286</doc-number>
        <kind>A</kind>
        <date>19980430</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09070286</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165473</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>7028698</doc-number>
        <kind>A</kind>
        <date>19980430</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09070286</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/24        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>24</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>715236000</text>
        <class>715</class>
        <subclass>236000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>706046000</text>
        <class>706</class>
        <subclass>046000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>715277000</text>
        <class>715</class>
        <subclass>277000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-017/24F</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>017</main-group>
        <subgroup>24F</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/243</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>243</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>24</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>28</number-of-drawing-sheets>
      <number-of-figures>30</number-of-figures>
      <image-key data-format="questel">US6182095</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Document generator</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HERNANDEZ IRENE H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4663615</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4663615</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>LUCHS CHARLES M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4831526</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4831526</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>HERNANDEZ IRENE H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4962475</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4962475</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>TAKADACHI MASATO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5144555</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5144555</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>BUCHANAN KEN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5267155</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5267155</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>GRUBB DON R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5272623</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5272623</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>TUNG KENNY S C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5511193</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5511193</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>REDPATH RICHARD J</text>
          <document-id>
            <country>US</country>
            <doc-number>5630126</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5630126</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>KOPPOLU SRINIVASA R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5634019</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5634019</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>DODGE DANIEL R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5655130</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5655130</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>REDPATH RICHARD</text>
          <document-id>
            <country>US</country>
            <doc-number>5659676</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5659676</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>CURBOW DAVID, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5669005</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5669005</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>TANAKA TSUYOSHI</text>
          <document-id>
            <country>US</country>
            <doc-number>5671429</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5671429</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>SHIRLEY ROBERT BRYCE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5692206</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5692206</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>PAVLEY JOHN FRANKLIN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5740455</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5740455</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="16">
          <text>BARR THOMAS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5742816</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5742816</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="17">
          <text>WICAL KELLY</text>
          <document-id>
            <country>US</country>
            <doc-number>5953718</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5953718</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>"Frame readies pair of new tools for SGML structured documents: FrameBuilder due for Mac next year", MacWeek, v6, n35, p6(1), Oct. 1992.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Mark Brown, Special Edition Using Netscape 3.0, Macmillan Computer Publishing, Ch. 26, ISBN: 07897090ax, Oct. 1992.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>General Electric Capital Corporation</orgname>
            <address>
              <address-1>Stamford, CT, US</address-1>
              <city>Stamford</city>
              <state>CT</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>GENERAL ELECTRIC CAPITAL</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Leymaster, Mark</name>
            <address>
              <address-1>Silver Spring, MD, US</address-1>
              <city>Silver Spring</city>
              <state>MD</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Abbott, Preston</name>
            <address>
              <address-1>Guilford, CT, US</address-1>
              <city>Guilford</city>
              <state>CT</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Steward, William C.</name>
            <address>
              <address-1>Stamford, CT, US</address-1>
              <city>Stamford</city>
              <state>CT</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Patsch, Glenn</name>
            <address>
              <address-1>Cleveland, OH, US</address-1>
              <city>Cleveland</city>
              <state>OH</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Spaulding, Robert</name>
            <address>
              <address-1>Palatine, IL, US</address-1>
              <city>Palatine</city>
              <state>IL</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Clifford Chance Rogers &amp; Wells LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Feild, Joseph H.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      The invention features computer-based methods and apparatuses to automate document generation.
      <br/>
      The methods include user interaction to identify a collection of available modifiable text segments and user interaction to identify customization data.
      <br/>
      The identified text segments are used to form the package of interrelated documents and the customization data can be used to complete the identified text segments.
      <br/>
      The customized package of interrelated documents is automatically assembling based on the identified collection and customization data.
      <br/>
      The method may also include identifying a collection of information element questions that will be used to request information element data from a user.
      <br/>
      Interacting with a user to identify associations being between the collection of information element questions and a collection of available modifiable text segments.
      <br/>
      Interacting with a user to identifying a collection of document structure questions that will be used to request document structure data from a user, and identifying associations between the collection of document structure questions and ones of the collection of available modifiable text segments.
      <br/>
      The invention also features a computer-based apparatus for generating documentation.
      <br/>
      The apparatus includes means for identifying a collection of available modifiable text segments.
      <br/>
      The identified text segments can be used to form a package of customized interrelated documents.
      <br/>
      The apparatus also includes means for identifying customization data needed to complete the modifiable text segments, and means for automatically assembling the customized package of interrelated documents based on the identified collection and customization data.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND INFORMATION</heading>
    <p num="1">This invention relates to computer-based systems for document generation.</p>
    <p num="2">
      Computer software applications are commonly used for text editing and document production.
      <br/>
      One category of applications, represented by word processing and text editing software, assists a user with the input and editing of text-based documentation.
      <br/>
      Typically, word processing applications provide a blank entry form in which document text is entered and edited.
      <br/>
      Alternatively, word processing applications allow previously completed documents or document templates to be retrieved and re-edited to form new documents.
    </p>
    <p num="3">
      Word processing applications are commonly used to edit and produce documentation required in business transactions.
      <br/>
      Complex business deals, such as commercial financing and real estate transactions, can require hundreds of pages of documentation specifying rights and obligations of parties to the transaction.
      <br/>
      The expertise needed to determining the terms of such transactions and to correctly generate and edit the complex documentation accompanying such transactions can require a significant commitment of personnel, time, and cost.
      <br/>
      Consequently, an automated document production is desirable to reduce costs, delays, and personnel involvement in the document production process.
    </p>
    <heading>SUMMARY</heading>
    <p num="4">
      The present invention includes a document generation system that can collect information describing a transaction and assist in the generation of transaction-specific documentation.
      <br/>
      The invention can be used to generate documentation that reflects terms of a negotiated transaction.
      <br/>
      For example, a loan agent can interact with a loan applicant to negotiate terms of a loan.
      <br/>
      Information describing the loan terms and the nature of the negotiated deal can be provided to the document generation system.
      <br/>
      The loan agent may also indicate which standard documents and which clauses within those documents are required for the transaction.
      <br/>
      A collection of documents may then be generated by the generation system.
      <br/>
      Further editing of the produced documentation may be performed using conventional word processing and text editing tools.
    </p>
    <p num="5">
      In general, in one aspect, the invention features a computer-based method of producing a customized package of interrelated documents.
      <br/>
      The method includes user interaction to identify a collection of available modifiable text segments and user interaction to identify customization data.
      <br/>
      The identified text segments are used to form the package of interrelated documents and the customization data can be used to complete the identified text segments.
      <br/>
      The customized package of interrelated documents is automatically assembling based on the identified collection and customization data.
    </p>
    <p num="6">
      Implementations of the invention may include one or more of the following features.
      <br/>
      A knowledge base can be used to automatically assemble the documents.
      <br/>
      The knowledge base can include data associating the modifiable text segments with document structure questions, and data interrelating document structure questions.
      <br/>
      Identifying the collection of available modifiable text segments can include presenting document structure questions in accordance with the knowledge base, receiving data from a user in response to the presented questions and including as members of the collection the text segments that are associated with the received data.
      <br/>
      The knowledge base may include data associating the available modifiable text segments with information element questions.
      <br/>
      Identifying customization data may include presenting information element questions in accordance with the knowledge base and receiving customization data from the user.
    </p>
    <p num="7">
      In general, in another aspect, the invention features a computer-based method of producing a customized package of interrelated documents.
      <br/>
      The method includes the following.
      <br/>
      Identifying a collection of information element questions that will be used to request information element data from a user.
      <br/>
      Interacting with a user to identify associations being between the collection of information element questions and a collection of available modifiable text segments.
      <br/>
      Interacting with a user to identifying a collection of document structure questions that will be used to request document structure data from a user, and identifying associations between the collection of document structure questions and ones of the collection of available modifiable text segments.
    </p>
    <p num="8">
      Implementations of the invention may include one or more of the following features.
      <br/>
      Data representing associations may be stored in a knowledge base.
      <br/>
      Modifications to associations may be identified and stored.
      <br/>
      Identifying a collection of information element questions can include receiving information element question data from the user.
      <br/>
      Modifiable text segments may be received from a user and stored as members of the collection of available modifiable text segments.
    </p>
    <p num="9">
      In general, in another aspect, the invention features a computer-based method of producing a customized interrelated collection of documents from a body of available document text segments.
      <br/>
      The method includes displaying selectable document structure elements.
      <br/>
      Each structure element is associated with information content of the collection of documents.
      <br/>
      Response data selecting document structure elements can be received.
      <br/>
      The method also includes displaying document information element requests and receiving information element data from a user.
      <br/>
      Information elements may be associated with document structure elements.
      <br/>
      The method also includes identifying a collection of document text segments by traversing a knowledge representation structure and assembling the text segments to produce a customized collection of interrelated document text segments by including the received information element data at predetermined locations in the collection of the document text segments.
      <br/>
      The knowledge representation structure associates the collection of document text segments with the selected document structure elements.
      <br/>
      Assembling the text segments is in response to the selected plurality of documents structure elements.
    </p>
    <p num="10">
      Implementations of the invention may include one or more of the following features.
      <br/>
      Selection of a first one of the document structure elements may cause the display of a second selectable document structure element.
      <br/>
      The second selectable document structure element may be displayed subordinate to the first document structure element.
      <br/>
      Displaying the second element may include displaying at an indented position relative to the first element.
      <br/>
      The document structure elements may include a first group of structure elements.
      <br/>
      Selection of a member of the first group may inhibits selection of remaining members of the group.
      <br/>
      Information element data may include a text string used to replace a text pattern stored in a document text segment.
    </p>
    <p num="11">
      Implementations may also include one or more of the following features.
      <br/>
      Document structure elements may be arranged in a sequential listing Traversing a knowledge representation structure may include processing structure elements according to their position in the sequential listing.
      <br/>
      Document structure elements may include parent structure elements and child structure elements that are logically subordinate to associated parent structure elements.
      <br/>
      When a parent structure elements is selected, display of its child structure elements may be enabled and when the parent structure elements is not selected, display of the child structure elements may be inhibited.
    </p>
    <p num="12">
      In general, in another aspect, the invention features a computer-based method of interrelating document text segments.
      <br/>
      The method includes providing a question editor interface to receive document structure questions and storing the received questions in database records.
      <br/>
      Additional, an interface to receive interrelationship data is provided and the received interrelationship data is stored in database records.
      <br/>
      The interrelationship data defines interrelationships among selected document structure questions and defines associations between selected document structure questions and selected document text segments.
      <br/>
      An interface can be provided to receive information element associations.
      <br/>
      Each information element association defines a data item to be received from a user and designates a document text segments associated with the data item to be received.
      <br/>
      The information element associations can be stored in database records.
    </p>
    <p num="13">
      Implementations of the invention may include one or more of the following features.
      <br/>
      Each document structure question may include a text string.
      <br/>
      Interrelationship data may be stored as structure records in a database.
      <br/>
      Each structure record may include pointer data to a question record.
      <br/>
      Selected ones of the structure records may also include pointer data to other structure records.
      <br/>
      Database records storing the received structure questions may be stored in a first database and database records storing the interrelationship data may be stored in a second database that is separate from the first database.
    </p>
    <p num="14">
      In general, in another aspect, the invention features a computer-based apparatus for generating documentation.
      <br/>
      The apparatus includes means for identifying a collection of available modifiable text segments.
      <br/>
      The identified text segments can be used to form a package of customized interrelated documents.
      <br/>
      The apparatus also includes means for identifying customization data needed to complete the modifiable text segments, and means for automatically assembling the customized package of interrelated documents based on the identified collection and customization data.
    </p>
    <p num="15">
      In general, in another aspect, the invention features a computer based apparatus for generating documentation.
      <br/>
      The apparatus includes means for identifying a collection of information element questions.
      <br/>
      The information element questions can be used to request information element data from a user.
      <br/>
      The apparatus also includes means for identifying associations between the collection of information element questions and a collection of available modifiable text segments and means for identifying a collection of document structure questions.
      <br/>
      The document structure questions are used to request document structure data from a user.
      <br/>
      Additionally, the apparatus has means for identifying associations between the collection of document structure questions and the collection of available modifiable text segments.
    </p>
    <p num="16">
      In general, in another aspect, the invention features a computer program residing on a computer-readable medium.
      <br/>
      The program includes instructions for causing a computer to interact with a user to identifying a collection of available modifiable text segments, and to interact with the user to identify customization data needed to complete the modifiable text segments.
      <br/>
      Additionally, the program includes instructions to automatically assemble the customized package of interrelated documents based on the identified collection and the customization data.
    </p>
    <p num="17">
      In general, in another aspect, the invention features a computer program residing on a computer-readable medium.
      <br/>
      The program includes instructions for causing a computer to interact with a user to identify a collection of information element questions.
      <br/>
      The information element questions can be used to request information element data from a user.
      <br/>
      Additionally the program can cause the computer to interact with a user to identify associations being between the collection of information element questions and a collection of available modifiable text segments.
      <br/>
      The program can also cause the computer to interact with a user to identify a collection of document structure questions that will be used to request document structure data from a user and interact with a user to identify associations between the collection of document structure questions and the collection of available modifiable text segments.
      <br/>
      The program may store associations in a database.
    </p>
    <p num="18">
      Implementations of the invention may include one or more of the following advantages.
      <br/>
      Output documentation may be altered by changing interrelationships between elements in a knowledge base and re-generating the output document.
      <br/>
      This allows new documentation to be produced from previously input data.
      <br/>
      Document generation security can be provided through the separation of data entry from data processing and document production.
      <br/>
      Control of document production through the use of document scripts and the centralized administration of those scripts can help to control and standardize terms specified in the produced documentation.
      <br/>
      Document scripts form an alterable knowledge base.
      <br/>
      Document scripts may be altered and applied to previously stored transaction data to produce updated transaction documentation or document variants.
    </p>
    <p num="19">Other advantages and features will become apparent from the following description and from the claims.</p>
    <heading>DESCRIPTION OF DRAWINGS</heading>
    <p num="20">
      FIG. 1 illustrates a document generation system.
      <br/>
      FIGS. 2-10 are screen displays for a document generation system.
      <br/>
      FIGS. 11-12 are flowcharts depicting the generation of a document.
      <br/>
      FIGS. 13-29 depict database tables and table fields that may be used in an implementation of a document generation system.
    </p>
    <heading>DETAILED DESCRIPTION</heading>
    <p num="21">
      An automated document generation system can be used to produce complex documentation required for commercial and legal transactions.
      <br/>
      Referring to FIG. 1, a document generation system is illustrated.
      <br/>
      The document generation system 100 automates the production of complex customized documentation by assembling an output document 109 from selected text segments stored in a database 102.
      <br/>
      The selected text segments forming the output document 109 are chosen based on a user's input 106 to a series of questions and are assembled in accordance with a stored knowledge base.
    </p>
    <p num="22">
      In the system 100, document generation is automated through the use of a document script.
      <br/>
      A document script is a knowledge base component modeling an output document.
      <br/>
      Document scripts can includes elements defining a series of user input questions, the structure of the output document, and text to be included in the generated output document.
      <br/>
      The system 100 provides an administrative module 105 that a script developer can use to enter a new script in the system 100 or to edit an existing script.
      <br/>
      The document script specifies mandatory and optional document text segments, criteria for selecting optional text segments and information needed to complete the generation of the output document 109.
    </p>
    <p num="23">
      To enter or edit a script, the script developer provides input data 104 to an administration module 105.
      <br/>
      The administration module 105 includes tools to define and store script elements.
      <br/>
      Script elements include, among other things, document structure elements, information questions, and document text segments.
      <br/>
      Document structure elements organize and interrelate document text segments and are used to determine the text segments included in a generated output document 109.
      <br/>
      As described below, each document structure element can be associated with a structure question, structure response data, and a document text segment.
      <br/>
      Document text segments may, in turn, be associated with one or more information questions.
    </p>
    <p num="24">
      At the deal input module 107, structure questions are presented to a user and structure response data is received from the user in response to script processing.
      <br/>
      Structure questions query the user about specific characteristics of a deal or transaction.
      <br/>
      In response to a structure question, the user can provide structure response data 106 indicating whether the described characteristic is pertinent to the deal or transaction being contemplated.
      <br/>
      In a graphical user interface (GUI) implementation, the user may indicate the presence of a particular characteristic by pointing to and clicking on a check box to select or deselect the characteristic.
      <br/>
      Pointing to and selecting particular characteristics may be done using a computer selection device such as a "mouse".
      <br/>
      Alternatively, selecting and deselecting may be performed using another input device, such as a keyboard.
    </p>
    <p num="25">
      Implementations may support hierarchical arrangements of structure questions.
      <br/>
      In a hierarchical arrangement, structure questions are arranged in parent-child relationships.
      <br/>
      To facilitate data input by a user, the deal input module 107 may inhibit the display of a child question if its parent question is not selected.
      <br/>
      Parent-child question hierarchies will be discussed in greater detail below.
      <br/>
      Structure questions may be interrelated in other ways.
      <br/>
      For example, structure questions may be organized in mutually exclusive groups.
      <br/>
      Mutually exclusive groups are organized such that only one group member may be selected at a given time.
    </p>
    <p num="26">
      Typically, each structure element will be associated with a document text segment.
      <br/>
      A document text segment defines text that is included in the generated documents 109 when its associated structure element has been selected by the user.
      <br/>
      A document text segment can, in turn, be associated with one or more information questions.
      <br/>
      An information question identifies information element data needed to complete the document text segment.
      <br/>
      For example, a document text segment may include text detailing obligations of a licensee.
      <br/>
      The document text segment may require the name of the licensee (an information element data item) to be inserted in the text segment during the generation of the output document 109.
      <br/>
      The deal input module 107 can present information questions to a user and, in response, can receive the required information element data item for later insertion in the output document 109.
      <br/>
      Information element data may be common to more than one document text segment.
      <br/>
      That is, multiple text segments in the text segment database 102 may require the same information element data to be inserted in the text segment during output document 109 generation.
      <br/>
      To simplify user input, the deal input module 107 can be configured to generate only a single request for such an information element.
      <br/>
      Alternatively, the document script may indicate that the information element data should remain distinct for each text segment and that a separate instance of the information question should be presented to the user for each separate document text segment requiring the information element.
    </p>
    <p num="27">
      The deal input module 107 may allow a user to respond to a subset of information questions.
      <br/>
      This is useful where, for example, the user does not know how to respond to each question in a list of information questions presented.
      <br/>
      The system 100 can track the list of information questions that have not been responded to and thereby determine a list of missing information element data items.
      <br/>
      Implementations may also support default response values for particular structure questions or information elements.
      <br/>
      The document generation module 108 can process script information and the full or partial data to produce an output document 109.
      <br/>
      If the set of information question responses is incomplete, the document generator 108 can produce a list of information element data items 110 that are missing or that are in their default state.
      <br/>
      The missing data element list 110 can help identify additional document 109 editing that may be required or additional input data 106 that is needed.
    </p>
    <p num="28">
      The document generation system 100 may be implemented in software on a computer supporting a graphical user interface (GUI).
      <br/>
      For example, a personal computer supporting the Microsoft Windows NT 4 0 (slashed zero) RTM. or Microsoft Windows 95.RTM. operating system may be used.
      <br/>
      FIGS. 2-5 illustrate data input and display screens provided in an exemplary Windows 95 implementation of the administration module 105.
      <br/>
      FIGS. 6-9 illustrate data input and display screens provided in an exemplary Windows 95 implementation of the deal input module 107.
    </p>
    <p num="29">
      Referring to FIG. 2, the administration module 105 includes a structure question editor tool 200.
      <br/>
      A script developer can use the structure question editor tool 200 to compose document structure questions.
      <br/>
      Each document structure question includes structure question text 203.
      <br/>
      The structure question text 203 states a particular condition that may or may not be relevant to a particular deal.
      <br/>
      A structure question may also have an associated unique identifier 201, title 202, and instance indicator 204.
      <br/>
      The identifier 201 and/or title 202 may be used by other script elements to refer to the particular script question or may be displayed to a user or script developer as a short-hand representation of the structure question 203.
      <br/>
      The instance identifier 204 indicates whether multiple instances (that is, multiple repetitions) of the question may be presented to a user.
      <br/>
      Multiple instances of a structure question may be presented to the user when a particular document text segment is to be repeated at multiple locations in an output document.
      <br/>
      For example, an output documents 109 may have a variable number of signatories.
      <br/>
      A separate instance of a structure question may be used to obtain structure information for each of the signatories.
      <br/>
      Each instance may, in turn, be a hierarchically arranged parent question having its own child questions.
    </p>
    <p num="30">
      Referring to FIG. 3, the administration module 105 includes a structure builder tool 300 to create and organize document structure elements.
      <br/>
      Document structure elements associate the structure questions created by the structure question editor 200 (FIG. 2) with document text segments.
      <br/>
      Document text segments are defined using an information builder tool, discussed below.
      <br/>
      The structure builder tool 300 displays available structure questions in the "Structure Questions" window 340, available document text segments in the "Documents" window 350, and document structure elements in the "Structure Questions and Related Documents" window 310.
      <br/>
      The windows 310, 340, and 350 can display the structure elements, structure questions, and document text segments using a title or identifier number associated with the displayed items.
    </p>
    <p num="31">
      To create a new structure element, the script developer selects a structure question from those displayed in the structure question window 340 and may also select a document text segment from those displayed in the document window 350.
      <br/>
      The script developer then indicates that the selected question and optionally selected text segment are to form a new structure element by clicking on the left arrow button 363.
      <br/>
      After clicking on the arrow button 363, a new structure element will appear in the "Structure Questions and Related Documents" window 310.
      <br/>
      The script developer may subsequently alter the sequential order of the structure elements using the order decrement button 361 or order increment buttons 362.
    </p>
    <p num="32">
      The structure builder tool 300 can be used to define a hierarchical organization of structure elements.
      <br/>
      A hierarchical organization of structure elements can be used to denote particular structure elements (known as child elements) that depend from another element (known as a parent element) and thereby form parent--child relationships.
      <br/>
      Parent--child relationships can be used to simplify input at the user module 107 where, for example, deal characteristics expressed by child structure elements are only relevant if a particular parent element is selected.
    </p>
    <p num="33">
      A script developer can define parent-child structure element relationships by selecting particular structure elements in the window 310 and promoting or demoting the selected elements with respect to the remaining elements in the window 310.
      <br/>
      Promoting or demoting a structure element alters the display of that element in the window 310.
      <br/>
      In particular, each demotion of a structure element increases the indentation at which the structure element is presented.
      <br/>
      For example, in the display 310, structure element 313 is indented relative to structure element 312.
      <br/>
      This display indicates that structure element 313 is demoted relative to structure element 312 and is a child element of parent element 312.
      <br/>
      Structure element 313 may, in turn, be a parent element relative to other structure elements.
      <br/>
      For example, structure element 313 is a parent element relative to the indented group of structure elements 315.
    </p>
    <p num="34">
      Referring to FIGS. 3 and 4, document segment displayed in the "Documents" window 350 can be created and edited using an information builder tool 400.
      <br/>
      The information builder tool 400 can associate document text segments residing in a text segment database 101 (FIG. 1) with information questions.
      <br/>
      The information builder tool 400 includes a "Documents and Related Information Questions" window 410 listing document text segments in the database 101 and their associated information questions, and a window 420 listing information questions that can be associated with a document text segment.
      <br/>
      Document text segments may be created and stored in the database 101 using, for example, word processing software such as the Microsoft Word.RTM. application.
      <br/>
      Information questions can be defined by the script developer using an information question editor, as discussed below.
    </p>
    <p num="35">
      The window 410 displays information questions in an indented list format beneath their associated document text segment.
      <br/>
      For example, the group of information questions 415 are associated with a document indicated by the document title 413.
      <br/>
      Information questions can be associated with a document text segment by selecting an information question displayed in the window 420, selecting a document text segment displayed in the window 410, and clicking a button 443 to associate the text segment with the information question.
      <br/>
      The tool 400 also allows the sequence of information questions displayed in the window 410 to be altered.
      <br/>
      The position of an information question within the displayed sequence of questions can be altered by selecting the question in the window 410 and then selecting the order decrement button 441 or order increment button 442.
    </p>
    <p num="36">
      Additional document text sections may be listed in the window 410 by selecting the "add document" button 445 and choosing a document text segment from the database 101 (FIG. 1).
      <br/>
      The add document button 445 may invoke a file or database browser provided by the computer operating system allowing a document text segment file to be selected.
      <br/>
      Additional information questions may be added to the information question window 520 by defining the new question using an information question editor tool.
    </p>
    <p num="37">
      Referring to FIG. 5, the administration module provides an information question editor tool 500 to define and edit information questions.
      <br/>
      The tool 500 allows the script developer to specify a question title 502, question text 503, and various question response parameters 504-509.
      <br/>
      The question title 502 may be displayed to a user or script developer as a short-hand representation of the information question.
      <br/>
      The question text 503 entered by the script developer is used to request the input of an information data element from a user at the input module 107.
      <br/>
      Additionally, the script developer can specify parameters regulating the response data that will be accepted by a user in response to an information question.
      <br/>
      Regulating response data may be performed by associating a data type 504 with the question 503.
      <br/>
      For example, the data type 504 may indicate that the input module 107 should receive currency data, numeric data within a specified range, a text string, or a multiple choice answer.
      <br/>
      Other data types may also be implemented.
    </p>
    <p num="38">
      After a script has been developed, it is stored in the script database 103 for access by the deal input module 107.
      <br/>
      The deal input module 107 presents structure and information questions to a user and receives user data 106 in response.
      <br/>
      The received user data 106 is stored by the input module 107 in the deal data database 102.
      <br/>
      FIGS. 6-9 show deal input module 107 display screens illustrating various stages of script processing and user input.
    </p>
    <p num="39">
      Referring to FIG. 6, script processing may begin with a request for deal definition information.
      <br/>
      A deal definition tool 600 is used to request and receive various data items that uniquely describe the particular deal or transaction.
      <br/>
      For example, a unique deal identifier (Deal ID) 601, deal file name 602, or deal description 603 may be received by the tool 600.
      <br/>
      The deal file name 602 may also be used to indicate where a generated output file 109 (FIG. 1) is to be stored.
    </p>
    <p num="40">
      The input module 107 may subsequently process document structure elements, present structure questions to the user, and receive structure response data.
      <br/>
      Referring to FIG. 7, the input module 107 provides a deal structure tool 700 to present structure question text and receive structure response data.
      <br/>
      In FIG. 7, structure questions 701-712 are presented to the left of associated structure response data items.
      <br/>
      Each structure response data item is represented by a checked or unchecked box 721-732.
      <br/>
      Each checked box 722-724, 726-728, and 730-732 indicates that the condition stated by its corresponding structure question 702-704, 7-6-708, and 710-712 is pertinent to the deal being contemplated by the user.
      <br/>
      Structure questions may be arranged in parent-child relationships.
      <br/>
      In response to the selection of a parent question, child questions may be displayed.
      <br/>
      For example, the selection of parent question 706 results in display of child questions 707-711.
      <br/>
      Prior to the selection of parent question 706 the display of child questions 707-711 may be inhibited to simplify the displayed user interface (not shown).
      <br/>
      Inhibiting the presentation of particular questions can be used to limit the presentation of irrelevant or misleading information to the user.
      <br/>
      Following the selection of parent question 706, the display of its child questions may become relevant or necessary.
      <br/>
      The display of questions 707-711 may then be enabled such that the questions are displayed following parent question 706 as seen in FIG. 7.
    </p>
    <p num="41">
      After the user has selected a set of structure questions relevant to a particular deal or transaction, the deal input module 107 can determine a set of information questions associated with the selected structure questions.
      <br/>
      Referring to FIG. 8, the input module 107 provides a deal information tool 800 to present information questions to a user and to receive information element data from the user.
      <br/>
      The tool 800 displays information questions 801-810 to the left of responses to those questions 811-820.
      <br/>
      The displayed response values 811-820 may be default response values provided by the document script.
      <br/>
      For example, referring back to FIG. 5, a default response 507 entered in the information question editor 500 by the script developer can appear as a default response at the deal information tool 800.
      <br/>
      Alternatively, the user can edit the response values 811-820 using a response value selection and editing function.
    </p>
    <p num="42">
      After the user has entered deal data at the input module 105, the deal data is stored in the deal database 102 for processing by the document generation module 108.
      <br/>
      The document generation module 108 accesses the document text segment 101, deal data 102, and script 103 databases to generate an output document 109.
      <br/>
      To generate the document 109, the module 108 appends text segments together and inserts relevant information elements in the appended text segment.
    </p>
    <p num="43">
      Referring to FIG. 11, the generation module 108 (FIG. 1) may assemble the output document by retrieving the first structure element in the document script (step 1101).
      <br/>
      Structure response data is then retrieved to determine if the structure element was selected by the user (step 1102).
      <br/>
      If the structure was not selected, further processing of that structure and its hierarchically related descendents will be skipped (step 1103).
      <br/>
      The generation module will then process the next remaining structure element (step 1104).
      <br/>
      If, on the other hand, the structure response data indicates that the structure element was selected (step 1102), the generation module will identify the text segment associated with that element and will identify information element data associated with the text segment (step 1105).
    </p>
    <p num="44">
      An identified text segment is appended to the output document 109 if it has not been previously included in the output document (steps 1106 and 1108).
      <br/>
      However, if multiple instances of the text segment are permitted, it will be appended again (steps 1106-1108).
      <br/>
      The document generation module 108 may continue processing document structure elements until each relevant text segment has been appended to the output document 109.
      <br/>
      After the various text segments are appended to the output document, the generator module will process the information question response data identified in step 1105 (step 1109).
      <br/>
      Processing of information question response data is further illustrated in FIG. 12.
    </p>
    <p num="45">
      Referring to FIG. 12, to process information element data, the document generator 108 retrieves the information element data items and inserts them at appropriate points in the output document.
      <br/>
      The information element data values may be retrieved from the deal data database 102 (step 1201).
      <br/>
      For each information element, the document generator 108 determines whether the element value is a default value (step 1202).
      <br/>
      If so, the information element may be listed in a needed information document 110 (step 1203).
      <br/>
      The default or user-entered value of each information element data item may then be inserted at appropriate points in the output document (step 1204).
      <br/>
      Insertion of the values may be performed using, for example, "Find and Replace" operations in the Microsoft Word.RTM. word processing software.
      <br/>
      Such a "Find and Replace" operation may be controlled using Microsoft Object Linking and Embedding (OLE) procedure calls and may use a matching pattern stored in the document text segment to identify the insertion position of the information element data.
      <br/>
      Once the information element insertion is complete, a final output document 109 and list of needed information elements can be stored in a database or computer file system (steps 1206 and 1207).
    </p>
    <p num="46">
      The administration module 105 and document generation module 108 may be used to produce an altered set of documents from data previously entered at the input module 107.
      <br/>
      This may be done by altering the interrelationships between document script elements using the administration module 105 and re-generating an output document 109.
      <br/>
      The re-generated output document 109 may be based on data previously input at the input module 107 and stored in the deal database 102.
      <br/>
      For example, if the text of a particular document text segments is erroneous, that text segment may be edited and the output document 109 re-generated.
      <br/>
      Similarly, if an alternative arrangement of text segments in the output document 109 is desired, the administration module 105 may be used to reorganize document structure elements.
      <br/>
      A new output document 109 may then be generated based on data previously stored in the database 102 and the new script elements.
    </p>
    <p num="47">
      The document generation system 100 may be implemented on a personal computer executing the Microsoft Windows NT or Windows 95 operating system.
      <br/>
      Portions of the invention may be implemented using commercially available software components.
      <br/>
      For example, the administrative and input modules 105 and 107 can include a Microsoft Access.RTM. database to generate and access document scripts and to store deal data.
      <br/>
      The document generation module 108 can include Microsoft Access and Microsoft Word.RTM. software to generate the output documents 109 and 110.
      <br/>
      The Access and Word software can interoperate using object linking and embedding (OLE) procedure calls.
      <br/>
      The OLE procedure calls can be controlled using a program developed in the Microsoft Visual Basic language.
      <br/>
      The visual basic program can be used to instruct the Microsoft Access database application to issue OLE procedure calls to the Microsoft Word application thereby controlling the assembly of document text sections by the Word application.
      <br/>
      Additionally, "Find and Replace" functionality in the Word application can be used to insert information element data at appropriate points in the assembly of document text sections.
    </p>
    <p num="48">
      The document script may include multiple relational database tables.
      <br/>
      For example, in an implementation using the Microsoft Access database to store document scripts, the tables shown in FIGS. 13-29 may be used to implement the system 100.
      <br/>
      FIGS. 13-16 illustrate field structures of tables entitled "Structure", "Structure_Question", "Structure_Group", and "Response." The "Structure", "Structure_Question", "Structure_Group", and "Response" tables control the presentation of structure questions to a user and store the user responses.
      <br/>
      In particular, the Structure table defines a hierarchical arrangement of structure questions and document text sections.
      <br/>
      Each structure question is stored as a text string in the "Structure_Question" table.
      <br/>
      Responses to structure questions are stored as records in the Response table.
      <br/>
      Additionally, each Structure table record can be associated with a stored document text segment through a pointer to the "Documents" table (described below).
    </p>
    <p num="49">
      Responses stored in the "Response" table determine document segments included in a generated output document and determine information questions presented to the user.
      <br/>
      Referring to FIGS. 17-21, the tables "Document", "Question", "Answer", "Doc_to_question" and "LinkQ" identify document segments, store information questions, relate information questions to structure questions, and store user responses to information questions.
      <br/>
      In particular, each record in the "Document" table identifies a file including storing a document text segment.
      <br/>
      Each record in the "Question" table stores an information question that may be presented to a user.
      <br/>
      Document table and Question table records are interrelated through pointers to and from the Doc_to_question table.
      <br/>
      Answers to information questions are stored in the "LinkQ" table.
      <br/>
      The Doc_to_question table controls the presentation of the information questions associated with a given text segment.
    </p>
    <p num="50">
      Data in the tables of FIGS. 13-21 may also be interrelated using the "DealKey" table in FIG. 22. The DealKey table stores data and notations identifying a particular deal being input by a user at the input module 107.
      <br/>
      In particular, DealKey table records store identifier values that uniquely identify separate deals stored in the deal data database 102.
    </p>
    <p num="51">Referring to FIGS. 23-29, a relational database implementation may include additional tables to allow importing and exporting of data, to aid in maintaining the system 100.</p>
    <p num="52">
      Referring back to FIG. 1, in a security-enhanced implementation of the system 100, the administration module 105, deal input module 107, and document generation module 108 may have different access rights to the databases 101, 102, and 103.
      <br/>
      For example, the administration module 105 and the document generation module 108 may be able to access each database 101-103 while the deal module 107 may have restricted access to the document text segment database 107.
      <br/>
      This may be used where, for example, security and privacy concerns require limited access to document text segments by the user of the deal input module 107.
    </p>
    <p num="53">
      The system 100 may include additional elements to transfer data between databases 101-103 and modules 105, 107, 108.
      <br/>
      For example, data received from a user by the input module 107 may be sent to the administration module 105, the document generation module 108, or a database server (not shown) by electronic mail (e-mail) prior to storage in the database 102.
      <br/>
      Alternatively, in an integrated implementation, the administration module 105, deal module 107, document generation module 108 and databases 101-103 may be implemented as an integrated software application executable on a single personal computer.
      <br/>
      Additional implementations choices may include the use of non-relational databases.
    </p>
    <p num="54">
      The invention may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them.
      <br/>
      Apparatus of the invention may be implemented in a computer program product tangibly embodied in a machine-readable storage device for execution by a programmable processor; and method steps of the invention may be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output.
      <br/>
      The invention may advantageously be implemented in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device.
      <br/>
      Each computer program may be implemented in a high-level procedural or object-oriented programming language, or in assembly or machine language if desired; and in any case, the language may be a compiled or interpreted language.
      <br/>
      Suitable processors include, by way of example, both general and special purpose microprocessors.
      <br/>
      Generally, a processor will receive instructions and data from a read-only memory and/or a random access memory.
      <br/>
      Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM disks.
      <br/>
      Any of the foregoing may be supplemented by, or incorporated in, specially-designed ASICs (application-specific integrated circuits).
    </p>
    <p num="55">
      Information in each of databases 101-103 may reside on a single computers or be distributed over a collection of computers.
      <br/>
      For example, the text segment database 101 may be implemented as a network of computers, each computer storing a partial subset of the available document text segments.
      <br/>
      Additionally, information in the databases 101-103 can be combined in a single storage representation.
      <br/>
      For example, the databases 101-103 may be separate tables within a single relational database or may be separate fields within a table record.
      <br/>
      Furthermore, portions of each databases 101-103 may reside in volatile memory such as RAM memory.
    </p>
    <p num="56">
      In an icon-based implementation, structure questions and information element questions may be represented by graphical icons representing the particular structure question.
      <br/>
      For example, an icon of a "Stop" sign may be used in place of text asking a user if the end of a document or logical structure has been reached.
    </p>
    <p num="57">Still other embodiments are within the scope of the following claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A computer-based method of producing a customized package of interrelated documents comprising:</claim-text>
      <claim-text>simultaneously displaying a hierarchy of document structure questions at a computer terminal; in response to the displayed document structure questions, iteratively receiving user input data and dynamically altering the displayed hierarchy based on the received user input data; processing the user input data using a document script to identify a collection of available modifiable text segments that will be used to form the package of interrelated documents; by interaction with a user, identifying customization data needed to complete the modifiable text segments;</claim-text>
      <claim-text>and automatically assembling the customized package of interrelated documents based on computer processing of the document script, said processing comprising incorporating the customization data into the identified collection of modifiable text segments.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1 wherein the document script further comprises data associating the available modifiable text segments with information element questions.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 2 wherein identifying customization data comprises: presenting information element questions to a user in accordance with the document script;</claim-text>
      <claim-text>and receiving customization data from the user.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 2 wherein dynamically altering the displayed hierarchy comprises expanding a hierarchical relationship associated with a first one of the displayed document structure questions to display an additional document structure question.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A computer-based method of generating a document modeling script that is computer-processable to produce a customized package of interrelated documents, the method comprising: by interaction with a user, receiving at a graphical user interface data identifying a collection of information element questions that will be used to request information element data from a user; by interaction with a user, receiving at a graphical user interface data identifying first associations, the first associations being between the collection of information element questions and a collection of available modifiable text segments; by interaction with a user, receiving at a graphical user interface data identifying a collection of document structure questions that will be used to request document structure data from a user; by interaction with a user, receiving at a graphical user interface data identifying second associations, the second associations being between the collection of document structure questions and ones of the collection of available modifiable text segments;</claim-text>
      <claim-text>and storing data representing the first associations and the second associations in a knowledge base.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method of claim 5 further comprising: by interaction with a user, identifying first modified associations between the collection of information element questions and the collection of available modifiable text segment;</claim-text>
      <claim-text>and storing data representing the first modified associations in the knowledge base.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 6 further comprising: by interaction with a user, identifying second modified associations between the collection of document structure questions and the collection of available modifiable text segments;</claim-text>
      <claim-text>and storing data representing the second modified associations in the knowledge base.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 5 further comprising: by interaction with a user, receiving a modifiable text segment and storing the received text segment as a member of the collection of available modifiable text segments.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A computer-based method of producing a customized interrelated collection of documents from a body of available document text segments, the method comprising: simultaneously displaying a hierarchy of selectable document structure elements, each structure element associated with information content of the collection of documents; receiving response data selecting ones of the document structure elements; displaying document information element requests, the information element requests being associated with the selected document structure elements; receiving user selection data selecting ones of the document information element requests and, for each of said selected information element requests, receiving information element data from a user; identifying a collection of document text segments by traversing a knowledge representation structure, the knowledge representation structure associating the collection of document text segments with the selected document structure elements; assembling the collection of the document text segments in response to the selected plurality of documents structure elements;</claim-text>
      <claim-text>and producing a customized collection of interrelated document text segments by including the received information element data at predetermined locations in the collection of the document text segments.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The method of claim 9 wherein selection of a first one of the document structure elements causes the display of a second selectable document structure element.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 10 further comprising displaying the second selectable document structure element subordinate to the first document structure element.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method of claim 11 where displaying subordinate comprises displaying the second document structure element at an indented position relative to the first document structure element.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 9 wherein the document structure elements comprise a first group of structure elements, and wherein selection of a first one of the first group of structure elements inhibits selection of remaining structure elements in the first group of structure elements.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 9 wherein information element data comprises a text string and wherein including the received information element data at predetermined locations comprises replacing a text pattern stored in a document text segment with the text string.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 9 wherein the first selectable document structure elements are arranged in a sequential listing and wherein traversing a knowledge representation structure comprises processing the selectable document structure elements according to their position in the sequential listing.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 9 wherein document structure elements comprise parent structure elements and child structure elements, each child structure element being a logical subordinate of a parent structure element.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. A computer-based method of producing a customized interrelated collection of documents from a body of available document text segments, the method comprising: displaying selectable document structure elements, each structure element associated with information content of the collection of documents, and each document structure elements comprising parent structure elements and child structure elements, each child structure element being a logical subordinate of a parent structure element; receiving response data selecting ones of the document structure elements wherein, when the response data identifies a parent structure elements as being selected, display of its child structure elements is enabled and when the response data does not identify the parent structure elements as being selected, display of its child structure elements is inhibited; displaying document information element requests, the information element requests being associated with the selected document structure elements; receiving user selection data selecting ones of the document information element requests and, for each of said selected information element requests, receiving information element data from a user; identifying a collection of document text segments by traversing a knowledge representation structure, the knowledge representation structure associating the collection of document text segments with the selected document structure elements; assembling the collection of the document text segments in response to the selected plurality of documents structure elements;</claim-text>
      <claim-text>and producing a customized collection of interrelated document text segments by including the received information element data at predetermined locations in the collection of the document text segments.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. A computer-based method of customizing a document generation script to computer-enable interrelating of document text segments, the method comprising: providing a question editor interface; receiving document structure questions at the question editor interface; storing the received document structure questions in database records; providing an interface to receive interrelationship data, the interrelationship data defining interrelationships among selected document structure questions and defining associations between selected document structure questions and selected document text segments; storing the interrelationship data in database records; providing an interface to receive information element associations, each information element association defining a data item to be received from a user and designating a document text segments associated with the data item to be received;</claim-text>
      <claim-text>and storing the information element associations in document generation script database records.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 18 wherein: each document structure question comprises a text string and storing document structure questions comprises storing the text string as a question record in the first database;</claim-text>
      <claim-text>and storing interrelationship data comprises storing a plurality of structure records in the second database, wherein each structure record comprises pointer data to a question record, and wherein selected ones of the structure records further comprising pointer data to other selected other ones of the structure records.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of claim 18 wherein the database records storing the received structure questions are stored in a first database and the database records storing the interrelationship data are stored in a second database separate from the first database.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. A computer-based apparatus for generating documentation, the apparatus comprising: means for identifying a collection of available modifiable text segments that will be used to form a package of customized interrelated documents; means for identifying customization data needed to complete the modifiable text segments;</claim-text>
      <claim-text>and means for automatically assembling the customized package of interrelated documents based on the identified collection and customization data.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A computer based apparatus for generating a document generation script, the apparatus comprising means for identifying a collection of information element questions used to request information element data from a user; means for identifying associations between the collection of information element questions and a collection of available modifiable text segments; means for identifying a collection of document structure questions used to request document structure data from a user;</claim-text>
      <claim-text>and means for identifying associations between the collection of document structure questions and the collection of available modifiable text segments.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. A computer program residing on a computer-readable medium, comprising instructions for causing a computer to: simultaneously display a hierarchy of document structure Questions at a computer terminal; in response to the displayed document structure questions, iteratively receive user input data and dynamically alter the displayed hierarchy based on the received user input data; process the user input data to identify a collection of available modifiable text segments; interact with the user to identify customization data needed to complete the modifiable text segments;</claim-text>
      <claim-text>and automatically assemble the customized package of interrelated documents based on computer processing of a document script, said processing comprising incorporating the customization data into the identified collection of modifiable text segments.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. A computer program residing on a computer-readable medium, comprising instructions for causing a computer to: interact with a user to identify a collection of information element questions that will be used to request information element data from a user; interact with a user to identify first associations being between the collection of information element questions and a collection of available modifiable text segments; interact with a user to identify a collection of document structure questions that will be used to request document structure data from a user;</claim-text>
      <claim-text>and interact with a user to identify second associations between the collection of document structure questions and ones of the collection of available modifiable text segments;</claim-text>
      <claim-text>and store the first associations and the second associations in a database.</claim-text>
    </claim>
  </claims>
</questel-patent-document>