<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182130B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182130</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182130</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="24692890" extended-family-id="1250252">
      <document-id>
        <country>US</country>
        <doc-number>09080112</doc-number>
        <kind>A</kind>
        <date>19980518</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09080112</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>1297025</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>8011298</doc-number>
        <kind>A</kind>
        <date>19980518</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09080112</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>73960596</doc-number>
        <kind>A</kind>
        <date>19961030</date>
        <priority-linkage-type>1</priority-linkage-type>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1996US-08739605</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="3">
        <country>US</country>
        <doc-number>63153496</doc-number>
        <kind>A</kind>
        <date>19960412</date>
        <priority-linkage-type>1</priority-linkage-type>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="3">
        <doc-number>1996US-08631534</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="4">
        <country>US</country>
        <doc-number>20722994</doc-number>
        <kind>A</kind>
        <date>19940307</date>
        <priority-linkage-type>1</priority-linkage-type>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="4">
        <doc-number>1994US-08207229</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="5">
        <country>US</country>
        <doc-number>67103691</doc-number>
        <kind>A</kind>
        <date>19910318</date>
        <priority-linkage-type>B</priority-linkage-type>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="5">
        <doc-number>1991US-07671036</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  13/00        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G05B  19/418       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>05</class>
        <subclass>B</subclass>
        <main-group>19</main-group>
        <subgroup>418</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F   9/46        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>46</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F  15/173       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>173</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>H04L  12/28        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>28</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>H04L  29/06        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="7">
        <text>H04L  29/08        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>08</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>709221000</text>
        <class>709</class>
        <subclass>221000</subclass>
      </main-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-015/17381</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>17381</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131023</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G05B-019/4185</classification-symbol>
        <section>G</section>
        <class>05</class>
        <subclass>B</subclass>
        <main-group>19</main-group>
        <subgroup>4185</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131023</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-009/547</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>547</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131023</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-029/06</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>06</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131023</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-067/10</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>67</main-group>
        <subgroup>10</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131017</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-067/12</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>67</main-group>
        <subgroup>12</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131017</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-069/32</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>69</main-group>
        <subgroup>32</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131017</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-069/329</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>69</main-group>
        <subgroup>329</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20131017</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>18</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>15</number-of-drawing-sheets>
      <number-of-figures>15</number-of-figures>
      <image-key data-format="questel">US6182130</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method for enhancing the performance of a network</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>HAYAKAWA FUMIYASU</text>
          <document-id>
            <country>US</country>
            <doc-number>5042029</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5042029</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="2">
          <document-id>
            <country>US</country>
            <doc-number>RE32887</doc-number>
            <kind>E</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>USRE32887</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>COCHRANE FREDERICK P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>3582901</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US3582901</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>MCGEE JOHN K</text>
          <document-id>
            <country>US</country>
            <doc-number>3648244</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US3648244</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>MIYAZAKI KEN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4001785</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4001785</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>HAIBT LUTHER HAROLD, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4007450</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4007450</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>ROBERTSON JAMES D</text>
          <document-id>
            <country>US</country>
            <doc-number>4216528</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4216528</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>GRUDOWSKI RAYMOND A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4319338</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4319338</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>MORI KINJI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4366479</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4366479</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>HAAG GEORGE A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4373193</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4373193</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>GILTNER MICHAEL E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4386416</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4386416</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>GRUDOWSKI RAYMOND A</text>
          <document-id>
            <country>US</country>
            <doc-number>4404651</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4404651</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>DANIELL THOMAS P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4432057</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4432057</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>MOOREHEAD ROBERT M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4507735</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4507735</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>MORI KINJI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4510492</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4510492</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>DEBRULER DENNIS L</text>
          <document-id>
            <country>US</country>
            <doc-number>4539637</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4539637</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="17">
          <text>LYON DAVID L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4545013</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4545013</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="18">
          <text>TOY FRANK C</text>
          <document-id>
            <country>US</country>
            <doc-number>4554418</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4554418</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="19">
          <text>LIVINGSTON WILLIAM D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4568930</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4568930</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="20">
          <text>SHAH BAKUL V, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4589063</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4589063</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="21">
          <text>KENDALL BURTON</text>
          <document-id>
            <country>US</country>
            <doc-number>4635189</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4635189</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="22">
          <text>BUTLER THOMAS T, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4654654</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4654654</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="23">
          <text>JONES DONALD J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4663704</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4663704</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="24">
          <text>MATERNA ANTHONY T, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4714995</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4714995</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="25">
          <text>KOVALCIN DAVID</text>
          <document-id>
            <country>US</country>
            <doc-number>4720782</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4720782</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="26">
          <text>HANSEN TERRIS L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4727575</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4727575</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="27">
          <text>MACCRISKEN JOHN E</text>
          <document-id>
            <country>US</country>
            <doc-number>4730348</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4730348</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="28">
          <text>BEASLEY THOMAS B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4827423</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4827423</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="29">
          <text>MILLER WILLIAM L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4831582</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4831582</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="30">
          <text>KIKUCHI SUMIO</text>
          <document-id>
            <country>US</country>
            <doc-number>4843545</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4843545</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="31">
          <text>BURKE THOMAS J</text>
          <document-id>
            <country>US</country>
            <doc-number>4855906</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4855906</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="32">
          <text>DAVIS GLENN T</text>
          <document-id>
            <country>US</country>
            <doc-number>4868570</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4868570</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="33">
          <text>AUSTIN EDWARD B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4885684</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4885684</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="34">
          <text>MARKKULA JR ARMAS C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4918690</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4918690</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="35">
          <text>MERCER FERRELL L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4926375</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4926375</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="36">
          <text>BEITEL BRADLEY J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4937760</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4937760</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="37">
          <text>BURKE THOMAS J</text>
          <document-id>
            <country>US</country>
            <doc-number>4972367</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4972367</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="38">
          <text>ADVANI HIRA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4974151</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4974151</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="39">
          <text>BRANTLEY JR WILLIAM C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4980822</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4980822</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="40">
          <text>YAMAMURA KIMIO</text>
          <document-id>
            <country>US</country>
            <doc-number>5034886</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5034886</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="41">
          <text>KARP ALAN H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5093916</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5093916</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="42">
          <text>ARROWOOD ANDREW H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5101348</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5101348</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="43">
          <text>SEYMOUR LESLIE G</text>
          <document-id>
            <country>US</country>
            <doc-number>5109486</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5109486</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="44">
          <text>SOOD PAARDEEP K, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5146607</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5146607</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="45">
          <text>JOYCE THOMAS F, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5148533</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5148533</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="46">
          <text>BAKER WALTER J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5175691</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5175691</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="47">
          <text>ORIMO MASAYUKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5561802</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5561802</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="48">
          <text>KAWANO SHIGEKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5594872</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5594872</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="49">
          <text>HITACHI LTD</text>
          <document-id>
            <country>EP</country>
            <doc-number>0169577</doc-number>
            <kind>A2</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>EP-169577</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="50">
          <text>TEKNEKRON SOFTWARE SYSTEMS INC</text>
          <document-id>
            <country>EP</country>
            <doc-number>0412232</doc-number>
            <kind>A2</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>EP-412232</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="51">
          <text>AISI RESEARCH CORP, et al</text>
          <document-id>
            <country>WO</country>
            <doc-number>9015394</doc-number>
            <kind>A1</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>WO9015394</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="52">
          <text>MICROSOFT CORP</text>
          <document-id>
            <country>WO</country>
            <doc-number>9103017</doc-number>
            <kind>A1</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>WO9103017</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>"Programming Languages for Distributed Computing Systems", ACM Computing Surveys, vol. 21, No. 3, pp. 260-322 (Sep. 1989).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>Jerrold M. Ginsparg &amp; Ronald D. Gordon, "Automatic Programming of Communications Software via Nonprocedural Descriptions", 1982 IEEE, pp. 1343-1347.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <continuation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>73960596</doc-number>
              <kind>A</kind>
              <date>19961030</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>63153496</doc-number>
              <kind>A</kind>
              <date>19960412</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>20722994</doc-number>
              <kind>A</kind>
              <date>19940307</date>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>67103691</doc-number>
              <kind>A</kind>
              <date>19910318</date>
            </document-id>
            <parent-status>ABANDONED</parent-status>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5754779</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5737529</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>5513324</doc-number>
              <kind>A</kind>
            </document-id>
          </parent-doc>
        </relation>
      </continuation>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Echelon Corporation</orgname>
            <address>
              <address-1>Sunnyvale, CA, US</address-1>
              <city>Sunnyvale</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>ECHELON</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Dolin, Jr., Robert A.</name>
            <address>
              <address-1>Menlo Park, CA, US</address-1>
              <city>Menlo Park</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Einkauf, Robert L.</name>
            <address>
              <address-1>Fremont, CA, US</address-1>
              <city>Fremont</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Kagan, Richard S.</name>
            <address>
              <address-1>London, GB</address-1>
              <city>London</city>
              <country>GB</country>
            </address>
          </addressbook>
          <nationality>
            <country>GB</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Riley, Glen M.</name>
            <address>
              <address-1>Los Gatos, CA, US</address-1>
              <city>Los Gatos</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Von De Bur, James M.</name>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Harrell, Robert B.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      An improved apparatus and method for communicating information in a networked system wherein network variables are employed to accomplish such communication.
      <br/>
      Network variables allow for standardized communication of data between nodes in a network.
      <br/>
      A first node may be programmed, for example, to sense certain information and to report the information as a network variable X.
      <br/>
      A second node may be programmed to receive the variable X and to control devices based on the current value of the variable.
      <br/>
      The present invention provides for defining connections between the first and second node to facilitate such communication and for determining addressing information to allow for addressing of messages, including updates to the value of the variable X, between the nodes.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This is a continuation of application Ser.
      <br/>
      No. 08/739,605, filed Oct. 30, 1996, which is a contiuation of application Ser.
      <br/>
      No. 08/631,534, filed Apr. 12, 1996, which issued as U.S. Pat. No. 5,737,529, which is a continuation of application Ser.
      <br/>
      No. 08/207,229, filed Mar. 17, 1994, which issued as U.S. Pat. No. 5,513,324,which is a continuation of application Ser.
      <br/>
      No. 07/671,036, filed Mar. 18, 1991, which is now abandoned.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="3">The present invention relates to the field of systems for distributed computing, communication and control and, more specifically, communication of information between devices in a distributed computing environment.</p>
    <p num="4">2. Description of the Related Art</p>
    <p num="5">
      In distributed computer systems it is necessary to provide for communication of information between nodes in the system.
      <br/>
      A number of methods for providing such communication are known in the art.
    </p>
    <p num="6">
      These methods include message passing techniques in which messages are passed, over a medium, from one node to another in a network.
      <br/>
      In message passing techniques, messages are built by a sender node and sent to one or more receiver nodes.
      <br/>
      The message is then parsed by the receiver node in order to correctly interpret the data.
      <br/>
      Message passing allows the advantage of passing large amounts of data in an expected format.
      <br/>
      Of course, over time the format of the message may be required to change to support new applications or features.
      <br/>
      This typically leads to compatibility issues between nodes on the network.
    </p>
    <p num="7">
      A second technique involves remote procedure calls in which a first node, requiring data which exists on a second node, calls a procedure executing on the second node where the data exists and requests the procedure to manipulate the data and provide a result to the first node.
      <br/>
      Remote procedure calls are typically suited to passing small amounts of data; however, a separate procedure call is typically required for each interchange.
      <br/>
      Therefore, it is likely in any networking system that over time additional procedure calls will be required in the network as new functions are carried out by the network.
      <br/>
      The addition of new procedure calls to certain nodes of the network leads to incompatibility between nodes, because the existing nodes do not know of and cannot execute the new remote procedure calls.
    </p>
    <p num="8">
      A third technique for communication of data in a network involves data sharing.
      <br/>
      Bal, Henri E., Steiner, Jennifer G., and Tanenbaum, Andrew S., Programming Languages for Distributed Computing Systems, ACM Computing Surveys, Vol. 21, No.3, September, 1989, pp. 261-322 (hereinafter Bal et al.) describes certain data sharing techniques.
      <br/>
      A discussion of data sharing may be found in the Bal et al. article at pages 280, et seq. (It should also be noted that a discussion of messaging may be found in the Bal et al. article at pages 276, et seq. along with a general overview of interprocess communication and synchronization.)
    </p>
    <p num="9">
      Bal et al. describes how parts of a distributed program can communicate and synchronize through use of shared data.
      <br/>
      Bal et al. states that, if two processes have access to the same variable, communication can take place by one processor setting the variable and the other processor reading the variable.
      <br/>
      This communication is described as being allowed to take place whether the two processors are both running on a host where the shared data is stored and thus can manipulate the shared data directly, or if the processes are running on different hosts and access to the shared data is accomplished by sending a message to the host on which the shared data resides.
    </p>
    <p num="10">
      Two types of shared data are described: (1) shared logical variables; and (2) distributed data structures.
      <br/>
      Briefly, shared logical variables are described as facilitating a communication channel between processes through a "single-assignment" property.
      <br/>
      Initially, a shared logical variable is unbound, but once a value is assigned to the variable the variable is considered to be bound.
      <br/>
      An example is provided in which the three goals of conjunction:
    </p>
    <p num="11">goal-- 1 (X, Y), goal-- 2 (X, Y), and goal-- 3 (X)</p>
    <p num="12">
      are assumed and solved in parallel by processes P1, P2 and P3.
      <br/>
      The variable X is initially unbound and represents a communication channel between the three processes.
      <br/>
      If any of the processes binds X to a value, the other processes can use this value.
      <br/>
      Likewise, Y is a channel between P1and P2.
      <br/>
      Processes synchronize by suspending on unbound variables.
      <br/>
      For example, if Y is to be used to communicate information from P1 to P2, then P2may suspend until Y is bound by P1.
    </p>
    <p num="13">
      It should be emphasized that in the described concept of shared logical variables, the term binding is used to describe a process of assigning a value to a variable.
      <br/>
      As will be seen below, the term binding is also used to describe the present invention, however, the meaning of the term is significantly different and the reader is cautioned to avoid confusion between the concepts represented by these two uses of this term.
      <br/>
      Generally, in the present invention, the term binding is used to indicate a process of associating a variable of one node with a variable of at least one other node.
      <br/>
      It is not necessary that the variable of either node has yet been assigned a data value.
    </p>
    <p num="14">
      Distributed data structures are data structures which may be manipulated simultaneously by several processes.
      <br/>
      In concept, all processes share one global memory termed "tuple space" or TS.
      <br/>
      The elements of TS are ordered sequences of values, similar to records in a language such as Pascal.
      <br/>
      Three operations may take place on TS: (1) "OUT" adds a tuple to TS; (2) "READ" reads a tuple from TS; and (3) "IN" reads a tuple from TS and deletes it from TS.
      <br/>
      Thus, in order to change the value of a tuple in TS it is necessary to first perform an IN operation, then to manipulate the data, and then perform an OUT operation.
      <br/>
      The requirement that a tuple must first be removed by the IN operation makes it possible to build distributed systems without conflict between accesses by the various processes.
    </p>
    <p num="15">
      Bal et al. contrasts distributed data structures with interprocess communication techniques noting that communication accomplished by distributed data structures is anonymous.
      <br/>
      A process reading a tuple from TS does not know or care which other process inserted the tuple.
      <br/>
      Further, a process executing an OUT does not specify which process the tuple is intended to be read by.
    </p>
    <p num="16">
      Bal et al. states that in concept distributed data structures utilizing the tuple space implement conceptually a shared memory, although in implementation a physical shared memory is not required.
      <br/>
      However, as can be seen, in a system utilizing such distributed data structures a single copy of the data is stored in tuple space whether or not such tuple space is implemented as a single physical shared memory.
      <br/>
      Separate copies of the data are not maintained for the various processes or on the various hosts.
      <br/>
      In fact, maintaining separate copies would lead to data conflict possibilities as the various nodes attempted to coordinate updates of the variable between the various process and hosts.
      <br/>
      Thus, the reason for requiring use of the IN command to delete a tuple before allowing manipulation of the data represented by the tuple.
    </p>
    <p num="17">
      The present invention discloses a networked communication system which is perhaps closest in certain concepts to the described distributed data structures.
      <br/>
      However, it can, of course, be appreciated that certain advantages may be gained from development of a system which utilizes certain features of distributed data structures while retaining flexibility in allowing multiple copies of a data value to be stored on the various nodes.
    </p>
    <p num="18">
      The present invention discloses certain improved programming language and data structure support for communication, sensing and control as may be used by nodes of the present invention.
      <br/>
      It is known in the art to allow for scheduling of tasks through use of a programming statement such as a "when" clause or the like.
      <br/>
      However, in known systems such tasks may only be scheduled to be executed on the occurrence of a predefined event such as may be defined by the compiler writer.
      <br/>
      Examples of such events typically include expiration of a timer or input pin state changes.
      <br/>
      Such known systems do not allow for definitions of events, other than such predefined events.
      <br/>
      It has been discovered that it is useful to provide for definition of events as any valid programming language statement which may be evaluated to a true or false condition.
    </p>
    <p num="19">
      Of course, any number of known systems allow for declaration of variables and when declaring such variables certain parameters may be specified which may be set to a state indicative of a desired characteristic of the variable.
      <br/>
      For example, a variable may be declared as input or output, as a given variable type (e.g., boolean, numeric, etc.).
      <br/>
      However, once declared such characteristics are static and may only be changed by changing the source program which declares the variables.
      <br/>
      It has been discovered that it would be useful to provide for a system in which the state of at least certain parameters may be changed during system configuration allowing for greater flexibility in optimizing the system of the preferred embodiment.
    </p>
    <p num="20">
      Finally, in known systems it is necessary to call certain I/O library procedures to declare and use I/O devices.
      <br/>
      Such calls to I/O procedures may be quite complex and require significant skill on the part of the programmer to properly code and utilize the routines.
      <br/>
      The present invention discloses a system having improved methods for declaration and use of I/O devices.
    </p>
    <heading>OBJECTS OF THE PRESENT INVENTION</heading>
    <p num="21">It is a primary object of the present invention to provide for improved communication of information between nodes of a distributed network.</p>
    <p num="22">
      It is more specifically an object of the present invention to provide for improved communication of information in a highly distributed computer system in which a problem may be broken down into small units in which each node accomplishes a small part of the entire application.
      <br/>
      In such a system, data communication may be typically accomplished in relatively small units of data--however, significant communication of data between nodes of the network is required.
    </p>
    <p num="23">It is further an object of the present invention to provide for improved communication of information in a distributed computing system by allowing for standard communication techniques between nodes.</p>
    <p num="24">It is still further an object of the present invention to provide for improved communication of information by providing certain facilities, structures and tools for such communication.</p>
    <p num="25">It is also an object of the present invention to provide improved data structures and programming language support for communication and other aspects of the present invention.</p>
    <p num="26">As one aspect of providing such improved data structures and programming language support, it is one aspect of the present invention to provide for declaration of variables having configurable parameters leading to improved ability to maintain and optimize networks of the present invention.</p>
    <p num="27">As another aspect of providing such improved data structures and programming language support, it is desired to provide for increased ease in declaring and communicating with I/O devices of the present invention.</p>
    <p num="28">As still another aspect of providing such improved data structures and programming language support, it is desired to provide for improved scheduling functions allowing for use of programmer-defined or predefined events in scheduling of tasks to be executed.</p>
    <p num="29">
      It is also an object of the present invention to provide simplified installation and network maintenance.
      <br/>
      Such an objective may be accomplished by storing in each node the node's application interface such that nodes may identify themselves and their application requirements to a network management node at installation time and when it is necessary to recover the complete network database.
    </p>
    <p num="30">To accomplish such a simplified installation and maintenance objective, it is a further objective of the present invention to define an interface file format which may efficiently store and allow retrieval of such identification and application requirement information.</p>
    <p num="31">These and other objects of the present invention will be better understood with reference to the Detailed Description of the Preferred Embodiment, the accompanying drawings, and the claims.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="32">
      A network for communicating information having at least a first and second node is described in which each node includes data storage for storing data representing a variable V and further includes a processor coupled with the data storage.
      <br/>
      In the case of the first node, the processor may manipulate and write to new values to the variable V. After having updated the variable V with a new value, the processor then assembles and communicates a packet for transmission on the network.
      <br/>
      The packet includes the new data value for the variable V. The second node then receives the packet and stores the new value for the variable V in its data storage.
    </p>
    <p num="33">In particular, during programming of the first node, it is declared as a writer of the variable V and likewise during programming of the second node, it is declared as a reader of the variable V. During configuration of the network, a communication connection between the first node and the second node is defined and during later communication of message packets, addressing of message packets between the various nodes is accomplished through use of address tables based on the definition of such connections.</p>
    <p num="34">
      Further, it is disclosed to utilize a standardized set of variable types in accomplishing such communication.
      <br/>
      Use of a standardized set of variable types leads to increased compatibility between nodes of different manufacture as well as increased ease in configuring networks.
    </p>
    <p num="35">Finally, certain extensions are provided to standard programming languages to provide for increased ease of use of the data communication features of the present invention.</p>
    <p num="36">These and other aspects of the present invention will be apparent to one of ordinary skill in the art with further reference to the below Detailed Description of the Preferred Embodiment and the accompanying drawings.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="37">
      FIG. 1 is a logical view of a configuration of devices as may be networked using methods and apparatus of the present invention.
      <br/>
      FIG. 2 is a diagram illustrating an embodiment of the network of FIG. 1 as may be accomplished by the present invention.
      <br/>
      FIG. 3(a) is a diagram illustrating a second embodiment of the network of FIG. 1 as may be accomplished by the present invention.
      <br/>
      FIG. 3(b) is a second diagram illustrating the second embodiment of FIG. 3(a) and including a logical view of certain connections of nodes of the network.
      <br/>
      FIG. 4 is an overall block diagram of a single node of the present invention coupled with a communication medium.
      <br/>
      FIG. 5 is an overall flow diagram illustrating a method of programming and configuring a network as may be accomplished by the present invention.
      <br/>
      FIG. 6 is a flow diagram illustrating a method for defining hardware requirements of a node as may be utilized by the present invention.
      <br/>
      FIG. 7 is a flow diagram illustrating a method for defining network and logical parameters of a node as may be utilized by the present invention.
      <br/>
      FIG. 8(a) is a flow diagram illustrating a method for defining connections among network variables as may be utilized by the present invention.
      <br/>
      FIG. 8(b) is a flow diagram illustrating a method for binding network variables as may be utilized by the present invention.
      <br/>
      FIG. 9 is an illustration of certain data structures which may be utilized by the present invention.
      <br/>
      FIG. 10 is a flow diagram illustrating a method of configuring a network using standard network variable types, as may be utilized by the present invention.
      <br/>
      FIG. 11 is a flow diagram illustrating a method of declaring and configuring a network variable as may be used by the present invention.
      <br/>
      FIG. 12 is a flow diagram illustrating a method of declaring and accessing I/O devices as may be utilized by the present invention.
      <br/>
      FIG. 13 is a flow diagram illustrating a method of dynamically selecting an optimal protocol class of service, according to one embodiment of the present invention.
    </p>
    <p num="38">
      For ease of reference, it might be pointed out that reference numerals in all of the accompanying drawings typically are in the form "drawing number" followed by two digits, xx; for example, reference numerals on FIG. 1 may be numbered 1xx; on FIG. 9, reference numerals may be numbered 9xx.
      <br/>
      In certain cases, a reference numeral may be introduced on one drawing, e.g., reference numeral 201 illustrating a communication medium, and the same reference numeral may be utilized on other drawings to refer to the same item.
    </p>
    <p num="39">Also, all mention of an Appendix are directed to the Microfiche copy of the Appendix as found in the application file of this patent.</p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="40">
      An improved computer network including facility for communication of information between nodes in the network is described.
      <br/>
      In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention.
      <br/>
      It will be obvious, however, to one skilled in the art that the present invention may be practiced without these specific details.
      <br/>
      In other instances, well-known circuits, structures and techniques have not been shown in detail in order not to unnecessarily obscure the present invention.
    </p>
    <heading>OVERVIEW OF THE NETWORK OF THE PRESENT INVENTION</heading>
    <p num="41">
      The network of the preferred embodiment is of the type which provides for sensing, control and communication.
      <br/>
      The network of the present invention and nodes utilized within the network of the present invention are described in greater detail with reference to U.S. Pat. No. 4,918,690 Markkula et al. titled "Network and intelligent cell for providing sensing, bi-directional communications and control", which patent is assigned to the assignee of the present invention (referred to herein as the '690 patent).
    </p>
    <p num="42">
      In an exemplary network, the network of the present invention may provide for sensing of current environmental factors and control of apparatus affecting the environmental factors.
      <br/>
      Further, the network may allow for communication of information packets providing information on the environmental factors between nodes in the network.
      <br/>
      The present application will utilize, as an example, a network for control of fans based on sensing and communicating information regarding temperature in different zones in a controlled environment.
    </p>
    <p num="43">
      It might be worthwhile noting that in an expected scenario, various manufacturers will include a node of the type defined by the present invention in their products.
      <br/>
      For example, a thermostat manufacturer may include such a node in its thermostats.
      <br/>
      A fan manufacturer may include such a node in its fans.
      <br/>
      The various nodes may be programmed for specific applications by their respective manufacturers and, when configured in an environmental control system, are useful for communication, sensing and control between various components of the system.
      <br/>
      A node of the preferred embodiment is illustrated in block diagram form with reference to FIG. 4.
      <br/>
      Such nodes may be programmed, for example, using the "C" computer programming language.
      <br/>
      As one aspect of the present invention, certain extensions have been provided to the "C" language to facilitate network communications.
    </p>
    <p num="44">
      As a further and important aspect of the present invention, network variables are described which provide for communication of information between nodes of the network.
      <br/>
      A network variable may be thought of as a data object shared by multiple nodes where some nodes are "readers" and some nodes are "writers" of the object.
      <br/>
      This will be discussed in greater detail below.
    </p>
    <p num="45">A network as may be implemented utilizing the present invention</p>
    <p num="46">
      Referring now to FIG. 1, a logical view of a network as may utilize the present invention is shown.
      <br/>
      The network may, for example, include three separate temperature sensors 115-117 located in three separate zones of a building for sensing and communicating temperature information.
      <br/>
      The network may further include two control cells 101 and 121 coupled to receive temperature information from the sensors 115-117 and to control two fans 131-132 (by turning the fans 131-132 on and off).
    </p>
    <p num="47">
      In the exemplary network, network variable temp_out 151 is coupled to a first network variable temperature input 102 of control cell 101.
      <br/>
      Network variable temp_out 152 is coupled with a second network variable temperature input 104 of control cell 101.
      <br/>
      In the illustrated embodiment, a third network variable temperature input 103 is not utilized.
      <br/>
      On/Off control network variable 105 of control cell 101 is coupled to control an input network variable, On/Off, of a fan 131.
      <br/>
      Thus, in this embodiment, sensing a temperature above a given level in the zone of the building sensed by temperature sensor 115 or by temperature sensor 116 will cause fan 131 to be turned on.
      <br/>
      Likewise, when the temperature in these zones is again lowered below a given level, the fan 131 may be turned off.
    </p>
    <p num="48">
      Network variable temp_out 152 is also coupled to a first temperature input network variable 122 of control cell 121.
      <br/>
      In addition, network variable temp_out 153 is coupled to a second temperature input network variable 123 of control cell 121.
      <br/>
      A third temperature input 124 of control cell 121 is not utilized in this embodiment.
      <br/>
      Control cell 121 is coupled through an On/Off control output network variable 125 to control fan 132.
      <br/>
      Thus, sensing a temperature above a given level in the zone of the building sensed by temperature sensor 116 or by temperature sensor 117 will cause fan 132 to be turned on.
      <br/>
      Likewise, when the temperature in these zones is again lowered below a given level, the fan 132 may be turned off.
      <br/>
      As is appreciated, in the described configuration, when temperature sensor 116 detects a high temperature, both fan 131 and fan 132 are turned on.
    </p>
    <p num="49">
      FIG. 1 has been labeled to illustrate logical connections between the various components.
      <br/>
      Connection 141 is illustrated as the connection between temperature sensor 115 and control cell 101.
      <br/>
      Connection 142 is illustrated as the connection including temperature sensor 116, control cell 101 and control cell 121.
      <br/>
      Connection 143 is illustrated as the connection between control cell 101 and fan 131.
      <br/>
      Connection 144 is illustrated as the connection between sensor 117 and control cell 121.
      <br/>
      Connection 145 is illustrated as the connection between control cell 121 and fan 132.
      <br/>
      The connection of network variables will be discussed in greater detail below.
      <br/>
      However, it may now be useful to introduce three new terms: network variables, readers, and writers.
      <br/>
      In addition, general definitions for certain other terms used in this specification may be found with reference to Appendix Table XV.
    </p>
    <p num="50">
      As one important aspect of the present invention, the present invention provides for allocation and use of network variables by processes running on nodes in a network.
      <br/>
      As stated above, network variables may be thought of as a data object shared by multiple nodes where some nodes are "readers" of the object and other nodes are "writers" of the object.
      <br/>
      Additionally, a node may be both a reader and a writer with "turnaround".
      <br/>
      Writing with turnaround is discussed in greater detail below.
      <br/>
      Although the data object may be thought of as being shared by multiple nodes, as will be understood from the discussion below, the network variable of the preferred embodiment is not stored in shared memory but rather separate memory is provided in each of the multiple nodes to store a copy of the data object.
      <br/>
      A writer node may modify the value of the data object and all reader nodes of that network variable have their memories updated to reflect the change.
      <br/>
      Thus, for example, each of the temperature sensors 115-117 may run a process which declares a data object as follows:
    </p>
    <p num="51">network output boolean temp_high.</p>
    <p num="52">
      Each of the controller cells 101 and 121 may declare data objects as follows:
      <br/>
      network input boolean temp_high
      <br/>
      network output boolean fan_on.
    </p>
    <p num="53">
      Each of the fans 131-132 may declare a data object as follows:
      <br/>
      network input boolean fan_on.
    </p>
    <p num="54">
      The complete syntax for declaration of network variables in the system of the preferred embodiment is given in Appendix Table VIII.
      <br/>
      The keyword "network" indicates the data object is a network variable.
      <br/>
      A network variable declared as output will result in transmission of the new value of the network variable on the network when the program stores the variable--thus, nodes having declared an output network variable are considered writer nodes for that variable.
      <br/>
      For example, each time a process running on temperature sensor 115 stores the variable temp_high, a network message is generated communicating the new value of temp_high.
      <br/>
      The message is communicated to all reader nodes connected in connection_1141, i.e., to control cell 101.
      <br/>
      In the case of temperature sensor 116 changing the value of its temp_high variable, a message is generated and transmitted to all nodes connected in connection_2142, i.e., to both control cell 101 and to control cell 121.
      <br/>
      The process for configuring connections as disclosed by the present invention will be discussed in greater detail below.
    </p>
    <p num="55">
      Although the preferred embodiment declares nodes as either writers or readers of network variables, it should be noted that in an alternative embodiment a node may be declared as a both a reader and writer of a particular variable.
      <br/>
      Such an embodiment may be envisioned without departure from the spirit and scope of the present invention.
    </p>
    <p num="56">
      It might be that the present invention in its preferred embodiment allows an output network variable to be initialized using an initialization command without causing a message to be transmitted on the network.
      <br/>
      Using this command, a node may be initially configured or reset without affecting other nodes on the network.
    </p>
    <p num="57">
      Network variables declared as input may change values asynchronously with program execution--this declaration is used for "reader" nodes.
      <br/>
      In the preferred embodiment, input network variables may also change values at program initialization or at other points under program control; however, the changed value will not be transmitted on the network.
    </p>
    <p num="58">
      At anytime, a reader node may force an update of its input network variables utilizing a polling function of the present invention.
      <br/>
      When this function is called, the specified network variables are updated by requesting over the network the current value from the writer node or nodes.
      <br/>
      This facility may be useful, for example, after a node reset to allow the node to determine the current value of network variables without need to wait until the next time the writer nodes update the value of those variables.
    </p>
    <p num="59">
      Thus, temperature sensors 115-117 are writer nodes of the variable temp_high.
      <br/>
      Control cells 101 and 121 are reader nodes of the variable temp_high and also are writer nodes of the variable fan_on.
      <br/>
      Fans 131-132 are reader nodes of the variable fan_on.
    </p>
    <p num="60">Of course, many other applications and configurations are within the scope of the teachings of the present invention and the network described with reference to FIG. 1 is merely exemplary.</p>
    <p num="61">
      It should be noted that multiple readers and multiple writers may be provided within a single connection without departure from the spirit and scope of the present invention.
      <br/>
      Multiple readers are illustrated with reference to connection_2142.
      <br/>
      Multiple writers have not been illustrated by FIG. 1.
      <br/>
      However, variation in which multiple writers are employed will be readily apparent to one of ordinary skill in the art.
    </p>
    <p num="62">
      Turning to FIG. 2, an embodiment of the network of FIG. 1 is illustrated in which each of cell 101, cell 121, temperature sensor 115, temperature sensor 116, temperature sensor 117, fan 131 and fan 132 are each coupled to communicate over common communication medium 201.
      <br/>
      The communication medium 201 may be, for example, twisted pair wiring, radio frequency, power lines, or other communication channels or multiple physical channels connected together with bridges and/or routers.
      <br/>
      In this embodiment, and in order to accomplish the connections illustrated by FIG. 1, temperature sensor 115 must be configured to address and communicate with cell 101; temperature sensor 116 must be configured to address and communicate with cell 101 and cell 121; temperature sensor 117 must be configured to address and communicate with cell 121; control cell 101 must be configured to address and communicate with fan 131; and control cell 121 must be configured to address and communicate with fan 132.
    </p>
    <p num="63">
      Of course, providing for such addressing may be and typically is a significant task.
      <br/>
      It is appreciated that each of control cells 101 and 121, temperature sensors 115-117 and fans 131-132 may be engineered, programmed and/or manufactured by different sources.
      <br/>
      Further, although the exemplary network is, in itself, complicated having 5 separate connections, 141-145, it can of course be imagined that other networks may be substantially more complicated having even hundreds or more connections.
      <br/>
      Therefore, the present invention implements methods and apparatus which allow for straightforward and efficient configuration of nodes in a network.
    </p>
    <p num="64">
      Turning now to FIG. 3(a), a modified embodiment of the configuration of FIG. 2 is illustrated.
      <br/>
      In this embodiment, controller cell 101 and 121 have been removed from the configuration and each of temperature sensors 115-117 and fans 131-132 are illustrated as comprising nodes 301-305, respectively.
      <br/>
      These nodes are preferably of the type which are capable of sensing, communicating and controlling as have been described in the '690 patent and which are shown in greater detail with reference to FIG. 4.
      <br/>
      Thus, these nodes 301-305 are capable of replacing certain control functions of the control cells 101 and 121, eliminating the need for separate control cells in the described embodiment.
      <br/>
      In the embodiment of FIG. 3(a), and in order to accomplish the logical connections illustrated by FIG. 1, node 301 must be configured to communicate with node 304; node 302 must be configured to communicate with nodes 304 and 305; and node 303 must be configured to communicate with node 305.
      <br/>
      Again it is important to note that the temperature sensors 115-117 and fans 131-132 may be manufactured by different sources.
      <br/>
      It is preferable that the manufacturing sources are not required to have prior knowledge as to what devices their products will communicate with in a network.
      <br/>
      Thus, the manufacturer of temperature sensor 115 is preferably not required to be aware, during programming and manufacture of temperature sensor 115, whether temperature sensor 115 will be configured in a network to communicate with a controller cell, such as controller cell 101 (as shown in FIG. 2), or to communicate directly with a fan, such as fan 131 (as shown in FIG. 3(a)), or even with some other device (perhaps a heater, air conditioner, fire extinguishing equipment, etc.).
      <br/>
      Likewise, it is preferable that the manufacturer of fans 131-132 are similarly allowed to manufacture devices without requirement of prior knowledge as to the eventual uses of those devices in a network.
    </p>
    <p num="65">In order to allow for such flexibility in configuring networks and to allow for efficient communication between nodes in a network, the present invention provides network variables which may be used to facilitate standards of communication between nodes in the network.</p>
    <p num="66">
      Appendix Table I illustrates a temperature sensor control program as may be used to program nodes 301-303 coupled with temperature sensors 115-117.
      <br/>
      As can be seen, the program of Appendix Table I is written to communicate onto the medium 201 a network variable indicative of the state of temp_in.
      <br/>
      The value of this variable may be, for example, used by a control program running on a control cell, such as control cell 101 or 121, or used directly by a control program running on a fan, such as fans 131-132.
    </p>
    <p num="67">
      Appendix Table II illustrates a fan control program which may be used for controlling a fan such as fans 131-132 by turning the fan on and off responsive to receiving changes in state of a network variable on_off.
      <br/>
      As can be seen, the program of Appendix Table II is written to allow receiving from the medium 201 the network variable on_off as a binary network variable regardless of the source (e.g., whether from a control cell such as control cell 101 or 121, or directly from a temperature sensor, such as temperature sensor 115-117).
    </p>
    <p num="68">
      Appendix Table III illustrates a binding set which connects temperature sensors 115-117 with fans 131-132 as illustrated by FIG. 3(a).
      <br/>
      FIG. 3(b) is provided to further an understanding of the binding set.
      <br/>
      As can be seen, the binding set provides for three connections illustrated as temp1_controls 321, temp2_controls 322, and temp3_controls 323 of FIG. 3(b).
      <br/>
      The connection temp1_controls connects the output variable temp_high of temperature sensor 115 with the input variable fan_on of fan_1131.
      <br/>
      The connection temp2_controls connects the output variable temp_high of temperature sensor 116 with the input variable fan_on of both fan_1131 and fan_2132.
      <br/>
      Finally, the connection temp3_controls connects the output variable temp_high of temperature sensor 117 with the input variable fan_on of fan_2132 .
    </p>
    <p num="69">
      It should be noted that although appendix tables I, II and III illustrate programs which are useful for illustrative concepts of the present invention, an attempt has not been made to ensure these programs are syntactically correct.
      <br/>
      Rather, these programs are provided for the exemplary teaching of concepts of the present invention.
      <br/>
      It is understood from an examination of the programs of tables I and II that the program of Appendix Table I may write the variable temp_high without regard to the eventual recipient of the variable and likewise the program of Appendix Table II may read the variable fan_on without regard to the writer node of the variable.
      <br/>
      Thus, these programs work equally well in a network such as illustrated by FIG. 2 including separate control cells 101 and 121 or in a network such as illustrated by FIG. 3(a) which does not include such control cells.
      <br/>
      The binding set illustrated by Appendix Table III determines the relationship between the various nodes of the network.
      <br/>
      Appendix Table IV illustrates a binding set which may be used to establish connections in a network such as illustrated by FIG. 2.
    </p>
    <p num="70">A node of the present invention</p>
    <p num="71">
      FIG. 4 illustrates a block diagram of a node such as nodes 301-305 as may be utilized by the present invention.
      <br/>
      The node 421 is coupled in communication with medium 201 through control 411, clock and timer circuitry 412, and communication port 408.
      <br/>
      In addition, the node provides a general purpose I/O port 407 allowing for communication with various external devices.
      <br/>
      The node further comprises three separate processors 404-406, a read only memory (ROM) 403, a random access memory 402, and an EEPROM 401.
      <br/>
      The processors 404-406 are useful for executing programs such as the programs illustrated in Appendix Tables I and II, as well as other communication, control and operating programs.
      <br/>
      The ROM 403 may be useful for storing such programs.
      <br/>
      As will be seen, the EEPROM 401 may be useful for storing certain data values which, although configurable, are not subject to frequent changes in value.
      <br/>
      Each of the processors 404-406, ROM 403, RAM 402, EEPROM 401, control 411, clock 412, I/O port 407, and communication port 408 are coupled in communication through internal address bus 410, internal data bus 420 and timing and control lines 430.
    </p>
    <heading>PROGRAMMING AND CONFIGURING A NETWORK OF THE PRESENT INVENTION</heading>
    <p num="72">
      Turning now to FIG. 5, steps for programming and configuring a network of the present invention are illustrated.
      <br/>
      It should be noted that steps illustrated by FIG. 5 are implemented in a development system which allows for development and management of networks such as may be implemented by the present invention.
      <br/>
      However, certain of these steps may also take place outside of the development environment (e.g., connection of network variables and binding).
      <br/>
      The development system is an integrated hardware and software environment that operates in conjunction with a host computer, an IBM PC/AT compatible in the currently preferred embodiment, allowing a manufacturer or other party to design and build components compatible for communication with a network of the present invention.
    </p>
    <p num="73">
      The development system includes an IBM PC/AT-compatible computer having an interface adapter card for coupling with a control processor located in a separate card cage.
      <br/>
      In addition to the control processor, the card cage may hold other cards designed to emulate routing functions in a network and transceiver evaluation boards allowing evaluation of the physical interface with various media, e.g., twisted pair, power line, or radio frequency.
    </p>
    <p num="74">
      Initially certain hardware parameters are defined for each node in the network, block 501.
      <br/>
      This step includes naming or otherwise identifying the node, block 601.
      <br/>
      A node type is specified, block 602.
      <br/>
      In the development environment, the node type may be specified as the control processor, an emulator board, or a custom node type.
      <br/>
      The location of the node is then specified--the location specifies whether or not the node resides in a card cage and, if the node resides in a card cage, the card cage number and slot number, block 603.
      <br/>
      Next, the channel to which the node is connected is specified, block 604, and the channel's priority is specified, block 605.
      <br/>
      If the node has been assigned the priority privilege, then the node's priority is set at this time.
      <br/>
      Finally, certain hardware properties may be specified, block 606.
      <br/>
      Hardware properties may include model numbers for the node, clock rates, operating system revision levels, ROM size, RAM size, EEPROM size, RAM start address, and EEPROM start address.
      <br/>
      Finally, the hardware definitions are downloaded to the node, block 607.
    </p>
    <p num="75">
      Next, network and certain logical parameters are specified for each node, block 502.
      <br/>
      Currently, this step involves specifying a node name, block 701, and then specifying a program file, block 702, and hardware device name, block 704 associated with the node.
      <br/>
      Hardware names were specified above in step 601.
      <br/>
      Program files will be discussed in greater detail below in connection with block 503.
      <br/>
      The definition of the node is then saved, block 705.
    </p>
    <p num="76">
      The development environment provides an editor for developing and editing program code, block 503, such as the code illustrated in appendix tables I and II.
      <br/>
      The preferred embodiment allows programming in the "C" language and, further, provides certain extensions to the "C" language which will be discussed in greater detail below.
      <br/>
      After developing program code, the programs are compiled, linked and loaded as executable programs, block 504, onto the nodes specified in definition of network and logical parameters, block 502.
    </p>
    <p num="77">
      Connections are then specified for the network, block 505.
      <br/>
      This step is better illustrated with reference to FIG 8(a).
      <br/>
      Initially, a connection name is entered (for example, the connection names specified in the binder script of Appendix Table III are temp1_controls, temp2_controls and temp3_controls), block 801.
      <br/>
      In the preferred embodiment, the connection name is entered as a unique name having from one to 16 characters consisting of letters, numbers and underscores; no spaces are allowed.
    </p>
    <p num="78">
      Next, a node name is selected, block 802.
      <br/>
      In the preferred embodiment, a list of defined nodes (i.e., nodes which have been previously defined as described in connection with block 502) is displayed and a valid node name may be selected from the displayed list.
      <br/>
      For example, the node temp_sensor_1 may be selected.
      <br/>
      After selecting a node name, block 802, a network variable name is selected, block 803.
      <br/>
      Again, a list of network variable names for the selected node are preferably displayed and a network variable name is selected from the displayed list.
      <br/>
      For example, the network variable temp_high may be selected.
    </p>
    <p num="79">
      After completing this process for a first node, a second node may be selected, block 804.
      <br/>
      Again, a node list is preferably displayed and the second node is selected from the displayed node list.
      <br/>
      For example, the node fan_1 may be selected.
      <br/>
      A network variable associated with the second node is then selected, block 805, again preferably from a displayed list.
      <br/>
      Continuing the example, the selected network variable may be fan_on.
    </p>
    <p num="80">
      Finally, certain parameters may be set, block 806.
      <br/>
      In the preferred embodiment, settable parameters include the retry count set to the maximum number of times the message will be sent, the retry timer for acknowledged services, and the repeat timer for unacknowledged/repeated messages.
      <br/>
      This aspect of the present invention will be discussed in greater detail below.
    </p>
    <p num="81">
      The connection is then added to a connection list using an add function, block 807.
      <br/>
      It is noted that if additional nodes are to be connected in the connection, they are specified in a similar manner to the first and second nodes after having specified the first and second nodes.
      <br/>
      An example of such a connection is illustrated in Appendix Table III as temp2_controls which includes three nodes: temp_sensor_2, fan_1 and fan_2.
    </p>
    <p num="82">
      The process of FIG. 8(a) is repeated for each desired connection.
      <br/>
      In the case of the binding set of Appendix Table III, the process is repeated three times: (1) once for the connection named temp1_controls; (2) once for the connection named temp2_controls; and (3) once for the connection named temp3_controls.
      <br/>
      In the case of the binding set of Appendix Table IV, the process is repeated five times, once for each of connection_1, connection_2, connection_3, connection_4, and connection_5.
    </p>
    <p num="83">
      In the preferred embodiment, the output of the connection process is a binary script file that provides commands to drive the subsequent binding process.
      <br/>
      In order to provide a textual version of what this binary file looks like, Appendix Table III and Table IV have been provided.
    </p>
    <p num="84">It is also within the power of one of ordinary skill in the art to develop a graphical user interface for drawing the connections between iconic representations of the nodes and creating a binder script based on such drawings.</p>
    <p num="85">
      Finally, the network variables are bound, block 506, to their respective nodes in order to allow communication within the connections defined during execution of the steps of FIG. 8(a).
      <br/>
      The preferred method of binding network variables is described in greater detail with reference to FIG. 8(b).
    </p>
    <p num="86">
      Initially, the list of connections developed during execution of the steps of FIG. 8(a) is read, block 821.
      <br/>
      Then, certain type checking and message constraint checking is performed for each connection, block 822.
      <br/>
      The type and message constraint checking includes the following checks:
      <br/>
      (1) Ensure that there are at least two members in each connection;
      <br/>
      (2) Ensure that there is at least one output member and one input member for each connection;
      <br/>
      (3) In the preferred embodiment, no more than one input and one output network variable from the same node may appear in the same connection;
      <br/>
      (4) A warning is given if polled output variables are not attached to at least one polled input;
      <br/>
      (5) An estimate for message rates may be declared for network variables; a warning is given if the estimated message rates do not match for all members of a connection;
      <br/>
      (6) Network variables may be synchronized or non-synchronized--a warning message is provided if synchronized variables are bound to non-synchronized variables;
      <br/>
      (7) Network variables may be sent as authenticated--a warning is provided if some, but not all, members of a connection are declared as authenticated; and
      <br/>
      (8) Variable types are checked field-by-field for size and sign type matching and for type definition matching.
      <br/>
      The currently preferred list of type definitions are provided in Table Appendix V.
    </p>
    <p num="87">
      After completing type and message rate constraint checking, the addressing mode for the network variable is determined, block 824.
      <br/>
      If there is only one destination (e.g., temp1_controls), subnet-node addressing is used using the subnetnode structure given below to create an entry in address table 901.
      <br/>
      Address table 901 will be discussed in greater detail below.
      <br/>
      The address entered in the address table 901 is the address of the destination node (e.g., in the case of temp1_controls, the address of fan_1 is entered in the address table of temp_sensor_1; conversely, the address of temp_sensor_1 is entered in the address table of fan_1 to allow for such functions as polling of the current status of the network variable).
      <br/>
      The address table index entry 912 is set to correspond to the location in the address table 901 corresponding with the address entered in the address table 901.
      <br/>
      For example, in the case of the bind set of Appendix Table III, if the address of FAN_1 is entered as a network address 913 in the address table 901 at entry 001, the address table index entry 912 of the network variable table 903 corresponding to the network variable id assigned to the connection temp1_controls is written with the address 001.
      <br/>
      In this way, whenever messages are sent on the network by temp_sensor_1 indicating the value of temp_high has been updated, the address table index is used to lookup the address of the destination node of such a message.
      <br/>
      A message is then sent, addressed to the destination node, including the network variable id and the new value.
      <br/>
      The destination node then receives the message and is able to update the value of its corresponding network variable "fan_on".
    </p>
    <p num="88">
      If there is more than one destination node (e.g., temp2_controls), group addressing is used using the above group address structure to create an entry in the address table 901.
      <br/>
      In the case of group addressing, a set of sender and destinations for the network variable is constructed.
      <br/>
      For example, in the case of the connection temp2_controls, the set of sender and destinations includes temp_sensor_2, fan_1 and fan_2.
    </p>
    <p num="89">Other optimization steps are also provided by the binder of the preferred embodiment and are described in further detail below.</p>
    <p num="90">
      After determining an addressing mode, for each unique set of sender and destinations (unique without respect to which nodes are senders and which nodes are receivers), a group address is assigned to the set, block 825.
      <br/>
      The group address is propagated to the address table of each of the nodes in the set and stored in their respective address tables 901.
      <br/>
      The address table index value 912 for the entry corresponding to the group address is updated to index the address table 901 at the new entry.
      <br/>
      For example, group1 is defined to include temp_sensor_2, fan_1 and fan_2 and the group address is stored at entry 002 of the address table 901.
      <br/>
      Then, the address table index 912 for each of the three nodes temp_sensor_2, fan_1 and fan_2 is updated to point to the new address table entry.
    </p>
    <p num="91">
      For group address table entries, as described above, only the output network variable nodes actually set their network variable table entries to index the address table.
      <br/>
      The nodes with input network variables will not index the address table.
      <br/>
      This allows the same network variable to reside in several network variable connections, and many network variable groups.
      <br/>
      When an incoming message arrives for one of these input network variables, the correct network variable table entry is found using the network variable ID (the software matches the network variable ID in the message to one in the table).
    </p>
    <p num="92">This "intersecting connection" ability makes the network variable concept more powerful by allowing the same variable to be updated by several groups, thus reducing both the overall network traffic and reducing network variable table space by sharing the same table entry among several connections.</p>
    <p num="93">
      Finally, a single network variable identification number (netvar_ID) is assigned to each network variable in the connection, block 823.
      <br/>
      This may be better understood with reference to FIG. 9 which illustrates a network variable table 902 having a network variable identification field 911 and an address table index field 912.
      <br/>
      Further, an address table 901 is illustrated having a network address field 913.
      <br/>
      It should be noted that these tables preferably reside in each individual node's EEPROM 401 and have additional fields in the preferred embodiment.
      <br/>
      However, for simplicity only the above-mentioned fields are illustrated in FIG. 9.
      <br/>
      The network variable table is preferably of a structure as follows:
    </p>
    <p num="94">
      --
      <br/>
      -- struct nv_table
      <br/>
      -- + unsigned priority:1; /*1 = priority network variable,
      <br/>
      --                       0 = non-priority nv*/
      <br/>
      --      unsigned dir:1;  /*direction 0 = input, 1 = output*/
      <br/>
      --      unsigned idhi:6; /*network variable id, most significant bits*/
      <br/>
      --      unsigned idlo;   /*network variable id, least significant bits*/
      <br/>
      --      unsigned ta:1;   /*turnaround: 1 = turnaround*/
      <br/>
      --      unsigned st:2:   /*service*/
      <br/>
      --      unsigned auth:1; /*authenticated: 1 = authenticated*/
      <br/>
      --      unsigned addr:4  /*address table index*/
      <br/>
      -- };
      <br/>
      where the priority field indicates whether messages to update the network variable are to be sent as priority or non-priority messages; direction indicates the direction of the target ID, for example, a network variable update going from an output variable to an input variable would have the direction bit set to a 0; the network variable id is a 14 bit identification number allowing for a maximum of 16,384 unique network variables per domain in the network and corresponds to the network variable id 911 of FIG. 9; turnaround indicates an output network variable may be connected to an input network variable of the same node; service indicates whether acknowledged or unacknowledged services is utilized; auth indicates whether message are authenticated prior to being accepted and processed by identifying the sender node through an authentication process; priority indicates whether messages are transmitted as priority or normal messages; and the address table index corresponds to address table index 912 and is an index into the address table 901.
    </p>
    <p num="95">The Address Appendix Table preferably follows one of two formats given below; the first format is for group address table entries and the second format is for single destination node address table entries:</p>
    <p num="96">
      --
      <br/>
      -- struct group
      <br/>
      -- + unsigned type:1; /*indicates whether the structure is for a group
      <br/>
      --                       or single node*/
      <br/>
      --      unsigned size:7; /*group size (0 for groups &gt; 128 members*/
      <br/>
      --      unsigned domain:1; /*domain reference*/
      <br/>
      --      unsigned member:7; /*node's member -
      <br/>
      --                       (0 for groups &gt; 128 members*/
      <br/>
      --      unsigned rpttimer:4; /*unacknowledged message service
      <br/>
      --                       repeat timer*
      <br/>
      --      unsigned retry:4; /*retry count*/
      <br/>
      --      unsigned rcvtimer:4; /*receive timer index*/
      <br/>
      --      unsigned         /*transmit timer index*/
      <br/>
      --      tx_timer:4;
      <br/>
      --      int group;       /*group id*/
      <br/>
      -- }
      <br/>
      -- struct subnetnode
      <br/>
      -- + unsigned type;   /*indicates whether the structure is for a group
      <br/>
      --                       or single node*/
      <br/>
      --      unsigned domain:1; /*domain reference*/
      <br/>
      --      unsigned node:7; /*node's -*/
      <br/>
      --      unsigned rpttimer:4; /*unacknowledged message service
      <br/>
      --                       repeat timer*
      <br/>
      --      unsigned retry:4; /*retry count*/
      <br/>
      --      unsigned rsvd:4; /*reserved*/
      <br/>
      --      unsigned         /*transmit timer index*/
      <br/>
      --      tx_timer:4;
      <br/>
      --      int subnet;      /*subnet*/
      <br/>
      -- }
    </p>
    <p num="97">
      It should be noted here that many of the present invention's concepts of groups, domains, subnets, acknowledged messages, etc. are described in greater detail with reference to U.S. patent application Ser.
      <br/>
      No. 07/621,737 filed Dec. 3, 1990 titled Network Communication Protocol (the '737 application) which is assigned to the assignee of the present invention and which is incorporated herein by reference.
    </p>
    <p num="98">
      Continuing with the description of assigning a network variable id to a connection, block 823, the first unassigned network id is assigned to the connection and the network variable id is written to the network variable table 902 for each node using the network.
      <br/>
      Thus, in the above example, the network variable id 000000000000002 may be assigned to the connection temp1_controls of Appendix Table III; the network variable id 000000000000012 may be assigned to the connection temp2_controls of Appendix Table III; and the network variable id 000000000000102 may be assigned to the connection temp3_controls of Appendix Table III.
      <br/>
      It should be noted that network variable ids need not be unique domain wide, but only need be unambiguous within the nodes involved.
    </p>
    <p num="99">
      Certain advantages gained through use of network variables have now been described such as the ability to automatically generate network addressing schemes from application level connections.
      <br/>
      In addition to allowing for such ease of use, network variables lead to generally smaller and less complicated application programs over other forms of network communication, such as prior art messaging techniques.
      <br/>
      Appendix Tables V and VI better illustrate differences between and certain advantages of use of the present invention's techniques over, for example, prior messaging techniques.
      <br/>
      Appendix Table V is a program written using network variables of the present invention.
      <br/>
      Appendix Table VI is a functionally equivalent program written using prior art messaging techniques.
      <br/>
      It is useful to note the comparative program statistics at the end of each program listing in which it is shown that the message program requires 626 bytes of ROM; 177 bytes of EEPROM; and 1314 bytes of RAM.
      <br/>
      By way of comparison, the network variables program requires only 335 bytes of ROM while using 231 bytes of EEPROM and only 1126 bytes of RAM.
    </p>
    <heading>SELF-IDENTIFYING STANDARD NETWORK VARIABLE TYPES</heading>
    <p num="100">
      It is desirable to provide for interoperability between nodes in a network.
      <br/>
      To provide for such interoperability, it is necessary to assure compatibility between network variables in the various nodes of a network.
      <br/>
      To facilitate such compatibility, as one feature of the present invention, a list of standard network variable types is provided by the assignee of the present invention.
      <br/>
      The currently preferred list of standard network variable types is provided as Appendix Table VII.
      <br/>
      By utilizing the list of standard network variable types, nodes in the network may be interrogated for information on the network variables employed by the node and the network may then be configured based on this information.
      <br/>
      This process is better illustrated with reference to FIG. 10.
    </p>
    <p num="101">
      Initially, a node which must be configured is coupled to the network medium, block 1001.
      <br/>
      After the node is coupled to the medium, an address of the node may be determined through any number of methods.
      <br/>
      At least one of such methods is described with reference to the '737 application.
      <br/>
      After having determined an address for the node, messages may be communicated to the node over the medium.
      <br/>
      In the preferred embodiment, a network management node is coupled to the medium which is useful for configuring the network.
      <br/>
      The network management node may communicate a command to the new node requesting its information on the network variables employed by the node, block 1002, or may alternatively read such information from a file which has already been placed in the network management node's memory.
    </p>
    <p num="102">
      In the preferred embodiment, in order to allow for the information to be stored in the network management node's memory, such information is made available for importation into the network management node via a binder interface file (BIF).
      <br/>
      The BIF file is a byproduct of the compilation process for each node, and contains all the information necessary to install the node on the network.
      <br/>
      This information is also referred to as the exposed interface of the node.
    </p>
    <p num="103">
      The BIF file for a new node may be provided to the network management node prior to installation of the new node on the network in order to allow a complete network database to be constructed in advance of, and separate from, the physical installation of the new node on the network.
      <br/>
      For example, the BIF file may be supplied to the network management node on diskette, over phone lines, or on through other computer readable media.
    </p>
    <p num="104">
      Information equivalent to the information stored in the BIF file is also preferably stored in the memory of the node.
      <br/>
      In this case the preferred embodiment confines the application writer to use of a list of standard network variable types when developing an application program designed to run on the node.
      <br/>
      The list of standard network variable types used by the system of the preferred embodiment is enumerated in Appendix Table VII.
      <br/>
      Use of the list of standard network variables minimizes the required space for storing the exposed interface in the node's memory.
      <br/>
      Storing the exposed interface in the node's memory offers the advantage of allowing the information to be retrieved without need for the network management node to include a floppy disk drive or other device for receiving externally communicated computer readable information.
      <br/>
      However, absent the option of providing the BIF file over such an external interface, the node must be physically connected on the same network with the network management node prior to construction of the network database.
      <br/>
      In the preferred embodiment, both options are available and the choice of how the exported interface is imported into the network management node is left up to the node designer.
    </p>
    <p num="105">
      The file layout for the BIF file of the preferred embodiment is given in Appendix Table IX.
      <br/>
      An example of a BIF file is given in Appendix Table X. This exemplary BIF file has been generated for the program given in Appendix Table V.
    </p>
    <p num="106">
      As was mentioned, in the preferred embodiment nodes may utilize the standard network variable types in declaration of network variables.
      <br/>
      The information describing its network variables is communicated (or exposed) by the node to the network management node, block 1003, using standard messaging features of the network.
      <br/>
      It will be understood that in alternative embodiments, information describing other, non-standard variable types may also be communicated in a manner similar to communicating the information on standard network variables.
    </p>
    <p num="107">
      The network management node receives the exposed network variable information, block 1004, and may then use information, including the network variable type, in verifying valid connections and in the binding process.
      <br/>
      Only network variables of identical types may be bound together in a single connection--thus, use of standard network variable types facilitates interoperability of nodes in the network as well as facilitating identification of network variables when a command is issued to expose the network variables of a node.
    </p>
    <p num="108">
      As one extension to the concept of self-identifying standard network types as just described, it is possible to include in the information transmitted responsive to receiving the command to expose network variable's text strings and even graphical icons to the network management node.
      <br/>
      Such information would make the nodes largely self-documenting.
    </p>
    <p num="109">EXTENSIONS TO THE "C" LANGUAGE</p>
    <p num="110">
      The present invention has implemented certain extensions and features to the "C" programming languages to support use of network variables--these extensions include (1) the already disclosed declarations of variables as network variables and the ability to declare such variables as standard network variable types; (2) declaration and use of I/O objects; and (3) scheduling clauses.
      <br/>
      Each of these extensions will be discussed in greater detail below.
      <br/>
      It should be noted that although the extensions have been preferably implemented in the "C" programming language, the idea and concepts of these extensions are not limited to use in this programming language and, in fact, these ideas and concepts may readily be extended to other programming languages.
    </p>
    <p num="111">Network Variable Declarations</p>
    <p num="112">
      As has been discussed, the present invention provides for declaration of network variables in C programs.
      <br/>
      Importantly, the declaration of network variables allows for declaring certain information for use by the above-described binding process.
      <br/>
      This process is better understood with reference to FIG. 11. Initially, a network variable is declared in a computer program intended to run on a node of the network of the present invention, block 1101.
      <br/>
      The preferred format for the declaration may be found with reference to Appendix Table VIII, below.
      <br/>
      As can be seen with reference to Appendix Table VIII, the declaration format preferably includes a set of parameters called bind_info.
      <br/>
      These parameters allow the network variable to be declared with an initial specification of protocol services.
      <br/>
      When the program is compiled, this initial information is output as part of the BIF file.
      <br/>
      The format of the BIF file may be found with reference to Appendix Table IX.
      <br/>
      As one option in declaring network variables, these parameters may be declared as configurable or non-configurable, block 1102.
      <br/>
      In this way, a programmer programming a node may make an initial determination as to the state the parameter should normally be set to.
      <br/>
      For example, the programmer may determine in a typical configuration, a particular network variable should use acknowledged message services.
      <br/>
      However, the programmer may also allow a network administrator flexibility in configuring and optimizing the network by declaring the acknowledged parameter as configurable.
      <br/>
      The program is then compiled and a compiled output is produced in the conventional manner.
      <br/>
      In addition to producing the conventional outputs of a compiler, e.g., object code, the compiler of the present invention produces the above-mentioned BIF file which includes information on the declared network variables such as the state of parameters and whether or not such parameters are configurable, block 1103.
    </p>
    <p num="113">
      During configuration of the network of the present invention, the state of these configurable parameters may be modified by the network administrator, block 1104.
      <br/>
      In the above-discussed example, the network administrator may determine the network will be optimally configured if the variable declared as acknowledged is actually configured as unacknowledged and repeated.
      <br/>
      It is worthwhile to again refer to FIG. 8(a) which illustrates, in addition to other steps in the connection process, the step of setting parameters for the connection, block 806.
      <br/>
      The parameters which are settable in this step of the configuration process are those parameters declared as configurable in the network variable declarations.
      <br/>
      These parameters are displayed on a display screen during the configuration process and may be modified by changing the state of the parameters on the display screen.
      <br/>
      For example, one of three states may be set to tell the network the type of service to be used for a network variable--unacknowledged, unacknowledged and repeated, and acknowledged.
      <br/>
      The authentication feature may be set to an on state in which message authentication is used or to an off state in which message authentication is not used.
      <br/>
      Also, network variable may be set to a priority state or a non-priority state indicating whether messages associated with the variable are to be sent as priority messages or as normal messages.
    </p>
    <p num="114">Declaration and Use of Objects</p>
    <p num="115">
      Each node of the present invention comprises its own scheduler, timers, and logical I/O devices.
      <br/>
      The "C" programming language employed by the present invention provides access to these devices through use of predefined objects; namely, an event scheduler which handles task scheduling for the node, timer objects which provide both millisecond and second timers, and I/O objects which provide for declaration of a number of logical I/O devices.
      <br/>
      Importantly, once declared a logical link is created between the object name and the physical device and references may be made to the object name to gain access to the physical device.
    </p>
    <p num="116">
      Declaration and use of objects will be discussed in greater detail by referring to declaration of I/O objects.
      <br/>
      Each node of the network of the present invention has a number of built-in electrical interface options for performing input and output.
      <br/>
      Prior to performing input or output, a program must declare an I/O object which interfaces with one of eleven I/O pins on the node; three serial pins 441 and eight parallel pins 445.
      <br/>
      The eleven pins are referred to with the reserved pin names: IO_0, IO_1, IO_2, IO_3, IO_4, IO_5, IO_6, IO_7, IO_8, IO_9, and IO_10.
      <br/>
      The declaration syntax for an I/O object and use of the eleven pins in the present invention is discussed further with reference to Appendix Table XI.
    </p>
    <p num="117">
      It is worthwhile to turn to FIG. 12 to discuss this concept in somewhat greater detail.
      <br/>
      Initially, a program statement is coded to declare an I/O device giving a pin designation, a device type and a device name; when the program is compiled the declaration statement causes declaration of the I/O device, block 1201.
      <br/>
      Other parameters and the format of the declaration for an I/O device in the preferred embodiment may be found with reference to Appendix Table XI.
      <br/>
      Responsive to declaring the I/O device, the pins are configured to perform the function specified by the device type, block 1202.
      <br/>
      The device types of the preferred embodiment may be found with reference to Appendix Table XI.
    </p>
    <p num="118">
      This process is further illustrated with reference to the exemplary network variable program of Appendix Table V and the associated assembly language code resulting from a compile of the program given in Appendix Table XIV.
      <br/>
      As can be seen with reference to the program source code in Appendix Table V, two I/O devices are declared, IO_0 as a bit output named MotorCtrl and IO_5 as a pulsecount input named pulseamps.
    </p>
    <p num="119">
      The specified device name is logically associated with the specified device to perform the designated I/O, block 1204.
      <br/>
      In this way, a reference may be simply made to the device name to accomplish the designated I/O with necessity of continued reference to specific pins and without need for special coding to implement the desired device types.
      <br/>
      As can be seen with reference to Appendix Table XII, built-in functions are provided to allow communication with the I/O devices.
      <br/>
      One of the built-in functions may be used to perform the built-in function referring to the desired device name to specify a hardware device, block 1204.
      <br/>
      The desired I/O is then performed in accordance with the device type specified in the device declaration, block 1205.
    </p>
    <p num="120">Scheduling</p>
    <p num="121">
      Scheduling on a node in the present invention is event driven.
      <br/>
      When a given condition becomes true, a body of code termed a task associated with that condition is executed.
      <br/>
      In the preferred embodiment, scheduling is accomplished through "when" statements.
      <br/>
      The syntax of a when statement of the preferred embodiment is given in Appendix Table XIII.
      <br/>
      An example of a when statement is given below:
    </p>
    <p num="122">
      --
      <br/>
      -- when (timer_expires (led_timer)) /*This line is the when clause*/
      <br/>
      -- +
      <br/>
      --   io_out (led, OFF); /*This is the task-turn the led off*/
      <br/>
      -- }
    </p>
    <p num="123">
      In the above example, when the application timer led_timer expires, the body of code following the when statement is executed (and the LED is turned off).
      <br/>
      When statements provide for execution of a task (the bracketed code) when the condition specified (e.g., the led_timer expires) evaluates to true.
      <br/>
      It is known in the art to provide structures in programming languages which allow for conditional execution of a task when a statement evaluates to true.
      <br/>
      However, in known systems which include a scheduling statement (a when statement or the equivalent), the event which is evaluated is a predefined event.
      <br/>
      As is noted in Appendix Table XIII, the present invention provides for use of predetermined events in scheduling statements.
      <br/>
      However, as one important aspect of the present invention, events may also be any valid C expression.
      <br/>
      For example, the following statement may be coded in a system of the present invention:
    </p>
    <p num="124">
      --
      <br/>
      -- when (x == 3) /*This line is the when clause*/
      <br/>
      -- +
      <br/>
      --   io_out (led, OFF); /*This is the task-turn the led off*/
      <br/>
      -- }
    </p>
    <p num="125">
      In this case, whenever the event x==3 occurs, the LED is turned off.
      <br/>
      Of course, significantly more complicated C programming statements may be envisioned to define an event.
      <br/>
      As will be understood by one of ordinary skill in the art, allowing evaluation of any valid language expression to define an event offers significant flexibility over known systems.
      <br/>
      The present invention further allows for use of multiple when statements to be associated with a single task.
      <br/>
      For example:
    </p>
    <p num="126">
      --
      <br/>
      -- when (powerup)            /*This line is one when clause*/
      <br/>
      -- when (reset)              /*This line is another when clause*/
      <br/>
      -- when (io_changes(io- switch)) /*This line is another when clause*/
      <br/>
      -- when (x = 3)       /*This line is another when clause*/
      <br/>
      -- +
      <br/>
      --   io_out(led,OFF); /*This is the task-turn the led off*/
      <br/>
      -- }
    </p>
    <p num="127">In this case, when any of the above events evaluates to true, the task is executed--e.g., the LED is turned off.</p>
    <p num="128">
      Importantly, as one aspect of the present invention, I/O objects may be referred to in an event clause allowing improved ease of programming of the system of the present invention.
      <br/>
      For example, two methods may be used to determine if an input value is new: (1) the io_update_occurs event may be used, referring to the desired device in a when statement or the io_in function may be used.
      <br/>
      The below two programs accomplish the same goal.
    </p>
    <p num="129">
      --
      <br/>
      -- PROGRAM 1
      <br/>
      --      IO_5 input pulsecount dev;
      <br/>
      --      when (io_update_occurs (dev))
      <br/>
      --         +
      <br/>
      --             /*perform the desired function*/
      <br/>
      --         }
      <br/>
      -- PROGRAM 2
      <br/>
      --      stimer t;
      <br/>
      --      IO_5 input pulsecount dev;
      <br/>
      --      when (timer_expires(t))
      <br/>
      --         +io_in (dev);
      <br/>
      --             if (input_is_new)
      <br/>
      --             /* perform the desired function */
      <br/>
      --             }
      <br/>
      --         }
    </p>
    <p num="130">The particular method chosen will depend on the individual case; however, the above is exemplary of the flexibility and ease of use of the system of the present invention.</p>
    <p num="131">
      Further, as an additional feature of the present invention and as is described with reference to Appendix Table VIII, the present invention provides for two levels of when clauses, priority when clauses and normal when clauses.
      <br/>
      Using this feature, it is possible to handle events which must be dealt with on a priority basis.
    </p>
    <p num="132">Selecting the Optimal Protocol Class of Service</p>
    <p num="133">
      FIG. 13 is a flow diagram illustrating a method of dynamically selecting an optimal protocol class of service, according to one embodiment of the present invention.
      <br/>
      At block 1305, the number of messages, N, to complete a transaction involving a network variable using an acknowledged service is determined.
      <br/>
      N includes the original message and the acknowledgments.
      <br/>
      N can be determined by referring to the group size (e.g., the number of reader and writer nodes involved in communication of the variable) which will be known by the network variable binder process at the beginning of the connection process.
    </p>
    <p num="134">
      At block 1310, the previously determined number of messages, N, required to complete a transaction involving the network variable using an acknowledged service is compared to the repeat count required to complete the same network variable transaction if an unacknowledged repeat service were employed.
      <br/>
      If N is greater than or equal to the repeat count, then processing branches to block 1315.
      <br/>
      However, if N is less than the repeat count, then the current protocol class will not be changed.
      <br/>
      That is, the network variable's protocol class will remain set to acknowledged service.
    </p>
    <p num="135">
      At block 1315, a determination is made as to whether any of the reader nodes require acknowledged service.
      <br/>
      If none of the programs on the reader nodes require acknowledged service, then at block 1320 the network variable's service class is changed from an acknowledged service class to an unacknowledged service class with repetition.
      <br/>
      Otherwise, if one or more of the programs on the reader nodes require acknowledged service, then the network variable's service class will remain set to acknowledged service.
    </p>
    <heading>PERFORMANCE OPTIMIZATIONS PERFORMED BY THE BINDER OF THE PREFERRED EMBODIMENT</heading>
    <p num="136">As was discussed above, when more than two nodes are used in a connection, the nodes may be recognized as a group and a group address may be assigned to the group of nodes.</p>
    <p num="137">
      The preferred embodiment also carries out other performance optimization routines to achieve minimal network traffic with resulting optimized response time.
      <br/>
      For example, the binder determines optimal protocol service class and addressing allocation at the time of binding variables in order.
      <br/>
      Illustrative of this, with reference to FIG. 3(b), three separate connections are shown, 321-323.
      <br/>
      Although this represents a typical optimal configuration, these three connections could be combined by the binder into a single group resulting in nodes sometimes receiving messages about network variable updates which are not used by those nodes.
      <br/>
      In such a configuration, although there are additional messages received by the nodes, no effect is seen by the application running on the node because the network variable messages include a 14-bit network variable identification.
      <br/>
      Therefore, nodes which have no need for a variable sent to them simply discard and, in the case of acknowledged service, acknowledge the message.
    </p>
    <p num="138">An advantage of grouping many nodes in a single group in the system of the preferred embodiment is that such grouping simplifies tasks for the binder process and further uses only one group address (the preferred embodiment is limited to 255 group addresses per domain).</p>
    <p num="139">
      Further, the binder of the present invention dynamically selects an optimal protocol class of service at the time of binding.
      <br/>
      This is done by first computing the number of messages it would take to complete a transaction on the first using acknowledged service (including the original message and the acknowledgements). (Note that this number is the group size which is known by the network variable binder process at the beginning of the connection process).
      <br/>
      Second, this number is compared with the repeat count for repeating message.
      <br/>
      If the repeat count is less than the group size, and none of the programs require acknowledged services (each program allows the config option for its network variables), then the binder dynamically converts the service from acknowledged to unacknowledged repeat.
      <br/>
      This reduces network traffic, thus improving response time.
    </p>
    <p num="140">Thus, an improved communication network having capability for communication of information between nodes in the network is described.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method comprising:</claim-text>
      <claim-text>determining a network's logical connection topology; enhancing the performance of the network based upon the network's logical connection topology.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method of claim 1, wherein the network's logical connection topology includes a first logical connection comprising one or more reader nodes and one or more writer nodes of a variable, the one or more reader nodes configured to receive a value of the variable from the one or more writer nodes, the method further comprising the steps of: determining a total number of nodes that are part of the first logical connection;</claim-text>
      <claim-text>and preventing transmission of acknowledgments in response to communication of the value if the total number of nodes is greater than a threshold value.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method of claim 2, wherein the step of determining a total number of nodes that are part of the first logical connection further comprises the step of accessing a group size indication stored in a first writer node of the one or more writer nodes.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method of claim 3, wherein the step of preventing transmission of acknowledgments in response to communication of the value further comprises the step of setting a service class attribute associated with the variable to an unacknowledged service class.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method of claim 4, wherein the threshold value comprises a repeat count associated with the unacknowledged service class.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A method comprising: detecting a value of a variable; determining whether or not to acknowledge communication involving a value of the variable in a network based upon the frequency at which the value is transmitted.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method of claim 6, further comprising the steps of: preventing transmission of an acknowledgment in response to a communication involving the value if the value is updated at greater than or equal to a predetermined frequency;</claim-text>
      <claim-text>and providing an acknowledgment in response to the communication if the value is updated at less than the predetermined frequency.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method of claim 7, wherein the step of preventing transmission of an acknowledgment further comprises the step of setting a service class attribute associated with the variable to an unacknowledged service class.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The method of claim 8, wherein the step of providing an acknowledgment further comprises the step of setting the service class attribute associated with the variable to an acknowledged service class.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. An improved method of communicating information in a network for sensing information and controlling one or more devices based upon the information, the network comprising a logical connection topology including a first logical connection for communication of a value of a variable, the first logical connection having a writer node, and a reader node coupled by a communication medium, the writer node configured to transmit the value to the reader node upon the happening of a predetermined event, wherein the improvement comprises the step of reducing network traffic attributable to transactions involving the variable based upon one or more characteristics of the first logical connection.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The method of claim 10, wherein the one or more characteristics of the first logical connection include a frequency at which the value is updated.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The method of claim 11, further comprising the step of suppressing acknowledgments in response to communication of the value if the value is updated on a relatively frequent basis.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 10, wherein the one or more characteristics of the first logical connection include a total number of nodes that are involved in communications of the value.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 13, further comprising the step of preventing transmission of acknowledgments in response to communication of the value if the total number of nodes is greater than a predetermined threshold value.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 10, further comprising the step of determining whether or not to provide acknowledgments in response to communication of the value.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A method of determining whether to acknowledge updates of variables in a network comprising the steps of if a variable's value is updated on a relatively frequent basis, then suppressing acknowledgments;</claim-text>
      <claim-text>and otherwise, providing acknowledgments.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 16, wherein the step of suppressing acknowledgments further comprises the step of setting a service class attribute associated with the variable to an unacknowledged service class.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 16, wherein the step of providing acknowledgments further comprises the step of setting a service class attribute associated with the variable to an acknowledged service class.</claim-text>
    </claim>
  </claims>
</questel-patent-document>