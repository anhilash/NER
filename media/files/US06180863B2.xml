<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06180863B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06180863</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6180863</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="15112344" extended-family-id="21819584">
      <document-id>
        <country>US</country>
        <doc-number>09306551</doc-number>
        <kind>A</kind>
        <date>19990506</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1999US-09306551</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>22386175</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>JP</country>
        <doc-number>13376198</doc-number>
        <kind>A</kind>
        <date>19980515</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998JP-0133761</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G10H   7/00        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>10</class>
        <subclass>H</subclass>
        <main-group>7</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G10H   1/02        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>10</class>
        <subclass>H</subclass>
        <main-group>1</main-group>
        <subgroup>02</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G10H   7/08        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>10</class>
        <subclass>H</subclass>
        <main-group>7</main-group>
        <subgroup>08</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>084603000</text>
        <class>084</class>
        <subclass>603000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>084622000</text>
        <class>084</class>
        <subclass>622000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>084659000</text>
        <class>084</class>
        <subclass>659000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G10H-007/00C3</text>
        <section>G</section>
        <class>10</class>
        <subclass>H</subclass>
        <main-group>007</main-group>
        <subgroup>00C3</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G10H-007/006</classification-symbol>
        <section>G</section>
        <class>10</class>
        <subclass>H</subclass>
        <main-group>7</main-group>
        <subgroup>006</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G10H-2240/311</classification-symbol>
        <section>G</section>
        <class>10</class>
        <subclass>H</subclass>
        <main-group>2240</main-group>
        <subgroup>311</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S10H-240/311</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>16</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>17</number-of-drawing-sheets>
      <number-of-figures>22</number-of-figures>
      <image-key data-format="questel">US6180863</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Music apparatus integrating tone generators through sampling frequency conversion</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>SUZUKI HIDEO</text>
          <document-id>
            <country>US</country>
            <doc-number>4942799</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4942799</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>TAMURA MOTOICHI</text>
          <document-id>
            <country>US</country>
            <doc-number>5942707</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5942707</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>TAMURA MOTOICHI</text>
          <document-id>
            <country>US</country>
            <doc-number>5945619</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5945619</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SUZUKI HIDEO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5955691</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5955691</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>SHIMIZU MASAHIRO</text>
          <document-id>
            <country>US</country>
            <doc-number>5696342</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5696342</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>TAMURA MOTOICHI</text>
          <document-id>
            <country>US</country>
            <doc-number>5728961</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5728961</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>TAMURA MOTOICHI</text>
          <document-id>
            <country>US</country>
            <doc-number>5750911</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5750911</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Yamaha Corporation</orgname>
            <address>
              <address-1>Hamamatsu, JP</address-1>
              <city>Hamamatsu</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>YAMAHA</orgname>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Tamura, Motoichi</name>
            <address>
              <address-1>Hamamatsu, JP</address-1>
              <city>Hamamatsu</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Morrison &amp; Foerster</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Donels, Jeffrey</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>GRANTED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A music apparatus has a central processor, a plurality of generator modules, and a program memory storing instructions for causing the central processor to execute a process of synthesizing a musical tone signal with the generator modules.
      <br/>
      The process includes the steps of commanding each of the generator modules to generate a predetermined number of samples of the musical tone signal at a common sampling period, and collecting the samples from each of the generator modules and processing the collected samples at the common sampling period to thereby synthesize the musical tone signal.
      <br/>
      The generator modules include a synchronous generator module that does generate the predetermined number of the samples at the common sampling period, and an asynchronous generator module that does not generate the predetermined number of the samples at the common sampling period.
      <br/>
      The asynchronous generator module is commanded to perform the steps of generating an equivalent number of samples at a local sampling period, and converting the equivalent number of the samples arranged at the local sampling period into the predetermined number of the samples arranged at the common sampling period to thereby pass the predetermined number of the samples to the collecting step at the common sampling period.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">The present invention generally relates to a tone synthesizing method, a tone processing method, and a tone synthesizing apparatus that is suitable for use in the tone synthesis based on software.</p>
    <p num="3">2. Description of Related Art</p>
    <p num="4">
      Various software programs are known for tone synthesis on computer systems.
      <br/>
      In these software programs, various tone generator modules such as FM tone generator, PCM tone generator, and physical model tone generator are provided, and tones synthesized by these modules are mixed together, thereby providing a desired tone signal.
    </p>
    <p num="5">
      The above-mentioned tone synthesizing technology requires to set the sampling frequencies of various modules to a common level.
      <br/>
      This makes it difficult to adopt those modules (for example, the physical model tone generator) which hardly operate with sampling frequencies other than a specific one.
      <br/>
      This prohibits users to use high-quality modules only because of discrepancy in sampling frequencies.
      <br/>
      Consequently, it has been difficult to achieve high-quality tone synthesis.
    </p>
    <p num="6">
      Further, if CPU power runs short in software-based tone synthesis, some countermeasures must be taken, such as partially skipping the tone synthesis processing for example.
      <br/>
      However, the conventional software cannot properly determine which part of the processing is to be skipped.
      <br/>
      This may inadvertently skip an essential processing operation, thereby significantly lowering the tone quality.
    </p>
    <p num="7">
      Still further, the conventional software-based tone synthesis frequently executes processing in some collective units (called a frame) because it is inefficient to execute the processing on a sample by sample basis.
      <br/>
      However, in imparting two or more sound effects in this frame-based processing, an improper imparting sequence may not provide sufficient sound effects.
      <br/>
      The sequence of applying the different effects is not considered in the conventional tone synthesizing software, thereby degrading the quality of synthesized tones.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="8">It is therefore an object of the present invention to provide a tone synthesizing method, a tone processing method, and a tone synthesizing apparatus, that synthesize quality tones based on software.</p>
    <p num="9">
      In a first aspect, an inventive method is designed for synthesizing a musical tone signal by executing a control program and a plurality of generator programs with a processor.
      <br/>
      The control program is executed to perform the steps of commanding each of the generator programs to generate a predetermined number of samples of the musical tone signal at a first sampling period, and collecting the samples from each of the generator programs and processing the collected samples at the first sampling period to thereby synthesize the musical tone signal.
      <br/>
      The generator programs include a synchronous generator program that does generate the predetermined number of the samples at the first sampling period, and an asynchronous generator program that does not generate the predetermined number of the samples at the first sampling period.
      <br/>
      The asynchronous generator program is executed to perform the steps of generating an equivalent number of samples at a second sampling period in response to the commanding from the control program, the equivalent number of the samples arranged at the second sampling period being determined to correspond to the predetermined number of the samples arranged at the first sampling period, and converting the equivalent number of the samples arranged at the second sampling period into the predetermined number of the samples arranged at the first sampling period to thereby pass the predetermined number of the samples to the control program at the first sampling period.
    </p>
    <p num="10">In a second aspect, an inventive method of synthesizing a musical tone signal comprises the steps of designating a first sampling period to determine a rate of synthesis of the musical tone signal, adopting a second sampling period from among a plurality of available sampling periods according to the designated first sampling period, generating the musical tone signal at the adopted second sampling period, converting the generated musical tone signal from the adopted second sampling period into the designated first sampling period when the second sampling period is different from the first sampling period to output the converted musical tone signal at the designated first sampling period, otherwise outputting the generated musical tone signal as it is when the adopted second sampling period is identical to the designated first sampling period, and processing the outputted musical tone signal at the designated first sampling period for the synthesis of the musical tone signal.</p>
    <p num="11">In a third aspect of the invention, a method of synthesizing a musical tone signal comprises the steps of commanding a generation of a predetermined number of samples of the musical tone signal at a first sampling period such that the predetermined number of the samples are sequentially arranged at the first sampling period, the generation being commanded recurrently to continue the musical tone signal, generating a practical number of samples of the musical tone signal in response to the commanding at a second sampling period which is different from the first sampling period, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples, collecting a number of samples generated but unprocessed in a previous generating step and reserved in a memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples, converting the collected number of the samples arranged at the second sampling period into the predetermined number of the samples arranged at the first sampling period to output the musical tone signal, and reserving the remaining part of the practical number of the samples generated but left in the current generating step into the memory for use in a next generating step.</p>
    <p num="12">In a fourth aspect of the invention, a method of synthesizing a musical tone signal comprises the steps of commanding a generation of a predetermined number of samples of the musical tone signal, the generation being commanded recurrently to continue the musical tone signal, generating a practical number of samples of the musical tone signal in response to the commanding, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples, collecting a number of samples generated but unprocessed in a previous generating step and reserved in a memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples, processing the collected number of the samples to synthesize the musical tone signal, and reserving the remaining part of the practical number of the samples generated but unprocessed in the current generating step into the memory for use in a next generating step.</p>
    <p num="13">
      In a fifth aspect, an inventive method is designed for synthesizing a musical tone signal by using a processor to sequentially execute a plurality of tone generator modules including a flexible one capable of altering a mode of generating a musical tone, and an inflexible one not capable of altering a mode of generating a musical tone.
      <br/>
      The inventive method comprises the steps of determining a sequence in the executing of the plurality of the tone generator modules such that the inflexible one precedes to the flexible one, executing the plurality of the tone generator modules in the determined sequence by the processor having a variable working load to generate the musical tones, controlling the flexible one to alter the mode of generating the musical tone dependently on the working load of the processor after the inflexible one has been executed in precedence to the flexible one, and mixing the musical tones generated from the plurality of the tone generator modules to synthesize the musical tone signal.
      <br/>
      Preferably, the inflexible one is capable of generating a fixed number of musical tones at once, and the flexible one is capable of generating a variable number of the musical tones at once such that the flexible one is controlled to alter the variable number of the musical tones dependently on the working load of the processor.
      <br/>
      Preferably, the flexible one is capable of altering a computation amount consumed to generate a musical tone, and the inflexible one is not capable of altering the computation amount such that the flexible one is controlled to alter the computation amount dependently on the working load of the processor.
    </p>
    <p num="14">
      In a sixth aspect, an inventive method is designed for processing a musical tone signal by sequentially executing a plurality of signal processing modules to impart corresponding effects to the musical tone signal.
      <br/>
      The inventive method comprises the steps of designating connections among the plurality of the signal processing modules, determining the sequence in the executing of the plurality of the signal processing modules according to the designated connections, generating a fragment of the musical tone signal at a predetermined interval, executing the plurality of the signal processing modules in the determined sequence at each predetermined interval to impart the corresponding effects to the fragment of the musical tone signal such that the fragment of the musical tone signal processed by a preceding signal processing module is passed to a succeeding signal processing module according to the designated connections, and mixing the fragments processed by the plurality of the signal processing modules to synthesize the musical tone signal.
    </p>
    <p num="15">
      In a seventh aspect, an inventive method is designed for synthesizing a musical tone signal by executing a control program and a plurality of music programs and by using a multiple of buffer memories.
      <br/>
      The control program is executed to perform the steps of commanding a sequential execution of the plurality of the music programs to sequentially process the musical tone signal, and passing the musical tone signal among the music programs by means of the buffer memories during the sequential execution of the music programs.
      <br/>
      The plurality of the music programs are executed to perform the steps of generating the musical tone signal and storing the musical tone signal in the buffer memories in response to the commanding step, processing the musical tone signal stored in the buffer memories in response to the commanding step, controlling a volume of the musical tone signal which is outputted by either of the generating step and the processing step, and accumulating the musical tone signal having the controlled volume into at least one of the buffer memories for synthesis of the musical tone signal.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="16">
      These and other objects of the invention will be seen by reference to the description, taken in connection with the accompanying drawings, in which:
      <br/>
      FIG. 1 is a block diagram illustrating a software configuration of one preferred embodiment of the invention;
      <br/>
      FIG. 2 s a schematic diagram illustrating an operation of the preferred embodiment shown in FIG. 1;
      <br/>
      FIG. 3 is a block diagram illustrating a hardware configuration of the preferred embodiment shown in FIG. 1;
      <br/>
      FIG. 4 is a schematic diagram illustrating a waveform interface used in the preferred embodiment shown in FIG. 1;
      <br/>
      FIG. 5 is a flowchart showing an integrated driver main routine;
      <br/>
      FIG. 6 is a diagram illustrating an operation of the preferred embodiment shown in FIG. 1;
      <br/>
      FIG. 7 is a diagram illustrating an operation of the preferred embodiment shown in FIG. 1;
      <br/>
      FIG. 8 is a schematic diagram illustrating a tone generator module registration window displayed on a display shown in FIG. 3;
      <br/>
      FIG. 9 is a schematic diagram illustrating a part setting window displayed on the display shown in FIG. 3;
      <br/>
      FIG. 10 is a flowchart showing a trigger occurrence event processing routine;
      <br/>
      FIG. 11 is a flowchart for a MIDI reception event processing routine;
      <br/>
      FIG. 12 is a flowchart for a waveform reception event processing routine;
      <br/>
      FIG. 13(A) is a diagram illustrating a structure of TGM registration data;
      <br/>
      FIG. 13(B) is a diagram illustrating a structure of EFM registration data;
      <br/>
      FIG. 13(C) is a diagram illustrating a structure of common data;
      <br/>
      FIG. 13(D) is a diagram illustrating a structure of part data;
      <br/>
      FIG. 13(E) is a diagram illustrating a structure of effect data;
      <br/>
      FIG. 14 is a flowchart for a module main routine;
      <br/>
      FIG. 15 is a flowchart for a MIDI event processing routine;
      <br/>
      FIG. 16 is a flowchart for a waveform generation trigger event processing routine;
      <br/>
      FIG. 17 is a flowchart for an insertion effect computation trigger event processing routine; and
      <br/>
      FIG. 18 is a flowchart for a system effect computation trigger event processing routine.
    </p>
    <heading>DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading>
    <p num="17">This invention will be described in further detail by way of example with reference to the accompanying drawings.</p>
    <p num="18">1. Hardware Configuration of the Embodiment</p>
    <p num="19">
      The following describes a hardware configuration of one preferred embodiment of the present invention with reference to FIG. 3.
      <br/>
      In the figure, reference numeral 21 denotes a CPU (Central Processing Unit) for controlling other components of the embodiment through a CPU bus 20 as instructed by a control program.
      <br/>
      Reference numeral 22 denotes a ROM (Read Only Memory) storing an initial program loader for example.
      <br/>
      Reference numeral 23 denotes a RAM (Random Access Memory) into which various programs and data are loaded for access by the CPU 21.
      <br/>
      Reference numeral 24 denotes a timer for generating an interrupt for the CPU 21 with a predetermined timing.
    </p>
    <p num="20">
      Reference numeral 25 denotes a MIDI interface (Musical Instrument Digital Interface) for transferring MIDI signals to and from an external MIDI device (not shown).
      <br/>
      Reference numeral 26 denotes a hard disk storing various device drivers, various application programs, and various items of performance information.
      <br/>
      Reference numeral 27 denotes a removable disk, which is a CD-ROM or an MO (Magneto Optical) disk storing items similar to those stored on the hard disk 26.
    </p>
    <p num="21">
      Reference numeral 28 denotes a display, which is constituted by a CRT (Cathode Ray Tube) display or a LCD (Liquid Crystal Device) display for displaying various items of information.
      <br/>
      Reference numeral 29 denotes a keyboard and mouse, through which the user enters various items of information into the CPU 21.
      <br/>
      Reference numeral 30 denotes a waveform interface for interfacing analog signal waveforms.
    </p>
    <p num="22">
      The following describes the details of the waveform interface 30 with reference to FIG. 4.
      <br/>
      In the figure, reference numeral 31 denotes an AD (Analog-to-Digital) converter for converting an inputted analog signal into a digital signal.
      <br/>
      Reference numeral 33 denotes a sampling clock generator for generating a clock signal having a predetermined sampling frequency.
      <br/>
      Reference numeral 32 denotes a first DMA (Direct Memory Access) controller for sampling an output signal of the AD converter 31 in synchronization with the clock signal, thereby transferring the sampled signal to a specified location in the RAM 23 in the manner of direct memory access.
    </p>
    <p num="23">
      Reference numeral 34 denotes a second DMA controller for reading, in the manner of direct memory access, digital waveform data from the RAM 23 in synchronization with the clock signal outputted from the sampling clock generator 33.
      <br/>
      Reference numeral 35 denotes a DA (Digital-to-Analog) converter for converting the digital waveform data read from the RAM 23 into an analog signal.
    </p>
    <p num="24">2. Software Configuration of the Embodiment</p>
    <p num="25">2.1 Overall Configuration of Software</p>
    <p num="26">
      The following describes a software configuration of the above-mentioned preferred embodiment with reference to FIG. 1.
      <br/>
      In the figure, reference numeral 2 denotes an operating system.
      <br/>
      Application programs and various drivers execute input/output processing with aid of the API (Application Program Interface) provided in the operating system in the form of a multimedia function.
      <br/>
      Reference numeral 1 denotes a music application software, one of the application programs.
    </p>
    <p num="27">
      The music application software 1 generates a MIDI-Out or WAVE-Out message when it becomes necessary to generate a tone.
      <br/>
      The MIDI-Out message outputs a tone signal as a MIDI signal.
      <br/>
      The WAVE-Out message outputs a tone signal as waveform data.
    </p>
    <p num="28">
      Reference numerals 5, 6, and so on denote tone generator modules such as FM tone generator, PCM tone generator, and physical model tone generator, which generate waveform data based on supplied MIDI signals.
      <br/>
      If a local sampling frequency TFs for use in the waveform data generation is different from a predetermined system sampling frequency SFs, the local waveform data sampling frequency TFs is converted to the system sampling frequency SFs.
      <br/>
      For example, the tone generator module 6 has an Fs converting block 6a for executing that conversion.
      <br/>
      If the local sampling frequency TFs is equal to the system sampling frequency SFs, the conversion is not required.
    </p>
    <p num="29">
      Typical sampling frequencies include 44.2 KHz, which is the sampling frequency for CD (Compact Disc), 22.1 KHz, which is a half of the CD sampling frequency, 32 KHz, 48 KHz, and so on.
      <br/>
      Reference numerals 7, 8, and so on denote effect modules for imparting effects such as reverberation and chorus to the supplied waveform data, based on effect algorithms unique to the effect modules.
      <br/>
      Reference numeral 3 denotes an integrated driver for controlling the tone generator modules 5, 6, and so on and the effect modules 7, 8, and so on, based on the above-mentioned MIDI-Out and WAVE-Out messages.
    </p>
    <p num="30">
      To be more specific, a MIDI signal supplied by a MIDI-Out port is distributed through a MIDI distribution block 3a to the tone generator module corresponding to the part represented by the MIDI signal.
      <br/>
      Receiving the MIDI signal, the tone generator module generates appropriate waveform data.
      <br/>
      To implement this operation, each tone generator module has a MIDI signal input buffer called an M buffer.
      <br/>
      The integrated driver 3 writes the content of a MIDI event to the M buffer of the corresponding tone generator module.
    </p>
    <p num="31">
      Reference 3b denotes a sampling frequency converting block.
      <br/>
      If the sampling frequency Fs of waveform data supplied through a WAVE-Out port is different from the system sampling frequency SFs, the sampling frequency converting block 3b converts the sampling frequency Fs into the system sampling frequency SFs and writes the converted results to a predetermined buffer area.
      <br/>
      Incidentally, the waveform data outputted from the tone generator modules 5, 6, and so on and the effect modules 7, 8, and so on are all accumulated to that predetermined buffer area.
      <br/>
      Reference 3d denotes a trigger generating and buffer control block for monitoring whether the buffer update operations have been completed or not.
      <br/>
      If the buffer update operations are completed, the buffer control block 3d generates a trigger for a next stage.
      <br/>
      The waveform data stored in the above-mentioned predetermined buffer area is inputted in the corresponding effect module or an Fs converting block 3e.
    </p>
    <p num="32">
      Reference numeral 11 denotes a CODEC (COder/DECoder) block, which is implemented by the waveform interface 30.
      <br/>
      Reference numeral 9 denotes a CODEC driver for driving the CODEC block 11.
      <br/>
      If the sampling frequency of the waveform data obtained through the trigger generating and buffer control block 3d (namely, the system sampling frequency SFs) is different from the output sampling frequency OFs of the CODEC block 11, the Fs converting block 3e in the integrated driver 3 converts the sampling frequency of that waveform data into the output sampling frequency OFs and outputs the converted results through a WAVE-Out to the CODEC driver 9.
    </p>
    <p num="33">2.2 Fs Converting Blocks</p>
    <p num="34">
      The Fs converting blocks 3b, 3e, and 6a are generally represented as shown in FIG. 2.
      <br/>
      To be more specific, each Fs converting block receives waveform data from a preceding block A, which operates at Fs=x Hz, converts the sampling frequency of the received waveform into Fs=y Hz, and supplies the same to a succeeding block B. These Fs converting operations depend on the relationship in a rate between the sampling frequency x and the sampling frequency y.
    </p>
    <p num="35">
      If x&gt;y, low-pass filtering is executed on the waveform data with y/2 Hz used as cutoff frequency.
      <br/>
      As a result, the sample value of each sampling point of the sampling frequency y is computed.
      <br/>
      If the sampling point in the waveform data outputted from the block A matches the sampling point of the sampling frequency y, a sampling value is computed likewise.
    </p>
    <p num="36">
      On the other hand, if x&lt;y, low-pass filtering is executed on the waveform data with x/2 Hz used as cutoff frequency.
      <br/>
      As a result, the sample value of each sampling point of the sampling frequency y is computed.
      <br/>
      Sample value computation is not executed where the sampling point of the waveform data outputted from the block A matches the sampling point of the sampling frequency y. In this case, the value outputted from the block A is used without change.
      <br/>
      Thus, regardless whether x&gt;y or x&lt;y, the waveform data of the sampling frequency x can be converted into the waveform data of the sampling frequency y while suppressing aliening noise.
    </p>
    <p num="37">
      Referring back to FIGS. 1 and 3, according to the first aspect of the invention, the inventive music apparatus is composed of a central processor in the form of the CPU 21, a plurality of generator modules including TG1, TG2 and so on, and a program memory such as ROM 23 and RAM 22 storing instructions for causing the central processor to execute a process of synthesizing a musical tone signal with the generator modules.
      <br/>
      The process comprises the steps of commanding each of the generator modules 5,6 and so on to generate a predetermined number of samples of the musical tone signal at a common sampling period, or system sampling period and collecting the samples from each of the generator modules and processing the collected samples at the common sampling period to thereby synthesize the musical tone signal.
      <br/>
      The generator modules include a synchronous generator module that does generate the predetermined number of the samples at the common sampling period, and an asynchronous generator module that does not generate the predetermined number of the samples at the common sampling period.
      <br/>
      The asynchronous generator module is commanded to perform the steps of generating an equivalent number of samples at a local sampling period, the equivalent number of the samples arranged at the local sample period being determined to correspond to the predetermined number of the samples arranged at the common sampling period, and converting the equivalent number of the samples arranged at the local sampling period into the predetermined number of the samples arranged at the common sampling period by means of the FS converter 6a to thereby pass the predetermined number of the samples to the collecting step at the common sampling period.
    </p>
    <p num="38">
      According to the second aspect of the invention, the inventive music apparatus is composed of a central processor in the form of CPU 21, and a program memory such as ROM 23 and RAM 22 storing instructions for causing the central processor to execute a process of synthesizing a musical tone signal.
      <br/>
      The process is executed by the steps of designating a common sampling period to determine a rate of synthesis of the musical tone signal, adopting a local sampling period from among a plurality of available sampling periods according to the designated common sampling period, generating the musical tone signal at the adopted local sampling period, converting the generated musical tone signal from the adopted local sampling period into the designated common sampling period when the local sampling period is different from the common sampling period to output the converted musical tone signal at the designated common sampling period, otherwise outputting the generated musical tone signal as it is when the adopted local sampling period is identical to the designated common sampling period, and processing the outputted musical tone signal at the designated common sampling period for the synthesis of the musical tone signal.
    </p>
    <p num="39">
      According to the third aspect of the invention, the music apparatus is composed of a central processor in the form of CPU 21, a buffer memory provided in a part of RAM 23, and a program memory such as ROM 22 storing instructions for causing the central processor to execute a process of synthesizing a musical tone signal.
      <br/>
      The process is executed by the steps of commanding a generation of a predetermined number of samples of the musical tone signal at a common sampling period such that the predetermined number of the samples are sequentially arranged at the common sampling period, the generation being commanded recurrently to continue the musical tone signal, generating a practical number of samples of the musical tone signal in response to the commanding at a local sampling period which is different from the common sampling period, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples, collecting a number of samples generated but unprocessed in a previous generating step and reserved in the buffer memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples, converting the collected number of the samples arranged at the local sampling period into the predetermined number of the samples arranged at the common sampling period to output the musical tone signal, and reserving the remaining part of the practical number of the samples generated but left in the current generating step into the buffer memory for use in a next generating step.
    </p>
    <p num="40">3. Data Structures of the Embodiment</p>
    <p num="41">
      The following describes various data structures used in the above-mentioned embodiment with reference to FIGS. 13(A) through 13(E).
      <br/>
      FIG. 13(A) illustrates TGM registration data associated with tone generator modules.
      <br/>
      The number of registered tone generator modules is recorded on top of the table, sequentially followed by the TGM registration data unique to each tone generator module.
      <br/>
      The TGM registration data contains data such as module names (for example, a brass instrument model) for specifying the tone generator modules.
    </p>
    <p num="42">
      FIG. 13(B) illustrates EFM registration data associated with effect modules.
      <br/>
      The number of registered effect modules is recorded on top of the table, sequentially followed by data such as module names for specifying the effect modules.
    </p>
    <p num="43">
      FIG. 13(C) illustrates common data for common use by the above-mentioned modules.
      <br/>
      The above-mentioned system sampling frequency SFs and the output sampling frequency OFs are included in this common data. T-sequence data determines a sequence in which each tone generator module is executed.
      <br/>
      MAX specifies the upper limit of the load of the CPU 21, which may be determined automatically by a benchmark test for example or manually by a user.
    </p>
    <p num="44">
      FIG. 13(D) illustrates part data including parameters for a maximum of 16 parts to be implemented by the tone generator modules and parameters associated with insertion effects.
      <br/>
      An insertion effect denotes an effect to be inserted in a part.
      <br/>
      Other effects, namely those to be imparted to a result of mixing two or more parts are referred to as system effects.
      <br/>
      Each part data PDn (n=1 to 16) has a tone module number TMN (alternatively a module name) indicative of the number of a corresponding tone generator module, the local sampling frequency TFs of a part in question, a timbre number TPN, and the maximum number of tones MT.
      <br/>
      The tone module number TMN selectively specifies one of the tone generator modules registered in the TGM registration data shown in FIG. 13(A).
    </p>
    <p num="45">
      PAN denotes a panning level.
      <br/>
      DS, 1S, 2S, and 3S denote send levels.
      <br/>
      The meanings of these levels will be described later.
      <br/>
      The insertion data includes a module number EMN (alternatively, a module name) indicative of an effect module for imparting an insertion effect, a part number of a part to which the insertion effect is imparted, and a parameter number for specifying a parameter for the effect processing.
      <br/>
      Two insertion effects may be set independently of each other.
      <br/>
      Each is executed, by an effect module specified by module number EMN and with use of a parameter specified by parameter number, on the tone signal of a part specified by the part number.
      <br/>
      If two insertion effects are set to one part, one is applied at the preceding stage while the other is applied at the succeeding stage.
      <br/>
      If none is imparted to a particular part, part number 0 is set to that part.
      <br/>
      For the module number EMN, one of the effect modules registered in the EFM registration data shown in FIG. 13(B) is selectively specified.
    </p>
    <p num="46">
      FIG. 13(E) illustrates effect data.
      <br/>
      The effect data is constituted by E-sequence data and three blocks of effect data EDn (n=1 to 3) by which the system effect is constituted.
      <br/>
      The E-sequence data determines a system effect execution sequence.
      <br/>
      In the effect data EDn of block n, EMNn denotes the module number (alternatively, the module name) of an effect module for executing the effect processing, and EPNn denotes the parameter number for specifying a parameter, used for the effect processing.
      <br/>
      EDSn through E3Sn denote send levels.
    </p>
    <p num="47">4. Operation of the Embodiment</p>
    <p num="48">4.1 Integrated Driver Main Routine</p>
    <p num="49">
      In operation, when the operating system 2 is started, the integrated driver 3 operates for executing an integrated driver main routine shown in FIG. 5.
      <br/>
      In step SP101, a predetermined initializing operation is executed.
      <br/>
      In the initialization, the T-sequence data indicative of a sequence by which two or more registered tone generator modules are sequentially executed is automatically determined.
      <br/>
      The determination is made by classifying the tone generator modules into those capable of wave-synthesizing two or more parts and others, the former being preferred in the synthesis.
    </p>
    <p num="50">
      Further, the tone generator modules are classified into those capable of changing a local sampling frequency and others, the former being preferred.
      <br/>
      In each group thus classified, those requiring larger CPU computations for generating one tone are preferred.
      <br/>
      This lowers the preference of the tone generator modules capable of modifying the computation for the tone generation, thereby making the load of the CPU 21 adjustable by those tone generator modules.
      <br/>
      Details of this point will be described later.
      <br/>
      It should be noted that the T-sequence data may also be manually modified any time.
    </p>
    <p num="51">
      In step SP102, each registered module is opened.
      <br/>
      In step SP103, it is determined whether a trigger has occurred.
      <br/>
      The trigger is any of the following:
    </p>
    <p num="52">
      (1) inputting of a MIDI-Out message from the music application software 1;
      <br/>
      (2) inputting of a trigger message from the operating system 2;
      <br/>
      (3) reception of waveform data from a module;
      <br/>
      (4) inputting of user settings through the keyboard &amp; mouse 29;
      <br/>
      (5) inputting of an end message from the operating system 2; and
      <br/>
      (6) inputting of other various messages.
    </p>
    <p num="53">
      In steps SP103 and SP104, the processing is kept in a wait state until any of these triggers is detected.
      <br/>
      When the trigger is detected, the corresponding processing is executed in step SP105.
      <br/>
      If the detected trigger is the inputting of an end message, the integrated driver 3 is terminated in step SP111.
      <br/>
      If another trigger is detected, corresponding processing is executed accordingly, after which the processing returns to step SP103.
      <br/>
      The following describes the details of the processing to be executed in response to the above-mentioned triggers.
    </p>
    <p num="54">4.2 Inputting of User Setting</p>
    <p num="55">4.2.1 Registering a Tone Module</p>
    <p num="56">
      When the user operates the keyboard or the mouse, the operation is detected in step SP103.
      <br/>
      Then, in step SP109, through steps SP104 and SP105, various settings may be executed for the integrated driver 3.
      <br/>
      When the user executes a predetermined operation, a tone module registration window 40 shown in FIG. 8 is displayed on the display 28.
      <br/>
      In the figure, reference numeral 41 denotes a module list box in which the module names of the registerable tone generator modules (installed on the hard disk 26 for example) are listed.
    </p>
    <p num="57">
      Reference numeral 44 denotes a registered module list box in which the module names of the tone generator modules registered in the integrated driver 3 are listed.
      <br/>
      Reference numeral 42 denotes an add button by which the user specifies registration of a new tone generator module.
      <br/>
      To be more specific, the user specifies (namely, by mouse clicking) any one of the module names in the module list box 41, and then clicks the add button 42.
      <br/>
      The selected tone generator module is added to the registered module list box 44.
      <br/>
      Then, the module names and the number of registered modules are stored in the TGM registration data shown in FIG. 13(A).
    </p>
    <p num="58">
      Reference numeral 43 denotes a delete button by which the user specifies deletion of a tone generator module listed in the registered module list box 44.
      <br/>
      To be more specific, when the user selects a tone generator module to be deleted in the registered module list box 44 and clicks the delete button, the selected tone generator module is deleted from the registered module list box 44.
      <br/>
      Namely, the module name of the deleted tone generator module is deleted from the TGM data shown in FIG. 13(A), and the number of registered modules is decremented by one.
      <br/>
      When, the user clicks an OK button 45, the new contents of the registered module list box 44 is confirmed.
      <br/>
      It should be noted that, when the user clicks a cancel button 46, the registered module in question is returned to the state as it was before displaying of the tone generator module registration window 40.
    </p>
    <p num="59">4.2.2 Setting a Part</p>
    <p num="60">
      When the user executes another predetermined operation, a part setting window 50 shown in FIG. 9 is displayed on the display 28.
      <br/>
      In the figure, reference numeral 51 denotes a part number display column in which part numbers 1 to 16 are displayed from top down.
      <br/>
      Reference numeral 52 denotes a timbre name display column in which timbre names assigned to parts are displayed.
      <br/>
      Reference numeral 53 denotes a module name display column in which the tone generator module names assigned to the parts are displayed.
    </p>
    <p num="61">
      Each module name display box 53 is a convolution box.
      <br/>
      When the user clicks a button 53a arranged at the right end, the list of the tone generator modules previously registered in the tone generator module registration window 40 is displayed on the display 28.
      <br/>
      When the user selects a desired tone generator module name from this list by mouse clicking, the selected tone generator module is set as a module to be assigned to the part in question.
      <br/>
      Then, the module number indicative of that module is stored as the TMN of that part as shown in FIG. 13(D).
    </p>
    <p num="62">
      When the user clicks the timbre name display column 52, the timbre name display column 52 changes to the convolution box, in which a list of the timbre names selectable in the tone generator modules displayed in the module name display column 53 is displayed.
      <br/>
      When the user clicks a desired timbre name, the selected timbre name is set as a timbre name to be assigned to the part in question.
      <br/>
      Then, the timbre number indicative of that timbre is stored as the TPN of that part as shown in FIG. 13(D).
    </p>
    <p num="63">
      Thus, the user can assign a desired timbre to each part by appropriately operating the module name display column 53 and the timbre name display column 52.
      <br/>
      Reference numeral 54 denotes a sampling frequency display column, in which the local sampling frequencies TFs of the parts are displayed.
      <br/>
      By executing an input operation in this display column, the user can set the local sampling frequency TFs of a part in question as shown in FIG. 13(D).
    </p>
    <p num="64">
      Meanwhile, the above-mentioned preferred embodiment has buffers WB1 through WB9 in the RAM 23 as shown in FIG. 4 to store waveform data.
      <br/>
      The waveform data generated in each tone generator module is multiplied by a send level and the resultant waveform data is stored in the buffers WB1 through WB7.
      <br/>
      The buffers WB1 and WB2 are used for stereo output for mixing tone signals finally outputted from the integrated driver 3.
      <br/>
      The buffers WB3 and WB4 are used for stereo input for mixing tone signals to be inputted in the first block EF1 of system effect.
      <br/>
      The buffers WB5 and WB6 are used for stereo input of the second block EF2 of system effect.
      <br/>
      The buffer WB7 is used for monaural input of the third block EF3 of system effect.
      <br/>
      The buffers WB8 and WB9 are used for monaural input into the insertion effects IEF1 and IEF2, respectively.
    </p>
    <p num="65">
      Referring to FIG. 9, reference numeral 55 denotes a panning level edit box, in which the left and right level ratio in dB in the above-mentioned stereo output is displayed.
      <br/>
      Further, by positioning the cursor to the panning level edit box 55, the user can set a desired panning level by use of the keyboard for example.
      <br/>
      This holds true for the other edit boxes.
    </p>
    <p num="66">
      Reference numeral 56 denotes a dry level edit box, in which a send level DS indicative of the mean value of the send level to the buffers WB1 and WB2 is displayed and set.
      <br/>
      Reference numeral 57 denotes a first effect level edit box, in which a send level 1S indicative of the mean value of the send level to the buffers WB3 and WB4 is displayed and set.
      <br/>
      Reference numeral 58 denotes a second effect level edit box, in which a send level 2S indicative of the mean value of the send level to the buffers WB5 and WB6 is displayed and set.
      <br/>
      The DS, 1S, and 2S of each part shown in FIG. 13(D) denote the send levels thus set.
    </p>
    <p num="67">
      The send level to the buffers WB1 through WB6 is determined by the corresponding one of the above-mentioned send levels and the panning level.
      <br/>
      For example, if the first effect level 1S is 20 dB and the panning level is 10 dB, the send level to the buffer WB1 is 20+10=30 dB.
      <br/>
      The send level to the buffer WB2 is 20-10=10 dB.
    </p>
    <p num="68">
      It should be noted that an edit box for setting a send level 3S to the buffer WB7 is provided for each part, but this edit box is not shown in the part setting window 50 in FIG. 9.
      <br/>
      This edit box can be displayed on the screen by operating a horizontal scroll bar 59 of the part setting window.
      <br/>
      It should be noted that, for the buffers WB8 and WB9, the level control by send is not executed.
      <br/>
      The above-mentioned values of panning level and send levels are for illustrative purposes only.
      <br/>
      Therefore, the user can set the values as desired.
    </p>
    <p num="69">4.2.3 Setting an Effect</p>
    <p num="70">
      The above-mentioned tone generator module registration window 40 and part setting window 50 are provided for setting or configuring the tone generator modules.
      <br/>
      When the user executes predetermined operations, like windows are displayed for effect module setting.
      <br/>
      Namely, the user can add or delete effect modules through an effect module registration window screen like the tone module registration window 40.
      <br/>
      The module names of registered effect modules and the number of registered effect modules are stored as the EFM registration data shown in FIG. 13(B).
      <br/>
      Through a system effect setting window like the part setting window 50, the user can set three blocks of effect data, namely each block's module number EMNn, parameter number EPNn, and send levels EDSn through E3Sn, which are stored in the storage areas of the blocks shown in FIG. 13(E).
      <br/>
      Likewise, through an insertion effect setting window, the user can set the module number EMN, part number, and parameter number of each of two insertion effects, which are stored as the insertion data shown in FIG. 13(D).
      <br/>
      Further, through a system setting window, the user can set the system sampling frequency SFs, output sampling frequency OFs, and CPU load upper limit MAX shown in FIG. 13(C).
      <br/>
      It should be noted that the effect data of each block of the system effect has no panning level that exists in the part data.
      <br/>
      The send level EDSn set in each block provides without change the send level common to the buffers WB1 and WB2.
      <br/>
      Likewise, E1Sn provides the send level to the buffers WB3 and WB4, E2Sn provides the send level to the buffers WB5 and WB6, and E3Sn provides the send level to the buffer WB7.
    </p>
    <p num="71">4.2.4 Tone Synthesizing System</p>
    <p num="72">
      For ease of understanding, an example of a tone synthesizing system configured in the part setting window 50 is shown with reference to FIGS. 6 and 7.
      <br/>
      In these figures, each solid-line arrow denotes that a send level other than 0 is set.
      <br/>
      In FIG. 6, for example, the solid-line arrows run from part 1 to buffers WB1, WB2, and WB5 through WB7.
      <br/>
      These arrows denote that the send levels DS1, 1S1, and 2S1 of the signals to these buffers take values other than 0, and the send level 1S1 to the buffers WB3 and WB4 are set to 0.
      <br/>
      TMN1 shown in parentheses under part 1 denotes the module number TMN1 (refer to FIG. 13(D)) of the tone generator module shown in part 1.
    </p>
    <p num="73">
      A solid-line arrow runs from part 2 to an insertion effect IEF1.
      <br/>
      This arrow denotes that "2" is set as the part number of a part to which the insertion effect IEF1 is to be imparted.
      <br/>
      Namely, a tone signal generated by the performing part 2 is supplied to the insertion effect IEF1 through the buffer WB8.
    </p>
    <p num="74">
      An insertion effect is level-controlled by the panning level and send level set to the part to which the insertion effect is to be imparted, and the resultant insertion effect is outputted to the associated buffer.
      <br/>
      In FIG. 6, solid-line arrows run from the insertion effect IEF1 to the buffers WB1 through WB4.
      <br/>
      This denotes that DS2 and 1S2 of the send levels set to the part 2 to which the insertion effect IEF1 is to be imparted are other than 0, and the send levels 2S2 and 3S2 are set to 0.
      <br/>
      It should be noted that the term "insertion effect" is generally used to mean "an effect to be inserted into a part." The label IEMN1 below the insertion effect IEF1 indicates module number IEMN1 (refer to FIG. 13(D)) of the effect module set to IEF1.
      <br/>
      The same holds true for parts 3 through 16, the connection having the send levels other than 0 are set being valid for each of these parts.
    </p>
    <p num="75">
      As described, WB1 and WB2 are buffers for stereo output, WB3 and WB4 are buffers for stereo input, WB5 and WB6 are buffers for stereo input of the second block EF2, and WB7 is a buffer for monaural input of the third block EF3.
      <br/>
      These are indicated by solid-line arrows running from the buffers WB3 and WB4 to the effect block EF1 for example in FIG. 7.
      <br/>
      The label EMN1 below the first block EF1 indicates the module number EMN1 (refer to FIG. 13(E)) of the effect module set to the first block EF1.
      <br/>
      Solid-line arrows run from the effect block EF1 to the buffers WB1, WB2, WB5, and WB6.
      <br/>
      This denotes that values other than 0 are set to the send levels EDS1 and E2S1 of the EF1, and 0 is set to the send level E3S1.
      <br/>
      The same holds true for the effect blocks EF2 and EF3, the connection corresponding to the send levels to which values other than 0 are set being valid for each of these blocks.
    </p>
    <p num="76">
      Thus, the desired system can be configured by appropriately setting the send levels from each part to the buffers WB1 through WB7, the part numbers of the parts to which insertion effects are imparted, and the send levels from each effect block to the buffers WB1 through WB7, as shown in FIGS. 6 and 7.
      <br/>
      Namely, in the seventh aspect of the invention, the inventive method is designed for synthesizing a musical tone signal by executing a control program and a plurality of music programs including tone generator programs and effect creation programs and by using a multiple of buffer memories.
      <br/>
      The control program is executed to perform the steps of commanding a sequential execution of the plurality of the music programs to sequentially process the musical tone signal according to the T-sequence data and E-sequence data, and passing the musical tone signal among the music programs by means of the buffer memories during the sequential execution of the music programs.
      <br/>
      The plurality of the music programs are executed to perform the steps of generating the musical tone signal and storing the musical tone signal in the buffer memories in response to the commanding step, processing the musical tone signal stored in the buffer memories in response to the commanding step, controlling a volume or send level of the musical tone signal which is outputted by either of the generating step and the processing step, and accumulating the musical tone signal having the controlled volume into at least one of the buffer memories for synthesis of the musical tone signal.
    </p>
    <p num="77">
      Meanwhile, the above-mentioned E-sequence data is automatically determined based on the tone synthesizing system of the effect blocks.
      <br/>
      In the example shown, the effect block EF1 has the send level E2S1 of a value other than 0 for the buffers WB5 and WB6.
      <br/>
      The output of this effect block is supplied to the effect block EF2 through the buffers WB5 and WB6.
    </p>
    <p num="78">
      If the processing of the effect block EF2 is executed before the effect block EF1, the result of the processing of the effect block EF1 is reflected on the processing result of the effect block EF2.
      <br/>
      Consequently, the processing of the effect block EF1 must always be executed before the effect block EF2.
      <br/>
      Likewise, the effect block EF2 has the send level E3S2 whose value is other than 0 to the buffer WB7 and the effect block EF3 selects the buffer WB7 as the input buffer.
      <br/>
      Consequently, the processing of the effect block EF2 must always be executed before the effect block EF3.
      <br/>
      Thus, in the example shown in FIG. 7, the E-sequence data is determined to specify the order of (1) EF1, (2) EF2, and (3) EF3. For other various connection examples, the above-mentioned analysis based on the send levels is also executed, thereby automatically determining the E-sequence data.
      <br/>
      The E-sequence data thus determined is stored in the E-sequence data storage area shown in FIG. 13(E).
      <br/>
      Namely, In the sixth aspect of the invention, the inventive method is designed for processing a musical tone signal by sequentially executing a plurality of signal processing modules to impart corresponding effects to the musical tone signal.
      <br/>
      The inventive method comprises the steps of designating connections among the plurality of the signal processing modules such as effect modules, determining the sequence in the executing of the plurality of the signal processing modules according to the designated connections, generating a fragment of the musical tone signal at a predetermined interval, executing the plurality of the signal processing modules in the determined sequence denoted by the E-sequence data at each predetermined interval to impart the corresponding effects to the fragment of the musical tone signal such that the fragment of the musical tone signal processed by a preceding signal processing module is passed to a succeeding signal processing module according to the designated connections, and mixing the fragments processed by the plurality of the signal processing modules to synthesize the musical tone signal.
    </p>
    <p num="79">4.3 Inputting a Trigger Message</p>
    <p num="80">
      As a general rule, a trigger message to be supplied from the operating system 2 occurs at a predetermined interval (for example, several milliseconds).
      <br/>
      As a general rule, the integrated driver 3, the tone generator modules 5, 6, and so on, and the effect modules 7, 8, and so on generate waveform data at each predetermined interval and output the generated waveform.
      <br/>
      This generates a sequence of waveform data along the time axis in each module.
      <br/>
      However, the intervals at which trigger messages are generated are not always accurate.
      <br/>
      They may be delayed or lost depending on the operating time of the operating system or other application program.
      <br/>
      If this happens, each module must generate waveform data that extends over the predetermined timing to compensate the delay or loss.
      <br/>
      The following describes this waveform data generating processing.
    </p>
    <p num="81">
      When a trigger message is supplied from the operating system 2, a trigger occurrence event processing routine shown in FIG. 10 starts in step SP107 shown in FIG. 5.
      <br/>
      Referring to FIG. 10, in step SP11, the current number of generated samples is determined according to the delay in the waveform generation.
    </p>
    <p num="82">
      Next, in step SP12, the storage areas for that number of samples are prepared in the buffers WB1 through WB9.
      <br/>
      The buffers WB1 through WB9 are buffer areas having a predetermined length (for example, 1024 words * 9) allocated in the RAM 23 beforehand.
      <br/>
      If a trigger message generation timing is normal, the areas are allocated in fragments (for example, 128 words * 9) in step SP12.
    </p>
    <p num="83">
      Obviously, if delay or loss of a trigger message occurs, the areas to be allocated are changed.
      <br/>
      In the above-mentioned preferred embodiment, the length of each of the buffers WB1 through WB9 is referred to as a frame.
      <br/>
      The frame is also a unit in which waveform data is outputted.
    </p>
    <p num="84">
      In step SP13, the waveform buffers WB1 through WB9 and the number of the samples are assigned to the top tone generator module specified in the T-sequence data and a waveform generating trigger is sent to that module.
      <br/>
      This waveform generating trigger is an instruction for starting the synthesizing of waveform data and includes the number of samples of waveform data to be generated in the buffers WB1 through WB9.
      <br/>
      When these processing operations have been completed, the processing returns to the integrated driver main routine (refer to FIG. 5).
      <br/>
      In the main routine, a waveform generating trigger event processing routine shown in FIG. 16 starts in the process of the top tone generator module based on the waveform generating trigger that was sent.
      <br/>
      The details of the processing routine will be described later.
    </p>
    <p num="85">4.4 Inputting a MIDI-Out Message</p>
    <p num="86">
      When a MIDI-Out message is inputted from the music application software 1, the processing goes to step SP106 in the integrated driver main routine (refer to FIG. 5), in which a MIDI reception event processing routine shown in FIG. 11 starts.
      <br/>
      In the figure, when the processing goes to step SP14, the contents of the event associated with the MIDI-Out message are stored in a variable ED.
      <br/>
      At the same time, the time at which the MIDI-Out message was received is stored in a variable ET.
    </p>
    <p num="87">
      In step SP15, it is determined whether module switching is requested in the MIDI-Out message.
      <br/>
      Generally, the tone generator module switching is instructed by a MIDI program change message and/or a control change message, and the effect module switching is instructed by a parameter change message.
      <br/>
      If one tone generator module or one effect module supports two or more timbres or effects and timbre switching or effect switching is executed in that range, no module switching occurs.
    </p>
    <p num="88">
      If the decision is YES in step SP15, then, in step SP18, the tone generator module of the specified part is changed to a new tone generator module or the specified effect is set.
      <br/>
      However, if the specified tone generator module or effect module is not included in the registered range, an alternate module is set.
    </p>
    <p num="89">
      On the other hand, if the decision is NO in step SP15, the processing goes to step SP16.
      <br/>
      In this step, a module to which the MIDI-Out message is to be sent is determined according to the contents of the message.
      <br/>
      For example, in the case of a note-on or note-off message, that message corresponds to particular one of the parts, so that the tone generator module for use in generating the particular part is selected as the destination module.
      <br/>
      For an event such as effect amount change, a corresponding effect module is selected as the destination.
    </p>
    <p num="90">
      In step SP17, the event contents ED and the reception time ET are written to the M buffer of the destination module.
      <br/>
      When the above-mentioned processing is completed, the processing flow returns to the integrated driver main routine (refer to FIG. 5).
      <br/>
      Based on the data written to the M buffer, a MIDI event processing routine shown in FIG. 15 starts as another process.
      <br/>
      This will be described later in detail.
    </p>
    <p num="91">4.5 Receiving Waveform Data</p>
    <p num="92">
      Every time waveform data generation or effect processing is completed in any one of the tone generator modules 5, 6, and so on or the effect modules 7, 8, and so on, the completion is detected in step SP103 of the integrated driver main routine (refer to FIG. 5).
      <br/>
      In doing so, the waveform buffers WB1 through WB9 are returned from each module.
      <br/>
      The waveform data processed in the module in question is stored in these waveform buffers.
      <br/>
      Based on the stored waveform data, the processing goes to step SP108, in which a waveform receiving event processing routine shown in FIG. 12 starts.
      <br/>
      In step SP21 shown in FIG. 12, it is determined whether the processing of the insertion effect corresponding to the tone generator module executed last has been completed.
      <br/>
      This determination is made when there exists a relationship between the part 2 and the insertion effect IEF1 shown in FIG. 6, and immediately after completion of the generation of the waveform data in the tone generator module TMN2 set to the part 2.
      <br/>
      If the decision is YES, then the processing goes to step SP25.
      <br/>
      In this step, the waveform buffers WB1 through WB9, the number of generated samples, and an insertion computation trigger are sent to the effect module EFM specified by module number IEMN1, upon which a computation trigger event processing routine (refer to FIG. 17) starts in the process of the effect module EFM in question.
    </p>
    <p num="93">
      On the other hand, if the decision is NO in step SP21, then it is determined whether any of the tone generator modules is generating the waveform data corresponding to the current trigger message in step SP22.
      <br/>
      If the decision is YES, the processing goes to step SP26.
      <br/>
      In this step, the waveform buffers WB1 through WB9, the number of samples, and the waveform generating trigger are sent to a next tone generator module according to the T-sequence data, upon which a waveform generating trigger event processing routine (refer to FIG. 16) starts in the process of the tone generator module TGM in question.
      <br/>
      When the processing of step SP25 or SP26 has been executed, the processing returns to the integrated driver main routine (refer to FIG. 5).
    </p>
    <p num="94">
      In view of the above-mentioned processing, the waveform computation of the portion associated with tone generator modules and insertion effect modules is executed on the tone synthesizing systems as shown in FIGS. 6 and 7 before the system effect module processing.
      <br/>
      This is because no system effect can be impart unless the waveform data generated by tone generator modules and insertion effects is identified.
      <br/>
      However, execution of the tone synthesizing system by the CPU 21 may cause a problem.
      <br/>
      To be more specific, if there is no processing power enough for operating the system effects after operating a tone generator module by the CPU 21, the processing of some of the system effects must be omitted.
      <br/>
      This presents a significant auditory problem.
    </p>
    <p num="95">
      To circumvent this problem, if the CPU 21 processing power is insufficient, the above-mentioned preferred embodiment sacrifices some of the tone generator modules, preventing the problem from affecting the system effects.
      <br/>
      To be more specific, when sending the waveform generating trigger to the last tone generator module in the T-sequence in step SP26, the remaining amount of the CPU load is computed in advance.
    </p>
    <p num="96">
      If the CPU power is found short, one of the following measures is taken to mitigate the CPU load associated with the tone generator module in question:
      <br/>
      (1) the number of tones of the last tone generator module is reduced;
      <br/>
      (2) if the local sampling frequency TFs of the last tone generator module is variable, the TFs is lowered; and
      <br/>
      (3) the processing contents (namely, music generating algorithm) of the last tone generator module are changed to simpler one.
    </p>
    <p num="97">
      Obviously, the above-mentioned measures cannot completely avoid the adverse effect on generated tones.
      <br/>
      However, taking these measures is often better than encountering a trouble in which a system effect is abruptly discontinued.
      <br/>
      In determining the T-sequence data described before, control is executed so that tone generator modules which are modifiable or alterable in computation contents and have more tone generating channels are placed backward in the sequence.
      <br/>
      This is because these flexible tone generator modules are suitable for CPU load adjustment.
      <br/>
      Namely, In the fifth aspect of the invention, the inventive method is designed for synthesizing a musical tone signal by using a processor to sequentially execute a plurality of tone generator modules including a flexible one capable of altering a mode of generating a musical tone, and an inflexible one not capable of altering a mode of generating a musical tone.
      <br/>
      The inventive method comprises the steps of determining a sequence in the executing of the plurality of the tone generator modules such that the inflexible one precedes to the flexible one, executing the plurality of the tone generator modules in the determined sequence by the processor having a variable working load to generate the musical tones, controlling the flexible one to alter the mode of generating the musical tone dependently on the working load of the processor after the inflexible one has been executed in precedence to the flexible one, and mixing the musical tones generated from the plurality of the tone generator modules to synthesize the musical tone signal.
      <br/>
      Preferably, the inflexible one is capable of generating a fixed number of musical tones at once, and the flexible one is capable of generating a variable number of the musical tones at once such that the flexible one is controlled to alter the variable number of the musical tones dependently on the working load of the processor.
      <br/>
      Preferably, the flexible one is capable of altering a computation amount consumed to generate a musical tone, and inflexible one is not capable of altering the computation amount such that the flexible one is controlled to alter the computation amount dependently on the working load of the processor.
    </p>
    <p num="98">
      Thus, when a final waveform generating trigger has been sent to the last tone generator module, all of the waveform data are generated, thereby generating a waveform data receiving event.
      <br/>
      If this happens, the processing goes to step SP23 through the steps SP21 and SP22.
      <br/>
      In step SP23, it is determined whether there is any effect module not yet processed.
      <br/>
      It should be noted that, of the effect processing operations to be executed by an effect module, the insertion effect processing has all been completed before the execution of step SP23 (refer to steps SP21 and SP25).
    </p>
    <p num="99">
      If the decision is YES in step SP23, the processing goes to step SP27.
      <br/>
      In step SP27, the waveform buffers WB1 through WB9, the number of generated samples, and a computation trigger are sent to the effect module set to a next effect block EFn according to the E-sequence data, upon which a computation trigger event processing routine (refer to FIG. 18) starts in the process of that effect module.
      <br/>
      When the effect processing of the waveform data in that effect module has been completed, the waveform receiving event processing routine (refer to FIG. 12) is called again.
      <br/>
      The processing of step SP27 is repeated until the processing of all effect modules is completed.
    </p>
    <p num="100">
      When this routine is called again after completion of the effect processing of the waveform data in the last effect module, the decision is NO in step SP23, upon which the processing goes to step SP24.
      <br/>
      It should be noted that, when the processing goes to SP24, the generation of the waveform data responsive to the trigger messages has been all completed.
      <br/>
      In step SP24, it is determined whether one frame of waveform data has been generated.
      <br/>
      If the decision is YES, the processing goes to step SP28, in which reservation is made for reproduction by the CODEC driver of one frame of the waveform data stored in the buffers WB1 and WB2.
      <br/>
      It should be noted that, if the system sampling frequency SFs is different from the output sampling frequency OFs (which is equal to the sampling frequency of the CODEC), sampling frequency conversion processing by the Fs converting block 3e is also executed in step SP28.
    </p>
    <p num="101">
      In step SP29, new buffers WB1 through WB9 are allocated in the RAM 23, clearing the contents thereof.
      <br/>
      The new buffers are allocated because the contents of the used buffers WB1 and Wb2 have been not yet outputted and therefore the RAM 23 is left uncleared.
    </p>
    <p num="102">4.6 Main Routine of Each Module</p>
    <p num="103">
      The following describes detail operations of the tone generator modules 5, 6, and so on and the effect modules 7, 8, and so on.
      <br/>
      First, for the registered modules, the module main routine shown in FIG. 14 is executed at the start of the integrated driver 3.
      <br/>
      For the modules newly registered through the registration window as shown in FIG. 8, the module main routine starts at the registration.
      <br/>
      In either case, the module main routine starts in separate processes.
    </p>
    <p num="104">
      In step SP31, a predetermined initializing operation is executed.
      <br/>
      For the modules capable of selecting local sampling frequency TFs, an optimum local sampling frequency TFs is selected according to the system sampling frequency SFs.
      <br/>
      To be more specific, if the system sampling frequency SFs can be matched with the local sampling frequency TFs, the sampling frequency conversion processing is unnecessary.
      <br/>
      Therefore, the matching frequency is selected with top priority.
      <br/>
      For example, if one of 44 KHz and 22 KHz is selectable as local sampling frequency TFs and the system sampling frequency SFs is 22 KHz, no advantage is gained in generating waveform data at 44 KHz, so that the local sampling frequency TFs is set to 22 KHz.
      <br/>
      It should be noted that if a local sampling frequency TFs that matches the system sampling frequency SFs does not exist, a frequency nearest to the system sampling frequency SFs is selected.
      <br/>
      If there exist two nearest frequencies, the lower one is selected.
    </p>
    <p num="105">
      In step SP32, it is determined whether a trigger has occurred.
      <br/>
      The trigger is one of the following:
      <br/>
      (1) occurrence of a MIDI event (writing of event contents ED and reception time ET to the M buffer in step SP17);
      <br/>
      (2) reception of various triggers (in steps SP17, SP25, and so on);
      <br/>
      (3) inputting of an end message by the operating system, or module registration or deletion through the registration window as shown in FIG. 8; and
      <br/>
      (4) inputting of other messages.
    </p>
    <p num="106">
      In steps SP32 and SP33, the processing waits until some trigger occurs.
      <br/>
      When a trigger has occurred, the processing goes to step SP34, in which the processing responsive to the detected trigger is executed.
      <br/>
      If inputting of an end message is detected, the processing goes to step SP38, in which the terminate processing of the module main routine is executed.
      <br/>
      In other cases, the processing responsive to a detected trigger is executed and then the processing routine returns to step SP32.
      <br/>
      The following describes the processing operations responsive to various triggers in various cases.
    </p>
    <p num="107">4.7 MIDI Event Processing Routine</p>
    <p num="108">
      When writing of a MIDI event to the M buffer is detected in step SP32, the processing goes to step SP35 in the module main routine, thereby calling the tone generator module MIDI event processing routine as shown in FIG. 15. In step SP41, event contents ED and the reception time ET are read from the M buffer.
      <br/>
      It should be noted that these items of data were written to the M buffer in step SP17 of the MIDI receiving event processing routine (refer to FIG. 11).
      <br/>
      Next, in step SP42, the event contents ED are converted into parameter data PD.
      <br/>
      For example, if the event contents ED are a note-on, a part, a pitch, and a velocity of the note are specified.
      <br/>
      If the tone generator module is an FM tone generator, the pitch and the velocity are converted based on a timbre of the selected part into parameter data PD including such parameters unique to the FM tone generator as individual operator's frequency, phase, and level.
      <br/>
      At the same time, a sounding channel for sounding a resultant tone is determined.
    </p>
    <p num="109">
      In step SP43, the parameter data PD, the sounding channel, and the reception time ET are written to a storage area for the part in question in the P buffer (parameter buffer) allocated to that module.
      <br/>
      Then, the processing flow returns to the module main routine (refer to FIG. 14).
    </p>
    <p num="110">4.8 Waveform Generating Trigger Event Processing Routine (FIG. 16)</p>
    <p num="111">
      When reception of a waveform generating trigger is detected in step SP32 of the module main routine, then a waveform generating trigger event processing routine shown in FIG. 16 of the tone generator module is called in step SP36.
      <br/>
      It should be noted that this waveform generating trigger has occurred in step SP13 of the trigger generating event processing routine (refer to FIG. 10) and step SP26 of the waveform receiving event processing routine (refer to FIG. 12).
    </p>
    <p num="112">
      In step SP51 in FIG. 16, pointers of the write addresses of the buffers WB1 through WB9 and the number of generated samples to be generated are received.
      <br/>
      Because the number of the samples is a value counted in terms of system sampling frequency SFs, it does not always match the number of actually generated samples in the tone generator module in question.
      <br/>
      Therefore, in step SP52, the number of the samples in terms of the system sampling frequency SFs is converted into the number of the samples in terms of the local sampling frequency TFs based on the ratio of system sampling frequency SFs to local sampling frequency TFs.
    </p>
    <p num="113">
      If the waveform generating trigger event processing routine was executed before, some samples may have been generated.
      <br/>
      Details of this point will be described later.
      <br/>
      Briefly, in this case, the already generated samples are carried over to the waveform data to be outputted this time.
      <br/>
      Therefore, the required number of samples is obtained by subtracting the number of already generated samples from the number of the samples measured in local sampling frequency TFs.
    </p>
    <p num="114">
      In step SP53, multiple channels of waveform data is generated while updating the contents of the registers in the tone generator module based on the parameter data PD in the P buffer, the generated waveform data being accumulated in a module waveform buffer MWB.
      <br/>
      The module waveform buffer MWB is allocated for each module in addition to the buffers WB1 through WB9.
      <br/>
      The module waveform buffer MWB is also allocated for each part if the tone generator module in question generates waveform data for multiple parts.
      <br/>
      In step SP53, the waveform data is generated in a practical number of samples suitable for the processing of the module, this practical number of samples being greater than the required number of samples.
    </p>
    <p num="115">
      For example, if the CPU 21 has a cache capability or a parallel processing capability and is capable of efficiently generating 16 samples of waveform data for example, setting the number of samples to be generated to a multiple of 16 leads to the most efficient use of the processing capacity of the CPU 21.
      <br/>
      For example, if the required number of samples obtained in step SP52 is 130, 144 samples which are the lowest of the multiples of 16 and higher than 130 are generated.
    </p>
    <p num="116">
      Besides, the number of samples to be generated depends on not only hardware but also software requirements.
      <br/>
      For example, a technique is known in which the envelop waveform of a tone signal is updated not for every sample but every 16 samples for example to mitigate the processing load.
      <br/>
      In this case also, the number of samples to be generated is preferably set to a multiple of 16.
    </p>
    <p num="117">
      In step SP54, the required number of samples (130 in the above-mentioned example) of waveform data are taken from the module waveform buffer MWB, and the sampling frequency TFs of this waveform data is converted into the system sampling frequency SFs.
      <br/>
      If the sampling frequency TFs is equal to the system sampling frequency SFs, the sampling frequency TFs need not be converted, so that step SP54 is skipped.
      <br/>
      In step SP55, outputting of the waveform of the first part stored in the module waveform buffer MWB is prepared.
      <br/>
      The first part denotes the first one of multiple parts to be generated in the tone generator module in question.
      <br/>
      Therefore, this first part does not always match the part 1 of MIDI.
    </p>
    <p num="118">
      As described above, the inventive method is designed according to the first aspect of the invention for synthesizing a musical tone signal by executing a control program and a plurality of generator programs or the tone generator modules with a processor.
      <br/>
      The control program is executed to perform the steps of commanding each of the generator programs to generate a predetermined number of samples of the musical tone signal at a first sampling period(system sampling period), and collecting the samples from each of the generator programs and processing the collected samples at the first sampling period to thereby synthesize the musical tone signal.
      <br/>
      The generator programs include a synchronous generator program that does generate the predetermined number of the samples at the first sampling period, and an asynchronous generator program that does not generate the predetermined number of the samples at the first sampling period.
      <br/>
      The asynchronous generator program is executed to perform the steps of generating an equivalent number of samples at a second sampling period (local sampling period) in response to the commanding from the control program, the equivalent number of the samples arranged at the second period being determined to correspond to the predetermined number of the samples arranged at the first sampling period, and converting the equivalent number of the samples arranged at the second sampling period into the predetermined number of the samples arranged at the first sampling period to thereby pass the predetermined number of the samples to the control program at the first sampling period.
    </p>
    <p num="119">As described above, according to the second aspect of the invention, the inventive method of synthesizing a musical tone signal comprises the steps of designating a first sampling period to determine a rate of synthesis of the musical tone signal, adopting a second sampling period from among a plurality of available sampling periods according to the designated first sampling period, generating the musical tone signal at the adopted second sampling period, converting the generated musical tone signal from the adopted second sampling period into the designated first sampling period when the second sampling period is different from the first sampling period to output the converted musical tone signal at the designated first sampling period, otherwise outputting the generated musical tone signal as it is when the adopted second sampling period is identical to the designated first sampling period, and processing the outputted musical tone signal at the designated first sampling period for the synthesis of the musical tone signal.</p>
    <p num="120">As described above, According to the third aspect of the invention, the inventive method of synthesizing a musical tone signal comprises the steps of commanding a generation of a predetermined number of samples of the musical tone signal at a first sampling period such that the predetermined number of the samples are sequentially arranged at the first sampling period, the generation being commanded recurrently to continue the musical tone signal, generating a practical number of samples of the musical tone signal in response to the commanding at a second sampling period which is different from the first sampling period, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples, collecting a number of samples generated but unprocessed in a previous generating step and reserved in a memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples, converting the collected number of the samples arranged at the second sampling period into the predetermined number of the samples arranged at the first sampling period to output the musical tone signal, and reserving the remaining part of the practical number of the samples generated but left in the current generating step into the memory for use in a next generating step.</p>
    <p num="121">As described above, according to the fourth aspect of the invention, the inventive method of synthesizing a musical tone signal comprises the steps of commanding a generation of a predetermined number of samples of the musical tone signal, the generation being commanded recurrently to continue the musical tone signal, generating a practical number of samples of the musical tone signal in response to the commanding, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples, collecting a number of samples generated but unprocessed in a previous generating step and reserved in a memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples, processing the collected number of the samples to synthesize the musical tone signal, and reserving the remaining part of the practical number of the samples generated but unprocessed in the current generating step into the memory for use in a next generating step.</p>
    <p num="122">
      In step SP56, it is determined whether an insertion effect is set to the part in question.
      <br/>
      If the decision is YES, then, in step SP58, the waveform data of the part in question in the module waveform buffer MWB is written to the buffer WB8 or WB9.
      <br/>
      At the same time, the send level and panning level of the part in question are also written.
    </p>
    <p num="123">
      In step SP59, it is determined whether there remain any parts for which the waveform data is to be generated in the tone generator module in question.
      <br/>
      If the decision is YES, then, in step SP60, the waveform data of the next part stored in the module waveform buffer MWB is prepared, upon which the processing goes back to step SP56.
      <br/>
      If no insertion effect is set in this new part, the processing goes to step SP57.
      <br/>
      In step SP57, the send level corresponding to the send level and the panning level set to that part is multiplied by the waveform data in the buffers WB1 through WB7, each multiplication result being added to the original values of the buffers WB1 through WB7.
    </p>
    <p num="124">
      The processing of step SP57 or SP58 is likewise executed on all parts for which waveform data is generated by the tone generator module in question.
      <br/>
      In step SP61, the integrated main driver routine (refer to FIG. 5) is notified of the completion of the update operations for the buffers WB1 through WB9.
      <br/>
      This starts the waveform receiving processing (step SP108) as described above, calling the waveform receiving event processing routine (refer to FIG. 12).
    </p>
    <p num="125">4.9 Computation Trigger Event Processing Routine (FIG. 17)</p>
    <p num="126">
      If the reception of a computation trigger for the insertion effect is detected in step SP32 of the module main routine, an effect module waveform generating trigger event processing routine shown in FIG. 17 is called in step SP36.
      <br/>
      This computation trigger has occurred for the insertion effect in step SP25 of the waveform receiving event processing routine (refer to FIG. 12).
      <br/>
      It should be noted that, if a system effect trigger has occurred in step SP27, another routine shown in FIG. 18 to be described later is called.
    </p>
    <p num="127">
      Now, in step SP71 in FIG. 17, the pointers of the write addresses of the buffers WB1 through WB9 and the number of generated samples are received.
      <br/>
      In step SP72, while updating the contents of registers in the effect module based on the value of the parameter register in the P buffer, insertion effect processing such as chorus or reverberation is executed on the waveform data in the input buffer (WB8 in the case of insertion effect IEF1, WB9 in the case of insertion effect IEF2).
      <br/>
      The effect-imparted waveform data is then stored in the module waveform buffer MWB in question.
    </p>
    <p num="128">
      In step SP73, it is determined whether the part to which an insertion effect is to be imparted remains.
      <br/>
      This is because two or more insertion effects may be imparted to one part.
      <br/>
      If the decision is YES, then, in step SP75, the effect-imparted waveform data is written to a next insertion effect input buffer.
      <br/>
      It should be noted that the send level and panning level set to a part to which an insertion effect is imparted in the processing of a tone generator module that generated the original waveform data are also set to the buffers WB8 and WB9, which are input buffers (refer to step SP58 of FIG. 16).
      <br/>
      These send level and panning level are written to the buffers WB8 or WB9 again along with the effect-imparted waveform data.
    </p>
    <p num="129">
      In step SP76, the integrated driver main routine (refer to FIG. 5) is notified of the completion of input buffer updating.
      <br/>
      This commences the waveform receiving processing (step SP108) as described above in the integrated driver main routine, calling the waveform receiving event processing routine (refer to FIG. 12).
    </p>
    <p num="130">
      In the above-mentioned example, an insertion effect remains for the part for which waveform generation was executed last, so that the decision is YES in step SP21, sending a computation trigger associated with the insertion effect again.
      <br/>
      Consequently, the computation trigger event processing routine (refer to FIG. 17) associated with the insertion effect is again called, thereby generating waveform data imparted with the effect through steps SP71 and SP72 as described above.
      <br/>
      If there remains ro insertion effect, the decision is NO in step SP73.
    </p>
    <p num="131">
      In step SP74, the send levels according to the send levels and panning levels (values attached to the input buffers) for the buffers WB1 through WB7 are multiplied by the waveform data in the buffer MWB, each multiplication result being added to the original values of the buffers WB1 through WB7.
      <br/>
      Then, in step SP76, the integrated driver main routine (refer to FIG. 5) is notified of the completion of the updating of the buffers WB1 through WB9, upon which this routine comes to an end.
    </p>
    <p num="132">4.10 Computation Trigger Even Processing Routine (FIG. 18)</p>
    <p num="133">
      When reception of a computation trigger (refer to step SP26) for the system effect in step SP32 of the module main routine is detected, the effect module computation trigger event processing routine shown in FIG. 18 is called in step SP36.
      <br/>
      The processing of this routine is generally the same as that of the computation trigger event processing routine shown in FIG. 17. A difference is that the routine shown in FIG. 18 does not execute the processing corresponding to steps SP73 and SP75.
      <br/>
      This is because, with system effects, waveform data is always transferred by means of the buffers WB1 through WB7.
      <br/>
      The input buffer in step SP82 is any of the buffers WB1 through WB7.
      <br/>
      To be more specific, if the effect module in question is set to the first block EF1, the buffers WB3 and WB4 provide the input buffers.
      <br/>
      If the effect module in question is set to the second block EF2, the buffers WB5 and WB6 provide the input buffers.
      <br/>
      If the effect module in question is set to the third block EF3, the buffer WB7 provides the input buffer.
      <br/>
      The effect processing based on the parameter value specified by EPNn and updated according to the content of the P buffer of the effect module to be specified by EMNn is executed on the waveform data of each input buffer.
      <br/>
      The effect-imparted waveform data is stored in the module waveform buffer MWB.
      <br/>
      In step SP83, the send level corresponding to the send level set by the effect block EFn is multiplied with the waveform data in the module waveform buffer MWB.
      <br/>
      The multiplication result is then added to the original values of the buffers WB1 through WB7.
      <br/>
      In step SP84, the integrated driver main routine (refer to FIG. 5) is notified of the completion of the update operations on the buffers WB1 through WB9, upon which this routine comes to an end.
    </p>
    <p num="134">5. Effects of the Embodiment</p>
    <p num="135">
      (1) As described, the preferred embodiment of the invention uses a concept of system sampling frequency SFs.
      <br/>
      Based on the system sampling frequency SFs, waveform data can be transferred between two or more tone generator modules, thereby simplifying the processing all over the system.
      <br/>
      Especially, the number of samples to be generated in each tone generator module may be specified by the system sampling frequency SFs, thereby significantly simplifying the control mechanism.
    </p>
    <p num="136">
      (2) In the preferred embodiment of the invention, if the selection of a local sampling frequency TFs is permitted, an optimum local sampling frequency TFs is selected according to the system sampling frequency SFs.
      <br/>
      This permits the effective use of CPU processing power, thereby preventing wasteful computations not contributing to the tone quality of final output.
    </p>
    <p num="137">
      (3) In the preferred embodiment of the invention, each tone generator module and each effect module can read the waveform data from the buffers WB1 through WB9, and add newly generated waveform data to the waveform data read from the buffers, thereby implementing multi-stage tone synthesis.
      <br/>
      Consequently, if the number of parts is increased, the area for the buffers WB1 through WB9 need not be increased, thereby significantly enhancing expandability.
      <br/>
      In addition, simple transferring of addresses between the modules can reduce the overhead of transferring the waveform data itself.
    </p>
    <p num="138">(4) In the preferred embodiment of the invention, provision of the T-sequence data can give lower priority to the computation of load-adjustable tone generator modules, thereby adjusting the load of the CPU according to its processing power.</p>
    <p num="139">6. Variations</p>
    <p num="140">
      The present invention is not limited to the above-mentioned preferred embodiment.
      <br/>
      The following variations may be made for example.
    </p>
    <p num="141">
      (1) The above-mentioned preferred embodiment is an example in which the present invention is executed on a personal computer.
      <br/>
      The present invention may also be applied to various musical apparatuses that have a tone parameter editing capability or a tone generating capability, such as general electronic musical instruments, game machines, and karaoke machines controlled by a processor and software.
      <br/>
      Further, the present invention may be implemented in the form of a recording medium of machine readable medium such as the removable disk 27 storing control programs that are installed on these musical apparatuses.
    </p>
    <p num="142">
      (2) In the above-mentioned preferred embodiment, a trigger message is generated from the operating system 2 at a predetermined time interval.
      <br/>
      It is also practicable to generate a trigger message from the hardware timer 24 or the waveform interface 30 for example.
      <br/>
      Generally, the temporal accuracy of a hardware trigger is higher than that obtained by having the operating system handle the trigger message processing.
      <br/>
      The trigger message generating interval may be set to a value equivalent to one frame for example.
    </p>
    <p num="143">
      (3) In the above-mentioned preferred embodiment, the size of each of the waveform buffers WB1 through WB9 is set to 1024 words.
      <br/>
      It will be apparent to those skilled in the art that the buffer size may be smaller or greater than 1024 words.
      <br/>
      In addition, the buffer size may be changed as required.
    </p>
    <p num="144">
      (4) In the above-mentioned preferred embodiment, the CPU load is adjusted in the tone generator module located last in the T-sequence.
      <br/>
      The CPU load adjustment may also be made in any tone generator module located before the last.
    </p>
    <p num="145">
      (5) In the above-mentioned preferred embodiment, when a tone generator module or an effect module is registered or deleted from the registration, its module main routine is started or ended.
      <br/>
      The module main routine may also be started when the module in question is selected by a MIDI part and ended when the module is deselected.
    </p>
    <p num="146">
      As described and according to the first aspect of the invention, a tone signal that, in response to an instruction to generate a tone signal having a length in unit of a first sampling frequency, generates a tone signal having a second sampling frequency.
      <br/>
      Then, the sampling frequency of the generated tone signal is converted into the first sampling frequency.
      <br/>
      According to this novel constitution, the number of generated samples can be specified by a common sampling frequency for all tone generating programs or modules even if these programs have different sampling frequencies.
      <br/>
      In addition, tone signals having the common sampling frequency can be received from all generating programs.
      <br/>
      Further, regardless of the first sampling frequency, each generating program can generate a tone signal indicated by a sampling frequency convenient to each generating program.
    </p>
    <p num="147">
      According to the second aspect of the invention, in response to a specified first sampling frequency, a second sampling frequency is selected from among a plurality of candidates.
      <br/>
      A tone signal having the selected second sampling frequency is generated.
      <br/>
      Then, the sampling frequency of that tone signal is converted into the first sampling frequency.
      <br/>
      According to this novel constitution, a tone signal can be generated with an optimum second sampling frequency in matching with the first sampling frequency, thereby efficiently synthesizing tones without involving wasted computation.
    </p>
    <p num="148">
      According to the third and fourth aspects of the invention, a tone signal is generated in unit of the number of computation samples suitable for the waveform generation, and a tone signal necessary for next conversion is written to a memory as an unprocessed tone signal.
      <br/>
      According to this novel constitution, even if the required number of samples is not suitable for the generation of a tone signal, it can be generated with the suitable number of samples, thereby efficiently operating a musical apparatus.
    </p>
    <p num="149">According to the fifth aspect of the invention, in execution a plurality of synthesizing processes, the number of tones or computation contents can be changed for the synthesizing process to be executed last or else, thereby efficiently the executing processor load control.</p>
    <p num="150">
      According to the sixth aspect of the invention, the execution sequence of a plurality of signal processing processes is determined according to the information about the connections among the plurality of signal processing modules.
      <br/>
      According to this novel constitution, the execution sequence of the plurality of signal processing modules can be automatically determined according to user-specified connections, thereby allowing the user to specify connections without having to consider the sequence of signal processing modules.
    </p>
    <p num="151">
      According to the seventh aspect of the invention, the control program prepares the predetermined number of buffers.
      <br/>
      A plurality of tone generating programs carry out predetermined signal processing based on a tone signal stored at least one buffer.
      <br/>
      The result of this signal processing is added to at least one of the predetermined number of buffers.
      <br/>
      According to this novel constitution, buffer sharing by the plurality of tone generating programs can be implemented.
      <br/>
      Further, with a processor having cache memory, a high cache hit ratio can be expected with the shared buffers.
    </p>
    <p num="152">While the preferred embodiments of the present invention have been described using specific terms, such description is for illustrative purposes only, and it is to be understood that changes and variations may be made without departing from the spirit or scope of the appended claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method of synthesizing a musical tone signal by executing a control program and a plurality of generator programs with a processor,</claim-text>
      <claim-text>wherein the control program is executed to perform the steps of: commanding each of the generator programs to generate a predetermined number of samples of the musical tone signal at a first sampling period;</claim-text>
      <claim-text>and collecting the samples from each of the generator programs and processing the collected samples at the first sampling period to thereby synthesize the musical tone signal, and, wherein the generator programs include a synchronous generator program that does generate the predetermined number of the samples at the first sampling period, and an asynchronous generator program that does not generate the predetermined number of the samples at the first sampling period, the asynchronous generator program being executed to perform the steps of: generating an equivalent number of samples at a second sampling period in response to the commanding from the control program, the equivalent number of the samples arranged at the second sampling period being determined to correspond to the predetermined number of the samples arranged at the first sampling period, and converting the equivalent number of the samples arranged at the second sampling period into the predetermined number of the samples arranged at the first sampling period to thereby pass the predetermined number of the samples to the control program at the first sampling period.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A method of synthesizing a musical tone signal, comprising the steps of: designating a first sampling period to determine a rate of synthesis of the musical tone signal; adopting a second sampling period from among a plurality of available sampling periods according to the designated first sampling period; generating the musical tone signal at the adopted second sampling period; converting the generated musical tone signal from the adopted second sampling period into the designated first sampling period when the second sampling period is different from the first sampling period to output the converted musical tone signal at the designated first sampling period; otherwise outputting the generated musical tone signal as it is when the adopted second sampling period is identical to the designated first sampling period;</claim-text>
      <claim-text>and processing the outputted musical tone signal at the designated first sampling period for the synthesis of the musical tone signal.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A method of synthesizing a musical tone signal, comprising the steps of: commanding a generation of a predetermined number of samples of the musical tone signal at a first sampling period such that the predetermined number of samples are sequentially arranged at the first sampling period, the generation being commanded recurrently to continue the musical tone signal; generating, a practical number of samples of the musical tone signal at a second sampling period which is different from the first sampling period, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of samples; collecting a number of samples generated but unprocessed in a previous generating step and reserved in a memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples; converting the collected number of the samples arranged at the second sampling period into the predetermined number of samples arranged at the first sampling period to output the musical tone signal;</claim-text>
      <claim-text>and reserving the remaining part of the practical number of the samples generated but left in the current generating step into the memory for use in a next generating step.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A method of synthesizing a musical tone signal, comprising the steps of: commanding a generation of a predetermined number of samples of the musical tone signal, the generation being commanded recurrently to continue the musical tone signal; generating a practical number of samples of the musical tone signal in response to the commanding, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples; collecting a number of samples generated but unprocessed in a previous generating step and reserved in a memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples; processing the collected number of the samples to synthesize the musical tone signal;</claim-text>
      <claim-text>and reserving the remaining part of the practical number of the samples generated but unprocessed in the current generating step into the memory for use in a next generating step.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A machine readable medium for use in a music apparatus having a processor and a plurality of generator modules, the medium containing instructions executable by the processor for causing the music apparatus to perform the method of synthesizing a musical tone signal with the generator modules, wherein the method comprises the steps of: commanding each of the generator modules to generate a predetermined number of samples of the musical tone signal at a first sampling period;</claim-text>
      <claim-text>and collecting the samples from each of the generator modules and processing the collected samples at the first sampling period to thereby synthesize the musical tone signal, and, wherein the generator modules include a synchronous generator module that does generate the predetermined number of the samples at the first sampling period, and an asynchronous generator module that does not generate the predetermined number of the samples at the first sampling period, the asynchronous generator module being commanded to perform the steps of: generating an equivalent number of samples at a second sampling period, the equivalent number measured at the second sampling period being determined to correspond to the predetermined number measured at the first sampling period, and converting the equivalent number of the samples arranged at the second sampling period into the predetermined number of the samples arranged at the first sampling period to thereby pass the predetermined number of the samples to the collecting step at the first sampling period.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A machine readable medium for use in a music apparatus having a processor, the medium containing program instructions executable by the processor for causing the music apparatus to perform the method of synthesizing a musical tone signal comprising the steps of: designating a first sampling period to determine a rate of synthesis of the musical tone signal; adopting a second sampling period from among a plurality of available sampling periods according to the designated first sampling period; generating the musical tone signal at the adopted second sampling period; converting the generated musical tone signal from the adopted second sampling period into the designated first sampling period when the second sampling period is different from the first sampling period to output the converted musical tone signal at the designated first sampling period; otherwise outputting the generated musical tone signal as it is when the adopted second sampling period is identical to the designated first sampling period;</claim-text>
      <claim-text>and processing the outputted musical tone signal at the designated first sampling period for the synthesis of the musical tone signal.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A machine readable medium for use in a music apparatus having a processor and a memory, the medium containing program instructions executable by the processor for causing the music apparatus to perform the method of synthesizing a musical tone signal comprising the steps of: commanding a generation of a predetermined number of samples of the musical tone signal at a first sampling period such that the predetermined number of the samples are sequentially arranged at the first sampling period, the generation being commanded recurrently to continue the musical tone signal; generating a practical number of samples of the musical tone signal at a second sampling period which is different from the first sampling period, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples; collecting a number of samples generated but unprocessed in a previous generating step and reserved in the memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples; converting the collected number of the samples arranged at the second sampling period into the predetermined number of the samples arranged at the first sampling period to output the musical tone signal;</claim-text>
      <claim-text>and reserving the remaining part of the practical number of the samples generated but left in the current generating step into the memory for use in a next generating step.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A machine readable medium for use in a music apparatus having a processor and a memory, the medium containing program instructions executable by the processor for causing the music apparatus to perform the method of synthesizing a musical tone signal comprising the steps of: commanding a generation of a predetermined number of samples of the musical tone signal, the generation being commanded recurrently to continue the musical tone signal; generating a practical number of samples of the musical tone signal in response to the commanding, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples; collecting a number of samples generated but unprocessed in a previous generating step and reserved in a memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples; processing the collected number of the samples to synthesize the musical tone signal;</claim-text>
      <claim-text>and reserving the remaining part of the practical number of the samples generated but unprocessed in the current generating step into the memory for use in a next generating step.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A music apparatus comprising: a central processor; a plurality of generator modules;</claim-text>
      <claim-text>and a program memory storing instructions for causing the central processor to execute a process of synthesizing a musical tone signal with the generator modules, wherein the process comprises the steps of: commanding each of the generator modules to generate a predetermined number of samples of the musical tone signal at a common sampling period;</claim-text>
      <claim-text>and collecting the samples from each of the generator modules and processing the collected samples at the common sampling period to thereby synthesize the musical tone signal, and, wherein the generator modules include a synchronous generator module that does generate the predetermined number of the samples at the common sampling period, and an asynchronous generator module that does not generate the predetermined number of the samples at the common sampling period, the asynchronous generator module being commanded to perform the steps of: generating an equivalent number of samples at a local sampling period, the equivalent number measured at the local sampling period being determined to correspond to the predetermined number measured at the common sampling period, and converting the equivalent number of the samples arranged at the local sampling period into the predetermined number of the samples arranged at the common sampling period to thereby pass the predetermined number of the samples to the collecting step at the common sampling period.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A music apparatus comprising: a central processor;</claim-text>
      <claim-text>and a program memory storing instructions for causing the central processor to execute a process of synthesizing a musical tone signal, wherein the process comprises the steps of: designating a common sampling period to determine a rate of synthesis of the musical tone signal; adopting a local sampling period from among a plurality of available sampling periods according to the designated common sampling period; generating the musical tone signal at the adopted local sampling period; converting the generated musical tone signal from the adopted local sampling period into the designated common sampling period when the local sampling period is different from the common sampling period to output the converted musical tone signal at the designated common sampling period; otherwise outputting the generated musical tone signal as it is when the adopted local sampling period is identical to the designated common sampling period;</claim-text>
      <claim-text>and processing the outputted musical tone signal at the designated common sampling period for the synthesis of the musical tone signal.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A music apparatus comprising: a central processor; a buffer memory;</claim-text>
      <claim-text>and program memory storing instructions for causing the central processor to execute a process of synthesizing a musical tone signal, wherein the process comprises the steps of: commanding a generation of a predetermined number of samples of the musical tone signal at a common sampling period such that the predetermined number of the samples are sequentially arranged at the common sampling period, the generation being commanded recurrently to continue the musical tone signal; generating a practical number of samples of the musical tone signal at a local sampling period which is different from the common sampling period, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples; collecting a number of samples generated but unprocessed in a previous generating step and reserved in the buffer memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples; converting the collected number of the samples arranged at the local sampling period into the predetermined number of the samples arranged at the common sampling period to output the musical tone signal;</claim-text>
      <claim-text>and reserving the remaining part of the practical number of the samples generated but left in the current generating step into the buffer memory for use in a next generating step.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A music apparatus comprising: a central processor; a buffer memory;</claim-text>
      <claim-text>and a program memory storing instructions for causing the central processor to execute a process of synthesizing a musical tone signal, wherein the process comprises the steps of: commanding a generation of a predetermined number of samples of the musical tone signal, the generation being commanded recurrently to continue the musical tone signal; generating a practical number of samples of the musical tone signal in response to the commanding, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples; collecting a number of samples generated but unprocessed in a previous generating step and reserved in the buffer memory, and a part of the practical number of the samples generated in the current generating step such that a total number of the collected samples is equivalent to the predetermined number of the samples; processing the collected number of the samples to synthesize the musical tone signal;</claim-text>
      <claim-text>and reserving the remaining part of the practical number of the samples generated but unprocessed in the current generating step into the buffer memory for use in a next generating step.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A music apparatus for synthesizing a musical tone signal, comprising a control module and a plurality of generator modules, wherein the control module comprises: means for commanding each of the generator modules to generate a predetermined number of samples of the musical tone signal at a common sampling period;</claim-text>
      <claim-text>and means for collecting the samples from each of the generator modules and processing the collected samples at the common sampling period to thereby synthesize the musical tone signal, and, wherein the generator modules include a synchronous generator module that does generate the predetermined number of the samples at the common sampling period, and an asynchronous generator module that does not generate the predetermined number of the samples at the common sampling period, the asynchronous generator module comprising: means for generating an equivalent number of samples at a local sampling period in response to the commanding from the control module, the equivalent number measured at the local sampling period being determined to correspond to the predetermined number measured at the common sampling period, and means for converting the equivalent number of the samples arranged at the local sampling period into the predetermined number of the samples arranged at the common sampling period to thereby pass the predetermined number of the samples to the control mosule at the common sampling period.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A music apparatus for synthesizing a musical tone signal, comprising: means for designating a common sampling period to determine a rate of synthesis of the musical tone signal; means for adopting a local sampling period from among a plurality of available sampling periods according to the designated common sampling period; means for generating the musical tone signal at the adopted local sampling period; means for converting the generated musical tone signal from the adopted local sampling period into the designated common sampling period when the local sampling period is different from the common sampling period to output the converted musical tone signal at the designated common sampling period; means for outputting the generated musical tone signal as it is when the adopted local sampling period is identical to the designated common sampling period;</claim-text>
      <claim-text>and means for processing the outputted musical tone signal at the designated common sampling period for the synthesis of the musical tone signal.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A music apparatus for synthesizing a musical tone signal, comprising: a memory; means for commanding a generation of a predetermined number of samples of the musical tone signal at a common sampling period such that the predetermined number of the samples are sequentially arranged at the common sampling period, the generation being commanded successively at least a first time, a second time, and a third time to continue the musical tone signal; means for generating a practical number of samples of the musical tone signal at each time at a local sampling period which is different from the common sampling period, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples; means for collecting a number of samples generated but unprocessed in the first time and reserved in the memory, and a part of the practical number of the samples generated at the second time such that a total number of the collected samples is equivalent to the predetermined number of the samples; means for converting the collected number of the samples arranged at the local sampling period into the predetermined number of the samples arranged at the common sampling period to output the musical tone signal;</claim-text>
      <claim-text>and means for reserving the remaining part of the practical number of the samples generated but left at the second time into the memory for use at the third time.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A music apparatus for synthesizing a musical tone signal, comprising: a memory; means for commanding a generation of a predetermined number of samples of the musical tone signal, the generation being commanded successively at least a first time, a second time and a third time to continue the musical tone signal; means for generating a practical number of samples of the musical tone signal in response to the commanding, the practical number being determined to make efficient the generation of the musical tone signal and to cover the predetermined number of the samples; means for collecting a number of samples generated but unprocessed at the first time and reserved in the memory, and a part of the practical number of the samples generated at the second time such that a total number of the collected samples is equivalent to the predetermined number of the samples; means for processing the collected number of the samples to synthesize the musical tone signal;</claim-text>
      <claim-text>and reserving the remaining part of the practical number of the samples generated but unprocessed at the second time into the memory for use at the third time.</claim-text>
    </claim>
  </claims>
</questel-patent-document>