<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182247B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182247</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182247</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="21848177" extended-family-id="59230948">
      <document-id>
        <country>US</country>
        <doc-number>08958435</doc-number>
        <kind>A</kind>
        <date>19971027</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08958435</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>60503814</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>95843597</doc-number>
        <kind>A</kind>
        <date>19971027</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08958435</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>2927796</doc-number>
        <kind>P</kind>
        <date>19961028</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1996US-60029277</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/50        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>50</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G01R  31/317       20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>01</class>
        <subclass>R</subclass>
        <main-group>31</main-group>
        <subgroup>317</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G01R  31/3177      20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>01</class>
        <subclass>R</subclass>
        <main-group>31</main-group>
        <subgroup>3177</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G01R  31/3185      20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>01</class>
        <subclass>R</subclass>
        <main-group>31</main-group>
        <subgroup>3185</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="5">
        <text>G06F   9/44        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>44</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="6">
        <text>G06F   9/445       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>445</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="7">
        <text>G06F  11/14        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>14</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="8">
        <text>G06F  11/273       20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>273</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="9">
        <text>G06F  11/28        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>28</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="10">
        <text>G06F  12/00        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>12</main-group>
        <subgroup>00</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="11">
        <text>G06Q  10/06        20120101A I20140531RMEP</text>
        <ipc-version-indicator>
          <date>20120101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>10</main-group>
        <subgroup>06</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140531</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="12">
        <text>G06Q  10/10        20120101A I20140531RMEP</text>
        <ipc-version-indicator>
          <date>20120101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>10</main-group>
        <subgroup>10</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20140531</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="13">
        <text>H01L  21/82        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>01</class>
        <subclass>L</subclass>
        <main-group>21</main-group>
        <subgroup>82</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>714039000</text>
        <class>714</class>
        <subclass>039000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>702117000</text>
        <class>702</class>
        <subclass>117000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>714725000</text>
        <class>714</class>
        <subclass>725000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>714734000</text>
        <class>714</class>
        <subclass>734000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>714E11118</text>
        <class>714</class>
        <subclass>E11118</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>716102000</text>
        <class>716</class>
        <subclass>102000</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>716106000</text>
        <class>716</class>
        <subclass>106000</subclass>
      </further-classification>
      <further-classification sequence="7">
        <text>716117000</text>
        <class>716</class>
        <subclass>117000</subclass>
      </further-classification>
      <further-classification sequence="8">
        <text>716121000</text>
        <class>716</class>
        <subclass>121000</subclass>
      </further-classification>
      <further-classification sequence="9">
        <text>716128000</text>
        <class>716</class>
        <subclass>128000</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-008/60</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>60</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G01R-031/3177</classification-symbol>
        <section>G</section>
        <class>01</class>
        <subclass>R</subclass>
        <main-group>31</main-group>
        <subgroup>3177</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G01R-031/318516</classification-symbol>
        <section>G</section>
        <class>01</class>
        <subclass>R</subclass>
        <main-group>31</main-group>
        <subgroup>318516</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-008/65</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>65</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-008/71</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>8</main-group>
        <subgroup>71</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/0748</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>0748</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/2294</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>2294</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5022</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5022</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5027</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5027</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="10">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5045</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5045</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="11">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5054</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5054</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="12">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-2217/04</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>2217</main-group>
        <subgroup>04</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="13">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06Q-010/06</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>10</main-group>
        <subgroup>06</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="14">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06Q-010/10</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>10</main-group>
        <subgroup>10</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="15">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99953</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99953</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="16">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99954</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99954</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>51</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>7</number-of-drawing-sheets>
      <number-of-figures>8</number-of-figures>
      <image-key data-format="questel">US6182247</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Embedded logic analyzer for a programmable logic device</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>NAKAJIMA TAKAYUKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4696004</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4696004</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>EASTERDAY JOHN L</text>
          <document-id>
            <country>US</country>
            <doc-number>4835736</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4835736</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KAPLINSKY CECIL H</text>
          <document-id>
            <country>US</country>
            <doc-number>4847612</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4847612</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>BUTTS MICHAEL R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5036473</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5036473</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>BALTUS PETER G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5124588</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5124588</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>EL-AYAT KHALED A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5365165</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5365165</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>LIU DICK L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5425036</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5425036</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>BUTTS MICHAEL R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5452231</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5452231</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>JAMAL KAMRAN</text>
          <document-id>
            <country>US</country>
            <doc-number>5568437</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5568437</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>JAMAL KAMRAN</text>
          <document-id>
            <country>US</country>
            <doc-number>5572712</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5572712</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>BUTTS MICHAEL R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5661662</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5661662</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>PATEL RAKESH H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5764079</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5764079</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>PATEL RAKESH H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5821771</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5821771</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>NORMAN KEVIN A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5870410</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5870410</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>PATEL RAKESH H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6014334</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6014334</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="16">
          <text>FLEISHER EVGENY G</text>
          <document-id>
            <country>US</country>
            <doc-number>6016563</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6016563</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="17">
          <text>PATEL RAKESH H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6020758</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6020758</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="18">
          <text>RICHT STEFAN</text>
          <document-id>
            <country>DE</country>
            <doc-number>4042262</doc-number>
            <kind>A1</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>DE4042262</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Marantz, Joshua, "Enhanced visibility and performance in functional verification by reconstruction", Proceedings of the 35th annual conference on Design automation conference, pp. 164-169, 1998.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>Stroud, Charles et al, "Evaluation of FPGA resources for built-in self-test of programmable logic blocks", Proceedings of the 1996 ACM fourth international symposium on Field-programmable gate arrays, p. 107, 1996.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/029,277</doc-number>
          <date>19961028</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/029277</doc-number>
          <date>19961028</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Altera Corporation</orgname>
            <address>
              <address-1>San Jose, CA, US</address-1>
              <city>San Jose</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>INTEL</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Herrmann, Alan L.</name>
            <address>
              <address-1>Sunnyvale, CA, US</address-1>
              <city>Sunnyvale</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Nugent, Greg P.</name>
            <address>
              <address-1>Menlo Park, CA, US</address-1>
              <city>Menlo Park</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Beyer Weaver &amp; Thomas, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Beausoliel, Jr., Robert W.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A technique for embedding a logic analyzer in a programmable logic device allows debugging of such a device in its actual operating conditions.
      <br/>
      A logic analyzer circuit is embedded within a PLD, it captures and stores logic signals, and it unloads these signals through an interface to be viewed on a computer.
      <br/>
      Using an electronic design automation (EDA) software tool running on a computer system, an engineer specifies signals of the PLD to be monitored, specifies the number of samples to be stored, and specifies a system clock signal and a trigger condition that will begin the acquisition of data.
      <br/>
      The EDA tool then automatically inserts the logic analyzer circuit into the electronic design of the PLD which is compiled and downloaded to configure the PLD.
      <br/>
      Using an interface connected between the PLD and the computer, the EDA tool communicates with the embedded logic analyzer in order to arm the circuit and to poll it until an acquisition has been made.
      <br/>
      The EDA tool then directs the logic analyzer to unload the data from its capture buffer and then displays the data on the computer.
      <br/>
      The logic analyzer circuit may then be rearmed to capture another sequence of sample values.
      <br/>
      The trigger condition may be changed without recompiling.
      <br/>
      The design may be recompiled with new logic analyzer parameters to debug a different portion.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">This application claims priority of provisional U.S. patent application No. 60/029,277, filed Oct. 28, 1996, entitled "Tools For Designing Programmable Logic Devices" which is incorporated by reference.</p>
    <p num="2">
      The present application is related to the following applications filed on the same date herewith: U.S. patent application Ser.
      <br/>
      No. 08/958,002, naming B. Pedersen et al. as inventors, entitled "Generation Of Sub-Net Lists For Use In Incremental Compilation"; U.S. patent application Ser.
      <br/>
      No. 08/958,436, naming J. Tse et al. as inventors, entitled "Fitting For Incremental Compilation Of Electronic Designs"; U.S. patent application Ser.
      <br/>
      No. 08/958,670, naming D. Mendel as inventor, entitled "Parallel Processing For Computer Assisted Design Of Electronic Devices"; U.S. patent application Ser.
      <br/>
      No. 08/958,626, naming F. Heile et al. as inventors, entitled "Interface For Compiling Design Variations In Electronic Design Environments"; U.S. patent application Ser.
      <br/>
      No. 08/958,778, naming T. Southgate as inventor, entitled "Method And Apparatus For Automated Circuit Design"; U.S. patent application Ser.
      <br/>
      No. 08/958,434, naming T. Southgate et al. as inventors, entitled "Graphic Editor For Block Diagram Level Design Of Circuits"; U.S. patent application Ser.
      <br/>
      No. 08/958,432, naming T. Southgate et al. as inventors, entitled "Design File Templates For Implementation Of Logic Designs"; U.S. patent application Ser.
      <br/>
      No. 08/958,414, naming T. Southgate as inventor, entitled "Method For Providing Remote Software Technical Support"; U.S. patent application Ser.
      <br/>
      No. 08/958,777, naming T. Southgate as inventor, entitled "Method For Simulating A Circuit Design"; U.S. patent application Ser.
      <br/>
      No. 08/957,957, naming F. Heile et al. as inventors, entitled "Workgroup Computing For Electronic Design Automation"; U.S. patent application Ser.
      <br/>
      No. 08/958,798, naming F. Heile as inventor, entitled "Local Compilation In Context Within A Design Hierarchy"; and U.S. patent application Ser.
      <br/>
      No. 08/958,431, naming F. Heile as inventor, entitled "Electronic Design Automation Tool For Display Of Design Profile".
      <br/>
      The above related applications are incorporated herein by reference in their entireties for all purposes.
    </p>
    <heading>FIELD OF THE INVENTION</heading>
    <p num="3">
      The present invention relates generally to analysis of a hardware device in connection with a computer system.
      <br/>
      More specifically, the present invention relates to a logic analyzer that is automatically embedded within a hardware device for purposes of debugging.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="4">
      In the field of electronics, various electronic design automation (EDA) tools are useful for automating the process by which integrated circuits, multi-chip modules, boards, etc., are designed and manufactured.
      <br/>
      In particular, electronic design automation tools are useful in the design of standard integrated circuits, custom integrated circuits (e.g., ASICs), and in the design of custom configurations for programmable integrated circuits.
      <br/>
      Integrated circuits that may be programmable by a customer to produce a custom design for that customer include programmable logic devices (PLDs).
      <br/>
      Programmable logic devices refer to any integrated circuit that may be programmed to perform a desired function and include programmable logic arrays (PLAs), programmable array logic (PAL), field programmable gate arrays (FPGA), complex programmable logic devices (CPLDs), and a wide variety of other logic and memory devices that may be programmed.
      <br/>
      Often, such PLDs are designed and programmed by an engineer using an electronic design automation tool that takes the form of a software package.
    </p>
    <p num="5">
      In the course of generating a design for a PLD, programming the PLD and checking its functionality on the circuit board or in the system for which it is intended, it is important to be able to debug the PLD because a design is not always perfect the first time.
      <br/>
      Before a PLD is actually programmed with an electronic design, a simulation and/or timing analysis may be used to debug the electronic design.
      <br/>
      However, once the PLD has been programmed and is operating within a working system, it is also important to be able to debug the PLD in this real-world environment.
    </p>
    <p num="6">
      And although a simulation may be used to debug many aspects of a PLD, it is nearly impossible to generate a simulation that will accurately exercise all of the features of the hardware PLD on an actual circuit board operating in a complex system.
      <br/>
      For example, a simulation may not be able to provide timing characteristics that are similar to those that will actually be experienced by the hardware PLD in a running system; e.g., simulation timing signals may be closer or farther apart than what a PLD will actually experience in a real system.
    </p>
    <p num="7">
      In addition to the difficulties in generating a comprehensive simulation, other circuit board variables such as temperature changes, capacitance, noise, and other factors may cause intermittent failures in a PLD that are only evident when the PLD is operating within a working system.
      <br/>
      Still further, it can be difficult to generate sufficiently varied test vectors to stress the PLD design to the point where most bugs are likely to be observed.
      <br/>
      For example, a PLD malfunction can result when the PLD is presented with stimuli that the designer did not expect, and therefore did not take into account during the design and simulation of the PLD.
      <br/>
      Such malfunctions are difficult to anticipate and must be debugged in the context of the complete system.
      <br/>
      Thus, simulation of an electronic design is useful, but usually cannot debug a PLD completely.
    </p>
    <p num="8">
      One approach to debugging a hardware device within a working system is to use a separate piece of hardware equipment called a logic analyzer to analyze signals present on the pins of a hardware device. (For example, the HP1670A Series Logic Analyzer from Hewlett-Packard Company.) Typically, a number of probe wires are connected manually from the logic analyzer to pins of interest on the hardware device in order to monitor signals on those pins.
      <br/>
      The logic analyzer captures and stores these signals.
      <br/>
      However, the use of an external logic analyzer to monitor pins of a hardware device has certain limitations when it comes to debugging such a device.
      <br/>
      For example, such an external logic analyzer can only connect to and monitor the external pins of the hardware device.
      <br/>
      Thus, there is no way to connect to and monitor signals that are internal to the hardware device.
      <br/>
      Unfortunately, when programming a hardware device such as a PLD, it would be useful to be able to monitor some of these internal signals in order to debug the PLD.
    </p>
    <p num="9">
      Although some custom hardware devices may come ready made with some internal debugging hardware, this debugging hardware is typically hardwired to route specific internal signals and cannot be readily changed by an engineer who wishes to look at other signals.
      <br/>
      Also, with such built-in debugging it is not possible to choose any signal to monitor that the engineer desires, nor can triggering signals and triggering conditions be changed by the engineer.
      <br/>
      Because a PLD by its very nature is a programmable device that an engineer is attempting to program to perform a particular function, it is important to the engineer to be able to customize monitored signals, trigger signals, and trigger conditions in order to efficiently debug any particular device.
      <br/>
      Further, creating an electronic design for a PLD is an iterative process that requires creative debugging by an engineer who may wish to view almost any internal signal, and who may change his mind fairly frequently in the course of debugging a PLD within a system.
      <br/>
      Known external and internal logic analyzers do not provide this flexibility.
    </p>
    <p num="10">
      A further drawback to using an external logic analyzer or hardwired predetermined debugging hardware inside of a custom chip is that often the number of internal signals that an engineer desires to monitor are greater than the number of available pins on the device.
      <br/>
      For example, if there are sixteen internal signals that an engineer wishes to monitor on a device, he is unable to do this using an external logic analyzer if the device has only four pins available for debugging.
    </p>
    <p num="11">
      In some cases, it is possible for an engineer to employ a conventional logic analyzer to study an internal signal of a PLD.
      <br/>
      This may be accomplished by, for example, an engineer modifying his design so that a normally internal signal is routed temporarily to an output pin of the PLD.
      <br/>
      The design is then recompiled.
      <br/>
      The engineer then attaches a probe to this output pin in order to monitor the "internal" signal.
      <br/>
      Unfortunately, the engineer must recompile his design and reprogram the PLD in order to view this internal signal.
      <br/>
      Also, when debugging is complete, the engineer must again rewrite the design to remove the internal signal from the output pin, recompile the design and finally reprogram the PLD again.
      <br/>
      This can be a tedious process.
    </p>
    <p num="12">
      Even if an engineer is successful in routing an internal signal to an output pin of a PLD, with certain integrated circuit packages it may be extremely difficult to attach an external logic analyzer.
      <br/>
      For an integrated circuit in a dual in-line package it may be relatively straightforward to attach the probes of a logic analyzer to the top of the package as long as the package is in an easily accessible location on a circuit board.
      <br/>
      However, if the package is in a difficult to reach location because of device crowding, it may be difficult to physically attach logic analyzer probes to particular output pins of interest.
      <br/>
      Even more troublesome are integrated circuits with rows of miniature contacts located on the top of the package (e.g., "flip chips").
      <br/>
      It is difficult to attach logic analyzer probes to particular outputs of interest with this type of package.
      <br/>
      For an integrated circuit encased in a ball grid array package with the contacts located on the bottom of the package up against the circuit board, it may be nearly impossible to attach logic analyzer probes to these small contacts located on the underside of integrated circuit package.
      <br/>
      Thus, use of an external logic analyzer has shortcomings even if an internal signal can be routed to a pin of a device.
    </p>
    <p num="13">Therefore, an apparatus and technique are desirable that would allow a logic analyzer to flexibly analyze internal signals of interest in an electronic design.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="14">To achieve the foregoing, and in accordance with the purpose of the present invention, a technique for embedding a logic analyzer in a programmable logic device is disclosed that allows debugging of such a device in a more efficient manner.</p>
    <p num="15">
      The present invention provides both an apparatus and a technique by which a logic analyzer circuit is automatically embedded within a PLD, by which it captures and stores logic signals, and by which it unloads these signals through an interface to a computer.
      <br/>
      In a preferred embodiment, analysis of the signals is performed on the computer, with the "on-chip" logic analyzer circuit serving only to acquire the signals.
      <br/>
      The invention works especially well with a PLD because, by its very nature, a PLD is able to be programmed with a design, the design may be changed, and the PLD programmed again and again.
      <br/>
      Thus, the logic analyzer circuit may be embedded in test designs or iterations in the process of designing a final PLD.
      <br/>
      Upon successful debugging of the PLD design, the PLD chip can be reprogrammed without the logic analyzer circuit, or the circuit can be left on the chip.
    </p>
    <p num="16">
      In one embodiment of the invention, using an electronic design automation (EDA) software tool running on a computer system, an engineer specifies signals of the PLD to be monitored, specifies the number of samples to be stored, and specifies a system clock signal and a trigger condition that will begin the acquisition of data.
      <br/>
      The EDA tool then automatically inserts the logic analyzer circuit into the electronic design of the PLD which is compiled and downloaded to configure the PLD.
      <br/>
      Using an interface connected between the PLD and the computer, the EDA tool communicates with the embedded logic analyzer in order to arm the circuit and to poll it until an acquisition has been made.
      <br/>
      The EDA tool then directs the logic analyzer to unload the data from its capture buffer and then displays the data on the computer.
      <br/>
      The logic analyzer circuit may then be rearmed to capture another sequence of sample values.
    </p>
    <p num="17">
      The present invention provides many advantages over the prior art.
      <br/>
      Use of an embedded logic analyzer in a PLD allows debugging of the device in the system in which it is operating and under the actual conditions that might produce a malfunction of the PLD.
      <br/>
      The technique of the present invention automatically embeds a logic analyzer circuit into a PLD so that an engineer may debug any logic function within the device.
      <br/>
      The embedded logic analyzer is able to capture any internal signals specified by the engineer; the triggering condition can also include any specified internal signals.
      <br/>
      Through the use of memory within the embedded logic analyzer and a serial interface to the computer, any number and depth of signals can be monitored within the device and then transmitted to the computer at a later time for analysis.
      <br/>
      In one embodiment of the invention, as few as four pins on a PLD are used to program the embedded logic analyzer and to transmit captured signal information to the computer.
    </p>
    <p num="18">
      Advantageously, while debugging a PLD design in a system, an engineer may use the EDA tool to specify new signals to monitor and/or new triggering conditions.
      <br/>
      The engineer can then reprogram the device while it is within its intended system with a modified logic analyzer circuit very rapidly in order to debug a different portion of the device or to change the triggering conditions.
      <br/>
      This ability to reprogram an embedded logic analyzer on the fly has many advantages over built-in debugging hardware on custom chips that may not be dynamically reprogrammed.
      <br/>
      This ability to reprogram also has advantages over external logic analyzers that can only monitor the external pins of a hardware device.
      <br/>
      Furthermore, once an engineer has finished debugging the device with the embedded logic analyzer, the EDA tool may be used to generate a final configuration output file without the logic analyzer that represents the engineer's final working design.
      <br/>
      Thus, the logic analyzer need not be part of the final design and take up space on the PLD.
    </p>
    <p num="19">
      The present invention is applicable to a wide range of hardware devices, and especially to PLDs.
      <br/>
      A PLD in particular may be implemented using a wide variety of technologies, including SRAM technology and EEPROM technology.
      <br/>
      PLDs based upon SRAM technology are especially advantageous in that they may have additional embedded memory that can be used by the embedded logic analyzer to capture a large number of, and a greater depth of signals.
      <br/>
      Furthermore, an embedded logic analyzer that is designed and inserted automatically by an EDA tool means that an engineer does not require an external logic analyzer as a separate piece of equipment.
      <br/>
      Furthermore, the engineer may use the computer on which he or she is creating a design for the PLD to also control and configure the embedded logic analyzer and to review its results.
    </p>
    <p num="20">
      In one embodiment of the present invention, a number of pins on the PLD are dedicated interface pins for communication with the user computer.
      <br/>
      Because these pins are dedicated for the interface, and are known ahead of time, they may be routed to an easily accessible location or port on a circuit board, such that a debugging interface cable may be connected from the user computer to these pins extremely easily.
      <br/>
      This technique is especially advantageous where pins or contacts of a particular integrated circuit in a package may be difficult or nearly impossible to reach.
      <br/>
      Because the embedded logic analyzer of the present invention may be configured to monitor any internal or external signals of the PLD, all of these monitored signals are available for analysis through these interface pins.
      <br/>
      In other words, it is not necessary to physically connect a probe to a particular external pin of interest because any signal within the PLD can be monitored, stored within the memory of the embedded logic analyzer and then later uploaded to the user computer for analysis through these dedicated interface pins.
    </p>
    <p num="21">
      Additionally, an embedded logic analyzer can be used with PLDs that are configured to near capacity.
      <br/>
      An engineer can temporarily remove a portion of the design unrelated to the problem under analysis, embed a logic analyzer circuit, and then debug the PLD.
      <br/>
      Once the PLD has been debugged, the engineer may then remove the embedded logic analyzer and reinsert that section of the design that he had temporarily removed.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="22">
      The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:
      <br/>
      FIG. 1 is a block diagram of a programmable logic development system according to one embodiment of the present invention.
      <br/>
      FIG. 2 is a flowchart of a design methodology used to design a programmable logic device according to one embodiment of the present invention.
      <br/>
      FIGS. 3A and 3B are a flowchart describing one technique by which signals are specified for a logic analyzer to be embedded within a device so that the signals may be captured and viewed by a user.
      <br/>
      FIG. 4 is a flowchart describing a technique by which a logic analyzer may be compiled along with a user's design to embed the logic analyzer within a hardware device.
      <br/>
      FIG. 5 is another view of the block diagram of FIG. 1, showing a programmable logic device having an embedded logic analyzer within an electronic system.
      <br/>
      FIG. 6 is a block diagram of an embedded logic analyzer circuit according to an embodiment of the present invention.
      <br/>
      FIG. 7 is a block diagram of a typical computer system suitable for implementing an embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="23">
      In order to develop a design for programming an electronic design such as a programmable logic device (PLD), a programmable logic development system is used.
      <br/>
      As used herein, "electronic design" refers to circuit boards and systems including multiple electronic devices and multi-chip modules, as well as integrated circuits.
      <br/>
      For convenience, the following discussion will generally refer to "integrated circuits", or to "PLDs", although the invention is not so limited.
    </p>
    <p num="24">Programmable Logic Development System</p>
    <p num="25">
      FIG. 1 is a block diagram of an embodiment of a programmable logic development system 10 that includes a computer network 12, a programming unit 14 and a programmable logic device 16 that is to be programmed.
      <br/>
      Computer network 12 includes any number of computers connected in a network such as computer system A 18, computer system B 20, computer system C 22 and computer system file server 23 all connected together through a network connection 24.
      <br/>
      Computer network 12 is connected via a cable 26 to programming unit 14, which in turn is connected via a programming cable 28 to the PLD 16.
      <br/>
      Alternatively, only one computer system could be directly connected to programming unit 14.
      <br/>
      Furthermore, computer network 12 need not be connected to programming unit 14 at all times, such as when a design is being developed, but could be connected only when PLD 16 is to be programmed.
    </p>
    <p num="26">
      Programming unit 14 may be any suitable hardware programming unit that accepts program instructions from computer network 12 in order to program PLD 16.
      <br/>
      By way of example, programming unit 14 may include an add-on logic programmer card for a computer, and a master programming unit, such as are available from Altera Corporation of San Jose, Calif.
      <br/>
      PLD 16 may be present in a system or in a programming station.
      <br/>
      In operation, any number of engineers use computer network 12 in order to develop programming instructions using an electronic design automation software tool.
      <br/>
      Once a design has been developed and entered by the engineers, the design is compiled and verified before being downloaded to the programming unit.
      <br/>
      The programming unit 14 is then able to use the downloaded design in order to program PLD 16.
    </p>
    <p num="27">
      For the purposes of debugging a PLD according to an embodiment of the present invention, any of the computers shown or others may be used to specify a logic analyzer circuit and to compile such circuit along with a user's design.
      <br/>
      Furthermore, programming cable 28 may be used to control the logic analyzer and to receive data from it, or a separate debugging cable may be used to directly connect a computer with device 16.
    </p>
    <p num="28">
      Such a programmable logic development system is used to create an electronic design.
      <br/>
      Design entry and processing occurs in the context of a "project".
      <br/>
      A project includes a project file, design files, assignment files, and simulation files, together with hierarchy information, system settings, and output files, which includes programming files and report files.
      <br/>
      A project database may also exist, which contains intermediate data structures and version information.
    </p>
    <p num="29">
      A project contains one or more hierarchies of design entities and each design hierarchy tree has a root entity, which is the topmost design entity in that hierarchy tree (the top-level functional block).
      <br/>
      Other design entities in the design hierarchy tree are called child entities.
      <br/>
      Also, a design hierarchy may contain entities for which there is no corresponding design file, for example, in a top-down design methodology.
      <br/>
      That part of a hierarchy which contains such not-yet-implemented entities is not compiled or simulated until a design file is supplied for each entity.
      <br/>
      In this case, template source files are automatically generated which have defined interfaces but empty bodies to assist in implementing these parts of a project.
      <br/>
      A user creates a design by specifying and implementing functional blocks, as will now be described in the context of an exemplary design methodology.
    </p>
    <p num="30">Design Methodology</p>
    <p num="31">
      FIG. 2 shows a design methodology 50 for using a system design specification in order to develop a design with which to program a PLD.
      <br/>
      It should be appreciated that the present invention may be practiced in the context of a wide variety of design methodologies.
      <br/>
      By way of example, the work group computing techniques and system of the present invention work well with an electronic design automation (EDA) software tool within the framework of the methodology of FIG. 2.
    </p>
    <p num="32">
      In step 52 a system specification for the PLD to be programmed is obtained.
      <br/>
      This specification is an external document or file that describes, for example, the device pin names, the functionality of each of the pins, the desired system functionality, timing and resource budgets, and the like.
      <br/>
      The multiple engineers within a work group will use this system specification in order to create a design with the EDA tool that will then be used to program a PLD.
    </p>
    <p num="33">
      Once the system specification is obtained, creation of a design using functional block diagrams is begun.
      <br/>
      In step 54 a top-level block diagram is created in which connections between lower-level designs blocks are specified.
      <br/>
      In this block, the target device, speed grade, and key timing requirements may be specified.
      <br/>
      Those skilled in the art will recognize that this top-level block may also include blocks that have already been developed or implemented or that have been obtained from a third party provider.
      <br/>
      This top-level block may also be converted into an HDL file, or the like, for use in other related design tools, such as an external simulator.
    </p>
    <p num="34">
      Step 56 includes generating design file templates with the EDA tool for all blocks present in the top-level block diagram of step 54.
      <br/>
      After the designer has created a block which has not yet been implemented, the system may generate a design file template.
      <br/>
      Such templates may display a block in a window format including, for example, a title, a date, etc. around the boundaries.
      <br/>
      It may also include some details of the functional content depicted within the window.
      <br/>
      The design file templates may be in any specified design format including VHDL, AHDL, Verilog, block diagram, schematic, or other like format.
      <br/>
      In the case of a VHDL block the template may also include much of the formatting and necessary syntax for any VHDL block.
      <br/>
      The user need only take the template and add the small portion of VHDL syntax required to implement his function.
      <br/>
      For example, the user may need only add syntax defining a particular AND gate operation.
      <br/>
      Normal design, such as VHDL or other IEEE standard, requires large amounts of text to adequately set up the design block.
    </p>
    <p num="35">
      Those skilled in the art will recognize that design file templates such as these can be used as starting points for the design of the structural or functional entities needed by the design.
      <br/>
      Thus, a design file template may serve as a reusable object for different instances of a block in one or more designs.
      <br/>
      More importantly, design file templates will be employed to reduce the amount of labor that the designer must expend to generate the logic in the blocks.
      <br/>
      In one embodiment, the generation of the design file templates is done in such a way that the templates can be updated later if the top-level block diagram changes.
    </p>
    <p num="36">
      Next, in step 58, each of the blocks of the top-level block is implemented using the EDA tool.
      <br/>
      It is noted that for more complicated designs, there may be additional levels of block diagrams (i.e., blocks within blocks).
      <br/>
      If changes are required at the top-level then the top-level block diagram is updated and the sub-designs are preferably automatically updated as well.
    </p>
    <p num="37">
      Furthermore, a block may be compiled through to a fitting stage for a particular integrated circuit die to provide information about resource utilization, timing performance, etc., as required for a given design.
      <br/>
      As such, it is envisioned that some timing optimization may be performed during step 58.
      <br/>
      This sequence illustrates a style of design in which an engineer first designs, then compiles and simulates, and then returns to design again if the simulation results are not satisfactory.
      <br/>
      In another style, an engineer may iterate through a number of design followed by simulation loops before finally compiling the complete design.
    </p>
    <p num="38">
      Concerning block implementation order, one or more of the following factors can be used to determine implementation order: (1) the complexity of a block; (2) the uncertainty or risk associated with a block; and/or (3) how far upstream and/or downstream in a given data-path the block resides.
      <br/>
      Each of steps 60, 62, 64, 68 and 70 may also lead back to this block implementation step for additional implementation necessitated by later changes in the design.
    </p>
    <p num="39">
      In step 60 a block is simulated functionally at the source level using a behavioral simulator and vectors generated by using a VHDL or Verilog test bench, for example.
      <br/>
      The simulation results can then be displayed or otherwise presented/recorded as waveforms, text or annotated onto the source files.
      <br/>
      The designer may also return to step 58 to implement a block again.
      <br/>
      Also, at this point a block may be compiled or a timing analysis performed.
    </p>
    <p num="40">
      Once the designer is satisfied with the simulation results, in step 62 the block is combined with other blocks and the resulting group is simulated together.
      <br/>
      In some cases, it may be useful to complete a full compilation to provide critical resource and timing information.
      <br/>
      Also, output simulation vectors from one block may become the input simulation vectors to the next block.
      <br/>
      The designer may also return to step 54 to modify the top-level block or to step 58 to implement a block again.
    </p>
    <p num="41">
      Next, in step 64, the entire design is simulated functionally at the source level using a behavioral simulator.
      <br/>
      Preferably, the top-level block diagram is fully specified before simulation and shows complete design connectivity.
      <br/>
      Vectors can be generated using a VHDL or Verilog test bench.
      <br/>
      Again, the simulation results can be displayed either as waveforms or annotated onto the source files.
      <br/>
      The designer may also return to step 54 to modify the top-level block or to step 58 to implement a block again.
      <br/>
      In step 66 the entire design is compiled through to a file containing the information needed to program a PLD to implement the user's design, such as to a "programming output file".
    </p>
    <p num="42">
      A wide variety of compile techniques may be used depending upon the type of design being created.
      <br/>
      By way of example, a few examples of compilation are presented below.
      <br/>
      For a PLD, compilation includes the steps of synthesis, place and route, generation of programming files and simulation.
      <br/>
      For a traditional integrated circuit design with a custom layout, compilation includes a layout version schematic, a design rule checker and simulations.
      <br/>
      For integrated circuit design using a high level design tool, compilation includes synthesis from a language such as VHDL or Verilog, automatic place and route and simulations.
      <br/>
      For printed circuit boards, compilation includes automatic routing, design rule checking, lumped parameter extraction and simulation.
      <br/>
      Of course, other types of compilation and variations on the above are possible.
    </p>
    <p num="43">
      Within the context of the present invention, any of the above compile techniques may be modified in order to produce an embedded logic analyzer.
      <br/>
      As will be discussed in greater detail below with reference to FIG. 4, the compilation of a PLD is modified in order to insert a logic analyzer into a user's design.
    </p>
    <p num="44">
      Following compilation in step 66, in step 68 the timing checker inside the compiler is used to determine if the performance goals for the design have been met.
      <br/>
      Also, timing simulations are used to check performance details.
      <br/>
      In addition, other analysis tools such as a design profiler and/or layout editor can be used to further optimize the performance of the design.
      <br/>
      Preferably, optimization is not performed prior to step 68 because full compilation is usually required to establish the location of one or more critical paths within the design.
      <br/>
      The designer may also return to step 54 to modify the top-level block or to step 58 to implement a block again.
    </p>
    <p num="45">
      Next, in step 70 the device is programmed/configured using programming unit 14 and tested in the system.
      <br/>
      Again, the designer may also return to step 54 to modify the top-level block or to step 58 to implement a block again.
      <br/>
      While methodology 50 presents a top-down design process, it may also be used to support a bottom-up type methodology.
      <br/>
      Now that a general design methodology has been described by which an engineer may develop a design for a PLD, a technique for embedding a logic analyzer within a PLD will now be discussed.
    </p>
    <p num="46">Embedded Logic Analyzer</p>
    <p num="47">
      The flowchart of FIGS. 3A and 3B describe one possible technique by which a user may utilize the present invention in order to embed a logic analyzer within a PLD to capture desired signals and to view the results on a computer.
      <br/>
      In step 102 a user generates a design for a device and compiles the design into an output file.
      <br/>
      A wide variety of EDA tools may be used to generate and compile a design for a PLD.
      <br/>
      By way of example, the technique disclosed in U.S. patent Application Serial No. 60/029,277 may be used.
    </p>
    <p num="48">
      In step 104, the compiled output file is used to program the device and the device is placed under operating conditions, such as on a printed circuit board or within a suitable electronic system.
      <br/>
      At this step, an engineer may observe malfunctions with the device.
      <br/>
      If so, then in step 106 a hardware debugging feature of the EDA tool is enabled.
      <br/>
      This enablement will allow the EDA tool to perform netlist augmentation.
      <br/>
      That is, the engineer's design in various design files will be augmented with a logic analyzer according to one embodiment of the present invention and is described in greater detail in FIG. 4.
      <br/>
      This debugging feature also allows the combined netlist to be processed and programmed onto the device.
    </p>
    <p num="49">
      Next, the user is able to program the logic analyzer in order to debug the device in any way that the engineer chooses.
      <br/>
      One such logic analyzer circuit is shown in FIG. 6; the design for the logic analyzer may already be present within the EDA tool, or may be generated at any time.
      <br/>
      In step 108, the signals of interest of the device to be monitored are specified.
      <br/>
      These are the signals that a user wishes to view in order to track down the cause of the malfunction.
      <br/>
      The signals may be those present on pins of the device, or any internal signals or points within the device.
      <br/>
      Often the nature of the malfunction observed in step 104 will provide a clue, suggesting signals that would likely provide further information about the problem.
      <br/>
      For example, if the malfunction is associated with data output at a particular pin, the signals to be monitored may be provided by logic upstream from the pin.
    </p>
    <p num="50">
      These signals to be monitored may be specified in a wide variety of ways.
      <br/>
      By way of example, a hierarchical path name for each signal may be specified, or a graphical user interface may be used to view a particular design file and to select a signal or point from within that file to be monitored.
      <br/>
      At this time, the user may also specify which pins of the device will be used as an interface to the user computer, i.e., those pins to be used to send control information to the embedded logic analyzer within the PLD and to upload captured information from the logic analyzer to the user computer.
    </p>
    <p num="51">
      In step 110, the number of samples to be captured are specified.
      <br/>
      In other words, the depth of the capture buffer is specified and this, in turn, indicates how many clock pulses of data will be acquired by the logic analyzer.
      <br/>
      In one embodiment of the invention, a PLD that includes embedded memory blocks (such as any of the FLEX 10K family of devices available from Altera Corporation) works well for implementing the present invention.
      <br/>
      The embedded memory blocks are easily programmed to provide relatively large buffers (as part of the logic analyzer circuit) for the storage of captured information.
      <br/>
      Embedded memory devices are not, however, necessary for the buffering of information captured.
      <br/>
      Although devices without embedded memory may be used with the present invention, they just do not lend themselves as easily to creation of relatively large buffers.
      <br/>
      In devices without embedded memory, buffers may be implemented over multiple cells, using available memory from each cell.
    </p>
    <p num="52">
      In step 112, a system clock signal is specified for use by the logic analyzer.
      <br/>
      Any of a variety of signals available within the device may be specified as a system clock signal.
      <br/>
      A device clock signal that is relevant to the signals being monitored will typically be chosen as a system clock signal.
    </p>
    <p num="53">
      In step 114, the trigger condition is specified.
      <br/>
      A trigger condition may include any number of trigger signals to monitor and the logic levels that those trigger signals must have in order for the logic analyzer to trigger. I.e., the trigger condition describes a particular state of the device.
      <br/>
      When the logic analyzer is triggered, it begins acquisition of data for the signals being monitored.
      <br/>
      Any number of trigger signals or trigger states may be specified to define the trigger condition.
      <br/>
      A trigger may be as simple as one signal changing state, or may be a complex pattern of signals or a sequence of patterns that must occur before the logic analyzer is triggered.
      <br/>
      Also, a trigger condition need not be specified in all cases; if not, the logic analyzer triggers immediately upon being armed.
      <br/>
      Advantageously, the trigger condition can be changed at any time by the user through the use of the EDA tool, and a new trigger condition can be downloaded to the embedded logic analyzer in the device without having to recompile all of the device design files.
      <br/>
      By allowing trigger conditions to be changed rapidly for a device within a system, debugging is much more efficient.
    </p>
    <p num="54">
      Once the user has specified how he wishes the embedded logic analyzer to function, the complete design is compiled.
      <br/>
      In step 116, the user issues a compile command in order to compile the user's device design along with the logic analyzer design that has been specified.
      <br/>
      In a preferred embodiment of the invention, the user's design files are not modified during this process.
      <br/>
      The logic analyzer design is incorporated into the output files produced.
      <br/>
      In one specific embodiment, the process shown in FIG. 4 may be used to implement step 116.
    </p>
    <p num="55">
      The result of this step is a new output file that includes the user design with an embedded logic analyzer.
      <br/>
      A technique by which an EDA tool may insert a custom logic analyzer in a user design will be discussed in greater detail below with reference to FIG. 4.
      <br/>
      Once the new output file has been generated, then in step 118 the device within its system is reprogrammed using the new output file.
    </p>
    <p num="56">
      In step 120, the user connects a debugging interface cable from the device to the user computer.
      <br/>
      The interface cable may be the same cable used to program the device or it may be a dedicated cable for debugging.
      <br/>
      In one embodiment of the invention, the debugging cable connects to pins that have been specified by the user in step 108 as being dedicated to the logic analyzer circuit.
      <br/>
      In other words, if the user has specified the pins to which the debugging cable will be connected, the cable should be connected to those pins.
      <br/>
      In an alternative embodiment, the user does not have the option to specify the "debugging pins," rather the system specifies them automatically.
      <br/>
      The signals from these pins may be routed to an easily accessible location or port on the board to which the debugging cable may easily attach.
      <br/>
      The cable will be used to transmit instructions from the computer to the embedded logic analyzer, and also to upload captured information from the logic analyzer to the computer.
      <br/>
      In a preferred embodiment of the invention, the cable is a serial interface and uses as few as four pins on the device.
      <br/>
      As discussed below, FIG. 5 shows a PLD containing both a user design and an embedded logic analyzer within an electronic system.
      <br/>
      A cable is shown connecting the electronic system to an external computer.
    </p>
    <p num="57">
      In step 122 the user through the EDA tool arms the embedded logic analyzer with an appropriate command.
      <br/>
      This may be at the time when the user begins execution of the system in which the device is operating, although arming need not occur contemporaneously with system operation.
      <br/>
      Preferably, the user manipulates the system to duplicate previous malfunctions that the user wishes to analyze.
      <br/>
      In step 124, once the trigger condition is satisfied, the embedded logic analyzer will capture the signals specified up to a specified depth and store them in a memory of the logic analyzer.
      <br/>
      The logic analyzer is then able to upload this stored information over the serial interface cable to the user's computer.
      <br/>
      In step 126 the user is able to graphically view these signals received from the logic analyzer.
      <br/>
      In one embodiment, the signals are presented in a waveform view annotated with the names of the signals.
      <br/>
      Thus, by viewing these signals of interest on a computer, a user is able to efficiently debug a hardware device in much the same way as if an external logic analyzer had been able to be connected to these signals.
    </p>
    <p num="58">
      FIG. 4 is a flowchart 200 that describes a technique by which a logic analyzer circuit may be automatically inserted into, and automatically compiled along with, a user design.
      <br/>
      The technique of FIG. 4 is a suitable technique by which step 116 of FIG. 3B may be implemented (in the context of PLD compilation).
      <br/>
      It should be appreciated that a variety of compilation techniques may be used with the various EDA tools, for PLD design as well for other types of integrated circuits.
      <br/>
      The embodiment of FIG. 4 illustrates how the present invention may be used with one such compilation technique, although it is contemplated that the present invention is applicable to any of a wide variety of compilation techniques.
    </p>
    <p num="59">
      In step 202 an EDA tool accepts the user design files necessary to describe an electronic design for a device such as a PLD.
      <br/>
      These design files may often specify the design elements for the design.
      <br/>
      In many design environments, the design elements are arranged in a hierarchy, from root entity to leaf entities.
      <br/>
      In such cases, if the design uses a particular register in numerous locations throughout the design, there may be only one file containing the implementation of this design, yet the complete design may reference that one file in numerous locations.
      <br/>
      Examples of such electronic design files are discussed above with reference to FIGS. 1 and 2.
    </p>
    <p num="60">
      Step 204 takes these user design files and generates a flattened netlist representation of the user design.
      <br/>
      In other words, should the design files include a hierarchy, this hierarchy is "flattened out" so that each entity referenced in the design is duplicated as many times as it is used.
      <br/>
      Using the above example, if a particular register is used twice in the design hierarchy, yet only one file exists to describe this register, this step flattens out the design by producing two such files for the register.
      <br/>
      The representation of the user design in this step is preferably a synthesized technology-mapped database that will be appreciated by those of skill in the art.
      <br/>
      At this point in the compile process, a synthesized netlist of the user design has been created in a flattened state.
      <br/>
      Typically, generation of such a netlist is referred to as a "synthesis" step in the compilation process, after elaboration has occurred.
    </p>
    <p num="61">
      In step 206, a gate level representation of the logic analyzer circuit is produced.
      <br/>
      The logic analyzer circuit may take a wide variety of forms.
      <br/>
      By way of example, logic analyzer circuit 260 of FIG. 6 may be used, although it should be appreciated that a logic analyzer circuit may be implemented in many ways while still performing the functionality of the circuit shown in FIG. 6.
      <br/>
      In a preferred embodiment of the invention, a logic analyzer circuit is included in the EDA tool so that a gate level representation may be produced automatically.
      <br/>
      Alternatively, a user could be allowed to specify a custom circuit.
      <br/>
      This gate level representation takes into account each logic element of the circuit, along with the number and names of the signals to monitor specified by the user in step 108, the number of samples to be captured specified in step 110, and the trigger signals and a trigger condition as specified in step 114.
      <br/>
      Those of skill in the art will appreciate the process by which a gate level representation of a particular circuit is produced.
    </p>
    <p num="62">
      The actual gate level representation of a particular logic analyzer circuit will depend upon the particular device in which the logic analyzer will be embedded.
      <br/>
      By way of example, the hardware device in which to embed the logic analyzer may include any of the PLD devices available from Altera Corporation.
      <br/>
      In particular, any of the FLEX 10K, FLEX 8000, MAX 9000, or MAX 7000 devices work well.
      <br/>
      Each of these particular devices may have different features that would affect how a gate level representation for a logic analyzer is produced.
      <br/>
      For example, for a FLEX 10K device with relatively large embedded memory sections, this embedded memory is particularly well suited for implementing a large FIFO (first in first out) memory for the logic analyzer.
      <br/>
      For a device such as the FLEX 8000 without embedded memory, the memory elements (such as SRAM flip-flops) of logic cells may be used for the memory of the logic analyzer but the FIFO buffer may have to be divided over multiple cells if the memory in a single cell is not sufficiently large to accommodate the buffer.
      <br/>
      Similarly, a device based upon EEPROM technology may also use one or more of its logic cells for the logic analyzer's buffer.
      <br/>
      A device having large embedded memory works particularly well with the present invention because of the larger capacity for signal storage.
      <br/>
      Thus, step 206 produces a representation for a logic analyzer circuit that is to be connected to the user's design.
    </p>
    <p num="63">
      In step 208 the gate level representation of the logic analyzer circuit from step 206 is connected to the flattened representation of the user design of step 204.
      <br/>
      This step makes the logic connections from the inputs of the logic analyzer (trigger signals, system clock, signals to monitor) to lines providing the actual signals specified in the user's design.
      <br/>
      As those signals have previously been specified in steps 108 through 114, the EDA tool is able to find the particular signal lines within its database representation of the electronic design and to make the appropriate connection to an input of the logic analyzer.
    </p>
    <p num="64">
      In addition, this step makes appropriate connections from the logic analyzer to an interface to the user's computer.
      <br/>
      In the embodiment of FIG. 6, discussed below, this interface includes four signals available at the logic analyzer, namely: serial data in, mode select, debug clock, and serial data out.
      <br/>
      Of course, another embodiment of a logic analyzer circuit may use different signals and/or a greater or fewer number of interface signals.
      <br/>
      In a preferred embodiment of the invention, these interface signals to and from the logic analyzer are connected to four dedicated pins on the PLD reserved for this purpose.
      <br/>
      Thus, a user will know to which four pins the debugging cable should be attached.
      <br/>
      As noted, these pins not only control the embedded logic analyzer, but also receive data from it.
      <br/>
      In other embodiments, the four pins may be routed to another part of the circuit board for easy attachment of a cable.
      <br/>
      In this fashion, the logic for the logic analyzer circuit created in step 206 is connected to the user design and to interface pins of the PLD for communication with the user computer.
    </p>
    <p num="65">
      In step 210 the complete design created in step 208 is placed and routed in a fashion that will be appreciated by those of skill in the art.
      <br/>
      The output of the place and route step is then input to step 212 in which the output file is assembled.
      <br/>
      This output file may then be downloaded to a PLD in order to program it.
      <br/>
      Once a PLD has been programmed with this file, a user may begin use of the embedded logic analyzer in order to debug the device.
    </p>
    <p num="66">
      FIG. 5 is another view of programmable logic development system 10 of FIG. 1, showing a programmable logic device having an embedded logic analyzer within an electronic system.
      <br/>
      System 10 shows an electronic system 252 connected to computer system A 18 via cable 28 or other connective appliance.
      <br/>
      Electronic system 252 includes PLD 16, a component of the electronic system.
      <br/>
      PLD 16 potentially shares one or more electronic connections 254 with the other components and elements that make up the electronic system.
      <br/>
      PLD 16 has been configured with a user logic design 256 and an embedded logic analyzer 260.
      <br/>
      User logic 256 is configured with a design according to the methodology described in FIG. 2, or any other suitable design methodology.
      <br/>
      Embedded logic analyzer 260 has been incorporated into PLD 16 according to one embodiment of the invention described in FIGS. 3A and 3B.
    </p>
    <p num="67">
      Logical connections 262 allows signals from user logic 256 to be transmitted to logic analyzer 260.
      <br/>
      These signals may include a system clock, trigger signals, signals to monitor, etc.
      <br/>
      Pins of PLD 16 are used to connect debug interface signals 264 from the logic analyzer to corresponding connections 266 in electronic system 252.
      <br/>
      Cable 28 is used to connect these debug interface signals to computer 18.
      <br/>
      Alternatively, computer 18 may be directly connected to PLD 16 to transmit debug interface signals 264 to the PLD.
      <br/>
      In this manner, computer 18 transmits commands and other information to embedded logic analyzer 260, and receives information from the logic analyzer without directly interrupting or affecting the functional operation of electronic system 252.
      <br/>
      PLD 16 is thus configured to perform both the functions of user logic 256 and embedded logic analyzer 260
    </p>
    <p num="68">
      FIG. 6 is a block diagram of embedded logic analyzer 260 according to one embodiment of the present invention.
      <br/>
      A logic analyzer to be embedded within a PLD may be implemented in a wide variety of manners depending upon the type of PLD, signal type and number to be monitored, depth of data desired, memory available, control signals from the user's computer and preferences of the designing engineer, etc.
      <br/>
      By way of example, logic analyzer 260 is one particular example of how such a logic analyzer may be implemented.
      <br/>
      The embedded logic analyzer is controlled by the user from a computer external to the PLD and operates to capture any of a variety of internal signals that the user wishes.
    </p>
    <p num="69">
      Once logic analyzer 260 has been programmed into a PLD, it receives a variety of inputs from signals within the PLD.
      <br/>
      Collectively, these signals are called logic connections, or system interface signals 262.
      <br/>
      Signals to monitor 302 are those signals internal to the PLD that the user had specified in step 108 to be monitored by the logic analyzer.
      <br/>
      System clock 304 is the system clock specified in step 112 that the user wishes to clock input to the logic analyzer.
      <br/>
      Trigger signals 306 are those signals specified in step 114 that the user wishes to compare to a trigger condition 308 that was also specified in step 114.
    </p>
    <p num="70">
      Logic analyzer 260 also communicates with an external computer from which it receives commands and other information, and to which it transfers information including the current status of logic analyzer 260 and data captured from the PLD.
      <br/>
      Such communication may take place in a wide variety of forms.
      <br/>
      By way of example, in the embodiments shown, communication takes place over four pins of the PLD using a serial interface constituting a debug interface 264.
      <br/>
      Of course, any number of pins may be used to perform a similar function.
    </p>
    <p num="71">
      Pins 320 and 322 transmit signals "serial data in" and "mode select" from the computer to the logic analyzer. "Serial data out" pin 326 transmits data or status information from logic analyzer 260 to the external computer.
      <br/>
      The "debug clock" pin 324 is connected to a debug clock signal provided by the external computer, which is used to synchronize the serial transmission of commands, data and other information from the external computer to the logic analyzer, and from the logic analyzer to the external computer.
    </p>
    <p num="72">
      Furthermore, a variety of commands may be issued by the computer to the logic analyzer.
      <br/>
      In one specific embodiment, the logic analyzer recognizes four commands from the external computer.
      <br/>
      The computer may issue an "arm" command to arm the logic analyzer, a "set trigger" command to set the value of trigger condition 308, an "unload data" command to direct the logic analyzer to upload its data, or a "read status" command in order to determine the current status of the logic analyzer.
      <br/>
      Also, other information may be transmitted from the external computer to the logic analyzer, including information to prepare or configure the logic analyzer.
      <br/>
      In this embodiment, the external computer can transmit data to trigger register 380 in order to set the value of trigger condition 308.
    </p>
    <p num="73">
      The logic analyzer may also transmit information to the computer using these interface pins.
      <br/>
      For example, in this embodiment, the current state of trigger state machine 332 may be "armed", "running", or "full".
      <br/>
      A data value representing the current state of trigger state machine 332 may be transmitted to the computer using these pins.
    </p>
    <p num="74">
      It should be understood that in preferred embodiments, the computer to which pins 320, 322, 324 and 326 (or any other pins in alternative embodiments) are connected performs the analysis function of the logic analyzer.
      <br/>
      The circuitry provided on the PLD interior merely provides the data acquisition component of the logic analyzer.
      <br/>
      Of course, the logic necessary for data analysis could be provided on the PLD, in which case the external computer would be used merely to (a) control the state of the logic analyzer and (b) view information output by the logic analyzer.
    </p>
    <p num="75">
      Now that the inputs and outputs to the logic analyzer have been described, its functionality will now be explained.
      <br/>
      In this embodiment of the invention, logic analyzer 260 includes a debug mode state machine 330, a trigger state machine 332, a trigger comparator 334, a write address counter 336, a read address counter 338, an address multiplexer 340, a memory 342, a shift register 344, a trigger register 380, a status register 382 and a serial data multiplexer 384.
      <br/>
      Of course, variations on the design of the logic analyzer may be present depending upon a variety of factors mentioned above.
    </p>
    <p num="76">
      In operation, debug mode state machine 330 receives commands from the user computer and processes them.
      <br/>
      When the logic analyzer is armed and a trigger occurs, trigger state machine 332 allows write address counter 336 to step through memory addresses in memory 342 thus storing signals 302.
      <br/>
      When the user wishes to upload data from the logic analyzer, state machine 330 directs read address counter 338 to step through addresses in memory 342 and thus outputs data serially to the user computer via shift register 344.
      <br/>
      A more detailed explanation of how operation occurs now follows.
    </p>
    <p num="77">
      A user is able to issue the commands "arm", "set trigger", "unload data", and "read status" from a computer via signals present on debug interface 264.
      <br/>
      Debug mode state machine 330 receives and processes these commands and may be implemented in any suitable fashion.
      <br/>
      Upon receipt of an "arm" command, state machine 330 sends an "arm" signal 350 to trigger state machine 332.
      <br/>
      Upon receipt of a "set trigger" command, state machine 330 sends a set trigger signal 390 to trigger register 380, enabling it to receive data from serial data in pin 320.
      <br/>
      Trigger register 380 converts this data into a trigger condition 308 which is then sent to trigger comparator 334.
    </p>
    <p num="78">
      Upon receipt of an "unload data" command, state machine 330 sends a signal 352 to enable read address counter 338 to step through addresses in memory 342.
      <br/>
      This signal 352 is also sent to shift register 344 to enable it to convert the data words from memory 342 into a serial format.
      <br/>
      Signal 352 is also sent to serial data multiplexer 384 to allow the serial data output signal 398 from shift register 344 to drive the serial data out pin 326.
      <br/>
      Upon receipt of a "read status" command, debug mode state machine 330 sends a read status signal 392 to status register 382.
      <br/>
      When this signal is present, status register 382 shifts the values of status bits out on output signal 396, through serial data multiplexer 384 to serial data out pin 326.
      <br/>
      In this fashion, the external computer may issue commands to the logic analyzer, transmit data to the logic analyzer, and receive data from the logic analyzer via debug interface 264.
      <br/>
      In particular, the external computer may determine the status of the logic analyzer at any time via debug interface 264.
    </p>
    <p num="79">
      When the user has issued a "set trigger" command, debug mode state machine 330 sends "set trigger" signal 390 to trigger register 380.
      <br/>
      Trigger register 380 may be implemented as a shift register which converts serial data from the serial data in signal 320 into a parallel format, which is stored as trigger condition 308.
      <br/>
      Alternatively, serial data from serial data in signal 320 could be used to select the value of trigger condition 308 using any suitable method.
      <br/>
      For example, in one specific embodiment, a particular value of trigger condition 308 is established as the default value before the logic analyzer is compiled and programmed into the PLD, and the serial data loaded into the trigger register is used to modify the individual signals of trigger condition 308.
      <br/>
      This method is advantageous because it permits the default trigger condition to be active without loading the trigger register at all.
    </p>
    <p num="80">
      Trigger state machine 332 may be implemented in a wide variety of ways; in a preferred embodiment, state machine 332 is a synchronous state machine.
      <br/>
      The inputs to state machine 332 are system clock 304, "arm" signal 350, a "start" signal 356 and a "last address" signal 358.
      <br/>
      State machine 332 has four states: "never armed"; "armed and waiting for trigger"; "triggered and running"; and "complete, memory full".
      <br/>
      The "never armed" state occurs when the logic analyzer is first embedded in a device and the user has not yet armed it.
      <br/>
      The "armed and waiting for trigger" state occurs once the user delivers an "arm" command, and the "triggered and running" state occurs once a trigger condition is met.
      <br/>
      When the memory of the logic analyzer is full (depending upon the number of samples that the user wishes to capture), then the trigger state machine enters the "complete, memory full" state.
    </p>
    <p num="81">
      Trigger comparator 334 compares trigger signals 306 and their associated logic state to trigger condition 308.
      <br/>
      When the two match, a trigger has occurred and logic 334 issues "start" signal 356 to state machine 332.
      <br/>
      If trigger state machine 332 is armed then upon receipt of "start" signal 356, state machine 332 issues a "running" signal 360 to enable counter 336 to step through addresses in memory 342.
      <br/>
      The "running" signal 360 is also sent to memory 342, enabling memory 342 to capture and store the signals to monitor 302.
      <br/>
      Once counter 336 has reached the last address in memory 342, it issues "last address" signal 358 to state machine 332.
      <br/>
      Thus, based upon its various inputs, state machine 332 is maintained in one of the four states and also indicates this state via state signals 360, 386 and 388 to status register 382.
    </p>
    <p num="82">
      Write address counter 336 passes its address through address multiplexer 340 before being delivered as address 368 to memory 342.
      <br/>
      Address multiplexer 340 may be any suitable type of multiplexer.
      <br/>
      The "running" signal 360 from state machine 332 also serves as a select signal to address multiplexer 340 to control whether write addresses or read addresses are passed through to memory 342.
      <br/>
      When trigger state machine 332 is in the "running" state it sends the "running" signal 360 to address multiplexer 340, causing it to connect the write address 366 to the address 368 of memory 342.
      <br/>
      Otherwise the read address 394 is connected to address 368 of memory 342.
    </p>
    <p num="83">
      In this example, memory 342 has a width representing symbolically the depth, or number of samples to store in memory, while the height of memory 342 represents symbolically the size of a word stored.
      <br/>
      The number of samples stored in memory 342 also indicates the sizes of counters 336 and 338.
      <br/>
      Memory 342 may be implemented in a wide variety of ways.
      <br/>
      By way of example, in one embodiment of the invention, logic analyzer 260 is embedded in a FLEX 10K PLD available from Altera Corporation.
      <br/>
      This particular PLD contains embedded SRAM memory in which it is useful to implement memory 342.
      <br/>
      Of course, memory 342 may be implemented in many other types of PLDs that do not contain extra embedded memory.
      <br/>
      In this example, memory 342 is implemented as a first-in first-out (FIFO) memory.
      <br/>
      Memory 342 stores signals 302 when "running" signal 360 enables the memory for writing.
    </p>
    <p num="84">
      When the user has issued an "unload data" command, debug mode state machine 330 sends "unload data" signal 352 to enable read address counter 338 to begin counting.
      <br/>
      Address 394 passes through address multiplexer 340 to select successive words in memory 342.
      <br/>
      A word at a time 370 is transferred from memory 342 into shift register 344.
      <br/>
      Shift register 344 (also called a parallel-to-serial converter) may be of any size and implemented in any fashion.
      <br/>
      Words of any size may also be stored in memory 342 and transmitted to an external computer either via serial or a parallel interface.
      <br/>
      Shift register 344 is loaded via load enable signal 372 and shifts out a bit at a time using debug clock 324 functioning as a bit clock.
      <br/>
      Load enable signal 372 is sent by read address counter 338 to shift register 344 each time the value of address 394 is changed, to cause shift register 344 to load the corresponding data word 370 from memory 342.
      <br/>
      Read address counter 338 increments address 394 every N cycles of debug clock 324 where N is the number of signals in data word 370.
      <br/>
      Successive words from memory 342 are shifted serially out via serial data signal 398, through serial data multiplexer 384 to serial data out pin 326.
      <br/>
      When "unload data" signal 352 is active, serial data multiplexer 384 connects shift register output signal 398 to serial data out pin 326.
      <br/>
      Otherwise it connects status register output signal 396 to serial data out pin 326.
      <br/>
      In this manner, signals stored in memory 342 after a trigger condition may eventually be transferred to an external computer.
    </p>
    <p num="85">Computer System Embodiment</p>
    <p num="86">
      FIG. 7 illustrates a computer system 900 in accordance with an embodiment of the present invention.
      <br/>
      Computer system 900 includes any number of processors 902 (also referred to as central processing units, or CPUs) that are coupled to storage devices including primary storage 906 (such as random access memory, or RAM) and primary storage 904 (such as a read only memory, or ROM).
      <br/>
      As is well known in the art, primary storage 904 acts to transfer data and instructions uni-directionally to the CPU and primary storage 906 is used typically to transfer data and instructions in a bi-directional manner.
      <br/>
      Both of these primary storage devices may include any suitable of the computer-readable media described below.
      <br/>
      A mass storage device 908 is also coupled bi-directionally to CPU 902 and provides additional data storage capacity and may also include any of the computer-readable media described below.
      <br/>
      Mass storage device 908 may be used to store programs, data and the like and is typically a secondary storage medium (such as a hard disk) that is slower than primary storage.
      <br/>
      It will be appreciated that the information retained within mass storage device 908, may, in appropriate cases, be incorporated in standard fashion as part of primary storage 906 as virtual memory.
      <br/>
      A specific mass storage device such as a CD-ROM 914 passes data uni-directionally to the CPU.
    </p>
    <p num="87">
      CPU 902 is also coupled to an interface 910 that includes one or more input/output devices such as such as video monitors, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styluses, voice or handwriting recognizers, biometrics readers, or other computers.
      <br/>
      CPU 902 optionally may be coupled to another computer or telecommunications network using a network connection as shown generally at 912.
      <br/>
      With such a network connection, it is contemplated that the CPU might receive information from the network, or might output information to the network in the course of performing the above-described method steps.
    </p>
    <p num="88">
      In addition, embodiments of the present invention further relate to computer storage products with a computer readable medium that have program code thereon for performing various computer-implemented operations.
      <br/>
      The media and program code may be those specially designed and constructed for the purposes of the present invention, or they may be of the kind well known and available to those having skill in the computer software arts.
      <br/>
      Examples of computer-readable media include, but are not limited to: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROM disks; magneto-optical media such as floptical disks; and hardware devices that are specially configured to store and execute program code, such as ROM and RAM devices.
      <br/>
      Examples of program code include both machine code, such as produced by a compiler, and files containing higher level code that may be executed by the computer using an interpreter.
    </p>
    <p num="89">
      Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims.
      <br/>
      For instance, a logic analyzer may be embedded in any suitable device or circuit board that lends itself to being programmed.
      <br/>
      Also, the present invention is applicable to any type of EDA tool that is able to compile a user design.
      <br/>
      Although only one example of compilation of a logic analyzer is presented, variations on this compile technique may occur depending upon the device for which the design is being compiled and still take advantage of the present invention.
      <br/>
      Furthermore, the specific logic analyzer circuit shown is exemplary; other circuits may also be used to implement a logic analyzer.
      <br/>
      An interface to the logic analyzer from a computer may use any number of pins and any type of protocol such as serial, parallel, etc.
      <br/>
      Therefore, the described embodiments should be taken as illustrative and not restrictive, and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A computer storage product including a computer-usable medium having computer-readable program code embodied thereon for compiling a logic analyzer along with an electronic design, said computer storage product comprising computer-readable program code for effecting the following method:</claim-text>
      <claim-text>receiving an electronic design for a programmable logic device (PLD), said electronic design including a plurality of nodes; modifying said electronic design to include a logic analyzer circuit to be embedded in said PLD, said logic analyzer circuit including design inputs for connecting to selected ones of said nodes from said electronic design;</claim-text>
      <claim-text>and compiling said electronic design along with said logic analyzer circuit such that said selected nodes of said electronic design are connected to said design inputs of said logic analyzer circuit and a complete design is produced for programming said PLD, whereby said logic analyzer circuit is arranged to store signals from said selected nodes when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A computer storage product as recited in claim 1, said method further including: receiving a name of a trigger signal, said trigger signal corresponding to one of said nodes; receiving a trigger condition for said logic analyzer circuit;</claim-text>
      <claim-text>and said compiling step further including the sub-steps of:</claim-text>
      <claim-text>- connecting a line providing said trigger signal to a trigger input of said logic analyzer circuit, - including said trigger condition in said complete design, such that when said trigger signal matches said trigger condition in said PLD said logic analyzer circuit is arranged to begin storing said signals when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A computer storage product as recited in claim 1, wherein said logic analyzer circuit includes a logic analyzer memory, said PLD includes embedded memory, and wherein said step of compiling said electronic design includes the sub-step of: implementing said logic analyzer memory in said embedded memory, whereby said signals are rendered capable of being buffered in said embedded memory of said PLD.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A computer storage product as recited in claim 1, wherein said step of compiling said electronic design includes the sub-step of: connecting lines providing interface signals of said logic analyzer circuit to dedicated pins of said PLD in said electronic design, whereby a user computer is rendered connectable to said dedicated pins to communicate with said logic analyzer circuit when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A computer storage product as recited in claim 1, said method further including: programming said PLD with said complete design;</claim-text>
      <claim-text>and issuing an arm command to said logic analyzer circuit in said PLD such that said logic analyzer circuit is armed to monitor said selected nodes of said PLD and to store said signals in a memory of said logic analyzer circuit.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A computer storage product as recited in claim 5, said method further including: issuing an unload data command to said logic analyzer circuit in said PLD;</claim-text>
      <claim-text>and receiving said stored signals from said memory of said logic analyzer circuit such that said stored signals are rendered capable of being viewed on a user computer.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A computer storage product as recited in claim 1, wherein said logic analyzer circuit includes a first trigger condition, said method further including: programming said PLD with said complete design; sending a second trigger condition to said logic analyzer circuit embedded in said PLD to replace said first trigger condition without recompiling said complete design, whereby said logic analyzer circuit is arranged to begin monitoring said selected nodes upon occurrence of said second trigger condition.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A computer storage product as recited in claim 1, wherein said selected nodes include original nodes, said method further including: programming said PLD with said complete design such that said logic analyzer circuit is embedded in said PLD; receiving names of new nodes, said new nodes being different from said original nodes; recompiling said complete design such that said new nodes are connected to said design inputs of said logic analyzer circuit;</claim-text>
      <claim-text>and reprogramming said PLD with said recompiled complete design, whereby said embedded logic analyzer circuit is arranged to monitor said new nodes.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A computer storage product including a computer-usable medium having computer-readable program code embodied thereon for retrieving data stored in a logic analyzer embedded in a programmable logic device (PLD), said computer storage product comprising computer-readable program code for effecting the following method: compiling an electronic design and automatically inserting a logic analyzer to produce a complete design file; programming a PLD with said complete design file, said logic analyzer being embedded in said PLD; arming said logic analyzer in said PLD such that said logic analyzer is arranged to monitor internal nodes of said PLD and to store internal signals from said internal nodes in a memory of said logic analyzer; issuing an unload data command to said logic analyzer in said PLD;</claim-text>
      <claim-text>and receiving said stored internal signals from said memory of said logic analyzer such that said stored internal signals are rendered capable of being viewed on a user computer.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A computer storage product as recited in claim 9, wherein said method further including: receiving a name of a trigger signal, said trigger signal corresponding to one of said internal signals of said PLD; receiving a trigger condition for said logic analyzer;</claim-text>
      <claim-text>and said compiling step further including the sub-steps of: - connecting said trigger signal to a trigger input of said logic analyzer, - including said trigger condition in said complete design file, such that when said trigger signal matches said trigger condition in said PLD said logic analyzer is arranged to begin storing said internal signals when said logic analyzer is embedded in said PLD.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A computer storage product as recited in claim 9, wherein said logic analyzer includes a logic analyzer memory, said PLD includes embedded memory, and wherein said step of compiling includes the sub-step of: implementing said logic analyzer memory in said embedded memory, whereby said monitored internal signals are rendered capable of being stored in said embedded memory of said PLD.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A computer storage product as recited in claim 9, wherein said step of compiling includes the sub-step of: connecting interface signals of said logic analyzer to dedicated pins of said PLD, whereby a user computer is rendered connectable to said dedicated pins to communicate with said logic analyzer embedded in said PLD.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A computer storage product as recited in claim 9, wherein said logic analyzer includes a first trigger condition, said method further including: sending a second trigger condition to said logic analyzer embedded in said PLD to replace said first trigger condition without recompiling said complete design, whereby said logic analyzer is arranged to begin monitoring said internal nodes upon occurrence of said second trigger condition.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A computer storage product as recited in claim 9, wherein said internal nodes include original nodes, said method further including: receiving names of new nodes different from said original nodes; recompiling said complete design such that said logic analyzer is arranged to monitor said new nodes;</claim-text>
      <claim-text>and reprogramming said PLD with said recompiled complete design, whereby said embedded logic analyzer is arranged to monitor said new nodes.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A computer storage product including a computer-usable medium having computer-readable program code embodied thereon for automatically compiling a logic analyzer along with an electronic design, said computer storage product comprising computer-readable program code for effecting the following method: identifying a user design file representing an electronic design for a programmable logic device (PLD); generating a netlist representation of said electronic design; producing a gate level representation of a logic analyzer circuit, said logic analyzer circuit including design inputs for receiving input signals from said electronic design, and interface signals for communicating with a user computer; connecting said gate level representation of said logic analyzer circuit to said netlist representation of said electronic design to produce a complete design, said design inputs of said logic analyzer circuit being connected to corresponding said input signals of said electronic design;</claim-text>
      <claim-text>and placing and routing said complete design to produce an output file capable of being used to program said PLD with said electronic design and including said logic analyzer circuit, whereby said logic analyzer circuit is used to monitor said input signals of said PLD.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. A computer storage product as recited in claim 15, wherein said input signals include a trigger signal and signals to monitor, said method further including: receiving a name of said trigger signal and names of said signals to monitor; receiving a trigger condition for said logic analyzer circuit;</claim-text>
      <claim-text>and said connecting step further including the sub-steps of: - connecting said trigger signal to a trigger input of said logic analyzer circuit, - including said trigger condition in said complete design, such that when said trigger signal matches said trigger condition in said PLD said logic analyzer circuit is arranged to begin storing said signals to monitor when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. A computer storage product as recited in claim 15, wherein said logic analyzer circuit includes a logic analyzer memory, said PLD includes embedded memory, and wherein said step of producing a gate level representation includes the sub-step of: implementing said logic analyzer memory in said embedded memory, whereby said input signals are rendered capable of being stored in said embedded memory of said PLD.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. A computer storage product as recited in claim 15, wherein said step of connecting said gate level representation includes the sub-step of: connecting said interface signals of said logic analyzer circuit to dedicated pins of said PLD in said electronic design, whereby a user computer is rendered connectable to said dedicated pins to communicate with said logic analyzer circuit in said PLD.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. A computer storage product as recited in claim 15, said method further including: programming said PLD with said complete design;</claim-text>
      <claim-text>and issuing an arm command from a user computer via said interface signals to said logic analyzer circuit in said PLD such that said logic analyzer circuit is arranged to monitor said input signals of said PLD and to store said input signals in a memory of said logic analyzer circuit.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. A computer storage product as recited in claim 19, said method further including: issuing an unload command from said user computer via said interface signals to said logic analyzer circuit in said PLD;</claim-text>
      <claim-text>and receiving said stored input signals from said memory of said logic analyzer circuit via said interface signals such that said stored input signals are rendered capable of being viewed on said user computer.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. A computer storage product as recited in claim 15, wherein said logic analyzer circuit includes a first trigger condition, said method further including: programming said PLD with said complete design;</claim-text>
      <claim-text>and sending a second trigger condition via said interface signals to replace said first trigger condition in said logic analyzer circuit without recompiling said complete design, whereby said logic analyzer circuit is arranged to begin monitoring said input signals upon occurrence of said second trigger condition.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A computer storage product as recited in claim 15, wherein said input signals include original signals to monitor, said method further including: programming said PLD with said complete design such that said logic analyzer circuit is embedded in said PLD; receiving new signals to monitor different from said original signals to monitor; recompiling said complete design such that said new signals to monitor replace said original signals to monitor in said logic analyzer circuit;</claim-text>
      <claim-text>and reprogramming said PLD with said recompiled complete design, whereby said embedded logic analyzer circuit is arranged to monitor said new signals to monitor.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. A computer-implemented method of compiling a logic analyzer along with an electronic design, said method comprising the steps of: receiving an electronic design for a programmable logic device (PLD), said electronic design including a plurality of nodes; modifying said electronic design to include a logic analyzer circuit to be embedded in said PLD, said logic analyzer circuit including design inputs for connecting to selected ones of said nodes from said electronic design;</claim-text>
      <claim-text>and compiling said electronic design along with said logic analyzer circuit such that said selected nodes of said electronic design are connected to said design inputs of said logic analyzer circuit and a complete design is produced for programming said PLD, whereby said logic analyzer circuit is arranged to store signals from said selected nodes when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. A method as recited in claim 23, said method further including: receiving a name of a trigger signal, said trigger signal corresponding to one of said nodes; receiving a trigger condition for said logic analyzer circuit;</claim-text>
      <claim-text>and said compiling step further including the sub-steps of: - connecting a line providing said trigger signal to a trigger input of said logic analyzer circuit, - including said trigger condition in said complete design, such that when said trigger signal matches said trigger condition in said PLD said logic analyzer circuit is arranged to begin storing said signals when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. A method as recited in claim 23, wherein said logic analyzer circuit includes a logic analyzer memory, said PLD includes embedded memory, and wherein said step of compiling said electronic design includes the sub-step of: implementing said logic analyzer memory in said embedded memory, whereby said signals are rendered capable of being buffered in said embedded memory of said PLD.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. A method as recited in claim 23, wherein said step of compiling said electronic design includes the sub-step of: connecting lines providing interface signals of said logic analyzer circuit to dedicated pins of said PLD in said electronic design, whereby a user computer is rendered connectable to said dedicated pins to communicate with said logic analyzer circuit when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. A method as recited in claim 23, said method further including: programming said PLD with said complete design;</claim-text>
      <claim-text>and issuing an arm command to said logic analyzer circuit in said PLD such that said logic analyzer circuit is armed to monitor said selected nodes of said PLD and to store said signals in a memory of said logic analyzer circuit.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. A method as recited in claim 27, said method further including: issuing an unload data command to said logic analyzer circuit in said PLD;</claim-text>
      <claim-text>and receiving said stored signals from said memory of said logic analyzer circuit such that said stored signals are rendered capable of being viewed on a user computer.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. A method as recited in claim 23, wherein said logic analyzer circuit includes a first trigger condition, said method further including: programming said PLD with said complete design; sending a second trigger condition to said logic analyzer circuit embedded in said PLD to replace said first trigger condition without recompiling said complete design, whereby said logic analyzer circuit is arranged to begin monitoring said selected nodes upon occurrence of said second trigger condition.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. A method as recited in claim 23, wherein said selected nodes include original nodes, said method further including: programming said PLD with said complete design such that said logic analyzer circuit is embedded in said PLD; receiving names of new nodes, said new nodes being different from said original nodes; recompiling said complete design such that said new nodes are connected to said design inputs of said logic analyzer circuit;</claim-text>
      <claim-text>and reprogramming said PLD with said recompiled complete design, whereby said embedded logic analyzer circuit is arranged to monitor said new nodes.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. A computer-implemented method of retrieving data stored in a logic analyzer embedded in a programmable logic device (PLD), said method comprising the steps of: compiling an electronic design and automatically inserting a logic analyzer to produce a complete design file; programming a PLD with said complete design file, said logic analyzer being embedded in said PLD; arming said logic analyzer in said PLD such that said logic analyzer is arranged to monitor internal signals of said PLD and to store said internal signals in a memory of said logic analyzer; issuing an unload data command to said logic analyzer in said PLD;</claim-text>
      <claim-text>and receiving said stored internal signals from said memory of said logic analyzer such that said stored internal signals are rendered capable of being viewed on a user computer.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. A computer-implemented method of automatically compiling a logic analyzer along with an electronic design, said method comprising the steps of: identifying a user design file representing an electronic design for a programmable logic device (PLD); generating a netlist representation of said electronic design; producing a gate level representation of a logic analyzer circuit, said logic analyzer circuit including design inputs for receiving input signals from said electronic design, and interface signals for communicating with a user computer; connecting said gate level representation of said logic analyzer circuit to said netlist representation of said electronic design to produce a complete design, said design inputs of said logic analyzer circuit being connected to corresponding said input signals of said electronic design;</claim-text>
      <claim-text>and placing and routing said complete design to produce an output file capable of being used to program said PLD with said electronic design and including said logic analyzer circuit, whereby said logic analyzer circuit is used to monitor said input signals of said PLD.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. A computer-implemented method of making a programmable logic device (PLD) comprising the steps of: receiving an electronic design for a PLD, said electronic design including a plurality of nodes; modifying said electronic design to include a logic analyzer circuit to be embedded in said PLD, said logic analyzer circuit including design inputs for connecting to selected ones of said nodes from said electronic design;</claim-text>
      <claim-text>and compiling said electronic design along with said logic analyzer circuit to produce a complete design output file such that said selected nodes of said electronic design are connected to said design inputs of said logic analyzer circuit.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. A method as recited in claim 33, further comprising the step of: programming said PLD with said complete design output file, whereby said embedded logic analyzer circuit of said PLD is arranged to store said signals from said selected nodes.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. A method as recited in claim 33, wherein said logic analyzer circuit includes a data acquisition portion of a logic analyzer, whereby data acquired by said logic analyzer circuit is made available to a separate analysis portion of said logic analyzer.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. A programmable logic device (PLD) formed by a computer-implemented method comprising the steps of: receiving an electronic design for a PLD, said electronic design including a plurality of nodes; modifying said electronic design to include a logic analyzer circuit to be embedded in said PLD, said logic analyzer circuit including design inputs for connecting to selected ones of said nodes from said electronic design; compiling said electronic design along with said logic analyzer circuit to produce a complete design output file such that said selected nodes of said electronic design are connected to said design inputs of said logic analyzer circuit;</claim-text>
      <claim-text>and programming said PLD with said complete design output file, whereby said embedded logic analyzer circuit of said PLD is arranged to store signals from said selected nodes.</claim-text>
    </claim>
    <claim num="37">
      <claim-text>37. A programmable logic device (PLD) as recited in claim 36, said method for forming said PLD further comprising: receiving a name of a trigger signal, said trigger signal corresponding to one of said nodes; receiving a trigger condition for said logic analyzer circuit;</claim-text>
      <claim-text>and said compiling step further including the sub-steps of: - connecting a line providing said trigger signal to a trigger input of said logic analyzer circuit, - including said trigger condition in said complete design, such that when said trigger signal matches said trigger condition in said PLD said logic analyzer circuit is arranged to begin storing said signals when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="38">
      <claim-text>38. A programmable logic device (PLD) as recited in claim 36 wherein said logic analyzer circuit includes a logic analyzer memory, said PLD includes embedded memory, and wherein said step of compiling said electronic design includes the sub-step of: implementing said logic analyzer memory in said embedded memory, whereby said signals are rendered capable of being buffered in said embedded memory of said PLD.</claim-text>
    </claim>
    <claim num="39">
      <claim-text>39. A programmable logic device (PLD) as recited in claim 36, wherein said step of compiling said electronic design includes the sub-step of: connecting lines providing interface signals of said logic analyzer circuit to dedicated pins of said PLD in said electronic design, whereby a user computer is rendered connectable to said dedicated pins to communicate with said logic analyzer circuit when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="40">
      <claim-text>40. A programmable logic device (PLD) as recited in claim 36, said method for forming said PLD further comprising: programming said PLD with said complete design;</claim-text>
      <claim-text>and issuing an arm command to said logic analyzer circuit in said PLD such that said logic analyzer circuit is armed to monitor said selected nodes of said PLD and to store said signals in a memory of said logic analyzer circuit.</claim-text>
    </claim>
    <claim num="41">
      <claim-text>41. A programmable logic device (PLD) as recited in claim 40, said method for forming said PLD further comprising: issuing an unload data command to said logic analyzer circuit in said PLD;</claim-text>
      <claim-text>and receiving said stored signals from said memory of said logic analyzer circuit such that said stored signals are rendered capable of being viewed on a user computer.</claim-text>
    </claim>
    <claim num="42">
      <claim-text>42. A programmable logic device (PLD) as recited in claim 36, wherein said logic analyzer circuit includes a first trigger condition, said method for forming said PLD further comprising: programming said PLD with said complete design;</claim-text>
      <claim-text>and sending a second trigger condition to said logic analyzer circuit embedded in said PLD to replace said first trigger condition without recompiling said complete design, whereby said logic analyzer circuit is arranged to begin monitoring said selected nodes upon occurrence of said second trigger condition.</claim-text>
    </claim>
    <claim num="43">
      <claim-text>43. A programmable logic device (PLD) as recited in claim 36, wherein said selected nodes include original nodes, said method further including: programming said PLD with said complete design such that said logic analyzer circuit is embedded in said PLD; receiving names of new nodes, said new nodes being different from said original nodes; recompiling said complete design such that said new nodes are connected to said design inputs of said logic analyzer circuit;</claim-text>
      <claim-text>and reprogramming said PLD with said recompiled complete design, whereby said embedded logic analyzer circuit is arranged to monitor said new nodes.</claim-text>
    </claim>
    <claim num="44">
      <claim-text>44. A test programmable logic device (PLD) comprising: PLD circuitry representing one iteration of an electronic design in a design process to create a final PLD, said PLD circuitry having an I/O region including a plurality of pins and interior circuitry that is not directly connected to said pins;</claim-text>
      <claim-text>and logic analyzer circuitry integrated in the interior circuitry such that a portion of said interior region is connected to one or more of said pins through said logic analyzer circuitry.</claim-text>
    </claim>
    <claim num="45">
      <claim-text>45. The test programmable logic device of claim 44 wherein said logic analyzer circuitry consists of a data acquisition portion of a logic analyzer, whereby data acquired by said logic analyzer circuit is made available to a separate analysis portion of said logic analyzer.</claim-text>
    </claim>
    <claim num="46">
      <claim-text>46. A programmable logic development system suitable for debugging a programmable logic device (PLD), said system comprising: a PLD arranged to accept electrical programming signals to program said PLD with a debugging electronic design; a programming unit in electrical communication with said PLD and arranged to deliver said electrical programming signals to said PLD;</claim-text>
      <claim-text>and a computer in electrical communication with said programming unit, said computer being arranged to automatically connect a logic analyzer circuit design to a user electronic design to produce said debugging electronic design, and to program said PLD with said debugging electronic design by way of said electrical programming signals, whereby said PLD includes said user electronic design and said logic analyzer circuit and internal signals of said user electronic design are captured by said logic analyzer circuit and transmitted external to said PLD for viewing by a user.</claim-text>
    </claim>
    <claim num="47">
      <claim-text>47. A method of providing a programmable logic device (PLD) development environment to debug a PLD, said method comprising the steps of: providing a PLD suitable for accepting electrical programming signals to program said PLD with a debugging electronic design; providing a programming unit suitable for delivering electrical programming signals to said PLD; providing an interface cable suitable for delivering said electrical programming signals from a computer to said programming unit;</claim-text>
      <claim-text>and providing a computer-readable medium embodying a software program suitable for execution on said computer;</claim-text>
      <claim-text>said software program being arranged to automatically connect a logic analyzer circuit design to a user electronic design to produce said debugging electronic design, and to program said PLD with said debugging electronic design by way of said electrical programming signals, whereby said PLD includes said user electronic design and said logic analyzer circuit and internal signals of said user electronic design are captured by said logic analyzer circuit and transmitted external to said PLD for viewing by a user.</claim-text>
    </claim>
    <claim num="48">
      <claim-text>48. A computer-implemented method of automatically compiling a logic analyzer along with an electronic design comprising: identifying a user design file representing a portion an electronic design for a programmable logic device (PLD), said PLD including embedded memory; generating a netlist representation of said electronic design; producing a gate level representation of a logic analyzer circuit, said logic analyzer circuit including design inputs for receiving input signals from said electronic design, and interface signals for communicating with a user computer, and also including a logic analyzer memory circuit; implementing said logic analyzer memory circuit in said embedded memory of said PLD, such that said input signals may be stored in said embedded memory of said PLD; connecting said gate level representation of said logic analyzer circuit to said netlist representation of said electronic design to produce a complete design, said design inputs of said logic analyzer circuit being connected to corresponding said input signals of said electronic design;</claim-text>
      <claim-text>and placing and routing said complete design to produce an output file capable of being used to program said PLD with said electronic design and including said logic analyzer circuit, whereby said logic analyzer circuit is used to monitor said input signals of said PLD.</claim-text>
    </claim>
    <claim num="49">
      <claim-text>49. A computer-implemented method of compiling a logic analyzer along with an electronic design, said method comprising the steps of: receiving an electronic design for a programmable logic device (PLD), said electronic design including a plurality of nodes, said PLD including embedded memory; supplementing said electronic design to include a logic analyzer circuit to be embedded in said PLD, said logic analyzer circuit including design inputs for connecting to selected ones of said nodes from said electronic design, and also including a logic analyzer memory circuit; compiling said electronic design along with said logic analyzer circuit such that said selected nodes of said electronic design are connected to said design inputs of said logic analyzer circuit and a complete design is produced for programming said PLD;</claim-text>
      <claim-text>and implementing said logic analyzer memory circuit in said embedded memory of said PLD, whereby said logic analyzer circuit is arranged to store signals from said selected nodes in said embedded memory when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
    <claim num="50">
      <claim-text>50. A computer-readable medium comprising computer code for automatically compiling a logic analyzer along with an electronic design, said computer code of said computer-readable medium effecting the following: identifying a user design file representing a portion an electronic design for a programmable logic device (PLD), said PLD including embedded memory; generating a netlist representation of said electronic design; producing a gate level representation of a logic analyzer circuit, said logic analyzer circuit including design inputs for receiving input signals from said electronic design, and interface signals for communicating with a user computer, and also including a logic analyzer memory circuit; implementing said logic analyzer memory circuit in said embedded memory of said PLD, such that said input signals may be stored in said embedded memory of said PLD; connecting said gate level representation of said logic analyzer circuit to said netlist representation of said electronic design to produce a complete design, said design inputs of said logic analyzer circuit being connected to corresponding said input signals of said electronic design;</claim-text>
      <claim-text>and placing and routing said complete design to produce an output file capable of being used to program said PLD with said electronic design and including said logic analyzer circuit, whereby said logic analyzer circuit is used to monitor said input signals of said PLD.</claim-text>
    </claim>
    <claim num="51">
      <claim-text>51. A computer-readable medium comprising computer code for compiling a logic analyzer along with an electronic design, said computer code of said computer-readable medium effecting the following: receiving an electronic design for a programmable logic device (PLD), said electronic design including a plurality of nodes, said PLD including embedded memory; supplementing said electronic design to include a logic analyzer circuit to be embedded in said PLD, said logic analyzer circuit including design inputs for connecting to selected ones of said nodes from said electronic design, and also including a logic analyzer memory circuit; compiling said electronic design along with said logic analyzer circuit such that said selected nodes of said electronic design are connected to said design inputs of said logic analyzer circuit and a complete design is produced for programming said PLD;</claim-text>
      <claim-text>and implementing said logic analyzer memory circuit in said embedded memory of said PLD, whereby said logic analyzer circuit is arranged to store signals from said selected nodes in said embedded memory when said logic analyzer circuit is embedded in said PLD.</claim-text>
    </claim>
  </claims>
</questel-patent-document>