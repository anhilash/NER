<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185593B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185593</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185593</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="26736336" extended-family-id="42102424">
      <document-id>
        <country>US</country>
        <doc-number>09120775</doc-number>
        <kind>A</kind>
        <date>19980722</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09120775</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>60636842</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>12077598</doc-number>
        <kind>A</kind>
        <date>19980722</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09120775</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>5732297</doc-number>
        <kind>P</kind>
        <date>19970902</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1997US-60057322</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F   5/01        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>5</main-group>
        <subgroup>01</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   7/57        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>7</main-group>
        <subgroup>57</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>708205000</text>
        <class>708</class>
        <subclass>205000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>708497000</text>
        <class>708</class>
        <subclass>497000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-005/01F</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>005</main-group>
        <subgroup>01F</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-007/483</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>7</main-group>
        <subgroup>483</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-005/012</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>5</main-group>
        <subgroup>012</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-007/483</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>7</main-group>
        <subgroup>483</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-007/49957</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>7</main-group>
        <subgroup>49957</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>S06F-007/499R2B</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>28</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>6</number-of-drawing-sheets>
      <number-of-figures>7</number-of-figures>
      <image-key data-format="questel">US6185593</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for parallel normalization and rounding technique for floating point arithmetic operations</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>NUKIYAMA TOMOJI</text>
          <document-id>
            <country>US</country>
            <doc-number>4779220</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4779220</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>MAHER III ROBERT D</text>
          <document-id>
            <country>US</country>
            <doc-number>5040138</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5040138</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>OGILVIE CLARENCE R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5550768</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5550768</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>OLSON CHRISTOPHER H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5957997</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5957997</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>GORSHTEIN VALERY Y, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5963461</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5963461</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>BROWN JEFFREY D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4926370</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4926370</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>BROWN JEFFREY D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4941120</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4941120</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/057322</doc-number>
          <date>19970902</date>
        </document-id>
        <document-id>
          <country>US</country>
          <doc-number>60/057322</doc-number>
          <date>19970902</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Intrinsity, Inc.</orgname>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>INTRINSITY</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Brooks, Jeffrey S.</name>
            <address>
              <address-1>Round Rock, TX, US</address-1>
              <city>Round Rock</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Blomgren, James S.</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Booth &amp; Wright, L.L.P.</orgname>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Booth, Matthew J.</name>
          </addressbook>
        </agent>
        <agent sequence="3" rep-type="agent">
          <addressbook lang="en">
            <name>Wright, Karen S.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Malzahn, David H.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      The present invention describes a method and apparatus that performs parallel normalization and rounding on an ANSI/IEEE 754-1985 floating point intermediate result that dispenses with the need for shifting of the intermediate result prior to normalization or rounding.
      <br/>
      The exponent is pre-incremented prior to normalization.
      <br/>
      During normalization, the most significant bit of the intermediate fraction is shifted into the carry bit and the exponent is decremented accordingly.
      <br/>
      Selection logic then selects one of six possible formatting procedures to generate a mathematically correct output fraction in proper ANSI/IEEE 754-1985 floating point format, and formatting logic generates the output fraction according to the selected formatting procedure.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application claims the benefits of the earlier filed US Provisional Application Ser.
      <br/>
      No. 60/057322, filed Sep. 2, 1997, which is incorporated by reference for all purposes into this application.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="3">
      The present invention relates to performing certain floating point arithmetic operations in a processor.
      <br/>
      More particularly, the invention relates to simplifying the completion of floating point arithmetic operations on two pre-normalized operands by performing in parallel the steps of normalizing and rounding the arithmetic result.
    </p>
    <p num="4">2. Description of the Related Art</p>
    <p num="5">
      Within a processor, a given number may be stored in a format known as floating point.
      <br/>
      The operations of multiply, divide, add, and subtract may be performed on floating point numbers.
      <br/>
      An American national standard has been developed in order to provide a uniform system of rules for governing the implementation of floating point arithmetic systems.
      <br/>
      This standard is identified as ANSI/IEEE Standard No. 754-1985, and is incorporated by reference in this application.
      <br/>
      In the design of floating point arithmetic systems and algorithms, it is a principal objective to achieve results that are consistent with this standard and enable users of such systems and algorithms to achieve conformity in the calculations and solutions to problems even though the problems are solved using different computer systems.
    </p>
    <p num="6">
      The typical floating point arithmetic operation may be accomplished in single precision, double precision, or extended precision format.
      <br/>
      Each of these formats utilizes a sign, exponent, and fraction field, where the respective fields occupy predefined portions of the floating point number.
      <br/>
      In addition, the extended precision format includes a mantissa field, which includes the fraction field plus an additional bit, the L bit, that is merely implied in the single - and double-precision formats.
    </p>
    <p num="7">
      FIG. 1 illustrates the IEEE format for a 32-bit single precision number where the sign field is a single bit occupying the most significant bit position; the exponent field is an 8-bit quantity occupying the next-most significant bit positions; and the fraction field occupies the least significant 23 bit positions.
      <br/>
      In the case of a double precision floating point number, the sign field is a single bit occupying the most significant bit position; the exponent field is an 11-bit field occupying the next-most significant bit positions; and the fraction field is a 52-bit field occupying the least significant position.
      <br/>
      The format of the extended precision floating point number requires a single sign bit, a 15 bit exponent field, and a 64-bit mantissa field that includes the fraction and the L bit.
    </p>
    <p num="8">
      In designing the hardware and logic for performing floating point arithmetic operations in conformance with the ANSI/IEEE standard 754-1985, it is necessary to incorporate certain additional indicator bits into the floating point hardware operations.
      <br/>
      For example, an "implicit" bit I is created by control logic when the exponent of the floating point number has a nonzero value.
      <br/>
      This bit, also called the "L" bit, can be created at the time a floating point number is written into the arithmetic registers where the implicit bit occupies the first bit position to the left of the fraction field of the number.
      <br/>
      Since, for non-zero exponents, the L bit is always one, it is "implied" and is not explicitly represented in the IEEE representation for single and double precision floating point numbers.
    </p>
    <p num="9">
      The L bit is represented internally within the floating point unit of the processor.
      <br/>
      The L bit is included, along with the fraction, in the mantissa of the internal representation of floating point numbers.
      <br/>
      While the L bit is only implied for IEEE single - and double-precision formats, the L bit explicitly is represented in registers containing extended precision floating point numbers.
    </p>
    <p num="10">
      An additional indicator bit, a "guard" bit G, is set by the floating point logic during certain arithmetic operations as an indicator of the loss of precision of the floating point number being processed.
      <br/>
      In the case of addition and subtraction, the G bit is set when a right shift, required for alignment, shifts a significant bit off the right side of the register capacity.
    </p>
    <p num="11">
      Additional indicator bits, a "round" bit R and a "carry" bit C, are similarly used for certain floating point operations and are set by the floating point logic.
      <br/>
      Finally, a "sticky" bit S is an indicator bit that is set in certain floating point arithmetic operations when any lower precision bit is a "1" as an indicator that the floating point number has lost some precision.
      <br/>
      In the standard prior art systems, the G, R and S bits are used exclusively for rounding operations, after the result has been normalized.
      <br/>
      The G and R bits are treated as if they are a part of the fraction; they are shifted with the rest of the fraction, and included in all arithmetic operations.
      <br/>
      The S bit is not shifted with the fraction but is included in the arithmetic.
      <br/>
      It acts as a "catcher" for 1's shifted off the right of the fraction.
      <br/>
      When a 1 is shifted off the right side of the fraction, the S bit will remain set until normalization and rounding are finished.
    </p>
    <p num="12">
      Floating point arithmetic operations require round logic well-known in the art to create a round control bit or signal indicating whether or not rounding is required.
      <br/>
      If none of the G, R, and S bits are set to a binary "1", no rounding will be required and the round control bit will not be set.
      <br/>
      Otherwise, the round control bit will be set or reset as required by the full set of round logic inputs.
    </p>
    <p num="13">
      After each floating point intermediate arithmetic result is developed, it must be normalized and then rounded if the round control bit is set.
      <br/>
      In the prior art, floating point units generally perform normalization and rounding functions in series.
      <br/>
      First the fraction portion of the unnormalized intermediate result of a floating point arithmetic operation is passed to a normalizer circuit where normalization is performed.
      <br/>
      Then, after normalization, rounding is performed.
    </p>
    <p num="14">
      In the prior art, normalization refers to the process of manipulating the exponent and fraction of an unnormalized intermediate floating point result so that the most significant binary "1" of the mantissa resides in the L bit, which is the most significant bit of the mantissa.
      <br/>
      Bit L is labeled as 24 in FIGS. 1 and 6.
      <br/>
      The exponent is decremented for each 1-bit left-shift of the mantissa.
      <br/>
      During normalization, the G and R bits are also shifted, with zeros shifted into the round bit.
      <br/>
      A single precision example of prior art normalization is shown below in Table 1, where variables W,X,Y, and Z represent any value.
      <br/>
      N represents any exponent value greater than or equal to Emin+1, where Emin is the minimum exponent capable of representation in the floating point unit.
    </p>
    <p num="15">
      -- TABLE 1
      <br/>
      -- EXP     L    REMAINING BITS OF FRACTION         G    R    S
      <br/>
      -- N       0    1XXXXXXXXXXXXXXXXXXXXXX            W    Y    Z
      <br/>
      -- N - 1 1    XXXXXXXXXXXXXXXXXXXXXXW            Y    Z    0
    </p>
    <p num="16">
      In Table 1, the top fraction has the most significant binary "1" of the fraction residing one bit to the right of the L bit.
      <br/>
      The top fraction thus represents a value that requires a 1-bit shift left in order to be normalized according to the IEEE standard.
      <br/>
      The bottom fraction of Table 1 shows a normalized fraction with the most significant binary "1" of the fraction shifted into the L bit.
      <br/>
      After the one-bit left shift the top fraction of Table 1 is in the IEEE normalized format.
      <br/>
      During normalization, the exponent of the top fraction is decremented by one for each one-bit left shift.
      <br/>
      The top and bottom mantissas of Table 1 are equivalent if the value of the bottom floating point number's exponent is one less than the value of the top number's exponent
    </p>
    <p num="17">
      Rounding is then performed in the prior art on the normalized intermediate fraction.
      <br/>
      Rounding is performed by incrementing the normalized intermediate result if required.
      <br/>
      Since normalization and rounding are performed sequentially in the prior art, the latency of the execution pipeline includes the delay of both the normalizer and rounder circuits.
    </p>
    <p num="18">
      A method and apparatus that allows the normalization and rounding functions to operate in parallel eliminates the delay of the rounder from the execution pipeline. U.S. Pat. No. 4,926,370 to Brown et al (Brown '370) describes an implementation for performing the normalization and rounding functions in parallel.
      <br/>
      Brown '370 incorporates another patent, U.S. Pat. No.4,941,920 to Brown et al (Brown '120).
      <br/>
      The prior art performs parallel normalization and rounding in the following manner.
    </p>
    <p num="19">
      The first two bits of the mantissa of the intermediate result of a floating point arithmetic operation are examined to determine the format of the mantissa.
      <br/>
      Also, a check is made to determine what type of arithmetic operation has been performed.
      <br/>
      Under certain format/operation combinations the intermediate mantissa is loaded directly into a register shown as register 16 on FIG. 2.
      <br/>
      Under certain other conditions the first of two potential shifts is performed on the intermediate mantissa before it is loaded into the register 16.
      <br/>
      The present invention does not have this first shift.
    </p>
    <p num="20">
      From register 16 (of FIG. 2) the intermediate mantissa is simultaneously passed to a normalizer circuit and a rounder circuit.
      <br/>
      The first two bit positions of the intermediate mantissa residing in register 16 are examined.
      <br/>
      If the 2-bit format of the first two mantissa bits in register 16 is 1.X, the rounder circuit is activated.
      <br/>
      If the 2-bit format is neither 1.X nor 0.1X, the normalizer circuit is activated.
      <br/>
      If the 2-bit format is 0.1X the intermediate result mantissa is shifted left one position and the rounder circuit is then activated.
      <br/>
      The present invention does not have this second shift.
    </p>
    <p num="21">
      Therefore, the prior art requires two additional multiplexers in order to accomplish the preliminary normalization and rounding shifts that may be required.
      <br/>
      This preliminary shifting requirement and its attendant multiplexers are not necessary in the present invention.
    </p>
    <p num="22">
      The present invention reduces the latency of the floating point execution pipeline by allowing the normalization and rounding functions to be performed in parallel, eliminating the delay of the rounder from the total execution pipeline delay.
      <br/>
      The present invention also presents an improvement over the prior art because it does not require shifting of the intermediate mantissa prior to normalization and rounding.
      <br/>
      Instead, the intermediate result mantissa of an extended precision floating point arithmetic operation (or the intermediate result fraction of a single or double precision floating point arithmetic operation) is transferred directly into a register 610 (of FIG. 6), without a check of the operation type or first two bits of the intermediate result mantissa or fraction.
      <br/>
      The present invention transfers the intermediate mantissa or fraction directly into the register 610 without any intermediate shifting, eliminating the first additional multiplexer 15 (of FIG. 2) present in the prior art.
      <br/>
      The rounder circuit and the normalizer circuit of the present invention receive the intermediate mantissa or fraction from the register 610 in parallel.
      <br/>
      The present invention does not require a left-shift prior to rounding for an intermediate mantissa beginning with a 2-bit format of 0.1X, thus eliminating the need for the second additional multiplexer 53 of the prior art.
      <br/>
      The present invention performs a novel type of normalization.
      <br/>
      The normalizer circuit of the present invention performs normalization of the intermediate mantissa or fraction by 1) pre-incrementing the exponent by 1,2) shifting of the most significant binary "1" of the mantissa into the C bit rather than the L bit, and 3) decrementing the exponent in accordance with the number of left shifts performed for normalization.
      <br/>
      The present invention then selects and formats the correct result mantissa or fraction.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="23">
      The present invention describes a method and apparatus that performs normalization and rounding on an ANSI/IEEE 754-1985 floating point intermediate result having a mantissa or fraction and an exponent.
      <br/>
      The apparatus contains circuits that adjust the exponent, normalize the fraction or mantissa, round the fraction or mantissa, and perform control functions.
      <br/>
      The apparatus also contains circuits that perform selection and formatting logic in order to dispense with the need for shifting of the intermediate result prior to normalization or rounding.
      <br/>
      The exponent of the intermediate result is pre-incremented prior to normalization.
      <br/>
      Normalization of the present invention requires shifting the most significant binary "1" of the intermediate fraction or mantissa into the carry bit.
      <br/>
      Normalization also requires a corresponding decrement of the exponent for each left shift performed.
      <br/>
      The selection logic examines the C bit and the L bit and the most significant bit of the intermediate fraction in order to determine whether/how many left shifts are required to normalize into the C bit (0-bits, 1-bit, 2-bits, or &gt;2-bits).
      <br/>
      The select logic also examines the values of the Gin bit, the Rin bit, and the round control bit.
      <br/>
      Based on the above inputs, the select logic will select one of six possible select control outputs, each of which corresponds to a formatting procedure that formats the output fraction or mantissa.
      <br/>
      Formatting logic then appropriately formats the result fraction or mantissa.
      <br/>
      With the present invention, the need to use the output from the normalizer or rounder circuit is completely predictable and the operation of normalization and rounding can be accomplished as a parallel process rather than as a sequential operation.
    </p>
    <p num="24">
      The present invention additionally describes an apparatus and method that selects and formats the output fraction or mantissa result of an ANSI/IEEE 754-1985 floating point arithmetic operation where parallel normalization and rounding of the intermediate result fraction or mantissa has occurred.
      <br/>
      The C bit and the L bit and the most significant bit of the intermediate fraction are examined in order to determine how many, if any, left shifts (with an accuracy of 0, 1, 2, or &gt;2-bits) are required to normalize the most significant binary "1" of the intermediate fraction or mantissa into the carry bit.
      <br/>
      The Gin bit, Rin bit, and round control bit are also examined.
      <br/>
      The Gin bit occupies the bit position directly to the left of the G bit.
      <br/>
      The Rin bit occupies the bit position directly to the left of the R bit.
      <br/>
      The Rin bit and the G bit therefore occupy the same bit position.
    </p>
    <p num="25">
      A first select output is selected if no shift is required and rounding is required to reach a properly formatted output result.
      <br/>
      A second select output is selected if a one-bit left shift is required and rounding is required and the Gin bit is set.
      <br/>
      A third select output is selected if rounding is not required.
      <br/>
      A fourth select output is selected if a one-bit left shift is required and rounding is required and the Gin bit is not set.
      <br/>
      A fifth select output is selected if a two-bit left shift is required and rounding is required and both the Gin bit and the Rin bit are set.
      <br/>
      A sixth select output is selected if a two-bit left shift is required and rounding is required and either the Gin bit or the Rin bit, or both, are not set.
    </p>
    <p num="26">
      The present invention additionally describes an apparatus and method that formats the output result fraction or mantissa of an ANSI/IEEE 754-1985 single precision, double precision, or extended precision floating point arithmetic operation where parallel normalization and rounding of the intermediate result fraction has occurred, using six different formatting procedures.
      <br/>
      The first formatting procedure comprises using the output from the rounder circuit.
      <br/>
      The second formatting procedure simulates a one-bit left shift and rounding when the Gin bit is set.
      <br/>
      The most significant bits of a result fraction formatted in accordance with the second procedure comprise bits N-2 through 0 of the rounder circuit thus simulating a one-bit left shift of the rounder circuit output.
      <br/>
      The least significant bit of a result fraction formatted in accordance with the second formatting procedure further comprises a binary "0," simulating the result of incrementing a bit position previously occupied by a binary "1" (a carry out of the LSB is generated).
      <br/>
      The third formatting procedure comprises using the output from the normalizer circuit and simulates normalization when no rounding is required.
      <br/>
      The fourth formatting procedure simulates a one-bit left shift and rounding when the Gin bit is not set.
      <br/>
      The most significant bits of a result fraction formatted in accordance with the fourth procedure comprise bits N-1 through 1 of the normalizer circuit output, thus simulating the left shift.
      <br/>
      In order to simulate rounding, a binary "1" is then shifted into the LSB of the result fraction.
      <br/>
      The fifth formatting procedure simulates a two-bit left shift when rounding is required and the Gin bit and Rin bit are set.
      <br/>
      In order to simulate a two-bit shift of the output from the rounder circuit, the most significant bits of a result fraction produced in accordance with the fifth formatting procedure comprises bits N-3 through 0 of the rounder circuit output.
      <br/>
      In order to simulate the carry propagated during rounding, binary "00" is then shifted into the least two significant bits of the result fraction.
      <br/>
      The sixth formatting procedure simulates a two-bit left shift when rounding is required and either the Gin bit or the Rin bit, or both, is reset.
      <br/>
      The most significant bits of the output fraction produced using the sixth formatting procedure comprises bits N-1 through 2 of the normalizer circuit output, thus effecting the two-bit left shift.
      <br/>
      The least two significant bits of the output fraction produced using the sixth formatting procedure are set as follows: "01" if both the Gin bit and Rin bit are reset, "10" if the Gin bit is reset and the Rin bit is set, and "11" if the Gin bit is set and the Rin bit is reset.
    </p>
    <p num="27">
      The present invention additionally describes an apparatus and method that normalizes an ANSI/IEEE 754-1985 floating point arithmetic intermediate result having a mantissa or fraction and an exponent.
      <br/>
      The exponent is pre-incremented by one prior to normalization.
      <br/>
      During normalization, the most significant binary "1" of the mantissa or fraction is shifted left until it resides in the carry bit.
      <br/>
      For each left shift performed, the exponent is decremented once.
    </p>
    <heading>DESCRIPTION OF DRAWINGS</heading>
    <p num="28">
      To further aid in understanding the invention, the attached drawings help illustrate specific features of the invention and the following is a brief description of the attached drawings:
      <br/>
      FIG. 1 is a block representation of the ANSI/IEEE 754-1985 standard bit format for normalized single precision floating point representation of numbers.
      <br/>
      FIG. 2 is a block diagram of the prior art floating point arithmetic circuit for parallel normalizing and rounding.
      <br/>
      FIG. 3 is a data flow diagram for prior art normalization and rounding for multiply operations.
      <br/>
      FIG. 4 is a data flow diagram for prior art normalization and rounding for addition operations.
      <br/>
      FIG. 5 is a block diagram of the present invention.
      <br/>
      FIG. 6 is a block diagram of the logical data flow in the fraction logic circuit of the present invention, shown in the context of an extended precision floating point operation.
      <br/>
      FIG. 7 is a block diagram of the logical data flow in the format control circuit of the present invention, shown in the context of an extended precision floating point operation.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="29">
      The present invention comprises a method and apparatus for parallel rounding and normalization of an intermediate floating point result without shifting prior to normalization or rounding.
      <br/>
      This allows the present invention to avoid the inefficiency of the two additional multiplexer delays required by the prior art.
      <br/>
      This disclosure describes numerous specific details that include specific formats, structures, circuits, and logic functions in order to provide a thorough understanding of the present invention.
      <br/>
      One skilled in the art will appreciate that one may practice the present invention without these specific details.
      <br/>
      Additionally, this disclosure does not describe in detail some well-known structures such as multiplexers nor some well-known aspects of the IEEE/ANSI 754-1985 standard in order not to obscure the present invention.
    </p>
    <p num="30">
      The present invention presents a method and apparatus for parallel normalization and rounding of the result of a floating point arithmetic operation.
      <br/>
      Unlike the prior art, the present invention requires no shifting prior to normalization or rounding.
      <br/>
      Also unlike the prior art, the present invention pre-increments the exponent by 1 before normalization.
      <br/>
      Normalization in the present invention presents a requirement that the most significant binary "1" of the fraction (or mantissa, for extended precision operations) be shifted in the C bit while the exponent is decremented accordingly.
      <br/>
      The present invention then uses select logic to select, and format logic to format, a correctly normalized (if necessary) and rounded (if necessary) fraction or mantissa.
    </p>
    <p num="31">
      The present invention is described herein in the context of a floating pint unit conducting floating point operations in the extended precision format.
      <br/>
      Those skilled in the art will recognize that the present invention is not limited to extended precision units, but is also applicable to floating point operations conducted in single and double precision formats.
      <br/>
      Consequently, the term "mantissa" as used in this description should be replaced with the term "fraction" when the present invention is practiced in the context of a floating pint unit conducting operations in either the single or double precision format.
    </p>
    <p num="32">
      The Four Possible Mantissa Formats.
      <br/>
      Any apparatus or method that performs parallel rounding and normalization for floating point arithmetic operations must be able to properly perform normalization and/or rounding on every potential fraction result of addition, subtraction, multiplication, and division.
      <br/>
      Floating point arithmetic operations will always produce unnormalized intermediate result mantissas comprising one of the four possible formats illustrated in Table 2, where the variable X represents any value.
    </p>
    <p num="33">
      -- TABLE 2
      <br/>
      --                      PRO-                  NORM-
      <br/>
      --                      DUCING                ALIZE -   NORM-
      <br/>
      -- FOR-                 OPERA-                present   ALIZE -
      <br/>
      -- MAT    BIT PATTERN   TION(S):    ROUND     invention prior art
      <br/>
      -- For-   01.XXXX..XX   Addition,   May be    1-bit left Not
      <br/>
      -- mat                  Subtraction, required  shift     required
      <br/>
      -- 1                    Multipli-
      <br/>
      --                      cation
      <br/>
      --                      (pre-nor-
      <br/>
      --                      malized),
      <br/>
      --                      or Division
      <br/>
      --                      (2-bit)
      <br/>
      --                      non-restore/
      <br/>
      --                      pre-
      <br/>
      --                      normalized)
      <br/>
      -- For-   00.1XXX..XX   Subtraction May be    2-bit left 1-bit left
      <br/>
      -- mat                  or Division required  shift     shift
      <br/>
      -- 2                    (2-bit
      <br/>
      --                      non-restore/
      <br/>
      --                      (pre-
      <br/>
      --                      normalized)
      <br/>
      -- For-   00.0XXX..XX   Subtraction No        More      More than
      <br/>
      -- mat                                        than 2-bit 1-bit left
      <br/>
      -- 3                                          left shift shift
      <br/>
      -- For-   1X.XXXX..XX   Addition or May be    Not       Not
      <br/>
      -- mat                  Multipli-   required  required  required
      <br/>
      -- 4                    cation
      <br/>
      --                      (pre-
      <br/>
      --                      normalized)
    </p>
    <p num="34">
      Table 2 illustrates the possible formats of intermediate mantissas produced as the result of each arithmetic operation.
      <br/>
      A multiplication operation utilizing pre-normalized operands will result in a product of either Format 1 or Format 4.
      <br/>
      A division operation performed using a 2-bit non-restore divide algorithm that uses pre-normalized operands will produce a quotient in either Format 1 or Format 2.
      <br/>
      Addition operations between operands that are pre-normalized and pre-aligned can produce results in Formats 1 or 4.
      <br/>
      Subtraction operations between operands that are pre-normalized and pre-aligned can produce results in Formats 1, 2, or 3.
    </p>
    <p num="35">
      Rounding Requirements for the Four Formats.
      <br/>
      Each of the four formats presents its own unique rounding and normalization processing requirements.
      <br/>
      The "Round" column of Table 2 demonstrates the rounding requirements for each of the four formats.
      <br/>
      Table 2 illustrates that rounding may only be required for intermediate mantissas of Formats 1, 2, or 4.
    </p>
    <p num="36">
      Rounding will never be required for Format 3.
      <br/>
      Format 3 is unique because it only occurs as the result of a subtract operation.
      <br/>
      There are four cases where a subtract operation can produce the third format.
      <br/>
      These situations are depicted below in Table 3, where Ea is the exponent of operand A, Eb is the exponent of operand B, and Emin is the minimum exponent capable of representation within the floating point unit.
    </p>
    <p num="37">
      -- TABLE 3
      <br/>
      --             EXPONENT         CONDITION OF     ROUND
      <br/>
      -- CASE        RELATIONSHIP     OPERANDS         REQUIRED
      <br/>
      -- a)          Ea = Eb   Both normalized  No
      <br/>
      --             Ea - Eb = 1 or Both normalized  No
      <br/>
      --             Eb - Ea = 1
      <br/>
      -- c)          Ea = Eb = Emin One normalized,  No
      <br/>
      --                              one denormalized
      <br/>
      -- d)          Ea = Eb = Emin Both denormalized No
    </p>
    <p num="38">
      Regarding cases a, c, and d in Table 3, no rounding is required.
      <br/>
      An add or subtract operation may only be performed on two floating point operands if their exponents are equal.
      <br/>
      If the exponents are not equal, then alignment must take place to render the exponents equal before the addition or subtraction can be performed.
      <br/>
      Regarding cases a, c, and d depicted in Table 2, the exponents of the two operands are equivalent and no alignment is required prior to subtraction to equalize the exponents.
      <br/>
      If no pre-subtraction operand exponent alignment occurs, then none of the G, R, or S bits will be set.
      <br/>
      The G, R and S bits must still equal zero following the subtract operation because they are initialized to zero by the control logic prior to the subtract operation.
      <br/>
      If G=R=S=0, then the normalized intermediate fraction result is exact and rounding is not possible.
      <br/>
      Therefore, cases a, c and d will not require rounding.
    </p>
    <p num="39">
      Case b depicted in Table 3 also does not require rounding even though the initial exponents of the operands are not equal.
      <br/>
      Case b of Table 3 indicates that an intermediate mantissa of Format 3 occurs when the exponents have a difference of 1.
      <br/>
      If the exponent difference is 1 then the pre-operation alignment will produce a one-bit right shift, which can only set the G bit but not the R or S bits.
      <br/>
      An intermediate mantissa of Format 3 (00.0XXX . . . XX) will require, at a minimum, a three-bit left shift under the present invention for normalization of the most significant binary "1" of the fraction 30 (of FIG. 1) into the C bit.
      <br/>
      In the prior art, an intermediate mantissa of Format 3 will require a minimum 2-bit left shift for normalization of the most significant binary"1" of the mantissa 29 into the L bit.
      <br/>
      Under either approach, the G bit will be forced to zero as zeros are shifted from the R bit into the G bit during post-subtraction normalization.
      <br/>
      Accordingly, if G=R=S=0, then the normalized intermediate fraction result is exact and rounding is not possible.
      <br/>
      Therefore, rounding will never be required for a Format 3 intermediate fraction.
    </p>
    <p num="40">
      In sum, rounding maybe required in the present invention and in the prior art for Formats 1, 2, and 4.
      <br/>
      Rounding will never be required for Format 3 in either the present invention or the prior art.
    </p>
    <p num="41">Normalization Requirements: Prior Art versus Present Invention</p>
    <p num="42">
      The prior art includes several different techniques for parallel rounding and normalizing in floating point operations.
      <br/>
      Two such techniques are in the Brown '370 patent and the Brown '120 patent.
      <br/>
      The prior art and the present invention differ significantly in the technique where each implements the normalization function.
      <br/>
      There are both logical and structural differences between the normalization techniques of the prior art and the present invention.
    </p>
    <p num="43">
      Logic Differences.
      <br/>
      One difference between normalization in the prior art and the present invention lies in the number of left shifts performed in normalization for each Format (1, 2, 3, and 4).
      <br/>
      Normalization in the prior art results in the most significant binary "1" of the mantissa residing in the L bit, with the exponent 28 (of FIG. 1) being decremented for each 1-bit left-shift.
      <br/>
      The values in the "Normalize--prior art" column of Table 2 therefore reflect the number of left shifts required to shift the most significant binary "1" of the mantissa into the L bit.
      <br/>
      In contrast, the present invention performs a carry-out shift such that normalization results in the most significant binary "1" of the mantissa 29 (of FIG. 1) residing in the C bit.
      <br/>
      Thus, the values in the "Normalize--present invention" column of Table 2 reflect the number of left shifts required to shift the most significant binary "1" of the mantissa into the C bit.
    </p>
    <p num="44">
      A second logical difference between the prior art and the present invention lies in the manner the exponent 28 (of FIG. 1) is manipulated during normalization.
      <br/>
      Of course, normalization requires that the exponent be decremented by 1 each time the fraction is shifted left by one bit.
      <br/>
      The present invention provides additional logic that pre-increments the exponent 28 by 1 prior to normalization.
    </p>
    <p num="45">
      Structural Differences.
      <br/>
      The shifting required in the prior art preliminary to normalization and/or rounding produces a need for certain structures to be present in the prior art.
      <br/>
      Specifically, the prior art requires additional multiplexer 15, shown in FIGS. 2, 3, and 4, and multiplexer 56, shown in FIG. 2.
      <br/>
      Such multiplexers are utilized by the prior art as described below.
    </p>
    <p num="46">
      FIG. 2 represents the prior art circuit for parallel normalization and rounding.
      <br/>
      The prior art shifts intermediate fractions resulting from a multiplication operation, if necessary, prior to rounding.
      <br/>
      This pre-shift allows the prior art to skip normalization for intermediate multiplication results.
      <br/>
      Referring to FIG. 3, if the mantissa of the unnormalized prior art intermediate multiplication result is 0.1XX . . . XX, the prior art uses multiplexer 15 located above the normalizer 34a and the rounder 34b to shift the fraction left one bit.
      <br/>
      The result of exponent adder 20 is not changed.
      <br/>
      This shifted result will be rounded, if necessary, but not normalized.
    </p>
    <p num="47">The prior art does not require shifting by multiplexer 15 for multiplication results of format 1X.X . . . X. Referring to FIG. 3, if the unnormalized intermediate multiplication result is of format 1X.X . . . X, it is not shifted by multiplexer 15 and the exponent adder 20 output is adjusted by +1.</p>
    <p num="48">
      The prior art handles addition and subtraction intermediate fractions in a manner different from multiplication intermediate fractions.
      <br/>
      In the prior art handling of an unnormalized format 1X.X . . . X mantissa resulting from an addition or subtraction operation, a right-shift occurs.
      <br/>
      Referring to FIG. 4, if the unnormalized intermediate result is of format 1X.X . . . X, it is shifted right one bit by multiplexer 15 located above the normalizer 34a and rounder 34b.
      <br/>
      The exponent adder 20 output is adjusted by +1.
    </p>
    <p num="49">
      The prior art also pre-shifts addition and subtraction intermediate mantissas of format 0.1X . . . X. Referring to FIG. 2, if the unnormalized intermediate result an addition or subtraction operation is of Format 0.1X . . . X, a one-bit left shift will be performed by multiplexer 53 before the intermediate fraction is transferred to the rounder circuit 34b.
      <br/>
      This approach requires an additional multiplexer 53 in the data path, which is not required under the present invention.
    </p>
    <p num="50">Preferred Embodiment of Present Invention</p>
    <p num="51">
      The present invention avoids two structural elements (multiplexer 15 on FIGS. 2, 3, and 4 and multiplexer 53 on FIG. 2) present in the prior art.
      <br/>
      The present invention performs an exponent pre-increment procedure.
      <br/>
      A carry-out shift then occurs during normalization.
      <br/>
      Finally, the present invention uses logic to select and format the properly rounded (if necessary) and normalized (if necessary) fractional result of the floating point arithmetic operation.
    </p>
    <p num="52">
      FIG. 5 is a block diagram of the present invention, according to one embodiment.
      <br/>
      FIG. 5 illustrates that the present invention comprises a set of floating point registers 510.
      <br/>
      For single and double precision numbers, such registers 510 contain the sign bit, exponent 28 (of FIG. 1) and fraction 30 (of FIG. 1).
      <br/>
      For extended precision numbers, the floating point registers 510 contain the sign bit, exponent 28 and mantissa 29.
      <br/>
      FIG. 5 further illustrates that the present invention also comprises a control logic circuit 530, an exponent logic circuit 520, and a fraction logic circuit 540.
    </p>
    <p num="53">
      Pre-Increment of Exponent.
      <br/>
      A feature of the present invention is that it increments the exponent 28 (of FIG. 1) by 1 before normalization processing.
      <br/>
      Referring to FIG. 5, the exponent logic 520 adds 1 to the exponent 28.
      <br/>
      The fraction logic 540 then performs a carry-out shift if normalization is required.
    </p>
    <p num="54">
      Carry-Out Shift.
      <br/>
      In the present invention, the shifts performed by multiplexers 15 and 53 in the prior art are not performed prior to normalization or rounding.
      <br/>
      During normalization, the present invention performs a novel carry-out shift procedure.
    </p>
    <p num="55">
      FIG. 6 represents the fraction logic circuit 540 of the present invention.
      <br/>
      The normalizer circuit 630 of the present invention always shifts the most significant binary "1" of the mantissa 29 into the carry-out bit position C 22.
      <br/>
      The C bit resides one bit position to the left of the L bit 24.
      <br/>
      The L bit is bit 63 of an extended format mantissa, as depicted in FIG. 6.
      <br/>
      The carry-out shift effectively converts all intermediate mantissas into Format 4, which contains a binary "1" in the C bit position.
      <br/>
      A single precision example is shown below in Table 4, where variables W,X,Y, and Z represent any value.
      <br/>
      N represents any exponent value less than or equal to Emax-1, where Emax is the maximum exponent capable of representation in the floating point unit.
    </p>
    <p num="56">
      -- TABLE 4
      <br/>
      -- EXP    C    L    FRACTION                         G    R    S
      <br/>
      -- N           1    XXXXXXXXXXXXXXXXXXXXXXX          W    Y    Z
      <br/>
      -- N + 1 1    X    XXXXXXXXXXXXXXXXXXXXXXW          Y    Z    0
    </p>
    <p num="57">
      The top row of Table 4 shows an example Format 1 mantissa, having its most significant binary "1" residing in the L bit.
      <br/>
      The top mantissa thus represents a value that is normalized according to the IEEE standard.
      <br/>
      The bottom row of Table 4 shows the same mantissa after a carry-out shift, with the most significant binary "1" of the mantissa shifted into the C bit.
      <br/>
      After the carry-out shift, the bottom mantissa of Table 4 is of Format 4.
      <br/>
      The top and bottom numbers in Table 4 are equivalent if the bottom floating point value has +1 added to the exponent 28 (implying a 1-bit right shift).
      <br/>
      Since the intermediate exponent of the present invention is always pre-incremented by +1 (implying a 1-bit right shift), the normalized mantissa of the present invention will include the C bit whereas prior art normalized mantissas shift the most significant "1" into the L bit but not the C bit.
      <br/>
      Accordingly, the value of the G, R, and S bits will be located 1 bit position to the left of their normal position, with the value of the G bit residing in the Gin bit position and the value of the R bit residing in the Rin bit position.
    </p>
    <p num="58">
      The next step of the carry-out shift is executed by the exponent logic circuit 520 (of FIG. 5).
      <br/>
      For each left shift that occurs in the normalizer circuit 630 to shift the most significant binary "1" of the mantissa 29 into the C bit, a 1 is subtracted from the exponent 28.
      <br/>
      This part of normalization is well known in the art.
    </p>
    <p num="59">
      The result of the present invention's exponent pre-increment and carry-out shift is that all normalizer circuit output mantissas resemble a Format 4 because the most significant binary "1" of the mantissa 29 resides in the C bit.
      <br/>
      However, the exponent 28 reflects the value it would have for a Format 1 fraction.
      <br/>
      For example, an unnormalized intermediate mantissa of Format 1 will be shifted left one bit by the carry-out shift of the present invention, shifting the most significant 1 of the mantissa 29 into the C bit.
      <br/>
      In conjunction with the one-bit shift left the exponent logic circuit 520 of the present invention will subtract an additional one from the exponent 28.
      <br/>
      Since the exponent 28 is always pre-incremented by +1 prior to normalization in the present invention, the exponent pre-increment and -1 exponent adjustment associated with the 1-bit left shift will cancel each other out (-1+1 =0).
      <br/>
      Therefore, the normalizer circuit 630 will produce a Format 4 mantissa and the exponent logic circuit 520 will produce a Format 1 exponent.
    </p>
    <p num="60">
      Each of the four formats of intermediate mantissas produces this same result.
      <br/>
      For example, an unnormalized Format 4 intermediate mantissa will also emerge from the normalizer circuit 630 with a Format 4 mantissa while the exponent logic circuit 520 produces a Format 1 exponent.
      <br/>
      An unnormalized intermediate result of Format 4 requires no left shifting for normalization, thus the +1 exponent adjustment will not be canceled out, and the final exponent 28 will be larger by +1 than the Format 4 exponent, resulting in a Format 1 exponent.
      <br/>
      The format control circuit 660 of the present invention, discussed below, efficiently formats the Format 4 normalizer circuit 630 output mantissa into the appropriately normalized and rounded Format 1 result mantissa.
    </p>
    <p num="61">
      Select Control Logic.
      <br/>
      The select control circuit 650 generates one of six select values (S0, S1, S2, S3, S4 or S5) that correspond to the 6 formatting options of the present invention.
      <br/>
      The 6 formatting options of the present invention are designated herein as D0, D1, D2, D3, D4, and D5.
      <br/>
      As described in further detail below, each of the 6 formatting options generates a normalized and rounded (if appropriate) Format 1 result mantissa from a particular output of either the normalizer circuit 630 or the rounder circuit 620.
    </p>
    <p num="62">
      The select control circuit 650 utilizes the fact that there are only four possible combinations of actions required to normalize and round an intermediate fraction in the present invention.
      <br/>
      Table 5 shows the four actions necessary under the present invention to normalize (into the C bit) and round an unnormalized intermediate mantissa.
      <br/>
      Table 5 illustrates the functions required for parallel normalization and rounding and shows that it is never necessary to both 1) shift left more than two bits for normalization and 2) round the intermediate fraction.
    </p>
    <p num="63">
      --      TABLE 5
      <br/>
      --      - OF BITS TO SHIFT
      <br/>
      --      LEFT TO
      <br/>
      --      NORMALIZE INTO C
      <br/>
      --      BIT                   ROUND     WHEN REQUIRED
      <br/>
      -- 1    Zero bits shift left (S0) YES       Format 4, when rounding is
      <br/>
      --                                      required
      <br/>
      -- 2    One bit shift left (S1, S3) YES       Format 1, when rounding is
      <br/>
      --                                      required
      <br/>
      -- 3    0 - N bit shift left (S2) NO        Format 3
      <br/>
      --                                      Format 1, if no round
      <br/>
      --                                      Format 2, if no round
      <br/>
      --                                      Format 4, if no round
      <br/>
      -- 4    Two bit left shift (S4, S5) YES       Format 2, when rounding is
      <br/>
      --                                      required
    </p>
    <p num="64">
      The first of the four potential actions required to normalize and/or round, Selection S0, is represented in Row 1 of Table 5.
      <br/>
      S0 is the case where the intermediate result is of Format 4 and rounding is required. �Table 6 lists the select equations for select values (S0, S1, S2, S3, S4 and S5)�. Format 4 requires no shifting since the most significant binary "1" of the mantissa 29 already resides in the C bit.
      <br/>
      Selection S0 therefore corresponds to a formatting procedure that requires no left shift but does require rounding.
    </p>
    <p num="65">
      The second of the four potential actions required to normalize and/or round involves Selections S1 and S3, and is represented in Row 2 of Table 5.
      <br/>
      Selections S1 and S3 occur where the intermediate mantissa is of Format 1, and rounding is required.
      <br/>
      Format 1 requires a 1-bit left shift under the present invention in order to normalize such that the most significant binary "1" of the mantissa 29 resides in the C bit.
      <br/>
      Selections S1 and S3 therefore correspond to a formatting procedure that requires both a one-bit left shift and rounding.
    </p>
    <p num="66">
      The third of the four potential actions required to normalize and/or round, involves Selection S2, and is represented in Row 3 of Table 5.
      <br/>
      Selection S2 occurs where no rounding is required.
      <br/>
      This selection involves every occurrence of Format 3.
      <br/>
      From the foregoing discussion of Table 2, it is apparent that an intermediate mantissa of Format 3 will never require rounding, although it will require at least a three-bit left shift for normalization into the C bit.
      <br/>
      Selection S2 also includes every occurrence of Format 1, 2, or 4 for the intermediate mantissa when rounding is not required.
      <br/>
      Selection S2 therefore corresponds to a formatting procedure that requires a left shift of 0 or more bits, but does not require rounding.
    </p>
    <p num="67">
      The last of the four potential actions required to normalize and/or round involves Selections S4 and S5, and is represented in Row 4 of Table 5.
      <br/>
      Selections S4 and S5 occur where the intermediate mantissa is of Format 2 and rounding is required.
      <br/>
      Format 2 requires a two-bit left shift for normalization into the C bit.
      <br/>
      Selections S4 and S5 therefore correspond to a formatting procedure that requires both a two-bit left shift and rounding.
    </p>
    <p num="68">
      The select control circuit 650 sets as an output one of the six select values: S0, S1, S2, S3, S4, S5.
      <br/>
      In determining the value to set, the select control circuit 650 utilizes the following inputs: round control 640 output, the value of the Gin input to the normalizer circuit 630, the value of the Rin input to the normalizer circuit 630, and the format type of the intermediate fraction.
      <br/>
      The value of Gin determines whether S1 or S3 will be set for a Format 1 intermediate mantissa that requires rounding.
      <br/>
      Similarly, the values of Gin and Rin determine whether the select control circuit will set S4 or S5 for a Format 2 intermediate mantissa that requires rounding.
    </p>
    <p num="69">
      One method for determining the format type of the intermediate mantissa is to examine one or more of the following three bits: the C bit 22, the L bit 24, and the most significant bit 26 of the intermediate fraction.
      <br/>
      The select control circuit 650 uses the value of the C bit to detect Format 4.
      <br/>
      The C bit and the L bit are used together to detect Format 1.
      <br/>
      All three bits are used together to detect Format 2.
      <br/>
      The select control circuit 650 does not detect Format 3 (0.0) because it is not necessary to detect Format 3 to set the proper select value (S2) as the select control circuit 650 output.
      <br/>
      As explained above, rounding is never required for Format 3.
      <br/>
      Thus, if the round control 640 bit is not set, the select control circuit 650 sets Selection S2 as its output, causing the result mantissa output of the format control circuit 660 to be generated using the D2 format procedure.
    </p>
    <p num="70">Table 6 illustrates the logic equations of the select control circuit 650 in setting one of the six select values, S0-S5, when the format type of the intermediate mantissa is determined through examination of the C bit, L bit, and the most significant bit of the intermediate fraction, and when the select control circuit 650 also examines the Gin and Rin values and the round control 640 output.</p>
    <p num="71">
      -- TABLE 6
      <br/>
      -- S0             (mantissa format = 1X.X) AND (round)
      <br/>
      -- S1             (mantissa format = 01.X) AND (round) AND
      <br/>
      --                (Gin = 1)
      <br/>
      -- S2             (no round)
      <br/>
      -- S3             (mantissa format = 01.X) AND (round) AND
      <br/>
      --                (Gin = 0)
      <br/>
      -- S4             (mantissa format = 00.1) AND (round) AND
      <br/>
      --                (Gin = 1) AND (Rin = 1)
      <br/>
      -- S5             (mantissa format = 00.1) AND (round) AND
      <br/>
      --                NOT�(Gin = 1) AND (Rin = 1)�
    </p>
    <p num="72">
      Formatting Logic.
      <br/>
      FIG. 7 illustrates the format control circuit 660 of the present invention which further comprises a multiplexer 710 with the associated multiple inputs as depicted in the figure.
      <br/>
      The format control circuit 660 provides a result mantissa output using one of six different (D0, D1, D2, D3, D4 and D5) formatting procedures.
      <br/>
      The 64-bit output from the rounder circuit 620 and the normalizer circuit 630 are received by the format control circuit 660.
      <br/>
      The format control circuit 660 also receives as an input the output of the select control circuit 650.
      <br/>
      The output of the select control circuit 650 determines the format procedure, D0-D5, that will be used to generate the result mantissa output of the format control circuit 660.
    </p>
    <p num="73">Table 7 shows a summary of the formatting equation for each output format procedure, D0-D5, in an extended precision scheme.</p>
    <p num="74">
      -- TABLE 7
      <br/>
      -- Select                     Format
      <br/>
      -- Signal  Format Equation    Designation Result mantissa Output
      <br/>
      -- S0      (shift left 0 bits) AND Output: D0  Output of Rounder 620
      <br/>
      --         (round)
      <br/>
      -- S1      (shift left 1 bit) AND Output: D1  63 least significant bits
      <br/>
      --         (round) AND                    of Rounder 620 output,
      <br/>
      --         (Gin = 1)               with 0 appended as least
      <br/>
      --                                        significant bit
      <br/>
      -- S2      (shift left 0 to N bits) Output: D2  Output of
      <br/>
      --         and (no round)                 Normalizer 630
      <br/>
      -- S3      (shift left 1 bit) AND Output: D3  63 most significant bits
      <br/>
      --         (round) AND                    of Normalizer 630
      <br/>
      --         (Gin = 0)               output, with 1 appended
      <br/>
      --                                        as least significant bit
      <br/>
      -- S4      (shift left two bits) Output: D4  62 least significant bits
      <br/>
      --         AND (round) AND                of Rounder 630 output,
      <br/>
      --         (Gin = 1) AND             with binary "00"
      <br/>
      --         (Rin = 1)               appended as two least
      <br/>
      --                                        significant bits
      <br/>
      -- S5      (shift left two bits) Output: D5  62 most significant bits
      <br/>
      --         AND (round) AND                of Normalizer 630
      <br/>
      --         NOT�(Gin = 1)             output, with least two
      <br/>
      --         AND (Rin = 1)�             significant bits appended
      <br/>
      --                                        as shown in Table 8
    </p>
    <p num="75">
      The format control circuit 660 will generate the result mantissa output using format procedure D0 when the select control circuit 650 has set Select S0.
      <br/>
      The D0 format procedure comprises using the output from the rounder circuit 620.
    </p>
    <p num="76">
      The format control circuit 660 will generate the result mantissa output using format procedure D1 when the select control circuit 650 has set Select S1.
      <br/>
      Similarly, the format control circuit 660 will generate the result mantissa using format procedure D3 when the select control circuit has set Select S3.
      <br/>
      The D1 and D3 format procedures conceptually provide the function of shifting the input to the rounder circuit 620 left 1-bit before rounding.
      <br/>
      If a one-bit shift left and round is required, then the S1 or S3 selects will have been set by the select control circuit 650, dependent on the Gin value.
    </p>
    <p num="77">
      The difference between the D1 and D3 format procedures lies in the nature of the round function.
      <br/>
      The round function always increments the unnormalized intermediate mantissa at the least significant bit position (1-bit left of the G bit).
      <br/>
      If a one-bit left shift is required and a round is required, and the Gin value is 1, then a carry will propagate up to the higher order bits when the round is performed after the required one-bit left shift.
      <br/>
      In contrast, if the Gin value is 0, then the increment performed during rounding will not propagate up.
    </p>
    <p num="78">
      FIG. 7 and Table 7 illustrate that, for format procedure D1, the following formatting logic is performed by the format control circuit 660 in order to simulate a one-bit left shift and a round, with the round propagating up.
      <br/>
      The format control circuit 660 formats as the most significant bits of the result mantissa the bits comprising bits N-2 through 0 of the rounder circuit 620 output, where N is the number of bits comprising the rounder circuit 620 output.
      <br/>
      For example, in an extended precision scheme, the most significant bits of a result mantissa produced using the D1 format procedure would comprise bits 62 through 0 of the rounder circuit 620 output.
      <br/>
      Conceptually, this logic shifts the output from the rounder circuit 620 left by one bit.
      <br/>
      The D1 formatting logic in the format control circuit 660 then appends a binary "0" as the least significant bit of the result mantissa.
      <br/>
      This simulates Gin=1 shifting into the LSB of the fraction and then being incremented (which will force it to 0).
      <br/>
      The incrementing of the fraction LSB simulates the rippling of the carry out from the Gin bit to the fraction LSB that would have occurred if the 1-bit shift left had been performed prior to rounding.
    </p>
    <p num="79">
      FIG. 7 and Table 7 also illustrate the following formatting logic performed by the format control circuit 660 when the result mantissa is produced using format procedure D3 (i.e., S3 is set).
      <br/>
      The D3 formatting logic simulates a one-bit left shift and a round when the Gin value is 0.
      <br/>
      Format control circuit 660 formats as the most significant bits of the result mantissa the bits comprising bits N-1 through 1 of the normalizer circuit 630 output, where N is the number of bits comprising the normalizer circuit 630 output.
      <br/>
      For example, in an extended precision scheme the most significant bits of a result mantissa produced according to the D3 format procedure would comprise bits 63 through 1 of the normalizer circuit 630 output.
      <br/>
      Conceptually, this formatting procedure addresses the need for a one-bit left shift by loading the normalized Format 1 output of the normalizer circuit 630 into all bits of the result mantissa except the LSB.
      <br/>
      Since S0 is selected only when Gin=0, the format control circuit 660 then formats a binary "1" into the LSB of the result mantissa.
      <br/>
      This simulates Gin=0 shifting into the least significant bit of the mantissa 29 and then being incremented during rounding (which would set the LSB to 1).
      <br/>
      Conceptually, if the 1-bit shift left had been performed prior to the round, no carry out from the Gin bit to the mantissa 29 LSB would have occurred (since Gin=0).
    </p>
    <p num="80">
      The format control circuit 660 will generate the result mantissa using format procedure D2 when the select control circuit 650 has set Select S2.
      <br/>
      The D2 format procedure comprises using the output from the normalizer circuit 630.
    </p>
    <p num="81">
      The format control circuit 660 will generate the result mantissa using format procedure D4 when the select control circuit 650 has set Select S4.
      <br/>
      Similarly, the format control circuit 660 will generate the result mantissa using format procedure D5 when the select control circuit has set Select S5.
      <br/>
      The D4 and D5 format procedures conceptually provide the function of shifting the input to the rounder circuit 620 left 2 bits before rounding.
      <br/>
      If a two-bit shift left and round is required, then the S4 or S5 selects are set by the select control circuit 650, dependent on the values of Gin and Rin.
    </p>
    <p num="82">
      As with D1 and D3, the difference between the D4 and D5 format procedures lies in the nature of the round function.
      <br/>
      With D4 and D5, the present invention must simulate carry propagation as a result of rounding after the G bit and the R bit have been shifted into the two least significant bits of the traction.
      <br/>
      After a two-bit left shift for normalization, the rounding function will not cause a carry to propagate up unless both the Gin and Rin values are "1".
    </p>
    <p num="83">
      FIG. 7 and Table 7 additionally illustrate the formatting logic performed by the format control circuit 660 to generate the result mantissa using format procedure D4.
      <br/>
      A result mantissa using format procedure D4 will be generated by the format control circuit 660 if Select S4 is set by the select control circuit 650.
      <br/>
      Select S4 will be set if 1) a two-bit left shift is required, 2) rounding is required, and 3) Gin=1 and Rin=1.
      <br/>
      Format control circuit 660 formats as the most significant bits of the result mantissa bits N-3 through 0 of the rounder circuit 620 output, where N is the number of bits comprising the rounder circuit 620 output.
      <br/>
      For example, in an extended precision scheme the most significant bits of the a result mantissa generated in accordance with the D4 format procedure would comprise bits 61 through 0 of the normalizer circuit 630 output.
      <br/>
      Conceptually, the D4 formatting procedure performs a two-bit left shift on the rounder circuit 620 output.
      <br/>
      The format control circuit 660 then formats "00" into the least two significant bits of the output.
      <br/>
      The D4 format procedure simulates shifting the output of the rounder circuit 620 left by two bits, with zeros shifting into the two least significant bits of the output This simulates Gin=1 and Rin=1 shifting into the two least significant bits of the mantissa 29, and then being incremented (which will force them to binary "00").
      <br/>
      The incrementing at the two least significant bits of the mantissa 29 simulates the rippling of the carry-out from the G bit to the least significant bit of the fraction and the carry-out from the R bit to the G bit which would have occurred during rounding if the 2-bit shift left had been performed prior to the round.
    </p>
    <p num="84">
      FIG. 7 and Table 7 also illustrate the formatting logic performed by the format control circuit 660 to generate a result mantissa using format procedure D5.
      <br/>
      The format control circuit 660 will generate the result mantissa using format procedure D5 if Select S5 is set by the select control circuit 650.
      <br/>
      Select S5 will be set if 1) a two-bit left shift is required, 2) rounding is required, and 3) either or both of the Gin and Rin values are reset to "0".
      <br/>
      In order to accomplish the two-bit left shift, the most significant bits of the normalizer circuit 630 output are utilized.
      <br/>
      Format control circuit 660 formats as the most significant bits of the result mantissa bits N-1 through 2 of the normalizer circuit 630 output, where N is the number of bits comprising the normalizer circuit 630 output.
      <br/>
      For example, in an extended precision scheme the most significant bits of the result mantissa would comprise bits 63 through 2 of the normalizer circuit 630 output.
      <br/>
      Conceptually, this effects the two-bit shift necessary for normalization by utilizing the 62 most significant bits of the normalizer circuit 630 output.
      <br/>
      The D5 formatting logic sets the two least significant bits of the result mantissa according to Table 8.
      <br/>
      This simulates Gin shifting into the next-to-least significant fraction bit and Rin shifting into the mantissa 29 LSB during the two-bit left shift required for normalization, and Rin then being incremented during rounding.
      <br/>
      Since S5 will not be set if both Rin and Gin are set, rounding cannot propagate a carry for the remaining three cases.
      <br/>
      The three cases of Rin and Gin possible for D5, and their associated two least significant bits, are depicted in Table 8, where all values represent binary values.
    </p>
    <p num="85">
      -- TABLE 8
      <br/>
      --                           RESULT MANTISSA
      <br/>
      --                           LEAST TWO
      <br/>
      -- Gin                Rin    SIGNIFICANT BITS
      <br/>
      -- 0                  0      01
      <br/>
      -- 0                  1      10
      <br/>
      -- 1                  0      11
    </p>
    <p num="86">
      In sum, the present invention describes a method and apparatus that performs normalization and rounding on an ANSI/IEEE 754-1985 floating point intermediate result.
      <br/>
      The exponent is pre-incremented by one prior to normalization shifting.
      <br/>
      During normalization, the most significant binary "1" of the mantissa is shifted left until it resides in the carry bit.
      <br/>
      For each left shift performed, the exponent is decremented once.
      <br/>
      The apparatus and method of the present invention dispense with the need for shifting of the intermediate result prior to normalization or rounding by performing selection and formatting logic.
      <br/>
      With the present invention, normalization and rounding can be accomplished as a parallel process rather than as a sequential operation.
    </p>
    <p num="87">
      The selection logic selects the formatting procedure that will be used to produce the output result fraction of an ANSI/IEEE 754-1985 floating point arithmetic operation where parallel normalization and rounding of the intermediate result fraction has occurred.
      <br/>
      The C bit and the L bit and the most significant bit of the intermediate fraction are examined in order to determine how many, if any, left shifts are required to normalize the most significant binary "1" of the intermediate mantissa into the carry bit.
      <br/>
      The Gin, Rin, and round control bit are also examined.
      <br/>
      Based on these inputs, one of six formats is selected.
    </p>
    <p num="88">
      The present invention additionally describes an apparatus and method that formats the output result fraction of an ANSI/IEEE 754-1985 floating point arithmetic operation where parallel normalization and rounding of the intermediate fraction result has occurred.
      <br/>
      Based on the select option generated by the select logic, the formatting logic will format the result fraction using one of six formatting procedures.
    </p>
    <p num="89">
      Other embodiments of the invention will be apparent to those skilled in the art after considering this specification or practicing the disclosed invention.
      <br/>
      The specification and examples above are exemplary only, with the true scope of the invention being indicated by the following claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>An apparatus that normalizes and rounds an ANSI/IEEE 754-1985 floating point arithmetic intermediate result having a fraction and an exponent, comprising:</claim-text>
      <claim-text>an exponent logic circuit that always increments the exponent of the intermediate result; a fraction logic circuit that adjusts the fraction of the intermediate result, said fraction logic circuit further comprising a normalizer circuit that normalizes the fraction of the intermediate result, a rounder circuit that rounds the fraction of the intermediate result, and a select control circuit that selects one of a plurality of formatting procedures, where said formatting procedure selected uses the output from either said normalizer circuit or said rounder circuit to generate the result fraction in ANSI/IEEE 754-1985 format;</claim-text>
      <claim-text>and a control logic circuit that controls said exponent logic circuit and said fraction logic circuit and sets the round control bit.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The apparatus of claim 1 wherein said select control circuit uses the Gin bit, the Rin bit, the format type of the fraction of the intermediate result, and the round control bit in the selection of said formatting procedure.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The apparatus of claim 1 wherein said rounder circuit and said normalizer circuit receive the fraction of the intermediate result in parallel.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The apparatus of claim 1 wherein said exponent logic circuit increments the exponent of the intermediate result prior to normalization of the fraction of the intermediate result in said normalizer circuit.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The apparatus of claim 4 wherein said normalizer circuit performs zero or more one-bit left shifts until the most significant binary "1" of the fraction of the intermediate result resides in the C bit and wherein said exponent logic circuit decrements the incremented exponent of the intermediate result once for each of said one-bit left shifts.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The apparatus of claim 1 wherein said fraction logic circuit further comprises a format control circuit coupled to said normalizer circuit, said rounder circuit, and said select control circuit, said format control circuit generates the result fraction in ANSI/IEEE 754-1985 format using said formatting procedure selected by said select control circuit.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The apparatus of claim 1 wherein said select control circuit determines the format type of the fraction of the intermediate result by examining the C bit and the two most significant bits of the mantissa of the intermediate result.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A system for normalization and rounding of an ANSI/IEEE 754-1985 floating point arithmetic intermediate result having a fraction and an exponent, comprising: an exponent logic circuit that always increments the exponent of the intermediate result; a fraction logic circuit that adjusts the fraction of the intermediate result, said fraction logic circuit further comprising a normalizer circuit that normalizes the fraction of the intermediate result, a rounder circuit that rounds the fraction of the intermediate result, and a select control circuit that selects one of a plurality of formatting procedures, where said formatting procedure selected uses the output from either said normalizer circuit or said rounder circuit to generate the result fraction in proper result mantissa in ANSI/IEEE 754-1985 format;</claim-text>
      <claim-text>and a control logic circuit that controls said exponent logic circuit and said fraction logic circuit and sets the round control bit.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The system of claim 8 wherein said select control circuit uses the Gin bit, the Rin bit, the format type of the fraction of the intermediate result, and the round control bit in selection of said formatting procedure.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The system of claim 8 wherein said rounder circuit and said normalizer circuit receive the fraction of the intermediate result in parallel.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The system of claim 8 where in said exponent logic circuit increments the exponent of the intermediate result prior to normalization of the fraction of the intermediate result by said normalizer circuit.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The system of claim 11 wherein said normalizer circuit performs zero or more one-bit left shifts until the most significant binary "1" of the fraction of the intermediate result resides in the C bit and wherein said exponent logic circuit decrements the incremented exponent of the intermediate result once for each of said one-bit left shifts.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The system of claim 8 wherein said fraction logic circuit further comprises a format control circuit coupled to said normalizer circuit, said rounder circuit, and said select control circuit, said format control circuit generates the result fraction in ANSI/IEEE 754-1985 format using said formatting procedure selected by said select control circuit.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The system of claim 8 wherein said select control circuit determines the format type of the mantissa of the intermediate result by examining the C bit and the two most significant bits of the mantissa of the intermediate result.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A method to manufacture an apparatus that normalizes and rounds an ANSI/IEEE 754-1985 floating point arithmetic result having a fraction and an exponent, comprising: providing an exponent logic circuit that always increments the exponent of the intermediate result; providing a fraction logic circuit that adjusts the fraction of the intermediate result, said fraction logic circuit further comprising a normalizer circuit that normalizes the fraction of the intermediate result, a rounder circuit that rounds the fraction of the intermediate result, and a select control circuit that selects one of a plurality of formatting procedures, where said formatting procedure selected uses the output from either said normalizer circuit or said rounder circuit to generate the result fraction in proper result mantissa in ANSI/IEEE 754-1985 format;</claim-text>
      <claim-text>and coupling a control logic circuit to said exponent logic circuit and to said fraction logic circuit, said control logic circuit comprises logic circuitry that controls said exponent logic circuit and said fraction logic circuit, and sets the round control bit.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 15 wherein said select control circuit uses the Gin bit, the Rin bit, the format type of the fraction of the intermediate result, and the round control bit in the selection of said formatting procedure.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 15 wherein said rounder circuit and said normalizer circuit receive the fraction of the intermediate result in parallel.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 15 wherein said exponent logic circuit increments the exponent of the intermediate result prior to normalization of the fraction of the intermediate result in said normalizer circuit.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 18 wherein said normalizer circuit performs zero or more one-bit left shifts until the most significant binary "1" of the fraction of the intermediate result resides in the C bit and wherein said exponent logic circuit decrements the incremented exponent of the intermediate result once for each of said one-bit left shifts.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of claim 15 wherein said fraction logic circuit further comprises a format control circuit coupled to said normalizer circuit, said rounder circuit, and said select control circuit, said format control circuit generates the result fraction in ANSI/IEEE 754-1985 format using said formatting procedure selected by said select control circuit.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The method of claim 15 wherein said select control circuit determines the format type of the fraction of the intermediate result by examining the C bit and the two most significant bits of the mantissa of the intermediate result.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A method that normalizes and rounds an ANSI/IEEE 754-1985 floating point arithmetic intermediate result having a fraction and an exponent, comprising: always incrementing the exponent of the intermediate result; normalizing the intermediate result; rounding the fraction of the intermediate result;</claim-text>
      <claim-text>and selecting one of a plurality of formatting procedures, where said formatting procedure selected uses the normalized intermediate result fraction or the rounded intermediate result fraction to generate the result fraction in ANSI/IEEE 754-1985 format.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The method of claim 22 wherein the Gin bit, the Rin bit, the format type of the fraction of the intermediate result, and the round control bit are used in selecting said formatting procedure.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The method of claim 22 wherein said normalizing the intermediate result and said rounding the fraction of the intermediate result are performed in parallel.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The method of claim 22 wherein the exponent of the intermediate result is incremented prior to normalizing the intermediate result.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The method of claim 25, wherein normalizing the intermediate result further comprises shifting the fraction of the intermediate result one bit left zero or more times until the most significant binary "1" of the fraction of the intermediate result resides in the C bit, and decrementing the incremented exponent of the intermediate result once for each of said one-bit left shifts.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The method of claim 22, further comprising generating the result fraction in ANSI/IEEE 754-1985 format using said formatting procedure selected.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The method of claim 22, further comprising determining the format type of the fraction of the intermediate result by examining the C bit and the two most significant bits of the mantissa of the intermediate result.</claim-text>
    </claim>
  </claims>
</questel-patent-document>