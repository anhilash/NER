<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182242B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182242</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182242</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22099019" extended-family-id="42109113">
      <document-id>
        <country>US</country>
        <doc-number>09071062</doc-number>
        <kind>A</kind>
        <date>19980422</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09071062</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165777</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>7106298</doc-number>
        <kind>A</kind>
        <date>19980422</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09071062</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  11/00        20060101A I20051110RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051110</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  11/26        20060101A I20070721RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>26</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20070721</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>714026000</text>
        <class>714</class>
        <subclass>026000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>703022000</text>
        <class>703</class>
        <subclass>022000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>714E11167</text>
        <class>714</class>
        <subclass>E11167</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-011/26S</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>011</main-group>
        <subgroup>26S</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/261</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>261</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>40</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>5</number-of-drawing-sheets>
      <number-of-figures>6</number-of-figures>
      <image-key data-format="questel">US6182242</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Generic device driver simulator and method</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>EDWARDS DAVID J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4718064</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4718064</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>FRITZ DAVID CARROLL</text>
          <document-id>
            <country>US</country>
            <doc-number>5949993</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5949993</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="3">
          <text>BAKER DAVID C, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5337412</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5337412</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="4">
          <text>SCHERF STEVE D</text>
          <document-id>
            <country>US</country>
            <doc-number>5390301</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5390301</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="5">
          <text>LATHROP FREDERICK L, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5465364</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5465364</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>MCNEILL JR ANDREW B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5499378</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5499378</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>SATO N ALBERT, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5586324</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5586324</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>IBM(R) Technical Disclosure Bulletin, "Definition of Vendor Specific Device Driver Interface," 38(03):357-358 (Mar. 1995).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>IBM(R) Technical Disclosure Bulletin, "Device Driver Test Tool," 38(10):263-267 (Oct. 1995).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>IBM(R) Technical Disclosure Bulletin, "Generic Device Driver for Personal Computer Removable Devices," 37(01):487-489 (Jan. 1994).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>IBM(R) Technical Disclosure Bulletin, "OS/2 Virtual Device Driver Support for CD-ROM," 37(10):441-444 (Oct. 1994).</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Brogan, James Jules</name>
            <address>
              <address-1>Pomerene, AZ, US</address-1>
              <city>Pomerene</city>
              <state>AZ</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Wright, Bryan John</name>
            <address>
              <address-1>Tucson, AZ, US</address-1>
              <city>Tucson</city>
              <state>AZ</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Altera Law Group, LLC</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Beausoliel, Jr., Robert W.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A generic device driver simulator having the knowledge of the device specific behavior moved out of simulator program code is disclosed.
      <br/>
      The generic device driver simulator includes a generic device driver for supporting application functions without device specific coding included therein, a database including device specific models of device drivers supported by the generic device driver and an interpreter for controlling the generic device driver according to the definitions of functions and data structures in the database.
      <br/>
      The generic device driver simulator also includes a watcher for defining watchpoints, the watchpoints identifying types of calls from the application.
      <br/>
      The watcher displays information when a watchpoint is triggered by a call from the application.
      <br/>
      The interpreter includes an input script for each device function or for multiple device functions that are supported by the generic device driver.
      <br/>
      The watcher supports the execution of an input script in the interpreter in response to a watchpoint being triggered.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">This invention relates in general to a application verification, and more particularly to a generic device driver simulator for aiding in the development of applications.</p>
    <p num="3">2. Description of Related Art</p>
    <p num="4">
      An operating system executes on the various microprocessors, and serves as the interface between the various application programs and the hardware of the computer system.
      <br/>
      The operating system communicates with the various peripheral devices via input/output (I/O) control programs referred to as device drivers.
      <br/>
      A device driver acts as an interface between the operating system and the corresponding peripheral device.
      <br/>
      The device driver provides control commands to activate the peripheral device and to check the device status to determine when it is ready for a data transfer.
      <br/>
      The device driver also performs error checking when transfers are occurring to ensure that the transfer has completed successfully.
      <br/>
      Further, the device driver responds when the peripheral device indicates completion of the control commands.
    </p>
    <p num="5">
      To write a device driver program, a detailed knowledge of the peripheral device is required.
      <br/>
      Consequently, device drivers are typically provided by manufacturers of the peripheral device.
      <br/>
      In many instances, the actual peripheral device hardware may not be available while the device driver is being developed by the manufacturer.
      <br/>
      As a result, actual testing and any debugging changes that need to be made must wait until the actual hardware becomes available.
      <br/>
      However, this increases the development time for the application software.
    </p>
    <p num="6">
      It is possible to develop device specific simulators.
      <br/>
      However, developing and maintaining a device specific simulator can be cost prohibitive.
      <br/>
      The simulator is often as complex as the device itself because it encapsulates all knowledge of the device behavior.
      <br/>
      This results in high initial development cost, high maintenance cost, and difficulty keeping simulation in sync with real device.
    </p>
    <p num="7">It can be seen then that there is a need for a generic device driver simulator.</p>
    <p num="8">It can also be seen then that there is a need for a device driver simulator that has the knowledge of the device specific behavior moved out of simulator program code.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="9">To overcome the limitations in the prior art described above, and to overcome other limitations that will become apparent upon reading and understanding the present specification, the present invention discloses a generic device driver simulator.</p>
    <p num="10">The present invention solves the above-described problems by moving the knowledge of the device specific behavior out of simulator program code.</p>
    <p num="11">A system in accordance with the principles of the present invention includes a generic device driver for supporting application functions without device specific coding included therein, a database including device specific models of device drivers supported by the generic device driver and an interpreter for controlling the generic device driver according to the definitions of functions and data structures in the database.</p>
    <p num="12">
      Other embodiments of a system in accordance with the principles of the invention may include alternative or optional additional aspects.
      <br/>
      One such aspect of the present invention is that the generic device driver simulator further includes a watcher for defining watchpoints, the watchpoints identifying types of calls from the application.
    </p>
    <p num="13">Another aspect of the present invention is that the watcher displays information when a watchpoint is triggered by a call from the application.</p>
    <p num="14">Another aspect of the present invention is that the interpreter further comprises an input script for each device function supported by the generic device driver.</p>
    <p num="15">Another aspect of the present invention is that the interpreter further comprises an input script for multiple device functions supported by the generic device driver.</p>
    <p num="16">Another aspect of the present invention is that the watcher supports the execution of an input script in the interpreter in response to a watchpoint being triggered.</p>
    <p num="17">Still another aspect of the present invention is that the device specific models further includes definitions of functions executed by the application and data structures.</p>
    <p num="18">Another aspect of the present invention is that the generic device driver simulator further includes response queues for each function executed by the application.</p>
    <p num="19">Another aspect of the present invention is that the response queues are specific to a function.</p>
    <p num="20">Another aspect of the present invention is that the response queues return the next response to the application in response to receipt of a signal from the application.</p>
    <p num="21">Yet another aspect of the present invention is that the response queues return the next response to the application in response to receipt of a signal from the application.</p>
    <p num="22">
      These and various other advantages and features of novelty which characterize the invention are pointed out with particularity in the claims annexed hereto and form a part hereof.
      <br/>
      However, for a better understanding of the invention, its advantages, and the objects obtained by its use, reference should be made to the drawings which form a further part hereof, and to accompanying descriptive matter, in which there are illustrated and described specific examples of an apparatus in accordance with the invention.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="23">
      Referring now to the drawings in which like reference numbers represent corresponding parts throughout:
      <br/>
      FIG. 1 illustrates a block diagram of the generic device driver simulator according to the present invention;
      <br/>
      FIG. 2 is one example of a database table 200 illustrating some fields necessary to describe a device;
      <br/>
      FIG. 3 illustrates a more detailed diagram of the generic device driver simulator according to the present invention;
      <br/>
      FIG. 4 illustrates a table for one example of an interpreter command set according to the present invention;
      <br/>
      FIG. 5 is a flow chart of one example of an input program script for the interpreter and watcher of FIG. 3; and
      <br/>
      FIG. 6 is a block diagram that illustrates an exemplary hardware environment for providing a generic device driver simulator according to the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="24">
      In the following description of the exemplary embodiment, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration the specific embodiment in which the invention may be practiced.
      <br/>
      It is to be understood that other embodiments may be utilized as structural changes may be made without departing from the scope of the present invention.
    </p>
    <p num="25">
      The present invention provides a generic device driver simulator for aiding in the development of application programs.
      <br/>
      The generic device driver simulator moves the knowledge of the device specific behavior out of simulator program code.
      <br/>
      A database is used to define the functions and the data structures supported by the device and an interpreter is used to program the simulator based on the information obtained from the database.
      <br/>
      A watcher provides a user environment application that allows an application to monitor calls made to a simulated device.
    </p>
    <p num="26">
      FIG. 1 illustrates a block diagram of the generic device driver simulator 100 according to the present invention.
      <br/>
      In FIG. 1, the generic device driver simulator includes a generic device driver 110.
      <br/>
      The generic device driver 110 is a top half only device driver that executes in the kernel environment.
      <br/>
      By default, the generic device driver 110 returns "GOOD" status for each function called by the application 112.
      <br/>
      The generic device driver simulator also includes an interpreter 120, a watcher 130 and a database 140.
      <br/>
      The knowledge of the device specific behavior is moved out of code for the generic device driver 110.
      <br/>
      The database 140 is used to define the functions and the data structures supported by the generic device driver 110.
      <br/>
      The interpreter 120 is used to program the generic device driver simulator 100 based on the information obtained from the database 140.
      <br/>
      The watcher 130 is a user environment application that allows the developer of the application 112 to monitor the calls made to a simulated device.
      <br/>
      The database 140 allows the device driver to be generic, by providing a device specific model containing knowledge of each device of the generic device driver 110.
    </p>
    <p num="27">
      FIG. 2 is one example of a databases table 200 illustrating some fields necessary to describe a device.
      <br/>
      In the case for FIG. 2, the model is for a tape device.
      <br/>
      The table 200 includes attributes 202, a description 204 and an example 206 for a tape device.
      <br/>
      For example, the DeviceName 210 is one attribute and it is for a device that supports this function 212.
      <br/>
      In FIG. 2, the DeviceName is rmt 214.
      <br/>
      The FuncName 220 is the name of the function supported by the tape device 222 and is ioctl 224.
      <br/>
      The SubFuncs 230 identifies whether this function contains subfunctions 232.
      <br/>
      In the case for the tape device, the function does contain subfunctions 234.
    </p>
    <p num="28">
      StructName 240 is the name for the structure used for this function 242.
      <br/>
      No structure is applicable to this function 244.
      <br/>
      DevDesc 250 is the name for the description of this device 252, which is Removable Magnetic Tape Device 254 for this example.
      <br/>
      FuncDesc 260 is the name for the description of the function 262, which is Input/Output Control entry point 264 for this example.
      <br/>
      SubFuncName 270 is the name of the supported subfunction 272.
      <br/>
      The supported subfunction 272 for the tape device is sioc_inquiry 274 for this example.
      <br/>
      SubFuncNumber 280 is the number for this subfunction 282, which is "1082082049" 284 in this example.
      <br/>
      StructName 290 is the name for the structure used with this subfunction 292, which is inquiry_data 294 in this example.
      <br/>
      Finally, SubFuncDesc 296 is the name of the description for this subfunction 298, which is "Return the inquiry data" 299 for this device in this example.
      <br/>
      Thus, the application developer can control the behavior of a device being simulated without changing/compiling any simulator program code.
      <br/>
      The application developer can simulate another device simply by installing or creating a database describing the device.
    </p>
    <p num="29">
      FIG. 3 illustrates a more detailed diagram of the generic device driver simulator 300 according to the present invention.
      <br/>
      In FIG. 3, the user environment 310 and the kernel environment 320 are illustrated.
      <br/>
      As mentioned above, the generic device driver 330 is a top half only device driver that executes in the kernel environment 320.
      <br/>
      The simulator program code for the generic device driver 330 has no knowledge of a specific device so the simulator code is small and easy to maintain.
      <br/>
      When the real device changes, the simulator program code for the generic device driver 330 does not need to be changed and compiled.
      <br/>
      Only the database 350 for the device needs to be updated.
      <br/>
      Updates of the databases 350 are simpler than code updates.
    </p>
    <p num="30">
      The generic device driver 330 creates response queues 332 for each function of interest based on requests from an interpreter 370.
      <br/>
      The response queues 332 contain responses, e.g., data and return codes, that are specific to a function.
      <br/>
      The generic device driver 330 adds responses to the response queues 332 based on requests from the interpreter 370.
      <br/>
      When an application 380 in the user environment 310 makes a function call to the generic device driver 330, the generic device driver 330 may return the next response, e.g., data and return codes, from the response queue 332 for the function.
      <br/>
      By default, the generic device driver 330 returns "GOOD" status for each function.
      <br/>
      For example, the functions may be a tape device 360, a control unit image 362 or an adapter 364.
      <br/>
      In addition, the response queues 332 may be set up to wait until a signal is received from the interpreter 370 before returning the next response to the application 380.
    </p>
    <p num="31">
      The watcher 340 is a user environment application that allows a developer of an application 380 to monitor the calls made to a simulated device 360, 362, 364.
      <br/>
      The watcher 340 displays information each time a watch point is triggered.
      <br/>
      The watcher may also support the execution of an input file for an interpreter 370 each time a watch point is triggered.
    </p>
    <p num="32">
      The interpreter 370 is a functioning unit in the user environment 310 that allows the developer of an application 380 to program the generic device driver 330, making its behavior specific to particular devices.
      <br/>
      The interpreter 370 commands can be placed in a file to form an input script.
      <br/>
      An input script may be provided for each device function or a single input script may be used to control the behavior of more than one device function.
      <br/>
      Further, as noted above, an input script is not necessary since the generic device driver will by default return a "GOOD" status.
    </p>
    <p num="33">
      FIG. 4 illustrates a table 400 for one example of an interpreter command set.
      <br/>
      Those skilled in the art will recognize that the interpreter command set of FIG. 4 is not meant to be exhaustive, but is presented for illustration only.
      <br/>
      Other interpreter command sets may be provided in accordance with the present invention.
    </p>
    <p num="34">
      In FIG. 4, commands 402 are illustrated in a first column and a description 404 for the command is listed in a second column.
      <br/>
      The PRESET command 410 is a command for setting, listing or clearing preset function responses 412.
      <br/>
      The EXEC command 420 is a command to execute a command input file 422.
      <br/>
      The WATCH command 430 is a command for setting, listing or clearing watch points 432.
      <br/>
      The IF command 440 is a conditional construct 442.
      <br/>
      The WHILE command 450 is a looping construct 452.
      <br/>
      The INT command 460 is for declaring and initializing an integer variable 462.
      <br/>
      The CHAR command 470 is for declaring and initializing a character variable 472.
      <br/>
      The STRUCT command 480 is for declaring and initializing a structure variable 482.
      <br/>
      The STATIC command 490 is for declaring static variables 492.
    </p>
    <p num="35">
      FIG. 5 is a flow chart 500 of one example of an input program script for the interpreter and watcher of FIG. 3.
      <br/>
      Those skilled in the art will readily recognize that the flow chart of the input script 500 is provided for purposes of illustration only, and that other input scripts for other functions or an input script for multiple functions could be written.
      <br/>
      An input script according to the flow chart may be written for the interpreter and watcher, which may include a single command or several commands grouped to form a program.
      <br/>
      In FIG. 5, the flow chart of the input script 500 is executed in response to a write function being called 510.
      <br/>
      If the function is a write, then a WriteCount is incremented 520.
      <br/>
      If the counter does not indicate that a fifth write command has been detected 530, then the program returns a preset of a "good" return to the application through the generic device driver 540 and the routine recycles.
      <br/>
      However, on the fifth write 550, an "out of space" error message is returned to the application 560.
      <br/>
      The "out of space" error message is set using a preset command.
      <br/>
      All preset commands are used to preset function responses that are returned by the generic device driver to the application.
      <br/>
      The developer of an application, presets the generic device driver to return specific data and return codes for each function the developer's application uses.
      <br/>
      Further, the application developer has total control over what values the simulated device returns for return codes and data, and interpreter input scripts can be shared among application developers using the simulator.
    </p>
    <p num="36">
      FIG. 6 is a block diagram 600 that illustrates an exemplary hardware environment for providing a generic device driver simulator according to the present invention.
      <br/>
      The present invention is typically implemented using a computer 610 comprised of a microprocessor, random access memory (RAM), read-only memory (ROM), and other components.
      <br/>
      It is envisioned that attached to the computer 610 may be a monitor 612, floppy disk drives 614, and CD-ROM drives 616.
      <br/>
      Also included in the preferred embodiment may be input devices, for example, a mouse pointing device 620 and a keyboard 622.
    </p>
    <p num="37">
      The computer 610 operates under the control of an operating system 624, such as the Windows, OS/2, Macintosh, or UNIX operating systems, which is represented in FIG. 6 by the screen display on the monitor 612.
      <br/>
      The computer 610 executes one or more computer programs 626, which are represented in FIG. 6 by the "windows" displayed on the monitor 612, under the control of the operating system 624.
      <br/>
      The present invention comprises a generic device driver and generic device driver simulator that is preferably implemented in the operating system 624 and/or computer programs 626.
    </p>
    <p num="38">
      Generally, the operating system 624 and the computer programs 626 may be tangibly embodied in a computer-readable medium or carrier, e.g. one or more of the fixed and/or removable data storage devices 614 and 616, or other data storage or data communications devices.
      <br/>
      Both the operating system 624 and the computer programs 626 may be loaded from the data storage devices 614 and 616 into the random access memory of the computer 610 for execution by the microprocessor as discussed above with reference to FIG. 6.
      <br/>
      Both the operating system 624 and the computer programs 626 comprise instructions which, when read and executed by the microprocessor of the computer 610, causes the computer 610 to perform the steps necessary to execute the steps or elements of the present invention.
    </p>
    <p num="39">Although an exemplary computer system configuration is illustrated in FIG. 6, those skilled in the art will recognize that any number of different configurations performing similar functions may be used in accordance with the present invention.</p>
    <p num="40">
      In summary, the present invention provides a generic device driver simulator for aiding in the development of application programs.
      <br/>
      The generic device driver simulator moves the knowledge of the device specific behavior into a database.
      <br/>
      An interpreter is used to program the simulator based on the information obtained from the database and a watcher provides a user environment application that allows an application to monitor calls made to a simulated device.
    </p>
    <p num="41">
      The foregoing description of the exemplary embodiment of the invention has been presented for the purposes of illustration and description.
      <br/>
      It is not intended to be exhaustive or to limit the invention to the precise form disclosed.
      <br/>
      Many modifications and variations are possible in light of the above teaching.
      <br/>
      It is intended that the scope of the invention be limited not with this detailed description, but rather by the claims appended hereto.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A generic device driver for use in a device driver simulator, the generic device driver supporting application functions without device specific coding included therein and executing in a kernel environment, wherein the generic device driver creates response queues for each function executed by the application.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The generic device driver of claim 1 wherein the response queues are specific to a function.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The generic device driver of claim 2 wherein the response queues return the next response to the application in response to receipt of a signal from the application.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The generic device driver of claim 2 wherein the response queues return the next response to the application in response to receipt of a signal from the interpreter.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The generic device driver of claim 1 wherein the response queues return the next response to the application in response to receipt of a signal from the application.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A generic device driver simuator, comprising:</claim-text>
      <claim-text>a generic device driver for supporting application functions without device specific coding included therein; a database containing device specific models of device drivers supported by the generic device driver;</claim-text>
      <claim-text>and an interpreter, operatively coupled to the generic device driver and the database, for controlling the generic device driver according to the definitions of functions and data structures in the database.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The generic device driver simulator of claim 6 further comprising a watcher for defining watchpoints, the watchpoints identifying types of calls from the application.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The generic device driver simulator of claim 7 wherein the watcher displays information when a watchpoint is triggered by a call from the application.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The generic device driver simulator of claim 8 wherein the interpreter further comprises an input script for each device function supported by the generic device driver.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The generic device driver simulator of claim 8 wherein the interpreter further comprises an input script for multiple device functions supported by the generic device driver.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The generic device driver simulator of claim 8 wherein the watcher supports the execution of an input script in the interpreter in response to a watchpoint being triggered.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The generic device driver simulator of claim 7 wherein the interpreter further comprises an input script for each device function supported by the generic device driver.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The generic device driver simulator of claim 12 wherein the watcher supports the execution of an input script in the interpreter in response to a watchpoint being triggered.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The generic device driver simulator of claim 6 wherein the device specific models further comprises definitions of functions executed by the application and data structures.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The generic device driver simulator of claim 6 further comprising response queues for each function executed by the application.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The generic device driver simulator of claim 15 wherein the response queues are specific to a function.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The generic device driver simulator of claim 16 wherein the response queues return the next response to the application in response to receipt of a signal from the application.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The generic device driver simulator of claim 16 wherein the response queues return the next response to the application in response to receipt of a signal from the interpreter.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The generic device driver of claim 15 wherein the response queues return the next response to the application in response to receipt of a signal from the application.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The generic device driver simulator of claim 15 wherein the response queues return the next response to the application in response to receipt of a signal from the interpreter.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. A method of simulating a device driver, comprising the steps of: providing a generic device driver in a kernel environment, the generic device driver responding to application calls without device specific coding included in the generic device driver; providing a database in a user environment, the database including device specific models of device drivers supported by the generic device driver;</claim-text>
      <claim-text>and controlling the generic device driver through an interpreter in the user environment, the interpreter controlling the generic device driver according to the definitions of functions and data structures in the database.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The method of claim 21 further comprising the step of defining watchpoints, the watchpoints identifying types of calls from the application.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The method of claim 22 wherein the step of defining watchpoints further comprises the step of displaying information when a watchpoint is triggered by a call from the application.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The method of claim 23 wherein the step of controlling the generic device driver through an interpreter further comprises the step of programming the interpreter by writing an input script for each device function supported by the generic device driver.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The method of claim 23 wherein the step of controlling the generic device driver through an interpreter further comprises the step of programming the interpreter by writing an input script for multiple device functions supported by the generic device driver.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The method of claim 23 wherein the step of defining watchpoints further comprises the step of executing an input script in the interpreter in response to a watchpoint being triggered.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The method of claim 21 wherein the device specific models further comprises definitions of functions executed by the application and data structures.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The method of claim 21 further comprising response queues for each function executed by the application.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The method of claim 28 wherein the response queues are specific to a function.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The method of claim 29 wherein the step of responding to application calls further comprises the step of returning the next response to the application in response to receipt of a signal from the application.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. An article of manufacture for a computer-based user-interface, the article of manufacture comprising a computer readable medium having instructions for causing a computer to perform a method for simulating a device driver, the method: providing a generic device driver in a kernel environment, the generic device driver responding to application calls without device specific coding included in the generic device driver; providing a database in a user environment, the database including device specific models of device drivers supported by the generic device driver;</claim-text>
      <claim-text>and controlling the generic device driver through an interpreter in the user environment, the interpreter performing according to the definitions of functions and data structures in the database.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The article of manufacture of claim 31 further comprising the step of defining watchpoints, the watchpoints identifying types of calls from the application.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The article of manufacture of claim 32 wherein the step of defining watchpoints further comprises the step of displaying information when a watchpoint is triggered by a call from the application.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The article of manufacture of claim 33 wherein the step of controlling the generic device driver through an interpreter further comprises the step of programming the interpreter by writing an input script for each device function supported by the generic device driver.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. The article of manufacture of claim 33 wherein the step of controlling the generic device driver through an interpreter further comprises the step of programming the interpreter by writing an input script for multiple device functions supported by the generic device driver.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. The article of manufacture of claim 33 wherein the step of defining watchpoints further comprises the step of executing an input script in the interpreter in response to a watchpoint being triggered.</claim-text>
    </claim>
    <claim num="37">
      <claim-text>37. The article of manufacture of claim 31 wherein the device specific models further comprises definitions of functions executed by the application and data structures.</claim-text>
    </claim>
    <claim num="38">
      <claim-text>38. The article of manufacture of claim 31 further comprising response queues for each function executed by the application.</claim-text>
    </claim>
    <claim num="39">
      <claim-text>39. The article of manufacture of claim 38 wherein the response queues are specific to a function.</claim-text>
    </claim>
    <claim num="40">
      <claim-text>40. The article of manufacture of claim 39 wherein the step of responding to application calls further comprises the step of returning the next response to the application in response to receipt of a signal from the application.</claim-text>
    </claim>
  </claims>
</questel-patent-document>