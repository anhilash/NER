<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06182178B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06182178</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6182178</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22314110" extended-family-id="42109026">
      <document-id>
        <country>US</country>
        <doc-number>09106953</doc-number>
        <kind>A</kind>
        <date>19980630</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09106953</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43165655</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>10695398</doc-number>
        <kind>A</kind>
        <date>19980630</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09106953</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <term-of-grant>
      <disclaimer/>
    </term-of-grant>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  13/40        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>40</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>710314000</text>
        <class>710</class>
        <subclass>314000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>710107000</text>
        <class>710</class>
        <subclass>107000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-013/40D5R</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>013</main-group>
        <subgroup>40D5R</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-013/4045</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>13</main-group>
        <subgroup>4045</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>20</number-of-claims>
    <exemplary-claim>13</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>4</number-of-drawing-sheets>
      <number-of-figures>4</number-of-figures>
      <image-key data-format="questel">US6182178</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and system for supporting peripheral component interconnect (PCI) peer-to-peer access across a PCI host bridge supporting multiple PCI buses</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>LEUNG WING Y, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5592632</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5592632</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>NEAL DANNY MARVIN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5761462</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5761462</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>HAUSAUER BRIAN S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5790870</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5790870</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>AJANOVIC JASMIN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5859988</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5859988</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>GUTHRIE GUY LYNN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5887144</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5887144</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>GUTHRIE GUY LYNN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5898888</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5898888</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>KLEINEBERG MICHAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5915101</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5915101</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>JEDDELOH JOSEPH</text>
          <document-id>
            <country>US</country>
            <doc-number>5935233</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5935233</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>KELLEY RICHARD ALLEN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6081863</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6081863</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Kelley, Richard Allen</name>
            <address>
              <address-1>Apex, NC, US</address-1>
              <city>Apex</city>
              <state>NC</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Neal, Danny Marvin</name>
            <address>
              <address-1>Round Rock, TX, US</address-1>
              <city>Round Rock</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Thurber, Steven Mark</name>
            <address>
              <address-1>Austin, TX, US</address-1>
              <city>Austin</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Emile, Volel</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <orgname>Felsman, Bradley, Vaden, Gunter &amp; Dillon, LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Sheikh, Ayaz R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A method and system for supporting multiple Peripheral Component Interconnect (PCI) local buses through a single PCI host bridge having multiple PCI interfaces within a data-processing system are disclosed.
      <br/>
      In accordance with the method and system of the present invention, a processor and a system memory are connected to a system bus.
      <br/>
      First and second PCI local buses are connected to the system bus through a PCI host bridge.
      <br/>
      The first and second PCI local buses have sets of in-line electronic switches, dividing the PCI local buses into PCI local bus segments supporting a plurality of PCI peripheral component slots for connecting PCI devices.
      <br/>
      The sets of in-line electronic switches are open and closed in accordance with bus control logic within the PCI host bridge allowing up to fourteen or more PCI peripheral component slots for connecting up to fourteen PCI devices to have access through a single PCI host bridge to the system bus.
      <br/>
      An internal PCI-to-PCI bridge is provided to allow a PCI device to share data with another PCI device as peer-to-peer devices across the first and second PCI local bus segments.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Technical Field
    </p>
    <p num="2">
      The present invention relates in general to a method and system for data processing and, in particular, to a method and system for handling multiple Peripheral Component Interconnect (PCI) local bus accesses within a computer system.
      <br/>
      Still more particularly, the present invention relates to a method and system for handling PCI peer-to-peer access across multiple PCI local buses across a PCI host bridge supporting multiple PCI Buses within a computer system.
    </p>
    <p num="3">2. Description of the Related Art</p>
    <p num="4">
      A computer system typically includes several types of buses, such as a system bus, local buses, and peripheral buses.
      <br/>
      Various electronic circuit devices and components are connected with each other via these buses such that intercommunication may be possible among all of these devices and components.
    </p>
    <p num="5">
      In general, a central processing unit (CPU) is attached to a system bus, over which the CPU communicates directly with a system memory that is also attached to the system bus.
      <br/>
      In addition, a local bus may be used for connecting certain highly integrated peripheral components rather than the slower standard expansion bus.
      <br/>
      One such local bus is known as the Peripheral Component Interconnect (PCI) bus. Under the PCI local bus standard, peripheral components can directly connect to a PCI local bus without the need for glue logic, the "profusion of chips needed to match the signals between different integrated circuits." Thus, PCI provides a bus standard on which high-performance peripheral devices, such as graphics devices and hard disk drives, can be coupled to the CPU, thereby permitting these high-performance peripheral devices to avoid the general access latency and the bandwidth constraints that are associated with an expansion bus.
      <br/>
      An expansion bus such as an Industry Standard Architecture (ISA) bus, is for connecting various peripheral devices to the computer system.
      <br/>
      These peripheral devices typically include input/output (I/O) devices such as a keyboard, floppy drives, and printers.
    </p>
    <p num="6">
      Additionally, under the PCI local bus standard for 33 MHz operation, only four peripheral component connector slots may be attached to the PCI bus due to loading constraints on the bus.
      <br/>
      In order to overcome this technical constraint, designers may add a second or more PCI local buses that give the end user of a computer system the advantage of adding on four more slots per bus.
      <br/>
      However, a PCI host bridge is required for transferring information from the PCI bus to the system bus.
      <br/>
      Therefore, with the addition of more than one PCI local buses, designers have had to add on multiple PCI host bridges and/or PCI-to-PCI bridges for supporting the multiple PCI buses and a method for handling PCI peer-to-peer access across the multiple PCI host bridges thereby increasing the cost and complexity of the system.
    </p>
    <p num="7">
      Therefore, it is desirable in a PCI-based system requiring multiple PCI host bridges and/or PCI-to-PCI bridges supporting multiple PCI buses, that a single PCI host bridge support multiple PCI buses thus minimizing the number of required bridges.
      <br/>
      Furthermore, it is desirable to have a single PCI host bridge operating at 33 MHz that has the capability of supporting more than four peripheral component slots having PCI devices connected thereto.
      <br/>
      Additionally, it is desirable to support PCI peer-to-peer access across a PCI bus operating at 33 MHz within a data-processing system.
      <br/>
      The subject invention herein solves all these problems in a new and unique manner which has not been part of the art previously.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="8">In view of the foregoing, it is therefore an object of the present invention to provide an improved method and system for data processing.</p>
    <p num="9">It is another object of the present invention to provide an improved method and system for handling PCI peer-to-peer accesses within a data-processing system.</p>
    <p num="10">It is yet another object of the present invention to provide an improved method and system for supporting PCI peer-to-peer access across more than four PCI peripheral component slots connecting PCI devices per each PCI bus operating at 33 MHz within a data-processing system.</p>
    <p num="11">
      In accordance with the method and system of the present invention, a processor and a system memory are connected to a system bus.
      <br/>
      First and second PCI local buses are connected to the system bus through a PCI host bridge.
      <br/>
      The first and second PCI local buses have sets of in-line electronic switches, dividing the PCI local buses into PCI local bus segments supporting a plurality of PCI peripheral component slots for connecting PCI devices.
      <br/>
      The sets of in-line electronic switches are open and closed in accordance with bus control logic within the PCI host bridge allowing up to fourteen or more PCI peripheral component slots for connecting up to fourteen PCI devices to have access through a single PCI host bridge to the system bus.
      <br/>
      A PCI-to-PCI bridge function is provided to allow a PCI device to share data with another PCI device as peer-to-peer devices across the first and second PCI local buses.
    </p>
    <p num="12">All objects, features, and advantages of the present invention will become apparent in the following detailed written description.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="13">
      The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself however, as well as a preferred mode of use, further objects and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:
      <br/>
      FIG. 1 is a block diagram of a typical computer system having a PCI local bus architecture, which may utilize a preferred embodiment of the present invention;
      <br/>
      FIG. 2 is a block diagram of a prior art configuration having separate PCI local buses under separate PCI host bridges; and
      <br/>
      FIG. 3 is a block diagram of a PCI host bridge having separate PCI local buses in accordance with a preferred embodiment of the present invention, and
      <br/>
      FIG. 4 is a block diagram of a PCI host bridge having a P2P bridge in accordance with a preferred embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENT</heading>
    <p num="14">
      The present invention may be applicable in a variety of computers under a number of different operating systems.
      <br/>
      The computer may be, for example, a personal computer, a mini-computer, or a mainframe computer.
      <br/>
      For the purpose of illustration, a preferred embodiment of the present invention, as described below, is implemented on a mini-computer, such as the RS/6000 (series manufactured by International Business Machines Corporation).
    </p>
    <p num="15">
      Referring now to the drawings wherein like reference numerals refer to like and corresponding parts throughout, and in particular to FIG. 1, there is depicted a block diagram of a typical computer system 10 having a PCI local bus architecture, which may utilize a preferred embodiment of the present invention.
      <br/>
      As shown in FIG. 1, a processor 12, cache memory 14, memory controller 16, and a Dynamic Random Access Memory (DRAM) 18 are all connected to a system bus 20 of a computer system 10.
      <br/>
      Processor 12, cache memory 14, memory controller 16, and DRAM 18 are also coupled to a PCI local bus 22 of computer system 10 through a PCI host bridge 24.
      <br/>
      PCI host bridge 24 provides a low latency path through which processor 12 may directly access PCI devices mapped anywhere within bus memory and/or I/O address spaces.
      <br/>
      PCI host bridge 24 also provides a high bandwidth path for allowing a PCI device to directly access DRAM 18.
      <br/>
      By way of example, but not of limitation, the PCI host bridge 24 may include various functions such as data buffering/posting and arbitration.
    </p>
    <p num="16">
      Referring once again to FIG. 1, also attaching to PCI local bus 22 may be other devices such as a local-area network (LAN) interface 26, a small computer system interface (SCSI) 28 and an expansion bus interface 30.
      <br/>
      LAN interface 26 is for connecting computer system 10 to a local-area network 32 such as to an Ethernet or Token-Ring.
      <br/>
      SCSI interface 28 is utilized to control high-speed SCSI disk drives 34.
      <br/>
      Expansion bus interface 30 couples any other expansion buses 36 such as an ISA bus, EISA bus, and/or MicroChannel Architecture (MCA) bus to the PCI local bus 22.
      <br/>
      Typically, various peripheral devices for performing certain basic I/O functions 46 are attached to one of expansion buses 36.
    </p>
    <p num="17">
      In general, PCI local bus 22 due to loading effects on the bus supports up to four add-in board connectors without requiring any expansion capability, such as adding a second PCI local bus not shown.
      <br/>
      Audio adapter board 38, motions video adapter board 40, and graphics adapter board 42 connected to a monitor 44 are examples of some devices that may be attached to PCI local bus 22 via add-in board connectors as shown in FIG. 1.
    </p>
    <p num="18">
      With reference now to FIG. 2, there is illustrated a prior art configuration having separate PCI local buses under separate PCI host bridges.
      <br/>
      As shown, processor(s) 48 and a system memory 50 are coupled for communication over a system bus 20.
      <br/>
      By way of example but, not of limitation, system bus 20 provides a 32-bit memory address space and a 16-bit I/O address space.
      <br/>
      A PCI host bridge 52 enables communications between bus agents coupled to system bus 20 and bus agents coupled to a PCI local bus A 56.
      <br/>
      Further, a PCI-to-ISA bridge 60 enables communications between bus agents (ISA device 64) coupled to an ISA bus 62 (ISA bus 62 is an expansion bus) and system memory 50.
      <br/>
      PCI-to-ISA bridge 60 also enables communications between processor(s) 48 and bus agents (ISA device 64) coupled to the ISA bus 62.
    </p>
    <p num="19">
      Referring once again to FIG. 2, PCI devices 66, 68 and 70 are bus agents coupled for communication over PCI local bus A 56.
      <br/>
      In addition, PCI host bridge 52 and PCI-to-ISA bridge 60 are coupled as bus agents for communication over PCI local bus 56.
      <br/>
      PCI host bridge 52 and PCI-to-ISA bridge 60 have the capability to be initiators and targets for access cycles over PCI local bus 56.
      <br/>
      Turning once again to FIG. 2, in addition to PCI host bridge 52, a second PCI host bridge 54 is also attached to system bus 20.
      <br/>
      Similar to PCI host bridge 52, PCI host bridge 54 enables communications between bus agents coupled to system bus 20 and bus agents coupled to a second PCI local bus B 58.
      <br/>
      Attaching to PCI local bus B 58 are PCI devices, such as PCI device 72 and PCI device 74.
    </p>
    <p num="20">
      Referring now to FIG. 3, there is illustrated a block diagram of a PCI host bridge 76 in accordance with the preferred embodiment of the present invention.
      <br/>
      As shown, PCI host bridge 76 may support a plurality of PCI local buses, namely, PCI local bus A 56 and PCI local bus B 58.
      <br/>
      As shown in FIG. 3, two sets of in-line electronic switches are provided for each PCI bus thereby providing bus segments for allowing more than four PCI devices to be utilized on a given bus.
      <br/>
      These sets of in-line electronic switches additionally provide the total switching mechanism for all of the appropriate PCI signals associated with PCI buses for isolation on the buses as will be more fully described below.
    </p>
    <p num="21">
      Referring once again to FIG. 3, two sets of in-line electronic switches SW-B1 86 and SW-B2 88 are inserted along PCI local bus B 58 creating PCI local bus segments B1 90 and B2 92, respectively.
      <br/>
      In accordance with the PCI specification, the bus loading design requirements for the PCI local bus B 58 are normally ten loads for a maximum frequency of up to 33 MHz at 33 MHz of operation.
      <br/>
      Attaching a PCI slot to the PCI bus B 58 presents itself as two loads.
      <br/>
      As shown in FIG. 3, local bus segments B1 90 and B2 92, respectively, each have attached four peripheral component slots 112 and 114 for a total of eight loads on each bus segment.
      <br/>
      The host bridge 76 adds one load and open switches on the other bus segment, PCI local bus A 56, as will be more fully described below, add one more additional load, for a total of ten loads on each local bus segment B1 90 and B2 92, respectively.
    </p>
    <p num="22">
      As shown in FIG. 3, the PCI local bus segments B1 90 and B2 92 each support four PCI peripheral component slots 112 and 114 (add-in board connectors) for receiving PCI devices, not shown.
      <br/>
      It should be understood that in order to meet the ten load requirement that at any one time only one set of switches may be closed on PCI local bus B 58 producing a total of ten loads.
      <br/>
      Therefore, the opening and closing of switches SW-B1 86 and SW-B2 88 effectively isolate the PCI local bus B 58 from the local effects of the segments and the four added peripheral component slots behind the open switches allows eight slots to be utilized on PCI local bus B 58, thereby eliminating the need for the second PCI host bridge 54 shown in FIG. 2.
    </p>
    <p num="23">
      Turning once again to FIG. 3, two sets of in-line electronic switches SW-A1 78 and SW-A2 80 are inserted along PCI local bus A 56 creating PCI local bus segments A1 82 and A2 84, respectively.
      <br/>
      As noted above, the bus loading design requirements for the PCI local bus A 56 are normally ten loads for a maximum frequency of up to 33 MHz at 33 MHz of operation.
      <br/>
      Once again, attaching a PCI slot to the PCI bus A 56 presents itself as two loads.
      <br/>
      As shown in FIG. 3, local bus segments A1 82 and A2 84 respectively, each have attached three peripheral component slots 96 and 98 for a total of six loads on each bus.
      <br/>
      The host bridge 76 adds one load and open switches SW-B1 86 and SW-B2 88 on PCI local bus B 58 add one more additional load, for a total of eight loads on each PCI local bus segments A1 82 and A2 84, respectively.
      <br/>
      As discussed above, open switches SW-A1 78 and SW-A2 80 adds an additional load on PCI local bus B 58.
      <br/>
      The three peripheral component slots 96 and 98 on each side of PCI local bus segments A1 82 and A2 84 when either switch SW-A1 78 and SW-A2 80 is closed presents six loads and is restricted to one less slot on each bus segment to allow for the added trace length of wire that may be required pass the slots in PCI local bus B 58 (which adds an approximately equivalent additional load to that bus segment).
    </p>
    <p num="24">
      As shown in FIG. 3, the PCI local bus segments A1 82 and A2 84 each support three PCI peripheral component slots 96 and 98 (add-in board connectors) for receiving PCI devices, not shown, while accounting for the additional load presented by the extra wiring required to bypass the slots in PCI local bus B 58.
      <br/>
      It should be understood that in order to meet the ten load requirement that at any one time only one set of switches may be closed on PCI local bus A 56.
      <br/>
      Therefore, the opening and closing of switches SW-A1 78 and SW-A2 80 effectively isolate the PCI local bus A 56 from the local effects of the segments and the three added peripheral component slots behind the open switches allows six slots to be utilized on PCI local bus A 56.
      <br/>
      Although not shown, it should be understood that PCI local bus A 56 without PCI local bus B 58 could also support eight device slots.
      <br/>
      Additionally, a single pull double throw switch may also replace the two sets of in-line electronic switches.
      <br/>
      With this configuration, fourteen peripheral component slots are supported by each PCI host bridge.
    </p>
    <p num="25">
      Referring once again to FIG. 3, The PCI host bridge 76 includes bus control logic 94 having an address decode 100, range registers 101 and an arbiter control 102 for controlling the sequence of turning "on" an "off" the switches SW-A1 78, SW-A2 80, SW-B1 86 and SW-B2 88, respectively, during bus operation.
      <br/>
      As mentioned before, when using either PCI local bus A 56 or bus B 58, only one set of switches, SW-A1 78 and SW-A2 80 or SW-B1 86 and SW-B2 88 are closed at a time, depending on where a master and where a target is during bus operation on either bus A 56 or bus B 58.
    </p>
    <p num="26">
      By way of example, but not of limitation, the bus control logic 94 for bus A 56 will be described.
      <br/>
      The arbiter 102 for bus A 56 determines where the winning master is on the bus 56.
      <br/>
      If the current controlling master is say on bus segment A1 82, then the switch SW-A1 78 is closed and switch SW-A2 80 is open when that master gains control of bus segment A1.
      <br/>
      If the operation is DMA (Direct Memory Access) to system memory 50 through the system bus 20, then the target is the host bridge 76.
      <br/>
      If the next winning arbiter is on segment A2 84, the grant line (GNT-) is removed from the master on segment A1 82, and when its latency timer expires, it gets off the bus 56 resulting in a idle cycle on the bus 56.
      <br/>
      When the bus 56 goes idle, switch SW-A1 78 is open, and SW-A2 80 is closed, and the GNT- is activated to the winning master waiting on segment A2 84.
      <br/>
      When the winning master in segment A2 84 sees its GNT- line active on the bus 56 it begins its Direct Memory Access (DMA) to system memory 50.
      <br/>
      It should be noted that the request line (REQ-) and GNT- lines (not shown) are not bused, and therefore not switched by the in-line switches SW-A1 78 and SW-A2 80.
      <br/>
      Although not described, it should be recognized that the equivalent bus control logic 94 discussed above is also provided for the in-line electronic switches SW-B1 86 and SW-B2 88 inserted along PCI local bus B 58.
    </p>
    <p num="27">
      Continuing from above and referring once again to FIG. 3, if the winning arbiter 102 is the PCI host bridge 76 for PCI local bus A 56, the address decode 100 and address range registers 101 in the bus controller 94 (for bus A) located in the PCI host bridge 76 is used to find the target the PCI host bridge 76 wants to access.
      <br/>
      This address decode 100 and address range registers 101 functions are handled in parallel with the arbitration 102 described above.
      <br/>
      Once a target is located, then the PCI host bridge 76 will know which set of in-line switches SW-A1 78 and SW-A2 80 need to be closed to connect the PCI host bridge 76 to the correct target.
      <br/>
      If the next target is on the same bus segment as the current controlling master, the switch states will not change until bus control is granted to the next controlling master.
      <br/>
      The address decode 100 is done to locate the target when the PCI host bridge 76 arbitrates for the PCI local bus A 56, in case the bridge wins the arbitration.
      <br/>
      When the current controlling master is on segment A1 82, the winning arbiter 102 is the PCI host bridge 76, and the target is on segment A2 84, the GNT- is removed from the master on segment A1 82, and when its latency timer expires, it gets off the PCI local bus 56 resulting in an idle cycle on the PCI local bus 56.
      <br/>
      When the PCI local bus 56 goes idle, switch SW-A1 78 is open and switch SW-A2 80 is closed and the PCI host bridge 76 now begins its access to the target on PCI local bus segment A2 84.
      <br/>
      Although not described, it should be recognized that the equivalent bus control logic 94 discussed above is also provided for the set of in-line electronic switches SW-B1 86 and SW-B2 88 inserted along PCI local bus B 58.
    </p>
    <p num="28">
      Turning once again to FIG. 3, for local bus segments A1 82 and A2 84 there are attached pull-up resistors 104 and 110 located on the slot 96 and 98 sides of the switches 78 and 80.
      <br/>
      Similarly, for local bus segments B1 90 and B2 92 there are attached pull-up resistors 106 and 108 located on the slot 112 and 114 sides of the switches 86 and 88.
      <br/>
      Additionally, more than two bus segments per PCI bus may be separated by set of in-line switches as long as the total bus loading requirements and timing budgets are met for a given frequency of operation.
      <br/>
      Also, more than two PCI buses can be provided by a single PCI host bridge as long as there are enough pins on the chip and the buses can be physically wired.
    </p>
    <p num="29">
      Referring now to FIG. 4, there is illustrated a block diagram for providing peer-to-peer support for PCI devices on PCI local bus A1 56 by adding an internal enhanced PCI-to-PCI (P2P) bridge 116 capability including PCI Interfaces B and A 120 and 124, respectively and input/output buffers 122 and 126 to the PCI host bridge 76 in accordance with the preferred embodiment of the present invention.
      <br/>
      Referring once again to FIG. 4, the P2P bridge capability 116 operates with PCI local bus segment A1 82, A2 84, B1 90 and B2 92 to provide a P2P functionality to handle peer-to-peer between these bus segments.
      <br/>
      P2P bridge operations are known in the art and therefore not discussed in detail herein, except for the added P2P bridge capability described in the preferred embodiment.
    </p>
    <p num="30">
      The following describes a new capability of a P2P bridge allowing the P2P bridge in conjunction with the PCI host bridge 76, address decode 100 and range registers 101 to accept a transaction as a target and then later to place the same transaction as a master out on the same PCI interface based on the location of the target.
      <br/>
      By way of example, but not of limitation, when a current controlling master is on PCI local bus segment A1 82, switches SW-A1 78 is closed and SW-A2 80 is opened thereby connecting local bus segment A1 82 to PCI host bridge 76, the transaction from the master is placed into input/output buffer 126 through PCI-Interface 124.
      <br/>
      The PCI host bridge 76 and the P2P bridge 116 (acting as potential targets) decode 100 the address of the transaction.
      <br/>
      When the address is a location in system memory, the PCI host bridge 76 responds as the target and forwards the information in the input/output buffer 126 via a separate transaction to the system via a system interface 118.
      <br/>
      When the address is for a device on PCI local bus segment A2 84, the P2P bridge 116 responds as the target and terminates the transaction as a delayed transaction or posts the transaction when the transaction is a memory write.
      <br/>
      The P2P bridge 116 then arbitrates for the local bus A 56.
      <br/>
      When the PCI interface 124 is granted access to the PCI local bus A 56, the switch control logic closes switch SW-A2 80 and opens switch SW-A1 78 connecting PCI local bus segment A2 84 to PCI local bus A 56 so that the PCI Interface 124 of the P2P bridge 116 can complete the transaction in input/output buffers 126 to the PCI device connected at PCI slot 98.
      <br/>
      It should be noted that the same sequence of events occurs on bus segments A1 82 and A2 84 when the controlling master is on segment A2 84 and the target is on segment A1 82.
      <br/>
      Similarly, the same sequence of events occurs for local bus B 58, with devices on segment B1 90 and segment B2 92 using the PCI host bridge 76 and the enhanced P2P bridge 116 in association with PCI-Interface B 120 and input/output buffer 122.
    </p>
    <p num="31">
      When the current controlling master is on PCI local bus segment A2 84, switches SW-A1 80 is closed and SW-A2 78 is opened thereby connecting local bus segment A2 84 to PCI host bridge 76, the transaction from the master is placed into input/output buffer 126 through PCI-Interface 124.
      <br/>
      Once again, the PCI host bridge 76 and the P2P bridge 116 (acting as potential targets) decode 100 the address of the transaction.
      <br/>
      When the address is a location in system memory, the PCI host bridge 76 responds as the target and forwards the information in the input/output buffer 126 via another transaction to the system via the system interface 118.
      <br/>
      When the address is for a device on PCI local bus segment B2 92, the P2P bridge 116 responds as the target and terminates the transaction as a delayed transaction or posts the transaction when the transaction is a memory write.
      <br/>
      The P2P bridge 116 then arbitrates for the local bus B 58.
      <br/>
      When the PCI interface 120 is granted access to the PCI local bus B 92, the switch control logic closes switch SW-B2 88 and opens switch SW-B1 86 connecting PCI local bus segment B2 92 to PCI local bus B 58 so that the PCI Interface 120 of the P2P bridge 116 can complete the transaction in input/output buffers 126 to the PCI device connected at PCI slot 114.
      <br/>
      Similarly, the same sequence of events occurs when a controlling master is on local bus B 58 and the target is in one of the slots on local bus A 56.
    </p>
    <p num="32">
      By way of example, but not of limitation, when both the controlling master and the target are on the same PCI bus segment A1 82 performing peer-to-peer operations, SW-A1 78 can be opened and PCI bus segments A2 84 and A1 82 can be operated as a separate logical buses with the arbiter 102 granting the bus segment A1 82 to either a master or segments A1 82 or to the PCI host bridge 76 via PCI-interface 124.
      <br/>
      Similarly, PCI bus segments B1 90 and B2 92 can be operated as separate logical buses when peer-to-peer operations are occurring on the same PCI bus segment, with the in-line switches providing the isolation.
      <br/>
      This functional capability adds greater bandwidth to the PCI I/O subsystem.
    </p>
    <p num="33">While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13.</claim-text>
      <claim-text>A method for supporting multiple Peripheral Component Interconnect (PCI) buses comprising: connecting a processor and a system memory to a system bus; connecting a plurality of PCI local buses to said system bus via a PCI host bridge having an internal peer-to-peer bridge and a plurality of ports for connection to each of said plurality of PCI local buses, wherein said PCI host bridge contains a bus control logic including an address decoder, range registers and an arbiter control;</claim-text>
      <claim-text>and connecting a plurality of PCI peripheral component slots to said plurality of PCI local buses, wherein at least one said PCI peripheral component slot shares data with said processor and said system memory, wherein said plurality of PCI local buses defining a first PCI local bus includes first and second sets of in-line electronic switches, and wherein said first set of in-line electronic switches is coupled to a first PCI local bus segment and said second set of in-line electronic switches is coupled to a second PCI local bus segment, and wherein said first and said second set of in-line electronic switches are coupled to said bus control logic.</claim-text>
      <claim-text>1. A computer system comprising:</claim-text>
      <claim-text>a system bus connected to a processor and a system memory; a plurality of Peripheral Component Interconnect (PCI) local buses; a PCI host bridge coupled to said system bus, wherein said PCI host bridge has a plurality of ports, wherein each port is coupled to a particular one of said plurality of PCI local buses, wherein said PCI host bridge contains an internal peer-to-peer bridge whereby transactions may be accomplished between a first one of said plurality of PCI local buses and a second one of said plurality of local buses; a plurality of in-line electronic switches coupled to said PCI local buses, wherein said switches are controlled by a bus control logic including an address decoder, range registers and an arbiter control contained within said PCI host bridge;</claim-text>
      <claim-text>and a plurality of PCI slots connected to said plurality of electronic switches for coupling PCI peripherals to said computer system.</claim-text>
      <claim-text>2. The computer system according to claim 1, wherein said plurality of in-line electronic switches comprises a first and a second set of in-line electronic switches, wherein said first set of in-line electronic switches couples a first PCI local bus segment to said PCI host bridge and said second set of in-line electronic switches couples a second PCI local bus segment to said host bridge.</claim-text>
      <claim-text>3. The computer system according to claim 2, wherein said first PCI local bus segment includes more than one PCI slots and said second PCI local bus segment includes more than one PCI slots, and wherein when one said set of in-line electronic switches are closed the other said set of in-line electronic switches are open.</claim-text>
      <claim-text>4. The computer system according to claim 3, wherein said PCI host bridge further includes a plurality of input/output buffers, and wherein said bus control logic controls said first and said second sets of in-line switches in response to the location of a master and a target within said first and said second PCI local bus segments.</claim-text>
      <claim-text>5. The computer system according to claim 4, wherein said first set of in-line electronic switches is closed in response to said location of said master being within said first local bus segment and said second set of in-line electronic switches is opened thereby connecting said first local bus segment to said PCI host bridge, whereby a transaction from said master is placed into one of said input/output buffers through one of said PCI Host bridge ports and said PCI host bridge and said peer-to-peer bridge decode an address of said transaction.</claim-text>
      <claim-text>6. The computer system according to claim 5, wherein when said address is a location in said system memory, said PCI host bridge responds as said target and forwards information in said input/output buffer via a separate transaction to said system bus.</claim-text>
      <claim-text>7. The computer system according to claim 6, wherein if said address is for a device coupled to one of said PCI slots within said second PCI local bus segment, said peer-to-peer bridge responds as said target and terminates said transaction as a delayed transaction or posts said transaction when said transaction is a memory write.</claim-text>
      <claim-text>8. The computer system according to claim 6, wherein when said PCI interface is granted access to said first PCI local bus, said switch control logic opens said first set of in-line electronic switches and closes said second set of in-line electronic switches, connecting said second PCI local bus segment to said first PCI local bus and an associated PCI host bridge port and said peer-to-peer bridge completes said separate transaction by sending said forwarded information within said input/output buffers to said PCI device connected at said PCI slot.</claim-text>
      <claim-text>9. The computer system according to claim 6, wherein said PCI host bridge connects a second PCI local bus to said system via said PCI switches along said second PCI local bus, said third set of in-line electronic switches couples a third PCI local bus segment to said PCI host bridge and said fourth set of in-line electronic switches couples a fourth PCI local bus segment to said PCI host bridge, and wherein said arbiter control further controls said third and said fourth sets of in-line switches in response to the locating of a second master and a second target within said third and said fourth PCI local bus segments.</claim-text>
      <claim-text>10. The computer system according to claim 9, wherein said third PCI local bus segment includes more than one PCI slot and said fourth PCI local bus segment includes more than one PCI slot, and wherein when one set of in-line electronic switches are closed the other said set of in-line electronic switches are open.</claim-text>
      <claim-text>11. The computer system according to claim 10, wherein if said address is for a device coupled to one of said PCI slots within said fourth PCI local bus segment, said peer-to-peer bridge responds as said target and terminates said transaction as a delayed transaction or posts said transaction when said transaction is a memory write and said peer-to-peer bridge uses said arbiter control for said second PCI local bus.</claim-text>
      <claim-text>12. The computer system according to claim 11, wherein when said PCI host bridge is granted access to said second PCI local bus, said switch control logic closes said fourth set of in-line electronic switches and opens said third set of in-line electronic switches, connecting said fourth PCI local bus segment to said second PCI local bus and said peer-to-peer bridge completes said transaction in said input/output buffers to said PCI device connected at said PCI slot.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method for supporting multiple Peripheral Component Interconnect (PCI) buses according to claim 13, wherein said method further includes the steps of: attaching more than one PCI peripheral component slots to said first PCI local bus segment;</claim-text>
      <claim-text>and attaching more than one PCI peripheral component slots to said second PCI local bus segment, wherein when one said set of in-line electronic switches are closed the other said set of in-line electronic switches are open.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method for supporting multiple Peripheral Component Interconnect (PCI) buses according to claim 14, wherein said method further includes the steps of: attaching a plurality of input/output buffers and a bus control logic, said bus control logic including address decode, range registers and arbiter control to said PCI host bridge;</claim-text>
      <claim-text>and determining when said first and said second sets of in-line switches are open and closed in conformity with the location of a master and a target within said first and said second PCI local bus segments.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method for supporting multiple Peripheral Component Interconnect (PCI) buses according to claim 15, wherein said method further includes the steps of: determining whether or not said master is located within said first local bus segment; in response to determining said master is located within said first local bus segment, closing said first set of in-line electronic switches and opening said second set of in-line electronic switches, thereby connecting said first local bus segment to said PCI host bridge; placing a transaction from said master into one of said input/output buffers through one of said plurality of ports;</claim-text>
      <claim-text>and decoding an address of said transaction.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method for supporting multiple Peripheral Component Interconnect (PCI) buses according to claim 16, wherein said method further includes the steps of: determining whether or not said address is a location in said system memory;</claim-text>
      <claim-text>and response to determining that said address is a location in system memory responding as said target from said PCI host bridge, and forwarding information in said input/output buffer via a separate transaction to a system via a system interface.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method for supporting multiple Peripheral Component Interconnect (PCI) buses according to claim 17, wherein said method further includes the steps of: determining whether or not said address is for a device coupled to one of said PCI peripheral component slots on said second PCI local bus segment;</claim-text>
      <claim-text>and in response to determining that said address is for a device coupled to one of said PCI peripheral component slots on said second PCI local bus segment, terminating said transaction as a delayed transaction or posting said transaction when said transaction is a memory write.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method for supporting multiple Peripheral Component Interconnect (PCI) buses according to claim 18, wherein said method further includes the steps of: determining whether or not said PCI host bridge is granted access to said first PCI local bus; in response to determining that said PCI host bridge is granted access to said first PCI local bus, opening said first set of in-line electronic switches, and closing said second set of in-line electronic switches, connecting said second PCI local bus segment to said first PCI local bus;</claim-text>
      <claim-text>and completing said transaction in said input/output buffers to said PCI device connected at said PCI peripheral component slot.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. A computer system comprising: a system bus connected to a processor and a system memory; a plurality of Peripheral Component Interconnect (PCI) local buses; a PCI host bridge coupled to said system bus, wherein said PCI host bridge has a plurality of ports each coupled to a particular one of said plurality of PCI local buses, wherein said PCI host bridge contains an internal peer-to-peer bridge whereby transactions may be accomplished between a first one of said plurality of PCI local buses and a second one of said plurality of local buses, and wherein said PCI host bridge contains a bus control logic including an address decoder, range registers and an arbiter control;</claim-text>
      <claim-text>and a plurality of PCI slots connected to said plurality of PCI local buses, wherein at least one said PCI slot shares data with said processor and said system memory, wherein said plurality of PCI local buses comprises a first PCI local bus including a first and a second set of in-line electronic switches controlled by said bus control logic, wherein said first set of in-line electronic switches couples a first PCI local bus segment to said PCI host bridge and said second set of in-line electronic switches couples a second PCI local bus segment to said PCI host bridge, wherein said first PCI local bus segment includes more than one PCI slot and said second PCI local bus segment includes more than one PCI slot, wherein when one said set of in-line electronic switches are closed the other said set of in-line electronic switches are open, wherein said PCI host bridge includes a plurality of input/output buffers and a bus control logic, wherein said bus control logic includes an address decoder, range registers and an arbiter control for controlling said first and said second sets of in-line switches in response to the location of a master and a target within said first and said second PCI local bus segments.</claim-text>
    </claim>
  </claims>
</questel-patent-document>