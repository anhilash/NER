<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06181696B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06181696</doc-number>
        <kind>B2</kind>
        <date>20010130</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6181696</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25419752" extended-family-id="42108318">
      <document-id>
        <country>US</country>
        <doc-number>08904775</doc-number>
        <kind>A</kind>
        <date>19970801</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08904775</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43164740</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>90477597</doc-number>
        <kind>A</kind>
        <date>19970801</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08904775</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010130</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L  12/56        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>56</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04Q  11/04        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>Q</subclass>
        <main-group>11</main-group>
        <subgroup>04</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>370360000</text>
        <class>370</class>
        <subclass>360000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>370398000</text>
        <class>370</class>
        <subclass>398000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>370422000</text>
        <class>370</class>
        <subclass>422000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>379242000</text>
        <class>379</class>
        <subclass>242000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04L-049/30J</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>049</main-group>
        <subgroup>30J</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04Q-011/04S2</text>
        <section>H</section>
        <class>04</class>
        <subclass>Q</subclass>
        <main-group>011</main-group>
        <subgroup>04S2</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-049/3081</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>49</main-group>
        <subgroup>3081</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-2012/563</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>2012</main-group>
        <subgroup>563</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04Q-011/0478</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>Q</subclass>
        <main-group>11</main-group>
        <subgroup>0478</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>11</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>3</number-of-drawing-sheets>
      <number-of-figures>4</number-of-figures>
      <image-key data-format="questel">US6181696</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for controlling network switches</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>BUTLER II GEORGE D</text>
          <document-id>
            <country>US</country>
            <doc-number>5625681</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5625681</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>MORGAN MICHAEL JAMES, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5651059</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5651059</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>WALKER THOMAS G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5664010</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5664010</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>SEGAL NIRANJAN NATH</text>
          <document-id>
            <country>US</country>
            <doc-number>5737404</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5737404</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>COWGILL GEORGE A</text>
          <document-id>
            <country>US</country>
            <doc-number>5768361</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5768361</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>FRITSCHE NORBERT</text>
          <document-id>
            <country>US</country>
            <doc-number>5793761</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5793761</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>HE JINGSHA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5799317</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5799317</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>GUPTA DEV VRAT, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5864542</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5864542</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>CLAYTON JOHN B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5875234</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5875234</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>ONWELLER ARTHUR E</text>
          <document-id>
            <country>US</country>
            <doc-number>5907610</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5907610</doc-number>
          </document-id>
        </patcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Fielding, William S.</name>
            <address>
              <address-1>Vancouver, CA</address-1>
              <city>Vancouver</city>
              <country>CA</country>
            </address>
          </addressbook>
          <nationality>
            <country>CA</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Plater, Christopher R.</name>
            <address>
              <address-1>Vancouver, CA</address-1>
              <city>Vancouver</city>
              <country>CA</country>
            </address>
          </addressbook>
          <nationality>
            <country>CA</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Seaman, Kenneth A.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Kizou, Hassan</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      An apparatus for controlling network switches which includes a central network controller node having a call task for booking and executing calls by setting up the switches that interconnect a first terminal and a second terminal and a switch master task for receiving commands to control all of the switches in the network, maintaining status information for all of said switches and distributing requests for particular connections.
      <br/>
      A switch controller task is coupled to the switch master task for converting input instructions to a generic switch into commands for hardware switches.
      <br/>
      In response to a client request, the central network controller communicates with the switch controller task to convert commands for the generic switch to commands for the hardware switch and to create a connection between the first terminal and the second terminal.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>RELATED APPLICATIONS</heading>
    <p num="1">The following patent applications are related to the application and are incorporated herein by reference:</p>
    <p num="2">
      --
      <br/>
      --      Title                       Serial No.  Filing Date
      <br/>
      --      Method and Apparatus For    08/904,773  8/1/97
      <br/>
      --      Controlling Elementary
      <br/>
      --      Stream Data Flow
      <br/>
      --      Multiplexer for Multiple    08/904,813  8/1/97
      <br/>
      --      Media Streams
      <br/>
      --      Frame Buffer for Multimedia 08/904,819  8/1/97
      <br/>
      --      Terminal
      <br/>
      --      Isolation of Multimedia     08/904,778  8/1/97
      <br/>
      --      Signals for Transmission and
      <br/>
      --      Processing Within a Multimedia
      <br/>
      --      SN 08/904,812
      <br/>
      --      Terminal
      <br/>
      --      Internet Application Access 08/905,197  8/1/97
      <br/>
      --      Server Apparatus and Method
      <br/>
      --      Network Communication       08/904,939  8/1/97
      <br/>
      --      Services Method and Apparatus
      <br/>
      --      Method and Apparatus for    08/904,775  8/1/97
      <br/>
      --      Controlling Network Switches
      <br/>
      --      Method and Apparatus for    08/904,774  8/1/97
      <br/>
      --      Maintaining Directory
      <br/>
      --      Services for a Video
      <br/>
      --      Transmission Network
      <br/>
      --      Method and Apparatus for    08/904,716  8/1/97
      <br/>
      --      Controlling Access in a
      <br/>
      --      Video Distribution Network --.
    </p>
    <heading>FIELD</heading>
    <p num="3">
      The present invention relates to a network switching system for controlling analog and digital switches utilizing an architecture that allows control by a client through a central network controller to one or more switch controllers.
      <br/>
      More particularly, the present invention relates to a method and apparatus for controlling network switches which is independent of the type and manufacture of the switch.
    </p>
    <heading>BACKGROUND</heading>
    <p num="4">
      Various types of networks involving switches are in common use such as public and private telephone networks, local area networks (LAN) and wide area networks (WAN).
      <br/>
      LAN and WAN networks are digital and generally use asynchronous transfer mode (ATM) signals whereas telephone networks typically use analogue or synchronous digital signals (SONET).
      <br/>
      In ATM systems, the transmitted signals themselves carry the information that defines the destination of its payload.
      <br/>
      Similarly, in telephone systems, either analogue multitone signals define the number being called which is used to set up the connection or, for digital lines, coded frames of data are transmitted synchronously to define the desired connection.
      <br/>
      In other networks, such as token ring systems, data is passed around sequentially from one station to the next until the header information in that cell is recognized.
      <br/>
      In telephone networks, a host of central offices control communications with groups of subscribers either on analog lines or digital lines.
      <br/>
      Transmissions can take place between subscribers under the control of the same central office or between subscribers controlled by different central offices.
    </p>
    <p num="5">
      Broadband telecommunications networks involve networks containing hardware switches of various types and, for a given type, of various manufacturers.
      <br/>
      Such a network could contain frame, ATM and/or baseband analogue switches.
      <br/>
      For example, the switches in one city could be primarily analogue switches while those in another city could contain ATM switches or a mixture of ATM and analogue switches.
      <br/>
      In addition, the ATM switches could be made by various manufacturers as could the analogue switches.
      <br/>
      In general switches of one manufacturer are controlled differently by different protocols from those of other manufacturers and, in addition, could be configured differently.
      <br/>
      In order to set up a call the switch controller would have to know the protocol for each of the different switches involved.
      <br/>
      Moreover, if a given switch were changed to a switch of a different manufacturer, the protocol for that switch and its configuration, i.e. by a serial port or parallel ports, would have to be changed.
      <br/>
      Obviously, such a system is complex and inefficient.
    </p>
    <p num="6">In order for a call from one location to be connected to another location the system must be able to control each different make and type of switch in the path.</p>
    <p num="7">Obviously, there is a need for a simpler, switch independent method of setting up such a call.</p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="8">
      According to the invention there is provided an apparatus for controlling network switches which includes a central network controller node having a call task for booking and executing calls by setting up the switches that interconnect a first terminal and a second terminal and a switch master task for receiving commands to control all of the switches in the network, maintaining status information for all of said switches and distributing requests for particular connections.
      <br/>
      A switch controller task is coupled to the switch master task for converting input instructions to said generic switch into commands for hardware switches.
      <br/>
      In response to a client request, the switch master task communicates with the switch controller task to convert commands for the generic switch to commands for the hardware switch and to create a connection between the first terminal and the second terminal.
    </p>
    <p num="9">Preferably, the network is a broadband telecommunications network.</p>
    <p num="10">According to another aspect of the invention there is provided a method of controlling hardware switches in a network, which includes generating a generic switch and inputting control information into the generic switch so as to request a particular hardware connection, and converting the control information into hardware specific instructions so as to cause hardware switches to interconnect a first terminal to a second terminal.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="11">
      Further features and advantages will be apparent from the following detailed description, given by way of example, of a preferred embodiment taken in conjunction with the accompanying drawings, wherein:
      <br/>
      FIG. 1 is a schematic block diagram of the architecture of a broadband switching network;
      <br/>
      FIG. 2 is a schematic diagram of a broadband switching network according to the present invention;
      <br/>
      FIG. 3 is a schematic diagram of a broadband switching network which includes a pair of switch controller, associated hardware switches and terminals; and
      <br/>
      FIG. 4 is a schematic diagram of an abstract or generic switch.
    </p>
    <heading>DETAILED DESCRIPTION WITH REFERENCE TO THE DRAWINGS</heading>
    <p num="12">
      Referring to FIG. 1 a typical broadband switching network has a number of local access switches 18 in various cities.
      <br/>
      For example, there may be two terminals 20 and 22 in Montreal 10 connected to a local access switch 18 in that city with connections to Toronto 12, Edmonton 14 and Vancouver 16 with one or more backbone switches (not shown) which are large switches that connect local access switches 18 between cities.
      <br/>
      Another pair of terminals 26 and 28 connect to the local access switch 18 in Vancouver 16.
    </p>
    <p num="13">
      Should a caller in Montreal 10 via terminal 20 wish to call a terminal 26 in Vancouver 16 it is necessary to set up all of the switches so that the caller has a way of getting through to terminal 26 in Vancouver 16.
      <br/>
      Since different switches are controlled in different ways with different protocols and different configurations, it would be necessary for the central network controller (not shown) which controls the local access switch 18 in Montreal 10 to know the protocol and configuration of each switch in the path to the terminal 26.
    </p>
    <p num="14">
      Referring to FIG. 2 there is shown an architecture which allows the characteristics of each switch in a system to be insulated from the rest of the network.
      <br/>
      In this case a central network controller node (cnc) 34 defines a group of cooperative tasks whose purpose is to control the network.
      <br/>
      The central network controller node 34 contains a set of software called a call task 37 which is responsible for both scheduling calls and determining if the resources are available for a particular call to take place at a particular time.
      <br/>
      It is also responsible for executing calls, for advising the terminals at either end that they are involved in a call and for setting up the switches that it has under its control.
      <br/>
      The call task 37 acts as a client of the switch control subsystem providing the instructions to the switch master task 36 to set up a generic switch.
      <br/>
      The cnc 34 also contains a switch master task 36 which provides a single point of access for clients of the switch control subsystem.
      <br/>
      It receives commands to control all of the switches in the network and maintains status information for all of them.
      <br/>
      It distributes requests and performs retries on all failed connections.
      <br/>
      The switch master task 36 is also responsible for maintaining the current state of all of the network switches, so that these can be restored to their proper state in the case of a loss of communications or switch-wide failure.
    </p>
    <p num="15">
      Each switch controller node 38 is responsible for the task of controlling one of the network switches.
      <br/>
      It contains a switch controller task 39 whose primary mission is the conversion of generic switch control commands into commands that control a particular kind of switch hardware.
      <br/>
      The switch controller task 39 is responsible for doing surveillance over the switches it controls, and reporting failures to the switch master task 36 using generic switch status reports.
      <br/>
      The management user interface within the switch controller node 38 is responsible for presenting a network operator with a view of the status of the switches which are controlled by a switch controller task 39.
      <br/>
      The switch controller task 39 is responsible for providing status updates to the management user interface.
      <br/>
      The switch controller task 39 is responsible for configuring and controlling encoder/decoder (codec) units 41 or terminals which are attached to the switch it controls.
      <br/>
      Codec 41 can convert a signal from one form to another by coding and decoding it.
      <br/>
      For example, a codec can convert between MPEG II video and analogue baseband video.
      <br/>
      Thus, a codec 41 would be used in going from analogue to digital in a mixed environment of analogue switches and digital switches.
      <br/>
      Codecs 41 may or may not coexist with a switch or may exist on some ports and not on others.
    </p>
    <p num="16">
      Referring to FIG. 3, a more expanded schematic of the system involves the central network switching controller node 34 and call task 37 receiving a request from a client 30 to create a generic switch.
      <br/>
      The model that the call task 37 has is one having switch controller nodes 38A and 38B.
      <br/>
      Switch controller task 39A of switch controller node 38A controls a hardware switch 42 to which there is coupled to a port 3 a terminal 46 and switch controller task 39B of switch controller node 38B controls a hardware switch 44 to which there is coupled to a port 7 a terminal 55.
      <br/>
      Port 4 of hardware switch 42 is connected to port 6 of hardware switch 44.
      <br/>
      Thus, in order to complete the call the switch master task controller 36 and call task 37 need to cause an internal connection between ports 3 and 4 of switch 42 and between ports 6 and 7 of switch 44.
    </p>
    <p num="17">
      The switch master task 36 is responsible for distributing the commands to the correct locations so as to make the desired switching operation take place.
      <br/>
      It is the switch controller task 39A that must translate the commands from the central network controller node 34 into a proper command that causes the hardware to make the connection.
      <br/>
      The commands to hardware switch 42 could be totally different from those to hardware switch 44.
    </p>
    <p num="18">
      Referring to FIG. 4 the generic or abstract switch 50 is modeled as a black box device with a number of input ports 54 and output ports 56.
      <br/>
      Each such switch is uniquely identified within the network, and each of the ports 54 and 56 are uniquely defined within the switch 50.
      <br/>
      The switch has the ability to make a connection between any of the output ports 56 to any one of the input ports 54.
    </p>
    <p num="19">
      The following are the C-language declarations for the data structures used to represent the abstract switch 50.
      <br/>
      This structure represents a particular connection.
      <br/>
      The input and output ports are the ports on the switch.
      <br/>
      The portState, callID, and callType information provide state and call information for the connection.
    </p>
    <p num="20">
      --
      <br/>
      -- /*
      <br/>
      -- * A) Name:     SWI_CONN_T
      <br/>
      -- * B) Description: Switch connection information
      <br/>
      -- * C) Notes:
      <br/>
      -- *                  callType is a member of the enumeration:
      <br/>
      -- *                  nif_call_type_enum, which is generated from
      <br/>
      -- *                  nif_res_msg.x
      <br/>
      -- *
      <br/>
      -- */
      <br/>
      -- typedef struct
      <br/>
      -- +
      <br/>
      --  U1_T           inputPort;
      <br/>
      --  U1_T           outputPort;
      <br/>
      --  U2_T           portState;
      <br/>
      --  U4_T           callID;
      <br/>
      --  U2_T           callType:
      <br/>
      -- } SWI_CONN_T;
    </p>
    <p num="21">
      This structure collects a list of connections together.
      <br/>
      Such a list of connections describes the dynamically changing connection state of the abstract switch.
    </p>
    <p num="22">
      --
      <br/>
      -- /*
      <br/>
      -- * A) Name:     SWI_MATRIX_T
      <br/>
      -- * B) Description: Switch matrix information
      <br/>
      -- */
      <br/>
      -- typedef struct
      <br/>
      -- +
      <br/>
      --  U1_T           nPorts;
      <br/>
      --  SWI_CONN_T     port � SWI_MAX_SIZE + 1�;
      <br/>
      -- } SWI_MATRIX_T;
    </p>
    <p num="23">
      This structure contains the static portion of a switch definition.
      <br/>
      It includes information about the switch's ID, its state, as well as polling related information.
    </p>
    <p num="24">
      --
      <br/>
      -- /*
      <br/>
      -- * A) Name:     SWI_DEFN_T
      <br/>
      -- * B) Description: Switch definition
      <br/>
      -- */
      <br/>
      -- typedef struct
      <br/>
      -- +
      <br/>
      --  U2_T       id;           /* switch ID */
      <br/>
      --  SWI_STATE_T swiState;     /* switch state */
      <br/>
      --  U4_T       pollTimeout;  /* time in seconds to poll switch */
      <br/>
      --  U2_T       timeoutLength; /* time to wait for a switch reply */
      <br/>
      --  SWI_LEVEL_T swiLevel;     /* Level to use for connections */
      <br/>
      -- } Swi_DEFN_T;
    </p>
    <p num="25">This structure combines the static switch definition information together with the dynamic portion to make a complete abstract switch definition.</p>
    <p num="26">
      --
      <br/>
      -- /*
      <br/>
      -- * A) Name:     SWI_T
      <br/>
      -- * B) Description: Switch definition
      <br/>
      -- */
      <br/>
      -- typedef struct
      <br/>
      -- +
      <br/>
      --  SWI_DEFN_T   defn;         /* Switch defn */
      <br/>
      --  SWI_MATRIX_T matrix;       /* Switch Matrix */
      <br/>
      -- } SWI_T;
    </p>
    <p num="27">The following operations can be performed by a client on an abstract switch described by the above structures:</p>
    <p num="28">
      A.
      <br/>
      Create the switch.
      <br/>
      This is how the static portion of the switch definition is set up.
    </p>
    <p num="29">
      B. Query for switch information.
      <br/>
      This is the way a client of the switching subsystem retrieves a copy of the switch information in a SWI_T.
    </p>
    <p num="30">
      C. Make a connection or disconnection.
      <br/>
      This is how the client makes connections on the generic switch.
    </p>
    <p num="31">
      Creating Switches
      <br/>
      1.
      <br/>
      The client calls the swi_create_switch()function.
      <br/>
      This causes a message to be sent to the switch control subsystem indicating the switch to be created.
      <br/>
      2. The switch master receives the request and determines the switch controller associated with the abstract switch in question.
      <br/>
      3. The switch master creates an entry for the new switch in the list of active switches it maintains.
      <br/>
      4. The request to create the switch is forwarded to the switch controller.
      <br/>
      5. The switch controller receives the request to create the switch and stores the associated configuration information in the list of active switches it maintains.
      <br/>
      6. The switch controller attempts to open the communications channel it will use to control the physical switch that corresponds to the abstract switch described in the creation request.
    </p>
    <p num="32">
      Making Connections
      <br/>
      1.
      <br/>
      The client calls the swi_set_conns()function.
      <br/>
      This causes a message to be sent to the switch control subsystem indicating the switch to be used and the connection(s) to be made.
      <br/>
      2. The switch master receives the request and forwards it to the appropriate switch controller.
      <br/>
      3. The switch controller receives the command and processes each of the connections(s) as follows:
      <br/>
      4.
      <br/>
      Each connection is expressed as a command to connect an input port to an output port on the abstract switch.
      <br/>
      The switch controller must map the abstract switch ports onto the corresponding physical ports of the real switch.
      <br/>
      On a typical analog switch, this mapping is such that port 0 of the abstract switch corresponds to the first port on the physical switch, port 1 on the abstract switch to the second port, and so on.
      <br/>
      In the case of ATM switch, each abstract port is typically mapped to a virtual path and virtual channel pair on a physical port, so the mapping is typically described in the switch controller's configuration.
      <br/>
      5. Once the physical ports have been determined, the switch controller issues the command which connects those ports together on the switch it controls.
      <br/>
      6. The switch controller obtains the result of the connection attempt, and converts the switch-specific result report into the abstract.
      <br/>
      7. Once all of the connection request have been processed, a reply is sent to the switch master indicating which connection requests were successful.
      <br/>
      This is done using the state information associated with each connection of the abstract switch.
      <br/>
      8. The switch master forwards the report to the client.
    </p>
    <p num="33">As a concrete example consider the switch of Pro-Bel of Berkshire, England, a well known switch manufacturer.</p>
    <p num="34">
      Processing a Create message by the Pro-Bel switch controller
      <br/>
      1.
      <br/>
      The request to create the switch arrives.
      <br/>
      2. The switch controller receives the request to create the switch and stores the associated configuration information in the list of active switches it maintains.
      <br/>
      3. The switch controller opens the serial device which it uses to exchange messages with the switch.
      <br/>
      4. The switch controller sends a "RS" message to the switch to cause it to reset.
    </p>
    <p num="35">
      Processing a Connect message by the Pro-Bel switch controller
      <br/>
      1.
      <br/>
      The switch controller receives a message indicating that it should make a series of connections.
      <br/>
      The switch controller processes each connection as follows:
      <br/>
      2.
      <br/>
      Convert the input and output port numbers from the abstract switch's 0-based numbering scheme to the physical hardware's 1-based scheme by adding 1 to the port numbers.
      <br/>
      3. For each connection to be made, the switch controller sends a "S,A,o,i" command, where "o" and "i" are replaced with the physical output and input port numbers respectively.
      <br/>
      4. Examine the reply from the switch to ensure that none of the error messages are returned.
      <br/>
      5. Set the status for the current connection in the reply message to "OK" if no error message was returned, or to "Damaged" if an error message was returned.
      <br/>
      6. When all connections have been processed, return the result to the switch master.
    </p>
    <p num="36">The code for the switch controller 38 and adapter code that allows the latter to control switches of the specific manufacturers of Phillips Broadcast Telecommunications System (BTS) and Pro-Bel Limited, of Berkshire, England is incorporated into the present application and marked as Schedule A.</p>
    <p num="37">
      Accordingly, while this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense.
      <br/>
      Various modifications of the illustrative embodiments, as well as other embodiments of the invention, will be apparent to persons skilled in the art upon reference to this description.
      <br/>
      It is therefore contemplated that the appended claims will cover any such modifications or embodiments as fall within the true scope of the invention.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>An apparatus for controlling network switches comprising:</claim-text>
      <claim-text>(a) a central network controller node having a call task for booking and executing calls by setting up the switches that interconnect a first terminal and a second terminal and a switch master task for receiving commands to control all of the switches in the network, maintaining status information for all of said switches and distributing requests for particular connections; (b) a switch controller task for converting control commands for a generic switch into commands that control a particular kind of switch hardware wherein said generic switch includes a plurality of input ports and a plurality of output ports and a conversion means for translating manipulations of said generic switch into appropriate control commands for a hardware switch; wherein in response to a client request, the central network controller communicates with said switch controller task to convert commands for a generic switch to commands for said hardware switch and to create a connection between said caller and said call destination.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. An apparatus according to claim 1, wherein said hardware switch includes an ATM switch.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. An apparatus according to claim 1, wherein said network is a broadband telecommunications network.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. An apparatus for controlling broadband telecommunications network switches comprising: (a) a central network controller node having a call task for booking and executing calls by setting up the switches that interconnect a first terminal and a second and a switch master task for receiving commands to control all of the switches in the network, maintaining status information for all of said switches and distributing requests for particular connections; (b) a plurality of switch controller tasks for converting control commands for a generic switch into commands that control associated hardware switches, wherein said generic switch has a plurality of input ports and a plurality of output ports and a converter operative to reconfigure connections between said input ports and said output ports to translate the control commands for said generic switch into commands for hardware switches coupled to an associated switch controller task so that the switch controller tasks, in response to a client request to the central network controller, converts commands for the generic switch to commands for said hardware switches to create a connection between said a first of a plurality of terminals and a second of said plurality of terminals.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. An apparatus according to claim 4, wherein said hardware switches include analogue switches and digital switches.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. An apparatus according to claim 5, wherein said digital switches include ATM switches.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A method of controlling hardware switches in a network, comprising: (a) generating generic switch which has a plurality of input ports and a plurality of output ports and a converter operating to reconfigure connections between said input ports and said output ports into appropriate connections for any specific hardware switch; (b) inputting control information into said generic switch so as to request hardware connections for specific ones of the appropriate hardware switches;</claim-text>
      <claim-text>and (c) converting said control information into hardware specific instructions so as to cause the hardware switches to interconnect a first terminal to a second terminal.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A method according to claim 7, wherein said control information includes information which when converted causes codecs to interface between analogue and digital signals in said network.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A method according to claim 8, wherein said switches have a plurality of different protocols and different configurations.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A method according to claim 7, wherein said switches include both analogue and digital switches.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A method according to claim 10, wherein said switches are ATM switches.</claim-text>
    </claim>
  </claims>
</questel-patent-document>