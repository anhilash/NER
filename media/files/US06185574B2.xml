<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185574B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185574</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185574</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="21862152" extended-family-id="1380897">
      <document-id>
        <country>US</country>
        <doc-number>08979657</doc-number>
        <kind>A</kind>
        <date>19971126</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08979657</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>1433912</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>97965797</doc-number>
        <kind>A</kind>
        <date>19971126</date>
        <priority-active-indicator>N</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08979657</doc-number>
      </priority-claim>
      <priority-claim kind="national" sequence="2">
        <country>US</country>
        <doc-number>3192696</doc-number>
        <kind>P</kind>
        <date>19961127</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="2">
        <doc-number>1996US-60031926</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/30        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  11/14        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>14</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F  11/32        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>32</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>G06F  11/34        20060101A N20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>34</subgroup>
        <classification-value>N</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <further-classification sequence="1">
        <text>707999102</text>
        <class>707</class>
        <subclass>999102</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>707999200</text>
        <class>707</class>
        <subclass>999200</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>707999202</text>
        <class>707</class>
        <subclass>999202</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>707E17010</text>
        <class>707</class>
        <subclass>E17010</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30126</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30126</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/1446</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>1446</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20141001</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/32</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>32</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/3476</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>3476</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30233</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30233</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30235</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30235</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="7">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99933</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99933</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="8">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99943</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99943</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="9">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99953</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99953</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>109</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>24</number-of-drawing-sheets>
      <number-of-figures>26</number-of-figures>
      <image-key data-format="questel">US6185574</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Multiple display file directory and file navigation system for a personal computer</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>CHEW CHEE H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5680559</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5680559</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>CROUSE DONALD D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5764972</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5764972</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>PROVINO JOSEPH E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5778384</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5778384</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>BADGER LEE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5819275</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5819275</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>LASSER CLIFF, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5897638</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5897638</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>SCHWARTZ MAYER D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5047918</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5047918</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>AUSLANDER MARC A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5129088</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5129088</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>HENDRICKS DAVID, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5313646</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5313646</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>SAETHER CHRISTIAN D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5333315</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5333315</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>COHEN-LEVY LEON</text>
          <document-id>
            <country>US</country>
            <doc-number>5355497</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5355497</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>SUGITA YUMIKO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5361349</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5361349</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>THOMPSON BRUCE A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5463772</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5463772</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="13">
          <text>YOSHIDA KOJUN</text>
          <document-id>
            <country>US</country>
            <doc-number>5504863</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5504863</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="14">
          <text>ATSATT BRYAN P, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5504892</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5504892</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="15">
          <text>LEWAK JERZY, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5544360</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5544360</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="16">
          <text>KRAKAUER ARNO S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5553285</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5553285</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="17">
          <text>KHALIDI YOUSEF A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5561799</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5561799</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="18">
          <text>WILCOX JONATHAN J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5568639</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5568639</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="19">
          <text>KISH WILLIAM A</text>
          <document-id>
            <country>US</country>
            <doc-number>5603019</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5603019</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="1">
          <text>"Inside Windows(TM) 95", Adrian King, Microsoft Press, A Division of Microsoft Corporation, 1994.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="2">
          <text>"Inside the Windows 95 File System", Stan Mitchell, O'Reilly and Associates, Inc., May, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>"Iomega Approves Citadel Technology's C:\More! Management Software for IomegaReady Software Program", Company Press Release, Aug. 20, 1997.</text>
        </nplcit>
      </citation>
    </references-cited>
    <related-documents>
      <related-publication>
        <document-id>
          <country>US</country>
          <doc-number>60/031926</doc-number>
          <date>19961127</date>
        </document-id>
      </related-publication>
    </related-documents>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>1Vision, Inc.</orgname>
            <address>
              <address-1>Loveland, CO, US</address-1>
              <city>Loveland</city>
              <state>CO</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>1VISION</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Howard, David E.</name>
            <address>
              <address-1>Loveland, CO, US</address-1>
              <city>Loveland</city>
              <state>CO</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Gandee, John J.</name>
            <address>
              <address-1>Windsor, CO, US</address-1>
              <city>Windsor</city>
              <state>CO</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Godwin, Kurt E.</name>
            <address>
              <address-1>Loveland, CO, US</address-1>
              <city>Loveland</city>
              <state>CO</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Santangelo Law Offices, P.C.</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Alam, Hosaln T.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      The parallel virtual directory system can extend the native file system to provide a superior method for organizing a computer system's physical storage devices or locations.
      <br/>
      These can include hard disks and removable media or remote storage locations such as on the Internet.
      <br/>
      Interceptor modules can monitor all file or memory changes such as creations, writes and deletes to the native file system and can pass this information to the parallel virtual directory system.
      <br/>
      The parallel virtual directory system may be accessed through the native fie system methods allowing users to view their file system as it existed at any point in time, including removable media that is no longer present in the system.
      <br/>
      Further, via the parallel virtual directory system and the Interceptor modules, users can access any file in any of the monitored file systems.
      <br/>
      The parallel virtual directory system may be implemented using database technology thereby allowing multiple views of the parallel virtual directory system to be offered to the user based on their needs and can thus be used to ease navigation through the file system.
      <br/>
      Further, a set of information management processes can run at the application level providing data management services such as backup, archiving, recording of digital video programming, or even controlled playback or utilization of that information.
      <br/>
      The information management processes can configure the parallel virtual directory system to capture the information they require and use the gathered information to efficiently complete their data management functions.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <p num="1">
      This application claims the benefit of pending U.S. application Ser.
      <br/>
      No. 60/031,926, entitled "Parallel Global Directory and File Navigation System" and filed on Nov. 27, 1996 now abandoned.
    </p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      Generally, this invention relates to the field of enhanced organization of computer memory or file information and processes for managing the computer memory or file information at other than simply the application program level.
      <br/>
      It may be used to overcome the usability barriers associated with the coupling and uncoupling of storage devices to a computer system.
      <br/>
      Specifically, the invention focuses on methods to gather information about hierarchical directories on physical file storage devices, the organization or manipulation of directory information into a global virtual directory system that can serve as a master directory for a user and processes that more efficiently manage system data, regardless of application, based on information obtained from the virtual directory system.
    </p>
    <p num="3">
      Over the years, the hierarchical directory systems that organize computer system data storage have been enhanced to make them more powerful and easier for the end user to understand.
      <br/>
      Typically these improvements have focused on a shift from a textually oriented system to systems that are graphically oriented (for example, the shift from a DOS type of directory listing to a graphical directory display of files as provided by products like Microsoft (tm)  Windows (tm)  for Workgroups ver. 3.11. This approach has been directed at increasing the users understanding of the files available, but has not solved the problems caused by a rigid directory structure nor the difficulty in locating files that have been removed from the system or that are located in the maze of subdirectories.
    </p>
    <p num="4">
      The hierarchical directory systems are intended to allow users to organize their data in ways that makes it easier for them to understand.
      <br/>
      This is done by creating directories, or folders, for specific classes of data such as word processing documents or computer programs.
      <br/>
      Once a directory structure for the storage system is defined it becomes a tedious and difficult task to reorganize the directory structure.
      <br/>
      Also, files of the same name cannot be stored within the same directory due to the common need for files to be differentiated by unique names even though it is common for users to desire to save copies of the same file at different points in the evolution of the file.
      <br/>
      For example, it would be very convenient if a writer could keep the same file name for an article and differentiate the various versions of the article by the date and time of creation of each version rather than having to use minor variations on the original name.
    </p>
    <p num="5">
      Perhaps surprisingly, the concept of flexibly organizing a hierarchial directory system has typically been utilized at only the application level; that is, it has been applied only in separately utilized programs which may act independently of other programs and not as one which applies to all programs.
      <br/>
      For instance, an application level process which addresses a user need for the ability to easily re-categorize, filter and search files is identified in U.S. Pat. No. 5,544,360 which describes an application program that allows the user to filter and categorize the hierarchical directory system to ease finding files.
      <br/>
      The limitation of this invention is that it is an application program, or file manager, that can be used as a browser by the user but not directly accessed by other programs in the same manner that the native hierarchical directory system can be accessed.
      <br/>
      Hence, a second application program such as a word processor would not be able to utilize the sorted information--only the original application program could.
      <br/>
      Hence, there is a need for a configurable directory system that can be configured and made accessible at the operating system level such that all application programs can utilize the configured information.
    </p>
    <p num="6">
      A common constraint of the traditional or conventional directory hierarchy is that it is oriented towards a hierarchical starting point of physical storage device, be it a hard disk, floppy disk, high capacity removable disk, tape, remote network device, or other storage media.
      <br/>
      Due to the coupling of a physical device to the directory hierarchy the user must organize their data in such a way that it fits the physical parameters of the selected storage medium.
    </p>
    <p num="7">
      Various methods have been employed to try to decouple the physical nature of the storage device from the directory hierarchy.
      <br/>
      It is relatively common in network environments to present a file server as a single storage entity even though it is composed of multiple hard disks (disclosed in U.S. Pat. No. 5,129,088).
      <br/>
      Or, a new file system can be created as in U.S. Pat. No. 5,333,315 to create a file system that is based purely on the hierarchy of the directory name space and not that of physical device.
      <br/>
      Again in the network setting, a method called hierarchical storage management is employed that has the primary purpose of freeing up storage space on a physical device, such as a hard disk, by migrating files to another storage device, such as a tape drive, and leaving a place holder for the file so that it appears to the user that the file is still on primary storage.
      <br/>
      When the place holder file is accessed, the hierarchical management system retrieves the file from secondary storage (disclosed in U.S. Pat. No. 5,564,037).
      <br/>
      This same technique has been employed on a desktop computer using the desktop computer's local storage devices.
      <br/>
      These techniques allow the user to treat multiple storage devices of dissimilar nature as a single device.
      <br/>
      Such systems, however, only offer the user limited organizational control over the data.
      <br/>
      They do not offer the full ability to manipulate the file system information as does the present invention and are often limited to merely migrating data to secondary storage devices.
    </p>
    <p num="8">
      With the recent advent of low cost, high capacity removable storage, and the ability to store data remotely on the Internet, it is becoming increasingly difficult for the user to organize their data and to recall where their data is located.
      <br/>
      A 100 MB removable disk can store hundreds or thousands of data files.
      <br/>
      Likewise, a remote storage site on the Internet used for archiving might have thousands of a user's data files.
      <br/>
      Hence, the sheer volume of files that can exist on individual directories often makes it a very difficult task to find a stored file without traversing through hundreds of subdirectories.
      <br/>
      In the case of removable disks a user may have ten or more disks each with hundreds of files.
      <br/>
      Very clearly it becomes difficult to understand what file is stored where.
      <br/>
      Furthermore, the need for removable storage, or remote storage is increasing rapidly due to the easy availability of data on the Internet and the shift towards digitized video information (e.g., movies stored as digital information that can then be shown on your computer) which consumes great amounts of computer storage.
      <br/>
      Hence, there is an ever-increasing need for a directory system that can keep track of all of these files on a single database that is accessible to an operating system.
    </p>
    <p num="9">
      In addition, one characteristic that high capacity removable storage, for example, has is that if the disk is removed from the computer system or if the Internet connection is not active the user may not be able to determine which files are stored on the disconnected device until the disconnected device is reconnected to the computer system.
      <br/>
      Essentially, these conventional directories are transient in nature since their information is lost to the system when the memory devices are disconnected or removed from the system.
      <br/>
      Hence, there is a need for a directory system that maintains directory information that a user of a computer system (i.e., a computer operator) can utilize even when the storage media is not coupled to the computer system.
    </p>
    <p num="10">
      Also, while some large computer systems have been able to enhance file directory capabilities, such capabilities have been sorely lacking for unitary computer systems.
      <br/>
      Hence, the overwhelming majority of computer users who have standalone personal computers, which might also be connectable to a larger computer system, have had a need for a system that can provide the unique file management and tracking capabilities mentioned.
    </p>
    <p num="11">
      Several key problems still exist with conventional directory structures.
      <br/>
      The first of these is the somewhat rigid nature of the directory structure once such a structure is defined; which, for example requires that unique file names be used as the identifier within a directory.
      <br/>
      A second problem is the somewhat arbitrary organizational barrier that is presented by the coupling of physical storage devices and their related sizes to the hierarchical directory structures commonly used in computer storage; which for example, limits the number of files stored in a directory by the storage size of the physical storage size rather than permitting the user to include additional files whose file data would exceed the physical storage limitations of the physical storage device.
      <br/>
      A third problem is the transient nature of the hierarchical directory structure encountered when using removable or remote storage; which, for example, is often the result of the directory information for a storage medium only being present when the storage medium is connected to the system.
      <br/>
      These problems make it difficult for both computer users and data management programs to organize and efficiently work with a computer file system, if at all.
    </p>
    <p num="12">
      While there have been a number of attempts to solve these problems, in general the attempts have filed to address them from a perspective which present embodiments of the invention realized.
      <br/>
      Importantly, the present invention arrives at its solutions in manners which maintain compatibility and accessibility of a native file directory system.
      <br/>
      The new file system presented by several embodiments of the invention does not necessary replace the native file system that the end user has selected; but rather, it is capable of working in concert with the native file system.
      <br/>
      In this manner, it can provide, for example, a file system for use by both the operating system of the computer system and application programs of the computer system.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="13">
      The present invention includes a variety of aspects which may be selected in different combinations based upon the particular needs being addressed.
      <br/>
      The first aspect of the invention is that it in no way interferes with the current operation of the computer system's hierarchical directory structures or coupling to physical file storage devices.
      <br/>
      The end user may continue to use the file storage system in the same fashion to which they have become accustomed.
      <br/>
      In addition, application programs may continue to use the file storage system without modification.
      <br/>
      However, various components of the virtual directory and navigation system can seamlessly link with the operating system of the computer to provide a parallel method for organizing, accessing and maintaining the computer system's storage.
      <br/>
      In addition, this capability can be provided for a unitary computer system, such as a personal computer that can operate as a standalone unit.
    </p>
    <p num="14">
      First, a set of active processes can be used to traverse a native file system's directory hierarchy and relay the directory information to the virtual directory system for organization and permanent storage (e.g., traversing the directory of the hard drive on a personal computer and copying the directory information to the virtual directory system).
      <br/>
      Then, Interceptor modules can be used to link with the native file system's I/O procedures to passively intercept changes being made to the native file system as those changes occur.
      <br/>
      This might be done for all physical file storage devices of the computer system and regardless of the application program being run.
      <br/>
      The Interceptor modules then can relay the changes to the virtual directory system for organization and permanent storage.
      <br/>
      Using this method the native file system's hierarchical directory can be maintained at the same time that a parallel virtual directory system is built and updated.
    </p>
    <p num="15">
      Another feature of the invention is that when a new piece of removable media is inserted into the computer system, or a remote storage site is connected to the computer system, the Interceptor modules can detect the coupling of newly mounted media to the system, actively read the directory structures of the mounted media, and relay the directory structures' information to the virtual directory system.
      <br/>
      Changes to the directory information of the mounted media can be detected and transferred to the virtual directory system.
    </p>
    <p num="16">
      An important benefit of the invention is that the virtual directory system also can connect to the native file system of the computer system in such a way that the virtual directory system appears to be a physical storage device.
      <br/>
      However, it has the advantage that if a user elected to the virtual directory system could represent all of the files contained on all of the physical file storage devices connected to the computer system.
      <br/>
      Because the files stored on the physical storage devices can be represented in the virtual directory system and because the virtual directory system has among its characteristics the qualities of a relational database, the file information for the various files can be reorganized, reconfigured, or searched easily.
      <br/>
      These features allow the user greater flexibility in how files are viewed and how the user finds data.
      <br/>
      Additionally, the database can overcome the requirement of unique file names, as imposed by traditional hierarchical directory systems.
      <br/>
      Multiple instances of a given file name can now be presented in the same directory with the uniqueness of the file data determined by the time the file was modified, the media it was stored on, or some other file characteristic.
    </p>
    <p num="17">
      When a user accesses a file via the virtual directory system the virtual directory system can retrieve the file from the appropriate storage device via the Interceptor modules.
      <br/>
      If the user accesses through the virtual directory system a file that is not on-line because the media is not mounted (i.e., connected to the computer system) or the network connection is not active, the virtual directory system can automatically load the media if it can be done via mechanized means, prompt the user to assist in loading the required media, or even establish a connection to the service having the media.
      <br/>
      This removes the burden from the user of needing to search multiple pieces of media to find the desired file.
      <br/>
      Similarly, when a user stores a file via the virtual directory system, the virtual directory system can store the file in a preselected storage location, prompt the user for storage location instructions, or assist, as mentioned above, in coupling the appropriate storage device to the computer system.
    </p>
    <p num="18">
      Information management processes (IMPs) (3) can provide more efficient execution of storage processes due to their understanding of the virtual directory system's unique information capabilities.
      <br/>
      These information management processes can be accomplished as application programs that communicate directly with the vial directory system's database through a private interface, such as the Ioctl interface in the Microsoft (tm)  Windows (tm)  95 system.
      <br/>
      The information management processes benefit from their ability to share a common directory system that spans all media types.
      <br/>
      For example, this means that an application that specializes in disk grooming processes (removes files that have not been used for a long period of time) can verify that the system's backup program has copied one or more instances of the file to be groomed (removed from the hard disk) thereby ensuring that, should the user decide to access the file in the future, that a copy of the file is stored on removable media or a remote storage site.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="19">
      FIG. 1--Shows the interconnections that may be utilized between one type of apparatus according to the invention and the operating system.
      <br/>
      FIG. 2--Shows an alternative embodiment of the virtual file directory system being used in conjuntion with a native file directory system.
      <br/>
      FIG. 3--Shows a block diagram of the Windows (tm)  95 as well as NT operating systems and file system components which may be utilized.
      <br/>
      FIG. 4--Shows a flow diagram for use of a virtual directory system to obtain file data from a native directory and pass the information to an application program.
      <br/>
      FIG. 5--Shows a sample flow diagram for a file open request that can be implemented by Windows 95.
      <br/>
      FIG. 6--Shows a sample flow diagram for a file close request that can be implemented by Windows 95.
      <br/>
      FIG. 7--Shows a sample flow diagram for file hooked by an interceptor and the update of the virtual directory database (DB) with file information, applicable for a Windows 95 environment.
      <br/>
      FIG. 8--Shows a sample flow diagram for monitoring mounting of media to a computer system and accessing file information stored on the storage media.
      <br/>
      FIG. 9--Shows an alternative sample flow diagram for monitoring mounting of a storage device to the computer system and tracking of the device to update a virtual directory system (VDS).
      <br/>
      FIG. 10--Shows a possible configuration of a virtual directory system and the program modules that can be used to implement the system as well as a virtual directory physical storage database.
      <br/>
      FIG. 11 shows a flowchart for one possible method of updating a virtual file directory when files are saved to a native file directory.
      <br/>
      FIG. 12--Shows a flowchart for an alternative implementation of the monitoring for the mounting of a storage media to the computer system, especially for a Windows 95 implementation.
      <br/>
      FIG. 13--Shows a possible configuration of an interceptor and the program modules that can be used to implement the interceptor's functions
      <br/>
      FIG. 14--Shows a sample flowchart for an implementation of monitoring a file system open request, applicable for the Windows 95 environment.
      <br/>
      FIG. 15--Shows a sample flowchart for an implementation of monitoring a file system write request, applicable for the Windows 95 environment.
      <br/>
      FIG. 16--Shows a sample database that shows the arrangement of file attribute fields containing file attribute data as well as additional storage space for future file attribute field data.
      <br/>
      FIG. 17--Shows an alternative file database entry with file attribute fields designated.
      <br/>
      FIG. 18--Shows a directory structure for a virtual directory divided into subdirectories.
      <br/>
      FIG. 19--Shows a directory structure for a virtual directory database configured to present three separate virtual directories.
      <br/>
      FIG. 20--Shows a typical hierarchical directory listing for a native file directory.
      <br/>
      FIG. 21--Shows a database listing of file attribute information contained in configurable virtual directory database.
      <br/>
      FIG. 22--Shows a sample flowchart for reconfiguring a virtual directory database as might be implemented by an information management process.
      <br/>
      FIG. 23--Shows a sample flowchart for adding and deleting file attributes from a configurable file database of the virtual directory as well as a sort routine for configuring the virtual directory database.
      <br/>
      FIG. 24--Shows a sample flowchart for monitoring a file system open request as might be implemented in a Windows 95 environment.
      <br/>
      FIG. 25--Shows how a sample flowchart of how an information management process (IMP) might reconfigure a virtual directory system.
      <br/>
      FIG. 26 shows one possible method for presenting information on devices to be monitored and designating devices to be monitored.
      <br/>
      FIG. 27 shows a directory configuration which displays all of the files in the virtual directory database as one directory.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="20">
      As can be easily understood, the basic concepts of the present invention may be embodied in a variety of ways.
      <br/>
      It will be seen to involve both methods of handling and utilizing information as well as devices or programing to accomplish the appropriate results.
      <br/>
      In this patent, the techniques disclosed should be understood to encompass a variety of devices which may be used to achieve the results described.
      <br/>
      In many cases, the device elements are simply the natural result of implementing the methods as intended and described.
      <br/>
      In addition, while some devices and programs are disclosed, it would be understood that these not only accomplish certain methods but also can be varied in a number of ways and accomplished by means recognized by those of ordinary skill in the art.
      <br/>
      Importantly, as to all of the foregoing, all of these facets should be understood to be encompassed by this disclosure.
    </p>
    <p num="21">
      As mentioned earlier, the present invention includes a variety of aspects which may be combined in different ways.
      <br/>
      Each of these aspects is first discussed separately.
      <br/>
      For exemplary purposes a preferred embodiment is described within the context of the Microsoft (tm)  Windows 95 environment, however, similar embodiments are possible within other system environments as those of ordinary skill in the art would readily understand.
      <br/>
      As a starting point, one possible configuration of an embodiment of the invention can comprise an apparatus that presents to a user or operating system, for example, a native hierarchical directory, a virtual directory system comprising a configurable, extensible database that can retain and organize file attribute information also stored in the native hierarchical directory, an interceptor apparatus that intercepts and relays information transmitted along the native file system's I/O interface to the virtual directory system, and application programs that orchestrate information management processes on the database of the virtual directory.
      <br/>
      Embodiments of the invention also can include the methods by which the above mentioned apparatus interact.
    </p>
    <p num="22">
      For purposes of this patent, the term "Presenting" is intended to mean either displaying on a computer screen or providing or making available for use, such as enabling an operating system and/or application program to use a file.
      <br/>
      Similarly, the term "native directory" is intended to mean the directory of a physical file storage device that is stored on the physical file storage device and facilitates access to the files stored on that physical file storage device (e.g., the native directory of one's "C" hard drive would be the directory of files stored on the C: hard drive and which is stored on the C: hard drive).
      <br/>
      Also, a "virtual directory" is a directory of file information which can be presented to a computer operator, operating system, application program or some other aspect of a computer system as a directory that is representative of a physical file storage device(s); however, this virtual file directory is merely an apparent or "virtual" directory since it can merely store file attribute information and is not actually affiliated with an actual physical storage device, as one would associate the affiliation between one's "C: hard drive" on an IBM personal computer and the directory listing for that hard drive.
      <br/>
      However, it can be representative of a physical file storage device in that the operating system would communicate with it in the same way that the operating would communicate with a directory for an actual file storage device (e.g, in issuing open/read/write delete requests to a file system driver for a storage device.) Finally, "file attribute information" is intended to mean properties of a file in defined categories, such as, for example, file name, type of data represented by the file (e.g., text file, executable file, Wordperfect 6.1 file, etc.) file size, date and time of file creation or modification, date and time the file was accessed, programs which caused the file to be accessed, physical file storage device where file data for the file is stored, parent directory on the physical file storage device in which the file is stored, child or subdirectory for the file, user defined descriptions for the file, etc.
    </p>
    <p num="23">
      The virtual directory system can serve many functions and appear in different embodiments.
      <br/>
      Perhaps one of its most useful functions is the ability to store file attribute information (16) about files stored on a native file directory system (8) and present that file information as if the files were stored in a distinct directory separate from the native file directory system.
    </p>
    <p num="24">
      The virtual directory system is significant in that it can provide in a single database a configurable database of file information which act as links to the actual file data.
      <br/>
      No longer is a user constrained by the physical limits of a storage device as to how many files can be listed in a single directory, as is the case with a single hard drive.
      <br/>
      Also, this database is configurable so that the directory can be manipulated into a new configuration and can make files available at an operating system level.
      <br/>
      This is a very significant feature, because it allows the newly configured directory to be made available at the operating system level to application level programs.
      <br/>
      In this fashion, a user could configure the virtual global directory with all of the user's word processing data files.
      <br/>
      Then, when the user wanted to find an old word processing data file, only the virtual directory would need to be accessed.
      <br/>
      This would save the user from having to search through all of the various directories on the computer system until the desired word processing document was located.
    </p>
    <p num="25">
      Similarly, the virtual directory system allows a user to store all of the files on the computer system in a single directory, if desired.
      <br/>
      This can be accomplished because the virtual directory system is only keeping track of file attribute information for particular files--not the file data itself.
      <br/>
      Hence, with a database, the virtual directory system can easily keep track of the file attribute information for every file encountered in the computer system.
      <br/>
      Hence, the virtual directory system can provide a single directory where all of the user's files are "virtually" stored and which can be easily searched rather than needing to search through the computer systems entire directory system.
      <br/>
      This benefit can easily be appreciated given the sheer volume of files with which a computer system comes into contact over its lifetime.
      <br/>
      For example, consider a computer system that has a floppy drive in which 100 floppies are used over its lifetime, a hard drive which stores three thousand files throughout 250 subdirectories, five ZIP disks used on a ZIP drive which each store 1000 files, a tape backup system which stores thousands more files, a CD ROM drive which uses 10 CD ROMs, each storing thousands of files, and an Internet connection which can access an Internet storage site where hundreds of thousands of files are stored.
      <br/>
      The search for a file that you know you encountered 5 years ago, but don't remember where, would be a Herculean task.
      <br/>
      Yet, with the virtual directory system, all of the file information for those thousands of files can appear in a single directory which can be easily searched.
    </p>
    <p num="26">
      Furthermore, because the virtual directory system can be stored on a configurable database, the directory itself can be subdivided into additional virtual directories.
      <br/>
      Hence, a user can group all of the word processing applications into a single directory, all of the letters to relatives (which also are stored in the word processing directory) in a second directory, and all of the letters to Aunt Margaret (which are also stored in each of the first two directories) in a third directory.
      <br/>
      Then, each of these directories can be utilized by application programs as if they were directories of actual physical file storage devices, such as a local hard drive.
      <br/>
      The application programs which utilize the file information do not need to be able to configure the database of the virtual directory, rather the directory can be configured at the operating system level and therefore it can appear as a physical storage device when called by the application level programs that need files represented by the virtual directory system. (It should be understood, however, that the virtual file directory system can be configured by an application level program.
      <br/>
      Therefore, the configuration can be accomplished quite easily when a new configuration is desired.) While prior application programs may have been able to search a native file directory system in order to create a desired grouping of files, these application programs did not make the groupings available for other application programs.
      <br/>
      For example, search of a directory system by a WordPerfect (tm)  word processing program might have created a listing of files of all of a company's annual reports; however, that listing was not then accessible by a WORD (tm)  word processing program as a separate directory.
      <br/>
      Rather, the WORD (tm)  program would have to repeat the search, as would the WordPerfect (tm)  program when it was reimplemented.
      <br/>
      Hence, the ability to configure the virtual fie directory at the operating system level is a significant feature of this embodiment of the invention.
      <br/>
      Others have apparently failed to appreciate the ability to accomplish this important feature or may have believed that it was not functionally implementable do to hardware constraints.
      <br/>
      However, with the development of new operating systems, the embodiments of the present invention will and are implementable to accomplish greatly improved performance over present rigidly structured directory systems.
    </p>
    <p num="27">
      Importantly, the use of the virtual file directory system need not affect the existing native file directory system.
      <br/>
      The native file directory system can still be used as usual by the computer system.
      <br/>
      Hence, there is no loss of compatibility of old application programs when a virtual directory system is implemented.
      <br/>
      Rather, the virtual directory system can enhance the computer's file system with its unique abilities, while not destroying the native file directory system which a user or application program might simply prefer to use.
      <br/>
      This is an important feature of the virtual file directory system as many prior attempts at creating enhanced file systems, especially extensible file systems, destroyed the compatibility of the native file directory.
      <br/>
      Hence, older programs which were not designed for the newer version lost compatibility.
      <br/>
      As those of ordinary skill in the art are well aware, compatibility of a new file system with existing application programs is perhaps the most important feature that a product must have.
      <br/>
      The virtual directory system can provide this, while others have apparently not been able to do so.
    </p>
    <p num="28">
      With reference now to the figures, implementation of embodiments of the viral file directory system can be seen.
      <br/>
      In FIG. 1, use of the Windows (tm)  95 System is utilized to demonstrate the architecture of the virtual file directory system.
      <br/>
      In FIG. 1, a native file directory system (8) can be seen.
      <br/>
      In the Windows (tm)  95 environment, this native file directory system (8) can be comprised of the Installable File System (IFS) Manager, several file storage devices (4), and the device drivers for the various file storage devices.
      <br/>
      These file storage devices could be either a storage medium (44) or the storage medium in combination with the device that couples the storage medium (44) to the computer system (1), such as a ZIP drive which couples a ZIP disk to the computer system or the storage medium itself. (A storage medium would be any device used to store file data, such as a floppy disk, a ZIP disk, a tape used in a tape drive, a compact disk (CD), a hard drive, an Internet storage device memory, etc.) In Windows 95, the boxes labeled HD, ZIP and TAPE would be "file system drivers" for the storage media (44).
      <br/>
      Each storage medium (44) would typically comprise a directory of file attribute information (16) in a directory structure for the files stored on that storage medium.
      <br/>
      An interceptor (2) is shown between the IFS Manager and the other components of the native file directory system.
      <br/>
      The Interceptor will be discussed in more detail elsewhere.
      <br/>
      FIG. 1 also shows a standard application program (5) (or similarly an Explorer) at the application level of the computer system (1).
      <br/>
      An operating system (20) can provide communication between the application program (5) and a native file directory of the native file directory system (8), as well as with the virtual directory system.
      <br/>
      A typical operating system for Windows (tm)  95 can be seen in FIG. 2.
      <br/>
      The operating system in FIG. 2 is merely exemplary, as other operating systems may easily vary in their components and operability.
    </p>
    <p num="29">
      A virtual file directory system (12) is shown in FIG. 1 adjacent the native file directory system components.
      <br/>
      However, note that no physical file storage device is associated with the virtual directory for storage of data files, as is the case with the native file directory system.
      <br/>
      In this manner, the virtual directory system is "virtual." It does not store actual file data.
      <br/>
      Rather, it points or directs one to the location where the file data is stored and can keep track of file attribute information in order to identify the file data.
      <br/>
      In contrast, the native file directory system is directly coupled to the physical file storage devices themselves, such that a call to the native file directory system is essentially directed at the physical storage device itself.
      <br/>
      In FIG. 1, the virtual directory system is shown configured into three virtual drives: a hard drive, a ZIP drive and a tape drive.
      <br/>
      In this fashion, the virtual directory file system might be representing the files stored on the hard drive, ZIP drive and Tape drive shown as part of the native file directory system.
      <br/>
      Or, it might only be listing the word processing documents on each of those storage devices.
      <br/>
      It could even be representing other hard disk, ZIP and tape drives not currently connected to the computer system.
      <br/>
      While the virtual directory system might only be configured as a single directory, the embodiment in FIG. 1 shows the ZIP drive of the virtual directory system as a first virtual directory, the hard drive as a second virtual directory (76) and the tape drive as a third virtual directory.
      <br/>
      Furthermore, because the ZIP drive block is associated with coupling and presenting information for a removable storage media, it can be considered a presentation element which presents a directory of file information for a removable storage medium (72)
    </p>
    <p num="30">
      The virtual directory system can be coupled to the interceptor (2) to allow the passage of data and commands between the interceptor and virtual directory system.
      <br/>
      Furthermore, the virtual directory system can be connected to the I/O system of the operating system (20) for the computer system (1).
      <br/>
      In FIG. 1, this is shown as a coupling to the Installable File System Manager of Windows (tm)  95. Input/Output (I/O) requests in Window 95 are passed through this IFS Manager (6).
      <br/>
      Through this path or interface, the virtual file directory can receive commands from an application program, operating system utility, or other program for a file represented on the virtual file directory system.
      <br/>
      Typical standard I/O commands could be open, read, write, close or delete commands among others.
      <br/>
      While such commands would typically be supported by a standard I/O interface of a computer system, other commands might not.
      <br/>
      Hence, the virtual file directory system can also be connected to the application level of the computer system via a private interface (200).
      <br/>
      In Windows (tm)  95, this private interface can be accomplished by an IOCTL command module.
      <br/>
      The private interface allows an application program to communicate directly with the virtual directory system without having to go through the standard I/O components.
      <br/>
      This permits, for example, an application level program to configure the database of the virtual directory system.
      <br/>
      Such configuration commands would not be recognized by the standard I/O interface, hence an error would typically occur.
      <br/>
      Hence the private interface allows unique commands which the application level program and the virtual directory system understand to be passed between the two.
      <br/>
      In addition, the private interface can be used to add information to the virtual directory system database.
      <br/>
      As described elsewhere the virtual directory system can be tended with additional information for each file record or collection of file attribute information.
      <br/>
      Hence, as new categories of file attributes are created, the private interface allows a user to enter information about a file to the virtual file directory system database.
    </p>
    <p num="31">
      In FIG. 1, the IOCTL interface is shown between the application program labeled IMP and the virtual directory system.
      <br/>
      In addition, private interfaces are shown between several other application programs at the application level and the virtual directory system.
    </p>
    <p num="32">
      An additional connection (201) is shown in a dashed line between the virtual directory system and the I/O system of the operating system.
      <br/>
      In FIG. 1, the I/O system is shown in part as the Installable File System Manager.
      <br/>
      This connection or coupling shows that the virtual directory system might transfer data and commands back up to the application level to input and output information through the I/O system.
      <br/>
      As a simple example, the virtual directory system when accessed for a file shown on its virtual directory listing can locate the actual physical storage location for the requested file and initiate its own request back through the installable file system.
      <br/>
      In this manner, the virtual directory system can request a file from the C: drive, for example, then present it to a word processing program as actually having come from the virtual file directory itself.
      <br/>
      In this fashion, the virtual directory system can emulate or act as an actual physical storage device.
    </p>
    <p num="33">
      FIG. 2 shows an alternative block diagram of a computer system.
      <br/>
      Again, in FIG. 2 a Windows (tm)  95 embodiment is used.
      <br/>
      FIG. 2 demonstrates that the native directory file system components and the virtual directory system components all can be part of the Kernel level or Ring level in Windows (tm)  95, whereas the application program can exist at the application level or Ring 3 level in Windows (tm)  95. For point of reference, FIG. 3 shows a typical schematic of the Windows (tm)  95 and Windows NT operating system components.
      <br/>
      These include Windows NT I/O manager, Device Drivers, HAL, the Installable File System, File system drivers, Windows (tm)  95 I/O subsystem, device drivers, Virtual Memory Manager/Services/Drivers.
      <br/>
      In addition, System VM, applications, system services, and MS DOS VMs are shown.
    </p>
    <p num="34">
      FIG. 4 shows a method of utilizing one embodiment of the virtual directory system.
      <br/>
      In this embodiment, a typical computer system which has access to a plurality of storage devices can be used.
      <br/>
      For example the computer system may have access to a hard drive and a floppy drive or a hard drive and an Internet connection.
      <br/>
      Each of these file storage devices could easily store many files.
      <br/>
      Furthermore, for each file stored on the file storage devices, there would be file attribute information listed for each file in a directory structure of that storage device.
      <br/>
      The file attribute information would describe the file and identify it from other files.
      <br/>
      For example, an element name (PATENT1) an element type (.app), an element size (66,731), create date (07-29-97), and create time (06:00) might exist as part of the directory structure as file attribute information for that file.
      <br/>
      This can be understood further by reference to FIG. 17, FIG. 20 and FIG. 27. As a first step of the process, the native directory of at least one of the physical file storage devices can be presented (400).
      <br/>
      Presenting is intended to mean not only the displaying of directory information on a computer screen to a user, but also the providing or making available for use of the information, such as enabling an operating system or application program to access or store a file.
      <br/>
      The native directory system's connection to the I/O procedures of the operating system allows it to be presented to the operating system and application programs, for example.
      <br/>
      In addition, a virtual directory system can be presented for use by an operating system (404).
      <br/>
      As noted earlier, this is a very unique function that others apparently failed to achieve before the present embodiment of the invention.
      <br/>
      Furthermore, the virtual directory can be presented as representative of a physical file storage device, such that the operating system can access through the virtual directory files represented by the file attribute information on the virtual directory.
      <br/>
      Such access can also be deemed to mean storage of new files through the virtual directory system such that the new files are represented by the newly stored file attribute information.
      <br/>
      The virtual directory can be presented as accessible to an application program as well as to the operating system.
      <br/>
      This can be accomplished, for example when the virtual directory system exists at the operating system or kernel level.
    </p>
    <p num="35">
      FIG. 4 demonstrates one embodiment of how the virtual file directory system can be used to retrieve or save a file.
      <br/>
      In this embodiment, a command from application level or operating system level can be received and accepted for a file presented on the virtual file directory (408).
      <br/>
      In the Windows (tm)  95 system, this command would be received by the virtual directory system file system driver from the Installable File System Manager.
      <br/>
      Then, a retriever element which retrieves a file (24) can be used to cause retrieval of the file presented by the virtual file system directory.
      <br/>
      Such a retriever element could be comprised of a program code module located in the virtual directory system.
      <br/>
      In one embodiment, it could be comprised of the code that accesses the appropriate storage media, communicates the desired storage location of the file and receives the file from the physical storage device.
      <br/>
      When a file request is received, the actual physical file storage location of the file can be retrieved from the virtual directory system database.
      <br/>
      First, one can determine whether the file request is a read request (416). (For purposes of this example, it is assumed that a read request accomplishes both an open file and read file command as commonly understood by those of ordinary skill in the art.
      <br/>
      Similarly a write request is understood to mean write file and close file commands.) Then it can be determined whether the desired storage medium is connected to the computer system (420).
      <br/>
      The use of the word "connect" is intended to encompass any coupling of a component (e.g., a storage medium) to the computer system, whether such coupling is electronic, optical or by other means.
      <br/>
      In the case of storage media, a connection to the computer system is also referred to as the media being mounted.
      <br/>
      Therefore, use of the word mount should be understood to mean coupling of the storage medium to the computer system such that the storage medium can be accessed by the computer system for file information.
      <br/>
      If the medium is not mounted, one option is to mount the media automatically, via an automatic dialer for the Internet or automatic mechanical means for disk and tape devices (436), or in other manners as those of ordinary skill in the art would readily understand. (Automatically is understood to mean that the computer operator does not need to assist in mounting the storage medium.) If the media cannot be connected automatically (432), such as a floppy disk under the control of a user, a message can be sent to an application level program, for example through the private interface, to prompt the user via a pop-up screen to load the proper storage media (440).
      <br/>
      Then, the storage device can be polled to determine when the removable media is inserted and the newly inserted media can be checked to confirm that it is the desired media.
      <br/>
      With the media connected to the system, the desired file data can be retrieved to the virtual directory and passed back to the application program or operating system that requested it.
      <br/>
      Program code modules which make up part of the virtual directory system code or application programs called by the virtual directory system can be used as: a determiner element which determines whether a storage medium is connected (28), a prompter element which prompts a computer user to mount media (32), a mounter element which automatically mounts the storage medium (36), a connector element which automatically establishes connection with a remote storage device (40).
    </p>
    <p num="36">
      As shown in FIG. 4 the virtual directory system can check to see if the file request is a file save request (444).
      <br/>
      If it is, the physical storage space can be accessed with the physical storage space descriptor element from the virtual directory system database and the file data stored to the physical storage device (448).
      <br/>
      In addition, the virtual directory system can be updated with the file attribute information for the file in the virtual directory database (452).
    </p>
    <p num="37">
      As additional examples of an implementation of the virtual directory system's use in receiving typical I/O commands from operating system utilities or application programs, reference is made to FIG. 5 and FIG. 7 where flow diagrams for example Windows (tm)  95 based programs are shown.
      <br/>
      In FIG. 5 a Windows (tm)  95 File Open request from the operating system is being processed.
      <br/>
      The virtual directory system resolves the storage media ID from the file Path by scanning the virtual directory system database (500).
      <br/>
      If the selected media is not found in the database, an error message can be generated back to the user via an application program pop-up screen.
      <br/>
      If the media is found in the database, the physical storage devices are then scanned to ensure the desired device is presently connected to the system (508).
      <br/>
      If the desired device is not connected, for example a ZIP disk missing from a ZIP drive, the user can be notified of need for new disk (512)--furthermore a disk eject command could be used to eject an improper disk.
      <br/>
      If the incorrect media is connected in response, additional error signals can be generated (516).
      <br/>
      Once the appropriate media is installed, the virtual directory system can itself issue a File Open request back through the Installable File System Manager of Windows (tm)  95 via the representative dashed line interface (201) shown in FIG. 1.
      <br/>
      This File Open Request is processed by the physical storage device Filesystem and unless an error occurs (522), a file handle is passed back through the Installable File System to the virtual directory system which is then saved by the virtual directory system (518).
      <br/>
      The virtual directory system then assigns its own unique handle to the file, and sends that back to the application program or system utility which requested a file open of the virtual directory system (524).
    </p>
    <p num="38">
      Similarly, in FIG. 6, an embodiment for Window 95 can be used to process a File Close request from the operating system.
      <br/>
      Upon receipt of the command, the unique file handle associated with the virtual directory system is used to look up the actual file handle for the physical file storage device.
      <br/>
      Then, the virtual directory system generates its own Close File request to the Installable File System with the actual file handle.
      <br/>
      This command is carried out by the native file directory (550).
      <br/>
      Then, upon completion the unique file handle associated with the virtual directory can be released (554) at which point the virtual directory system is finished with the Close File request (556).
    </p>
    <p num="39">
      Interestingly, the virtual file directory system can exist as code that makes calls back into the I/O system to access as storage medium, such as a local hard drive, where the database can actually be stored in database storage space (9) on the storage medium.
      <br/>
      In Windows (tm)  95, for example, the virtual directory upon receipt of a desired file would first make a call into the installable file system to request the virtual file directory database stored on a hard drive, for example.
      <br/>
      Then, the physical storage location of the desired file could be returned through the installable file system to the virtual directory system.
      <br/>
      Upon receipt of the physical directory storage location, the virtual directory system could implement its own file read command back to the installable file system, as described above.
    </p>
    <p num="40">
      With a virtual directory system, the user (e.g., a computer operator operating the computer system) has the ability to monitor the native file directory system for new information to add to the virtual directory system.
      <br/>
      Such new information might be new files saved to the native file system, revisions made to existing files on the native file system, application programs accessing particular files, or essentially any change processed to the native file directory system.
    </p>
    <p num="41">
      As shown in FIG. 8, one possible embodiment of updating a virtual directory file system can be seen First a native directory of storage devices can be presented (600).
      <br/>
      A virtual directory can also be presented (604).
      <br/>
      A monitoring step can be implemented to monitor the input/output system (I/O) of the computer system with an interceptor for new media mounted to the system (608).
      <br/>
      This process is often referred to in the art as hooking the I/O system for the mounting of new media.
      <br/>
      If new media is detected (612), the disk label of the newly mounted media or other identifier for the media used by the computer system can be read (624) newly mounted media can be checked to see if it is known by the virtual directory system (616).
      <br/>
      If it is not known (old media) and the media is supposed to be monitored (648), then the virtual directory system can access the new storage medium (620), and copy the file attribute data for the directory structure to the virtual directory (628).
      <br/>
      If the media is known to the virtual directory, the virtual directory can determine whether the computer operator even cares about monitoring the media.
      <br/>
      Perhaps the media is a floppy disk where inconsequential files are stored and which the computer operator does not wish to monitor.
      <br/>
      If the media is not to be monitored (632), the virtual directory can simply return to monitoring for other newly mounted media or other tasks.
      <br/>
      If the newly mounted media is being monitored, the virtual directory system can access the storage medium (636), check or look for any changes to the file attributes in the directory structure as compared to such attributes in the virtual directory system database (640) and update the virtual directory system with any new information on the storage medium file structure by copying, for example, the new information to the virtual directory database (644).
      <br/>
      Program code modules which make up part of the virtual directory system code or application programs called by the virtual directory system can be used as: a designator element which designates a particular storage medium (48), a monitor element which monitors for a mounting of a particular storage medium (52), an accesser element which accesses a mounted storage medium (56), a retriever element which retrieves information (60), and an updater element which updates a virtual directory (64) shown in FIG. 10.
    </p>
    <p num="42">
      In addition to its use in monitoring for changes made by way of the addition of storage media to the computer system, the virtual directory system can also be used to monitor for changes made to the native file directory system in the form of changes made to existing files stored on the native directory system and the saving of new files to or deletion of existing files from the native file directory system.
      <br/>
      In this mode of use, "changes" is intended to mean changes to any of the file attributes of an existing file or the creation of a new file.
      <br/>
      Furthermore, the virtual directory system can act as a safety file backup program to store files that have been deleted from the native file directory system, in case those deletions are later regretted.
    </p>
    <p num="43">
      FIG. 11 shows a flowchart of one possible method of updating the virtual directory with new file information.
      <br/>
      A native file directory can be presented (300).
      <br/>
      Such a native file directory will typically be hierarchical in nature.
      <br/>
      A "hierarchical directory is intended to mean a directory with a rigid structure of file attribute information, the structure of which cannot be reconfigured after its selection.
      <br/>
      For example, a hierarchical directory could be comprised of a number of segment types arranged in a hierarchy, commencing with the root segment type; below the root segment type there is zero, one, or more segment types at the first level, with a similar structure below each of these first level types at the second level, and so on.
      <br/>
      Thus each segment type is dependent on a segment type at the immediately higher level.
      <br/>
      As an additional example, the typical structure of one's C: hard drive is envisioned as displaying drive name/directory/subdirectory/.../file name.
      <br/>
      Whereas a non-rigid hierarchy would allow presentation of this information in other manners, such as file name/subdirectory/.../directory/drive name.
      <br/>
      In addition, a virtual directory file system can be presented (304).
      <br/>
      Then, the I/O system of the computer system can be monitored by an Interceptor (2) for input/output commands or requests to the native file system (308).
      <br/>
      If the Interceptor detects such a request, the virtual directory system can check whether it wants to track the change--which might be determined based on the target storage device of the request.
      <br/>
      If the request is to be tracked, the request can be checked to see if it is a file save request (316).
      <br/>
      If it is, then the file attributes being passed through the interceptor to the native file system storage device can be captured (or copied) (320) and passed to the virtual file directory in order to update the virtual file directory with the file attribute information (324), e.g., by storage as a new record in the database.
      <br/>
      If the request is a file read request, the interceptor could capture the name of the application program that originates the file read request and then use that information to update the viral directory system.
      <br/>
      Several of these functions might occur from the virtual directory system itself or might also be accomplished by the Interceptor independently.
      <br/>
      FIG. 13, for example, indicates that the monitor element which monitors for changes made to the native directory system (68) could be comprised of a code module that is part of the Interceptor.
      <br/>
      Indeed, for some embodiments, the Interceptor could be considered a component of the vital directory system.
      <br/>
      FIG. 7 shows a Windows 95 implementation of hooking file information and updating a database.
      <br/>
      FIG. 9 and FIG. 12 show alternative implementations of the file and media monitoring functions, for example, for a Windows 95 implementation.
    </p>
    <p num="44">
      One application of the virtual directory system would allow it to be used as a backup system.
      <br/>
      In this manner when the virtual directory system was informed that a file was about to be deleted from the native file directory system, the virtual directory system could actually copy the data from the physical storage device where it was stored and copy it to a backup location (224).
      <br/>
      Then, the delete command could be completed.
      <br/>
      The file would appear as deleted from the native file directory, but would still exist in a backup directory on the virtual directory system.
      <br/>
      Then, at a later date if the user regretted deleting the file, the file could be retrieved by accessing this backup directory on the virtual directory system.
      <br/>
      The backup directory system would actually store the file on one of the physical storage devices--perhaps a tape backup drive.
      <br/>
      When a user wanted to empty the backup drive on the virtual directory system, the virtual directory system could be accessed and a delete command issued for the file.
      <br/>
      Such a delete command could then be implemented as explained earlier for the open file and close file commands.
    </p>
    <p num="45">
      While the earlier discussion has indicated that the virtual directory system can make calls from the operating system or kernel level back to the application level, the virtual directory system could also be configured to make a direct connection to physical storage devices.
      <br/>
      The virtual directory system could implement the same interfaces provided by the file system driver components that support the physical storage devices.
      <br/>
      In this manner, the virtual directory system could be used by all application programs and operating system functions in a manner consistent with that of physical storage devices.
      <br/>
      As those of ordinary skill in the art would readily understand, the virtual directory system may provide functions such as open volume, read data, write data, seek, delete volume, rename volume among others, in a manner that is consistent with physical storage devices for the given native file system.
      <br/>
      The virtual directory system can also provide the common attributes associated with a hierarchical directory system such as the parent/child/sibling relationships associated with physical storage devices, directories, sub-directories and files.
      <br/>
      This implies that the virtual directory system may also support find first and find next functions associated with traversing hierarchical directory systems.
      <br/>
      FIG. 17 shows a possible record structure that the virtual directory system may implement to provide the services that are expected by the native file system.
      <br/>
      As discussed earlier, when a user does request access to a file that they have selected from the virtual directory system the virtual directory system may return a file handle in response to the file open command.
      <br/>
      However, before the file handle is returned for the user request, the virtual directory system may need to call or send a message to the interceptor module so that the requested file can then be opened on the physical storage device that contains the actual data.
      <br/>
      This sequence of events may be observed to ensure the file is indeed accessible on the target device and to take the necessary steps to load the appropriate media should it be off-line.
      <br/>
      Once the file handle is returned, the virtual directory system and the interceptor may then become a pass through device between the physical storage device and the various requests of the user.
    </p>
    <p num="46">
      The implementation of the virtual directory system should be straightforward once the basic principles as explained above are understood.
      <br/>
      For example, the virtual directory system may also be implemented as a file system driver or drivers.
      <br/>
      It may incorporate a database comprised of all or some portion of the file system name space descriptors.
      <br/>
      When used as a virtual access location, it may serve as a control for the interceptor.
      <br/>
      In this mode the global system may cause the interceptor to respond to standard file system commands to initiate actions involving a physical storage device.
      <br/>
      For example, if the virtual directory system received an "open file" command, it could in turn (via the Interceptor's Ioctl or other such interface) make the interceptor issue the command to achieve the action.
      <br/>
      As one of ordinary skill in the art could easily implement without undue experimentation, since the virtual directory system could emulate a physical storage device at the driver level, any application could perceive it as an actual storage device and could program the overall system to function as usual.
      <br/>
      Further, since the virtual directory system's information could be configured as a database system, access and utilization of the information of the virtual directory system could be achieved through well-known database programming techniques without undue experimentation.
    </p>
    <p num="47">
      As noted earlier, some of the capabilities of this parallel virtual directory system which can provide parallel information of a native directory system aspect of the invention may include providing the ability to connect to the native operating system's file system interface in a manner similar to a block device, such as a hard disk.
      <br/>
      It may allow read/write access to all virtual files.
      <br/>
      In addition the system may utilize database technology to allow gross manipulation of the information in a gross manner to permit reorganization, recharacterization and other appropriate handling or presentation of the information.
      <br/>
      It may also present to the native operating system a directory structure that is composed of entries gathered via the Interceptor module(s), and may present to the system user a virtual file system representative of all files contained within the native file systems.
      <br/>
      The virtual directory system may provide a secondary interface so that application level programs may configure its database so that multiple views of the global system may be created.
      <br/>
      Through an ability to present multiple views, it may export those views to the operating system's file system interface in such a way that the views are presented to the end user as discrete logical devices via the native file browsing mechanisms.
      <br/>
      In utilizing its database capabilities, the global system may organize lists of files that meet predefined, or user defined criteria and may provide these lists of files on demand to Information Management Processes (IMPs) to more efficiently carry out data management processes.
      <br/>
      It may also allow the end user to access any file in the computer system, either directly through the native file system, or indirectly through the parallel virtual directory system.
    </p>
    <p num="48">
      Furthermore a goal of the system may be to organize the end user's data and to make it easier to manage the data for backup, archiving or other data management processes.
      <br/>
      The heart of the system in this regard could be the Parallel Virtual directory system.
      <br/>
      This system may be a database that could be used to track the state of every file in the system.
      <br/>
      This could be accomplished by accessing an installable file system (such as the Windows (tm)  95 Installable File System) to monitor changes to any file in the system.
      <br/>
      This could include data on removable media as well as the hard disk.
    </p>
    <p num="49">
      One of the advantages with a design such as the global system could be the use of a persistent memory.
      <br/>
      With the popularity of Zip drives and DVD drives, end users could have a huge amount of data on disks that aren't mounted in the system, so, as far as the normal file system is concerned these files don't exist.
      <br/>
      With a persistent file system such as might be configured, the computer system could remember that the files exist and on which piece of media it is located.
      <br/>
      In this fashion, an end user could always find any file even if the disk were not loaded.
      <br/>
      If they requested the file through a persistent system, then the invention could act to tell them to mount the required piece of media.
      <br/>
      This same process can work for files on tape or that you might store at an Internet storage site.
    </p>
    <p num="50">It should be noted that many of the functions and apparatus demonstrated in the figures in this patent may be interchanged to suit a particular embodiment of the invention.</p>
    <p num="51">
      As noted above, the virtual directory system can utilize an interceptor apparatus to detect changes that occur in the native file directory.
      <br/>
      Such changes might involve the connection of new media to the computer system the input and output commands for files stored on the native file system, as well as many others, such as the application program originating a request for a file.
    </p>
    <p num="52">
      In one embodiment of the invention, the interceptor can be inserted between the operating system interface to the physical storage devices and the physical storage devices themselves.
      <br/>
      This might be visualized as a single interceptor (2) module as shown in FIG. 1 or as separate interceptor modules (2) for each storage device as shown in FIG. 2.
      <br/>
      The interceptor module can be programming code that receives an Input/Output command from the I/O interface and determines from that command whether the interceptor (or its master, such as the virtual directory system) is interested in the information being input to or output from the native file directory.
      <br/>
      The Interceptor (2) might even be used to initiate its own command to check system flags, interrupts, or system status, when the I/O command is received.
      <br/>
      In this manner, it could be used as an intelligence gathering or error checking device for a system.
      <br/>
      If the interceptor is interested in a command, it can then relay the information to its master, such as a second file directory system (88) like the virtual directory system.
      <br/>
      Such information might include the name of the application program that sent a command or request, or file attribute information (16) for a file.
      <br/>
      This information could then be stored in the second file system.
      <br/>
      As shown in FIG. 13, such processes could be accomplished by programming code that acts as: a monitor element which monitors input/output (108), a relay element which relays intercepted information (96), and a capturer element which captures application program name (124).
    </p>
    <p num="53">
      Additionally, or as a separate embodiment of the invention, the Interceptor (2) could be used to monitor for the attachment of storage media that was either reconnected to the computer system or which was newly connected to the computer system.
      <br/>
      If there were such a desire, the Interceptor could even be used to monitor when media was removed from the computer system.
      <br/>
      This process can be understood by reference to FIG. 8 which was discussed earlier.
      <br/>
      For example, it can be used to check the new media for any new information that should be added to the virtual directory system.
      <br/>
      This might be accomplished by accessing the directory structure of the new media, scanning for any new information (i.e. traversing and comparing to the data in the second file system) and relaying the data.
      <br/>
      Program code modules as shown in FIG. 13 could be used to accomplish the scanner element which scans (104), monitor element which monitors I/O requests (108), copier element which copies file path information (112), relay element which relays information (96), and checker element which checks time stamp information (120).
    </p>
    <p num="54">
      FIG. 14, FIG. 15, and FIG. 24 demonstrate some ways in which an Interceptor module can be utilized in the Windows (tm)  95 environment.
      <br/>
      In FIG. 14, a procedure for monitoring of File System Open requests is shown.
      <br/>
      First, the application program makes a Ring 3 (an application level request in Windows (tm)  95) request to open a file (700).
      <br/>
      Then, the interceptor receives the request (704) as it is located as shown in FIG. 2 between the Installable File System Manager and the Filesystem Device Driver. (The use of the interceptor in this manner is often referred to as hooking the I/O.) The interceptor can then associate a state with this request (708) and either open an existing file or create a new file.
      <br/>
      If a new file is being created, the file information sent with the open request can be inserted in the database (712).
      <br/>
      In FIG. 14, a procedure for monitoring of a File System Write request is shown.
      <br/>
      The application program makes a Ring 3 write request (750) and the interceptor receives the request via the IFS Manager hook (754).
      <br/>
      Then a save state is made indicating the file has changed (758).
      <br/>
      When the close request is received, the state is examined and the file information is updated in the virtual directory system database.
      <br/>
      In FIG. 24, a procedure for monitoring a File System Delete request is shown.
      <br/>
      The application program makes a Ring 3 File Delete request (775).
      <br/>
      The Interceptor (2) receives the request from the IFS Manager hook (780).
      <br/>
      The file is then deleted from the database (784).
      <br/>
      However, as noted earlier, the file can be backed up on a virtual directory system, as an alternative prior to deletion.
    </p>
    <p num="55">
      For exemplary purposes, alternative configurations of the interceptor module could be used.
      <br/>
      For example, the interceptor apparatus may be composed of several modules as noted earlier.
      <br/>
      The interceptor apparatus may reside at the application and file system interface.
      <br/>
      Its purpose can be to intercept file open, read, write and delete requests from application programs and system utilities.
      <br/>
      When these requests are intercepted, the file path information may be copied from the request and relayed along with the physical device target information via procedure call or system message to the virtual directory system.
      <br/>
      Often, it can be critical that the request is intercepted at a level where the user defined names are present and before the file system translates the request into an internal file handle.
      <br/>
      This can be necessary so that the user defined names can be stored and later presented when the virtual directory system is accessed.
    </p>
    <p num="56">
      As another ample, the interceptor module may reside between the installable file system and the file system driver.
      <br/>
      The purpose of this module may be to detect when media is changed in a removable storage device.
      <br/>
      This may be done by polling the device or detecting media change messages from the file system driver, as well as any other means available.
      <br/>
      This module then may mimic system calls normally implemented by the installable file system to extract directory information from the newly inserted media.
      <br/>
      This module may read the media label and may query the virtual directory system to see if data regarding this media has been previously recorded within the virtual directory system.
      <br/>
      If the directory information contains time stamp information this may be checked against the last recorded information for the particular media and if the time stamp indicates that the media has not been altered since the last insertion then the step of actively extracting the directory information from the disk may be omitted.
    </p>
    <p num="57">
      The interceptor modules may be used to extract directory information from the physical storage devices in a manner which is transparent to both the user and to even existing application programs.
      <br/>
      An interceptor module can be used to provide read and write or other such access to the file data contained by the physical storage devices.
      <br/>
      This function can be necessary to allow the virtual directory system to emulate a physical storage device.
      <br/>
      When the user or application programs request to read or write file data via the virtual directory system, the virtual directory system ideally may provide a virtual connection to the physical storage device that the data is located on.
      <br/>
      The interceptor module can emulate, in the case of Windows (tm)  95, functions provided by the installable file system.
      <br/>
      The module can implement the protocols for read/write operations to the file system driver assumed with the target physical device.
      <br/>
      In most operating systems this interceptor module can be used in lieu of the standard file system interface due to reentrancy problems commonly encountered when operating system driver level components attempt to call into the application level interface of the operating system.
      <br/>
      Naturally, the system could automatically alter its signals to mimic or emulate the type of storage device expected to be operated and thus act without any apparent impact on the user or those applications utilizing such signals.
    </p>
    <p num="58">
      Some of the capabilities of the interceptor aspect of the invention may include providing that the Interceptor module(s) may capture changes to files on a plurality of fixed, removable or remote storage devices and relay the names of the files changed and the nature of the file changes to the virtual directory system or the like.
      <br/>
      The Interceptor module(s) may also detect the type of application program that originates the file changes and relay the application program type along with file names and types of changes.
      <br/>
      Similarly, the Interceptor module(s) may identify the type of file data stream and extract class unique file metadata and relay this information to the system.
      <br/>
      It may allow the system to extract a data stream from a plurality of fixed, removable or remote storage devices and allow the system to write a data stream to a plurality of fixed, removable or remote storage devices, and reflecting these changes in both the directory structure provided by the virtual directory system and the directory structure provided by the native file system.
      <br/>
      It may also detect when new removable media has been mounted and without user intervention relay the directory on the media to the virtual directory system and update the system to the current state of the removable media.
    </p>
    <p num="59">
      As one additional example, the Interceptor may be a series of routines which achieve the desired functions.
      <br/>
      These could include a "means for sensing a change event" or a sensor which might be any device, wiring, or program subroutine that monitored (via a monitor) the various signals present and constantly tested them to see if they were of a character that indicated a change or other appropriate event might be occurring.
      <br/>
      Thus the means, might be a change sense routine or even hardwired change sensor circuitry.
      <br/>
      As those of ordinary skill in the art would readily understand, this change event sense routine might use the Ioctl interface (for Windows (tm)  95) or other such interface to achieve its goal.
      <br/>
      Once a change event occurred, the change event sensor or change event sense routine might activate a data capture routine which could then provide input to a data store means or routine.
      <br/>
      This data store routine might access an allocated memory on any one of the memory means of the computer.
      <br/>
      Preferably the memory element accessed would be a non-removable type of memory (such as the hard drive) which would always be available.
      <br/>
      Similarly the interceptor or intercept routine could provide a response or signal capability to allow the application or user to obtain the desired item.
      <br/>
      This capability might consist of a signal generator or signal generation routine as those of ordinary skill in the art would readily understand.
    </p>
    <p num="60">
      The native file system usually provides access to various physical devices used for storage of data by the computer system.
      <br/>
      Application level programs usually rely on a consistent interface to file data within the context of a given operating system.
      <br/>
      In turn, the native file system of the operating system may expect a consistent set of services to be provided by the file system drivers for the various physical storage devices connected to the computer system.
      <br/>
      FIG. 2 shows a block diagram of the Windows (tm)  95 operating system and the elements that make up its current native file system.
      <br/>
      The role of the various interceptor apparatus described earlier can be to capture or inject data at the various levels of the native file system architecture for the purpose of monitoring or providing access to the data stored on the physical storage devices.
      <br/>
      The interceptor apparatus can provide these functions for the benefit of the virtual directory system.
    </p>
    <p num="61">
      The Interceptor might be created as a programmed module which serves as a file system driver or drivers.
      <br/>
      It might insert between the installable file system and the file system driver of the target physical storage device as a person of ordinary skill in the art could readily understand and implement using standard knowledge, textbooks, or routines.
      <br/>
      It might thus receive all standard file system messages intended for the physical storage devices, messages of interest to the virtual directory system, as well as those of interest to the target physical storage device.
    </p>
    <p num="62">
      As noted earlier, the virtual directory system can utilize a configurable database (128) for storing file attribute data or information (16) about particular files stored on a native hierarchical directory system.
      <br/>
      A collection of file attribute data for a single file can be considered a set of file attribute data or a file record.
      <br/>
      As a matter of course, the database (128) will have a minimum number of file attribute fields (164) when it is first created.
      <br/>
      As indicated by example in FIG. 16, within each file attribute field for a file, file attribute information (16) can be stored.
      <br/>
      Such information would relate to the file which it represents and also relate to the parameters used to define that particular field.
    </p>
    <p num="63">
      Because the file information is stored in a relational database rather than in a rigidly structured storage system, it may easily be reconfigured by normal database operations.
      <br/>
      For example, if a new file attributes are desired to be added to describe a file, such an additional file attribute fields (172) can be added to the database in order to extend the information contained by the database to describe a file.
      <br/>
      Within the additional file attribute fields, additional file attribute information (176) could be added.
      <br/>
      An adder element which adds a new file attribute to the configurable database (180) could be used to accomplish this and would typically be comprised of database code which operated on the database.
      <br/>
      Similarly, a deleter element which deletes a file attribute field (192) could be used to delete a file attribute field.
      <br/>
      Similarly, a selector element which selects a file attribute field (184) and a sorter element which sorts the configurable database (188) could be implemented through program code to accomplish those functions and configure the database in a new arrangement.
      <br/>
      This versatility would then allow the database information to be rearranged, grouped or configured based on the user's commands.
    </p>
    <p num="64">
      For example a typical DOS directory is shown in FIG. 20. This directory is shown as an extended version in FIG. 21. An extended directory of information in the virtual directory file system designated as H: is shown in FIG. 21. This extended system has added a description field and three backup fields where files can be backed up when they are changed.
      <br/>
      Furthermore, the extended directory demonstrates that files can exist with the same file name in the same directory.
      <br/>
      The database can distinguish such files based on other file attributes such as time and date of creation or file size if it were configured to do so.
      <br/>
      Because the virtual database is separate from the native file directory, it does not destroy the native file directory system.
      <br/>
      Rather, the native directory system can be accessed as always; while the virtual directory file database can permit more advanced file access.
    </p>
    <p num="65">
      Within the context of a hierarchical directory system the parent/child/sibling relationships can be fairly rigidly defined.
      <br/>
      Both out of necessity, and the desire to provide organizational benefits, the virtual directory system can provide dynamic methods for defining parent/child/sibling relationships.
      <br/>
      For example, each record noted in FIG. 17 contains an entry for a physical storage device, therefore a given instance of a hierarchical directory that the virtual directory system presents to the native file system might be one that exactly parallels the data presently stored on a given physical storage device.
      <br/>
      That is, the starting point of the hierarchy might be that of physical storage device, so the directory tree would start with the "c:" hard disk for example.
      <br/>
      However, in the case of the virtual directory system the physical storage device might be used only as a uniqueness identifier at the bottom of the hierarchical directory tree.
      <br/>
      As a result, the virtual directory system may need to be adaptable in how the hierarchical tree is presented to the native file system.
      <br/>
      In order to overcome any uniqueness barrier which may be presented by the hierarchical directory system, the virtual directory system may actually present the file entity as a pseudo directory entry to the native file system, this is so that the date/time combination or the physical storage device might be treated as the file instance for the purpose of uniqueness.
    </p>
    <p num="66">
      As another example, a hierarchical directory path might be expressed as "c:.backslash.document.backslash.patentapp.doc". Within the native file system patentapp.doc is the entity that is accessed for the data.
      <br/>
      Imagine within the virtual directory system that it contains the path "c:.backslash.document.backslash.patentapp.doc" and it has a time and date associated with it of 11/1/96 12:01 p.m., just as it exists on the c: storage device.
      <br/>
      In this case, the virtual directory system may also have two other entries for this file because the user wished to ensure that there were multiple copies of this important document.
      <br/>
      The virtual directory system may also contain entries for "zipdisk1.backslash.document.backslash.patentapp.doc" with a date associated with it of 10/31/96 09:00 a.m., and another instance of "zipdisk2.backslash.document.backslash.patentapp.doc" with a date of 11/1/96 12:01 p.m. If the user wished to see all instances of .doc files the virtual directory system could then provide three unique paths to the file consisting of ".backslash.document.backslash.patentapp.doc.backslash.111/96 12:01 p.m..backslash.c:", ".backslash.document.backslash.patentapp.doc.backslash.11/1/96 12:01 p.m..backslash.zipdisk2" and finally "document.backslash.patentapp.doc.backslash.10/31/96 09:00 a.m..backslash.zipdisk1". Methods for converting time/date representations to suit the requirements for the native file systems path can, of course, also be tailored as needed.
      <br/>
      An important feature in this regard may be the virtual directory system's ability to dynamically resolve the uniqueness requirement of a hierarchical directory by altering the directory element attributes that are presented to the native file system during the find first, find next directory query sequence.
    </p>
    <p num="67">
      As mentioned, since the global system could be configured as a database it could present to the user many different "disks" just by configuring a different view of the system.
      <br/>
      A user could look at files in the system at a certain point in time, or with a particular name, or files that you have deleted from the hard disk but are stored on removable media.
      <br/>
      This can be seen in comparing FIG. 27, FIG. 18 and FIG. 19. In FIG. 27, a directory configuration which displays all of the files in the virtual directory database as one directory is shown.
      <br/>
      In FIG. 18, subdirectories have been introduced to group files having common themes: patent applications, digital movie data, and business reports.
      <br/>
      In FIG. 19, three different virtual directories are presented.
      <br/>
      Furthermore, some of the files are presented in different virtual directories at the same time.
      <br/>
      For example, the one file with the filename Patent3.app is presented to the computer system in virtual directories H:, I: and J: simultaneously.
    </p>
    <p num="68">
      The use of a database to store directory information provides unique opportunities for a computer system in managing that database.
      <br/>
      While a standard I/O interface will typically support I/O commands between a virtual directory system and a computer system's I/O system, commands directed to configuring the virtual directory database or adding information will likely not be supported.
      <br/>
      Such commands can be originated by programs known as Information Management Processes (IMPS).
      <br/>
      For example, in Windows (tm)  95, commands such as read, write, delete, open and close can be passed by the Installable File System Manager to the Virtual Directory Filesystem.
      <br/>
      However, a command to configure the virtual directory database, would not be supported by the File System Manager.
      <br/>
      Hence, a private interface is necessary for communication of such unique commands from an application program used to configure the virtual file directory system to the virtual directory file system itself.
      <br/>
      The private interface can then transfer the unique command to the virtual directory system.
      <br/>
      Such an interface can be useful to not only configure the database, but also to input file attribute information such as the extended field information shown in FIG. 21. In the Windows (tm)  95 environment, one such private interface can be accomplished through use of the Windows (tm)  95 IOCTL command.
    </p>
    <p num="69">
      An example of a method used to configure a virtual directory file system is shown in FIG. 22. As a precursor, information from the native file directory can be input to a virtual file directory. (800).
      <br/>
      Not all of the information need be input to the virtual directory, however.
      <br/>
      The directory information from the native file directory can be stored on a database of the virtual file directory (804).
      <br/>
      A private interface can then be established between the virtual directory file system and an application program.
      <br/>
      Through this interface, a command can be issued to the database (808).
      <br/>
      If the command indicates that the database is to be reconfigured (812), the virtual file directory can then receive database sort criteria from the application program (816).
      <br/>
      From the sort criteria, a filter (208) can be created (820).
      <br/>
      The database can then use the filter to sort the database (820).
      <br/>
      File attribute fields might be eliminated or arranged in different orders.
      <br/>
      Furthermore, subsequent sorts can establish the database into a variety of different combinations or groupings.
      <br/>
      Hence, the configuration command sequences could group a single virtual directory into multiple virtual directories, such as a first virtual directory, a second virtual directory (76) and a third virtual directory.
      <br/>
      Such is the embodiment in FIG. 1 where three virtual directories are shown representing parallel configurations of the hard drive, ZIP drive and Tape drive of the native file system.
      <br/>
      As noted earlier, such configurations are unique from prior attempts in that the configuration can be accomplished by an application program and then retained for later use by either the operating system or a different application level program.
      <br/>
      When the virtual directory system operates on the arrangement of the file attribute information, for example the file path information, it can essentially reconfigure the hierarchy of the virtual database.
      <br/>
      For example, if the database is sorted so that instead of the file name being the first file attribute, but instead the file subdirectory is the first file attribute, the hierarchy has been redefined.
      <br/>
      The program code in the program that issues sorting commands to the virtual file directory can constitute a sorter element which sorts the virtual file directory (204).
      <br/>
      Similarly, program code which issues reconfiguration commands can be a reconfigurer element which reconfigures the virtual file directory (216).
      <br/>
      Program code which issues commands to redefine the hierarchy of the virtual file directory could constitute a redefiner element which redefines the hierarchy of the virtual file directory (220).
    </p>
    <p num="70">
      The flowchart in FIG. 22 goes on to show how an Information Management Process can also manage the configurable file database.
      <br/>
      For example, if a backup command is received (824), the virtual file directory system can receive from the application program input on the identity of files to backup and locations of where to store those files (828).
      <br/>
      This type of information can be seen in FIG. 21. Then, the virtual file directory system can monitor for changes to selected files (832).
      <br/>
      If changes are detected, for example by an interceptor, the revisions can be backed up to the designated drives (836), i.e. some sort of storage medium for backing up files (224) which could essentially be any type of computer memory.
      <br/>
      Referring to FIG. 21, if a change is made to the one file designated as "commard.com", the revisions could be backed up on the C: drive, the D:drive and the E: drive.
      <br/>
      Such back ups might be accomplished from the application level or from the operating system level.
    </p>
    <p num="71">
      FIG. 23 shows an additional example of configuring a database.
      <br/>
      As a precursor, an accessible native file directory is established so that it can be accessed by application programs (850).
      <br/>
      An accessible native file directory is intended to mean a directory which can be accessed, for example, by an operating system or an application program.
      <br/>
      In addition, a virtual file directory database is configured to have a first max number of file attribute fields (853).
      <br/>
      If it is determined that a file attribute is to be added to the database (856) and if the file attribute field does not exist, formatting directions can be passed to the database and the new file attribute field created.
      <br/>
      Then, a file can be designated by existing file attribute information (859), the file attribute field selected (862) and the new attribute field information passed to the virtual directory via the private interface.
      <br/>
      The virtual directory file system can then be presented to the computer system (865) for further use, while still maintaining the ability of the native file system to interact with the computer system.
    </p>
    <p num="72">
      If a delete file attribute command is detected (868), a file attribute field can be selected (designated) and passed to the virtual directory system (871).
      <br/>
      Then the virtual directory system can delete the file attribute field (874) and present the database (877).
      <br/>
      If a sort the file database command is received (880), a selected file attribute field can be passed to the virtual file directory system (891) and a sort carried out on the database (894).
      <br/>
      As a subsequent step, the sorted files could also be grouped into a first virtual directory (897) and the directory presented for use by the computer system.
      <br/>
      Similarly, a subsequent sort could be conducted upon a subsequent sort command (901).
      <br/>
      A second file attribute field could be indicated (903), the virtual file directory database sorted based on that attribute field (905), the second sort grouped into a second virtual directory (907) and the first and second virtual directories presented to the computer system.
    </p>
    <p num="73">
      FIG. 25 illustrates a Windows (tm)  95 embodiment where an Information Management Process application program configures the virtual directory file system database.
      <br/>
      First, the application program forms a filter for the database object and an application program interface referenced as dII api (950).
      <br/>
      The DII api then performs a DeviceIOControl to the virtual file directory Filesystem Driver (954).
      <br/>
      At which point the Filesystem Driver (7) saves the filter for the database object into the database (958).
    </p>
    <p num="74">
      As another example of use of an information management process application program to manage the virtual directory file system database, FIG. 26 shows a flowchart for selecting storage media to be monitored.
      <br/>
      As before, a native file directory system can be presented (975).
      <br/>
      Also, a virtual directory file system can be presented (978).
      <br/>
      A listing of storage media being monitored (e.g., when revisions are made to the storage media the revisions are noted on the virtual directory system) is presented to the user on the user's computer screen (981).
      <br/>
      Furthermore, a listing of storage media not being monitored can be presented on the user's screen as well (984).
      <br/>
      And a listing of storage media available to be monitored can be presented (987).
      <br/>
      Then a computer operator can designate which storage media should or should not be monitored (990) and those results can be passed to the virtual file directory system which can either implement the monitoring control in conjunction with an interceptor or pass the information to the interceptor which accomplishes the monitoring itself until it needs to update the virtual directory system.
    </p>
    <p num="75">The virtual directory system may provide the private interface as a mechanism for configuration by the information management processes and as a means for the information processes to extract information not readily supported by the native file system interface.</p>
    <p num="76">
      The ability to configure the virtual directory system via the Ioctl or other such interface, or similar pass through mechanism, may be necessary to provide the multiple view attribute of the virtual directory system.
      <br/>
      Furthermore, the virtual directory system can report to the native file system that it is not just one storage device but any number of devices.
      <br/>
      It may be desirable that the virtual directory system reports as a "device 1" and provides a view of all files on all media.
      <br/>
      As "device 2" it may provide a view of just data on removable media.
      <br/>
      As "device 3" it may provide a view of the primary physical storage device at a user definable point in time.
      <br/>
      All of these data views can be configured dynamically via the Ioctl or other such interface.
      <br/>
      In the case of "device 3" the controlling information management process may send a message to the virtual directory system setting the primary physical storage device as a search constraint when the virtual directory system responds to the find first/find next queries.
      <br/>
      Additionally, the information management process can send a message setting the search constraint of only files created and modified prior to a user definable date.
      <br/>
      In this case the information management process might be an application that allows the user to select a physical storage device and a calendar date.
      <br/>
      As the user changes these parameters the virtual directory system may receive the corresponding messages and dynamically reconfigure itself to search for files that meet the criteria.
      <br/>
      In this manner the user can easily modify how they view the system data and more importantly how all application programs view the data.
      <br/>
      This unique functionality is designed to augment that available in most standard operating systems.
    </p>
    <p num="77">
      Information management processes may be apparatus that implement different storage management strategies or may be methods.
      <br/>
      As discussed above a simple information management process can be used to simply configure views of the virtual directory system.
      <br/>
      A more complex example might be the implementation of a digital video information management process.
      <br/>
      The video process might be provided by a cable TV or Satellite TV vendor for recording programming via the computer systems storage device.
      <br/>
      For example, two classes of data might be downloaded by the vendor, the first being movies that the subscriber wishes to rent or buy which must be recorded on a high capacity device such as a tape drive.
      <br/>
      The second class of data may be short commercial programming that the vendor wishes to play whenever the subscriber begins to watch a movie or whenever a movie ends.
      <br/>
      The commercial programming then may require fist access speed to the individual commercial segments that is not easily provided by tape.
      <br/>
      The video process could then implement a method by which it could load the commercial segment to available hard disk space or high capacity removable disks that can ensure the access characteristics that are required.
      <br/>
      Further, after the commercials have been played the number of times that the vendor had defined at download time, then the video process could even erase these segments without user intervention.
      <br/>
      The video information management processes could also assist in organizing data for the user.
      <br/>
      When the video process records the movie it could send a message to the virtual directory system to create a pseudo device that could be exclusively for movies, thus providing the user with an easy means of finding movies.
    </p>
    <p num="78">
      Some of the capabilities of the Information Management Process aspect of the invention may include providing an IMP that may connect to a virtual directory system via a secondary communications path provided by the operating system or via a private communications path for the purpose of configuring the system for data management unique processes.
      <br/>
      It may allow end users to configure the system for the purpose of viewing file directory information in a better organized and efficient manner.
      <br/>
      The results of this data organization may be viewable through any application capable of accessing the system through the operating system or otherwise.
      <br/>
      The IMP may act to configure the global system to create a list of files that have been changed that may be of interest to the IMP's unique processes and may make use of the list to more efficiently carry out the IMP's processes.
    </p>
    <p num="79">
      The information management process would also be fairly straightforward to implement.
      <br/>
      Using the knowledge of the virtual directory system, it might be configured to communicate with the virtual directory system through its Ioctl or other such interface.
      <br/>
      Thus through standard operating system and other commands as well known or readily understood, the IMP can be coordinated to achieve configuration of the virtual directory system to emulate any type or arrangement of devices, be they real, or virtual.
      <br/>
      It could also achieve manipulation, storage, and presentation of the information from the virtual directory system in the manner desired.
    </p>
    <p num="80">
      Finally the IMPs may be configured as data management applications that know how to use the system to their advantage.
      <br/>
      Most backup packages or archiving packages know how to manage files that they have transferred themselves but with a persistent system it could be much easier to share information about where files are located between applications.
      <br/>
      A new type of IMP might be one that pulls digital video from your satellite dish and records it to a DVD or tape.
      <br/>
      This IMP and the PFS then can team up to allow you to create your own video library, nicely organized on your PC.
    </p>
    <p num="81">
      Once the basic principles of the invention are understood, the actual implementation of it should be fairly straightforward to a person of ordinary skill in the art.
      <br/>
      The currently preferred implementation is as an ancillary capability to a standard operating system, such as the Windows (tm)  95 system.
      <br/>
      As such, by utilizing readily available source books for programming, operating systems, and database management (such as, the Win 32 DDK, the Win 32 SDK, and the references "Inside Windows (tm)  95" by Adrian King as published by Microsoft (tm)  Press, Copyright 1994; "Systems Programming for Windows (tm)  95" by Walter Oney as published by Microsoft (tm)  Press, Copyright 1996; and Inside the Windows (tm)  95 File System by Stan Mitchell, Copyright 1997 which are hereby incorporated by reference) the software embodiments might be accomplished without undue experimentation.
    </p>
    <p num="82">
      As should be readily apparent, the invention might be characterized in a variety of different and independent manners.
      <br/>
      As but one example, the invention might be characterized as a system for providing composite memory information comprising a number of elements such as: a processor; a plurality of memory elements responsive to said processor; a signal connection through which electronic information can be provided between the memory elements and the processor; an interceptor which can access information from the signal connection; a change event sensor responsive to said inteceptor through which a change event could be determined to exist.
      <br/>
      In a more software sense, it might similarly comprise elements such as: an interceptor routine which can access information from said signal connection and a change event sense routine responsive to said interceptor routine through which a change event could be determined to exist.
    </p>
    <p num="83">
      The discussion included in this patent is intended to serve as a basic description.
      <br/>
      The reader should be aware that the specific discussion may not explicitly describe all embodiments possible; many alternatives are implicit.
      <br/>
      Where the invention is described in method or result-oriented terminology, each function of the invention would be achieved by an apparatus element be it hardware or software-based.
      <br/>
      Apparatus claims may not only be included for the device described, but also method or process claims may be included to address the functions the invention and each element performs.
      <br/>
      Equivalent, broader, and more generic terms are implicit in the prior description of each element.
      <br/>
      Such terms can be substituted were desired to make explicit the implicitly broad coverage to which this invention is entitled.
      <br/>
      Further, it should be understood that a variety of changes may be made without departing from the essence of the invention.
      <br/>
      Such changes are also implicitly included in the description.
      <br/>
      They still fall within the scope of this invention.
      <br/>
      A broad disclosure encompassing both the explicit embodiment(s) shown, the great variety of implicit alternative embodiments, and the broad methods or processes and the like are encompassed by this disclosure.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>An apparatus to utilize a virtual directory of files on a computer system, the apparatus comprising:</claim-text>
      <claim-text>a) at least one file storage device which stores at least one file for use by the computer system; b) a native file directory system which provides file attribute information of at least one file storage device; c) a virtual file directory system which provides at least a portion of the file attribute information of the native file directory system and which appears to an operating system as a physical, locally attached device;</claim-text>
      <claim-text>and d) an operating system which is capable of accomplishing input/output procedures through the virtual file directory system;</claim-text>
      <claim-text>wherein the native file directory system and the virtual file directory system both may contain a common file.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The apparatus to utilize a virtual directory of files on a computer system as described in claim 1 and further comprising a retriever element which retrieves a file presented by the virtual directory.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The apparatus to utilize a virtual directory of files on a computer system as described in claim 2 and further comprising a determiner element which determines whether a storage medium is connected to the computer system.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The apparatus to utilize a virtual directory of files on a computer system as described in claim 3 and further comprising a prompter element which prompts a computer operator to mount the storage medium.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The apparatus to utilize a virtual directory of files on a computer system as described in claim 3 and further comprising a mounter element which automatically mounts the storage medium.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The apparatus to utilize a virtual directory of files on a computer system as described in claim 3 and further comprising a connector element which automatically establishes connection with a remote storage device.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The apparatus to utilize a virtual directory of files on a computer system as described in claim 1 and further comprising a storage medium which can be accessed to obtain file attribute information of files stored on the storage medium.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The apparatus to utilize a virtual directory of files on a computer system as described in claim 7 and further comprising an element which designates a particular storage medium as a medium to monitor for changes to files stored on the particular storage medium.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The apparatus to utilize a virtual directory of files on a computer system as described in claim 7 and further comprising a monitor element which monitors for a mounting of a storage medium on the computer system.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The apparatus to utilize a virtual directory of files on a computer system as described in claim 9 and further comprising: an accesser element which accesses a mounted storage medium;</claim-text>
      <claim-text>and a retriever element which retrieves information about that storage medium.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The apparatus to utilize a virtual directory of files on a computer system as described in claim 1 and further comprising an updater element which updates a virtual directory with changed file attribute information.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The apparatus to utilize a virtual directory of files on a computer system as described in claim 1 and further comprising a monitor element which monitors for changes made to the native directory.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The apparatus to utilize a virtual directory of files on a computer system as described in claim 1 and further comprising a presentation element which presents a directory of file information for a removable storage medium while the removable storage medium is not connected to the computer system.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The apparatus to utilize a virtual directory of files on a computer system as described in claim 1 and further comprising a second virtual directory for use by the operating system of the computer system.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A method of utilizing a virtual directory of files for use by an operating system of a computer system, the method comprising: a) utilizing a single computer capable of interfacing to a computer system, the computer being capable of utilizing a plurality of file storage devices, wherein at least one of the file storage devices is capable of storing a plurality of files and wherein at least one of the files comprises file attribute information; b) presenting on the single computer a native directory of at least one of the plurality of file storage devices utilized by the computer system, such that an operating system of the computer system can access a desired file by way of the native directory; c) presenting on the single computer a virtual directory for use by the operating system, the virtual directory comprising at least a portion of the file attribute information for at least one of the files stored on the plurality of file storage devices and which appears to an operating system as a physical, locally attached device;</claim-text>
      <claim-text>wherein the operating system can access through the virtual directory files represented by the file attribute information on the virtual directory;</claim-text>
      <claim-text>and wherein the native directory and the virtual directory contain a common file.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of utilizing a virtual directory of files as described in claim 15 wherein the virtual directory is accessible by an application program.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of utilizing a virtual directory of files as described in claim 15 and further comprising: accepting a command for a file presented by the virtual directory;</claim-text>
      <claim-text>and causing retrieval of the file presented by the virtual directory.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of utilizing a virtual directory of files as described in claim 17 and further comprising determining whether a storage medium is connected to the computer system.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of utilizing a virtual directory of files as described in claim 18 and further comprising prompting a computer operator to mount the storage medium if the storage medium is not mounted.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of utilizing a virtual directory of files as described in claim 18 and further comprising automatically mounting the storage medium.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The method of utilizing a virtual directory of files as described in claim 18 and further comprising automatically establishing a connection with a remote storage device.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The method of utilizing a virtual directory of files as described in claim 15 and further comprising: storing a file on at least one of the plurality of storage devices;</claim-text>
      <claim-text>and storing file attribute information of the file on the virtual directory.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. The method of utilizing a virtual directory of files as described in claim 15 and further comprising accessing a storage medium to obtain file attribute information of files stored on the storage medium.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. The method of utilizing a virtual directory of files as described in claim 15 and further comprising querying a computer operator whether file attribute information for a piece of storage media should be added to the virtual directory.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The method of utilizing a virtual directory of files as described in claim 23 and further comprising designating a particular storage medium as a medium to monitor for changes to files stored on the particular storage medium.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The method of utilizing a virtual directory of files as described in claim 25 and further comprising providing to the computer operator a list of storage media available to be monitored.</claim-text>
    </claim>
    <claim num="27">
      <claim-text>27. The method of utilizing a virtual directory of files as described in claim 26 and further comprising displaying a list of storage media being monitored.</claim-text>
    </claim>
    <claim num="28">
      <claim-text>28. The method of utilizing a virtual directory of files as described in claim 26 and further comprising displaying a list of storage media not being monitored.</claim-text>
    </claim>
    <claim num="29">
      <claim-text>29. The method of utilizing a virtual directory of files as described in claim 15 or 23 and further comprising monitoring for a mounting of a storage medium on the computer system.</claim-text>
    </claim>
    <claim num="30">
      <claim-text>30. The method of utilizing a virtual directory of files as described in claim 29 and further comprising: accessing a mounted storage medium;</claim-text>
      <claim-text>and retrieving information about that storage medium for storage on the virtual directory.</claim-text>
    </claim>
    <claim num="31">
      <claim-text>31. The method of utilizing a virtual directory of files as described in claim 30 and further comprising checking whether the mounted storage medium should be monitored.</claim-text>
    </claim>
    <claim num="32">
      <claim-text>32. The method of utilizing a virtual directory of files as described in claim 31 and further comprising checking whether any changes have been made to the mounted storage medium since the mounted storage medium was removed from the computer system.</claim-text>
    </claim>
    <claim num="33">
      <claim-text>33. The method of utilizing a virtual directory of files as described in claim 32 and further comprising updating the virtual directory with changed file attribute information from the storage medium.</claim-text>
    </claim>
    <claim num="34">
      <claim-text>34. The method of utilizing a virtual directory of files as described in claim 15 and further comprising monitoring for changes made to a monitored native directory.</claim-text>
    </claim>
    <claim num="35">
      <claim-text>35. The method of utilizing a virtual directory of files as described in claim 34 and further comprising monitoring for input/output commands to know when file changes occur.</claim-text>
    </claim>
    <claim num="36">
      <claim-text>36. The method of utilizing a virtual directory of files as described in claim 15 or 34 and further comprising monitoring for a new file saved to the monitored native directory.</claim-text>
    </claim>
    <claim num="37">
      <claim-text>37. The method of utilizing a virtual directory of files as described in claim 15 or 35 and further comprising monitoring for a new version of a file saved to the monitored native directory.</claim-text>
    </claim>
    <claim num="38">
      <claim-text>38. The method of utilizing a virtual directory of files as described in claim 36 and further comprising updating the virtual directory with file attribute information for the new file.</claim-text>
    </claim>
    <claim num="39">
      <claim-text>39. The method of utilizing a virtual directory of files as described in claim 37 and further comprising updating the virtual directory with file attribute information for the new version.</claim-text>
    </claim>
    <claim num="40">
      <claim-text>40. The method of utilizing a virtual directory of files as described in claim 15 and further comprising monitoring for a command to open a file.</claim-text>
    </claim>
    <claim num="41">
      <claim-text>41. The method of utilizing a virtual directory of files as described in claim 40 and further comprising: a) associating a file handle with a file retrieved from a monitored native directory; b) monitoring for the file handle to know when a revised file is being stored to the monitored native directory; c) capturing file attribute information for the revised file;</claim-text>
      <claim-text>and d) storing the file attribute information in the virtual directory.</claim-text>
    </claim>
    <claim num="42">
      <claim-text>42. The method of utilizing a virtual directory of files as described in claim 15 and further comprising presenting a directory of file information for a removable storage medium while the removable storage medium is not connected to the computer system.</claim-text>
    </claim>
    <claim num="43">
      <claim-text>43. The method of utilizing a virtual directory of files as described in claim 42 and further comprising receiving requests for a file stored on the removable storage medium which is not connected to the computer system.</claim-text>
    </claim>
    <claim num="44">
      <claim-text>44. The method of utilizing a virtual directory of files as described in claim 42 and further comprising automatically connecting the removable storage medium to the computer system.</claim-text>
    </claim>
    <claim num="45">
      <claim-text>45. The method of utilizing a virtual directory of files as described in claim 42 and further comprising prompting the computer operator to connect the removable storage medium to the computer system.</claim-text>
    </claim>
    <claim num="46">
      <claim-text>46. The method of utilizing a virtual directory of files as described in claim 15 and further comprising presenting a second virtual directory for use by the operating system.</claim-text>
    </claim>
    <claim num="47">
      <claim-text>47. The method of utilizing a virtual directory of files as described in claim 15 and further comprising: receiving an open file command directed to the virtual file directory, wherein the file data requested is stored on a storage medium;</claim-text>
      <claim-text>and causing the file data stored on the storage medium to be opened.</claim-text>
    </claim>
    <claim num="48">
      <claim-text>48. The method of utilizing a virtual directory of files as described in claim 15 and further comprising: receiving an open file command directed to the virtual file directory for a file represented on the virtual directory but stored on a storage medium; initiating an open file command directed to the storage medium for the file represented on the virtual directory;</claim-text>
      <claim-text>and reading the file from the storage medium.</claim-text>
    </claim>
    <claim num="49">
      <claim-text>49. The method of utilizing a virtual directory of files as described in claim 15 and further comprising: receiving a save file command directed to the virtual file system for a file to be represented on the virtual directory; initiating a save file command directed to a storage medium where the file is to be stored;</claim-text>
      <claim-text>and storing the file on the storage medium.</claim-text>
    </claim>
    <claim num="50">
      <claim-text>50. The method of utilizing a virtual directory of files as described in claim 15 and further comprising presenting the virtual directory in a hierarchical manner.</claim-text>
    </claim>
    <claim num="51">
      <claim-text>51. The method of utilizing a virtual directory of files as described in claim 15 and further comprising: entering a file name to be retrieved from the virtual directory; determining which storage medium stores file data for the file name;</claim-text>
      <claim-text>and retrieving the file data.</claim-text>
    </claim>
    <claim num="52">
      <claim-text>52. The method of utilizing a virtual directory of files as described in claim 15 and further comprising: maintaining file attribute information about at least one file not connected to the computer system;</claim-text>
      <claim-text>and presenting the file attribute information of the at least one file not connected to the computer system as a part of the virtual directory.</claim-text>
    </claim>
    <claim num="53">
      <claim-text>53. The method of utilizing a virtual directory of files as described in claim 15 and further comprising: presenting a first file having a file name in the virtual directory;</claim-text>
      <claim-text>and presenting a second file having the same file name in the virtual directory.</claim-text>
    </claim>
    <claim num="54">
      <claim-text>54. An apparatus to update a file directory in a computer system, the apparatus comprising: a) a native hierarchical file directory of the computer system comprising file attribute information; b) a second file directory having a non-hierarchical directory; c) a portion of the file attribute information of the native file directory stored in the second file directory; d) an interceptor element which monitors input/output procedures directed toward the native file directory to intercept information about changes made to files on the native file directory while allowing the changes to be made to files on the native file directory; e) a relay element which relays the intercepted information about changes made to files on the native file directory to the second file directory;</claim-text>
      <claim-text>and f) a storage medium on which to store the intercepted information.</claim-text>
    </claim>
    <claim num="55">
      <claim-text>55. The apparatus to update a file directory in a computer system as described in claim 54 and further comprising: a scanner element which scans the native file directory to detect directory information of the native file directory to relay to the second file directory.</claim-text>
    </claim>
    <claim num="56">
      <claim-text>56. The apparatus to update a file directory in a computer system as described in claim 54 and further comprising a linker element which links with I/O procedures of the native file system to intercept changes to the native file system.</claim-text>
    </claim>
    <claim num="57">
      <claim-text>57. The apparatus to update a file directory in a computer system as described in claim 54 and further comprising a monitor element which monitors I/O requests from an application program directed toward the native file directory.</claim-text>
    </claim>
    <claim num="58">
      <claim-text>58. The apparatus to update a file directory in a computer system as described in claim 54 and further comprising a monitor element which monitors for I/O requests from the operating system of the computer system directed toward the native file directory.</claim-text>
    </claim>
    <claim num="59">
      <claim-text>59. The apparatus to update a file directory in a computer system as described in claim 54 and further comprising: a copier element which copies file path information for a file being stored on the native file directory;</claim-text>
      <claim-text>and a relay element which relays the file path information to the second file system.</claim-text>
    </claim>
    <claim num="60">
      <claim-text>60. The apparatus to update a file directory in a computer system as described in claim 54 and further comprising: a checker element which checks time stamp information for a file on a removable storage medium against a last recorded time stamp for a file having the same file name as that file on the second file directory.</claim-text>
    </claim>
    <claim num="61">
      <claim-text>61. The apparatus to update a file directory in a computer system as described in claim 54 and further comprising a capturer element which captures an application program name that originates a file request command.</claim-text>
    </claim>
    <claim num="62">
      <claim-text>62. A method of updating a file directory in a computer system, the computer system having a native hierarchical file directory and input/output procedures for the input/output of files on the native hierarchical file directory, the method comprising: a) utilizing a native hierarchical file directory comprising file attribute information; b) utilizing a second file directory having a non-hierarchical directory, the second file directory comprising at least a portion of the file attribute information of the native file directory; c) monitoring input/output procedures directed toward the native file directory to intercept information about changes made to files on the native file directory while also allowing such changes to be made to files on the native file directory; d) relaying the intercepted information about changes made to files on the native file directory to the second file directory; e) saving the intercepted information in the second file directory.</claim-text>
    </claim>
    <claim num="63">
      <claim-text>63. The method of updating a file directory in a computer system as described in claim 62 and further comprising scanning the native file directory and relaying directory information of the native file directory to the second file directory.</claim-text>
    </claim>
    <claim num="64">
      <claim-text>64. The method of updating a file directory in a computer system as described in claim 62 and further comprising linking with the I/O procedures of the native file system to intercept changes made to the native file system.</claim-text>
    </claim>
    <claim num="65">
      <claim-text>65. The method of updating a file directory in a computer system as described in claim 62 and further comprising monitoring for I/O requests from an application program directed toward the native file directory.</claim-text>
    </claim>
    <claim num="66">
      <claim-text>66. The method of updating a file directory in a computer system as described in claim 62 and further comprising monitoring for I/O requests from the operating system of the computer system directed toward the native file directory.</claim-text>
    </claim>
    <claim num="67">
      <claim-text>67. The method of updating a file directory in a computer system as described in claim 62 and further comprising: copying file path information for a file being stored on the native file directory;</claim-text>
      <claim-text>and relaying the file path information to the second file system.</claim-text>
    </claim>
    <claim num="68">
      <claim-text>68. The method of updating a file directory in a computer system as described in claim 62 and further comprising monitoring for a mounting of a removable storage medium to the computer system.</claim-text>
    </claim>
    <claim num="69">
      <claim-text>69. The method of updating a file directory in a computer system as described in claim 68 and further comprising determining whether the storage medium has been connected to the computer system before.</claim-text>
    </claim>
    <claim num="70">
      <claim-text>70. The method of updating a file directory in a computer system as described in claim 69 and further comprising: reading the label of the removable storage medium; querying the second directory to see if file attribute data of the removable storage medium has been previously recorded with the second directory.</claim-text>
    </claim>
    <claim num="71">
      <claim-text>71. The method of updating a file directory in a computer system as described in claim 69 and further comprising adding file information from the removable storage medium to the second directory.</claim-text>
    </claim>
    <claim num="72">
      <claim-text>72. The method of updating a file directory in a computer system as described in claim 69 and further comprising updating on the second directory old file information for a file with new file information.</claim-text>
    </claim>
    <claim num="73">
      <claim-text>73. The method of updating a file directory in a computer system as described in claim 62 and further comprising polling a physical storage devices which can house removable media to determine whether a piece of removable media has been installed.</claim-text>
    </claim>
    <claim num="74">
      <claim-text>74. The method of updating a file directory in a computer system as described in claim 73 and further comprising checking time stamp information for a file on the removable medium against a last recorded time stamp for that file on the second file directory.</claim-text>
    </claim>
    <claim num="75">
      <claim-text>75. The method of updating a file directory in a computer system as described in claim 62 detecting a media change message from a file system driver.</claim-text>
    </claim>
    <claim num="76">
      <claim-text>76. The method of updating a file directory in a computer system as described in claim 62 and further comprising: capturing an application program name that originates a file request.</claim-text>
    </claim>
    <claim num="77">
      <claim-text>77. A computer system comprising: a) a native file directory accessible through a native file system; b) a configurable file database presentable as a virtual directory to store file attribute data which appears to an operating system as a physical, locally attached device; c) a minimum number of file attribute fields of the configurable file database for storing file attribute information;</claim-text>
      <claim-text>and</claim-text>
      <claim-text>wherein the configurable file database can be configured to have additional file attribute fields to store additional file attribute information while maintaining the accessibility of the accessible native file directory.</claim-text>
    </claim>
    <claim num="78">
      <claim-text>78. The computer system as described in claim 77 and further comprising an adder element which adds a new file attribute to the configurable file database.</claim-text>
    </claim>
    <claim num="79">
      <claim-text>79. The computer system as described in claim 77 and further comprising: a selector element which selects a file attribute field;</claim-text>
      <claim-text>and a sorter element which sorts the configurable file database based on a selected file attribute field.</claim-text>
    </claim>
    <claim num="80">
      <claim-text>80. The computer system as described in claim 77 and further comprising: a deleter element which deletes a file attribute field.</claim-text>
    </claim>
    <claim num="81">
      <claim-text>81. The computer system as described in claim 77 and further comprising and further comprising a sorter element which sorts the configurable file database based on a selected file attribute field into a first virtual directory.</claim-text>
    </claim>
    <claim num="82">
      <claim-text>82. The computer system as described in claim 81 and further comprising a sorter element which sorts the configurable file database based on a second selected file attribute field into a second virtual directory.</claim-text>
    </claim>
    <claim num="83">
      <claim-text>83. The computer system as described in claim 77 and wherein at least two files having the same file name are listed in the configurable file database.</claim-text>
    </claim>
    <claim num="84">
      <claim-text>84. A method of creating a non-hierarchical file directory for use by a computer having a native hierarchical file directory, the method comprising: a) establishing a native file directory on the computer which is accessible through a native file system; b) configuring a file database to have a first maximum number of file attribute fields; c) reconfiguring the file database to have a second maximum number of file attribute fields greater than the first maximum number of file attribute fields, presentable as a virtual directory which appears to an operating system as a physical, locally attached device, the first maximum number of file attribute fields being adjustable after the creation of the non-hierarchical file directory;</claim-text>
      <claim-text>while d) maintaining the accessibility of the native file directory system after reconfiguring the file database.</claim-text>
    </claim>
    <claim num="85">
      <claim-text>85. The method of updating a file directory in a computer system as described in claim 84 and further comprising adding a new file attribute to a file database.</claim-text>
    </claim>
    <claim num="86">
      <claim-text>86. The method of updating a file directory in a computer system as described in claim 84 and further comprising: selecting a file attribute field;</claim-text>
      <claim-text>and sorting the file database based on the selected file attribute field.</claim-text>
    </claim>
    <claim num="87">
      <claim-text>87. The method of updating a file directory in a computer system as described in claim 86 and further comprising presenting the sorted database.</claim-text>
    </claim>
    <claim num="88">
      <claim-text>88. The method of updating a file directory in a computer system as described in claim 84 and further comprising: deleting a file attribute field from the file database;</claim-text>
      <claim-text>and presenting the database.</claim-text>
    </claim>
    <claim num="89">
      <claim-text>89. The method of updating a file directory in a computer system as described in claim 84 and further comprising: selecting a file attribute field; sorting the file database into a first group of files based on the selected file attribute field;</claim-text>
      <claim-text>and presenting the first group of files in a first virtual directory.</claim-text>
    </claim>
    <claim num="90">
      <claim-text>90. The method of updating a file directory in a computer system as described in claim 89 and further comprising: selecting a second file attribute field; sorting the file database into a second group of files based on the second file attribute field; presenting the second group of files in a second virtual directory.</claim-text>
    </claim>
    <claim num="91">
      <claim-text>91. The method of updating a file directory in a computer system as described in claim 84 and further comprising utilizing time stamp information to maintain at least two files having same the same filename but different time stamp information in same file database.</claim-text>
    </claim>
    <claim num="92">
      <claim-text>92. An apparatus comprising: a) a native file directory for storing directory information; b) a virtual file directory capable of storing at least a portion of the directory information stored on the native file directory; c) a private interface coupled to the virtual file directory which is capable of communicating commands to the virtual file directory and which provides capability beyond said native file system;</claim-text>
      <claim-text>wherein the native file directory and the virtual file directory both may contain a common file.</claim-text>
    </claim>
    <claim num="93">
      <claim-text>93. The apparatus as described in claim 92 and further comprising a sorter element which sorts the virtual file directory based on user criteria input by a computer operator.</claim-text>
    </claim>
    <claim num="94">
      <claim-text>94. The apparatus as described in claim 93 and further comprising a filter to filter file information stored on a database of the virtual file directory.</claim-text>
    </claim>
    <claim num="95">
      <claim-text>95. The apparatus as described in claim 92 and further comprising a second virtual file directory.</claim-text>
    </claim>
    <claim num="96">
      <claim-text>96. The apparatus as described in claim 95 wherein the virtual file directory and the second virtual file directory are accessible to an application program of the computer system.</claim-text>
    </claim>
    <claim num="97">
      <claim-text>97. The apparatus as described in claim 96 and further comprising a reconfigurer which reconfigures the virtual file directory.</claim-text>
    </claim>
    <claim num="98">
      <claim-text>98. The apparatus as described in claim 92 and further comprising a redefiner element which redefines the hierarchy of the virtual file directory after a first hierarchy of the virtual file directory is established.</claim-text>
    </claim>
    <claim num="99">
      <claim-text>99. The apparatus as described in claim 92 and further comprising a storage medium on which to store a file represented on the virtual file directory in order to backup the file.</claim-text>
    </claim>
    <claim num="100">
      <claim-text>100. A method of utilizing a virtual file directory for a computer system, the computer system having a native file directory comprising directory information, the method comprising: a) inputting to the virtual file directory at least a portion of the directory information stored on the native file directory; b) utilizing a database to store the portion of directory information in the virtual file directory;</claim-text>
      <claim-text>and c) issuing a command to the database by way of a private interface to the virtual file directory which provides capability beyond said native file system;</claim-text>
      <claim-text>wherein the native file directory and the virtual file directory both may contain a common file.</claim-text>
    </claim>
    <claim num="101">
      <claim-text>101. The method of utilizing a virtual file directory for a computer system as described in claim 100 and further comprising managing the database based on the command issued to the database by way of the private interface.</claim-text>
    </claim>
    <claim num="102">
      <claim-text>102. The method of utilizing a virtual file directory for a computer system as described in claim 100 and further comprising: inputting user criteria for sorting of file information stored in the database;</claim-text>
      <claim-text>and sorting the file information based on the input user criteria.</claim-text>
    </claim>
    <claim num="103">
      <claim-text>103. The method of utilizing a virtual file directory for a computer system as described in claim 102 and further comprising utilizing a filter to filter the file information in the database.</claim-text>
    </claim>
    <claim num="104">
      <claim-text>104. The method of utilizing a virtual file directory for a computer system as described in claim 100 and further comprising: sorting the virtual file directory; presenting a first group of file information stored in the database in a first virtual directory; presenting a second group of file information stored in the database in a second virtual directory;</claim-text>
      <claim-text>and</claim-text>
      <claim-text>making the first virtual directory and second virtual directory accessible to the operating system of the computer system.</claim-text>
    </claim>
    <claim num="105">
      <claim-text>105. The method of utilizing a virtual file directory for a computer system as described in claim 100 and further comprising: sorting the virtual file directory; presenting a first group of file information stored in the database in a first directory; presenting a second group of file information stored in the database in a second virtual directory;</claim-text>
      <claim-text>and</claim-text>
      <claim-text>making the first virtual directory and second virtual directory accessible to an application program of the computer system.</claim-text>
    </claim>
    <claim num="106">
      <claim-text>106. The method of utilizing a virtual file directory for a computer system as described in claim 105 wherein the application program reconfigures the virtual file directory.</claim-text>
    </claim>
    <claim num="107">
      <claim-text>107. The method of utilizing a virtual file directory for a computer system as described in claim 100 and further comprising redefining a hierarchy of the virtual file directory after a first hierarchy of the virtual file directory is established.</claim-text>
    </claim>
    <claim num="108">
      <claim-text>108. The method of utilizing a virtual file directory for a computer system as described in claim 100 and further comprising presenting a native file directory in addition to the virtual file directory for use by an operating system of the computer system.</claim-text>
    </claim>
    <claim num="109">
      <claim-text>109. The method of utilizing a virtual file directory for a computer system as described in claim 100 and further comprising storing a file represented on the virtual file directory to a storage device in order to backup the file.</claim-text>
    </claim>
  </claims>
</questel-patent-document>