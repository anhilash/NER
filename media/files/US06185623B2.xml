<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185623B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185623</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185623</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="25510444" extended-family-id="42113683">
      <document-id>
        <country>US</country>
        <doc-number>08965757</doc-number>
        <kind>A</kind>
        <date>19971107</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1997US-08965757</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43172001</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>96575797</doc-number>
        <kind>A</kind>
        <date>19971107</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1997US-08965757</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>H04L  12/18        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>18</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>H04L  12/56        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>56</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>709238000</text>
        <class>709</class>
        <subclass>238000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>709220000</text>
        <class>709</class>
        <subclass>220000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>709227000</text>
        <class>709</class>
        <subclass>227000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>709232000</text>
        <class>709</class>
        <subclass>232000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>713002000</text>
        <class>713</class>
        <subclass>002000</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>713100000</text>
        <class>713</class>
        <subclass>100000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>H04L-012/18M</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>012</main-group>
        <subgroup>18M</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>H04L-012/18R1</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>012</main-group>
        <subgroup>18R1</subgroup>
      </classification-ecla>
      <classification-ecla sequence="3">
        <text>H04L-045/04</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>45</main-group>
        <subgroup>04</subgroup>
      </classification-ecla>
      <classification-ecla sequence="4">
        <text>H04L-045/16</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>45</main-group>
        <subgroup>16</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-045/04</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>45</main-group>
        <subgroup>04</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-012/1836</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>1836</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-012/185</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>185</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-012/1868</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>1868</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>H04L-045/16</classification-symbol>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>45</main-group>
        <subgroup>16</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="ICO"/>
        <classification-symbol>T04L-012/18E</classification-symbol>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>18</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>18</number-of-drawing-sheets>
      <number-of-figures>25</number-of-figures>
      <image-key data-format="questel">US6185623</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and system for trivial file transfer protocol (TFTP) subnet broadcast</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>DOSTER WILLIAM A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4644468</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4644468</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>OTTMAN TADD V, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5142680</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5142680</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>FLAHERTY JAMES E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5146568</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5146568</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>DERBY JEFFREY H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5426637</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5426637</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>CHANG EUGENE Y, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5539745</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5539745</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>MILLER C KENNETH</text>
          <document-id>
            <country>US</country>
            <doc-number>5553083</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5553083</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>AUERBACH JOSHUA S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5634011</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5634011</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>MILLER C KENNETH, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5727002</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5727002</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>HART JOHN H</text>
          <document-id>
            <country>US</country>
            <doc-number>5752003</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5752003</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>PENNERS JOHN HENRY H</text>
          <document-id>
            <country>US</country>
            <doc-number>5793758</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5793758</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>BACKES FLOYD, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5818838</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5818838</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>HANSEN PETER A</text>
          <document-id>
            <country>US</country>
            <doc-number>5819042</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5819042</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>ROTHSCHILD JEFFREY J, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5822523</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5822523</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>DORAGH PHILIP H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5822582</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5822582</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>HANSEN PETER A</text>
          <document-id>
            <country>US</country>
            <doc-number>5838907</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5838907</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="16">
          <text>BASU TUSHAR K</text>
          <document-id>
            <country>US</country>
            <doc-number>5842011</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5842011</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="17">
          <text>GROSSMAN LEONID, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5870554</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5870554</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="18">
          <text>KNOX RICHARD IAN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5872968</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5872968</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="19">
          <text>BEREITER THOMAS W</text>
          <document-id>
            <country>US</country>
            <doc-number>5875306</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5875306</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="20">
          <text>MAEDA SHOHEI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5884074</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5884074</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="21">
          <text>GUPTA VIVEK</text>
          <document-id>
            <country>US</country>
            <doc-number>5887164</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5887164</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="22">
          <text>BREWER JASON M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5918016</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5918016</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="23">
          <text>GROSSMAN LEONID, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5960175</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5960175</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="24">
          <text>KLIMENKO YEVGENIY</text>
          <document-id>
            <country>US</country>
            <doc-number>5974547</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5974547</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="25">
          <text>LU GIN-PAO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6009474</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6009474</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="26">
          <text>MEGURO SHINICHI</text>
          <document-id>
            <country>US</country>
            <doc-number>4958278</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4958278</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="27">
          <text>DAYAN RICHARD A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5230052</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5230052</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="28">
          <text>OPHER AYAL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5345558</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5345558</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="29">
          <text>DOERINGER WILLIBALD, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5361256</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5361256</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="30">
          <text>SAWANT SHIVA, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5390170</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5390170</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="31">
          <text>CHATWANI DILIP, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5400325</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5400325</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="32">
          <text>HEIMSOTH DANIEL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5454078</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5454078</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="33">
          <text>STANDISH DARRELL E, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5463735</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5463735</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="34">
          <text>YANAI KENICHI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5515072</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5515072</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="35">
          <text>SUBRAMANIAN RAJAN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5519707</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5519707</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="36">
          <text>ABDOUS ARAVE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5577210</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5577210</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="37">
          <text>VIRGILE KENNETH</text>
          <document-id>
            <country>US</country>
            <doc-number>5608726</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5608726</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="38">
          <text>TAKASE AKIHIKO, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5612959</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5612959</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="39">
          <text>QUINQUIS JEAN-PAUL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5638377</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5638377</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="40">
          <text>SONY CORP</text>
          <document-id>
            <country>JP</country>
            <doc-number>H06168198</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP06168198</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>K. Sollins, RFC 1350, MIT, 1-10, Jul., 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>W. Polites and W. Wollman, RFC 1986, MITRE, 1-19, Aug. 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>A. Emberson, "TFTP Multicast Option", IAB Internet Engineering Task Force Request for Comments (RFC) 2090, http://www.internic.net, Feb. 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>"Methodology for Avoidance of Transmission of Routing Information on Transmission Control Protocol/Internet Protocol Network" IBM Technical Disclosure Bulletin ( TDB), Nov. 1996, pp. 13-15.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="5">
          <text>"Remote Program Load of a Diskless Initial Microcode Load Computer System", IBM TDB, Dec. 1992, p. 250.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="6">
          <text>"Remote Initial Program Load of a Diskless Computing Device via a Standard Serial or Parallel Port", IBM TDB, Mar. 1992, pp. 211-213.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="7">
          <text>Lee Johg-kun. "Reduction Rules of Petri Nets for Verification of the Communication Protocol", IEEE Catalogue No. 95TH8061, undated.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="8">
          <text>Mott, J.M. "Network IPL without a TFTPD Server", IBM TDB, v. 37, n. 2B, Feb. 1994, pp. 195-198.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="9">
          <text>Rigney, S. "Solve the Address Mess", PC Magazine, n. 5, v. 16, Mar. 4, 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="10">
          <text>"DHCP As Management Aid-Software Will Automate IP Address Assignments and Reduce Potential Conflicts", Communications Week, Nov. 11, 1996, p. 5.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="11">
          <text>Giles, R. "The Internet Access Dilemma", Network VAR, n. 7, v. 4, Jul. 1996, p. 22(8).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="12">
          <text>Lin, C. "Routers In All Places", PC Magazine, n. 10, v. 15, May 28, 1996.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="13">
          <text>Baker, S. "Desktop TCP/IP's Destiny", LAN Magazine, Oct. 1995, p. 50(6).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="14">
          <text>Garfinkel, S. "Internet-to-WAN Plans? Fire Wall Required", Windows Sources, n. 9, v. 3, Sep. 1995, p. 88(3).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="15">
          <text>Witt, M. "Running TCP/IP Over ATM Networks", Telecommunications, No. 7, v. 29, Jul. 1995, p. 53(4).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="16">
          <text>Chacon, M. "NT: Older and Wiser", LAN Magazine, No. 6, v. 10, Jun. 1995, p. 51(4).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="17">
          <text>Kessler, G. "Build Great Firewalls", Network VAR, No. 6, v. 3, Jun. 1995, p. 29(5).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="18">
          <text>Watterson, K. "60 Solutions to the Cross-Platform Blues", Windows Sources, n. 8, v. 2, Aug. 1994, p. 110(11).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="19">
          <text>Podnar, T. "A New Look At Windows: InterCon Systems' TCP/Connect II Proves It Is Clearly More Than Just Another TCP/IP Package for Windows", LAN Computing, n. 5, v. 5, May 1994, p. 23(2).</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="20">
          <text>Baker, S. "It's A Stretch", LAN Magazine, No. 4, v. 9, Apr. 1994, p. 79(11).</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>International Business Machines Corporation</orgname>
            <address>
              <address-1>Armonk, NY, US</address-1>
              <city>Armonk</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>IBM</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Bailey, Scott Evan</name>
            <address>
              <address-1>Endicott, NY, US</address-1>
              <city>Endicott</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Fake, Jr., John Wesely</name>
            <address>
              <address-1>Endicott, NY, US</address-1>
              <city>Endicott</city>
              <state>NY</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Beckstrand, Shelley M</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Rinehart, Mark H.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      Subnet directed broadcasts for initial program load of network stations are not gated by clients on a slower subnet and changes in the source IP address to accommodate multiple IOPs and load balancing are permitted.
      <br/>
      A subnet broadcast server transfers a datagram including the load program together with a subnet broadcast identifier and source port identifier to client network stations on a subnet basis.
      <br/>
      Routers at subnets not matching the subnet broadcast identifier unicast the datagram to a next gateway; and routers at broadcast identifier matching subnets data link layer broadcast unicasted datagrams from intervening subnets to all neighbors on the matching subnet while disregarding forwarding this data link layer broadcast to any adjoining subnets.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Technical Field of the Invention
    </p>
    <p num="2">
      This invention pertains to file transfer to multiple clients.
      <br/>
      More particularly, it pertains to subnet directed Trivial File Transfer Protocol (TFTP) broadcasts, such as for initial program load of network stations; and further to subnet directed TFTP broadcasts not gated by clients on a slower subnet path while allowing changes in the source IP address to accommodate multiple IOPs and load balancing.
    </p>
    <p num="3">2. Background Art</p>
    <p num="4">
      Diskless network stations use Trivial File Transfer Protocol (TFTP) to load their initial program.
      <br/>
      This requires each station to request the load with a separate request.
      <br/>
      The server in turn transmits the load file using a dedicated process.
      <br/>
      During peak hours when potentially hundreds of workstations could be requesting their initial program loads, server and network overloads cause long delays in initializing, or booting, the network stations.
    </p>
    <p num="5">
      For example, in the IBM AS/400 system, when more than six network stations request their boot programs simultaneously, the current TFTP server starts six or more separate jobs to service them.
      <br/>
      This currently drives the network interface driver card to near 100% utilization, resulting in subsequent requests being deferred until the current requests are satisfied.
      <br/>
      Furthermore, when the IBM AS/400 system is handling all six jobs, the network bandwidth is reduced by about 50%, thus impacting other stations already on the network.
    </p>
    <p num="6">
      RFC 2090 suggests a possible solution to this problem by multicasting the load programs to all network stations that join a multicast group. (See IAB Internet Engineering Task Force (IETF) Request for Comments (RFC) 2090 "Trivial File Transfer Protocol (TFTP) Multicast Option" available on the internet at url: http://www.internic.net.) This requires that all routers support multicast functions, or doesn't accommodate those that don't.
      <br/>
      When this solution is used in a subnetted network, all clients are gated by the master client regardless of the rates of transfer of other network stations.
      <br/>
      This problem becomes acute when a network station on a remote, slower network becomes the master for the multicast group.
      <br/>
      Furthermore, RFC 2090 suggests verifying the server Internet Protocol (IP) address from which data is received.
      <br/>
      When the IP address from which the packet is received changes due to dynamic routing, the transfer may fail, requiring a rerequest by the client.
    </p>
    <p num="7">It is an object of the invention to provide an improved file transfer protocol to multiple clients.</p>
    <p num="8">It is an object of the invention to provide an improved file transfer protocol which allows the source IP address to vary.</p>
    <p num="9">It is an object of the invention to provide an improved file transfer protocol to multiple clients which allows the source IP address to vary to accommodate multiple IOPS and load balancing.</p>
    <p num="10">It is a further object of the invention to provide for file transfer on a subnet basis.</p>
    <p num="11">It is a further object of the invention to provide for file transfer on a subnet basis so as to minimize file transfer rates on a particular subnet, there being no gating by a client on a slower subnet path.</p>
    <p num="12">
      It is a further object of the invention to reduce network traffic on intervening hops.
      <br/>
      Intervening hops are networks separating the network to which the host is connected from the network to which a client is connected.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="13">
      Method and system for booting diskless workstations by subnet broadcasting load programs to all network stations that join a subnet broadcast file group.
      <br/>
      A subnet broadcast server transfers files using datagrams, which contains a subnet broadcast identifier and source port identifier, to client network stations on a subnet basis.
      <br/>
      Routers at subnets not matching the subnet broadcast identifier unicast the datagram to the next router; and routers at broadcast identifier matching subnets data link layer broadcast the received unicasted datagrams from intervening subnets to all neighbors on the matching subnet while disregarding forwarding this data link layer broadcast to any adjoining subnets.
    </p>
    <p num="14">Other features and advantages of this invention will become apparent from the following detailed description of the presently preferred embodiment of the invention, taken in conjunction with the accompanying drawings.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="15">
      FIG. 1 is a system diagram of a network including a plurality of subnets.
      <br/>
      FIG. 2 illustrates the base command format for various commands used by AS/400 TFTP and broadcast TFTP.
      <br/>
      FIG. 3 illustrates the format of the TFTP opcode and TFTP data fields of the TFTP read request/write request (RRQ/WRQ) command.
      <br/>
      FIG. 4 illustrates the format of the opcode/data fields of the TFTP data (DATA) command.
      <br/>
      FIG. 5 illustrates the format of the opcode/data fields of the TFTP acknowledge (ACK) command.
      <br/>
      FIG. 6 illustrates the format of the opcode/data fields of the TFTP error (ERROR) command.
      <br/>
      FIG. 7 illustrates the format of the opcode/data fields of the TFTP read request/write request (RRQ/WRQ) commands with extensions for the blocksize request and subnet broadcasting request.
      <br/>
      FIG. 8 illustrates the format of the opcode/data fields of the option acknowledgment (OACK) command for the blocksize option.
      <br/>
      FIG. 9 illustrates the format of the opcode/data fields of the option acknowledgment (OACK) command for the subnet broadcasting option.
      <br/>
      FIG. 10 illustrates the format of the opcode/data fields of the broadcast data (BDATA) command.
      <br/>
      FIG. 11 is a system diagram illustrating in greater detail a portion of the network of FIG. 1.
      <br/>
      FIGS. 12A-12E, arranged as shown in FIG. 12, are a process flow diagram of the method executed for a client to request a broadcast and establish itself as either a master client or a passive client.
      <br/>
      FIGS. 13A-13D, arranged as shown in FIG. 13, are a process flow diagram of the method executed by a master client to receive a boot file from a server and thereafter to relinquish control.
      <br/>
      FIGS. 14A-14B, arranged as shown in FIG. 14, are a process flow diagram of the method executed by a passive client to join a broadcast group and receive a partial boot file, and thereafter to become the master client and receive the remainder of the boot file.
      <br/>
      FIG. 15 is a process flow diagram of the method executed at a network station gateway bridge or router.
      <br/>
      FIG. 16 is a diagram illustrating the format of the IP header of FIG. 2.
      <br/>
      FIG. 17 is a diagram illustrating the format of a UPD header.
    </p>
    <heading>BEST MODE FOR CARRYING OUT THE INVENTION</heading>
    <p num="16">
      In accordance with the invention, a method and system are provided for booting diskless workstations by broadcasting (transferring or sending in parallel) load programs (files) to all network stations that join a broadcast file transfer group.
      <br/>
      A Subnet Broadcast Trivial File Transfer Protocol (SBTFTP) server handles the file transfer to client network stations on a subnet basis, thereby minimizing file transfer rates on a particular subnet, there being no gating by a client on a slower subnet path.
      <br/>
      A SBTFTP data packet includes a Subnet Broadcast Identifier (SBI) which along with the source's port uniquely distinguishes a file transfer from a particular (SBTFTP) server, thus allowing the source's address to vary.
      <br/>
      Hops (subnets not matching the broadcast subnet) unicast the datagram to the next gateway; and routers connected to the broadcast subnet destination broadcast unicasted datagrams from an intervening subnet to all neighbors on the subnet using a data link layer broadcast while disregarding forwarding this data link broadcast to any adjoining subnets.
    </p>
    <p num="17">
      With the great number of potential network station terminals that could be started in parallel, especially during peak hours and/or power-up situations, a TFTP server may become quickly inundated with read requests on the initial boot kernel.
      <br/>
      In accordance with this invention, this is handled by using a "send to all" solution which is an improvement on that described in RFC 2090, "TFTP Multicast Option", by A. Emberson.
    </p>
    <p num="18">
      Intranet systems, i.e. company systems, include both logical and physical networks.
      <br/>
      The larger logical network is broken down into subnets which link the various physical token rings, ethernets, and so forth, into the larger logical network.
      <br/>
      These physical networks can be joined by either bridges or routers.
      <br/>
      Bridges are used to link physical networks if they consist of the same physical medium and can be linked at the MAC layer.
      <br/>
      Routers are used to link physical networks if they consist of dissimilar physical mediums (involving a medium change from, for example, token ring to ethernet), and always transfer data at the IP layer.
      <br/>
      It is at the router boundaries where the subnets of a logical network are defined.
    </p>
    <p num="19">
      There are several classes of broadcasting, as specified in RFC 919.
      <br/>
      These include broadcasting (1) at the data link layer; (2) at the local net layer using the IP layer; and (3) directly to remote IP networks (referred to as the letter bomb.)
    </p>
    <p num="20">
      Referring to FIG. 1, a collection of subnets includes subnets 100, 102, 104 and 106, having subnet addresses or identifiers 9.130.69.xx, 9.130.42.xx, 9.5.12.xx, and 9.130.33.xx, respectively.
      <br/>
      Host TFTP server 110 is illustrated as residing on subnet 100.
      <br/>
      Router B 112 links subnets 100 and 102; router D 114 links subnets 102 and 106; router C 116 on subnet 102 and router E 118 on subnet 104 link subnets 102 and 104 over remote link 108.
      <br/>
      Network station clients on subnet 100 include clients 122, 124 and 126; on subnet 102 include clients 132, 134 and 136; on subnet 104 include clients 142, 144 and 146; and on subnet 106 include clients 152, 154 and 156.
      <br/>
      Path 162-165 represents a unicast from server A 110 to router B 112 and thence to router D 114.
      <br/>
      Path 172-174 represents a data packet broadcast from router 114 to the data link layer of subnet 106 where it is received by three clients 152, 154 and 156.
    </p>
    <p num="21">
      With the notion of subnetting as discussed above, there is also a subnet directed broadcast.
      <br/>
      In accordance with this invention, in a subnet directed broadcast, host server 110 determines the subnet 106 on which are located multiple clients 152, 154, 156 and broadcasts the datagram to that specific subnet 106.
      <br/>
      All hops (that is, subnets 102 not matching the broadcast subnet 106) unicast the datagram to the next router 114.
      <br/>
      When a router 114 which is connected to the broadcast subnet 106 destination receives an unicasted datagram from an intervening subnet 102, it broadcasts it to all the neighbors 152, 154, 156 on the subnet 106 using a data link layer broadcast.
      <br/>
      Any gateway router on this subnet 106 (not shown, but equivalent to gateway router C 116 on subnet 102) disregards forwarding this data link broadcast to any adjoining subnets (not shown, but equivalent to subnet 104.)
    </p>
    <p num="22">
      Referring to FIGS. 2 through 6, the formats of TFTP packet commands 180 are illustrated.
      <br/>
      In FIGS. 7 through 10, modifications to the formats of FIGS. 2 through 5 for the subnet broadcast options are illustrated.
    </p>
    <p num="23">
      Referring to FIG. 11, the system of FIG. 1 is shown in greater detail.
      <br/>
      Store 120 at server 110 contains the initial boot kernal file, comprising blocks 1 through k, with block n designating the last block transmitted from store 120.
      <br/>
      Server 110 maintains several control registers, among them restricted ports identifiers 155, TFTP well known port pool 153, broadcast list 150, and master client identifier 151.
      <br/>
      A second server 130 may also access store 120, or a separate store also containing the initial boot kernal.
      <br/>
      Routers 112 and 114 access filters 129, 128, respectively.
      <br/>
      Clients 152, 154, and 156 each contain a storage 121, 123 for storing the boot kernal file as it is received from store 120; and a plurality of control registers 125, 127, including block size register 131, subnet broadcast identifier (SBID) register 133, IP address register 135, broadcast port identifier 137, request port identifier 139, block numbers received file 141 and source address register 143.
    </p>
    <p num="24">Referring further to FIG. 2, a TFTP packet command 180 includes a local medium header field 200, internet protocol header field 202, user datagram protocol header 204, TFTP opcode field 206 and TFTP data field 208.</p>
    <p num="25">Referring to FIG. 3, for read request and write request commands 182, TFTP opcode field 206 is set to 01 for read request (RRQ) and 02 for write request (WRQ), and TFTP data field 208 includes file name 210 and mode 212.</p>
    <p num="26">Referring to FIG. 4, for data commands 184, TFTP opcode field 206 is set to 03, and TFTP data field 208 includes block number field 214 and data field 216.</p>
    <p num="27">Referring to FIG. 5, for acknowledge commands 186, TFTP opcode field 206 is set to 04, and TFTP data field 208 includes block number field 214.</p>
    <p num="28">Referring to FIG. 6, for error commands 188, TFTP opcode field 206 is set to 05, and TFTP data field 208 includes error code field 220 and error message field 222.</p>
    <p num="29">
      Referring to FIG. 7, for read request and write request commands 182 in accordance with the present invention, TFTP opcode field 206 is set to 01 for read request (RRQ) and 02 for write request (WRQ); TFTP data field 208 includes file name 210 and mode 212 and (a) optionally for requesting blocksize 190, block size field 224 and number of octets field 226; or (b) optionally for requesting subnet broadcasting 192 (for RRQ, field 206=01, only), subnet broadcast (sbroadcast) field 228, subnet mask (subnetmask) field 230, TSIZE field 232 and ASCII 0 filed 234.
      <br/>
      Subnet broadcast field 228 is a case insensitive, NULL-terminated field specifying the subnet broadcast option.
      <br/>
      Subnet mask field 230 is the subnet mask of the subnet to which the requested file is to broadcast, specified in dotted decimal notation as a NULL terminated ASCII string.
      <br/>
      Subnet broadcast address 228 is derived from the client's source address 143 and the subnet mask 230 the client sends as part of the request (FIG. 7.) Subnetwork mask 230, also referred to as the network mask 230, is configured on the network station, say client 154.
    </p>
    <p num="30">
      Referring to FIG. 16, IP header 202 includes version 250, length 252, type of service 254, total length 256, identification 258, flags 260, fragment offset 262, TTL 264, protocol 266, header checksum 268, source IP address 270, destination IP address 272, and options 274 fields.
      <br/>
      Server A 110 receives the client IP address 272 in IP header 202.
      <br/>
      A sockets interface is typically used to get the source IP address 270 from IP header 202.
    </p>
    <p num="31">
      TSIZE, as well as all other options 274, may be used independently of other options.
      <br/>
      For example, referring to FIGS. 8 and 9, the BLKSIZE option 224 of FIG. 8 could be used along with the SUBNET option of FIG. 9.
      <br/>
      Then, OACK 06 would include both FIGS. 8 and 9 concatenated (minus the second, redundant op code 206.)
    </p>
    <p num="32">
      Referring to FIGS. 8 and 9, server 110 responds to a RRQ 182 from client 154, for example, with an OACK command 194 or 196.
      <br/>
      If server 110 is willing to accept the subnet broadcast option, it sends an option acknowledgement (OACK) command 196 including the subnet broadcast option 228, otherwise the blocksize option 224 of FIG. 8.
      <br/>
      Only requested options 274 will be included in OACK 06 field 206 if they are accepted.
      <br/>
      In FIG. 8, TFTP data field 208 includes blocksize field 224 and -octets field 226.
      <br/>
      In FIG. 9, TFTP data field 208 includes subnet broadcast field 228; in field 236 PORT field 235, SBID field 237, and MC field 239; transfer size (TSIZE) field 232 and - bytes in file field 238.
    </p>
    <p num="33">In FIG. 9, subnet broadcast field 228 is a case insensitive, null-terminated field containing "sbroadcast", an acknowledgment or acceptance of the subnet broadcast option.</p>
    <p num="34">PORT field 235, a field within field 236 terminated with a comma, designates the port to which packets will be broadcast on the subnet, specified as a decimal number in ASCII with valid values ranging from 0 to 65535.</p>
    <p num="35">
      SBID field 237, a field within field 236 terminated with a comma, designates the subnet broadcast identification number specified as a decimal number in ASCII with valid values ranging from 0 to 4294967295.
      <br/>
      This SBID is used in BDATA packets (see FIG. 10) to help verify the packets are for the requested transfer.
      <br/>
      Server 110 generates SBID with the intent to ensure uniqueness.
    </p>
    <p num="36">MC field 239, a field within field 236 is a NULL terminated field set to ASCII 1 to indicate the client 152, for example, is a master client, which is responsible for sending acknowledgment commands (ACKs) 186 to server 110; or to ASCII 0 to indicate client 154, for example, is not a master client, and will passively receive packets sent by server 110.</p>
    <p num="37">
      Referring to FIG. 17, the port from which the server sends the OACK packet is contained in the UDPi header 278, which includes source port field 280, destination port field 282, length field 284 and checksum field 286.
      <br/>
      Port 235 (FIG. 9) is the port on which client 154 listens to receive BDATA packets 198.
    </p>
    <p num="38">
      Client 154 stores in broadcast port ID register 137 the port 235 from which the server sends the OACK packet 196 for verification of future packets.
      <br/>
      After OACK 196 is received by client 154, client 154 sends back an ACK 186 for packet 0.
      <br/>
      This first ACK 186 is sent whether or not client 154 is the master client.
      <br/>
      As with non-subnet broadcast transfers, this ACK 186 indicates acceptance of the options specified in the OACK 196.
      <br/>
      If client 154 does not accept the options specified in OACK 196, it must send an error (ERR) packet 188 to terminate the requested transfer.
      <br/>
      The ACK 186 by the first client, which is the initial master client 154, will indicate to server 110 that client 154 wants the first packet.
      <br/>
      ACK packets 186 from master client 154 will now be considered both (1) an acknowledgment of the previous BDATA packet 198 received and (2) a request for next block number n+1 from store 120, where n is the block number of the last block transmitted, that is, block 214 of ACK packet 186.
      <br/>
      Instead of DATA packets 184, server 110 sends BDATA packets 198 to the broadcast port specified in PORT field 235 of OACK 196 in the subnet broadcast version of TFTP.
    </p>
    <p num="39">
      Blocks from store 120 need not be requested consecutively.
      <br/>
      However, to prevent unnecessary packet 184 duplication, blocks are requested in ascending order.
      <br/>
      Server 110 ignores ACK packets 186 for block numbers 214 1 through n-1, which precede the last data block n 198 sent.
      <br/>
      This avoids the "Sorcerer's Apprentice" bug described in RFC 1123, "Requirements for Internet Hosts--Application and Support."
    </p>
    <p num="40">
      Master client 154 is the only client which must send ACK packets 186.
      <br/>
      All other clients 152, 156, etc. do not send packets 186 to server 110 until they become the master client, unless they are terminating their transfer.
      <br/>
      This way, master client 154 controls the blocks 198 to be broadcast from store 120.
    </p>
    <p num="41">
      All clients 152, 154, 156 in a subnet broadcast TFTP transfer group 106 listen on the port number specified in the OACK 196 sbroadcast option value 235.
      <br/>
      This port 235 is designated the broadcast port 137.
      <br/>
      All clients also listen on the port number 139 from which they initially made request 182.
      <br/>
      Server 110 may unicast to the port 139 from which client 154 initially made the request (assuming it is different than the broadcast port 137, 235), or it may unicast or broadcast packets 198 to the subnet 106 and the broadcast port 235.
    </p>
    <p num="42">Referring further to FIG. 10, BDATA block 198 (TFTP OPCODE field 206 equals 10), includes in TFTP data field 208 block number field 214, SBID field 240 and data field 216.</p>
    <p num="43">
      Block- 214 is the block number n of data being sent.
      <br/>
      This is the same as the block number field 214 of DATA packets 184; that is, a two byte integer in network byte order.
      <br/>
      The last block number 214 can also be determined by using transfer size option field 232.
    </p>
    <p num="44">
      SBID 240 is the four byte integer form of the subnet broadcast identifier 237 in network byte order.
      <br/>
      This is stored in register 133 and must match the value of SBID 237 sent in the OACK response 196 for the sbroadcast option converted to the four byte network byte order form.
    </p>
    <p num="45">
      Data 216 is the data for the current block 198 of the file being transferred from store 120 to file 121, 123 (for clients 152, 154, respectively).
      <br/>
      The length of this field is less than or equal to the block size 131 for this transfer.
    </p>
    <p num="46">
      Client 154 verifies that the SBID 240 in the BDATA packet 198 matches the SBID 133 sent in OACK 196 and that the port number from which packet 198 was received matches the port number 137 from which the initial server reply OACK 196 was received.
      <br/>
      Clients 154 ignore the IP address in IP header 202 for packets 198 which are received, as this could change due to dynamic route assignment.
      <br/>
      All clients 154, etc. ignore BDATA packets 198 which do not have the expected SBID 133, 240 or do not come from the expected port 137.
      <br/>
      All clients 154, etc. keep track of the block numbers 141, 214 they have received.
    </p>
    <p num="47">
      Master client 154 sends ACK packets 186 for blocks it receives setting block number 214 in ACK 186 to the block preceding the next block it requires, which will be the last consecutive block stored to file 123 and logged to block numbers received log 141 which is one block less than the first block which has not been received.
      <br/>
      This may include sending duplicate ACK packets 186 when client 154 receives the same block 198 multiple times due to server 110 resending BDATA packets 198 after timing out waiting for an ACK packet 186.
      <br/>
      Network station packets 186 acknowledging a BDATA packet 198 must be sent to the address and port from which the BDATA packet 198 being acknowledged was sent.
      <br/>
      Also, network station packets 186 must be sent from the port from which client 154 sent its initial request.
      <br/>
      Once master client 154 has received all the blocks 1 through k in file 120, it sends an ACK 186 with block number 214 set to the last block number k. Once server 110 receives an ACK 186 of the last block number k 214, current master client 154 is no longer considered part of the subnet broadcast group.
      <br/>
      If there are no clients (such as 152 or 156) left in the subnet broadcast group 150, the group transfer is considered complete.
      <br/>
      If there are more clients, for example client 156, in group 150, server 110 sends an OACK packet 196 to the next client 156 in the group.
      <br/>
      The OACK packet 196 sent to next client 156 includes the sbroadcast option 228, but it may have empty port 235 and SBID 237 fields, since these fields were sent to client 156 in reply to the initial client 156 request 182.
      <br/>
      Client 156 responds to the OACK packet 196 with an ACK packet 186 for the block m immediately preceding the first block required for client 156 to complete the transfer.
    </p>
    <p num="48">
      All clients 152, 154, 156, . . . send packets to server 110 from the address 135 and port 139 which they initially used for the request packet 182 sent to server 110.
      <br/>
      However, clients 152, 154, 156, . . . depend only on the port from which server 110 sends packets, and do not expect the address from which server 110 sends to be constant.
      <br/>
      If server 110 has multiple addresses in network (FIG. 1), the address from which the server sends may change.
    </p>
    <p num="49">
      Each client 152, 154, 156 terminates the transfer by sending an ACK packet 186 for the last block k or by sending an error packet 188 to server 110.
      <br/>
      This termination of a client transfer can occur at any time, even if the client is not the master client.
      <br/>
      At any point, if server 110 receives an ACK packet 186 from a client 152 other than master client 154 with a block number other than the last block number, server 110 sends another OACK packet 196 to client 152 with MC field 239 set to zero to indicate to client 152 that it is not the master client.
      <br/>
      If a client 152 other than master client 154 sends more than, say, ten erroneous ACK packets 186 server 110 ends the offending client's transfer by sending an ERROR packet 188 to the offending client 152.
    </p>
    <p num="50">
      If timeouts occur waiting for a response from master client 154, server 110 may switch the master client to the next client 156 in list 150 and upon completion of the transfer to the new master client 156 switch back to the previous master client 154.
      <br/>
      Master client 154 is prepared to receive an OACK packet 196 indicating it is no longer the master client and will then stop sending ACK packages 186 for BDATA blocks 198 received.
    </p>
    <p num="51">By way of summary, in accordance with the protocols of the invention:</p>
    <p num="52">
      1.
      <br/>
      One and only one client 154 will acknowledge with an ACK packet 186 a broadcast BDATA packet 198 for any one broadcast group 106.
      <br/>
      A broadcast group is a group of clients 152, 154, 156 receiving a particular broadcast 198.
      <br/>
      An exception is when a client which is not the master sends an acknowledge for the last block when it has received all the blocks.
    </p>
    <p num="53">
      2. The initial read request 182 is directed to the server 110 listening, in this embodiment, on the TFTP well-known port 153.
      <br/>
      The well known port number 153 for TFTP is "69".
    </p>
    <p num="54">3. The initial client, master client 154, that acknowledges the BDATA packets 198 from server 110 must send an ACK packet 186 for the last block k when it has received all the data packets 198 it requires.</p>
    <p num="55">
      4. The server 110 broadcasting packets 198 does so on a port selected from the free port pool on the pool 155 of restricted ports defined for the TFTP server.
      <br/>
      Thus, server 110 can subnet broadcast to any one subnet 102, 104 or 106 at any one time a number of file/blocksize/modes up to the amount of configured servers or defined restricted ports.
    </p>
    <p num="56">
      5. Server 110 matches a broadcast request 182 from a client 152, 154 or 156 on subnet 106 for a given file 210 and block size 224 and mode 212 to other servers 130 that may be broadcasting that given file 210 and block size 224 and mode 212.
      <br/>
      If none are found, server 110 becomes the new broadcasting server for that file 210/mode 212/blocksize 224 and subnet 106.
    </p>
    <p num="57">
      6. Server 110 may OACK 196 the request with a smaller block size 224 to utilize other existing broadcasting servers 130.
      <br/>
      Client 154 must accept the smaller blocksize 224 or go back to plain TFTP.
    </p>
    <p num="58">
      7. A listening controller (i.e., server) 110 places a client 152 on broadcast list (not shown, but similar to 150) for another eligible broadcasting server 130, else server 110 becomes the server.
      <br/>
      Broadcasting server 110 must remove the terminating master client 154 from the list 150 and assign a new control (i.e., master) client 151, 156.
    </p>
    <p num="59">8. Master client 154 sends an ACK 186 for the last block number k or an error packet 188 to give up control and indicate it is done receiving packets 198.</p>
    <p num="60">9. If master client 154 does not send an ACK 186 for the last block k within the allowed number of timeouts and retries, it is purged from the list 150 and the next client 156 is assigned as the master client 151.</p>
    <p num="61">10. ACK packets 180 are not broadcast but are sent to the IP address and port from which packet 180 being acknowledged was received.</p>
    <p num="62">
      11. Client 156 keeps track, as is represented by file 141, of the packets 198 it has received and the ones it does not have.
      <br/>
      It requests in ascending order the missing packets 198 when it becomes the controlling (master) client 151.
    </p>
    <p num="63">
      12. When a client 154 requests a subnet broadcast, a broadcast port 235 is returned in OACK 196 and stored in register 137.
      <br/>
      Client 154 then listens to any address on that port 137 and the port 139 from which the client 154 made its original request.
      <br/>
      Initial packets from file 120 may be unicasted to just a master client 151, 154 until another client 156 joins the transaction and is added to broadcast list 150.
      <br/>
      Blocks that are unicasted will still be sent in BDATA packets 198 and will have the SBID 240.
    </p>
    <p num="64">
      Subnet broadcast TFTP server 110 has two sets of ports it uses.
      <br/>
      The source set of ports do not have to be unique.
      <br/>
      These could be arbitrarily allocated and used.
      <br/>
      However, in accordance with another aspect of the invention, when broadcasting through routers 112, 114 which may use filters 129, 128, respectively, to block directed broadcasts, server 110 checks set 155 of restricted ports and uses only those which are reserved for the QTFTP profile.
      <br/>
      If a set of ports have been defined, only the defined set of ports will be used as source ports for broadcasting.
      <br/>
      This allows network administrators to define filter 128, 129 rules that allow network station TFTP subnet broadcasting packets to get through their routers 112, 114 while still blocking out unwanted broadcasts from any other hosts.
    </p>
    <p num="65">
      The destination ports for subnet broadcast TFTP server 110 is a port 153, which is in this embodiment a well-known port.
      <br/>
      The uniqueness of the sending port allows multiple file transfers from the host 110 using multiple server jobs.
      <br/>
      If two servers 110, 130 broadcast to the same subnet a collision could occur.
      <br/>
      Consequently, client 154, 156 matches the SBID in the packet and the port on which the packet was received before processing it as part of the transaction.
      <br/>
      This ensures that packets sent to the same ports are not misinterpreted by client 154, thus causing file 123 corruption.
      <br/>
      This port (number 247) is well known and is sent as 235.
      <br/>
      It is not configured.
    </p>
    <p num="66">Client 154 also ensures that the datagram is for the file (mode blocksize) by checking the SBID 133 which was originally sent as part of the OACK 196 when the client made its initial broadcast RRQ 182.</p>
    <p num="67">
      A list 140 of broadcasting servers 110, 130 is maintained in global space, such as a user space, where the current listening job and broadcasting servers 110, 130 could interrogate.
      <br/>
      Elements in each entry of this list of servers 140 include:
    </p>
    <p num="68">Filename 210: fully qualified name of file 120 to be transferred.</p>
    <p num="69">Mode: this will either be NET-ASCII or octet (binary), and is the same as that received in the initial RRQ command 182.</p>
    <p num="70">Subnet: this is the subnet 106 (i.e., 9.130.33.xx) that this server 110 is broadcasting to.</p>
    <p num="71">Server's IP/port: this will be used to forward requests received at one server 130 to servers 110 already broadcasting.</p>
    <p num="72">
      Requests pending: this value is incremented when a client's RRQ 182 is passed along to an already broadcasting server 110.
      <br/>
      It is decremented by the broadcasting server 110 when the forwarded request is received by the broadcasting server.
    </p>
    <p num="73">Referring to FIGS. 12A through 12E, in accordance with the invention, an exemplary process executed by a client 154 to request a broadcast and establish itself as either a master client or a passive client will next be described.</p>
    <p num="74">In step 300, client 154 issues a read request (RRQ) 182 with broadcast option 192.</p>
    <p num="75">In steps 302 and 304, server 110 listening on, for example, a well-known port reads the initial packet 180/182 and passes the listen socket to the next server job on the job queue.</p>
    <p num="76">
      In step 306, server 110 checks to see if this is a broadcast RRQ 182, 190, 192 and if so passes control to step 310.
      <br/>
      If not, in step 308 the RRQ is handled as a regular TFTP request, and further processing as a broadcast request ends.
    </p>
    <p num="77">In step 310, server 110 determines the filename 210, 120, mode 212, blocksize 131 and subnet 106.</p>
    <p num="78">In step 312, to obtain a lock on server list 140, server 110 issues a write lock on currently active servers and will timeout and retry if lock is not granted.</p>
    <p num="79">
      In steps 314 and 316, if the lock is granted and server 110 determines that other servers are active, in step 316 server 110 checks list 140 for match on filename, mode, and subnet.
      <br/>
      The requested block size must be greater than or equal to an active server's block size to be considered a match.
      <br/>
      The default block size is 512 if none is requested.
    </p>
    <p num="80">In steps 318, 320, 322, and 324, if server 110 matches a currently broadcasting server 130, the lock on server list 140 is released after the number of clients is updated and the request pending count is incremented.</p>
    <p num="81">In steps 326 and 328, server F having been identified as the broadcast server, a datagram is sent to the IP address of server 130 telling it to add this client to its list 150.</p>
    <p num="82">In step 330, an OACK 196 is passed to the requesting client 154 with the blocksize and subnet broadcasting information filled in; the MC bit 239 is set to 0 indicating the client is not the master.</p>
    <p num="83">If in step 318, server 110 doesn't find a match in server list 140, in steps 332, 334, 336 and 338 server 110, having become the subnet broadcasting server, adds the file name 210, block size 224, mode 212, and subnet 106 along with other information required to the entry in server list 140 for this server 110.</p>
    <p num="84">In step 340, server 110 sends OACK packet 196 with option replies including subnet broadcast option 228 with MC bit 239 set to 1 to client 154 making the RRQ 182.</p>
    <p num="85">
      Meanwhile, in step 342, client 154 has been listening for the OACK response.
      <br/>
      Upon receiving OACK 196, in step 344 client 154 determines if the MC bit 239 is set to "1".
      <br/>
      If MC is equal to "1", as is represented by step 346, client 154 has become the master client, and will in step 354 (FIG. 13A) send an ACK 186 to server 110 with the block- 214 set to "0".
      <br/>
      This ACK 186 is sent from the client's initial request IP address and port to the IP address and port from which the last server packet was received.
      <br/>
      If MC is not equal to "1", client 154 has become a passive client, and will pick up processing at steps 400 and 402 (FIG. 14A).
    </p>
    <p num="86">Referring to FIGS. 13A through 13D, in steps 376 through 380, each time broadcasting server 110 receives the acknowledgement 186 it checks the number of clients in list 150 to see if it should switch to a broadcast mode.</p>
    <p num="87">
      Further, server 110 may receive requests from a listening server 130 between the time it sends an OACK 196 packet in step 340 or a BDATA 198 packet in steps 378 or 380, indicating it should add a client 152 to its client list 150.
      <br/>
      These client entries are added to the end of list 150.
    </p>
    <p num="88">
      In step 378, server 110 starts unicasting the BDATA blocks 198 and in steps 382 and 364, waits for ACKs 186 from master client 154.
      <br/>
      If server 110 determines in step 376 that there is more than one client in the server's client list 150, in step 380 it broadcasts the BDATA blocks 198.
    </p>
    <p num="89">
      In steps 356 and 360, when master client 154 sends an ACK 186 with block number 214 for last block k, in steps 370, 372 and 374, server 110 removes client 154 from list 150 and sends an OACK 206 to the next client 152 in list 150 with MC bit 239 set to "1".
      <br/>
      This client 152, now the master client, can in steps 356, 358, 384 and 386 then request the blocks m, n it needs to complete its transfer of file 120.
      <br/>
      In step 388, client 152 checks subnet address and notes the port at which the datagram originated (the source port, or the port used by source 110.)
    </p>
    <p num="90">
      In step 356 and 360, when a transfer of file 120 has completed in broadcast mode to master client 154, master client 154 has received the entire file 120 to its file 121.
      <br/>
      The next client 152 on list 150, a passive client, may have joined the broadcast anywhere during the transmission of file 120, for example, at the transmission of block m.
    </p>
    <p num="91">
      In step 374, this client 152 then receives an OACK 196 directly to its port/IP address 139/135 registered in client list 150 with MC bit 239 set to a "1".
      <br/>
      No fields are present in the SBID 237 and port 235 portions of the string 236 ",,1".
      <br/>
      In step 354 or 358, this client 152 then sends an ACK 186 with the block number of the next block it requires minus 1.
      <br/>
      In this case, where blocks 1 through m-1 are required, block- 214 would be set to "0".
      <br/>
      When client 152 has received all blocks 1 through m-1, in step 360 it will send an ACK 186 with block- 214 set to block k, the last block of the file, to server 110.
    </p>
    <p num="92">While, in step 340, subnet broadcast identifier (SBID) 237 is returned in the first OACK 196 for a broadcast file, the source IP/port address 202 of the OACK is the port and address where the initial ACK 186 packet is sent.</p>
    <p num="93">
      If, in step 366, next client 152 has been shut down or can not respond after a suitable timeout period, in steps 370 and 372, server 110 removes it from the active list 150 and shifts the entire list 150 up and, in step 374 sends the OACK 196 to the next oldest client, say, 156.
      <br/>
      Client 156 responds in step 354 or 358 with an ACK 186 including the block- 214 of the block it wants broadcast minus one.
    </p>
    <p num="94">Referring further to FIGS. 13A through 13D, in accordance with the invention, the steps executed in passing control to a next client 152 will be further described.</p>
    <p num="95">In steps 380 and 364, server 110 is transferring BDATA blocks 198 and receiving ACK packets 186 from master client 154.</p>
    <p num="96">In steps 366, server 110 times out after sending data block 198 and receiving no ACK 186 response, or in step 368 determines that it has received an ACK 186 response from master client 154 with last block k in block- field 214.</p>
    <p num="97">In steps 370 and 372, server 110 obtains lock on server list 140 and decrements number of clients in its server entry in server list 140.</p>
    <p num="98">
      In step 372, server 110 shifts all clients up on its local list 150 by one element, thus deleting the old master client from its broadcast list and identifying the passive client which should be made the next master client.
      <br/>
      Server 110 then releases locks on server list 140.
    </p>
    <p num="99">In step 374, server 110 sends OACK 196 with MC bit 239 set to "1" to first client on list 150 (the new master client.)</p>
    <p num="100">For the special case where there is no client left in list 150, server 110 will clear its own local client list 150 and delete its entry in server list 140, and release its lock on server list 140.</p>
    <p num="101">
      Referring to FIGS. 14A and 14B, a client is determined to be a passive broadcast client upon receiving an OACK packet with MC=0.
      <br/>
      In step 401, client sends an ACK packet with block number 0.
    </p>
    <p num="102">
      If it is determined in step 404 that in step 402, passive client receives an OACK packet with MC=1, this passive client has been designated as the master client, and processing transfers in step 406 to step 350 (FIG. 13A).
      <br/>
      Otherwise, in steps 408 and 410, passive client updates its blocks received file 141, writes the data block to boot file 123, and in step 412 returns to step 402 to listen for the next BDATA packet.
    </p>
    <p num="103">
      TFTP broadcast capable client 154 passes its subnetwork mask 230 as part of the initial RRQ 182.
      <br/>
      Subnet mask 230 is used by TFTP server 110 to determine whether an existing broadcast to the that subnet 106 can be joined or if a new server 130 must be started to broadcast the requested file 120 to that subnet 106.
    </p>
    <p num="104">
      Client 154 can also request the transfer size option 232 to determine the amount of memory 123 needed to store file 120.
      <br/>
      Client 154 can also calculate the last block number k (that is, transfer size 232/block size 224+1) or client 154 can make a note of the block number received which is less the block size.
      <br/>
      Now as each block is received client 154 could index into the memory 123 using an algorithm (blkno 214-1*blksize 224).
      <br/>
      If client 154 becomes the controlling client, with MC bit 239 set to "1", it must acknowledge with ACK 186 each block n.
    </p>
    <p num="105">A block of bytes or memory mapped bits or bytes 141 are used to keep track of which blocks have been received.</p>
    <p num="106">
      If client 152 becomes a passive client (not the controlling client) it must receive each datagram 180, 206, use block number 214 to determine where to write into memory block 121, write the data into memory 121, and check that block in its map 141 of received blocks.
      <br/>
      When it becomes the active client it will receive an OACK 196 in a unicast datagram 180 from server 110 to the original IP/address port 139, 202 from which client 152 sent the RRQ to server 110 with the broadcast option 228 and string 236 in the OACK 196 will be set to ",,1".
      <br/>
      Then client 152 walks its map 141 of received blocks m to determine the starting block's position.
    </p>
    <p num="107">
      When client 152 determines it has received all of file 120 into file 121, it sends an ACK 186 with last block k indicated in block- field 214.
      <br/>
      This ACK 186 is sent to the source address and port 202, 204 from which the last server packet was received.
      <br/>
      This event will happen at a point m-1 partially through transfer of file 120 if client 152 has passively received blocks m through k when it joined a broadcast already in progress.
    </p>
    <p num="108">Referring to FIG. 15, the method steps executed at each router, such as router B 112, will next be described.</p>
    <p num="109">In step 420, router 112 receives a BDATA 198 datagram.</p>
    <p num="110">In step 424, router 112 determines if the source port is blocked by filter 129 and, if so, terminates processing and returns to step 420 to await the next datagram.</p>
    <p num="111">
      In step 426, if filter 129 allows processing of datagrams received from this source port, router 112 determines if the destination subnet matches a subnet connected to this router 112.
      <br/>
      If there is a match, in step 428 router 112 broadcasts the datagram on this subnet to clients 132, 134 and 136.
      <br/>
      If there is not a match, in step 430 router 112 unicasts the datagram to router 114 or 116, whichever is appropriate for the destination subnet.
    </p>
    <p num="112">Advantages over the Prior Art</p>
    <p num="113">The advantages of the preferred embodiment of this invention include an improved system and method for file transfer to multiple clients which allow the source IP address to vary.</p>
    <p num="114">It is a further advantage of the invention that there is provided an improved file transfer to multiple clients which allows the source IP address to vary to accommodate multiple IOPS and load balancing.</p>
    <p num="115">It is a further advantage of the invention that file transfer on a subnet basis is provided so as to maximize file transfer rates on a particular subnet, there being no gating by a client on a slower subnet path.</p>
    <p num="116">Alternative Embodiments</p>
    <p num="117">
      It will be appreciated that, although specific embodiments of the invention have been described herein for purposes of illustration, various modifications may be made without departing from the spirit and scope of the invention.
      <br/>
      In particular, it is within the scope of the invention to provide a memory device, such as a transmission medium, magnetic or optical tape or disc, or the like, for storing signals for controlling the operation of a computer according to the method of the invention and/or to structure its components in accordance with the system of the invention.
    </p>
    <p num="118">Accordingly, the scope of protection of this invention is limited only by the following claims and their equivalents.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>We claim:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>Method for booting diskless client workstations by subnet broadcasting load programs to a plurality of client workstations including a master client workstation and all passive client workstations that join a subnet broadcast files transfer group to reliably reconstitute at said plurality of client workstations a file of said load Programs for booting said plurality of client workstations transmitted from a server as a plurality of subnet broadcast datagrams, comprising the steps of:</claim-text>
      <claim-text>operating a subnet broadcast server to transfer datagrams including said load programs together with a subnet broadcast identifier and source port identifier to both said master client workstation and said passive client workstations on a subnet basis; operating gateways at subnets not matching said subnet broadcast address to unicast said datagram to a next gateway; operating said master client workstation and said passive client workstations responsive to said subnet broadcast identifier and server's source port for determining whether a received datagram is part of a transfer of interest to said client; operating routers connected to destination subnets to data link layer broadcast unicasted datagrams from an intervening subnet to all neighbors on the matching subnet while disregarding forwarding this data link layer broadcast to any adjoining subnets;</claim-text>
      <claim-text>and operating a passive client workstation on said matching subnet to track received datagrams and upon said client becoming a master client workstation to request missing datagrams in ascending order by including in acknowledge packets a block number equal to or greater than the last block transmitted by said server.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. System for transfer of an executable file to multiple clients for execution, each said client being a user workstation, comprising: a server for sending data packets directed from one of a plurality of source ports, each said data packet including at least one block of said executable file including a plurality of blocks; a first router to a first subnet for receiving and selectively sending said data packets from said server; a second router to a second subnet and on said first subnet for receiving and selectively sending said data packets, said subnet including a least a master client and a passive client;</claim-text>
      <claim-text>each said client including:</claim-text>
      <claim-text>- a store for filing said executable file; - a store for tracking which of said blocks have been received;</claim-text>
      <claim-text>and - logic responsive to subnet broadcast identifier and packet source port for determining whether said data packet is part of a file of interest to said client; each said passive client being operable upon becoming a new master client for requesting of said server communication of any missing blocks in ascending order in a manner not requiring negative acknowledgments by including within acknowledge packets a block number equal to or greater than the last block transmitted by said server;</claim-text>
      <claim-text>and said second router including a filter for identifying from which of said source ports packets will be accepted for broadcasting to said clients.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A system for transfer of a file for execution at multiple clients including a master client workstation and at least one Passive client workstation, comprising: a first router to a first subnet for receiving and selectively sending file packets from a server;</claim-text>
      <claim-text>said first subnet including a least said master client and said passive client;</claim-text>
      <claim-text>each said client including: - a receiver for accepting packets selectively including first acknowledge packets and data packets sourced from one of a plurality of source ports, each said data packet including at least one block of a file including a plurality of blocks; - a store file for storing said blocks; - a track file for tracking which of said blocks have been received; - code responsive to the server source port and a subnet broadcast identifier for determining if a received block is of interest to said client;</claim-text>
      <claim-text>and each said passive client being operable upon becoming a new master client for requesting of said server communication of any missing blocks by way of transmission of acknowledge packets including a block number which is greater than or equal to that of the last block transmitted by said server.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The system of claim 3, each said client further comprising: a controller for communicating to a request port a read request packet requesting said file with subnet broadcast option and to said source port a client acknowledge packet for acknowledging receipt of a block.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The system of claim 4, said controller of each said client further operable for accepting a source acknowledge packet sourced from said request port and including master client indicia for identifying a receiving client as a master client or as a passive client.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The system of claim 5, the controller of said master client responsive to receipt of a source acknowledge packet including master client indicia for determining from its track file a next required data packet and sending to said source port in response to receiving each said data packet a client acknowledge packet identifying the next data packet required.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The system of claim 6, the controller of said master client being further responsive to said track file indicating all of said data blocks comprising said file have been received for sending to said source port a client acknowledge packet terminating said master client as the master client.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The system of claim 5, the controller of said passive client responsive to receipt of a source acknowledge packet including passive client indicia for receiving said data packets and updating its track file for tracking which data packets have been received.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. The system of claim 8, the controller of said passive client being further operable to monitor its request port for a source acknowledge packet including master client indicia, and responsive to receipt of said master client indicia to determine from its track file the next data packet required by said passive client, and to send to said source port a client acknowledge packet identifying said next data packet.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A system for transfer of a file for execution to multiple clients including a master client workstation and at least one passive client workstation, comprising: a subnet broadcast server; a first router to a first subnet for receiving and selectively sending file packets from said server;</claim-text>
      <claim-text>said first subnet including a least said master client workstation and said passive client workstation;</claim-text>
      <claim-text>each said client including: - a receiver for accepting file packets selectively including first acknowledge packets and data packets sourced from one of a plurality of source ports, each said data packet including at least one block of a file including a plurality of blocks; - a store file for storing said blocks; - code responsive to source port indicia and a subnet broadcast identifier for determining of a received packet is of interest to said client; - a track file for tracking which of said blocks have been received for use by said client; and upon said passive client workstation becoming a new master client workstation, for generating an acknowledgment message for requesting transmission of a missing block in ascending order;</claim-text>
      <claim-text>and said subnet broadcast server being selectively operable responsive to a request read packet from said master client workstation on a first request port for responding from said first request port with a server acknowledge packet including indicia designating said master client workstation as the master client and a broadcast server port; said subnet broadcast server being selectively operable responsive to a request read packet from said passive client workstation on a second request port for responding from said second request port with a server acknowledge packet including indicia designating said passive client workstation as a passive client and said broadcast server port;</claim-text>
      <claim-text>and said subnet broadcast server being selectively operable responsive to a client acknowledge packet from said master client terminating broadcasts of data packets to said master client for responding from said second request port with a server acknowledge packet including indicia designating said passive client workstation as new master client workstation.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A program storage device readable by a machine, tangibly embodying a program of instructions executable by a machine to perform method steps for transfer of a file for execution at multiple clients, said method steps comprising: receiving and selectively broadcasting said packets from a server to all clients, including a master client and a passive client, on a subnet;</claim-text>
      <claim-text>each said client being operable for: - determining whether a received packet is part of a file of interest to said client; - accepting packets selectively including source acknowledge packets and data packets sourced from one of a plurality of source ports, each said data packet including at least one block of a file including a plurality of blocks; - storing said blocks; - tracking which of said blocks have been received;</claim-text>
      <claim-text>and - upon said passive client becoming a new master client, requesting in ascending order those of said blocks which have not been received.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A method for transfer of a file for execution at multiple clients, comprising: operating a first router to a first subnet to receive and selectively send said packets from a server to all clients on said first subnet;</claim-text>
      <claim-text>said first subnet including a least a master client and a passive client;</claim-text>
      <claim-text>each said client operable for: - determining based upon server source port and subnet broadcast identifer whether a received packet is part of a file of interest to said client; - accepting packets selectively including first acknowledge packets and data packets sourced from one of a plurality of source ports, each said data packet including at least one block of said file including a plurality of blocks; - storing said blocks at said clients to form said file for execution at said client; - tracking which of said blocks have been received; - upon said passive client becoming a new master client, requesting transmission in ascending order from said server of those of said blocks which have not been received.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 12, each said client further operable for performing the steps of: communicating to a request port a read request packet requesting said file with subnet broadcast option and to said source port a client acknowledge packet for acknowledging receipt of a block.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 13, said controller of each said client further operable according to the step of: accepting a source acknowledge packet sourced from said request port and including master client indicia for identifying a receiving client as said master client or as said passive client.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 14, the controller of said master client being responsive to receipt of a source acknowledge packet including master client indicia for performing the steps of: determining a next required data packet and sending to said source port in response to receiving each said data packet a client acknowledge packet identifying the next data packet required.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 15, the controller of said master client being further responsive to said track file indicating all of said data blocks comprising said file have been received for performing the step of: sending to said source port a client acknowledge packet terminating said master client as the master client.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 13, the controller of said passive client responsive to receipt of a source acknowledge packet including passive client indicia for performing the steps of: receiving said data packets, and tracking which data packets have been received.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 17, the controller of said passive client further performing the steps of: monitoring its request port for a source acknowledge packet including master client indicia, and responsive to receipt of said master client indicia determining the next data packet required by said passive client, and sending to said source port a client acknowledge packet identifying said next data packet.</claim-text>
    </claim>
  </claims>
</questel-patent-document>