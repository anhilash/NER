<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185726B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185726</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185726</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="22219025" extended-family-id="42113875">
      <document-id>
        <country>US</country>
        <doc-number>09089682</doc-number>
        <kind>A</kind>
        <date>19980603</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09089682</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>43172266</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>8968298</doc-number>
        <kind>A</kind>
        <date>19980603</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09089682</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/50        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>50</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>716104000</text>
        <class>716</class>
        <subclass>104000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>703013000</text>
        <class>703</class>
        <subclass>013000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>703014000</text>
        <class>703</class>
        <subclass>014000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>716106000</text>
        <class>716</class>
        <subclass>106000</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>716113000</text>
        <class>716</class>
        <subclass>113000</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>716119000</text>
        <class>716</class>
        <subclass>119000</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-017/50C3</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>017</main-group>
        <subgroup>50C3</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-017/50D</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>017</main-group>
        <subgroup>50D</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5045</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5045</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/5022</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>5022</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>26</number-of-claims>
    <exemplary-claim>12</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>8</number-of-drawing-sheets>
      <number-of-figures>8</number-of-figures>
      <image-key data-format="questel">US6185726</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">System and method for efficiently designing integrated circuit devices</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>AHARON AHARON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5202889</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5202889</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>ROSTOKER MICHAEL D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5541849</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5541849</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KEREN DORON, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5544071</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5544071</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>DANGELO CARLOS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5598344</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5598344</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>RAIMI RICHARD S</text>
          <document-id>
            <country>US</country>
            <doc-number>5604895</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5604895</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>GUPTE VILAS V, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5812416</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5812416</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="7">
          <text>DANGELO CARLOS, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5870308</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5870308</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="8">
          <text>GASCOYNE WILLIAM H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5886900</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5886900</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="9">
          <text>GUPTE VILAS V, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5903475</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5903475</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="10">
          <text>OHARA KAZUTAKE</text>
          <document-id>
            <country>US</country>
            <doc-number>5926396</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5926396</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="11">
          <text>HARDIN RONALD H, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5926622</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5926622</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="12">
          <text>FURA DAVID A</text>
          <document-id>
            <country>US</country>
            <doc-number>5953519</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5953519</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="13">
          <text>MORIMOTO KAZUNOBU, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5961557</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5961557</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="14">
          <text>OHARA KAZUTAKE</text>
          <document-id>
            <country>US</country>
            <doc-number>5978573</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5978573</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="15">
          <text>ALEKSIC MILIVOJE, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5995736</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5995736</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="16">
          <text>HEILE FRANCIS B, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>6026226</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6026226</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="17">
          <text>NISHINO TOMOKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5510654</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5510654</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="18">
          <text>CHANDRA SUSHEEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5517432</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5517432</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>S. Tayal et al., System Level Verification of ASIC ChipSets, IEEE International ASIC Conference and Exhibit, pp. 283-287, Sep. 1993.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>J. Hartmann et al., Approaches to Regression Testing, Conference on Software Maintenance, pp. 368-372, Oct. 1988.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="3">
          <text>M. Abrahams et al., RTL Verification Strategies, Wescon/98, pp. 130-134, Sep. 1998.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="4">
          <text>R. Ernst et al., Simulation-based Verification for High-Level Synthesis, IEEE Design &amp; Test of Computers, pp. 14-20, Mar. 1991.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="5">
          <text>K.W. Hsu et al., Automated Maintenance of ASIC Libraries in a Dynamic Design Environment, IEEE ASIC Seminar and Exhibit, pp. 12/7.1-7.4, Sep. 1990.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Sony Corporation</orgname>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="original" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>Sony Electronics Inc.</orgname>
            <address>
              <address-1>Park Ridge, NJ, US</address-1>
              <city>Park Ridge</city>
              <state>NJ</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="3">
          <addressbook lang="en">
            <orgname>SONY</orgname>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="4">
          <addressbook lang="en">
            <orgname>SONY ELECTRONICS</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Chou, Chen-Chi</name>
            <address>
              <address-1>Milpitas, CA, US</address-1>
              <city>Milpitas</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <name>Koerner, Gregory J.</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <orgname>Simon &amp; Koerner LLP</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Lintz, Paul R.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      A system and method for efficiently designing integrated circuits provides a verification manager for verifying an integrated circuit design, a synthesis manager for synthesizing the integrated circuit design, a backend manager for implementing the integrated circuit design, and a processor for simultaneously controlling the verification manager, the synthesis manager, and the backend manager to create the integrated circuit design.
      <br/>
      The system and method generates a series of regression checkpoints controlled by the verification manager, and a series of timing checkpoints controlled by the synthesis manager to facilitate and expedite the integrated circuit design procedure.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">This invention relates generally to creating and implementing electronic circuits, and relates more particularly to a system and method for efficiently designing integrated circuit devices.</p>
    <p num="3">2. Description of the Background Art</p>
    <p num="4">
      Implementing an efficient and effective method for designing integrated circuits is a significant consideration of electronic component designers and manufacturers.
      <br/>
      The efficient design and testing of integrated circuits is often an extremely complex and time-consuming task due to the large number of electrical components and separate electrical circuits that typically comprise an integrated circuit.
      <br/>
      The complexity of the integrated circuit design procedure thus presents a substantial number of obstacles to successfully producing a final product that performs without operational errors.
    </p>
    <p num="5">
      Referring now to FIG. 1, a plan view of an exemplary floorplan for an integrated circuit 112 is shown, in accordance with the present invention.
      <br/>
      In the FIG. 1 example, integrated circuit 112 includes a number of circuit blocks 114-118, which are precisely positioned upon a surface of integrated circuit 112 according to a previously determined circuit design.
      <br/>
      Each of the circuit blocks 114-118 typically includes a substantial number of individual electrical components, including digital logic gates, which are selected to effectively perform the particular function for which integrated circuit 112 is designed.
    </p>
    <p num="6">
      According to modem practices, the procedure for designing and testing integrated circuit 112 may effectively be performed by integrated circuit designers who frequently use a special computer system to simulate the operation of a specific integrated circuit as the integrated circuit is being designed.
      <br/>
      The circuit designers may then advantageously test and modify the integrated circuit design to achieve optimal performance and reliability from the integrated circuit without actually re-fabricating the device after every design change or modification.
    </p>
    <p num="7">
      Due to the complex nature of integrated circuit design, successful techniques for decreasing design time without increasing design errors would likely result in more effective production of integrated circuits.
      <br/>
      The goals of reducing design time and reducing design errors must therefore be significant aspects of any effort to improve upon the currently existing integrated circuit design methodologies.
    </p>
    <p num="8">
      In some integrated circuit design procedures, the designing and testing are typically performed in serial fashion, with designers conducting the entire time-consuming design procedure to identify, correct and test a single design defect before any subsequent design defects may be addressed.
      <br/>
      The foregoing serial design procedure thus restricts the speed and efficiency of the integrated circuit design procedure, and results in an ineffective methodology for designing integrated circuits.
    </p>
    <p num="9">
      In other integrated circuit design procedures, designers have sometimes attempted to increase the speed and efficiency of the design procedure at the expense of permitting significant design errors to remain in the resultant integrated circuit designs.
      <br/>
      To compound this design error problem, the foregoing design procedures may fail to provide a coordinated checking system for managing design errors.
      <br/>
      The lack of a satisfactory design error checking system may result in design errors that are not detected, and also may create additional delays in the already lengthy integrated circuit design procedure.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="10">
      An integrated circuit design procedure is required that permits circuit designers to effectively design and test new integrated circuit designs in a reduced amount of time by structuring the design procedure in an efficient manner.
      <br/>
      What is also required is an integrated circuit design procedure that advantageously provides an effective and organized methodology for checking integrated circuit parameters during the design procedure to facilitate rapid completion of the design procedure and thereby produce integrated circuits without design defects.
    </p>
    <p num="11">
      In accordance with the present invention, a system and method are disclosed for efficiently designing integrated circuit devices.
      <br/>
      The invention includes a computer system comprising a central processing unit (CPU) and a memory having a verification manager, a synthesis manager, and a backend manager.
    </p>
    <p num="12">
      In operation, an integrated circuit designer initially uses the verification manager to identify and correct a design defect that is present in an integrated circuit design that is currently being created and tested.
      <br/>
      The verification manager then generates new HDL (hardware description language) code corresponding to the entire integrated circuit design.
      <br/>
      The generated HDL code incorporates the design change necessitated by the foregoing design defect.
    </p>
    <p num="13">
      The verification manager then simulates and examines the operation of the integrated circuit design, especially in the circuitry of the previously-corrected design defect.
      <br/>
      Next, the verification manager performs a regression test and responsively determines whether the integrated circuit has passed the regression test.
      <br/>
      The regression test preferably analyzes the overall operation of the integrated circuit to ensure that the prior modification of the HDL code has not created additional design defects or related problems in other parts of the integrated circuit.
    </p>
    <p num="14">
      In addition to the regression test, the verification manager performs a checklist of selected regression checkpoints to eliminate any design errors, and to also facilitate the integrated circuit design procedure.
      <br/>
      If the integrated circuit fails to pass the regression test, then the verification manager selectively modifies the HDL code to correct for any problems detected by the failed regression test.
    </p>
    <p num="15">
      However, if the integrated circuit design passes the regression test, then a synthesis process begins.
      <br/>
      In one embodiment of the present invention, once the synthesis process begins, then a different designer may initiate another verification process to correct a new and separate design defect.
      <br/>
      Several designers may thus conduct multiple design processes concurrently to expedite the integrated circuit design procedure.
    </p>
    <p num="16">
      The synthesis manager next performs a synthesis procedure that preferably uses a synthesis program tool to convert the HDL code into specific electronic component specifications.
      <br/>
      Then, the synthesis manager performs a timing test and responsively determines whether the integrated circuit has passed the timing test.
      <br/>
      The timing test preferably analyzes the internal timing parameters of the integrated circuit to ensure that the circuit timing parameters fall within predetermined specifications for the particular integrated circuit design.
      <br/>
      In addition to the timing test, the synthesis manager performs a checklist of selected timing checkpoints, which eliminate any timing errors, and also facilitate the integrated circuit design procedure.
    </p>
    <p num="17">
      If the integrated circuit fails to pass the timing test, then, the synthesis manager modifies related constraint scripts to allow the integrated circuit to pass the timing test.
      <br/>
      However, if the integrated circuit design passes the timing test, then the synthesis manager generates a first net list which includes connectivity information specifying the entire integrated circuit design at the component level.
    </p>
    <p num="18">
      Then, a backend process begins to complete the final implementation of the integrated circuit design by specifying actual physical locations for the specific integrated circuit components.
      <br/>
      As discussed above, in many embodiments of the present invention, once the a verification, synthesis, or a backend process completes, then the designers may re-initiate those completed processes to continue refining a particular integrated circuit design.
      <br/>
      Several designers may thus conduct multiple design processes concurrently to expedite the integrated circuit design procedure in accordance with the present invention.
    </p>
    <p num="19">
      The backend manager then creates a floorplan, which includes physical locations for individual circuit blocks that contain corresponding electrical components.
      <br/>
      The backend manager preferably locates the circuit blocks to minimize timing problems and to effectively utilize the surface space of the integrated circuit.
      <br/>
      Then, the backend manager generates a second net list and an estimate SDF (standard delay format).
      <br/>
      The backend manager uses the floorplan to generate the estimate SDF, and also annotates the estimate SDF to the second net list.
      <br/>
      Since the floorplan does not contain timing information for components within the circuit blocks, the backend manager uses estimated statistical timing information to generate the estimate SDF.
    </p>
    <p num="20">
      Next, the synthesis manager again performs a timing test and responsively determines whether the integrated circuit has passed the timing test.
      <br/>
      As discussed above, the timing test preferably analyzes the internal timing parameters of the integrated circuit to ensure that the circuit timing parameters fall within predetermined specifications for the particular integrated circuit design.
      <br/>
      In addition to the timing test, the synthesis manager again performs a checklist of selected timing checkpoints to eliminate any timing errors, and to also facilitate the integrated circuit design procedure.
    </p>
    <p num="21">
      If the integrated circuit successfully passes the timing test, then the verification manager performs a regression test and determines whether the integrated circuit has passed the regression test.
      <br/>
      In addition to the regression test, verification manager again performs a checklist of selected regression checkpoints to eliminate any design errors.
    </p>
    <p num="22">
      If the integrated circuit design passes the regression test while using the estimate SDF, then the backend manager creates a layout which includes information describing the actual physical placement of individual electrical components within the circuit blocks on the substrate of the integrated circuit.
      <br/>
      Next, the backend manager generates an actual SDF, which contains information describing the completed integrated circuit design including connectivity information, specific components within the circuit blocks, and the physical timing between the individual components.
    </p>
    <p num="23">
      The design procedure then repeats the timing test.
      <br/>
      As discussed above the timing test preferably analyzes the internal timing parameters of the integrated circuit to ensure that the circuit timing parameters fall within predetermined specifications for the particular integrated circuit design.
      <br/>
      In addition to the timing test, the synthesis manager performs a modified checklist of selected timing checkpoints to eliminate any timing errors.
      <br/>
      Because the current timing test is performed after the backend manager has generated the actual SDF, the checklist of timing checkpoints includes a series of additional timing checkpoints that were not performed during previous timing tests.
    </p>
    <p num="24">
      In the event that the integrated circuit design passes the final timing test using the actual SDF, then the backend manager performs a final regression test.
      <br/>
      If the integrated circuit design passes the final regression test using the actual SDF, then the integrated circuit design procedure terminates with a tapeout event to generate the completed integrated circuit design.
      <br/>
      The present invention thus effectively implements a system and method for efficiently designing integrated circuit devices.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="25">
      FIG. 1 is a plan view of an exemplary floorplan for an integrated circuit;
      <br/>
      FIG. 2 is a block diagram of one embodiment of a computer system for designing integrated circuits, according to the present invention;
      <br/>
      FIG. 3 is a block diagram of one embodiment of the ROM of FIG. 2, according to the present invention;
      <br/>
      FIG. 4 is a block diagram of one embodiment of the nonvolatile memory of FIG. 2, according to the present invention;
      <br/>
      FIG. 5 is a flowchart of preferred method steps for efficiently designing an integrated circuit, according to the present invention;
      <br/>
      FIG. 6 is a flowchart of method steps for one embodiment of regression checkpoints, according to the present invention;
      <br/>
      FIG. 7 is a flowchart of method steps for one embodiment of first timing checkpoints, according to the present invention; and
      <br/>
      FIG. 8 is a flowchart of method steps for one embodiment of second timing checkpoints, according to the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
    <p num="26">
      The present invention relates to an improvement in procedures for the design of electronic circuits.
      <br/>
      The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements.
      <br/>
      Various modifications to the preferred embodiment will be readily apparent to those skilled in the art and the generic principles herein may be applied to other embodiments.
      <br/>
      Thus, the present invention is not intended to be limited to the embodiment shown, but is to be accorded the widest scope consistent with the principles and features described herein.
    </p>
    <p num="27">
      The present invention includes a system and method for efficiently designing integrated circuits comprising a verification manager for verifying an integrated circuit design, a synthesis manager for synthesizing the integrated circuit design, a backend manager for implementing the integrated circuit design, and a processor for simultaneously controlling the verification manager, the synthesis manager, and the backend manager to create the integrated circuit design.
      <br/>
      The system and method also includes a series of regression checkpoints controlled by the verification manager, and a series of timing checkpoints controlled by the synthesis manager to facilitate and expedite the integrated circuit design procedure.
    </p>
    <p num="28">
      Referring now to FIG. 2, a block diagram of one embodiment of a computer system 210 for designing integrated circuits is shown, according to the present invention.
      <br/>
      In the FIG. 2 embodiment, computer system 210 includes a central processing unit (CPU) 212, a display 214, an input device 216, an input/output (I/O) interface 218, a random-access memory 220, a read-only memory 222, and a nonvolatile memory 224.
      <br/>
      The foregoing elements 212 through 224 of system 210 are each preferably coupled to a system bus 226.
      <br/>
      In alternate embodiments, computer system 210 may readily include additional displays 214 and multiple input devices 216, and in the preferred embodiment, CPU 212 is a processor device with multi-tasking capabilities.
      <br/>
      Furthermore, in alternate embodiments, a plurality of computer systems 210 may be used in accordance with the present invention.
    </p>
    <p num="29">
      Referring now to FIG. 3, a block diagram of one embodiment of ROM 222 of FIG. 2 is shown, according to the present invention.
      <br/>
      In the FIG. 3 embodiment, ROM 222 includes a design module 312 which is preferably executed by CPU 212 whereby one or more integrated circuit designers may utilize computer system 210 to efficiently design and test integrated circuits in accordance with the present invention.
      <br/>
      In the FIG. 3 embodiment, design module 312 includes a verification manager 314, a synthesis manager 316, and a backend manager 318.
    </p>
    <p num="30">
      Verification manager 316 preferably performs a discrete verification process upon an integrated circuit design to verify that the operation and functionality is free from design defects or errors.
      <br/>
      Synthesis manager 316 preferably performs a discrete synthesis process to synthesize or convert an integrated circuit design to the electrical component or logic gate level.
      <br/>
      Backend manager 318 preferably performs a discrete final implementation process to designate the physical position of the synthesized integrated circuit design on the surface of the integrated circuit.
    </p>
    <p num="31">
      In the present invention, CPU 212 may concurrently execute verification manager 314, synthesis manager 316, and backend manager 318 to permit individual designers to simultaneously control different elements of design module 312.
      <br/>
      For example, a first designer may perform a verification process using verification manager 314, while a second designer concurrently performs a synthesis process using synthesis manager 316, and while a third designer concurrently performs a backend process using backend manager 318.
      <br/>
      The operation and functionality of verification manager 314, synthesis manager 316, and backend manager 318 are further discussed below in conjunction with FIGS. 5 through 8.
    </p>
    <p num="32">
      Referring now to FIG. 4, a block diagram of one embodiment of the nonvolatile memory 224 of FIG. 2 is shown, according to the present invention.
      <br/>
      In the FIG. 4 embodiment, nonvolatile memory 224 includes hardware description language (HDL) code 412, vector matrix 414, constraint scripts 416, regression log 418, timing log 420, net list 1 (422), net list 2 (424), floorplan 426, layout 428, estimate standard delay format (SDF) 430, and actual SDF 432.
      <br/>
      In alternate embodiments, nonvolatile memory 224 may readily include elements that are additional or different than those shown in conjunction with the FIG. 4 embodiment.
      <br/>
      The operation and functionality of the contents of nonvolatile memory 224 are further discussed below in conjunction with FIGS. 5 through 8.
    </p>
    <p num="33">
      Referring now to FIG. 5, a flowchart of preferred method steps for efficiently designing an integrated circuit is shown, according to the present invention.
      <br/>
      FIG. 5 includes a legend to indicate whether each of the individual FIG. 5 method steps is part of a verification process (performed by verification manager 314), or whether each of the individual method steps is part of a synthesis process (performed by synthesis manager 316), or whether each of the individual method steps is part of a backend process (performed by backend manager 318).
    </p>
    <p num="34">
      The FIG. 5 method steps that are a part of the verification process performed by verification manager 314 are enclosed by a solid line.
      <br/>
      The FIG. 5 method steps that are a part of the synthesis process performed by synthesis manager 316 are enclosed by a dotted line.
      <br/>
      The FIG. 5 method steps that are a part of the backend process performed by backend manager 318 are enclosed by a dashed line.
      <br/>
      Although the FIG. 5 flowchart presents method steps arranged in a sequential order to show an overview of the entire integrated circuit design procedure, the verification, synthesis, and backend processes may also be readily performed as discrete processes by verification manager 314, synthesis manager 316, and backend manager 318, respectively.
      <br/>
      Concurrently performing the verification, synthesis, and backend processes in parallel thus provides an efficient and time-saving method of designing integrated circuits according to the present invention.
    </p>
    <p num="35">
      Initially, in step 512 of FIG. 5, an integrated circuit designer uses verification manager 314 to identify and correct a design defect that is present in an integrated circuit design that is being designed and tested.
      <br/>
      For example, a design defect may cause a specific state machine within the integrated circuit design to become unchangeably fixed in a certain logic state.
      <br/>
      In step 514, verification manager 314 then generates new HDL (hardware description language) code 412 corresponding to the entire integrated circuit design.
      <br/>
      The HDL code 412 generated in step 514 incorporates the design change necessitated by the design defect from foregoing step 512.
      <br/>
      The newly-generated HDL code 412 is preferably stored into nonvolatile memory 224.
    </p>
    <p num="36">
      In step 516, verification manager 314 simulates and examines the operation of the integrated circuit, especially in the circuitry of the previously-corrected design defect.
      <br/>
      For example, if a given state machine was operating defectively, then the designers may write a test vector and run the test vector through the defective state machine circuitry to verify that the design defect has been remedied by the foregoing change of HDL code 412.
    </p>
    <p num="37">
      In step 518, verification manager 314 performs a regression test and responsively determines whether the integrated circuit has passed the regression test.
      <br/>
      The regression test preferably analyzes the overall operation of the integrated circuit to ensure that the prior modification of the HDL code 412 (in step 520) has not created additional design defects or related problems in other parts of the integrated circuit design.
      <br/>
      For example, designers may run a substantial number of different test vectors through the integrated circuit to test the functionality of the entire device.
    </p>
    <p num="38">
      In addition to the regression test, step 518 further includes a checklist of carefully selected regression checkpoints which verification manager 314 performs to eliminate any design errors, and to also facilitate the integrated circuit design procedure.
      <br/>
      The foregoing regression checkpoints are further discussed below in conjunction with FIG. 6.
      <br/>
      If the integrated circuit fails to pass the regression test of step 518, then, in step 520, verification manager 314 selectively modifies HDL code 412 to correct for any problems detected by the failed regression test.
      <br/>
      The FIG. 5 procedure then returns to step 514.
    </p>
    <p num="39">
      However, in step 518, if the integrated circuit design passes the regression test, then, in step 522, a synthesis process begins.
      <br/>
      In one embodiment of the present invention, once the synthesis process begins in step 522, then a different designer may initiate another verification process in step 512 to correct new and separate design defect.
      <br/>
      Several designers may thus conduct multiple design processes concurrently to expedite the integrated circuit design procedure.
    </p>
    <p num="40">
      In step 522, synthesis manager 316 performs a synthesis procedure that preferably uses a synthesis program tool to convert HDL code 412 into specific electrical component specifications.
      <br/>
      Typically, the synthesis procedure of step 522 selects specific electrical components but does not specify their physical location on the surface of the integrated circuit.
    </p>
    <p num="41">
      In step 524, synthesis manager 316 performs a timing test and responsively determines whether the integrated circuit has passed the timing test.
      <br/>
      The timing test preferably analyzes the internal timing parameters of the integrated circuit to ensure that the circuit timing parameters fall within predetermined specifications for the particular integrated circuit design.
      <br/>
      For example, the timing test may check the setup timing and hold times between integrated circuit components.
      <br/>
      In addition to the timing test, step 524 further includes a checklist of selected timing checkpoints which synthesis manager 316 performs to eliminate any timing errors, and to also facilitate the integrated circuit design procedure.
      <br/>
      The foregoing timing checkpoints are further discussed below in conjunction with FIG. 7.
    </p>
    <p num="42">
      If the integrated circuit fails to pass the timing test of step 524, then, in step 526, synthesis manager 316 modifies constraint scripts 416 to allow the integrated circuit to pass the timing test of step 524.
      <br/>
      Constraint scripts 416 are constraints that affect and limit the synthesis procedure of step 522, depending on the particular integrated circuit design.
      <br/>
      After the constraint scripts are modified in step 526, then the FIG. 5 procedure returns to step 522.
    </p>
    <p num="43">
      However, in step 524, if the integrated circuit design passes the timing test, then synthesis manager 316 generates net list 1 (422) which is preferably stored into nonvolatile memory 224.
      <br/>
      Net list 1 (422) typically includes connectivity information specifying the entire integrated circuit design at the component level.
    </p>
    <p num="44">
      In step 530, a backend process begins to complete the final implementation of the integrated circuit design by specifying actual physical locations for the specific integrated circuit components.
      <br/>
      As discussed above, in many embodiments of the present invention, once the a verification, synthesis, or a backend process completes, then designers may re-initiate those processes to continue refining a particular integrated circuit design.
      <br/>
      Several designers may thus conduct multiple design processes concurrently to expedite the integrated circuit design procedure, in accordance with the present invention.
    </p>
    <p num="45">
      In step 530, backend manager 318 creates a floorplan 426, which is preferably stored into nonvolatile memory 224.
      <br/>
      Floorplan 426 includes physical locations for individual circuit blocks 114 (FIG. 1) that each contain corresponding electrical components.
      <br/>
      Backend manager 318 preferably locates circuit blocks 114-118 to minimize timing problems and to effectively utilize the surface space of the integrated circuit.
    </p>
    <p num="46">
      Then, in step 532, backend manager 318 generates a net list 2 (424) and an estimate SDF (standard delay format) 430 which are preferably stored into nonvolatile memory 224.
      <br/>
      Net list 2 (424) is based on floorplan 426 which contains timing information regarding circuit blocks 114-118.
      <br/>
      Net list 2 (424) is therefore more accurate than the previously-generated net list 1 (422) which contained connectivity information but not timing information.
      <br/>
      Backend manager 318 uses floorplan 426 to generate estimate SDF 430, and also annotates estimate SDF 430 to net list 2 (424).
      <br/>
      Since floorplan 426 does not contain timing information for components within circuit blocks 114-118, backend manager 318 uses estimated statistical timing information to generate estimate SDF 430.
    </p>
    <p num="47">
      In step 534, synthesis manager 316 again performs a timing test and responsively determines whether the integrated circuit has passed the timing test.
      <br/>
      As discussed above, the timing test preferably analyzes the internal timing parameters of the integrated circuit to ensure that the circuit timing parameters fall within predetermined specifications for the particular integrated circuit design.
      <br/>
      In addition to the timing test, step 534 further includes a checklist of selected timing checkpoints which synthesis manager 316 performs to eliminate any timing errors, and to also facilitate the integrated circuit design procedure.
      <br/>
      The foregoing timing checkpoints are further discussed below in conjunction with FIG. 7.
    </p>
    <p num="48">
      If the integrated circuit fails to pass the timing test of step 524, then the FIG. 5 procedure returns to step 526.
      <br/>
      However, if the integrated circuit successfully passes the timing test of step 524, then, in step 536, verification manager 314 performs a regression test and responsively determines whether the integrated circuit has passed the regression test.
      <br/>
      The regression test preferably analyzes the overall operation of the entire integrated circuit.
      <br/>
      In addition to the regression test, step 536 further includes a checklist of selected regression checkpoints which verification manager 314 performs to eliminate any design errors, and to also facilitate the integrated circuit design procedure.
      <br/>
      The foregoing regression checkpoints are further discussed below in conjunction with FIG. 6.
      <br/>
      If the integrated circuit fails to pass the regression test of step 536, then, the FIG. 5 procedure then returns to step 534.
      <br/>
      In one embodiment, if the integrated circuit design fails the regression test of step 536 more than a predetermined number of times, then verification manager 314 detects an error condition.
    </p>
    <p num="49">
      However, in step 536, if the integrated circuit design passes the regression test while using the estimate SDF 430 generated in step 532, then, in step 538, backend manager 318 creates layout 428 which is preferably stored into nonvolatile memory 224.
      <br/>
      Layout 428 includes information describing the actual physical placement of individual electrical components within circuit blocks 114-118 on the substrate of the integrated circuit.
    </p>
    <p num="50">
      Next, backend manager 318 generates actual SDF 540 which is preferably stored into nonvolatile memory 432.
      <br/>
      Actual SDF 540 contains information describing the completed integrated circuit design including connectivity, specific components within circuit blocks 114-118, and the physical timing between the individual components.
    </p>
    <p num="51">
      Following step 540, the FIG. 5 design procedure returns to step 534 to repeat a timing test.
      <br/>
      As discussed above the timing test preferably analyzes the internal timing parameters of the integrated circuit to ensure that the circuit timing parameters fall within predetermined specifications for the particular integrated circuit design.
      <br/>
      In addition to the timing test, step 534 further includes a checklist of selected timing checkpoints.
      <br/>
      Because the current timing test is performed after backend manager 318 has generated the actual SDF 540, the timing checkpoints includes a series of additional checkpoints that were not included in the previous timing tests.
      <br/>
      The foregoing additional checkpoints are further discussed below in conjunction with FIG. 8.
    </p>
    <p num="52">
      In the event that the integrated circuit design passes the final timing test using actual SDF 432 in step 534, then backend manager 318 performs a final regression test in step 536.
      <br/>
      If the integrated circuit design passes the final regression test using actual SDF 432 in step 536, then the FIG. 5 design procedure terminates with a tapeout event in step 542 to generate the completed integrated circuit design.
    </p>
    <p num="53">
      Referring now to FIG. 6, a flowchart of method steps for one embodiment of regression checkpoints (from FIG. 5, steps 518 and 536) is shown, according to the present invention.
      <br/>
      However, in alternate embodiments, the foregoing regression checkpoints may readily include checkpoints that are different or in another sequence than those shown in the FIG. 6 embodiment.
    </p>
    <p num="54">
      Initially, in step 612, verification manager 314 checks regression log 418 in nonvolatile memory 224 to determine whether there is any indication of an error indication for the design procedure.
      <br/>
      Then, in step 614, verification manager 314 updates a design defect report to include any relevant information that has not yet been posted to the design defect report.
      <br/>
      In step 616, verification manager 616 updates vector matrix 414 in nonvolatile memory 224 to include any additional test vectors that are have not already been recorded in vector matrix 414.
    </p>
    <p num="55">
      Next, in step 618, verification manager 314 checks to determine whether all relevant source code (such as HDL Code 412) has been safely stored into nonvolatile memory 224.
      <br/>
      Finally, verification manager 314 completes the regression checkpoints by determining whether the integrated circuit design has successfully passed the regression test (steps 518 and 536 of FIG. 5).
    </p>
    <p num="56">
      Referring now to FIG. 7, a flowchart of method steps for one embodiment of first timing checkpoints is shown, according to the present invention.
      <br/>
      In alternate embodiments, the foregoing first timing checkpoints may readily include checkpoints that are different or in another sequence than those shown in the FIG. 7 embodiment.
      <br/>
      The FIG. 7 embodiment corresponds to step 524 of FIG. 5, and further corresponds to step 534 of FIG. 5 prior to the generation of actual SDF 432 in step 540.
    </p>
    <p num="57">
      Initially, in step 712, synthesis manager 316 verifies that all relevant source code (such as HDL code 412) and constraint scripts 416 are "checked in" at the nonvolatile memory 224.
      <br/>
      In the preferred embodiment of the present invention, CPU 212 of computer system 210 indicates or "checks out" the software and data that is currently being used in order to ensure that such software and data is only accessed by a single user during a given time period.
    </p>
    <p num="58">
      In step 714, synthesis manager 316 checks timing log 420 in nonvolatile memory 224, and also checks related warning indicators for any timing error indications for the integrated circuit design.
      <br/>
      Next, in step 716, synthesis manager 316 checks the total integrated circuit design for any unconnected points or for any components that are not correctly connected.
      <br/>
      Then, in step 718, synthesis manager 316 double-checks the integrated circuit timing parameters, and also determines the physical area required for the integrated circuit components.
    </p>
    <p num="59">
      In step 720, synthesis manager 316 checks the fanout parameters for the entire integrated circuit design, both within circuit blocks 114-118 and between circuit blocks 114-118.
      <br/>
      Then, synthesis manager 316, in step 722, checks a clock tree (component-synchronizing clock circuitry), a reset buffer system, and a fanout buffer system for the integrated circuit design.
      <br/>
      Finally, in step 724, synthesis manager 316 checks internal timing (for example, setup and hold timing) within circuit blocks 114-118, and also checks interface timing between circuit blocks 114-118.
    </p>
    <p num="60">
      Referring now to FIG. 8, a flowchart of method steps for one embodiment of second timing checkpoints is shown, according to the present invention.
      <br/>
      In alternate embodiments, the foregoing second timing checkpoints may readily include checkpoints that are different or in another sequence than those shown in the FIG. 8 embodiment.
      <br/>
      The FIG. 8 embodiment corresponds only to step 534 of FIG. 5 subsequent to the generation of actual SDF 432 in step 540.
    </p>
    <p num="61">
      Initially, in step 812, synthesis manager 316 verifies that all relevant source code (such as actual SDF 432) and constraint scripts 416 are "checked in" at the nonvolatile memory 224.
      <br/>
      In the preferred embodiment of the present invention, CPU 212 of computer system 210 indicates or "checks out" the software and data that is currently being used in order to ensure that such software and data is only accessed by a single user during a given time period.
    </p>
    <p num="62">
      In step 814, synthesis manager 316 checks timing log 420 in nonvolatile memory 224, and also checks related warning indicators for any timing error indications for the integrated circuit design.
      <br/>
      Next, in step 816, synthesis manager 316 checks the total integrated circuit design for any unconnected points or for any components, which are not correctly connected.
      <br/>
      Then, in step 818, synthesis manager 316 double-checks the integrated circuit timing parameters, and also determines the physical area required for the integrated circuit components.
    </p>
    <p num="63">
      In step 820, synthesis manager 316 checks fanout parameters for the entire integrated circuit design, both within circuit blocks 114-118 and between circuit blocks 114-118.
      <br/>
      Then, synthesis manager 316, in step 822, checks the clock tree (component-synchronizing clock circuitry), the reset buffer system, and the fanout buffer system for the integrated circuit design.
      <br/>
      Next, in step 824, synthesis manager 316 checks internal timing (for example, setup and hold timing) within circuit blocks 114-118, and also checks interface timing between circuit blocks 114-118.
    </p>
    <p num="64">
      In step 826, synthesis manager 316 checks the hold times between components in the integrated circuit design.
      <br/>
      Then, in step 828, synthesis manager 316 checks the fanout and the clock tree delay for the integrated circuit design.
      <br/>
      Finally, synthesis manager 316 checks timing for specific paths in the integrated circuit design.
      <br/>
      For example, synthesis manager 316 may check timing for paths that have special importance to the integrated circuit design, such as the output path of the integrated circuit.
    </p>
    <p num="65">
      The invention has been explained above with reference to a preferred embodiment.
      <br/>
      Other embodiments will be apparent to those skilled in the art in light of this disclosure.
      <br/>
      For example, the present invention may readily be implemented using configurations and techniques other than those described in the preferred embodiment above.
      <br/>
      Additionally, the present invention may effectively be used in conjunction with systems other than the one described above as the preferred embodiment.
      <br/>
      Therefore, these and other variations upon the preferred embodiments are intended to be covered by the present invention, which is limited only by the appended claims.
    </p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12.</claim-text>
      <claim-text>A method for creating an electrical circuit design, comprising the steps of: verifying said electrical circuit design using a verification manager, wherein said verification manager performs the steps of correcting at least one electrical circuit design defect, generating new design code as a result of the correction, simulating operation of said electrical circuit design, and performing a plurality of regression tests on said electrical circuit design, wherein said plurality of regression tests are comprised of a plurality of regression checkpoints that perform the steps of checking a regression log for an error indication, updating a design defect report, updating a test vector matrix, checking whether at least one source code is stored in a memory, and checking whether a regression test was passed; synthesizing said electrical circuit design using a synthesis manager, wherein said synthesis manager performs the steps of performing at least one timing test, modifying at least one constraint script when said electrical circuit design fails a timing test, and generating a first net list for said electrical circuit design, wherein said at least one timing test is comprised of a plurality of timing checkpoints that perform the steps of checking whether at least one source code and at least one script are stored in a memory, checking a timing log and at least one warning indicator for at least one error indication, checking said electrical circuit design for unconnected points, checking timing for said electrical circuit design, checking at least one fanout parameter for said electrical circuit design, and checking at least one clock timing, at least one reset buffer, and at least one fanout buffer; implementing said electrical circuit design using a backend manager, wherein said backend manager performs the steps of creating a layout for said electrical circuit design, generating a second net list, generating an estimated standard delay format annotated to said second net list, generating an actual standard delay format, and performing a final regression test utilizing said actual standard delay format;</claim-text>
      <claim-text>and controlling said verification manager, said synthesis manager, and said backend manager with a processor to thereby create said electrical circuit design.</claim-text>
      <claim-text>1. A system for creating an electrical circuit design, comprising:</claim-text>
      <claim-text>a verification manager configured to verify said electrical circuit design, wherein said verification manager corrects at least one electrical circuit design defect, generates new design code as a result of the correction, simulates operation of said electrical circuit design, and performs a plurality of regression tests on said electrical circuit design, wherein said plurality of regression tests are comprised of a plurality of regression checkpoints that check a regression log for an error indication, update a design defect report, update a test vector matrix, check whether at least one source code is stored in a memory, and check whether a regression test was passed; a synthesis manager configured to synthesize said electrical circuit design, wherein said synthesis manager performs a synthesis procedure on said electrical circuit design, performs at least one timing test, modifies at least one constraint script when said electrical circuit design fails a timing test, and generates a first net list for said electrical circuit design, wherein said at least one timing test is comprised of a plurality of timing checkpoints that check whether at least one source code and at least one script are stored in a memory, check a timing log and at least one warning indicator for at least one error indication, check said electrical circuit design for unconnected points, check timing for said electrical circuit design, check at least one fanout parameter for said electrical circuit design, and check at least one clock timing, at least one reset buffer, and at least one fanout buffer; a backend manager configured to implement said electrical circuit design, wherein said backend manager creates a layout for said electrical circuit design, generates a second net list, generates an estimated standard delay format annotated to said second net list, generates an actual standard delay format, and performs a final regression test utilizing said actual standard delay format;</claim-text>
      <claim-text>and a processor, coupled to said system, to control said verification manager, said synthesis manager, and said backend manager and create said electrical circuit design.</claim-text>
      <claim-text>2. The system of claim 1 wherein said electrical circuit design is used to manufacture an integrated circuit device.</claim-text>
      <claim-text>3. The system of claim 1 wherein said processor concurrently executes program instructions from said verification manager, said synthesis manager, and said backend manager.</claim-text>
      <claim-text>4. The system of claim 1 further comprising a memory device to store said verification manager, said synthesis manager, and said backend manager.</claim-text>
      <claim-text>5. The system of claim 1 wherein said processor is a central processing unit with multi-tasking capabilities.</claim-text>
      <claim-text>6. The system of claim 3 wherein individual designers separately control said verification manager, said synthesis manager, and said backend manager.</claim-text>
      <claim-text>7. The system of claim 1 further comprising a plurality of separate computer systems each containing said verification manager, said synthesis manager, and said backend manager.</claim-text>
      <claim-text>8. The system of claim 2, wherein said timing checkpoints further check internal and external timing for circuit blocks within said integrated circuit design; check hold times for said integrated circuit design, check fanout and clock delay for said integrated circuit design, and check timing for special paths in said integrated circuit design.</claim-text>
      <claim-text>9. The system of claim 8 wherein said synthesis manager performs said timing checkpoints only on a final occurrence of said timing test.</claim-text>
      <claim-text>10. The system of claim 2 wherein said integrated circuit device is an application-specific integrated circuit.</claim-text>
      <claim-text>11. The system of claim 1 wherein a series of design defects in said integrated circuit design are concurrently corrected by said verification manager, said synthesis manager, and said backend manager.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The method of claim 12 wherein said electrical circuit design is for the manufacture of an integrated circuit device.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The method of claim 12 wherein said processor concurrently executes program instructions from said verification manager, said synthesis manager, and said backend manager.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. The method of claim 12 further comprising a memory device for storing said verification manager, said synthesis manager, and said backend manager.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The method of claim 12 wherein said processor is a central processing unit with multi-tasking capabilities.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. The method of claim 14 wherein individual designers separately control said verification manager, said synthesis manager, and said backend manager.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. The method of claim 12 further comprising a plurality of separate computer systems each containing said verification manager, said synthesis manager, and said backend manager.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. The method of claim 13, wherein said timing checkpoints further perform the steps of: checking internal and external timing for circuit blocks within said integrated circuit design; checking hold times for said integrated circuit design, checking fanout and clock delay for said integrated circuit design, and checking timing for special paths in said integrated circuit design.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. The method of claim 19 wherein said synthesis manager performs said timing checkpoints only on a final occurrence of said timing test.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. The method of claim 13 wherein said integrated circuit device is an application-specific integrated circuit.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. The method of claim 12 wherein a series of design defects in said integrated circuit design are concurrently corrected by said verification manager, said synthesis manager, and said backend manager.</claim-text>
    </claim>
    <claim num="23">
      <claim-text>23. A computer-readable medium comprising program instructions for creating an electrical circuit design by performing the steps of: verifying said electrical circuit design using a verification manager, wherein said verification manager performs the steps of correcting at least one electrical circuit design defect, generating new design code as a result of the correction, simulating operation of said electrical circuit design, and performing a plurality of regression tests on said electrical circuit design, wherein said plurality of regression tests are comprised of a plurality of regression checkpoints that perform the steps of checking a regression log for an error indication, updating a design defect report, updating a test vector matrix, checking whether at least one source code is stored in a memory, and checking whether a regression test was passed; synthesizing said electrical circuit design using a synthesis manager, wherein said synthesis manager performs the steps of performing at least one timing test, modifying at least one constraint script when said electrical circuit design fails a timing test, and generating a first net list for said electrical circuit design, wherein said at least one timing test is comprised of a plurality of timing checkpoints that perform the steps of checking whether at least one source code and at least one script are stored in a memory, checking a timing log and at least one warning indicator for at least one error indication, checking said electrical circuit design for unconnected points, checking timing for said electrical circuit design, checking at least one fanout parameter for said electrical circuit design, and checking at least one clock timing, at least one reset buffer, and at least one fanout buffer; implementing said electrical circuit design using a backend manager, wherein said backend manager performs the steps of creating a layout for said electrical circuit design, generating a second net list, generating an estimated standard delay format annotated to said second net list, generating an actual standard delay format, and performing a final regression test utilizing said actual standard delay format;</claim-text>
      <claim-text>and controlling said verification manager, said synthesis manager, and said backend manager with a processor to thereby create said electrical circuit design.</claim-text>
    </claim>
    <claim num="24">
      <claim-text>24. A system for creating an electrical circuit design, comprising: means for verifying said electrical circuit design using a verification manager, wherein said means for verifying is comprised of means for correcting at least one electrical circuit design defect, means for generating new design code as a result of the correction, means for simulating operation of said electrical circuit design, and means for performing a plurality of regression tests on said electrical circuit design, wherein said plurality of regression tests are comprised of a plurality of regression checkpoints comprising means for checking a regression log for an error indication, means for updating a design defect report, means for updating a test vector matrix, means for checking whether at least one source code is stored in a memory, and means for checking whether a regression test was passed; means for synthesizing said electrical circuit design, wherein said means for synthesizing is comprised of means for performing at least one timing test, means for modifying at least one constraint script when said electrical circuit design fails a timing test, and means for generating a first net list for said electrical circuit design, wherein said at least one timing test is comprised of a plurality of timing checkpoints comprised of means for checking whether at least one source code and at least one script are stored in a memory, means for checking a timing log and at least one warning indicator for at least one error indication, means for checking said electrical circuit design for unconnected points, means for checking timing for said electrical circuit design, means for checking at least one fanout parameter for said electrical circuit design, and means for checking at least one clock timing, at least one reset buffer, and at least one fanout buffer; means for implementing said electrical circuit design, wherein said means for implementing is comprised of means for creating a layout for said electrical circuit design, means for generating a second net list, means for generating an estimated standard delay format annotated to said second net list, means for generating an actual standard delay format, and means for performing a final regression test utilizing said actual standard delay format;</claim-text>
      <claim-text>and means for controlling said means for verifying, said means for synthesizing, and said means for implementing to thereby create said electrical circuit design.</claim-text>
    </claim>
    <claim num="25">
      <claim-text>25. The system of claim 24 wherein said electrical circuit design is to manufacture of an integrated circuit device.</claim-text>
    </claim>
    <claim num="26">
      <claim-text>26. The system of claim 24 wherein said means for controlling concurrently executes program instructions from said means for verifying, said means for synthesizing, and said means for implementing.</claim-text>
    </claim>
  </claims>
</questel-patent-document>