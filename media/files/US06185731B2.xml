<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185731B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185731</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185731</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference is-representative="YES" family-id="13965635" extended-family-id="21162548">
      <document-id>
        <country>US</country>
        <doc-number>08526476</doc-number>
        <kind>A</kind>
        <date>19950911</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1995US-08526476</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>21702385</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>JP</country>
        <doc-number>8925495</doc-number>
        <kind>A</kind>
        <date>19950414</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1995JP-0089254</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  11/28        20060101AFI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>28</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F  11/36        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>36</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>G06F  15/78        20060101ALI20051220RMJP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>78</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <generating-office>
          <country>JP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051220</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <main-classification>
        <text>717128000</text>
        <class>717</class>
        <subclass>128000</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>703028000</text>
        <class>703</class>
        <subclass>028000</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>714037000</text>
        <class>714</class>
        <subclass>037000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>714E11214</text>
        <class>714</class>
        <subclass>E11214</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla>
      <classification-ecla sequence="1">
        <text>G06F-011/36B5</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>011</main-group>
        <subgroup>36B5</subgroup>
      </classification-ecla>
      <classification-ecla sequence="2">
        <text>G06F-011/36D6C</text>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>011</main-group>
        <subgroup>36D6C</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-011/3636</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>11</main-group>
        <subgroup>3636</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130101</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>22</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>11</number-of-drawing-sheets>
      <number-of-figures>18</number-of-figures>
      <image-key data-format="questel">US6185731</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Real time debugger for a microcomputer</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>CARLSON GEORGE M, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4277827</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4277827</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>MAGAR SURENDAR S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4677586</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4677586</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>KAWAI HIROYUKI, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5136701</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5136701</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>DREYER ROBERT S, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5479652</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5479652</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>HARENBERG DONALD D, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5544311</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5544311</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="6">
          <text>NIPPON ELECTRIC CO</text>
          <document-id>
            <country>JP</country>
            <doc-number>S60262251</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP60262251</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <text>INTEL CORP</text>
          <document-id>
            <country>JP</country>
            <doc-number>H05334114</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>JP05334114</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>Uffenbeck, "Microcomputers and Microprocessors", Prentice-Hall, 1985, pp. 273-277.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>Mitsubishi Electric Semiconductor Software Co., Ltd.</orgname>
            <address>
              <address-1>Hyogo, JP</address-1>
              <city>Hyogo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="original" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>Mitsubishi Denki Kabushiki Kaisha</orgname>
            <address>
              <address-1>Tokyo, JP</address-1>
              <city>Tokyo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="3">
          <addressbook lang="en">
            <orgname>MITSUBISHI ELECTRIC SEMICONDUCTOR SOFTWARE</orgname>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="4">
          <addressbook lang="en">
            <orgname>MITSUBISHI ELECTRIC</orgname>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Maeda, Shohei</name>
            <address>
              <address-1>Hyogo, JP</address-1>
              <city>Hyogo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Abe, Nobusuke</name>
            <address>
              <address-1>Hyogo, JP</address-1>
              <city>Hyogo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Satoh, Yoshikazu</name>
            <address>
              <address-1>Hyogo, JP</address-1>
              <city>Hyogo</city>
              <country>JP</country>
            </address>
          </addressbook>
          <nationality>
            <country>JP</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>McDermott, Will &amp; Emery</orgname>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Chaki, Kakali</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>EXPIRED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      The microcomputer provides with surroundings where data in a RAM can be monitored on the outside without employing an external bus.
      <br/>
      When a command requesting accessing to a RAM is received from an external monitor, a real time debugger built in the microcomputer confirms that a CPU is not accessing the RAM, and accesses the RAM.
      <br/>
      On the other hand, when accessing to an emROM, which emulates an actual ROM, is requested from the monitor, the real time debugger accesses one of emROMs which is not being used by the CPU at present.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="1">
      1.
      <br/>
      Field of the Invention
    </p>
    <p num="2">This invention relates to a microcomputer which has a function of confirming operation of a program or verifying validity of a program.</p>
    <p num="3">2. Description of the Prior Art</p>
    <p num="4">
      FIG. 1 is a diagrammatic view showing a conventional system for confirming operation of a program or verifying validity of a program on a microcomputer.
      <br/>
      Referring to FIG. 1, reference numeral 101 denotes a system to be debugged including a microcomputer 102 having a CPU 103, and 104 a microcomputer provided for debugging a program of the microcomputer 102 and including a dual port RAM 105 and a serial input/output circuit 106 connected to the dual port RAM 105.
      <br/>
      Reference numeral 108 denotes an address bus of the microcomputer 102, 109 a data bus of the microcomputer, and 110 a system bus signal line of the microcomputer.
      <br/>
      The microcomputer 104 accommodates the address bus 108, the data bus 109 and the system bus signal line 110.
      <br/>
      Reference numeral 107 denotes a serial output data line from the serial input/output circuit 106.
      <br/>
      It is to be noted that the system bus signal line 110 transmits system bus signals such as a memory read signal or a memory write signal.
    </p>
    <p num="5">
      Operation will be described subsequently.
      <br/>
      It is convenient if the process during or a result of calculation by a program can be monitored in order to confirm operation of the program or verify validity of the program on the microcomputer 102.
      <br/>
      The system shown in FIG. 1 is constructed so as to satisfy such demand.
      <br/>
      It is to be noted that debugging herein signifies monitoring of data in the RAM during execution of a program.
      <br/>
      Where the microcomputer 102 of the debug object system 101 is a one-chip microcomputer which includes a ROM, a RAM and so forth built therein, the built-in RAM is used in actual application.
      <br/>
      However, upon debugging, the dual port RAM 105 on the microcomputer 104 is used as a RAM.
      <br/>
      In particular, upon debugging, data are written into the dual port RAM 105 and data are read out from the dual port RAM 105 while the microcomputer 102 is executing a program.
    </p>
    <p num="6">
      In the microcomputer 104, contents of the dual port RAM 105 are outputted suitably to the outside by way of the serial input/output circuit 106 and the serial output data line 107.
      <br/>
      A monitor system placed outside (not shown) having a display unit and an outputting apparatus receives the contents of the dual port RAM 105 from the microcomputer 104.
      <br/>
      Data of the RAM of the microcomputer 102 during execution of a program are provided to the monitor system in such a manner as described above.
      <br/>
      Then, a debugging person determines whether the data obtained at the monitor system are desired data or valid data.
      <br/>
      Then, based on the determination, the debugging person determines whether or not the program on the microcomputer 102 is valid.
    </p>
    <p num="7">
      Since the conventional microcomputer 102 is constructed in such a manner as described above, the microcomputer 102 accesses the inside RAM when it is actually working, but it accesses the dual port RAM 105 by way of the address bus 108, the data bus 109 and the system bus signal line 110, that is, the external buses when it is debugged.
      <br/>
      Since the accessing by way of the external bus requires a longer time than the accessing by way of the internal bus, as the bus cycle is raised to a high speed, access to the dual port RAM 105 becomes impossible.
      <br/>
      In other words, as the bus cycle is raised to a high speed, debugging becomes impossible, and consequently, there is a problem in that there is a limitation in increasing of the speed of the bus cycle.
      <br/>
      It is to be noted that a microcomputer which has an operation mode for analysis or debugging of software is disclosed in Japanese Patent Laid-Open No. Hei 5-334114.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="8">The present invention has been made to eliminate such a program as described above, and it is an object of the present invention to provide a microcomputer which enables to monitor data in a RAM on the outside without using an external bus and besides without occupying an internal bus of a CPU.</p>
    <p num="9">
      According to the present invention, a microcomputer comprises a real time debugger which reads out data in the internal RAM when a CPU does not access the RAM and outputs the read out data to the outside if a read address of an internal RAM is received from the outside.
      <br/>
      The real time debugger confirms whether or not the CPU is accessing the RAM, and reads out data at an address designated from the outside from the RAM when the CPU is not accessing the RAM.
    </p>
    <p num="10">With the microcomputer, data in the RAM can be monitored on the outside without using an external bus, and even if the speed of the operation clocks of the CPU is raised, debugging is still possible.</p>
    <p num="11">
      According to an aspect of the real time debugger, it includes a plurality of address registers for storing address data designating addresses of the RAM supplied from the outside, and an address pointer for designating one of the address registers which corresponds to address data provided for the RAM.
      <br/>
      In the real time debugger of the construction just described, address data inputted from the outside are successively stored into the address registers, and the address data in the individual address registers are supplied to the RAM side successively in accordance with contents of the address pointer by which one of the address registers is designated.
    </p>
    <p num="12">With the microcomputer of the construction just described, data of a plurality of addresses can be used in a lump, and a monitor system on the outside can use read data efficiently.</p>
    <p num="13">
      The microcomputer may further comprise a local address bus provided between the real time debugger and the RAM, a local data bus provided between the RAM and the real time debugger, a switch for connecting the plurality of address registers of the real time debugger to the local address bus, and a switch for disconnecting an address bus of the CPU from the RAM.
      <br/>
      The real time debugger of the microcomputer of the construction just described, accesses the RAM by using the local address bus and the local data bus.
      <br/>
      When the real time debugger accesses the RAM, the switches disconnect the RAM and the CPU from each other.
    </p>
    <p num="14">The real time debugger can read out data of the RAM without occupying the buses of the CPU and does not obstruct operation of the CPU upon debugging.</p>
    <p num="15">
      According to another aspect of the real time debugger of the microcomputer, it further includes a control section for receiving a command including command data designating an operation condition of the real time debugger and address data designating a read address and performing an operation in accordance with the received command.
      <br/>
      The control section receives a command including command data and address data from the outside and performs such processing as reading out of data from the RAM in accordance with the command data in the received command.
    </p>
    <p num="16">With the microcomputer of the construction just described, a debugging system which can realize various debugging functions by developing an arbitrary command on the monitor system side provided on the outside can be constructed.</p>
    <p num="17">
      According to a further aspect of the real time debugger, it outputs a signal representing that data outputted to the outside is significant.
      <br/>
      The real time debugger of the construction just described outputs, when it reads out data of the RAM and outputs the data to the outside, to the outside also a signal representing that the data are significant.
    </p>
    <p num="18">With the microcomputer of the construction just described, a period of significant data can be detected readily on the monitor system side provided on the outside, and consequently, the construction of the monitor system can be simplified.</p>
    <p num="19">
      According to a still further aspect of the real time debugger of the microcomputer, it accommodates a reset signal line for transmitting a reset signal from the outside to the real time debugger, and another reset signal line for transmitting a reset signal from the CPU to the real time debugger.
      <br/>
      The real time debugger of the construction just described performs a resetting operation when a reset signal appears on the reset signal line from the outside or the reset signal line from the CPU.
    </p>
    <p num="20">With the microcomputer of the construction just described, the real time debugger can be reset simultaneously with resetting of the CPU, and it is also possible to reset the real time debugger independently.</p>
    <p num="21">
      According to a yet further aspect of the real time debugger of the microcomputer, it includes a status register for setting a status of an interruption request to the CPU and outputs contents of the status register to the outside.
      <br/>
      The real time debugger of the construction just described outputs data read out from the RAM as well as information indicating an interruption condition to the CPU to the outside.
    </p>
    <p num="22">With the microcomputer of the construction just described, also an interruption occurrence condition of the CPU can be recognized readily on the monitor system side provided on the outside.</p>
    <p num="23">
      According to a yet further aspect of the real time debugger of the microcomputer, it includes a counter for counting internal clocks of the CPU and outputs contents of the counter.
      <br/>
      The real time debugger of the construction just described outputs data read out from the RAM as well as a result of counting of the internal clocks of the CPU to the outside.
    </p>
    <p num="24">With the microcomputer of the construction just described, also time information of the real time debugger can be recognized readily on the monitor system side provided on the outside.</p>
    <p num="25">
      According to a yet further aspect of the real time debugger of the microcomputer, it accesses the RAM in response to a request from the outside when the CPU is not accessing the RAM.
      <br/>
      The real time debugger of the construction just described confirms whether or not the CPU is accessing the RAM, and reads out data at an address designated from the outside from the ROM when the CPU is not accessing the RAM.
      <br/>
      Or, when the CPU is not accessing the RAM, the real time debugger writes data supplied thereto from the outside to a designated address.
    </p>
    <p num="26">
      With the microcomputer of the construction just described, data in the RAM can be monitored without using an external bus, and data supplied from the outside can be written into the RAM.
      <br/>
      Consequently, debugging can be performed even if the speed of the operation clocks of the CPU is raised.
    </p>
    <p num="27">According to another aspect of the microcomputer, it further comprises a pair of emulation ROMs having a same address space and accessible from the CPU only to read out data but accessible from the real time debugger to read out and write data, and the real time debugger accesses, in response to a request from the outside, that one of the emulation ROMs which is not being used by the CPU.</p>
    <p num="28">
      In the microcomputer of the construction just described, when the CPU is using one of the emulation ROMs, the real time debugger changes contents of the other emulation ROM, and the emulation ROM to be used by the CPU after the change of the contents can be changed over.
      <br/>
      In other words, the program can be changed during operation of the CPU.
    </p>
    <p num="29">
      According to a further aspect of the microcomputer, it further comprises a local address bus provided between the real time debugger and the RAM, a local data bus provided between the RAM and the real time debugger, a pair of switches provided between the RAM and the local buses, another pair of switches provided between the RAM and the buses of the CPU, a buffer for outputting data in the RAM to the local data bus, and another buffer for outputting data in the RAM to the data bus of the CPU.
      <br/>
      The real time debugger accesses the RAM by using the local address bus and the local data bus.
      <br/>
      When the real time debugger accesses the RAM, the switches and the buffers disconnect the RAM and the CPU from each other.
    </p>
    <p num="30">
      In the microcomputer of the construction just described, the real time debugger can read out data of the RAM without occupying the buses of the CPU.
      <br/>
      Consequently, the real time debugger does not obstruct the operation of the CPU upon debugging.
    </p>
    <p num="31">
      According to a still further aspect of the microcomputer, the real time debugger includes a control section for receiving a command including command data designating an operation condition of the real time debugger and address data designating a read address and performing an operation in accordance with the received command.
      <br/>
      The control section receives a command including command data and address data from the outside and performs such processing as reading out of data from the RAM in accordance with the command data in the received command or writing of data into the RAM.
    </p>
    <p num="32">With the microcomputer of the construction just described, a flexible debugging system which can realize various debugging functions by developing an arbitrary command on the monitor system side provided on the outside can be constructed.</p>
    <p num="33">
      According to a yet further aspect of the microcomputer, the control section detects, when a recovery command constituted from bits all having an equal value is received, a bit in a command received subsequently to the return command which has a value different from the value of the bits constituting the recovery command, and re-establishes synchronism of a command to be received.
      <br/>
      The real time debugger of the construction just described detects, when it receives a recovery command developed in response to detection of a run-away condition of the real time debugger, a different polarity bit portion of a command received next to the recovery command and re-establishes bit-synchronism of succeeding reception of a command.
    </p>
    <p num="34">With the microcomputer of the construction just described, when the operation of the real time debugger goes wrong because of a bit shift of a received command or from some other cause, the real time debugger can be initialized without supplying a reset signal to it.</p>
    <p num="35">
      According to a yet further aspect of the microcomputer, the real time debugger outputs, upon starting of sending out of data to be outputted to the outside, a signal having a pulse width corresponding to a command by which the data are requested.
      <br/>
      The real time debugger of the construction just described outputs, when it sends out data therefrom, a signal having a pulse width corresponding to a received command so that a monitor system provided on the outside may discriminate a delimitation of the data readily and besides it can be recognized readily in response to which command the data are outputted.
    </p>
    <p num="36">
      With the microcomputer of the construction just described, the head of data can be detected readily on the monitor system side provided on the outside, and besides, it can be detected readily in response to which one of sent out commands data are outputted.
      <br/>
      Consequently, the construction of the monitor system can be simplified.
    </p>
    <p num="37">
      According to a yet further aspect of the microcomputer, the real time debugger accommodates a reset signal line for transmitting a reset signal from the CPU to the real time debugger.
      <br/>
      The real time debugger of the construction just described performs a resetting operation when a reset signal appears on the reset signal line from the CPU.
    </p>
    <p num="38">With the microcomputer of the construction just described, also the real time debugger is reset simultaneously with resetting of the CPU.</p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="39">
      FIG. 1 is a diagrammatic view showing a conventional system for confirming operation of a program or verifying validity of a program on a microcomputer;
      <br/>
      FIG. 2 is a block diagram showing a construction of a microcomputer according to a first embodiment of the present invention;
      <br/>
      FIG. 3 is a block diagram showing a construction of a microcomputer according to a second embodiment of the present invention together with an external monitor system;
      <br/>
      FIG. 4 is a block diagram showing an internal construction of an RTD;
      <br/>
      FIGS. 5(A) and 5(B) are circuit diagrams showing a RAM and associated elements in detail;
      <br/>
      FIG. 6(A) is a time chart illustrating a signal outputting timing when contents of the RAM are outputted on the real time basis;
      <br/>
      FIG. 6(B) is a format diagram illustrating an RDR command;
      <br/>
      FIG. 7(A) is a time chart illustrating a signal outputting timing when contents of the RAM are re-written on the real time basis;
      <br/>
      FIG. 7(B) is a format diagram illustrating a WRR command;
      <br/>
      FIG. 8(A) is a time chart illustrating a signal outputting timing when contents of an emROM are outputted;
      <br/>
      FIG. 8(B) is a format diagram illustrating an RDE command;
      <br/>
      FIG. 9(A) is a time chart illustrating a signal outputting timing when contents of the emROM are re-written;
      <br/>
      FIG. 9(B) is a format diagram illustrating a WRE command;
      <br/>
      FIG. 10(A) is a time chart illustrating a signal outputting timing upon continued monitoring;
      <br/>
      FIG. 10(B) is a format diagram illustrating a VER command;
      <br/>
      FIG. 11(A) is a time chart illustrating a signal outputting timing upon recovery from a run-away condition; and
      <br/>
      FIG. 11(B) is a format diagram illustrating an RCV command.
    </p>
    <heading>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
    <p num="40">Embodiment 1</p>
    <p num="41">
      FIG. 2 is a block diagram showing a construction of a microcomputer according to a first embodiment of the present invention.
      <br/>
      Referring to FIG. 2, reference numeral 1 denotes a real time debugger (hereinafter referred to as RTD) built in a microcomputer for supporting debugging, 2 a RAM built in the microcomputer, 3 a selector for supplying one of a control signal from a CPU 103 side and another control signal from the RTD 1 side to the RAM 2, 4 an address bus of the CPU 103, 5 a data bus of the CPU 103, 6 a system bus signal line from the CPU 103, 7 a system bus signal line from the selector 3 to the RAM 2, 8 a RAM select signal line for transmitting a RAM select signal from the selector 3 to the RAM 2, 9 a buffer provided between the RAM 2 and the data bus 5, 10 a switch for deciding whether an address signal to be supplied to the RAM 2 should be inputted from the address bus 4 or a local address bus 11 of the RTD 1, and 12 a local data bus from the RAM 2 to the RTD 1.
    </p>
    <p num="42">
      In the RTD 1, reference numeral 21 denotes a control section including an address pointer 22 for controlling fetching of data in the RAM 2 into the RTD 1 side; 23, a receiving shift register for receiving a command from a monitor system provided on the outside; 24, a transmitting buffer resistor to which data to be outputted to the monitor system are set; 25, a transmitting shift register for outputting data to the monitor system; 26, a command register for storing command data from the receiving shift register 23; 27, an address register for storing address data from the receiving shift register 23; 28, a switch for connecting the address register 27 to the local address bus 11; 29, a counter for counting a clock signal used in the inside of the microcomputer; 30, a status register having a bit whose polarity is reversed in response to generation of an interruption request in the microcomputer; and 31, a selector for supplying an output of the local data bus 12, a count value of the counter 29 or a set value of the status register 30 to the transmitting buffer register 24.
      <br/>
      It is to be noted that, in the present embodiment, sixteen address registers 27 are provided.
    </p>
    <p num="43">Reference numeral 41 denotes a reset signal line for transmitting a reset signal to be provided from the CPU 103 to the RTD 1; 42, a RAM select signal line for transmitting a RAM select signal from the CPU 103; 43, a RAM select signal line for transmitting a RAM select signal outputted from the RTD 1; 44, a system bus signal line for transmitting a system bus signal outputted from the RTD 1; 51, a serial input data line for transmitting a command from the monitor system; 52, a clock line for transmitting a shift clock signal; 53, a signal line for transmitting an acknowledge signal (DTACKB signal) outputted from the control section 21; 54, a serial output data line for transmitting serial data from the transmitting shift register 25; and 55, a reset signal line for transmitting a reset signal provided from the outside to the RTD 1.</p>
    <p num="44">
      Subsequently, operation will be described.
      <br/>
      The CPU 103 performs predetermined controlling operation in accordance with a program.
      <br/>
      Then, in order to access the RAM 2, the CPU 103 outputs address data to the address bus 4 and supplies a necessary system bus signal to the RAM 2.
      <br/>
      In order to write data, the CPU 103 outputs write data to the data bus 5.
      <br/>
      In order to read data, data are outputted from the RAM 2 to the data bus 5.
      <br/>
      In this instance, the selector 3 is set such that it outputs a RAM select signal from the CPU 103 side to the RAM select signal line 8 and outputs a system bus signal from the CPU 103 side to the system bus signal line 7.
      <br/>
      Meanwhile, the switch 10 is set in a closed condition, and the switch 28 is set in an open condition.
      <br/>
      The buffer 9 is in an conducting condition.
    </p>
    <p num="45">In order to read out data in the RAM 2 and output the data to the outside, the RTD 1 can use, for example, such commands as given below.</p>
    <p num="46">
      --
      <br/>
      --           mnemonic         command          operand
      <br/>
      --           INI              00               none
      <br/>
      --           SET              01               A0 to A14
      <br/>
      --           SAR              10               A15
      <br/>
      --           TRN              11               none
    </p>
    <p num="47">
      "INI" is a command to return the internal condition of the RTD 1 into an initial condition.
      <br/>
      In order to change the setting of an address, this command is transmitted to the RTD 1 prior to transmission of new address data. "SET" is a command to perform setting of a read address. "SAR" is a command for instruction to complete setting of a read address and start access to the RAM. "TRN" is a command for instruction to assert a DTACKB signal and start transmission of data by the RTD 1.
      <br/>
      It is to be noted that, in the present embodiment, each of A0 to A15 represents an address.
    </p>
    <p num="48">When the external monitor system tries to read out data of the RAM 2, it transmits, for example, such command sequence as given below to the RTD 1.</p>
    <p num="49">
      --
      <br/>
      --                         SET A0
      <br/>
      --                         SET A1
      <br/>
      --                           .
      <br/>
      --                           .
      <br/>
      --                           .
      <br/>
      --                         SET A14
      <br/>
      --                         SAR A15
      <br/>
      --                         TRN
      <br/>
      --                           .
      <br/>
      --                           .
      <br/>
      --                           .
      <br/>
      --                         INI
      <br/>
      --                         SET A0
      <br/>
      --                         SET A1
      <br/>
      --                           .
      <br/>
      --                           .
      <br/>
      --                           .
      <br/>
      --                         SET A14
      <br/>
      --                         SAR A15
      <br/>
      --                         TRN
      <br/>
      --                           .
    </p>
    <p num="50">
      The RTD 1 has been reset by a reset signal inputted thereto by way of the reset signal line 55 or by a reset signal to the CPU 103 inputted by way of the reset signal line 41.
      <br/>
      The set value of the address pointer 22 after such resetting is 0, and also the value of the command register 26 is 0.
      <br/>
      After resetting, the control section 21 is in a condition in which it waits reception of address data.
      <br/>
      Further, the control section 21 sets the DTACKB signal to "1(high level)." Furthermore, the connection condition between the receiving shift register 23 and the address registers 27 are set so that the output of the receiving shift register 23 is inputted to the address register 27 for the first address data (A0).
      <br/>
      It is to be noted that the DTACKB signal is low active.
    </p>
    <p num="51">
      The commands are successively inputted to the receiving shift register 23 in synchronism with rising edges of a clock signal on the clock line 52 by way of the serial input data line 51.
      <br/>
      The upper 2 bits of the receiving shift register 23 are set to the command register 26.
      <br/>
      The command received first, that is, "SET A0," includes first address data, and after reception of the command is completed, the upper 2 bits of the command are transferred to the command register 26 whereas the other address data are transferred to the address register 27 for A0.
      <br/>
      When the reception of the command is completed, the value of the address pointer 22 is incremented by +1.
      <br/>
      Further, the connection condition between the receiving shift register 23 and the address registers 27 is set so that the output of the receiving shift register 23 is inputted to the address register 27 for the second address data (A1).
    </p>
    <p num="52">
      Thereafter, the commands "SET A1" to "SAR A15" are successively received, and the address data in the individual commands are set to the corresponding address registers 27.
      <br/>
      After reception of "SAR A15" is completed, "01" is set to the command register 26.
      <br/>
      The control section 21 detects that "01" has been set to the command register 26 and thus determines that reception of a series of data including address data has been completed.
      <br/>
      Then, the control section 21 returns the value of the address pointer 22 to 0.
      <br/>
      Further, the control section 21 starts reading out of data in the RAM 2.
      <br/>
      It is to be noted that, while the RTD 1 operates in such a manner as described above, the CPU 103 executes a program irrespective of the operation of the RTD 1.
    </p>
    <p num="53">
      A RAM select signal indicating that the CPU 103 is accessing the RAM 2 is inputted to the control section 21.
      <br/>
      The control section 21 starts accessing to the RAM 2 when the RAM select signal becomes insignificant.
      <br/>
      In particular, the control section 21 first controls the switch 10 to an open condition and controls the buffer 9 to put the outputting condition thereof into a high impedance condition.
      <br/>
      Further, the control section 21 sets the connection condition of the selector 3 so that the RAM select signal from the RTD 1 may be outputted to the RAM select signal line 8 and a system bus signal outputted from the RTD 1 may be outputted to the system bus signal line 7.
      <br/>
      Furthermore, the control section 21 controls the switch 28 to a closed condition.
      <br/>
      Consequently, the RAM 2 and the data bus 5 are disconnected from each other, and the RAM 2 and the address bus 4 are disconnected from each other.
      <br/>
      Then, the local address bus 11 from the RTD 1 is connected to the address input of the RAM 2.
      <br/>
      Here, the connection condition of the address registers 27 and the local address bus 11 is set so that contents of that one of the sixteen address registers 27 which corresponds to the value of the address pointer 22 may be outputted to the local address bus 11.
    </p>
    <p num="54">
      The control section 21 renders the RAM select signal significant and outputs a signal for instruction to read out to the system bus signal line 44.
      <br/>
      The RAM 2 receives the RAM select signal and the system bus signal from the control section 21 by way of the selector 3.
      <br/>
      Consequently, the RAM 2 outputs address data (A0) corresponding to the contents of the first address register 27 inputted by way of the local address bus 11to the local data bus 12.
      <br/>
      The selector 31 is set so that the local data bus 12 is connected to the transmitting buffer register 24 while the value of the address pointer 22 remains from 0 to 15.
      <br/>
      Accordingly, the contents of an address designated by the address data (A0) are transferred to the transmitting buffer register 24 by way of the local data bus 12.
    </p>
    <p num="55">
      Contents of the transmitting shift register 25 are outputted to the serial output data line 54 in synchronism with falling edges of the clock signal on the clock line 52.
      <br/>
      After all of the contents of the transmitting shift register 25 are outputted, the contents of the transmitting buffer register 24 are transferred to the transmitting shift register 25, and the contents are outputted from the transmitting shift register 25 to the serial output data line 54.
      <br/>
      In other words, the contents of the address designated by the address data (A0) are outputted to the serial output data line 54.
      <br/>
      The control section 21 asserts a DTACKB signal simultaneously when significant data begin to be outputted to the serial output data line 54.
      <br/>
      In particular, the control section 21 changes the DTACKB signal to the low level.
      <br/>
      In this instance, when the contents of the address designated by the address data (A0) begin to be outputted to the serial output data line 54, the DTACKB signal changes to the low level.
      <br/>
      The monitor system installed outside recognizes that significant data are being outputted to the serial output data line 54 while the DTACKB signal remains at the low level.
    </p>
    <p num="56">
      Thereafter, the control section 21 increments the value of the address pointer 22 by +1.
      <br/>
      Consequently, the connection between the local address bus 11 and the address registers 27 is set so that contents of the second address register 27 may be outputted to the local address bus 11.
      <br/>
      Then, the control section 21 renders the RAM select signal significant and outputs a signal for instruction to read out to the system bus signal line 44.
      <br/>
      Consequently, the RAM 2 outputs data in the address designated by the address data (A1) to the local data bus 12.
      <br/>
      The data of the local data bus 12 are set to the transmitting buffer register 24 by way of the selector 31.
      <br/>
      The control section 21 increments the value of the address pointer 22 by +1.
      <br/>
      The data in the transmitting buffer register 24 are transferred to the transmitting shift register 25 after all of the contents of the transmitting shift register 25 at present are outputted.
      <br/>
      Then, the contents are outputted from the transmitting shift register 25 to the serial output data line 54.
    </p>
    <p num="57">After the data in the transmitting buffer register 24 are transferred to the transmitting shift register 25, the control section 21 renders the RAM select signal significant and outputs a signal for instruction to read out to the system bus signal line 44 in order to read out data at an address designated by the next address data (A2) from the RAM 2.</p>
    <p num="58">
      The steps of operation described above are successively executed, and finally, data in an address designated by the last address data (A15) are read out from the RAM 2.
      <br/>
      The data thus read out are outputted to the serial output data line 54 by way of the transmitting buffer register 24 and the transmitting shift register 25.
      <br/>
      After the data at the address designated by the last address data (A15) are transferred to the transmitting buffer register 24, the value of the address pointer 22 changes to "16."
    </p>
    <p num="59">
      When the value of the address pointer 22 is "16" and the transmitting buffer register 24 becomes empty, the control section 21 changes over the selector 31 so that the output of the counter 29 may be transferred to the transmitting buffer register 24.
      <br/>
      The counter 29 counts internal clocks of the microcomputer.
      <br/>
      Accordingly, the count value then is transferred to the transmitting buffer register 24.
      <br/>
      After contents of the transmitting shift register 25 at present are all outputted, they are transferred to the transmitting shift register 25.
      <br/>
      Then, the contents in the transmitting shift register 25 are outputted to the serial output data line 54.
      <br/>
      The monitor system installed outside receives the count value and can obtain time information during use of the RTD from the received value.
    </p>
    <p num="60">
      After the count value is transferred to the transmitting buffer register 24, the control section 21 increments the value of the address pointer 22 by +1.
      <br/>
      In particular, the value of the address pointer 22 changes to "17." When the value of the address pointer 22 is "17" and the transmitting buffer register 24 becomes empty, the control section 21 changes over the selector 31 so that the output of the status register 30 may be transferred to the transmitting buffer register 24.
      <br/>
      Accordingly, the value of the status register 30then is transferred to the transmitting buffer register 24.
      <br/>
      After contents of the transmitting shift register 25 at present are all outputted, they are transferred to the transmitting shift register 25.
      <br/>
      Then, the contents in the transmitting shift register 25 are outputted to the serial output data line 54.
      <br/>
      The status register 30 reverses its bit if an interruption request is produced in the microcomputer.
      <br/>
      Accordingly, the monitor system can recognize, by discriminating the value of the status register 30, whether or not an interruption request has been produced in the microcomputer.
      <br/>
      In particular, if the value of the status register 30 received at present does not coincide with the value of the status register 30 received previously, then the monitor system can recognize that an interruption request has occurred between the time at which the value of the status register 30 was received previously and the present time.
    </p>
    <p num="61">
      After the output of the status register 30 is transferred to the transmitting buffer register 24, the control section 21 changes the value of the address pointer 22 to "0." Then, the processing of one cycle from the step at which contents of an address designated by the address data (A0) are read out from the RAM 2 and outputted to the serial output data line 54 to the step at which the value of the status register 30 is outputted to the serial output data line 54 is executed again.
      <br/>
      It is to be noted that, when the control section 21returns the value of the address pointer 22 to "0," it changes the DTACKB signal to "1" for a period of one clock of the clock signal on the clock signal line.
      <br/>
      The monitor system installed outside can recognize, by detecting that the DTACKB signal has momentarily become insignificant, that data transferring processing for one cycle has been completed.
      <br/>
      Further, the control section 21 confirms, before it renders the RAM select signal on the RAM select signal line 43 significant, without fail whether or not the RAM select signal from the CPU 103 is significant.
      <br/>
      When the RAM select signal from the CPU 103 is significant, the control section 21 does not render the RAM select signal on the RAM select signal line 43 significant until after the signal becomes insignificant.
    </p>
    <p num="62">
      The monitory system successively outputs the TRN command while the data transferring processing is continuing.
      <br/>
      Since the upper 2 bits of the TRN command are "11," "11" are successively set to the command register 26.
      <br/>
      The control section 21 successively performs the data transferring processing described above as far as the contents of the command register 26 are "11."
    </p>
    <p num="63">
      The monitor system outputs an INI command when it attempts to change the data read address for the RAM 2.
      <br/>
      Consequently, the upper 2 bits "00" of the INI command are set to the command register 26.
      <br/>
      The control section 21 performs initialization processing if it detects that the contents of the command register 26 are "00." In particular, the control section 21 returns the value of the address pointer 22 to "0" and enters into a condition wherein it waits reception of the command "SET A0."
    </p>
    <p num="64">
      Data for arbitrary 16 addresses of the RAM 2 are outputted to the outside in a condition wherein the CPU 103 is executing a program while accessing the RAM 2 built in the microcomputer in such a manner as described above.
      <br/>
      Besides, data transferring processing to the outside is executed when the CPU 103 does not access the RAM 2.
    </p>
    <p num="65">Embodiment 2</p>
    <p num="66">
      FIG. 3 is a block diagram showing a construction of a microcomputer according to a second embodiment of the present invention together with an external monitor system.
      <br/>
      In the microcomputer, reference numeral 1A denotes an RTD built in the microcomputer for supporting debugging, 2 a RAM built in the microcomputer, 4 an address bus of a CPU 103, 5 a data bus of the CPU 103, 6 a system bus signal line from the CPU 103, 41 a reset signal line for transmitting a reset signal to be provided from the CPU 103 to the RTD 1A, 42 a RAM select signal line for transmitting a RAM select signal from the CPU 103, and 45 an emROM select signal line for transmitting an emROM select signal from the CPU 103.
    </p>
    <p num="67">
      Reference numeral 61 denotes a first emROM (emulation ROM) for emulating the ROM used in actual working of microcomputer, 62 a second emROM (emulation ROM) having addresses allocated in a same address space as that of the first emROM 61, 11 a local address bus provided between the first emROM 61 and the second emROM 62, 12 a local data bus provided among the RTD 1A, the RAM 2, the first emROM 61 and the second emROM 62, 43 a RAM select signal line for transmitting a RAM select signal from the RTD 1A, 44 a system bus signal line for transmitting a system bus signal from the RTD 1A, 71 a first emROM select signal line for transmitting the first emROM select signal from the CPU 103, 72 a first emROM select signal line for transmitting a first emROM select signal from the CPU 103, 73 a second emROM select signal line for transmitting a second emROM select signal from the RTD 1A, and 74 a second emROM select signal line for transmitting a second emROM select signal from the CPU 103.
      <br/>
      It is to be noted that the RAM select signal outputted from the CPU 103 passes the RTD 1A and is transmitted by way of the RAM select signal line 42 extending from the RTD 1A to the RAM 2.
    </p>
    <p num="68">
      In the monitor system, reference numeral 81 denotes a monitor for providing a predetermined command to the RTD 1A in the microcomputer and receiving data from the RTD 1A, and 82 an emROM status register connected to the address bus 4 and the data bus 5 of the CPU 103 and including an emROM changing over requesting bit and an emROM selection condition bit.
      <br/>
      The emROM selection condition bit is, for example, "1" when the CPU 103 selects the first emROM 61 but "0" when the CPU 103 selects the second emROM 62.
      <br/>
      Reference numeral 83 denotes a signal line for transmitting an emROM changing over requesting signal from the monitor 81 to the emROM status register 82, and 84 a signal line for transmitting contents of the emROM selection condition bit from the emROM status register 82 to the RTD 1A.
    </p>
    <p num="69">Reference numeral 51 denotes a serial input data line for transmitting a command from the monitor 81, 52 a clock line for transmitting a clock signal (shift clocks), 53 a signal line for transmitting a DTACKB signal outputted from the control section 21, and 54 a serial output data line for transmitting serial data from the RTD 1A.</p>
    <p num="70">
      FIG. 4 is a block diagram showing an internal construction of the RTD 1A.
      <br/>
      In the RTD 1A, reference numeral 21A denotes a control section for controlling accessing to the RAM 2 and the emROMs, 23 a receiving shift register for receiving a command from the monitor system provided on the outside, 24 a transmitting buffer to which data to be outputted to the monitor system are set, 25 a transmitting shift register for outputting data to the monitor system, and 26 a command register for storing command data in a received command.
      <br/>
      Reference numeral 32 denotes an address register for storing address data in a received command, 33 an address bus driver provided between the address register 32 and the local address bus 11, 34 a data register for storing data of the second frame of a received command, and 35 a data output buffer provided between the data register 34 and the local data bus 12.
    </p>
    <p num="71">
      Subsequently, operation will be described.
      <br/>
      The microcomputer shown in FIG. 3 is used upon debugging, and a program to be used in actual working is set to the first emROM 61 or the second emROM 62.
      <br/>
      In actual working, a microcomputer which has a same architecture as that of the present microcomputer and includes a built-in ROM in place of the first emROM 61 and the second emROM 62 is used.
      <br/>
      The terminology "in actual working" signifies "when a system including a microcomputer having a program for which debugging has been completed is installed and run in an apparatus used by a user." The first emROM 61 and the second emROM 62 have same addresses and an equal capacity, and only one of them is accessed from the CPU 103.
      <br/>
      Further, while the CPU 103 can perform only reading out of data from the first emROM 61 and second emROM 62, the RTD 1A can perform both of reading out and writing of data from and into the first emROM 61 and the second emROM 62.
    </p>
    <p num="72">
      Further, the microcomputer used here is presumed to be a 32-bit microcomputer.
      <br/>
      The RAM 2 is presumed to be a RAM having a capacity of 8 Kbytes of the addresses of 00001000"H" to 00002FFF"H," and the first emROM 61 and the second emROM 62 are each presumed to be an emROM having a capacity of 4 Kbytes of the addresses of FF000000"H" to FF000FFF"H." Then, it is presumed that, if, for example, the address of "0001 0000 0000 00XX (binary)" (X: indefinite) is provided to the RAM 2, data of 4 bytes at 00001000"H" to 00001003"H" are accessed.
    </p>
    <p num="73">
      Changing over between the first emROM 61 and the second emROM 62 will be described.
      <br/>
      It is assumed that the CPU 103 is using the first emROM 61.
      <br/>
      In this instance, the emROM selection condition bit of the emROM status register 82 is "1." When the emROM selection condition bit is "1," if an emROM select signal is outputted from the CPU 103 to the emROM select signal line 45, then the RTD 1A outputs an emROM selection signal to the first emROM select signal line 72.
      <br/>
      In order to change over the emROM to be used by the CPU 103, the monitor 81 sets the emROM changing over requesting bit of the emROM status register 82.
      <br/>
      The CPU 103 can access the emROM changing over requesting bit by way of the data bus 5.
      <br/>
      It is to be noted that the program of the CPU 103 is programmed so as to periodically check the emROM changing over requesting bit.
    </p>
    <p num="74">
      If the CPU 103 recognizes that the emROM changing over requesting bit has been set, it changes the emROM selection condition bit to "0." Further, the CPU 103 resets the emROM changing over requesting bit.
      <br/>
      The condition of the emROM selection condition bit is inputted to the RTD 1A.
      <br/>
      Thereafter, the RTD 1A outputs an emROM select signal to the second emROM select signal line 74 when an emROM select signal is outputted from the CPU 103 to the emROM select signal line 45.
      <br/>
      In other words, the CPU 103 uses the second emROM 62.
      <br/>
      In order to change over the emROM to be used by the CPU 103 again, the monitor 81 sets the emROM changing over requesting bit again.
      <br/>
      Consequently, the CPU 103 changes the emROM selection condition bit to "1" and resets the emROM changing over requesting bit.
      <br/>
      Thereafter, when an emROM select signal is outputted from the CPU 103 to the emROM select signal line 45, the RTD 1A outputs an emROM select signal to the first emROM select signal line 72.
      <br/>
      In other words, the CPU 103 uses the first emROM 61.
    </p>
    <p num="75">
      Where the emROM to be used by the CPU 103 can be changed over in this manner, the RTD 1A can access the other emROM without having an influence upon an accessing operation of the emROM by the CPU 103.
      <br/>
      Accordingly, while the CPU 103 is using one of the emROMs, the RTD 1A can vary the contents of the other emROM and, after such variation of the contents, can change over the emROM to be used by the CPU 103.
      <br/>
      In other words, during operation of the CPU 103, the program can be changed.
    </p>
    <p num="76">Embodiment 3</p>
    <p num="77">The RTD 1A built in the microcomputer realizes the following functions in response to an instruction of the monitor.</p>
    <p num="78">
      1. Real time RAM contents outputting
      <br/>
      2.
      <br/>
      Real time RAM contents re-writing
      <br/>
      3.
      <br/>
      EmROM contents outputting
      <br/>
      4.
      <br/>
      EmROM contents re-writing
      <br/>
      5.
      <br/>
      Continued monitoring
      <br/>
      6.
      <br/>
      Recovery from a run-away condition
    </p>
    <p num="79">In order to realize the functions described above, the RTD 1A can use the following commands from the monitor 81.</p>
    <p num="80">
      --
      <br/>
      --                             command
      <br/>
      --        mnemonic              12   13          14   15
      <br/>
      --        VER (VERify)          0    0           0    0
      <br/>
      --        RDR (ReaD Ram)        0    0           1    0
      <br/>
      --        WRR (WRite Ram)       0    0           1    1
      <br/>
      --        RDE (Read Emrom)      0    1           0    0
      <br/>
      --        WRE (WRite Emrom)     0    1           0    1
      <br/>
      --        RCV (ReCoVer)         1    1           1    1
    </p>
    <p num="81">It is assumed that the commands here are constituted from 32 bits. "VER" is a command for instruction of continued monitoring; "RDR" is a command for instruction of real time RAM contents outputting; "WRR" is a command for instruction of RAM contents re-writing (with verification); "RDE" is a command for instruction of emROM contents outputting; "WRE" is a command for instruction of emROM contents re-writing (with verification); and "RCV" is a command for instruction of recovery from a run-away condition.</p>
    <p num="82">
      The RTD 1A renders the DTACKB signal significant when it sends out data in response to a command from the monitor system.
      <br/>
      In other words, the RTD 1A changes the DTACKB signal to the low level.
      <br/>
      The duration of the low level depends upon the command received.
      <br/>
      When data is to be sent out in response to an RDR command, an RDE command or a VER command, the RTD 1A changes the DTACKB signal to the low level only for a period of one clock of the clock signal on the clock line 52.
      <br/>
      When data is to be sent out in response to a WRR command, the RTD 1A changes the DTACKB signal to the low level only for a period of two clocks of the clock signal on the clock line 52.
      <br/>
      When data is to be outputted in response to a WRE command, the RTD 1A changes the DTACKB signal to the low level only for a period of three clocks of the clock signal on the clock line 52.
      <br/>
      When data is to be sent out in response to an RCV command, the RTD 1A changes the DTACKB signal for a period of four or more clocks of the clock signal on the clock line 52.
      <br/>
      It is to be noted that the construction of the microcomputer according to the present invention is such as, for example, shown in FIG. 3.
    </p>
    <p num="83">
      Subsequently, operation will be described.
      <br/>
      FIGS. 5(A) and 5(B) are circuit diagrams showing elements associated with the RAM 2 in detail.
      <br/>
      As shown in FIG. 5(A), a switch 91 is interposed between the data bus 5 of the CPU 103 and the input side of the RAM 2 while another switch 92 is interposed between the local data bus 12 and the input side of the RAM 2.
      <br/>
      Further, a buffer 93 is interposed between the output side of the RAM 2 and the data bus 5 of the CPU 103 while another buffer 94 is interposed between the output side of the RAM 2 and the local data bus 12.
      <br/>
      As shown in FIG. 5(B), a switch 95 is interposed between the address bus 4 of the CPU 103 and the address input of the RAM 2 while another switch 96 is interposed between the local address bus 11 and the address input of the RAM 2.
    </p>
    <p num="84">
      When the RTD 1A tries to read out data from the RAM 2, the RTD 1A produces a reading out control signal and outputs it to the system bus signal line 44.
      <br/>
      Further, the RTD 1A outputs a RAM select signal to the RAM select signal line 43.
      <br/>
      The RAM 2 puts the buffer 94 into a conducting condition in response to the control signal and the RAM select signal.
      <br/>
      The switches 91 and 92 are in an open condition, and the buffer 93 is in a high impedance condition.
      <br/>
      Further, the RAM 2 closes the switch 96 and puts the switch 95 into an open condition.
      <br/>
      Consequently, the RAM 2 outputs data at an address designated by address data on the local address bus 11 to the local data bus 12.
      <br/>
      When the RTD 1A tries to write data into the RAM 2, it produces a writing control signal and outputs it to the system bus signal line 44.
      <br/>
      Further, the RTD 1A outputs a RAM select signal to the RAM select signal line 43.
      <br/>
      The RAM 2 closes the switch 92 in response to the control signal and the RAM select signal.
      <br/>
      The buffers 93 and 94 are in a high impedance condition and the switch 91 is in an open condition.
      <br/>
      Further, the RAM 2 closes the switch 96 and puts the switch 95 into an open condition.
      <br/>
      Consequently, the RAM 2 writes data outputted to the local data bus 12 to an address designated by address data on the local address bus 11.
    </p>
    <p num="85">
      When the CPU 103 tries to read out data from the RAM 2, it produces a reading out control signal and outputs it to the system bus signal line 6.
      <br/>
      The control signal on the system bus signal line 6 is outputted to the system bus signal line 44 by way of the RTD 1A.
      <br/>
      Further, the CPU 103 outputs a RAM select signal to the RAM select signal line 42.
      <br/>
      The RAM select signal is outputted to the RAM select signal line 42 on the RAM 2 side by way of the RTD 1A.
      <br/>
      The RAM 2 puts the buffer 93 into a conducting condition in response to the control signal and the RAM select signal.
      <br/>
      The switches 91 and 92 are in an open condition, and the buffer 94 is in a high impedance condition.
      <br/>
      Further, the RAM 2 closes the switch 95 and puts the switch 96 into an open condition.
      <br/>
      Consequently, the RAM 2 outputs data at an address designated by address data on the address bus 4 to the data bus 5.
    </p>
    <p num="86">
      When the CPU 103 tries to write data into the RAM 2, it produces a writing control signal and outputs it to the system bus signal line 6.
      <br/>
      The control signal on the system bus signal line 6 is outputted to the system bus signal line 44 by way of the RTD 1A.
      <br/>
      Further, the CPU 103 outputs a RAM select signal to the RAM select signal line 42.
      <br/>
      The RAM select signal is outputted to the RAM select signal line 42 on the RAM 2 side by way of the RTD 1A.
      <br/>
      The RAM 2 closes the switch 91 in response to the control signal and the RAM select signal.
      <br/>
      The buffers 93 and 94 are in a high impedance condition, and the switch 92 is in an open condition.
      <br/>
      Further, the RAM 2 closes the switch 95 and puts the switch 96 into an open condition.
      <br/>
      Consequently, the RAM 2 writes data outputted to the data bus 5 from the CPU 103 to an address designated by address data on the address bus 4 of the CPU 103 side.
    </p>
    <p num="87">
      Subsequently, real time RAM contents outputting will be described with reference to timings and a command format illustrated in FIGS. 6(A) and 6(B).
      <br/>
      Referring to FIG. 6(A), reference character (a) denotes a clock signal on the clock line 52; (b) a signal on the serial input data line 51; (c) a signal on the serial output data line 54; and (d) a DTACKB signal appearing on the signal line 53.
      <br/>
      The RDR command has, for example, as seen from FIG. 6(B), command data of the twelfth to fifteenth bits and address data of the eighteenth to twenty-ninth bits.
      <br/>
      The address data include bits for designating the addresses A(2) to A(13).
      <br/>
      It is to be noted that, similarly as in the first embodiment, reference characters A1, A2, A3 and so forth individually represent address data.
      <br/>
      Further, A(i) (i=0 to 31) signifies a bit of one address.
    </p>
    <p num="88">
      When it is tried to read out data at a particular address of the RAM 2 to the external monitor system side, the monitor 81 sends out a RDR command to the serial input data line 51.
      <br/>
      The RDR command is successively inputted to the receiving shift register 23 in synchronism with rising edges of the clock signal on the clock line 52.
      <br/>
      It is assumed that the RDR command inputted then includes address data which designate the address A1 as seen in FIG. 6(A).
      <br/>
      After the command constituted from 32 bits from the monitor 81 is completely inputted to the receiving shift register 23 (at the timing t1 in FIG. 6(A)), the command data in the command are transferred to the command register 26.
      <br/>
      The control section 21A analyzes the data stored in the command register 26 and determines that the received command is an RDR command.
      <br/>
      Consequently, the control section 21A controls so that the address data in the command may be transferred to the address register 32.
    </p>
    <p num="89">
      A RAM select signal from the CPU 103 is introduced into the control section 21A.
      <br/>
      If the RAM select signal from the CPU 103 is not significant, then the control section 21A sets the address bus driver 33 to a passing condition.
      <br/>
      Consequently, contents of the address register 32 are outputted to the local address bus 11.
      <br/>
      Further, the control section 21A renders the RAM select signal line 43 significant and supplies a RAM select signal to the RAM 2, and outputs a control signal for instruction to read out data to the system bus signal line 44.
      <br/>
      The RAM 2 outputs data at an address designated by the address data on the local address bus 11 to the local data bus 12 in response to the RAM select signal and the control signal on the system bus signal line 44.
      <br/>
      More particularly, data for four address beginning with the address designated by the address data are outputted.
      <br/>
      In other words, data of four bytes are outputted.
      <br/>
      The detailed data reading out control of the RAM 2 is such as described hereinabove.
    </p>
    <p num="90">
      The data on the local data bus 12 is inputted to the transmitting buffer register 24.
      <br/>
      The input timing is a point of time between the timing t1 and the timing t2 illustrated in FIG. 6(A).
      <br/>
      It is to be noted that, in FIG. 6(A), it can be seen that, subsequently to the RDR command including the address data designating the address A1, another RDR command including address data designating the address A2 is sent out from the monitor 81.
    </p>
    <p num="91">
      The data in the transmitting buffer register 24 is transferred to the transmitting shift register 25 in synchronism with completion of reception of the command (at the timing t2 in FIG. 6(A)).
      <br/>
      The data in the transmitting shift register 25 is sent out to the serial output data line 54 in synchronism with falling edges of the clock signal on the clock line 52.
      <br/>
      The monitor 81 fetches the data on the serial output data line 54 in synchronism with rising edges of the clock signal.
      <br/>
      It is to be noted that the control section 21A asserts a DTACKB signal for a period of one clock when the data in the transmitting shift register 25 is sent out.
      <br/>
      Consequently, the low level appears for a period of one clock on the signal line 53.
      <br/>
      Accordingly, the monitor 81 can recognize a delimitation of the data by monitoring the signal line 53.
      <br/>
      FIG. 6(A) shows, in addition to the DTACKB signal outputted at the timing t2, another DTACKB signal outputted in response to another RDR commend received previously and a further DTACKB signal outputted in response to a further RDR command received later.
    </p>
    <p num="92">
      Subsequently, real time RAM contents re-writing will be described with reference to timings and a command format shown in FIGS. 7(A) and 7(B).
      <br/>
      The first frame of the WRR command includes, for example, as seen from FIG. 7(B), command data of the twelfth to fifteenth bits and address data of the eighteenth to twenty-ninth bits.
      <br/>
      The address data includes data for designating the addresses A(2) to A(13).
      <br/>
      The second frame of the WRR command includes data to be written.
    </p>
    <p num="93">
      When it is tried to write data to a particular address of the RAM 2, the monitor 81 sends out a WRR command to the serial input data line 51.
      <br/>
      The WRR command is successively inputted to the receiving shift register 23 in synchronism with rising edges of the clock signal on the clock line 52.
      <br/>
      It is assumed that the first frame of the WRR command inputted then includes address data which designate the address A1 as seen in FIG. 7(A).
      <br/>
      After the command constituted from 32 bits from the monitor 81 is completely inputted to the receiving shift register 23 (at the timing t1 in FIG. 7(A)), the command data in the command are transferred to the command register 26.
      <br/>
      The control section 21A analyses the data stored in the command register 26 and discriminates that the received command is a WRR command.
      <br/>
      Consequently, the control section 21A controls so that the address data in the command may be transferred to the address register 32.
    </p>
    <p num="94">
      The control section 21A sets the address bus driver 33 to a passing condition so that the contents of the address register 32 may be outputted to the local address bus 11 if the RAM select signal from the CPU 103 is not significant.
      <br/>
      Further, the control section 21A renders the RAM select signal line 43 significant and supplies a RAM select signal to the RAM 2, and outputs a control signal for instruction to read out data to the system bus signal line 44.
      <br/>
      The RAM 2 outputs data at an address designated by the address data on the local address bus 11 to the local data bus 12 in response to the RAM select signal and the control signal on the system bus signal line 44.
      <br/>
      More particularly, data for 4 bytes are outputted.
    </p>
    <p num="95">
      The data on the local data bus 12 is inputted to the transmitting buffer register 24.
      <br/>
      The input timing is a point of time between the timing t1 and the timing t2 illustrated in FIG. 7(A).
      <br/>
      In the meantime, the second frame of the WRR is inputted from the monitor 81 to the receiving shift register 23.
      <br/>
      The data in the transmitting buffer register 24 is transferred to the transmitting shift register 25 in synchronism with completion of reception of the command, in this instance, in synchronism with completion of reception of the second frame of the WRR command (at the timing t2 illustrated in FIG. 7(A)).
      <br/>
      The data in the transmitting shift register 25 is sent out to the serial output data line 54 in synchronism with falling edges of the clock signal on the clock line 52.
      <br/>
      Data at an address whose contents are to be re-written are supplied to the monitor 81 in such a manner as described above.
    </p>
    <p num="96">
      After the second frame of the WRR command is inputted to the receiving shift register 23, the second frame of the WRR command is transferred from the receiving shift register 23 to the data register 34 under the control of the control section 21A.
      <br/>
      The second frame of the WRR command represents data to be written.
      <br/>
      The control section 21A sets the address bus driver 33 to a passing condition so that the contents of the address register 32 may be outputted to the local address bus 11 if the RAM select signal from the CPU 103 is not significant.
      <br/>
      Further, the control section 21A renders the RAM select signal line 43 significant and supplies a RAM select signal to the RAM 2, and outputs a control signal for instruction to write data to the system bus signal line 44.
      <br/>
      Further, the control section 21A puts the data output buffer 35 into a conducting condition.
      <br/>
      Consequently, the data in the data register 34 is outputted to the local data bus 12.
    </p>
    <p num="97">
      The RAM 2 writes data on the local data bus 12 to an address designated by the address data on the local address bus 11 in response to the RAM select signal and the control signal on the system bus signal line 44.
      <br/>
      The detailed data writing control of the RAM 2 is such as described hereinabove.
      <br/>
      Subsequently, the control section 21A sets the address bus driver 33 to a passing condition so that the contents of the address register 32 may be outputted to the local address bus 11 if the RAM select signal from the CPU 103 is not significant.
      <br/>
      Further, the control section 21A renders the RAM select signal line 43 significant and supplies a RAM select signal to the RAM 2, and outputs a control signal for instruction to read out data to the system bus signal line 44.
      <br/>
      The RAM 2 outputs data at an address designated by the address data on the local address bus 11 to the local data bus 12 in response to the RAM select signal and the control signal on the system bus signal line 44.
      <br/>
      More particularly, data for four bytes are outputted.
    </p>
    <p num="98">
      The data on the local data bus 12 is inputted to the transmitting buffer register 24.
      <br/>
      The input timing is a point of time between the timing t2 and the timing t3 illustrated in FIG. 7(A).
      <br/>
      The data in the transmitting buffer register 24 is transferred to the transmitting shift register 25 in synchronism with completion of reception of the command (at the timing t3 in FIG. 7(A)).
      <br/>
      The data in the transmitting shift register 25 is sent out to the serial output data line 54 in synchronism with falling edges of the clock signal on the clock line 52.
      <br/>
      The data written into the RAM 2 by the control section 21A is read out and transferred to the monitor 81 immediately after it is written in such a manner as described above.
      <br/>
      The monitor 81 can confirm, using the thus transferred value as a verify value, whether or not the data sent out so as to be re-written have an equal verify value.
      <br/>
      However, before data is read out from a particular address after it is written into the address by the control section 21A, the CPU 103 may possibly write data into the particular address.
      <br/>
      In this instance, the verify value may be different from the verify value of the data sent out so as to be re-written.
    </p>
    <p num="99">
      It is to be noted that, when the data in the transmitting shift register 25 is sent out, the control section 21A asserts a DTACKB signal only for a period of two clocks.
      <br/>
      Consequently, the low level appears for a period of two clocks on the signal line 53.
      <br/>
      Accordingly, the monitor 81 can recognize a delimitation of the data outputted in response to the WRR command by monitoring the signal line 53.
      <br/>
      FIG. 7(A) shows, in addition to the DTACKB signals outputted at the timings t2 and t3, another DTACKB signal outputted in response to another WRR command received previously and a further DTACKB signal outputted in response to a further WRR command received later.
    </p>
    <p num="100">
      Subsequently, emROM contents outputting will be described with reference to timings and a command format illustrated in FIGS. 8(A) and 8(B).
      <br/>
      The RDE command includes, for example, as seen in FIG. 8(B), command data of the twelfth to fifteenth bits and address data of the eighteenth to twenty-ninth bits.
      <br/>
      The address data include data for designating the addresses A(2) to A(13).
    </p>
    <p num="101">
      When data at a particular address of an emROM which is not being used by the CPU 103 at present is to be read out to the external monitor system side, the monitor 81 sends out an RDE command to the serial input data line 51.
      <br/>
      As described hereinabove, the CPU 103 can access only one of the first emROM 61 and the second emROM 62.
      <br/>
      Consequently, the RTD 1A can freely access the emROm which is not being accessed by the CPU 103.
      <br/>
      The RDE command is successively inputted to the receiving shift register 23.
      <br/>
      It is assumed that the RDE command inputted in this instance includes address data which designate the address A1 as seen in FIG. 8(A).
      <br/>
      After the command constituted from 32 bits from the monitor 81 is completely inputted to the receiving shift register 23 (at the timing t1 in FIG. 8(A)), the command data in the command are transferred to the command register 26.
      <br/>
      The control section 21A analyses the data stored in the command register 26 and determines that the received command is an RDE command.
      <br/>
      Consequently, the control section 21A controls so that the address data in the command may be transferred to the address register 32.
    </p>
    <p num="102">
      The control section 21A sets the address bus driver 33 to a passing condition.
      <br/>
      The control section 21A can discriminate, from the emROM selection condition bit in the emROM status register 82, which one of the emROMs is being used by the CPU 103.
      <br/>
      The control section 21A outputs an emROM select signal to one of the first emROM select signal line 71 and the first emROM select signal line 72 which corresponds to the emROM which is not being used by the CPU 103 at present.
      <br/>
      Further, the control section 21A outputs a control signal for instruction to read out data to the system bus signal line 44.
      <br/>
      The first emROM 61 or the second emROM 62 outputs data at an address designated by the address data on the local address bus 11 to the local data bus 12 in response to the emROM select signal and the control signal on the system bus signal line 44.
      <br/>
      More particularly, data for addresses beginning with the address designated by the address data are outputted.
      <br/>
      In other words, data for four bytes are outputted.
    </p>
    <p num="103">
      The data on the local data bus 12 is inputted to the transmitting buffer register 24.
      <br/>
      The input timing is a point of time between the timings t1 and t2 illustrated in FIG. 8(A).
      <br/>
      It is to be noted that, in FIG. 8(A), it is shown that another RDE command including address data which designate the address A2 is sent out from the monitor 81 subsequently to the RDE command including the address data designating the address A1.
    </p>
    <p num="104">
      The data in the transmitting buffer register 24 is transferred to the transmitting shift register 25 in synchronism with completion of reception of the command (at the timing t2 in FIG. 8(A)).
      <br/>
      The data in the transmitting shift register 25 is sent out to the serial output data line 54 in synchronism with falling edges of the clock signal on the clock line 52.
      <br/>
      The monitor 81 fetches the data on the serial output data line 54 in synchronism with rising edges of the clock signal.
      <br/>
      It is to be noted that the control section 21A asserts a DTACKB signal only for a period of one clock when the data in the transmitting shift register 25 is outputted.
      <br/>
      Consequently, the low level appears only for a period of one clock on the signal line 53.
      <br/>
      Accordingly, the monitor 81 can recognize a delimitation of the data transferred in response to the command to output the memory contents by monitoring the signal line 53.
      <br/>
      FIG. 8(A) shows, in addition to the DTACKB signal outputted at the timing t2, another DTACKB signal outputted in response to another RDE command received previously and a further DTACKB signal outputted in response to a further RDE command received later.
    </p>
    <p num="105">
      It is to be noted that, when the CPU 103 tries to read out data of the first emROM 61 or the second emROM 62, it outputs address data to the address bus 4 and outputs an emROM select signal to the emROM select signal line 45, and outputs a control signal for an instruction to read out to the system bus signal line 6.
      <br/>
      The RTD 1A outputs an emROM select signal to one of the first emROM select signal line 72 and the second emROM select signal line 74 which corresponds to the emROM which is being used by the CPU 103 at present.
      <br/>
      The control signal for instruction to read out is outputted to the system bus signal line 44 extending from the RTD 1A.
      <br/>
      The first emROM 61 or the second emROM 62 outputs data at an address designated by the address data on the address bus 4 to the data bus 5 in response to the emROM select signal and the control signal on the system bus signal line 44.
    </p>
    <p num="106">
      Subsequently, emROM contents re-writing will be described with reference to timings and a command format illustrated in FIGS. 9(A) and 9(B).
      <br/>
      The first frame of the WRE command includes, for example, as seen in FIG. 9(B), command data of the twelfth to fifteenth bits and address data of the eighteenth to twenty-ninth bits.
      <br/>
      The address data include data for designating the addresses A(2) to A(13).
      <br/>
      The second frame of the WRE command includes data to be written.
    </p>
    <p num="107">
      When data is to be written into a particular address of the first emROM 61 or the second emROM 62, the monitor 81 sends out a WRE command to the serial input data line 51.
      <br/>
      The WRE command is successively inputted to the receiving shift register 23.
      <br/>
      It is assumed that the first frame of the WRE command inputted in this instance includes address data which designate the address A1 as seen in FIG. 9(A).
      <br/>
      After the command constituted from 32 bits from the monitor 81 is completely inputted to the receiving shift register 23 (at the timing t1 in FIG. 9(A)), the command data in the command are transferred to the command register 26.
      <br/>
      The control section 21A analyses the data stored in the command register 26 and determines that the received command is a WRE command.
      <br/>
      Consequently, the control section 21A controls so that the address data in the command may be transferred to the address register 32.
    </p>
    <p num="108">
      The control section 21A sets the address bus driver 33 to a passing condition so that the contents of the address register 32 may be outputted to the local address bus 11.
      <br/>
      Further, the control section 21A outputs an emROM select signal to one of the first emROM select signal line 71 and the second emROM select signal line 73 which corresponds to the emROM which is not being used by the CPU 103 at present.
      <br/>
      Further, the control section 21A outputs a control signal for instruction to read out data to the system bus signal line 44.
      <br/>
      The first emROM 61 or the second emROM 62 outputs data at an address designated by the data address on the local address bus 11 to the local data bus 12 in response to the emROM select signal and the 0control signal on the system bus signal line 44.
      <br/>
      More particularly, data for four bytes are outputted.
    </p>
    <p num="109">
      The data on the local data bus 12 is inputted to the transmitting buffer register 24.
      <br/>
      The input timing is a point of time between the timings t1 and t2 illustrated in FIG. 9(A).
      <br/>
      In the meantime, the second frame of the WRE command is inputted from the monitor 81 to the receiving shift register 23.
      <br/>
      The data in the transmitting buffer register 24 is transferred to the transmitting shift register 25 in synchronism with completion of reception of the command, in this instance, in synchronism with completion of reception of the second frame of the WRE command (at the timing t2 in FIG. 9(A)).
      <br/>
      The data in the transmitting shift register 25 is sent out to the serial output data line 54.
      <br/>
      The data before re-writing at the address whose contents are to be re-written are supplied to the monitor 81 in such a manner as described above.
    </p>
    <p num="110">
      After the second frame of the WRE command is inputted to the receiving shift register 23, the second frame of the WRE command is transferred from the receiving shift register 23 to the data register 34 under the control of the control section 21A.
      <br/>
      The second frame of the WRE command indicates data to be written.
      <br/>
      The control section 21A sends the address bus driver 33 to a passing condition so that the contents of the address register 32 may be outputted to the local address bus 11.
      <br/>
      Further, the control section 21A supplies an emROM select signal to the first emROM select signal line 71 or the first emROM select signal line 72 and outputs a control signal for instruction to write data to the system bus signal line 44.
      <br/>
      Further, the control section 21A puts the data output buffer 35 into a conducting condition.
      <br/>
      Consequently, the data in the data register 34 is outputted to the local data bus 12.
    </p>
    <p num="111">
      The first emROM 61 or the second emROM 62 writes the data on the local data bus 12 to an address designated by the address data on the local address bus 11 in response to the emROM select signal and the control signal on the system bus signal line 44.
      <br/>
      Subsequently, the control section 21A sets the address bus driver 33 to a passing condition so that the contents of the address register 32 may be outputted to the local address bus 11.
      <br/>
      Further, the control section 21A supplies an emROM select signal to the first emROM select signal line 71 or the second emROM select signal line 73 and outputs a control signal for instruction to read out data to the system bus signal line 44.
      <br/>
      The first emROM 61 or the second emROM 62 outputs data at an address designated by the address data on the local address bus 11 to the local data bus 12 in response to the emROM select signal and the control signal on the system bus signal line 44.
      <br/>
      More particularly, data for four bytes are outputted.
    </p>
    <p num="112">
      The data on the local data bus 12 is inputted to the transmitting buffer register 24.
      <br/>
      The input timing is a point of time between the timings t2 and t3 illustrated in FIG. 9(A).
      <br/>
      The data in the transmitting buffer register 24 is transferred to the transmitting shift register 25 in synchronism with completion of reception of the command (at the timing t3 in FIG. 9(A)).
      <br/>
      The data in the transmitting shift register 25 is sent out to the serial output data line 54 in synchronism with falling edges of the clock signal on the clock line 52.
      <br/>
      The data written in the first emROM 61 or the second emROM 62 by the control section 21A is read out and transferred to the monitor 81 immediately after it is written in such a manner as described above.
      <br/>
      The monitor 81 can confirm, using the thus transferred value as a verify value, whether or not the verify value is equal to that of the data sent out for re-writing.
    </p>
    <p num="113">
      It is to be noted that, when the data in the transmitting shift register 25 is sent out, the control section 21A asserts a DTACKB signal only for a period of three clocks.
      <br/>
      Consequently, the low level appears for a period of three clocks on the signal line 53.
      <br/>
      Accordingly, the monitor 81 can recognize a delimitation of the data outputted in response to a WRE command by monitoring the signal line 53.
      <br/>
      FIG. 9(A) shows, in addition to the DTACKB signals outputted at the timings t2 and t3, another DTACKB signal outputted in response to another WRE command received previously and a further DTACKB signal outputted in response to a further WRE command received later.
    </p>
    <p num="114">
      Subsequently, continued monitoring will be described with reference to timings and a command format illustrated in FIGS. 10(A) and 10(B).
      <br/>
      The VER command has, for example, as illustrated in FIG. 10(B), a command portion of the twelfth to fifteenth bits.
    </p>
    <p num="115">
      When data at a particular address of the RAM 2, the first emROM 61 or the second emROM 62 are to be successively read out to the external monitor system side, the monitor 81 sends out a VER command to the serial input data line 51.
      <br/>
      The VER command is successively inputted to the receiving shift register 23.
      <br/>
      After the command constituted from 32 bits from the monitor 81 is completely inputted to the receiving shift register 23 (at the timing t1 in FIG. 10(A)), the command data in the command are transferred to the command register 26.
      <br/>
      The control section 21A analyses the data stored in the command register 26 and determines that the received command is a VER command.
    </p>
    <p num="116">
      If another command received immediately prior to then is an RDR command or a WRR command, address data designating a particular address of the RAM 2 included in the command is stored in the address register 32 then.
      <br/>
      If another command received immediately prior to then is an RDE command or a WRE command, address data designating a particular address of the first emROM 61 or the second emROM 62 included in the address is stored in the address register 32 then.
      <br/>
      In FIG. 10(A), it is illustrated that an RDR command has been received immediately prior to then, for example.
    </p>
    <p num="117">
      When the command received immediately prior to then is an RDR command or a WRR command, the control section 21A sets the address bus driver 33 to a passing condition if the RAM select signal from the CPU 103 is not significant.
      <br/>
      Consequently, the contents of the address register 32 are outputted to the local address bus 11.
      <br/>
      Further, the control section 21A renders the RAM select signal line 43 significant and supplies a RAM select signal to the RAM 2, and outputs a control signal for instruction to read out data to the system bus signal line 44.
      <br/>
      The RAM 2 outputs data at an address designated by the address data on the local address bus 11 to the local data bus 12 in response to the RAM select signal and the control signal on the system bus signal line 44.
      <br/>
      More particularly, data for four bytes are outputted.
      <br/>
      The data on the local data bus 12 is inputted to the transmitting buffer register 24.
      <br/>
      The input timing is a point of time between the timings t1 and t2 illustrated in FIG. 10(A).
    </p>
    <p num="118">
      The data in the transmitting buffer register 24 is transferred to the transmitting shift register 25 in synchronism with completion of reception of the command (at the timing t2 in FIG. 10(A)) The data in the transmitting shift register 25 is sent out to the serial output data line 54.
      <br/>
      The monitor 81 fetches the data on the serial output data line 54 in synchronism with rising edges of the clock signal.
      <br/>
      It is to be noted that the control section 21A asserts a DTACKB signal only for a period of one clock when the data in the transmitting shift register 25 are sent out.
      <br/>
      Consequently, the low level appears only for a period of one clock on the signal line 53.
      <br/>
      Accordingly, the monitor 81 can recognize a delimitation of the data by monitoring the signal line 53.
    </p>
    <p num="119">
      When the command received immediately prior to then is an RDE command or a WRE command, the control section 21A sets the address bus driver 33 to a passing condition and outputs an emROM select signal to that one of the emROMs which is not being used by the CPU 103 at present by way of the first emROM select signal line 71 or the second emROM select signal line 73.
      <br/>
      Further, the control section 21A outputs a control signal for instruction to read out data to the system bus signal line 44.
      <br/>
      The first emROM 61 or the second emROM 62 outputs data at an address designated by the address data on the local address bus 11 to the local data bus 12 in response to the emROM select signal and the control signal on the system bus signal line 44.
      <br/>
      More particularly, data for four bytes are outputted.
      <br/>
      The operation after then is similar to that when the command received immediately prior is an RDR command or a WRR command.
    </p>
    <p num="120">
      When the monitor 81 tries to get data at a particular address of the RAM 2, the first emROM 61 or the second emROM 62, it successively sends out a VER command to the RTD 1A.
      <br/>
      The RTD 1A repeats the operation described above in response to successive receptions of the VER command.
      <br/>
      The monitor 81 can successively get data at the same address.
      <br/>
      Accordingly, when the CPU 103 re-writes data at a particular address of the RAM 2, the first emROM 61 or the second emROM 62, the point of time at which such re-writing occurs and re-written data can be recognized immediately.
    </p>
    <p num="121">
      Subsequently, recovery from a run-away condition will be described with reference to timings and a command format illustrated in FIGS. 11(A) and 11(B).
      <br/>
      The monitor 81 can recognize a run-away condition of the RTD 1A, for example, from a defect of a DTACKB signal.
      <br/>
      The DTACKB signal is originally kept at the low level for a period of one to three clocks each time the RTD 1A sends out data of 32 bits.
      <br/>
      If the timing at which a DTACKB signal is outputted is different from an original timing at which a DTACKB signal should be outputted, then the monitor 81 recognizes that the RTD 1A is in a run-away condition.
      <br/>
      Or, if the monitor 81 detects that a DTACKB signal which should originally keep the low level for a period of one clock exhibits the low level for a period of a plurality of clocks, it recognizes that the RTD 1A is in a run-away condition.
      <br/>
      Or else, if data outputted to the serial output data line 54 are different by a great amount from an estimated value, the monitor 81 recognizes that the RTD 1A is in a run-away condition.
    </p>
    <p num="122">
      A run-away condition of the RTD 1A occurs very likely when noise is originated in the serial input data line 51 or the serial output data line 54.
      <br/>
      When noise is originated in the serial input data line 51 or the serial output data line 54, a bit shift occurs with a command received by the RTD 1A.
      <br/>
      In this instance, the RTD 1A possibly recognizes that it has received a command different from the command sent out from the monitor 81.
      <br/>
      Then, the RTD 1A may operate in accordance with the different command and respond to the monitor 81 in a different manner from that in which it should respond.
      <br/>
      In such a case, a DTACKB signal which originally should exhibit the low level for a period of one clock may exhibit the low level for a period of a plurality of clocks or data outputted to the serial output data line 54 may be different by a great amount from an estimated value.
      <br/>
      In such a case, although the RTD 1A is operating in accordance with a wrong command, the operation itself is normal.
      <br/>
      Accordingly, if a command for recovering an operation condition is supplied to the RTD 1A, then the RTD 1A very possibly recovers an operation conforming to a demand from the monitor 81.
    </p>
    <p num="123">
      When a run-away condition of the RTD 1A is detected, the monitor 81 sends out an RCV command to the RTD 1A.
      <br/>
      The RCV command has the value of "1" at all of the bits thereof as seen in FIG. 11(B).
      <br/>
      Further, the monitor 81 successively sends out the RCV command twice.
      <br/>
      After the command constituted from 32 bits from the monitor 81 is completely inputted to the receiving shift register 23, the command portion in the command is transferred to the command register 26.
      <br/>
      The control section 21A analyzes the data stored in the command register 26 and discriminates that the received command is an RCV command.
      <br/>
      Since the RCV command has the value of "1" at all of the bits thereof and besides is outputted twice successively, even if a command received before the RCV command is sent out suffers from a bit shift, the data of "1111" are stored into the command register 26 without fail.
      <br/>
      It is to be noted that, in order to make recovery of the RTD 1A sure, the monitor 81 changes the 0th to eleventh bits of any command, which is to be sent out next to the second RCV command and is different from the RCV command, to "1."
    </p>
    <p num="124">
      If it is detected that "1111" have been stored into the command register 26, the control section 21A thereafter waits reception of a command other than an RCV command.
      <br/>
      More particularly, the control section 21A waits that "0" appears at the twelfth bit of the receiving shift register 23.
      <br/>
      In the present embodiment, since the twelfth bit of any command other than the RCV command is "0,"0 when "0" appears at the twelfth bit of the receiving shift register 23, this signifies that a command free from a bit shift has been stored into the receiving shift register 23.
      <br/>
      Consequently, at this point of time, the synchronism between the operation of the RTD 1A and the operation of the monitor 81 is established again.
      <br/>
      In other words, from the standpoint of the monitor 81, the run-away condition of the RTD 1A has been dissolved.
    </p>
    <p num="125">
      The RTD 1A sends out a DTACKB signal which has the low level for a period of four or more clocks to the monitor 81.
      <br/>
      In the example shown in FIG. 11(B), the RTD 1A raises the DTACKB signal to the high level upon completion of reception of a command next to the RCV command.
      <br/>
      Further, the monitor 81 can recognize, by detecting that the DTACKB signal has kept the low level for a period of four or more clocks and then raises the level to the high level, that the RTD 1A has been recovered.
      <br/>
      In such a manner as described above, when synchronism between the operation of the RTD 1A and the operation of the monitor 81 is lost, even if a reset signal is not supplied to the CPU 103, the RTD 1A can be recovered into a synchronized condition.
      <br/>
      It is to be noted that, if a reset signal is supplied to the CPU 103, it is applied to the RTD 1A by way of the reset signal line 41.
      <br/>
      The RTD 1A returns to its initial condition when the reset signal is supplied thereto.
    </p>
    <p num="126">It is to be noted that, while it is described herein that the rcv command having the value of "1" at all of the bits thereof is used, another rcv command which has the value of "0" at all of the bits thereof may otherwise be used whereas the twelfth bit of any other command than the rcv command is set to "1."</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A microcomputer, comprising:</claim-text>
      <claim-text>a CPU for performing processing in accordance with a program; a RAM for storing data to be used by said CPU, said CPU switching itself, under its own control, to one of a first state characterized by suspension of access to the RAM and a second state characterized by access to the RAM;</claim-text>
      <claim-text>and a real time debugger for reading out, when a read address of said RAM is received from the outside, data in said RAM whenever said real time debugger detects that said CPU is in said first state and outputting the read out data to the outside, without placing said CPU in a hold state or causing said microcomputer to enter a special state reserved for debugging.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. A microcomputer according to claim 1, wherein said real time debugger includes: a plurality of address registers for storing address data designating addresses of said RAM supplied from the outside;</claim-text>
      <claim-text>and an address pointer for designating one of said address registers which corresponds to address data provided to said RAM.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. A microcomputer according to claim 2, further comprising: a local address bus provided between said real time debugger and said RAM; a local data bus provided between said RAM and said real time debugger; a switch for connecting said plurality of address registers of said real time debugger to said local address bus;</claim-text>
      <claim-text>and a switch for disconnecting an address bus of said CPU from said RAM.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. A microcomputer according to claim 2, wherein said real time debugger further includes: a control section for receiving a command including command data designating an operation condition of said real time debugger and address data designating a read address and performing an operation in accordance with the received command.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. A microcomputer according to claim 2, wherein said real time debugger outputs a signal representing that data outputted to the outside is significant.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. A microcomputer according to claim 1, further comprising: a reset signal line for transmitting a reset signal from the outside to said real time debugger;</claim-text>
      <claim-text>and another reset signal line for transmitting a reset signal from said CPU to said real time debugger.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. A microcomputer according to claim 1, wherein said real time debugger includes a status register for setting a status of an interruption request in said CPU and outputs contents of said status register to the outside.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. A microcomputer according to claim 1, wherein said real time debugger includes a counter for counting internal clocks of said CPU and outputs contents of said counter.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A microcomputer according to claim 1, wherein said real time debugger writes data into said RAM in response to a request from the outside when said CPU is not accessing said RAM.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. A microcomputer according to claim 9, further comprising: a pair of emulation ROMs having a same address space and accessible from said CPU only to read out data but accessible from said real time debugger to read out and write data;</claim-text>
      <claim-text>and wherein said real time debugger accesses, in response to a request from the outside, that one of said emulation ROMs which is not being used by said CPU.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. A microcomputer according to claim 9, further comprising: a local address bus provided between said real time debugger and said RAM; a local data bus provided between said RAM and said real time debugger; switches provided between said RAM and said local address bus and between said RAM and said local data bus; switches provided between said RAM and an address bus of said CPU and between said RAM and a data bus of said CPU; a buffer for outputting data in said RAM to said local data bus;</claim-text>
      <claim-text>and another buffer for outputting data in said RAM to said data bus of said CPU.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. A microcomputer according to claim 9, wherein said real time debugger includes a control section for receiving a command including command data designating an operation condition of said real time debugger and address data designating a read address and performing an operation in accordance with the received command.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. A microcomputer according to claim 9, wherein said real time debugger outputs, upon starting of sending out of data to be outputted to the outside, a signal having a pulse width corresponding to a command by which the data are requested.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. A microcomputer according to claim 9, further comprising a reset signal line for transmitting a reset signal from said CPU to said real time debugger.</claim-text>
    </claim>
    <claim num="15">
      <claim-text>15. A microcomputer, comprising: a CPU for performing processing in accordance with a program; a RAM for storing data to be used by said CPU, said CPU switching itself, under its own control, to one of a first state characterized by suspension of access to the RAM and a second state characterized by access to the RAM; a first internal bus that provides communication between the CPU and the RAM; a second internal bus, bypassing the CPU, that provides communication with the RAM;</claim-text>
      <claim-text>and a real time debugger for reading out, when a read address of said RAM is received from outside the microcomputer, data in said RAM via the second internal bus at a time when said real time debugger detects that said CPU is in said first state and outputting the read out data outside the microcomputer, without placing said CPU in a hold state or causing said microcomputer to enter a special state reserved for debugging.</claim-text>
    </claim>
    <claim num="16">
      <claim-text>16. The microcomputer according to claim 15, wherein said real time debugger includes: a plurality of address registers for storing address data designating addresses of said RAM supplied from outside the microcomputer;</claim-text>
      <claim-text>and an address pointer for designating one of said address registers which corresponds to address data provided to said RAM.</claim-text>
    </claim>
    <claim num="17">
      <claim-text>17. A microcomputer according to claim 15, wherein said real time debugger writes data into said RAM in response to a request from the outside only when said CPU is not accessing said RAM.</claim-text>
    </claim>
    <claim num="18">
      <claim-text>18. A microcomputer according to claim 15, further comprising: a pair of emulating ROMs having a same address space and accessible from said CPU only to read out data but accessible from said real time debugger to read out and write data;</claim-text>
      <claim-text>and wherein said real time debugger accesses, in response to a request from outside the microcomputer, only that one of said emulation ROMs which is not being used by said CPU.</claim-text>
    </claim>
    <claim num="19">
      <claim-text>19. A microcomputer, comprising: a CPU for performing processing in accordance with a program; a RAM for storing data to be used by said CPU, said CPU switching itself, under its own control, to one of a first state characterized by suspension of access to the RAM and a second state characterized by access to the RAM;</claim-text>
      <claim-text>and a real time debugger for reading out, when a read address of said RAM is received from outside the microcomputer, data in said RAM at a time when said real time debugger detects that said CPU is in said first state by using a switch that selectively provides one of the CPU and the real time debugger access to said RAM, and outputting the read out data outside the microcomputer, without placing said CPU in a hold state or causing said microcomputer to enter a special state reserved for debugging.</claim-text>
    </claim>
    <claim num="20">
      <claim-text>20. A microcomputer, comprising: a CPU for performing processing in accordance with a program; a RAM for storing data to be used by said CPU;</claim-text>
      <claim-text>and a real time debugger for reading out, when a read address of said RAM is received from the outside, data in said RAM whenever said CPU does not access said RAM and outputting the read out data to the outside, wherein said real time debugger writes data into said RAM in response to a request from the outside when said CPU is not accessing said RAM, and said real time debugger includes a control section for receiving a command including command data designating an operation condition of said real time debugger and address data designating a read address and performing an operation in accordance with the received command.</claim-text>
    </claim>
    <claim num="21">
      <claim-text>21. A microcomputer according to claim 20, wherein said control section detects, when a recovery command constituted from bits all having an equal value is received, a bit in a command received subsequently to the return command which has a value different from the value of the bits constituting the recovery command, and re-establishes synchronism of a command to be received.</claim-text>
    </claim>
    <claim num="22">
      <claim-text>22. A microcomputer, comprising: a CPU for performing processing in accordance with a program; a RAM for storing data to be used by said CPU;</claim-text>
      <claim-text>and a real time debugger for reading out, when a read address of said RAM is received from the outside, data in said RAM whenever said CPU does not access said RAM and outputting the read out data to the outside, wherein said real time debugger writes data into said RAM in response to a request from the outside when said CPU is not accessing said RAM, and said real time debugger outputs, upon starting of sending out of data to be outputted to the outside, a signal having a pulse width corresponding to a command by which the data are requested.</claim-text>
    </claim>
  </claims>
</questel-patent-document>