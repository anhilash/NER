<?xml version="1.0" encoding="UTF-8"?>
<questel-patent-document lang="en" date-produced="20180805" produced-by="Questel" schema-version="3.23" file="US06185555B2.xml">
  <bibliographic-data lang="en">
    <publication-reference publ-desc="Granted patent as second publication">
      <document-id>
        <country>US</country>
        <doc-number>06185555</doc-number>
        <kind>B2</kind>
        <date>20010206</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>US6185555</doc-number>
      </document-id>
    </publication-reference>
    <original-publication-kind>B2</original-publication-kind>
    <application-reference family-id="22674807" extended-family-id="1360092">
      <document-id>
        <country>US</country>
        <doc-number>09183910</doc-number>
        <kind>A</kind>
        <date>19981031</date>
      </document-id>
      <document-id data-format="questel">
        <doc-number>1998US-09183910</doc-number>
      </document-id>
      <document-id data-format="questel_Uid">
        <doc-number>1411988</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>en</language-of-filing>
    <language-of-publication>en</language-of-publication>
    <priority-claims>
      <priority-claim kind="national" sequence="1">
        <country>US</country>
        <doc-number>18391098</doc-number>
        <kind>A</kind>
        <date>19981031</date>
        <priority-active-indicator>Y</priority-active-indicator>
      </priority-claim>
      <priority-claim data-format="questel" sequence="1">
        <doc-number>1998US-09183910</doc-number>
      </priority-claim>
    </priority-claims>
    <dates-of-public-availability>
      <publication-of-grant-date>
        <date>20010206</date>
      </publication-of-grant-date>
    </dates-of-public-availability>
    <classifications-ipcr>
      <classification-ipcr sequence="1">
        <text>G06F  17/30        20060101A I20051008RMEP</text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20051008</date>
        </action-date>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06Q  30/02        20120101A I20150218RMEP</text>
        <ipc-version-indicator>
          <date>20120101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>30</main-group>
        <subgroup>02</subgroup>
        <classification-value>I</classification-value>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
        <action-date>
          <date>20150218</date>
        </action-date>
      </classification-ipcr>
    </classifications-ipcr>
    <classification-national>
      <country>US</country>
      <further-classification sequence="1">
        <text>705001100</text>
        <class>705</class>
        <subclass>001100</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>705004000</text>
        <class>705</class>
        <subclass>004000</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>705014400</text>
        <class>705</class>
        <subclass>014400</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>707999003</text>
        <class>707</class>
        <subclass>999003</subclass>
      </further-classification>
      <further-classification sequence="5">
        <text>707999007</text>
        <class>707</class>
        <subclass>999007</subclass>
      </further-classification>
      <further-classification sequence="6">
        <text>707999104</text>
        <class>707</class>
        <subclass>999104</subclass>
      </further-classification>
      <further-classification sequence="7">
        <text>707E17005</text>
        <class>707</class>
        <subclass>E17005</subclass>
      </further-classification>
    </classification-national>
    <patent-classifications>
      <patent-classification sequence="1">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06Q-030/0241</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>30</main-group>
        <subgroup>0241</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="2">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06F-017/30289</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>17</main-group>
        <subgroup>30289</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130822</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="3">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>G06Q-040/08</classification-symbol>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>40</main-group>
        <subgroup>08</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130823</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="4">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99933</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99933</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="5">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99937</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99937</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
      <patent-classification sequence="6">
        <classification-scheme office="EP" scheme="CPC">
          <date>20130101</date>
        </classification-scheme>
        <classification-symbol>Y10S-707/99945</classification-symbol>
        <section>Y</section>
        <class>10</class>
        <subclass>S</subclass>
        <main-group>707</main-group>
        <subgroup>99945</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>A</classification-value>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
        <action-date>
          <date>20130518</date>
        </action-date>
      </patent-classification>
    </patent-classifications>
    <number-of-claims>14</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <figures>
      <number-of-drawing-sheets>12</number-of-drawing-sheets>
      <number-of-figures>16</number-of-figures>
      <image-key data-format="questel">US6185555</image-key>
    </figures>
    <invention-title format="original" lang="en" id="title_en">Method and apparatus for data management using an event transition network</invention-title>
    <references-cited>
      <citation srep-phase="examiner">
        <patcit num="1">
          <text>WELSH RUSSELL J</text>
          <document-id>
            <country>US</country>
            <doc-number>5374951</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5374951</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="2">
          <text>HEARN RICHARD SAMUEL EDWIN, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5640505</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5640505</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="3">
          <text>FLORES PABLO A, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5734837</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5734837</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="4">
          <text>BROMLEY JOHN W, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5819263</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5819263</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="5">
          <text>ABELOW DANIEL H</text>
          <document-id>
            <country>US</country>
            <doc-number>5999908</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5999908</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <patcit num="6">
          <text>HARTNETT WILLIAM J</text>
          <document-id>
            <country>US</country>
            <doc-number>6064971</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US6064971</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="7">
          <document-id>
            <country>US</country>
            <doc-number>RE31951</doc-number>
            <kind>E</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>USRE31951</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="8">
          <text>KURLAND LAWRENCE G, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>4603232</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4603232</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="9">
          <text>BENNETT RALPH F M</text>
          <document-id>
            <country>US</country>
            <doc-number>4970681</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US4970681</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="10">
          <text>GREGOREK MARK R, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5557658</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5557658</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="11">
          <text>GORMLEY MICHAEL, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5628004</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5628004</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="applicant">
        <patcit num="12">
          <text>CAMERON PAUL SCOTT, et al</text>
          <document-id>
            <country>US</country>
            <doc-number>5737726</doc-number>
            <kind>A</kind>
          </document-id>
          <document-id data-format="questel">
            <doc-number>US5737726</doc-number>
          </document-id>
        </patcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="1">
          <text>IEEE publication, "Customer partnering: data gathering for complex on-line documentation", by Hackos et a., vol. 40, No. 2, pp. 102-110, Jun. 1997.</text>
        </nplcit>
      </citation>
      <citation srep-phase="examiner">
        <nplcit num="2">
          <text>IEEE publication, "Continual queries for internet scale event-driven information delivery", by Lui et al., vol. 11, No. 4 of IEEE transactions on knowledge and data engineering, pp. 610-627, Jul. 1999.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="3">
          <text>Rubric "Corporate Backgrounder" Overview, Sep. 1998, pp. 1-31.</text>
        </nplcit>
      </citation>
      <citation srep-phase="applicant">
        <nplcit num="4">
          <text>Rubric "Enterprise Marketing Automation" Overview, May 1998, pp. 1-3.</text>
        </nplcit>
      </citation>
    </references-cited>
    <parties>
      <applicants>
        <applicant data-format="original" app-type="applicant" sequence="1">
          <addressbook lang="en">
            <orgname>M/A/R/C Inc.</orgname>
            <address>
              <address-1>Dallas, TX, US</address-1>
              <city>Dallas</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
        <applicant data-format="questel" app-type="applicant" sequence="2">
          <addressbook lang="en">
            <orgname>M A R C</orgname>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </applicant>
      </applicants>
      <inventors>
        <inventor data-format="original" sequence="1">
          <addressbook lang="en">
            <name>Sprenger, Jeff H.</name>
            <address>
              <address-1>Essex Junction, VT, US</address-1>
              <city>Essex Junction</city>
              <state>VT</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="2">
          <addressbook lang="en">
            <name>Gramley, George W.</name>
            <address>
              <address-1>Dallas, TX, US</address-1>
              <city>Dallas</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="3">
          <addressbook lang="en">
            <name>Major, Debbie A.</name>
            <address>
              <address-1>Dallas, TX, US</address-1>
              <city>Dallas</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="4">
          <addressbook lang="en">
            <name>Thompson, Richard A.</name>
            <address>
              <address-1>Richardson, TX, US</address-1>
              <city>Richardson</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
        <inventor data-format="original" sequence="5">
          <addressbook lang="en">
            <name>Hatcherson, Rob</name>
            <address>
              <address-1>Fort Worth, TX, US</address-1>
              <city>Fort Worth</city>
              <state>TX</state>
              <country>US</country>
            </address>
          </addressbook>
          <nationality>
            <country>US</country>
          </nationality>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="agent">
          <addressbook lang="en">
            <orgname>Gardere &amp; Wynne, LLP</orgname>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="agent">
          <addressbook lang="en">
            <name>Warren, Jr., Sanford E.</name>
          </addressbook>
        </agent>
        <agent sequence="3" rep-type="agent">
          <addressbook lang="en">
            <name>Chalker, Daniel J.</name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <name>Black, Thomas G.</name>
      </primary-examiner>
    </examiners>
    <lgst-data>
      <lgst-status>LAPSED</lgst-status>
    </lgst-data>
  </bibliographic-data>
  <abstract format="original" lang="en" id="abstr_en">
    <p id="P-EN-00001" num="00001">
      <br/>
      The present invention provides a method and computer program for managing data by storing one or more data records in a database, creating a management plan having one or more states, selecting one or more data records from the database and assigning each of the selected data records to an initial state in the management plan, updating the values of the one or more elements of each data record with new data, and moving each selected data record to the next state whenever the trigger value matches the updated value of the trigger element.
      <br/>
      Each data record has one or more elements.
      <br/>
      Each state has one or more rules.
      <br/>
      Each rule has a trigger element, a trigger value and a next state.
    </p>
  </abstract>
  <description format="original" lang="en" id="desc_en">
    <heading>FIELD OF THE INVENTION</heading>
    <p num="1">The present invention relates generally to data processing, and more particularly to a method and apparatus for data management using an event transition network.</p>
    <heading>BACKGROUND OF THE INVENTION</heading>
    <p num="2">
      Without limiting the scope of the present invention, this background of the present invention is described in connection with management of marketing data using an event transition network.
      <br/>
      The present invention, however, is not limited to the management of marketing data.
      <br/>
      The present invention is applicable to the management of any type of data where it is desirable to implement a flexible architecture that is adaptable by changing rules rather than changing programs.
    </p>
    <p num="3">
      One goal of marketing is to acquire, retain and maximize relationships with customers.
      <br/>
      This goal has become increasingly more important to modern businesses as technological advances have created a global economy, reduced the time it takes to bring a product to market, and caused traditional distribution channels to shrink, as more direct communication channels with customers have emerged.
      <br/>
      As a result, businesses are attempting to clarify their understanding of a customer's brand and lifetime values while simultaneously attempting to analyze those values more quickly.
    </p>
    <p num="4">
      Despite significant advances in computer technology and these increasing market pressures, marketing data access and business logic are typically governed by inflexible computer systems.
      <br/>
      These systems typically have long development times and testing cycles and often rely on batch processing.
      <br/>
      As a result, the benefits from these systems have been largely tactical--the storage and analysis of large amounts of customer data.
      <br/>
      Even the newer, more advanced systems typically cannot adapt quickly to changes in the marketing needs of businesses because these systems are large, complex and proprietary in nature.
      <br/>
      As a result, these systems are generally customized for each client and may require significant recoding to implement changes in the way that the data is analyzed and used.
      <br/>
      Today's marketplace, however, demands marketing tools that have increased performance, scalability and flexibility.
    </p>
    <p num="5">
      More recently, in an attempt to improve flexibility and deliver more contemporary functionality, new marketing software has been implemented in a two-tiered architecture (client/server).
      <br/>
      This two-tiered software, however, still mimics the past twenty years of software development with an occasional use of a "programming bus" to separate the interface and database logic layers.
      <br/>
      Most of these software components have static rather than dynamic functionality, which means that they have difficulty accommodating emerging variations in data types and inter-process control methods.
      <br/>
      These limitations are particularly problematic in the areas of modern market research, campaign management, media planning and execution.
      <br/>
      Moreover, these software components require frequent rewrites, which makes a "whole product" solution that can evolve quickly enough to keep pace with today's rapidly expanding marketing knowledge gap virtually impossible to deliver.
    </p>
    <heading>SUMMARY OF THE INVENTION</heading>
    <p num="6">Other features and advantages of the present invention will be apparent to those of ordinary skill in the art upon reference to the following detailed description taken in conjunction with the accompanying drawings.</p>
    <p num="7">
      The present invention provides a method for managing data by storing one or more data records in a database, creating a management plan having one or more states, selecting one or more data records from the database and assigning each of the selected data records to an initial state in the management plan, updating the values of the one or more elements of each data record with new data, and moving each selected data record to the next state whenever the trigger value matches the updated value of the trigger element.
      <br/>
      Each data record has one or more elements.
      <br/>
      Each state has one or more rules.
      <br/>
      Each rule has a trigger element, a trigger value and a next state.
    </p>
    <p num="8">
      The present invention also provides a computer program embodied on a computer-readable medium for managing data.
      <br/>
      The computer program comprises code segments for storing one or more data records in a database, creating a management plan having one or more states, selecting one or more data records from the database and assigning each of the selected data records to an initial state in the management plan, updating the values of the one or more elements of each data record with new data, moving each selected data record to the next state whenever the trigger value matches the updated value of the trigger element.
      <br/>
      Each data record has one or more elements.
      <br/>
      Each state has one or more rules.
      <br/>
      Each rule has a trigger element, a trigger value and a next state.
    </p>
    <heading>BRIEF DESCRIPTION OF THE DRAWINGS</heading>
    <p num="9">
      The above and further advantages of the present invention may be better understood by referring to the following detailed description in conjunction with the accompanying drawings, in which:
      <br/>
      FIG. 1 is a block diagram of a single machine configuration in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 2 illustrates the basic anatomy of an agent process in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 3 illustrates the basic anatomy of a minion in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 4 illustrates minions and minion proxies in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 5 is a block diagram of a multiple machine, multiple database configuration in accordance with a preferred embodiment of the present invention;
      <br/>
      FIG. 6 is a block diagram of the persistent objects comprising the system objects 122 (FIG. 1) in accordance with one possible relational embodiment of the present invention;
      <br/>
      FIGS. 7A and 7B are block diagrams of the persistent objects comprising the client objects 124 (FIG. 1) in accordance with one possible relational embodiment of the present invention;
      <br/>
      FIG. 8 is a block diagram of the EOFLite components 126 (FIG. 1) in accordance with a preferred embodiment of the present invention;
      <br/>
      FIGS. 9A and 9B are block diagrams illustrating the import and update processes in accordance with one possible relational embodiment of the present invention;
      <br/>
      FIG. 10 is a block diagram illustrating the query and extraction processes in accordance with one possible relational embodiment of the present invention;
      <br/>
      FIG. 11 is a block diagram illustrating a database maintenance process in accordance with one possible relational embodiment of the present invention;
      <br/>
      FIG. 12 is a block diagram illustrating a project maintenance process in accordance with one possible relational embodiment of the present invention;
      <br/>
      FIG. 13 is a flow chart illustrating the campaign management processes in accordance with one possible relational embodiment of the present invention; and
      <br/>
      FIG. 14 is a block diagram illustrating a possible event transition network example in accordance with one possible relational embodiment of the present invention.
    </p>
    <heading>DETAILED DESCRIPTION OF THE INVENTION</heading>
    <p num="10">
      The present invention provides a system software architecture that supports a wide variety of hardware configurations.
      <br/>
      These configurations range from single machine, single database installations to large installations with multiple machines and databases.
      <br/>
      As a result, the present invention can be easily scaled up to meet added demand by increasing the number of machines and databases that participate in the system, and distributing agent processes to wherever it's most appropriate for the agent processor to run, e.g., closer to the data they manipulate.
    </p>
    <p num="11">
      Referring now to FIG. 1, a block diagram of a single machine configuration, in accordance with a preferred embodiment of the present invention, is designated generally by the numeral 100.
      <br/>
      The single machine configuration 100 includes a physical machine 102 connected to a display 104 and keyboard 106.
      <br/>
      Regardless of the physical configuration, the present invention provides a system software architecture that is composed of three "logical" tiers 110, 120 and 140.
    </p>
    <p num="12">
      The first tier is the data storage tier 110, which handles persistent storage of information through one or more databases 112 and 114.
      <br/>
      The second tier is the object tier 120, which captures and converts row data from the data storage tier 110 to objects and then executes business rules against the objects.
      <br/>
      The third tier is the user interface tier 140, which presents raw and/or object data to the system user via the display 104 and receives commands and data from the system user via the keyboard 106.
      <br/>
      These three tiers 110, 120 and 140 are "logical" because they are not confined to a single machine or process.
      <br/>
      Accordingly and as illustrated in FIG. 5, each of the tiers 110, 120 or 140 may simultaneously span many physical machines and processes across one or more networks.
    </p>
    <p num="13">
      Within the data storage tier 110, one or more database processes can be executed concurrently by the system database server 116, which controls access to the system database 112, and/or the client database server 118, which controls access to the client database 114.
      <br/>
      The database servers 116 and 118 will typically be high-performance database servers, such as Informix or Oracle, that combine high-volume data storage and querying capabilities with network-transparent access.
      <br/>
      The flexibility of the current invention is increased by selecting database servers 116 and 118 that are capable of running on a variety of hardware platforms and are easily scalable from single-user installations with a small number of records up to large installations with many users and gigabyte databases.
      <br/>
      In addition, the database servers 116 and 118 may also be supported by a variety of front-end data access processes, analysis tools and applications.
      <br/>
      Alternatively, a single multiple-processor server hosting the two databases 112 and 114 may also be used.
    </p>
    <p num="14">
      The system database 112 includes tables for: user accounts; system security; session management; job management; media, file, and table tracking; billing; and sundry system support.
      <br/>
      Whereas the client database 114 includes information such as: customer information; product descriptions; purchasing history; marketing campaign structure; promotion communications; reporting summary tables; and others on a per-client basis.
      <br/>
      Although two databases 112 and 114 are illustrated, the present invention can use as many as may be required.
    </p>
    <p num="15">The data storage tier 110 may include the following components, procedures, and processes: (1) database schema design and maintenance; (2) database creation and maintenance; (3) database disk layout and component distribution; (4) design and implementation of any required server-specific components (such as triggers and stored procedures); (5) the database server itself; (6) database network access; (7) data loading and unloading; and (8) database backups.</p>
    <p num="16">
      The object tier 120 is divided into two distinct subsystems: system objects and processes 122, which control system operation and administrative functions; and client objects and processes 124, which control all data operations on the marketing data.
      <br/>
      The system objects 122 are "persistent objects," which are usually stored in the system database 112 and are instances of classes for which a mapping is defined between the attributes of the class and columns in a database table.
      <br/>
      The values of the object attributes are stored in the database table through this mapping.
    </p>
    <p num="17">The object tier 120 may also include EOFLite components 126 to provide a "lightweight" binding layer for moving data back and forth between the client database 114 and minions 128 executing high-volume "batch processes." The EOFLite components 126 create instances of custom classes without having to live with the overhead inherent in the lower-level EOF frameworks, which are designed more for OLTP-type processing than for record-by-record batch processing.</p>
    <p num="18">
      Both the system objects 122 and the client objects 124 use persistent object classes to define specific business logic that is associated with the object attributes (and therefore implicitly with data from the databases 112 and 114 through the attribute-to-table-column mapping).
      <br/>
      Persistent objects can be instantiated from an arbitrary combination of database columns into "generic records," or can be instances of pre-defined classes containing attributes that are associated with particular columns in a table.
      <br/>
      Whether instances of generic records or instances of pre-defined classes are built is determined by the attribute-to-table mapping.
      <br/>
      In either case, the instances are created through a "database access layer," and made available to custom processes that can observe, manipulate, and save the instances back to the database.
    </p>
    <p num="19">
      The object tier 120 also contains minions 128, which provide services and sets of persistent objects to external client objects.
      <br/>
      In any given installation of the present invention, these objects can exist in both client-side end-user applications and in "interface-free" server-side applications called "agents." The agents exist to provide an executable wrapper around the minions 128.
      <br/>
      Thus, a particular agent can host an arbitrary combination of minions 128, and can be executed on any machine in a given installation of the present invention for which an executable has been built.
    </p>
    <p num="20">
      The minions 128 in these agent processes use the database access layer to convert database information between row form and persistent object form, and share these persistent objects with interface tier clients and/or other object tier clients.
      <br/>
      The minions 128 may also provide services that manipulate the objects locally and send the objects back to the database for storage.
      <br/>
      The minions 128 and persistent objects encapsulate business logic, and insulate the user applications 142 in the user interface tier 140 from data storage tier 110 dependencies.
      <br/>
      Minions 128 can exist in either remote agent processes or in the local address space of a client process.
      <br/>
      Client processes can also receive persistent objects directly from the database access layer.
    </p>
    <p num="21">
      There are two categories of minions 128 and persistent objects in the object tier 120.
      <br/>
      The first category consists of objects that oversee the control and administration functions of the present invention, such as the agent manager 130, job queue manager 132, notification manager 134, security guard 136, session management (not shown), and resource tracking and manipulation (not shown).
      <br/>
      The second category of objects imports, exports, reports on, cleans, maintains, and represents client data.
      <br/>
      All agent processes in the object tier 120 are controlled by a special minion called the "agent manager" 130.
      <br/>
      All access to remote agents and minions is granted through the agent manager 130.
    </p>
    <p num="22">
      The object tier 120 can be implemented using OpenStep object technology.
      <br/>
      This technology provides a database-independent framework for gathering information from local and/or remote database servers and converting it to object form.
      <br/>
      This technology also provides a relatively transparent object distribution mechanism that allows objects to communicate with each other across process and network boundaries as easily as if the objects coexisted in the same process.
      <br/>
      These key features directly support the ability for processes in the object tier 120 to execute on multiple physical machines.
    </p>
    <p num="23">
      The user interface tier 140 receives object data from the object tier 120, and controls the presentation of this data to the user.
      <br/>
      The user application 142 in the user interface tier 140 can operate in either two-tier or three-tier modes.
      <br/>
      User applications 142 that make direct connections to the database server to get data will be two-tier applications.
      <br/>
      User applications 142 that connect to agents in the object tier 120 to get data will be three-tier applications.
      <br/>
      It is possible for user applications 142 to directly include object tier classes and use them locally, operating in two-tier mode without actually bypassing the object tier 120.
      <br/>
      The user applications 142 may be implemented using native OpenStep applications, web-browser-based applications and applications built using technologies such as Microsoft Visual C++, which will communicate with the object tier via an object interface standard such as DCOM and CORBA.
    </p>
    <p num="24">
      Referring to FIG. 2, the basic anatomy of an agent process, in accordance with a preferred embodiment of the present invention, is designated generally by the numeral 150.
      <br/>
      The agent process 150 comprises a connection 152, an agent 154, an agent profile 156 and one or more minions 158, 160 and 162.
      <br/>
      As described above, the processes running in the object tier 120 are called agents 154, which are generic, independently executable programs that can run on any machine in the system.
      <br/>
      The sole purpose of an agent 154 is to serve as a distribution and control mechanism for an arbitrary combination of named class instances called minions 158, 160 and 162.
      <br/>
      The minions 158, 160 and 162 are objects that provide services and sets of persistent objects to external client objects through interfaces called minion formal protocols.
      <br/>
      There is a separate protocol defined for each possible minion class that needs to communicate across the network.
      <br/>
      Protocols are not classes, and are therefore never instantiated or stored in a database.
    </p>
    <p num="25">
      Agents 154 do not inherently depend on the minions.
      <br/>
      During startup, an agent 154 extracts agent profile information 156 from a configuration file using a name given to it on the command line as a lookup key.
      <br/>
      The agent profile 156 specifies the minions 158, 160 and 162 that the agent 154 will manage, and any additional code that the agent 154 must load to support those objects.
      <br/>
      The agent process 150 configures itself dynamically based on the agent profile 156.
    </p>
    <p num="26">
      To support maximum flexibility on how systems can be configured, no restrictions are placed on where an agent 154 can execute (in other words, an agent 154 can be launched on any machine for which an agent executable has been built).
      <br/>
      This permits the logical object tier 120 (FIG. 1) to span the network across various physical machines concurrently.
      <br/>
      In practice, if agent 154 and/or the minions 158, 160 and 162 managed by the agent 154 depend on resources on a particular machine, the agent 154 should be configured to execute on that machine to keep those resources "local." External clients may gain access to the agent 154 via the connection 152, which is registered under a unique name given on the command line when the agent process 150 is launched.
    </p>
    <p num="27">
      There can be an arbitrary number of agents 154 executing at any given time on a particular machine.
      <br/>
      In practice, the total number of agents 154 that can be simultaneously executing is limited based on the types of minions 158, 160 and 162 they are hosting.
      <br/>
      For example, if an agent 154 is hosting a very resource-intensive minion (such as one that will perform a bulk address-correction job) the total number that can run simultaneously may be limited to something very small.
      <br/>
      These limits are specified in the system configuration file of the present invention.
    </p>
    <p num="28">
      Now referring to FIG. 3, the basic anatomy of a minion 128, in accordance with a preferred embodiment of the present invention, is described.
      <br/>
      Minions 128 are multi-threaded because the minions 128 have to respond to control messages 170 while the minions 128 are doing work with some resource 172.
      <br/>
      Once a time-consuming process has been started in a minion 128 (such as a batch database update of a large number of records), the minion 128 should still be able to pause, resume, or stop the process on command. "Pausing" temporarily halts an operation without losing its state. "Resuming" allows an operation to continue from the point at which it was most recently paused. "Stopping" an operation causes it to be abandoned by its controlling minion, and returns that minion to an idle state.
    </p>
    <p num="29">
      The minion 128 has a control thread 174 that services these control messages 170 as they arrive from external sources, and updates information in the control data block 176.
      <br/>
      It is up to the work thread 178 to monitor the control data block 176 and perform the correct function based on the data contained therein.
      <br/>
      For example, a responsible work thread 178 will check the control data block 176 every pass through its processing loop, and either pause, resume, or stop processing based on the values in the control data block 176.
      <br/>
      When the work thread 178 discovers an instruction to stop processing, the work thread 178 will release any resources allocated to the work thread 178 for the job, then exit the thread.
    </p>
    <p num="30">
      The minion 128 should also provide progress reports during time-consuming operations.
      <br/>
      The work thread 178 periodically updates the progress of the minion 128, storing the results in the control data block 176.
      <br/>
      These reports include a description of the operation, the estimated percentage of the operation that has been completed, the number of records processed, and the estimated completion time.
      <br/>
      These progress reports are available through direct request from the minion 128 via the control thread 174.
    </p>
    <p num="31">
      Now referring to FIG. 4, minions and minion proxies, in accordance with a preferred embodiment of the present invention, are described.
      <br/>
      Minions 158, 160 and 162 within agent process 150 on server computer 180 communicate with client processes 182 on client computer 184 using minion proxies 188, 190 and 192, respectively.
      <br/>
      Minion proxies 188, 190 and 192 are the client-side 184 counterparts to server-side 180 minions 158, 160 and 162.
      <br/>
      The minion proxies 188, 190 and 192 conform to the same protocols and allow transparent remote communication with minions 158, 160 and 162.
      <br/>
      Minions 158, 160 and 162 can be created directly within a client process 182 address space, coexisting with other local minions and/or minion proxies 188, 190 and 192.
      <br/>
      Minions 158, 160 and 162 are never stored persistently (i.e. they do not have a representation in any database).
    </p>
    <p num="32">
      The minion interfaces are defined in this way to make local minion instances 158, 160 and 162 and local minion proxy instances 188, 190 and 192 have the same apparent interface.
      <br/>
      The proxy classes provide a convenient place to perform client-side caching, a level of indirection through which to handle disconnection/reconnection with remote minions, and a class on the client side that can be associated with formal protocols.
      <br/>
      It also makes remote minions relatively transparent to developers.
      <br/>
      Client processes 182 that choose to use minions 158, 160 and 162 directly in their local address space operate in "two-tier" mode.
      <br/>
      Client processes 182 that choose to use minion proxies 188, 190 and 192 in their local address space operate in "three-tier" mode.
      <br/>
      In either event, the client processes 182 will be able to send the same messages to either type of object.
    </p>
    <p num="33">
      "Formal Protocols" define formal interfaces that are independent of any particular class.
      <br/>
      A protocol has a unique name, and declares a set of messages that can be implemented by any class.
      <br/>
      A particular class "conforms" to one or more protocols if it guarantees that it implements every message declared in each of the protocols.
      <br/>
      The interface to the minion classes is defined entirely in terms of formal protocols.
      <br/>
      A given minion class and its corresponding minion proxy class will both conform to the same formal protocol.
      <br/>
      A unique formal protocol is defined for every minion subclass.
    </p>
    <p num="34">
      Minion classes, minion proxy classes, and formal protocols are uniquely named to coexist in the same address space without interfering with each other.
      <br/>
      Client processes 182 can then simultaneously perform some operations in "two-tier" mode and others in "three-tier" mode depending on whichever is more appropriate.
    </p>
    <p num="35">
      Although single-machine configurations, such as 100 (FIG. 1), are possible, typical configurations will include multiple machines, multiple databases, and multiple users.
      <br/>
      Now referring to FIG. 5, a block diagram of a multiple machine, multiple database configuration in accordance with a preferred embodiment of the present invention is designated generally by the numeral 200.
    </p>
    <p num="36">
      Physical machine 202, having a keyboard 204, a monitor 206, a user interface tier 210 and a user application 212, is connected to a local area network 208.
      <br/>
      Physical machine 214, having a user interface tier 216, object tier 220 and data storage tier 222, is also connected to the network 208.
      <br/>
      The user application 212 of physical machine 202 is shown communicating with the agent manager 224 in the object tier 220 of physical machine 214.
      <br/>
      The agent manager 224 in turn communicates with agents 226, which communicate with database processes 228 and databases 230 in data storage tier 222.
    </p>
    <p num="37">
      Physical machine 232, having an object tier 234 and data storage tier 236, is also connected to the network 208.
      <br/>
      The user application 212 of physical machine 202 is shown communicating with the agent manager 238 in the object tier 234 of physical machine 232.
      <br/>
      The agent manager 238 in turn communicates with agents 240, which communicate with database processes 242 and databases 244 in data storage tier 236.
      <br/>
      The agents 240 of physical machine 232 are also shown communicating with the data storage tier 248, database processes 250 and databases 252 of physical machine 246 via the local area network 208.
    </p>
    <p num="38">
      Physical machine 254, having an object tier 256, is also connected to the network 208.
      <br/>
      The agent manager 258 and agents 260 of physical machine 254 are shown communicating with the database processes 242 of physical machine 232 and the database processes 250 of physical machine 246 via the local area network 208.
    </p>
    <p num="39">
      Physical machine 262, having a keyboard 268, a monitor 270, a user interface tier 264 and a web browser 266, is connected to the Internet 272.
      <br/>
      Physical machine 214 is also connected to the Internet 272 using http 274 and a web application 276 within the user interface tier 216.
      <br/>
      The web application 276 then communicates with the agent manager 224.
      <br/>
      In addition, users may access any of the components of the system remotely via a dial-up line or web interface.
    </p>
    <p num="40">Agents and Minions</p>
    <p num="41">
      Now referring back to FIG. 1, various agents and their associated minions will be described in more detail.
      <br/>
      Agents serve as executable wrappers around an arbitrary combination of minions.
      <br/>
      The only thing that makes one agent different from another is the kind of minions that each agent is hosting.
      <br/>
      Because the customization of an agent takes place by changing the minions that it hosts, there is only one kind of agent executable from which all executing agents are launched.
      <br/>
      Agents can be configured to run continuously, run on demand or run on a regular schedule.
    </p>
    <p num="42">The present invention has five system agents that run continuously: the agent manager 130 (AgentManagerAgent), job queue manager 132 (JobQueueManagerAgent), the notification manager 134, which includes the NotificationCenterAgent and the NotificationDispatcherAgent, and the security guard 136 (SecurityGuardAgent).</p>
    <p num="43">
      A single agent manager 130 is started at boot-up on each machine that participates in the present invention.
      <br/>
      The remaining agents in this group are started by the agent manager 130 during its start-up phase.
      <br/>
      These agents run continuously until the agents are either explicitly shut down by a system administrator, or the system on which the agents are running goes down.
      <br/>
      The agent manager 130 hosts the AgentManagerMinion, which controls connections to, and lifetime of, all other agents on the host computer where the agent manager 130 is running.
      <br/>
      The agent manager 130 also manages connections to all other minions on that machine.
    </p>
    <p num="44">
      For example, each minion has a name that is used by a client process to request a connection to a specific minion through the agent manager 130.
      <br/>
      When the agent manager 130 is asked for connection information to a named minion, it performs the following steps: (1) consults the cross-reference to determine the generic name of the agent(s) that would be hosting that object; (2) examines all idle running agents with that generic name (if any), and determines if any of them report that their minion of the requested name is idle; (3) if any such agents are found, their connection information is loaded into an agent ticket and returned to the client; (4) if no agents with that generic name are running, the agent manager will simply start one and use it in the returned agent ticket; (5) if there are running agents with that generic name but none of them are idle, the agent manager will consult the present invention's system configuration file to determine how many agents with that generic name can be running simultaneously, and start a new one if limits permit; and (6) if all of that fails, no connection information is returned to the client (the client must be prepared to handle a connection refusal).
    </p>
    <p num="45">
      Client processes that need to connect to a particular agent (or to some named minion running in a particular agent) will go through the agent manager 130 to get the information necessary to make the connection.
      <br/>
      This connection information is vended in the form of "agent tickets" (for connection to the agent itself) and "object tickets" (for connection to a minion), which can be "redeemed" by client objects to gain direct connections to remote agents and minions.
      <br/>
      Client processes must always get their connection information in "ticket" form through the agent manager 130.
      <br/>
      This is because the agent manager 130 will usually be controlling more than one instance of an agent with a particular generic name, each of which will be registered with the object distribution mechanism under a unique name that is only known to the agent manager 130 and the agent itself.
      <br/>
      The single exception to this is for connections to the AgentManagerAgent, which will always register under the name "AgentManagerAgent".
    </p>
    <p num="46">
      The agents managed by an agent manager 130 on a particular host machine are described by the "agent profiles" for that machine, which are obtained from the system configuration file.
      <br/>
      The information in the agent profile provides the agent manager with information it uses to control agent execution, such as which executable programs to run to launch an agent, whether or not an agent requires a "context" to launch, how many agents of a given type may be simultaneously executing, and how long to wait before killing an idle agent.
      <br/>
      When the agent manager 130 loads the agent profiles from the system configuration file, the agent manager 130 builds a cross-reference of which agent processes are hosting minions based on the names under which the minions are registered.
    </p>
    <p num="47">
      Agent processes are launched and killed exclusively by the AgentManagerMinion.
      <br/>
      Agent processes may be killed on request from an external client (such as an agent monitoring application), or automatically by the agent manager 130 because they have been idle for a certain period of time and no longer need to be using system resources.
      <br/>
      An agent is considered "idle" if all minions that it manages report that they are idle.
      <br/>
      Agents that are frequently used are configured to remain idle for some period of time so if a request comes to the agent manager 130 to start up that agent, the agent manager 130 can just use the idle agent rather than have to launch another one.
      <br/>
      This is particularly important for agents that take a long time to launch.
    </p>
    <p num="48">
      The job queue manager 132 hosts the JobQueueManagerMinion, which manages manipulation of job streams in the job queue, and manages execution of the component job configurations in the job streams.
      <br/>
      The JobQueueManagerMinion monitors the job queue for job streams that need to run, controls execution of the job configurations in a job stream, observes notification of job configuration completion, and passes billing information to the billing manager for completed jobs.
      <br/>
      To provide job stream execution services, the job queue manager 132 periodically examines entries in the job queue and schedules the queue entries for execution.
    </p>
    <p num="49">
      Each job queue entry is composed of a "stream" of component job configurations scheduled to run at a given day and time with a particular priority.
      <br/>
      Job streams have optional dependencies on completion of other jobs streams in the queue (e.g. job stream "B" cannot run until job stream "A" has completed successfully).
      <br/>
      The job configurations in a stream can also have dependencies between them (e.g. job configuration "B" cannot run until job configuration "A" has completed successfully).
      <br/>
      Each job configuration specifies a particular set of commands that are to be executed by some agent process, along with the input and output parameters for that process.
      <br/>
      The JobQueueManagerMinion manages the execution order of these job streams and job configurations based on the dependencies between them, and monitors the system for job configuration completion.
      <br/>
      Processing information for successfully completed job configurations is passed to the billing manager where billing records are queued for posting to the central accounting system.
      <br/>
      Only one job queue manager 132 will run in a given system of the present invention.
    </p>
    <p num="50">
      The notification manager 134 includes the NotificationCenterAgent and the NotificationDispatcherAgent.
      <br/>
      The NotificationCenterAgent hosts the NotificationCenterMinion, which serves as a central hub for distribution of advisory messages to interested observers.
      <br/>
      The NotificationDispatcherAgent hosts the NotificationDispatcherMinion, which packages and routes notifications to interested users via e-mail and/or pagers.
    </p>
    <p num="51">
      The NotificationCenterMinion serves as a central hub for routing advisory notifications from objects that "post" the notifications, to an arbitrary number of objects that register as "observers" of the notifications.
      <br/>
      Each advisory message has a name, and is associated with an object and a set of supplementary "user information." The names of the notifications are determined by the posting objects, and have to be known to observers so they can register as observers of the notifications.
      <br/>
      The object and "user information" associated with the notifications are also determined by the posting object, and can be whatever is deemed important for any particular advisory notification.
      <br/>
      Only one notification center will run in a given system of the present invention.
    </p>
    <p num="52">
      The NotificationDispatcherMinion packages notifications and routes them to users using user-specified transport mechanisms, including e-mail and pagers.
      <br/>
      Each system user can register to be sent an arbitrary set of notifications via any of the available mechanisms.
      <br/>
      Only one notification dispatcher will run in a given system of the present invention.
    </p>
    <p num="53">
      The security guard 136 hosts the SecurityGuardMinion, which is the first line of defense in the object tier for protecting the system against unauthorized access.
      <br/>
      The SecurityGuardMinion determines the validity of a given user/ID and password combination, and determines if a user has permission to perform a specific action.
      <br/>
      All guarded operations will obtain permission from the security guard before proceeding.
      <br/>
      The security guard 136 will always run in a stand-alone process so that it can be given special privileges if necessary.
      <br/>
      The security guard 136 thus prevents users from: (1) intentionally and/or unintentionally manipulating data without proper authorization; (2) reading data without proper authorization; and (3) making invalid changes to data whether authorized or not.
    </p>
    <p num="54">
      Due to the importance of the data contained within the databases and the efforts expended to obtain that data, the database must be protected against unauthorized access, yet still allow the present invention to perform tasks on behalf of those same users.
      <br/>
      Security becomes more difficult in the multiple machine, multiple database architecture of the present invention because a user can connect to a database in a variety of ways: (1) directly from a present invention front-end process; (2) indirectly from an object-tier process to the present invention; (3) directly on the server via an SQL tool such as Informix DBaccess or Oracle SQLplus; and (4) directly from an arbitrary front-end development tool (such as VisualFoxPro) via ODBC.
    </p>
    <p num="55">
      Current database systems only choose security privileges based on whom the user is and do not discriminate based on how the user is connected because most external tools share a common interface to the database (i.e., the database doesn't know how a user is connected, just that there is a connection from somewhere).
      <br/>
      The database, therefore, cannot be used to effectively enforce the desired level of security.
      <br/>
      Accordingly, the present invention uses an application-enforced security wherein: (1) users will each have a single user name on the system(s) hosting the present invention; (2) database privileges based on these user names will be very tightly restricted and controlled; and (3) only selected users will have any privileges on the tables (this protects the database against access via tools such as SQLplus or an arbitrary front-end process connecting via ODBC).
    </p>
    <p num="56">
      In the present invention, processes connect to the system using an application ID that is chosen for the processes ahead of time.
      <br/>
      In addition, the processes are granted only the maximum set of privileges necessary to perform the task(s).
      <br/>
      The set of "actions" that a user can attempt to perform against the database is stored in tables that become part of the user's "security profile." The present invention restricts the tasks the processes can perform based on the security profile of the user on whose behalf they are operating (application enforced security).
    </p>
    <p num="57">
      There are five system agents that run on demand: CommandLineAgent, FileManagerAgent, FileTransferManagerAgent, MediaDataTransferManagerAgent, and the RoboDBAAgent.
      <br/>
      These agents are started by the agent manager 130 upon a request from an external client process.
      <br/>
      The agent manager 130 may limit the total number that can be executing at any given time to balance system load.
    </p>
    <p num="58">
      The CommandLineAgent hosts the CommandLineMinion, which provides a wrapper around execution of system command line commands that can be messaged and scheduled for asynchronous execution.
      <br/>
      The CommandLineMinion provides a capability similar to that provided by the "system" call commonly available in "C" language programming environments.
      <br/>
      The CommandLineMinion can be remotely messaged and scheduled for deferred execution.
    </p>
    <p num="59">
      The FileManagerAgent hosts the FileManagerMinion, which provides basic file system interrogation and manipulation services on local or remote machines, including: checking for existence of a file; reporting on file size; reporting on file access permissions; creating a file; and deleting a file.
      <br/>
      The FileManagerMinion can be embedded in an agent process and scheduled for deferred execution by the job management system.
      <br/>
      In addition, the FileManagerMinion can manipulate and return information about files that are not on the local machine.
    </p>
    <p num="60">
      The FileTransferManagerAgent hosts the FileTransferManagerMinion, which controls the movement of files between source and destination file system locations.
      <br/>
      The FileTransferManagerMinion provides services for: transferring files between locations on the same machine; transferring files between locations on different machines; and moving files between projects.
      <br/>
      These services are similar to those provided by the "ftp" command-line utility.
      <br/>
      The FileTransferManagerMinion can be embedded in an agent process and scheduled for deferred execution by the job management system.
    </p>
    <p num="61">
      The MediaDataTransferManagerAgent hosts the MediaDataTransferManagerMinion, which controls movement of data between incoming physical media (e.g. tapes, disks) and the file system.
      <br/>
      This minion provides similar services to those services provided by the FileTransferManagerMinion.
    </p>
    <p num="62">
      The RoboDBAAgent hosts the RoboDBAMinion, which controls manipulation of database objects.
      <br/>
      The RoboDBAMinion provides services for: creating and dropping tables; creating and dropping indexes; unloading table schemas; and loading and unloading table data.
      <br/>
      The RoboDBAMinion can be embedded in an agent process and scheduled for deferred execution by the job management system.
      <br/>
      The RoboDBAMinion can also be given special database privileges that are not provided to any other process because the minion can run in a separate agent process.
      <br/>
      The only kinds of database tables that will be created through this minion are temporary database tables called "project tables" that provide work areas while processing the data for particular projects.
      <br/>
      Client production tables will always be created by external scripts when setting up the present invention for new clients.
    </p>
    <p num="63">
      There are four system agents that are regularly scheduled: ArchiverAgent, CustodianAgent, DiskUsageBillingAgent, and the MatterNumberImportAgent.
      <br/>
      These agents are started by the job queue manager 132 on regularly scheduled intervals.
      <br/>
      The agents and the intervals are specified in an external system file.
    </p>
    <p num="64">
      The ArchiverAgent hosts the ArchiverMinion, which supports the client and project multi-step archiving procedure.
      <br/>
      The ArchiverMinion will be configurable from the command line to perform a variety of archiving tasks, each of which may be scheduled with the job management system to run at regular intervals that vary with the type of archiving functions being performed.
      <br/>
      The archiving process may require operator intervention because physical media such as tapes and disks must generally be moved between racks and drives.
      <br/>
      The archiving procedure consists of the following general steps: unloading relevant data from the database; updating selected tables to reflect that the client or project has been archived; notifying operators to move data to tape; and removing archived files.
    </p>
    <p num="65">
      The CustodianAgent hosts the CustodianMinion, which performs general clean-up tasks in the system.
      <br/>
      The CustodianMinion will be configurable from the command line to perform a variety of cleaning tasks, each of which may be scheduled on regular intervals, such as cleaning temporary files and data tables, physical media that have passed their expiration dates, "orphaned" user application sessions that might be lingering in the database because of an abnormal process termination, and others as the system grows.
      <br/>
      CustodianAgents are typically scheduled with the job management system to run at intervals that vary with the type of clean-up functions being performed.
    </p>
    <p num="66">
      The DiskUsageBillingAgent hosts the DiskUsageBillingMinion, which examines the amount of disk usage for each active client on the system, and computes appropriate billing entries.
      <br/>
      The DiskUsageBillingMinion examines the file system and computes the amount of disk space occupied by the files and database tables associated with various clients.
      <br/>
      The DiskUsageBillingMinion then creates billing table entries for each client based on the amount of disk space they are using.
      <br/>
      Note that billing table entries for scheduled batch jobs are created by the job queue manager 132 when it is notified that a job configuration has successfully completed processing.
      <br/>
      DiskUsageBillingAgents are typically scheduled in the job management system to run once per week.
    </p>
    <p num="67">
      The MatterNumberImportAgent hosts the MatterNumberImportMinion, which moves matter number information from the central accounting system into the system tables.
      <br/>
      The MatterNumberImportMinion reads matter number information from tables in the central billing system, and merges new and modified records into the matter number tables of the present invention.
      <br/>
      MatterNumberImportAgents are typically scheduled in the job management system to run either once per day or once per week.
    </p>
    <p num="68">
      The SessionManagerAgent hosts the SessionManagerMinion, which establishes sessions for system users and makes sure no more than one session is in effect at any given time for a user on a particular workstation.
      <br/>
      The SessionManagerMinion also ensures that sessions are persistently tracked in the database.
    </p>
    <p num="69">
      System minions can run locally or run remotely in an agent process.
      <br/>
      It is, however, desirable to minimize the number of minions that run in remote processes to reduce complexity in the implementation, and to minimize the number of separate database connections in effect at any given point in time because licenses for database connections are expensive to buy.
      <br/>
      Accordingly, the LibrarianMinion and the EventLogMinion are combined into a central library that will be loaded locally by all processes needing their services.
    </p>
    <p num="70">
      The LibrarianMinion handles creation and tracking of all external physical media and files used by the present invention.
      <br/>
      Each of these items is tracked as it enters and exits the system.
      <br/>
      External physical media enter the system in the form of tapes and disks sent in by clients.
      <br/>
      Files (such as reports and error logs) are generally created as a side-effect of system processes.
      <br/>
      Files also enter the system in the form of externally created documents, such as word processor documents and spreadsheets.
    </p>
    <p num="71">
      The EventLogMinon provides a central point of access for all advisory messages that need to be stored persistently in the database.
      <br/>
      The "events" in the log are descriptions of some event in time, such as the observed failure of a critical component, or the failure of a job stream to complete.
      <br/>
      The events stored in the log describe unusual conditions that require the attention of a user or system operator.
      <br/>
      Initial deployments of the present invention will include an event log object as a simple local convenience object in each application that needs to access the log, rather than have a single central event log that runs in a remote agent.
    </p>
    <p num="72">System Agents</p>
    <p num="73">
      Now referring to FIG. 6, a block diagram of the persistent objects comprising the system objects 122 (FIG. 1), in accordance with one possible relational embodiment of the present invention, is illustrated.
      <br/>
      The present invention is not limited to the specific system objects 122 described or to the relational embodiment illustrated in FIG. 6.
      <br/>
      Those persons skilled in the art will recognize that the present invention is designed to allow system objects 122 to be added, deleted or changed, and the relationships between the system objects 122 to be changed according to the intended application of the present invention.
      <br/>
      The relational nature of the system objects 122 allow the present invention to be modified without extensive recoding.
    </p>
    <p num="74">
      The system objects 122 comprise a number of interrelated persistent objects that are the object tier representation of rows in database tables.
      <br/>
      The persistent objects are grouped according to the minions that are primarily responsible for manipulating them.
    </p>
    <p num="75">Billing Persistent Objects:</p>
    <p num="76">
      Activity objects 302 associate an accounting activity code with a description.
      <br/>
      In this regard these objects are very similar to the CodeMaster 310 and CodeLook 312 is objects.
      <br/>
      Activity objects 302 are a separate class because they are closely associated with the accounting department, and are updated periodically with data obtained from the accounting system.
      <br/>
      The CodeMaster 310 and CodeLook 312 objects are relatively static and are associated exclusively with the present invention.
    </p>
    <p num="77">
      Billing objects 304 contain transaction information that is used to bill clients for services provided on their behalf.
      <br/>
      Billing objects 304 include such information as: an account number to bill against; tracking information about when the transaction occurred and when it was posted to the accounting department; a description of the services being billed; and billing units and amounts.
      <br/>
      Clients are billed for both processing storage and disk space usage.
      <br/>
      Billing objects 304 for processing are created at the end of process execution, whereas Billing objects 304 for disk storage are created on weekly intervals by the DiskUsageBillingAgent.
      <br/>
      A given Billing object 304 is associated with one MatterNum 308 and ClientBase 314 object.
    </p>
    <p num="78">
      BillingSummary objects 306 represent Billing objects 304 summarized over some period of time by client, project, matter number, and accounting activity code.
      <br/>
      These objects are created periodically by the BillingManagerMinion.
      <br/>
      Summarizing Billing objects 304 into BillingSummary objects 306 provides the accounting department with the minimum set of items needed to perform the required billing functions.
    </p>
    <p num="79">
      MatterNum objects 308 contain billing information and activity status for a particular ClientBase object 314.
      <br/>
      Typically, a ClientBase object 314 has a matter number for disk storage billing and a matter number for data processing billing.
      <br/>
      Project objects 316 also have a matter number for disk storage billing and a matter number for data processing billing.
      <br/>
      When a new Project object 316 is created for a given ClientBase object 314, the matter numbers for the single ClientBase object 314 are copied and associated with the new Project object 316.
      <br/>
      The matter numbers for the Project object 316 may be changed at any time after the Project object 316 is first created.
      <br/>
      Billing records are associated with one matter number.
    </p>
    <p num="80">Job Management Persistent Objects:</p>
    <p num="81">
      A JobConfig object 318 is a description of a process to be executed that may include: a text description of the job configuration; an identifier associating it with the process configuration object that was used to create the job configuration; the name of the agent to run; command line arguments to send to the agent when it is launched; the messages the agent must process; a description of any dependencies on other job configuration objects; tracking information about when the job configuration started and ended processing; and result information about the volume of records processed and success or failure of processing.
      <br/>
      A JobConfig object 318 is associated with one JobStream object 322 and one ProcessConfig object 324.
    </p>
    <p num="82">
      A JobQueue object 320 associates a single JobStream object 322 with a date, time, and priority at which to run, and context information to use during execution.
      <br/>
      Once a JobQueue object 320 has been saved in the database, it can be modified or deleted.
      <br/>
      Deleting the JobQueue 320 entry removes the associated JobStream 322 and JobConfig 318 objects from the database.
      <br/>
      Modifications that can be made to the JobQueue object 320 include changing the date, time or priority.
    </p>
    <p num="83">
      A JobStream object 322 associates a group of JobConfig objects 318 together into a stream, where the JobConfig objects 318 can have dependencies between them.
      <br/>
      A JobStream object 322 is associated with one or more JobConfig objects 318 and may include information such as a text description of the job stream, information about dependencies on other job streams, tracking information about when the job stream started and ended execution, control information about expected execution times, and job stream completion status information.
    </p>
    <p num="84">
      A ProcessConfig object 324 is a "template" from which JobConfig objects 318 are created.
      <br/>
      When a system user of the present invention wants to submit a new JobConfig object 318 to the system, an existing ProcessConfig object 324 can be used as a template, or a new ProcessConfig object 324 can be created.
      <br/>
      In either case the ProcessConfig object 324 is saved back to the database.
      <br/>
      ProcessConfig objects 324 are essentially JobConfig objects 318 without the dynamic attributes, but may include such information as a text description of the process configuration, the name of the agent to run, command line arguments to send to the agent when it is launched, the messages the agent must process, and a description of any dependencies on other job configuration objects.
      <br/>
      A ProcessConfig object 324 is associated with one ProcessStream object 326.
      <br/>
      A ProcessStream object 326 and its associated ProcessConfig objects 324 never become part of the job queue.
      <br/>
      Instead, when a user submits a JobStream object 322 to the job queue for execution, the ProcessStream 326 and ProcessConfig 324 objects are used to create JobStream 322 and JobConfig 318 objects; those are the objects actually submitted to the queue.
    </p>
    <p num="85">
      A ProcessStream object 326 is a "template" from which JobStream objects 322 are created.
      <br/>
      When a system user wants to submit a new JobStream object 322 to the system, an existing ProcessStream object 326 can be used as a template, or a new ProcessStream object 326 can be created.
      <br/>
      In either case, the ProcessStream object 326 is saved back to the database.
      <br/>
      ProcessStream objects 326 are essentially JobStream objects 322 without the dynamic attributes, but may include such information as a text description of the job stream, and information about dependencies on other job streams.
    </p>
    <p num="86">Media Processing And Tracking Persistent Objects:</p>
    <p num="87">
      A CartridgeTape object (not shown) differs from basic Tapes in that it has compression and track count information associated with it.
      <br/>
      A given CartridgeTape object can be associated with one ClientBase object 314 (but a given ClientBase object 314 may be associated with many CartridgeTape objects, or more generally, with many other PhysicalMedia objects 332).
    </p>
    <p num="88">
      DataFile objects 328 represent tracked data files in the system and may include files imported from external media, files created as a side-effect of a system or client process, files extracted from a database, and files created outside the system (such as a word processor document) that have been entered into the system by a user for tracking purposes.
      <br/>
      The DataFile object 328 records sundry information of interest about the file.
      <br/>
      A given DataFile object 328 is associated with one Project object 316.
      <br/>
      The lifetime of a DataFile object 328 is specified by the Project object 316 it is associated with.
    </p>
    <p num="89">
      DataTable objects 330 represent tracked database tables in the system.
      <br/>
      The database tier contains both "production" tables (i.e. tables whose formats are fixed for a given client), and "project" tables that are created as a side-effect of processing the client data.
      <br/>
      The DataTable object 330 records sundry information of interest about the table.
      <br/>
      A given DataTable object 330 is associated with one Project object 316.
      <br/>
      The lifetime of a DataTable object 330 is specified by the Project object 316 it is associated with.
    </p>
    <p num="90">
      NineTrackTape objects (not shown) represent single-reel, nine-track tapes, that are usually associated with mainframe computers.
      <br/>
      NineTrackTape objects differ from basic Tapes in that they have tape density information associated with them.
      <br/>
      A given NineTrackTape object can be associated with one ClientBase object 314 (but a given ClientBase object 314 may be associated with many NineTrackTape objects, or more generally, with many other PhysicalMedia objects 332).
    </p>
    <p num="91">
      A PhysicalMedia object 332 describes the common attributes of physical media used for transporting data (such as magnetic tapes).
      <br/>
      These common attributes include not only characteristics of the physical media itself (such as its volume label), but also sundry information such as where it is physically located, when it was received, general comments, etc.
      <br/>
      A particular ClientBase object 314 can be associated with many PhysicalMedia objects 332 (but each of those can only be associated with a single ClientBase object 314).
      <br/>
      All PhysicalMedia objects 332 are cataloged by the Librarian so they can be tracked.
      <br/>
      PhysicalMedia objects 332 almost always have a finite lifetime, after which they are disposed of in some manner that is determined at the time they are cataloged.
      <br/>
      The lifetime of a PhysicalMedia object 332 is determined by the Project object 316 it is associated with.
    </p>
    <p num="92">
      A Tape object (not shown) represents any kind of magnetic tape media such as CartridgeTapes and NineTrackTapes.
      <br/>
      A Tape object can be thought of as an abstraction that collects common attributes shared by all tape objects.
      <br/>
      A TapeDrive object 334 represents tape drives in which magnetic tapes can be read and written.
      <br/>
      A TapeRack object 336 represents the racks in which magnetic tapes are stored.
      <br/>
      A TapeSlot object 338 represents a slot in a tape rack.
    </p>
    <p num="93">Miscellaneous Persistent Objects:</p>
    <p num="94">
      An Event object 340 represents an event that happened on the system that needs to be stored persistently in the event log database table.
      <br/>
      Event objects 340 describe what happened, when it happened, what operation or process was being performed at the time the event occurred, and some notion of severity (although severity is hard to convey because it is usually a function of who is observing the event).
      <br/>
      Because Event objects 340 are associated with processes, they are implicitly associated with a particular ClientBase object 314 unless the Context under which the process was operating did not include a ClientBase object 314 (which is the case for processes operating on behalf of the present invention itself).
      <br/>
      UserEventAssoc objects 374 contain the Event objects 340 that each User object 360 is interested in.
    </p>
    <p num="95">
      A CodeLook object 312 provides a long description for a given "code" (i.e. a short single word description or mnemonic), and associates the code with a CodeMaster object 310.
      <br/>
      All codes used in the system are stored in a single CodeLook table in the database.
      <br/>
      The codes that are grouped together are associated with the same CodeMaster object 310.
    </p>
    <p num="96">
      A CodeMaster object 310 describes the different codes that are used by the system.
      <br/>
      This description includes the name of the table column associated with the code, a long description for the code, the length of the code, and whether or not new codes can be added to the list of codes associated with this code master.
      <br/>
      The possible code values for a given CodeMaster object 310 are stored in the CodeLook table, and are associated with the CodeMaster object 310 through its unique identifier.
    </p>
    <p num="97">
      DMAMail objects 342 represent customers who do not want to receive promotion pieces from a mail marketing campaign.
      <br/>
      DMAPhone objects 344 represent customers who do not want to be contacted by phone on behalf of a telemarketing campaign.
    </p>
    <p num="98">
      A NotifyRegistry object 346 associates a notification name with a user who wants to have an e-mail and/or pager message sent to them when the notification occurs.
      <br/>
      NotifyRegistry objects 346 may include the name of the notification to dispatch, the user to dispatch the message to, and the transport mechanism to use to send the message (i.e. e-mail or pager).
    </p>
    <p num="99">
      A MinionLog object 348 represents a log message written to the MinionLog table by a minion.
      <br/>
      The MinionLog table is a general purpose area where any minion can store persistent advisory messages.
      <br/>
      A MinionLog object 348 may include the name of the minion that posted the message, when the activity occurred, an "activity code," an arbitrary message, and the ClientBase object 314 and/or Project object 316 that the minion was operating on when the message was saved
    </p>
    <p num="100">
      A State object 350 simply associates a standard abbreviation for a state that is a member of the USA with the full state name.
      <br/>
      A ZipCity object 352 is a utility object that associates zip codes, counties, and states together.
    </p>
    <p num="101">Security Persistent Objects:</p>
    <p num="102">
      An Action object 354 describes the operations that a user can perform with the system.
      <br/>
      These Action objects 354 can be grouped into ActionGroup objects 356.
      <br/>
      A given Action object 354 can be a member of zero or more ActionGroup objects 356.
      <br/>
      A given UserID is associated with a ClientBase object 314 and an Action object 354 through a Permission object 358.
      <br/>
      In other words, a particular user can only perform a certain Action object 354 on a ClientBase object 314 if there is a Permission object 358 for it.
    </p>
    <p num="103">
      An ActionGroup object 356 groups one or more actions together.
      <br/>
      ActionGroup objects 356 are an administrative convenience for assigning a collection of Action objects 354 to a UserID and ClientBase object 314 rather than having to assign them one at a time.
    </p>
    <p num="104">
      A Permission object 358 associates a User object 360 with a ClientBase object 314 and an Action object 354.
      <br/>
      There will be one of these objects for every Action object 354 that a particular User object 360 is allowed to perform on a given ClientBase object 314.
    </p>
    <p num="105">Session Management Persistent Objects:</p>
    <p num="106">
      A ClientBase object 314 contains database and system resource management information for the different clients.
      <br/>
      This information may include a client name, database connection and access information, database status, default billing information, directory locations for data files associated with the client base object, and default resource expiration information.
      <br/>
      ClientBase objects 314 may have zero or more Project objects 316 associated with them.
      <br/>
      A particular ClientBase object 314 and its associated Project object 316 are only accessible by User objects 360 that have permission to work with those Project objects 316.
      <br/>
      A ClientBase object 314 may have a finite lifetime (i.e. it may only remain active for a period of time, then be taken off the system), or may be essentially perpetual.
    </p>
    <p num="107">
      DataSpace objects 362 describe the data spaces on disk where the database servers store table and index data.
      <br/>
      DataSpace objects 362 may describe the name of the data space, whether the data space is a "project" table data space or a "production" table data space, a brief description of the data space, and the ClientBase object 314 associated with the DataSpace object 362.
    </p>
    <p num="108">
      A Project object 316 is a named collection of work associated with a ClientBase object 314.
      <br/>
      A Project object 316 may include a description of the project, a project code and status, archival information, and information about where to store flat files associated with the project.
      <br/>
      Project objects 316 can be associated with one ClientBase object 314, zero or more DataTable objects 330, zero or more DataFile objects 328, zero or more PhysicalMedia objects 332, zero or more JobStream objects 322 and ProcessStream objects 326, zero or more Session objects 364, one MatterNum object 308 for disk usage billing, and one MatterNum object 308 for processing billing.
    </p>
    <p num="109">
      All User objects 360 that have access to a particular ClientBase object 314 are able to access all of its Project objects 316.
      <br/>
      Multiple Sessions (and therefore multiple User objects 360) may work on a Project object 316 concurrently.
    </p>
    <p num="110">
      A Session object 364 is a combination of a particular Computer and Context that represents a connection from a particular workstation to a project on behalf of a User object 360.
      <br/>
      A Session object 364 is always associated with exactly one Project object 316 and therefore with exactly one ClientBase object 314.
      <br/>
      Sessions are created when User objects 360 connect to the present invention from some workstation application, and are used in nearly all other system messaging to establish the context in which those messages should execute.
      <br/>
      A User object 360 on a particular workstation computer may establish exactly one Session from that workstation.
      <br/>
      However, a User object 360 may establish concurrent sessions from different workstations.
    </p>
    <p num="111">
      A SysDefault object 366 stores default values for the present invention.
      <br/>
      These default values consist of key-value pairs in the form of strings.
      <br/>
      A UserDefault object 368 stores user-dependent default values for the present invention.
      <br/>
      These default values consist of key-value pairs in the form of strings, and can vary from one user to the next.
    </p>
    <p num="112">
      A User object 360 represents a user of the present invention.
      <br/>
      A User object 360 is allowed to work on selected ClientBase objects 314, and has access to all Project objects 316 associated with those ClientBase objects 314.
      <br/>
      A user may connect to (i.e. establish a Session with) the present invention from any workstation computer that is able to communicate with the system, and may have concurrent Sessions from multiple workstations, limited to a single Session on a particular workstation.
    </p>
    <p num="113">
      The Expression object 370 contains expression and function information used by applications.
      <br/>
      The ClientExprAssoc object 372 contains each valid expression for each ClientBase object 314.
      <br/>
      The eo_sequence_table 376 keeps track of the last original identifier assigned to each object.
      <br/>
      The SecurityGuard table 378 contains the userid and encrypted password for each valid user of the system.
      <br/>
      Only the security guard 136 (FIG. 1) has access to this table.
    </p>
    <p num="114">Client Objects</p>
    <p num="115">
      Referring now to FIG. 7A, a block diagram of the persistent objects comprising the client objects 124 (FIG. 1), in accordance with one possible relational embodiment of the present invention, is illustrated.
      <br/>
      The present invention is not limited to the specific client objects 124 described or to the relational embodiment illustrated in FIG. 7A. Those persons skilled in the art will recognize that the present invention is designed to allow client objects 124 to be added, deleted or changed, and the relationships between the client objects 124 to be changed according to the intended application of the present invention.
      <br/>
      The relational nature of the client objects 124 allow the present invention to be modified without extensive recoding.
    </p>
    <p num="116">Customer &amp; HouseHold Tables:</p>
    <p num="117">
      OrigSource 402 provides a tracking mechanism for changes in the Source 404 of a given Customer 400.
      <br/>
      The same Customer 400 information may be obtained from a number of different Sources 404 over time, often it is ignored as duplicate data.
      <br/>
      OrigSource 402 can be used to determine whether to quit buying from a particular source if a high percentage of duplicates with a different (cheaper) Source 404 are produced.
      <br/>
      If such a determination is desired, a row is inserted into OrigSource 402 each time information from an existing Customer 400 is received that indicates a different Source 404
    </p>
    <p num="118">
      Household 406 is a grouping table wherein each row represents a group of Customer 400 rows that have the same address info in the CustNameAddress table 410.
      <br/>
      There will be one Household 406 entry per unique customer address.
      <br/>
      A row is inserted into Household 406 the first time a Customer 400 row is added for a given address.
      <br/>
      Household 406 carries information that is common to all customers at a given address, such as whether the property is owned or rented.
    </p>
    <p num="119">
      HHoldSuppres 408 provides a method of suppressing mailings to particular Households 406.
      <br/>
      HHoldSuppres 408 can be used to suppress mailings for specific Brands 412, but not for other Brands 412.
      <br/>
      Typically, mailings are only suppressed for a specified period of time.
      <br/>
      Thus a cleanup process is periodically used to delete expired rows from the table.
    </p>
    <p num="120">
      Source 404 is a look-up table used to identify the information "source" for a given customer.
      <br/>
      A row cannot be inserted into the Customer table 400 without referencing an existing entry in the Source table 404.
      <br/>
      Prior to loading customer data, the Source table 404 is populated with all potential sources of customer data.
      <br/>
      Source 404 can also be used to provide a way to give one source "priority" over another.
      <br/>
      In such a case, two or more sources are received from the same Customer 400.
      <br/>
      Thereafter, a rule such as "If I get two sources within one week of each other, pick source A over source B" can be used.
    </p>
    <p num="121">
      Customer 400 and CustNameAddress 410 are two tables that combine to provide information specific to each customer.
      <br/>
      The Customer table 400 contains most of the demographic data.
      <br/>
      The CustNameAddress table 410 contains the name and address components.
      <br/>
      In general when the generic term "customer" is used, it is referring to the combination of three tables: Customer 400, CustNameAddress 410, and RentalExpire 414.
      <br/>
      A unique identifier for the customer called the PID, which stands for Person Identifier, is stored in Customer 400.
      <br/>
      Mailings are designed such that when a customer response comes in, it will contain the PID for that customer so that the response can be cross-referenced back to the right customer in the database.
    </p>
    <p num="122">
      RentalExpire 414 is only used if the Customer 400 is a "rental", which means that it was purchased from a list provider.
      <br/>
      A rented name can only be used for a specific period of time, unless the customer converts from being a prospect to an actual customer during that time.
      <br/>
      Conversion typically occurs as a result of responding to a promotion, or purchasing the client's product.
      <br/>
      This table has a one-to-one relationship to the Customer table 400.
    </p>
    <p num="123">
      CustCustAssoc 416 is an association table that records how one customer is related with (i.e. associated to) another customer.
      <br/>
      Examples include: "Cust A referred Cust B to this brand" or "Cust A is a parent of Cust B."
    </p>
    <p num="124">
      CollapsePID 418 is a table wherein a row is inserted when two or more "customers" are found in the database with the same name and address.
      <br/>
      Thereafter, a process can "collapse" these multiple customers into one Customer 400 row, essentially eliminating duplicate customer data.
      <br/>
      Any data that was tied to a collapsed customer's PID is moved under the remaining customer PID.
      <br/>
      If correspondence comes in that references a PID which is not found on the Customer table 400, this table is checked to see if the PID has been collapsed and is now known by another PID.
      <br/>
      Typically, the CollapsePID 418 row is not deleted until a sufficient time period has elapsed to insure that no more correspondence comes in which references the original (i.e. collapsed) PID.
    </p>
    <p num="125">
      ExternalXref 420 allows a customer to be tracked using an identification number that is separate from the internally generated PID number.
      <br/>
      Clients often have a database of customers and will have already assigned their own identifier to each customer.
      <br/>
      The ExternalXref table 420 allows these externally generated identifiers to be cross-referenced back to the right customer in the database.
    </p>
    <p num="126">Market Tables:</p>
    <p num="127">
      MarketScheme 422 is a grouping table that allows a business unit to define different schemes for dividing their market into different areas.
      <br/>
      For example, business unit "AA" may use a "SCHEME-1" which is a hierarchy of regions, districts, and zones to identify the market areas; whereas business unit "BB" uses "SCHEME-2" which is a more flattened approach of North/South/East/West.
    </p>
    <p num="128">
      BusinessUnit 424 identifies each business unit within a client Organization.
      <br/>
      Business units can range from departments to whole companies, depending upon how the company needs to do reporting.
    </p>
    <p num="129">
      Market 426 is a grouping table that describes (i.e. gives a name to) a given market or market area.
      <br/>
      It allows for a hierarchy of up to five levels to be defined, although the hierarchy needs to be inverted when this table is populated.
      <br/>
      For example:
    </p>
    <p num="130">
      MarketLevel1=DFW
      <br/>
      MarketLevel2=TEXAS
      <br/>
      MarketLevel3=SOUTHERN U.S.
    </p>
    <p num="131">
      MarketLevel4=DOMESTIC
      <br/>
      MarketLevel5=&lt;null&gt;.
    </p>
    <p num="132">
      MarketZip 428 provides a way to assign zip codes to particular markets.
      <br/>
      Zip codes are often used to assign customers to market areas.
      <br/>
      There are a number of other possibilities, such as FIPS code, county, etc.
      <br/>
      The standard data model will provide this table for zip codes, but other methods will have to be tailored to each client according to their needs.
      <br/>
      Alternatively, the database may allow for zip code "ranges" rather than individual zip codes.
    </p>
    <p num="133">Brand Tables:</p>
    <p num="134">
      Segment 430 is a grouping table that gives a name to the segments that customers may be assigned to.
      <br/>
      Most often, the segment is an indication of how often a customer uses products in the client's brand category.
      <br/>
      Examples of this type could be "Heavy," "Medium," or "Light." Accordingly, Segment 430 can be used to categorize customers according to their potential use of a client's brand category.
    </p>
    <p num="135">
      BrandCategory 432 is a grouping table that names the general brand category that the client competes in.
      <br/>
      An example might be "SOFT DRINKS." BrandCategory 432 may also include data that tells how the client wants to measure customer use of products in this brand category.
      <br/>
      For example, they may want to measure "cases per month", "uses per week", or "nights stayed in last 12 months".
    </p>
    <p num="136">
      CustTarget 434 is an association table between Customer 400 and BrandCategory 432 that can store which particular segment a customer is in for this brand category.
      <br/>
      CustTarget 434 may also contain volume information that can be later used to segment (or re-segment) the customer.
    </p>
    <p num="137">
      Brand 412 is a grouping table that names the brands being tracked on behalf of the client.
      <br/>
      Note that competitive brands may be included.
    </p>
    <p num="138">
      CustBrandAssoc 436 is an association table between Customer 400 and Brand 412.
      <br/>
      CustBrandAssoc 436 stores data about the relationship a customer has with a given brand.
      <br/>
      For example, "Out of the last 10 times you have used a product in this brand category, how many were for brand X"?
    </p>
    <p num="139">Brand Family 438 represents brand families for a particular client.</p>
    <p num="140">Products and Purchase Transactions Tables:</p>
    <p num="141">
      ProductGroup 440 is an optional grouping table that can be used to group related products.
      <br/>
      For example, a client that sells several printer models and accessories may wish to group their products according to product lines, such as "laser printers", "ink jet printers", or "printer accessories".
    </p>
    <p num="142">
      Product 442 lists information about each client product or service.
      <br/>
      A specific product should not be in more than one product group.
      <br/>
      For example, if the product was a printer model "XLT-1200", it should not be in both the "laser printers" product group and the "business use" product group.
    </p>
    <p num="143">PurchaseTrans 444 is an association table that associates a Customer 400 with a particular Product 442 in the form of a purchase.</p>
    <p num="144">
      ProductOwner 446 associates a particular customer with particular products that the customer owns.
      <br/>
      ProductOwner 446 also indicates of the type of ownership (e.g. "owned by" or "used by"), and the serial number of the owned product.
    </p>
    <p num="145">
      ProductStageOwn 448 defines "stages" of product ownership.
      <br/>
      Each ProductOwner 446, which associates a customer with an owned product, is also associated with a ProductStageOwn 448 that defines the stage of the ownership.
    </p>
    <p num="146">NextStageOwn 450 represents the next possible stage of ownership.</p>
    <p num="147">PrevStageOwn 452 represents the previous possible stage of ownership.</p>
    <p num="148">Screener Tables:</p>
    <p num="149">
      ScrnQuestion 454 records all screener questions.
      <br/>
      Each question is recorded once, even though it may appear in several different communications.
      <br/>
      ScrnQuestion 454 allows a particular question to be dependent upon another question, or the response to that question.
      <br/>
      An example of this would be:
      <br/>
      Q1.
      <br/>
      Which of the following brands of soft drink do you use most often?
    </p>
    <p num="150">
      - a) brand x b) brand y c) brand z
      <br/>
      Q2.
      <br/>
      How many times last month did you purchase your favorite soft drink brand?
      <br/>
      - a) 0-2 b) 3-7 c) 8 or more
    </p>
    <p num="151">
      In the above example, the answer to Q2 would depend upon the answer to Q1.
      <br/>
      In addition, ScrnQuestion 454 determines how to treat multiple responses (from the same customer) to a question that is being asked on several communications.
      <br/>
      Among the available options are (1) Keep only the last response, (2) Keep all responses, or (3) Keep all unique (different from any previous) responses.
    </p>
    <p num="152">
      ScrnResponse 456 contains rows that represent a valid response to a question in the ScrnQuestion table 454.
      <br/>
      In the case of a question with four possible choices labeled A through D, there would be four rows in this table that pointed back to that question.
      <br/>
      Questions allowing open-ended responses will have a value of "OPEN." Note that questions should either be open-ended or multiple choice, but not both.
      <br/>
      In other words, questions should not allow a choice such as "Other" where the customer supplies a value not listed among the other choices.
    </p>
    <p num="153">
      CustScrnResp 458 is an association table between the Customer 400 and ScrnResponse tables 456 wherein each row represents a customer response to a specific question.
      <br/>
      The response must be one of those listed in the ScrnResponse table 456 as a valid response to the question.
    </p>
    <p num="154">Campaign Management (Event Transition Network) Tables:</p>
    <p num="155">
      The event transition network ("ETN") is a mechanism that tracks and moves customers through marketing campaigns.
      <br/>
      In general, ETN describes a data structure (a group of "states") and a set of rules that moves an item from one state to another.
      <br/>
      From a marketing perspective, a customer is moved through various states of a marketing campaign with each state being associated with specific communications and responses.
      <br/>
      After the campaign ends, the final states of all customers are analyzed.
      <br/>
      One advantage of the ETN approach is that a single mechanism is used to set up marketing campaigns of arbitrary complexity.
      <br/>
      Moreover, how and when customers move from one state to another can be controlled.
    </p>
    <p num="156">
      The ETN approach also makes it much easier to establish and track research groups.
      <br/>
      For example, specific attributes are set up for states that describe whether customers in a given state are involved in a research group, and if so, whether the customers are part of the control group or test group.
      <br/>
      The ETN design also provides the following features: standardized process to ensure consistent quality; mechanisms to automatically or manually move customers through a multi-phase marketing campaign; provisions for interactive, event-driven response and subsequent communication generation; and tracking of current state and total path through the network for any single customer.
      <br/>
      The marketing campaign comprises the following tables:
    </p>
    <p num="157">
      Campaign 460 is a grouping table that represents or gives a name to the marketing campaign or promotional program.
      <br/>
      Each campaign will consist of one or more ETNStates 462.
      <br/>
      Simple campaigns may only have one state with a single communication.
    </p>
    <p num="158">
      ETNStates 462 defines all the valid "states" for the marketing campaign or promotional program.
      <br/>
      During a marketing program, each customer will start at the beginning state and progress through one or more states until the terminating (i.e. last) state is reached.
      <br/>
      In a typical multi-path marketing program, all customers will start out at the same beginning state, but during the course of the program, customers will progress through the remaining states at different rates and will not necessarily take the same path to the terminating state.
      <br/>
      Entry into a particular state will typically trigger an associated communication with the customer.
    </p>
    <p num="159">
      ETN Rule 464 defines the rules for progressing from one ETNState 462 to the NextState 463.
      <br/>
      ETN Rule 464 contains the state that the customer is currently in and the state that the customer will progress to if the rule condition is met.
      <br/>
      When the condition is met, the rule is said to "fire" or "trigger." The rule can be based upon how much time elapsed since getting to the current state or upon the successful completion of an arbitrary SQL statement that is stored in ETN Rule 464.
      <br/>
      In addition, there can be more than one rule that moves a customer from one state to another.
      <br/>
      TransitBatchMinion performs the actual transition between ETNStates 462.
      <br/>
      Transitions from one state to another are triggered in one of the following ways:
      <br/>
      CommDescr 466 Customer responds to a communication
      <br/>
      ScrnResponse 456 Customer responds to a screener question
      <br/>
      SQL Customer satisfies some user specified SQL statement
      <br/>
      Default Customer transitions to new state by default after some user specified period of time passes.
    </p>
    <p num="160">
      The response mechanisms can be set to trigger for a specific range of dates.
      <br/>
      A default rule is required if the state is not defined as a termination state.
      <br/>
      This ensures that the customers will eventually transition into a termination state.
      <br/>
      For example, one rule for "State -2" might specify that the customer can get to "State -4" by giving a particular response to a screener question, and another rule for "State -2" might specify that the customer can get to "State -4" by satisfying an SQL statement that identifies the customer as a "heavy" user of the brand.
      <br/>
      ETN Rule 464 also provides the capacity to determine the order in which rules are evaluated.
    </p>
    <p num="161">
      ETNCommDescr 468 is an association table between the CommDescr 466 and ETNState 462 tables.
      <br/>
      ETNCommDescr 468 specifies which communication(s) are tied to which state(s) in a marketing campaign.
      <br/>
      When the customer progresses through the various states in a marketing campaign, this table is used to identify which communications are sent to the customer.
    </p>
    <p num="162">
      CustCampgnAssoc 470 is an association table between the Customer 400 and ETNState 462 tables.
      <br/>
      CustCampgnAssoc 470 specifies which state a particular customer is in for a given marketing program because a customer may be participating in more than one marketing program at a time, and therefore would potentially be at different states for each program.
      <br/>
      All customers are enrolled in the campaign using standard processes.
      <br/>
      It is possible to add customers to the campaign at some later time or to remove them from participation.
      <br/>
      Once placed in an initial "starting" state, customers can be moved into specific states associated with the initial communication based on a set of transition rules.
    </p>
    <p num="163">
      ETNTransLog 472 provides an optional audit trail that tracks the path each customer took through a marketing program and the most commonly travelled paths through a marketing campaign to be determined.
      <br/>
      ETNTransLog 472 is optional in that it is only populated if the ETNRule 464 specifies that it should be logged when this rule fires (i.e. condition is met).
    </p>
    <p num="164">
      CommDescr 466 describes each communication that can be sent to a customer.
      <br/>
      CommDescr 466 can also be used to describe incoming communications either from the customer, client, or a vendor.
    </p>
    <p num="165">
      DBCommOut 474 is an association between Customer 400 and CommDescr 466 that records which communications have been sent to each customer.
      <br/>
      This information can be moved to a log file after some period of time.
      <br/>
      Archiving of customer data will also force the archive of all related communications records.
    </p>
    <p num="166">
      DBCommIn 476 records the response by the customer to a marketing communication.
      <br/>
      The response can be quite simple, such as "responded", or more complex where there are multiple responses to the campaign possible.
    </p>
    <p num="167">InMarketComm 478 is an association between Customer 400 and CommDescr 466 that records incoming communications.</p>
    <p num="168">
      CommBrand 480 is used to identify which communications have been set up for a given brand or product.
      <br/>
      And conversely, CommBrand 480 can be used to look up what brands and/or products are being marketed in a given communication.
    </p>
    <p num="169">
      Cell 482 is an arbitrary grouping into which customers are placed for a promotion event.
      <br/>
      These groupings are created for research purposes, and can be queried during later data processing.
      <br/>
      An example of a cell might be "white females under the age of 30," or "people who live in Texas." The Cell 482 basically consists of an arbitrary code and description.
      <br/>
      Cell 482 coding is typically performed during the data extract process.
    </p>
    <p num="170">
      The following steps outline the standard process for preparing communications for a marketing campaign.
      <br/>
      These standard processes help to ensure an acceptable level of quality in the preparation of data for various entities.
    </p>
    <p num="171">
      1. Marketing Campaign Design
      <br/>
      Specify the various ETN states.
    </p>
    <p num="172">Determine which states are considered termination states.</p>
    <p num="173">Specify rules to transition from non-terminating states.</p>
    <p num="174">Specify which communication will be sent for each ETN state.</p>
    <p num="175">Specify which ETN states are part of a research test group.</p>
    <p num="176">
      Specify which ETN states are part of a research control group.
      <br/>
      2. Communication Table Content
      <br/>
      This includes customer PID, name, address, and perhaps other demographic information.
      <br/>
      It is possible to send more than one communication to a single customer entry.
      <br/>
      3. Point-In-Time Information
      <br/>
      PIT information can be pulled for test, control or the target group for use on post-analysis.
      <br/>
      The PIT information is exported from the database and delivered to the analysis user.
      <br/>
      No further tracking of the PIT project table of exported data is maintained.
      <br/>
      4. Specify Rules for Suppression and Uniqueness
      <br/>
      Normally, suppressed customers and households involved in research are excluded from the communication table.
      <br/>
      Uniqueness requirements can specify that the communications should be unique by customer ID or by household ID.
      <br/>
      Further a household can be defined as a single building address or all people with the same last name living at the same address.
      <br/>
      5. Quantities &amp; Selection Criteria
      <br/>
      Specify the quantities for each of the ETN states and the methods that should be used to select these quantities.
      <br/>
      6. Extraction of Qualifying Universe
      <br/>
      Extract all customers that could qualify for any of the ETN states.
      <br/>
      This will form the basis of the gross universe table for this marketing campaign.
      <br/>
      7. Execute Process
    </p>
    <p num="177">
      Campaign Management includes tasks that track an individual customer through the stages of a marketing campaign.
      <br/>
      Examples of Campaign Management processes include EtnPrep, EtnAssign, EtnEnroll, CommGenerate, CommReversal, and EtnTransitBatch.
    </p>
    <p num="178">
      CommGenerate generates one or more communication records for unposted communications.
      <br/>
      The communications are placed in a new project table with added delivery information such as name, address, phone, e-mail and the relevant communications codes.
      <br/>
      The necessary rows are posted to the DBCommOut table, and suppression by household is also performed.
    </p>
    <p num="179">
      CommReversal assists the user in reversing a communications posting.
      <br/>
      It will remove rows from the DBCommOut table, and clear suppressed households.
    </p>
    <p num="180">
      EtnAssign assigns ETN states to customers based on a set of parameters specified by the user.
      <br/>
      The user can elect to assign states to all customers or choose among customers based on priority.
    </p>
    <p num="181">
      EtnEnroll enrolls customers in a marketing program.
      <br/>
      The customers will already have been assigned an ETN state by the minion EtnAssign.
      <br/>
      The enrollment process creates associations between customers and ETN states within the client database.
      <br/>
      These associations are stored in the table custCampgnAssoc
    </p>
    <p num="182">
      EtnPrep prepares a user-specified project table for ETN state assignment.
      <br/>
      This preparation involves adding a column for ETNstate and then removing suppressed and duplicate customer rows.
    </p>
    <p num="183">
      EtnTransitBatch performs the transition from one state to another for all eligible participants in the custETNassoc table.
      <br/>
      These transitions are based on the ETN transition rules as defined by the user.
    </p>
    <p num="184">Miscellaneous Tables:</p>
    <p num="185">
      Now referring to FIG. 7B, another block diagram of the persistent objects comprising the client objects 124 (FIG. 1), in accordance with one possible relational embodiment of the present invention, is illustrated.
      <br/>
      The following tables are similar in that none of them are used to store client data.
      <br/>
      Instead, they are used to help direct the application software processes that need to validate and load incoming client data.
    </p>
    <p num="186">
      CodeMaster 484 contains a list of column names that appear in one or more other tables and have a pre-defined set of valid values that can be assigned to them.
      <br/>
      This table, along with the CodeLook table 486, provides a convenient way for the application to validate incoming data.
    </p>
    <p num="187">
      CodeLook 486 stores the list of valid values for columns named in the CodeMaster table 484.
      <br/>
      The application compares incoming data for a column named in CodeMaster 484 against this list of valid values.
      <br/>
      Each row contains one valid value for a given column in CodeMaster 484.
    </p>
    <p num="188">
      RecodeMap 488 is used by the application to translate certain incoming column values into other values.
      <br/>
      For example, an input file may contain the words MALE or FEMALE to indicate the sex of the customer, but information needs to be stored as M or F.
    </p>
    <p num="189">
      Eo_sequence_table 490 assigns the next sequential value to a given table's primary key column.
      <br/>
      In the present invention, every table has an "artificial" primary key called an "Object ID" (OID).
      <br/>
      The value stored in the primary key of each table is a system generated sequential number.
      <br/>
      The application uses eo_sequence_table 490 to determine the next primary key value that is to be assigned for each table in the client objects 124.
    </p>
    <p num="190">
      DDColumn 492 is one of three tables used together to group related column names.
      <br/>
      DDColumn 492 stores the name of each column used throughout the client objects 124.
      <br/>
      Along with the column name, it also stores a brief description and what "type" of data it contains (e.g. DATE, CHAR(8), INTEGER, etc. . . ).
    </p>
    <p num="191">
      DDGroup 494 is one of three tables used together to group related column names.
      <br/>
      DDGroup 494 names each group of columns to improve consistency in the various data pulls that are requested.
      <br/>
      A special group called "WORKING" is reserved and should be used to add columns that are temporary or are not yet added to the data model.
    </p>
    <p num="192">
      DDGroupColumn 496 is one of three tables used together to group related column names.
      <br/>
      It is an association table between DDGroup 494 and DDColumn 492.
      <br/>
      DDGroupColumn 496 identifies which columns are in a given group.
    </p>
    <p num="193">
      SumCustDescr 498 represents descriptions of a table summarization that can be made for reporting purposes.
      <br/>
      SumCustDetaill 500 and SumCustDetail2502 represent particular runs of a summarization.
    </p>
    <p num="194">Chain 504 represents a particular retailer chain and Retailer 506 represents retailers associated with a retail chain.</p>
    <p num="195">
      Seeds 508 are persons who are intentionally added as the destination of promotion pieces to aid in tracking when pieces get delivered.
      <br/>
      SeedGroup 510 is a group of seeds and SeedGroupAssoc 512 is an association table between Seed 508 and SeedGroup 510.
    </p>
    <p num="196">EOFLite</p>
    <p num="197">
      Referring to FIG. 8, a block diagram of the EOFLite components 126 (FIG. 1), in accordance with a preferred embodiment of the present invention, is illustrated.
      <br/>
      The EOFLite components 126 are designed to provide a "lightweight" binding layer for moving data back and forth between the client database 114 and high-volume "batch" processes.
      <br/>
      The EOFLite components 126 create instances of custom classes without having to live with the overhead inherent in the lower-level EOF frameworks, which are designed more for OLTP-type processing than for record-by-record batch processing.
    </p>
    <p num="198">
      The EOFLite components 126 are designed to work with the same enterprise object classes that are used with EOF, so that a single object model can be developed that works the same for both interactive and batch processing (i.e. the same business logic will be used by both).
      <br/>
      The major classes in EOFLite are designed to model familiar database concepts, such as the database itself, connections to the database, cursors in a connection, and bindings between the data being manipulated by a cursor and some object that is to be populated with that data.
      <br/>
      These components supplement the basic EOF "primitive" classes, such as EOModel 602, EOQualifier 604, EOEntity 606, and EOAttribute 608, and when used together result in a much more efficient mechanism for performing batch processing.
      <br/>
      The EOFLite components 126 are as follows:
    </p>
    <p num="199">
      EOModel 602 describes the database that is represented by this DBDatabase 610 instance.
      <br/>
      The model contains connection information, and a description of the tables in the database and the relationships between them.
    </p>
    <p num="200">EOQualifier 604 is the qualifier that the receiver uses to qualify data selects.</p>
    <p num="201">EOEntity 606 describes which table to operate on, and the columns in the table that should be retrieved when the receiver fetches data.</p>
    <p num="202">EOAttribute 608 represents the table column whose data the receiver is binding to its object.</p>
    <p num="203">
      DBDatabase 610 represents a single physical database.
      <br/>
      Each instance of this class can be associated with zero or more DBConnection 612 instances.
    </p>
    <p num="204">
      DBConnection 612 represents a physical connection to a single database.
      <br/>
      Each connection can have zero or more cursors operating through it.
    </p>
    <p num="205">
      DBCursor 614 represents data cursors operating through a connection.
      <br/>
      These instances are configured for a single entity and an associated class of objects whose instances will be populated with the data retrieved by the cursor.
    </p>
    <p num="206">
      DBBinding 616 represents bindings between a single EOAttribute 608, which represents a single column in a table, and a single instance variable of an object.
      <br/>
      These "bindings" are used by instances of the DBCursor 614 to map data between the attributes of an EOEntity 606 and the instance variables of the cursor's prototype object.
    </p>
    <p num="207">NSObject 618 is the object to and from which data is being mapped by the receiver.</p>
    <p num="208">
      String is a lightweight implementation of NSString that provides more external access to the internal representation of the string, and minimizes the amount of memory allocation overhead that takes place during string manipulation.
      <br/>
      This class is primarily provided as an optimization for batch processes that cannot afford the performance overhead of the NSString class.
    </p>
    <p num="209">
      Number is a lightweight implementation of NSNumber that minimizes the amount of memory allocation overhead that takes place during data manipulation.
      <br/>
      This class is primarily provided as an optimization for batch processes that cannot afford the performance overhead of the NSNumber class.
    </p>
    <p num="210">
      CalendarDate is a lightweight implementation of NSCalendarDate that minimizes the amount of computation overhead involved to manipulate dates.
      <br/>
      This class is primarily provided as an optimization for batch processes that cannot afford the performance overhead of the NSCalendarDate class.
    </p>
    <p num="211">User Interface Tier</p>
    <p num="212">
      The user interface tier comprises native OpenStep applications running on the end-user workstations.
      <br/>
      Alternatively, the system can include web-brower interfaces to support connections to the system over the Internet.
      <br/>
      The front-end applications in the user interface tier are Production, SysAdmin, and OpCon.
    </p>
    <p num="213">The Production application is the interface that provides access to the following production processes and procedures: importing client data; reformatting and recoding of client data; making name and address corrections to incoming customer information; suppressing selected incoming records from inclusion in the client database; merging incoming customer records with existing records in the client database; and extracting selected client data for various purposes.</p>
    <p num="214">The SysAdmin application is the administrative interface to the present invention, and provides support for the following processes and procedures: administration of the agents running on the various machines in the system; administration of the job management system; maintenance of the user and security tables; and sundry table maintenance.</p>
    <p num="215">The OpCon application is the interface to the present invention for the Operations group, and provides support for the following processes and procedures: maintenance of tape tracking information; and posting messages to system operators (such as requesting a tape mount or alerting the operator about an observed system malfunction).</p>
    <p num="216">User Production Application</p>
    <p num="217">
      The four major processes in the user production application are: Import and Update; Querying/Extraction; Reporting; and Campaign Management.
      <br/>
      These processes are grouped according to the results they produce for the user.
      <br/>
      The user of the present invention can create job streams (sets of work process configurations grouped together so that they can execute without user intervention) to support these major processes.
      <br/>
      Some of the tasks within job streams, such as TapeContents and DataDump, can be used to support all four categories listed above.
    </p>
    <p num="218">Import and Update:</p>
    <p num="219">
      This process includes all the tasks necessary for adding data to the client's database.
      <br/>
      Data comes in from various sources like list brokers, client-provided data and customer response data.
      <br/>
      The data is standardized and cleaned before being added to the database through the update.
      <br/>
      Examples of processes used in the Import and Update include ACEUSBatch, CustRefresh, DbMatch, NameParse, QAMacro, QAMicro, Recode, Reformat, TapeRead, and Update.
    </p>
    <p num="220">
      ACEUSBatch handles address correction and coding of all US address records in a project table, the customer name and address table or the DMA suppression table.
      <br/>
      It also generates the matchString and parseAddress data used by DbMatch to match customers against the database.
    </p>
    <p num="221">
      CustRefresh provides address correction to new or changed database records.
      <br/>
      This process only applies to customer name and address records that have been introduced outside of the normal update procedures.
      <br/>
      These records are normally entered into the base database by online users and so can be detected by the nature of the source attribute.
      <br/>
      Other processing options are available to handle zip plus 4 changes and, if necessary, standardize the entire customer table.
    </p>
    <p num="222">
      DbMatch matches incoming customer records in a project table against the database.
      <br/>
      Matches by household, and individual within the household can be requested.
    </p>
    <p num="223">NameParse parses customer names into standard components and then optionally assigns a sex code based on either the name prefix or the first name.</p>
    <p num="224">
      QAMacro determines if the input file is of the expected size and record length.
      <br/>
      Only fixed length data records are supported.
    </p>
    <p num="225">
      QAMicro examines the contents of a project table at a detailed level.
      <br/>
      Individual columns are examined for specific content to verify the validity of the data.
    </p>
    <p num="226">Recode re-codes existing data columns or creates contents for empty columns (known as working fields) based on the input data contained in other columns.</p>
    <p num="227">
      Reformat imports data from flat files into project tables.
      <br/>
      The source of this data is typically from tape.
    </p>
    <p num="228">
      TapeRead moves data from tape to disk in flat file format.
      <br/>
      The capability exists to handle cartridge or round reel tapes.
    </p>
    <p num="229">
      Update processes additions or changes to the database based on the data contained within the project table.
      <br/>
      This process modifies data content for cleansing purposes.
    </p>
    <p num="230">QueryinglExtraction:</p>
    <p num="231">
      This type of process includes all the necessary tasks for viewing the data that is in the database.
      <br/>
      The user can look for a combination of data from various tables in the client's database in order to determine what to extract and use for project tables.
      <br/>
      Project tables allow the user to house queried data extracted from the client's database in order to meet the information needs of the client.
      <br/>
      Examples of processes used to query and extract data include Export, Layout, SqlDelete, SqlSelect, SqlUpdate, SuppressDMA, TableCombine, TableDedup, TableMatch, and TapeWrite.
    </p>
    <p num="232">
      Export sends a project or database query to a flat ASCII data file.
      <br/>
      This process is usually performed in preparation for a job to write the exported data to tape for delivery to an outside vendor.
    </p>
    <p num="233">
      Layout produces a document detailing the contents of a project table.
      <br/>
      Normally, the layout is produced as part of the Export minion output, but this feature allows structure analysis of a project table at any point in the process.
    </p>
    <p num="234">
      SqlDelete deletes specific rows in a specified project table.
      <br/>
      Batch deletions on client data tables are not supported for security reasons.
    </p>
    <p num="235">
      SqlSelect runs requested SQL query expressions against the appropriate client database.
      <br/>
      The results of the query are placed in a project table.
    </p>
    <p num="236">
      SqlUpdate accepts a Where clause from the user and a list of columns and update expressions.
      <br/>
      The updates are then applied to all rows in the table satisfied by the Where clause.
    </p>
    <p num="237">
      SuppressDMA matches incoming customer records against the suppression table supplied by the Direct Marketing Association (DMA).
      <br/>
      The two types of suppression are Mail and Phone.
      <br/>
      This minion will remove records from a project table or just count the number of matches.
    </p>
    <p num="238">
      TableCombine combines multiple project tables into a single table.
      <br/>
      The user has the option of adding all contents to the first table in the list or creating a new output project table.
      <br/>
      Removal of all combined tables, except for the destination table, is also provided as an option.
      <br/>
      Only columns in common with the first project table in the user specified list are carried forward to the destination table.
      <br/>
      This minion performs a raw merge of data from multiple tables on common column names.
      <br/>
      There is no check for duplicate data.
    </p>
    <p num="239">
      TableDedup removes or updates duplicate rows in a single project table.
      <br/>
      This simple duplicate removal process can be used to keep the `best` record of a group of matching records provided some priority column exists to order the records from best to worst.
    </p>
    <p num="240">
      TableMatch matches a project table (table A) against another project table (table B).
      <br/>
      The users select what type of action to perform on table A based on a successful or failed match.
      <br/>
      The match is based on a simple single column match of one table against another.
    </p>
    <p num="241">
      TapeWrite moves data from disk to tape in flat file format.
      <br/>
      The capability exists to handle cartridge or round reel tapes.
    </p>
    <p num="242">Reporting:</p>
    <p num="243">
      Reporting includes all the tasks for reporting the results of the extraction, data import, update and ad hoc requests.
      <br/>
      Examples of Reporting processes include Count, List, and Scan.
    </p>
    <p num="244">
      Count determines the number of rows that satisfy some user defined Where clause and reports that number back to the user in the job output report.
      <br/>
      For example, Determine the number of customers with suppressmail flag=`Y` or the number of customers who responded to promotion ABC.
    </p>
    <p num="245">
      List produces a quick report of a select set of columns and rows.
      <br/>
      This process is often used to provide a quick, readable dump of a set of records from the database.
      <br/>
      For example, List the customers that have a source of "ONLINE" and have been updated within the last week.
    </p>
    <p num="246">
      Scan produces a frequency distribution report of the contents of one or more columns in the selected data table or view.
      <br/>
      The user can elect to perform multiple single-level scans or a single multi-level scan.
      <br/>
      For example, Scan the first three zip code characters (also known as SCF) of all customers to be included in a marketing campaign.
    </p>
    <p num="247">System Files</p>
    <p num="248">System Configuration File:</p>
    <p num="249">
      The System Configuration File describes the possible named configurations of the present invention.
      <br/>
      Client processes (e.g. user applications or other processes of the present invention) must specify the system they want to connect to using one of these system names.
    </p>
    <p num="250">A system configuration consists of a system name with an associated list of the names of the hosts that participate in that system.</p>
    <p num="251">A host description consists of a host name with an associated list of agent descriptions, and a list of the names of the agents that should be launched immediately when the agent manager agent starts on that host.</p>
    <p num="252">An agent description consists of an agent name with an associated agent profile (discussed in a previous section), list of object descriptions, and list of additional frameworks to load to support the objects the agent will manage.</p>
    <p num="253">
      The System Configuration File is used both by interface-layer minion proxies (to locate their corresponding remote objects), and by object-layer agents (to determine their profile).
      <br/>
      This means that the System Configuration File must be in at least one shared location that is accessible across all machines that participate in the system.
    </p>
    <p num="254">
      The exact location of the System Configuration File is configurable from the run-time environment variable CONFIGFILE, which will contain the full path the directory where the system configuration file is located.
      <br/>
      The system must rely on this environment variable because we are running on both UNIX and NT platforms, which have differing file path syntax (in other words, it's hard for the system to assume default locations because it's not safe to assume anything about the file configuration on which the system software is running).
    </p>
    <p num="255">System Executable Files:</p>
    <p num="256">System executable files are located either locally on every machine or in a shared directory that is accessed over the network.</p>
    <p num="257">Client-Specific Executable Files:</p>
    <p num="258">Client-specific executable files for context-dependent agents are located in a path that is obtained from the client object in the context of the session that is making use of the agent (specifics forthcoming).</p>
    <p num="259">System Hardware Architecture</p>
    <p num="260">
      The present invention may use a hardware configuration consisting of a four processor Sun UltraEnterprise 4000 Unix server running SunOS 5.5.1, connected to desktop PCs running Microsoft Windows NT Workstation 4 0 (slashed zero)  The network connection between the machines is 10 Mbit Ethernet.
      <br/>
      The Sun Unix server hosts a disk array of 34 4.2 GB hard disks for storage of database information.
    </p>
    <p num="261">Import and Update Processes</p>
    <p num="262">
      Now referring to FIG. 9A, a block diagram illustrating the import and update processes begins in block 902.
      <br/>
      The incoming data is read from tapes in block 904 and if the read was unsuccessful, as determined in decision block 906, the inbound data set is rejected in block 908.
      <br/>
      If, however, the read was successful, a data dump is performed in block 910 and the data is reformatted in block 912 and recoded in block 914.
      <br/>
      If the reformatting and recoding of the data was not successful, as determined in decision block 916, processing loops back to the reformatting process of block 912 and processing continues as previously described.
      <br/>
      If, however, the reformatting and recoding was successful, the Scan process is performed in block 918, the names are parsed in block 920 and the ACEUS Batch process is performed in block 922.
      <br/>
      If the data is not ready to update the database, as determined in decision block 924, processing loops back to the reformatting process of block 912 and processing continues as previously described.
    </p>
    <p num="263">
      If, however, the data is ready, the user specifies the Project table to be executed in block 926.
      <br/>
      If a customer update is enabled, as determined in decision block 928, the user may select one of six mutually exclusive processes to perform.
      <br/>
      More specifically, the user may select a national change of address update 930, a telematch update 932, a PID suppression update 934, a name &amp; address suppression update 936, an add &amp; overlay customer update 938, and an add rentals &amp; prospects update 940.
      <br/>
      The update process is then completed in block 942 after performing the national change of address update 930, the telematch update 932, the PID suppression update 934 and the name &amp; address suppression update 936.
      <br/>
      The update process continues after the add &amp; overlay customer update 938 and the add rentals &amp; prospects update 940.
    </p>
    <p num="264">
      Now referring to FIG. 9B, the database is updated with customer responses in block 946 if the campaign update is enabled, as determined in decision block 944.
      <br/>
      After the campaign update of block 946 is complete, or if the campaign update is not enabled, as determined in decision block 944, the database is updated with customer purchase transactions in block 950 if the purchase update is enabled, as determined in decision block 948.
      <br/>
      After the purchase update of block 950 is complete, or if the purchase update is not enabled, as determined in decision block 948, the database is then updated with customer brand preferences in block 954 if the brand update is enabled, as determined in decision block 952.
      <br/>
      After the brand update of block 954 is complete, or if the brand update is not enabled, as determined in decision block 952, the database is updated with customer screener responses in block 958 if the screener update is enabled, as determined in decision block 956.
      <br/>
      After the screener update of block 958 is complete, or if the screener update is not enabled, as determined in decision block 956, the update is complete in block 960.
    </p>
    <p num="265">Query and Extraction Process</p>
    <p num="266">
      Referring to FIG. 10, a block diagram of the query and extraction process is illustrated and begins in block 1002.
      <br/>
      The Count process is performed in block 1004 and the SQL Select process is performed in block 1006.
      <br/>
      Thereafter, the user may select a Table Combine process in block 1008, a Table Delete Duplications process in block 1010 or a Table Match process in block 1012.
      <br/>
      After the completion of the selected process, the user may execute another of these processes, as determined in decision block 1014.
      <br/>
      If another process is to be run, processing loops back to the SQL Select process in block 1006 and the above described process repeats.
      <br/>
      If, however, the user elects to not execute another, as determined in decision block 1014, the Scan process is performed in block 1016 and the List process is performed in block 1018.
      <br/>
      If the extracted data is not acceptable, as determined in decision block 1020, processing returns to the SQL Select process in block 1006 and the above described process repeats.
      <br/>
      If, however, the extracted data is acceptable, the data is exported in block 1022 and subjected to a layout process in block 1024.
      <br/>
      The data is then dumped in block 1026 to either an electronic data shipment, such as ftp, uucp, zmodem, disks, etc. in block 1028 or to tape in block 1030.
      <br/>
      In either case, processing ends in block 1032.
    </p>
    <p num="267">Database Maintenance Process</p>
    <p num="268">
      Now referring to FIG. 11, a database maintenance process is illustrated and begins in block 1102.
      <br/>
      Thereafter, the user can run a Customer Refresh process in block 1104, a Rental Expression Removal process in block 1106 or a Segmentation Post-Process in block 1108.
      <br/>
      After the completion of the selected process, the user can execute another process as determined in decision block 1110.
      <br/>
      If another process is to be executed, processing loops back and the above described process repeats.
      <br/>
      If, however, another process is not to be executed, as determined in decision block 1110, processing ends in block 1112.
    </p>
    <p num="269">Project Maintenance Process</p>
    <p num="270">
      Referring to FIG. 12, a project maintenance process is illustrated and begins in block 1202.
      <br/>
      Thereafter, the user can run a SQL Delete process in block 1204, a SQL Update process in block 1206, an Index process in block 1208, an Archive Project process in block 1210, and a Un-Archive process in block 1212.
      <br/>
      After the completion of the selected process, the user can execute another process as determined in decision block 1214.
      <br/>
      If another process is to be executed, processing loops back and the above described process repeats.
      <br/>
      If, however, another process is not to be executed, as determined in decision block 1214, processing ends in block 1216.
    </p>
    <p num="271">Campaign Management Using an Event Transition Network</p>
    <p num="272">
      Referring now to FIG. 13, a flow chart illustrating the campaign management processes is generally denoted by the numeral 1300.
      <br/>
      The illustrated process can be started either in block 1302 or block 1312.
      <br/>
      In block 1302, the EtnPrep process prepares a user-specified project table for ETN state assignment by adding a column for the States (ETNstate), removing suppressed customer rows and enforcing uniqueness by removing any duplicate customer rows.
      <br/>
      The user then may perform various queries and extraction processes in block 1304.
      <br/>
      The query and extraction processes were previously described in reference to FIG. 10.
    </p>
    <p num="273">
      The EtnAssign process assigns ETN states to rows (customers) in the extracted table and creates an assignment report in block 1306.
      <br/>
      The user may at this point perform optional quality assurance checks beyond the assignment report in block 1308.
      <br/>
      Thereafter, the EtnEnroll process enrolls customers in a marketing program by creating ETN enrollment entries (one for each customer assigned to an ETN state) in block 1310.
      <br/>
      The enrollment process creates associations between customers and ETN states within the client database that are then stored in the table CustCampgnAssoc (FIG. 7A, 470).
      <br/>
      The EtnEnroll process in block 1310 is also performed after the EtnTransitBatch process in block 1312.
      <br/>
      The EtnTransitBatch process in block 1312 moves customers, using the ETN transition rules, from one state to another for all eligible participants in the CustCampgnAssoc table (FIG. 7A, 470).
      <br/>
      The EtnTransitBatch process in 1312 can be performed on all campaigns or just a single campaign.
    </p>
    <p num="274">
      An optional SQLSelect process can be used in block 1314 to pull point in time data based on the customer ID in the communications table.
      <br/>
      The CommGenerate process in block 1316 generates one or more communication records for unposted communications.
      <br/>
      The communications are placed in a new project table with added delivery information such as name, address, phone, e-mail and the relevant communications codes.
      <br/>
      The necessary rows are posted to the DBCommOut table (FIG. 7A, 474), and suppression by household is also performed.
      <br/>
      Another quality assurance check may be run in block 1318 to count the communications assigned and the total rows in the communication table.
      <br/>
      The delivery information can also be checked for missing data, such as state, zip code or name.
    </p>
    <p num="275">
      An Export process is then performed in block 1320 to export the communications table to a flat file using a specified format, such as ASCII or EBCDIC.
      <br/>
      The Transport Data process in block 1322 sends the data electronically or by copying the data to tape, which is then shipped by courier.
    </p>
    <p num="276">
      Referring to FIG. 14 a block diagram of a possible event transition network example is illustrated and generally denoted by the numeral 1400.
      <br/>
      ETN State 0 in block 1402 is the starting point for the campaign and is used to enroll or move the customers into the campaign.
      <br/>
      As shown in this example, ETN State 0 in block 1402 has two ETN Rules (State 0-Rule 1 represented by line 1404 and State 0-Rule 2 represented by line 1406).
      <br/>
      After a given period of time has elapsed that is reasonably sufficient to allow new data to be received and used to update the database, the ETNTransitBatch (FIG. 13, 1312) process is used to apply State 0-Rule 1 (line 1404) and State 0-Rule 2 (line 1406) to the customers in ETN State 0 in block 1402.
      <br/>
      All customers in ETN State 0 in block 1402 that match State 0-Rule 1 (line 1404) are moved to ETN State 1A in block 1408.
      <br/>
      Similarly, all customers in ETN State 0 in block 1402 that match State 0-Rule 2 (line 1406) are moved to ETN State 1B in block 1410.
    </p>
    <p num="277">
      ETN State 1A in block 1408 has two ETN Rules (State 1A-Rule 1 represented by line 1412 and State 1A-Rule 2 represented by line 1414).
      <br/>
      ETN State 1B in block 1410 has one ETN Rule (State 1B-Rule 1 represented by line 1416).
      <br/>
      The next time the ETNTransitBatch (FIG. 13, 1312) process is performed, additional customers may move out of ETN State 0 in block 1402 to either ETN State 1A in block 1408 or ETN State 1B in block 1410 as previously described.
      <br/>
      In addition, the customers in ETN State 1A in block 1408 that match State 1A-Rule 1 (line 1412) are moved to ETN State 2A in block 1418; the customers in ETN State 1A in block 1408 that match State 1A-Rule 2 (line 1414) are moved to ETN State 2B in block 1420; and the customers in ETN State 1B in block 1410 that match State 1B-Rule 1 (line 1416) are moved to ETN State 2C in block 1422.
      <br/>
      Customers may also move from any of these States (blocks 1408, 1410, 1418, 1420 or 1422) to the ETN State TERM in block 1424 based on other rules.
      <br/>
      For example, customers may move to ETN State TERM in block 1424 if there has been no response within a given time period, or a perhaps a negative response was received.
      <br/>
      This process repeats until the campaign is over.
    </p>
    <p num="278">Although preferred embodiments of the invention have been described in detail, it will be understood by those skilled in the art that various modifications can be made therein without departing from the spirit and scope of the invention as set forth in the appended claims.</p>
  </description>
  <claims format="original" lang="en" id="claim_en">
    <claim num="1">
      <claim-text>What is claimed is:</claim-text>
      <claim-text>1.</claim-text>
      <claim-text>A method for managing data comprising the steps of:</claim-text>
      <claim-text>storing one or more data records in a database, each data record having one or more elements; creating a management plan having two or more states, each state having one or more rules, each rule defining one of the states in the management plan as a next state and a logical condition based on a trigger element and a trigger value; selecting one or more data records from the database and assigning each of the selected data records to one of the states in the management plan; updating the values of the one or more elements of each data record with new data;</claim-text>
      <claim-text>and moving each selected data record to the next state in the management plan whenever the logical condition of one of the rules for the state assigned to the selected data record is satisfied based on the trigger value and the updated value of the trigger element.</claim-text>
    </claim>
    <claim num="2">
      <claim-text>2. The method for managing data, as recited in claim 1, wherein the steps of updating the values of the one or more elements of each data record with new data and moving each selected data record to the next state in the management plan whenever the logical condition of one of the rules for the state assigned to the selected data record is satisfied based on the trigger value and the updated value of the trigger element are repeated until the management plan is terminated.</claim-text>
    </claim>
    <claim num="3">
      <claim-text>3. The method for managing data as recited in claim 1, wherein the states and rules can be changed dynamically.</claim-text>
    </claim>
    <claim num="4">
      <claim-text>4. The method for managing data as recited in claim 1, wherein the management plan can be changed online.</claim-text>
    </claim>
    <claim num="5">
      <claim-text>5. The method for managing data as recited in claim 1, wherein the next state is a termination state.</claim-text>
    </claim>
    <claim num="6">
      <claim-text>6. The method for managing data as recited in claim 1, wherein each data record corresponds to a customer.</claim-text>
    </claim>
    <claim num="7">
      <claim-text>7. The method for managing data as recited in claim 1, wherein: the data records include marketing data;</claim-text>
      <claim-text>and the management plan comprises a marketing campaign.</claim-text>
    </claim>
    <claim num="8">
      <claim-text>8. The method for managing data as recited in claim 1, further comprising the step of generating one or more communications whenever the selected data record is moved to the next state.</claim-text>
    </claim>
    <claim num="9">
      <claim-text>9. A computer program embodied on a computer-readable medium for managing data, the computer program comprising: a code segment for storing one or more data records in a database, each data record having one or more elements; a code segment for creating a management plan having two or more states, each state having one or more rules, each rule defining one of the states in the management plan as a next state and a logical condition based on a trigger element and a trigger value; a code segment for selecting one or more data records from the database and assigning each of the selected data records to one of the states in the management plan; a code segment for updating the values of the one or more elements of each data record with new data;</claim-text>
      <claim-text>and a code segment for moving each selected data record to the next state in the management plan whenever the logical condition of one of the rules for the state assigned to the selected data record is satisfied based on the trigger value and the updated value of the trigger element.</claim-text>
    </claim>
    <claim num="10">
      <claim-text>10. The computer program for managing data as recited in claim 9, wherein the states and rules can be changed dynamically.</claim-text>
    </claim>
    <claim num="11">
      <claim-text>11. The computer program for managing data, as recited in claim 9, wherein the management plan can be changed online.</claim-text>
    </claim>
    <claim num="12">
      <claim-text>12. The computer program for managing data, as recited in claim 9, wherein each data record corresponds to a customer.</claim-text>
    </claim>
    <claim num="13">
      <claim-text>13. The computer program for managing data as recited in claim 9, wherein: the data records include marketing data;</claim-text>
      <claim-text>and the management plan comprises a marketing campaign.</claim-text>
    </claim>
    <claim num="14">
      <claim-text>14. The computer program for managing data as recited in claim 9, further comprising a code segment for generating one or more communications whenever the selected data record is moved to the next state.</claim-text>
    </claim>
  </claims>
</questel-patent-document>